
DRON 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e450  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  0801e720  0801e720  00024720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020538  08020538  00026538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020540  08020540  00026540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020544  08020544  00026544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020548  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008cc  24000078  080205c0  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000944  080205c0  00027944  2**0
                  ALLOC
  9 .IRAM         0000421d  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  000497a8  2**0
                  CONTENTS
 11 .RAM1         00021860  24000f48  24000f48  00027f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  000497a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031f6c  00000000  00000000  000497d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f0c  00000000  00000000  0007b742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024f8  00000000  00000000  00081650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ca2  00000000  00000000  00083b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003cb43  00000000  00000000  000857ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038b6d  00000000  00000000  000c232d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e105  00000000  00000000  000fae9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00268f9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a23c  00000000  00000000  00268fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00273220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e708 	.word	0x0801e708

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e708 	.word	0x0801e708

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:
static I2C_HandleTypeDef *hi2c_BMP180;
extern BMP180_Struct BMP180;
//extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
//extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00d fd08 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	//uint8_t data;
	//data = 0xF4;

	//HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, 0xF4, 1, &data, 1, 1);//important set oversampling to 3
	BMP180_read_calliberation_data();
 80006de:	f000 f92f 	bl	8000940 <BMP180_read_calliberation_data>
//4	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);


	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00d fcd2 	bl	800e0d0 <HAL_I2C_Mem_Read>
	BMP180.Callibration_Regs.UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6253      	str	r3, [r2, #36]	@ 0x24
	return BMP180.Callibration_Regs.UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	0000006c 	.word	0x0000006c

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <BMP180_READ_pres+0x44>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00d fcaf 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return BMP180.Callibration_Regs.UP = (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
 8000782:	461a      	mov	r2, r3
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <BMP180_READ_pres+0x48>)
 8000786:	621a      	str	r2, [r3, #32]
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <BMP180_READ_pres+0x48>)
 800078a:	6a1b      	ldr	r3, [r3, #32]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	24000094 	.word	0x24000094
 8000798:	0000006c 	.word	0x0000006c

0800079c <BMP180_READ_temp_IT>:

void BMP180_READ_temp_IT(void){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180.Data_Temp_IT, 2);
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <BMP180_READ_temp_IT+0x2c>)
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	2302      	movs	r3, #2
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <BMP180_READ_temp_IT+0x30>)
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2301      	movs	r3, #1
 80007b0:	22f6      	movs	r2, #246	@ 0xf6
 80007b2:	21ee      	movs	r1, #238	@ 0xee
 80007b4:	f00d fe30 	bl	800e418 <HAL_I2C_Mem_Read_IT>
	BMP180.BMP180_IRQ = 1;
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <BMP180_READ_temp_IT+0x34>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	24000094 	.word	0x24000094
 80007cc:	000000c7 	.word	0x000000c7
 80007d0:	0000006c 	.word	0x0000006c

080007d4 <BMP180_READ_pres_IT>:

void BMP180_READ_pres_IT(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180.Data_Press_IT, 3);
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <BMP180_READ_pres_IT+0x2c>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	2303      	movs	r3, #3
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <BMP180_READ_pres_IT+0x30>)
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	22f6      	movs	r2, #246	@ 0xf6
 80007ea:	21ee      	movs	r1, #238	@ 0xee
 80007ec:	f00d fe14 	bl	800e418 <HAL_I2C_Mem_Read_IT>
	BMP180.BMP180_IRQ = 2;
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <BMP180_READ_pres_IT+0x34>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	24000094 	.word	0x24000094
 8000804:	000000c4 	.word	0x000000c4
 8000808:	0000006c 	.word	0x0000006c

0800080c <BMP180_GET_temp_IT>:

uint16_t BMP180_GET_temp_IT(void){
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	BMP180.Callibration_Regs.UT = ((BMP180.Data_Temp_IT[0]<<8) + BMP180.Data_Temp_IT[1]);
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <BMP180_GET_temp_IT+0x28>)
 8000812:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <BMP180_GET_temp_IT+0x28>)
 800081a:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 800081e:	4413      	add	r3, r2
 8000820:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <BMP180_GET_temp_IT+0x28>)
 8000822:	6253      	str	r3, [r2, #36]	@ 0x24
	return BMP180.Callibration_Regs.UT;
 8000824:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <BMP180_GET_temp_IT+0x28>)
 8000826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000828:	b29b      	uxth	r3, r3
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	0000006c 	.word	0x0000006c

08000838 <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	return BMP180.Callibration_Regs.UP = (((BMP180.Data_Press_IT[0]<<16) + (BMP180.Data_Press_IT[1]<<8) + BMP180.Data_Press_IT[2]) >> 5);
 800083c:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <BMP180_GET_pres_IT+0x34>)
 800083e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8000842:	041a      	lsls	r2, r3, #16
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <BMP180_GET_pres_IT+0x34>)
 8000846:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	4413      	add	r3, r2
 800084e:	4a07      	ldr	r2, [pc, #28]	@ (800086c <BMP180_GET_pres_IT+0x34>)
 8000850:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8000854:	4413      	add	r3, r2
 8000856:	115b      	asrs	r3, r3, #5
 8000858:	461a      	mov	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <BMP180_GET_pres_IT+0x34>)
 800085c:	621a      	str	r2, [r3, #32]
 800085e:	4b03      	ldr	r3, [pc, #12]	@ (800086c <BMP180_GET_pres_IT+0x34>)
 8000860:	6a1b      	ldr	r3, [r3, #32]
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	0000006c 	.word	0x0000006c

08000870 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <BMP180_start_measurment_temp+0x2c>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2364      	movs	r3, #100	@ 0x64
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	2301      	movs	r3, #1
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	22f4      	movs	r2, #244	@ 0xf4
 800088e:	21ee      	movs	r1, #238	@ 0xee
 8000890:	f00d fb0a 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	24000094 	.word	0x24000094

080008a0 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 80008a6:	23f4      	movs	r3, #244	@ 0xf4
 80008a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <BMP180_start_measurment_pres+0x2c>)
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	2364      	movs	r3, #100	@ 0x64
 80008b0:	9302      	str	r3, [sp, #8]
 80008b2:	2301      	movs	r3, #1
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	22f4      	movs	r2, #244	@ 0xf4
 80008be:	21ee      	movs	r1, #238	@ 0xee
 80008c0:	f00d faf2 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000094 	.word	0x24000094

080008d0 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 80008d6:	23f4      	movs	r3, #244	@ 0xf4
 80008d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <BMP180_start_measurment_pres_IT+0x30>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	2301      	movs	r3, #1
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2301      	movs	r3, #1
 80008e8:	22f4      	movs	r2, #244	@ 0xf4
 80008ea:	21ee      	movs	r1, #238	@ 0xee
 80008ec:	f00d fd0a 	bl	800e304 <HAL_I2C_Mem_Write_IT>
	BMP180.I2C_Tx_IRQ = 2;
 80008f0:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <BMP180_start_measurment_pres_IT+0x34>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000094 	.word	0x24000094
 8000904:	0000006c 	.word	0x0000006c

08000908 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 800090e:	232e      	movs	r3, #46	@ 0x2e
 8000910:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <BMP180_start_measurment_temp_IT+0x30>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2301      	movs	r3, #1
 8000920:	22f4      	movs	r2, #244	@ 0xf4
 8000922:	21ee      	movs	r1, #238	@ 0xee
 8000924:	f00d fcee 	bl	800e304 <HAL_I2C_Mem_Write_IT>
	BMP180.I2C_Tx_IRQ = 1;
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <BMP180_start_measurment_temp_IT+0x34>)
 800092a:	2201      	movs	r2, #1
 800092c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	24000094 	.word	0x24000094
 800093c:	0000006c 	.word	0x0000006c

08000940 <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000958:	23aa      	movs	r3, #170	@ 0xaa
 800095a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 800095c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a4c <BMP180_read_calliberation_data+0x10c>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	8afa      	ldrh	r2, [r7, #22]
 8000962:	2364      	movs	r3, #100	@ 0x64
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	2316      	movs	r3, #22
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	463b      	mov	r3, r7
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2301      	movs	r3, #1
 8000970:	21ee      	movs	r1, #238	@ 0xee
 8000972:	f00d fbad 	bl	800e0d0 <HAL_I2C_Mem_Read>

	BMP180.Callibration_Regs.AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 8000976:	783b      	ldrb	r3, [r7, #0]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	b21a      	sxth	r2, r3
 800097c:	787b      	ldrb	r3, [r7, #1]
 800097e:	b21b      	sxth	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b21a      	sxth	r2, r3
 8000984:	4b32      	ldr	r3, [pc, #200]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 8000986:	80da      	strh	r2, [r3, #6]
	BMP180.Callibration_Regs.AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 8000988:	78bb      	ldrb	r3, [r7, #2]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b21a      	sxth	r2, r3
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b21a      	sxth	r2, r3
 8000996:	4b2e      	ldr	r3, [pc, #184]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 8000998:	811a      	strh	r2, [r3, #8]
	BMP180.Callibration_Regs.AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b21a      	sxth	r2, r3
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 80009aa:	815a      	strh	r2, [r3, #10]
	BMP180.Callibration_Regs.AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 80009be:	801a      	strh	r2, [r3, #0]
	BMP180.Callibration_Regs.AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 80009c0:	7a3b      	ldrb	r3, [r7, #8]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	7a7b      	ldrb	r3, [r7, #9]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 80009d2:	805a      	strh	r2, [r3, #2]
	BMP180.Callibration_Regs.AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	4313      	orrs	r3, r2
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 80009e6:	809a      	strh	r2, [r3, #4]
	BMP180.Callibration_Regs.B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 80009e8:	7b3b      	ldrb	r3, [r7, #12]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	b21a      	sxth	r2, r3
 80009ee:	7b7b      	ldrb	r3, [r7, #13]
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 80009f8:	819a      	strh	r2, [r3, #12]
	BMP180.Callibration_Regs.B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 80009fa:	7bbb      	ldrb	r3, [r7, #14]
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 8000a0a:	81da      	strh	r2, [r3, #14]
	BMP180.Callibration_Regs.MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000a0c:	7c3b      	ldrb	r3, [r7, #16]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	7c7b      	ldrb	r3, [r7, #17]
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21a      	sxth	r2, r3
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 8000a1c:	821a      	strh	r2, [r3, #16]
	BMP180.Callibration_Regs.MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 8000a1e:	7cbb      	ldrb	r3, [r7, #18]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	7cfb      	ldrb	r3, [r7, #19]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21a      	sxth	r2, r3
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 8000a2e:	825a      	strh	r2, [r3, #18]
	BMP180.Callibration_Regs.MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 8000a30:	7d3b      	ldrb	r3, [r7, #20]
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	b21a      	sxth	r2, r3
 8000a36:	7d7b      	ldrb	r3, [r7, #21]
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <BMP180_read_calliberation_data+0x110>)
 8000a40:	829a      	strh	r2, [r3, #20]
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	24000094 	.word	0x24000094
 8000a50:	0000006c 	.word	0x0000006c

08000a54 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
	float temp;
	BMP180.Callibration_Regs.X1 = ((temperature - BMP180.Callibration_Regs.AC6) * BMP180.Callibration_Regs.AC5)/32768;
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000a62:	8892      	ldrh	r2, [r2, #4]
 8000a64:	1a9b      	subs	r3, r3, r2
 8000a66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000a68:	8852      	ldrh	r2, [r2, #2]
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da03      	bge.n	8000a7a <BMP180_GET_temp+0x26>
 8000a72:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000a76:	441a      	add	r2, r3
 8000a78:	4613      	mov	r3, r2
 8000a7a:	13db      	asrs	r3, r3, #15
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (BMP180.Callibration_Regs.MC * 2048)/(BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.MD);
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000a84:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a88:	02da      	lsls	r2, r3, #11
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a8e:	4915      	ldr	r1, [pc, #84]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000a90:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8000a94:	440b      	add	r3, r1
 8000a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	BMP180.Callibration_Regs.B5 = BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.X2;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000aa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000aaa:	6313      	str	r3, [r2, #48]	@ 0x30
	temp = (BMP180.Callibration_Regs.B5 + 8)/16;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <BMP180_GET_temp+0x90>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	da00      	bge.n	8000ab8 <BMP180_GET_temp+0x64>
 8000ab6:	330f      	adds	r3, #15
 8000ab8:	111b      	asrs	r3, r3, #4
 8000aba:	ee07 3a90 	vmov	s15, r3
 8000abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac2:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp/10.0;
 8000ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ace:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ad2:	eef0 7a66 	vmov.f32	s15, s13
}
 8000ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	0000006c 	.word	0x0000006c

08000ae8 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
	float pres;
	BMP180.Callibration_Regs.B6 = BMP180.Callibration_Regs.B5-4000;
 8000af2:	4b80      	ldr	r3, [pc, #512]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afa:	4a7e      	ldr	r2, [pc, #504]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000afc:	6353      	str	r3, [r2, #52]	@ 0x34
	BMP180.Callibration_Regs.X1 = (BMP180.Callibration_Regs.B2 * BMP180.Callibration_Regs.B6/4096)/2048;
 8000afe:	4b7d      	ldr	r3, [pc, #500]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b00:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b7b      	ldr	r3, [pc, #492]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0a:	fb02 f303 	mul.w	r3, r2, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	da02      	bge.n	8000b18 <BMP180_GET_pres+0x30>
 8000b12:	4a79      	ldr	r2, [pc, #484]	@ (8000cf8 <BMP180_GET_pres+0x210>)
 8000b14:	441a      	add	r2, r3
 8000b16:	4613      	mov	r3, r2
 8000b18:	15db      	asrs	r3, r3, #23
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b75      	ldr	r3, [pc, #468]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = BMP180.Callibration_Regs.AC2*BMP180.Callibration_Regs.B6/(2048);
 8000b20:	4b74      	ldr	r3, [pc, #464]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b72      	ldr	r3, [pc, #456]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da01      	bge.n	8000b38 <BMP180_GET_pres+0x50>
 8000b34:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b38:	12db      	asrs	r3, r3, #11
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b6d      	ldr	r3, [pc, #436]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	BMP180.Callibration_Regs.X3 = BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.X2;
 8000b40:	4b6c      	ldr	r3, [pc, #432]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b44:	4b6b      	ldr	r3, [pc, #428]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b4c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	BMP180.Callibration_Regs.B3 = (((BMP180.Callibration_Regs.AC1*4+BMP180.Callibration_Regs.X3)<<3)+2)/4;
 8000b4e:	4b69      	ldr	r3, [pc, #420]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b54:	009a      	lsls	r2, r3, #2
 8000b56:	4b67      	ldr	r3, [pc, #412]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	3302      	adds	r3, #2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	da00      	bge.n	8000b66 <BMP180_GET_pres+0x7e>
 8000b64:	3303      	adds	r3, #3
 8000b66:	109b      	asrs	r3, r3, #2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b62      	ldr	r3, [pc, #392]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b6c:	639a      	str	r2, [r3, #56]	@ 0x38
	BMP180.Callibration_Regs.X1 = BMP180.Callibration_Regs.AC3*BMP180.Callibration_Regs.B6/8192;
 8000b6e:	4b61      	ldr	r3, [pc, #388]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b70:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b5f      	ldr	r3, [pc, #380]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da03      	bge.n	8000b8a <BMP180_GET_pres+0xa2>
 8000b82:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b86:	441a      	add	r2, r3
 8000b88:	4613      	mov	r3, r2
 8000b8a:	135b      	asrs	r3, r3, #13
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b59      	ldr	r3, [pc, #356]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (BMP180.Callibration_Regs.B1 * (BMP180.Callibration_Regs.B6*BMP180.Callibration_Regs.B6/(4096)))/(65536);
 8000b92:	4b58      	ldr	r3, [pc, #352]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b94:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4b56      	ldr	r3, [pc, #344]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9e:	4a55      	ldr	r2, [pc, #340]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000ba0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	da01      	bge.n	8000bae <BMP180_GET_pres+0xc6>
 8000baa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bae:	131b      	asrs	r3, r3, #12
 8000bb0:	fb01 f303 	mul.w	r3, r1, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da03      	bge.n	8000bc0 <BMP180_GET_pres+0xd8>
 8000bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bbc:	441a      	add	r2, r3
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	141b      	asrs	r3, r3, #16
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	BMP180.Callibration_Regs.X3 = ((BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2)+2)/4;
 8000bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bcc:	4b49      	ldr	r3, [pc, #292]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd0:	4413      	add	r3, r2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da00      	bge.n	8000bda <BMP180_GET_pres+0xf2>
 8000bd8:	3303      	adds	r3, #3
 8000bda:	109b      	asrs	r3, r3, #2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b45      	ldr	r3, [pc, #276]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000be0:	63da      	str	r2, [r3, #60]	@ 0x3c
	BMP180.Callibration_Regs.B4 = BMP180.Callibration_Regs.AC4* (uint32_t)(BMP180.Callibration_Regs.X3+32768)/(32768);
 8000be2:	4b44      	ldr	r3, [pc, #272]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b42      	ldr	r3, [pc, #264]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000bf0:	fb02 f303 	mul.w	r3, r2, r3
 8000bf4:	0bdb      	lsrs	r3, r3, #15
 8000bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000bf8:	6193      	str	r3, [r2, #24]
	BMP180.Callibration_Regs.B7 = ((uint32_t)BMP180.Callibration_Regs.UP-BMP180.Callibration_Regs.B3)*(50000>>3);
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000bfc:	6a1b      	ldr	r3, [r3, #32]
 8000bfe:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c08:	fb02 f303 	mul.w	r3, r2, r3
 8000c0c:	4a39      	ldr	r2, [pc, #228]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c0e:	61d3      	str	r3, [r2, #28]
	if (BMP180.Callibration_Regs.B7 < 0x80000000){
 8000c10:	4b38      	ldr	r3, [pc, #224]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0d      	blt.n	8000c34 <BMP180_GET_pres+0x14c>
		pres = (BMP180.Callibration_Regs.B7*2)/BMP180.Callibration_Regs.B4;
 8000c18:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	005a      	lsls	r2, r3, #1
 8000c1e:	4b35      	ldr	r3, [pc, #212]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	ee07 3a90 	vmov	s15, r3
 8000c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c2e:	edc7 7a03 	vstr	s15, [r7, #12]
 8000c32:	e00c      	b.n	8000c4e <BMP180_GET_pres+0x166>
	}
	else{
		pres = (BMP180.Callibration_Regs.B7/BMP180.Callibration_Regs.B4)*2;
 8000c34:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c36:	69da      	ldr	r2, [r3, #28]
 8000c38:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c4a:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	BMP180.Callibration_Regs.X1 = (pres/(256))*(pres/(256));
 8000c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c52:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000cfc <BMP180_GET_pres+0x214>
 8000c56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c5a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c5e:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 8000cfc <BMP180_GET_pres+0x214>
 8000c62:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c6e:	ee17 2a90 	vmov	r2, s15
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X1 = (BMP180.Callibration_Regs.X1*3038)/(65536);
 8000c76:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c7a:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c7e:	fb02 f303 	mul.w	r3, r2, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da03      	bge.n	8000c8e <BMP180_GET_pres+0x1a6>
 8000c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c8a:	441a      	add	r2, r3
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	141b      	asrs	r3, r3, #16
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000c94:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (-7357*pres)/(65536);
 8000c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c9a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000d00 <BMP180_GET_pres+0x218>
 8000c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ca2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000d04 <BMP180_GET_pres+0x21c>
 8000ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cae:	ee17 2a90 	vmov	r2, s15
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
	pres = pres + (BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2+3791)/(16);
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000cb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <BMP180_GET_pres+0x20c>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	da00      	bge.n	8000cca <BMP180_GET_pres+0x1e2>
 8000cc8:	330f      	adds	r3, #15
 8000cca:	111b      	asrs	r3, r3, #4
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a03 	vstr	s15, [r7, #12]


	return pres;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	ee07 3a90 	vmov	s15, r3
}
 8000ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	0000006c 	.word	0x0000006c
 8000cf8:	007fffff 	.word	0x007fffff
 8000cfc:	43800000 	.word	0x43800000
 8000d00:	c5e5e800 	.word	0xc5e5e800
 8000d04:	47800000 	.word	0x47800000

08000d08 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	float temperature, pressure, pres;
	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d10:	f7ff fdae 	bl	8000870 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d14:	200a      	movs	r0, #10
 8000d16:	f007 febb 	bl	8008a90 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d1a:	f7ff fcf7 	bl	800070c <BMP180_READ_temp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d28:	edc7 7a05 	vstr	s15, [r7, #20]
	BMP180.temp = BMP180_GET_temp(temperature);
 8000d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d34:	ee17 3a90 	vmov	r3, s15
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fe8a 	bl	8000a54 <BMP180_GET_temp>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <BMP180_CALIBRATION+0x84>)
 8000d46:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	BMP180_start_measurment_pres();
 8000d4a:	f7ff fda9 	bl	80008a0 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000d4e:	201e      	movs	r0, #30
 8000d50:	f007 fe9e 	bl	8008a90 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000d54:	f7ff fcfc 	bl	8000750 <BMP180_READ_pres>
 8000d58:	ee07 0a90 	vmov	s15, r0
 8000d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d60:	edc7 7a04 	vstr	s15, [r7, #16]
	pres = BMP180_GET_pres(pressure);
 8000d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d6c:	ee17 3a90 	vmov	r3, s15
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff feb8 	bl	8000ae8 <BMP180_GET_pres>
 8000d78:	ed87 0a03 	vstr	s0, [r7, #12]
	//}
	*firstpres = pres;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	601a      	str	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	0000006c 	.word	0x0000006c

08000d90 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
	float height; // metry
//	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
//	height = (BMP180.ampritude/factor);
	height = 44330*(1-pow((BMP180.pres/BMP180.startpres), 1/5.255));
 8000d96:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <BMP180_GET_height+0x68>)
 8000d98:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <BMP180_GET_height+0x68>)
 8000d9e:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8000da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000daa:	ed9f 1b0f 	vldr	d1, [pc, #60]	@ 8000de8 <BMP180_GET_height+0x58>
 8000dae:	eeb0 0b47 	vmov.f64	d0, d7
 8000db2:	f01d f91d 	bl	801dff0 <pow>
 8000db6:	eeb0 7b40 	vmov.f64	d7, d0
 8000dba:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000dbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000dc2:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000df0 <BMP180_GET_height+0x60>
 8000dc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dce:	edc7 7a01 	vstr	s15, [r7, #4]

	return height;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	ee07 3a90 	vmov	s15, r3
}
 8000dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	f3af 8000 	nop.w
 8000de8:	ccd9456c 	.word	0xccd9456c
 8000dec:	3fc85b95 	.word	0x3fc85b95
 8000df0:	00000000 	.word	0x00000000
 8000df4:	40e5a540 	.word	0x40e5a540
 8000df8:	0000006c 	.word	0x0000006c

08000dfc <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d907      	bls.n	8000e20 <ESC_1_SPEED+0x24>
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e16:	4293      	cmp	r3, r2
 8000e18:	bf28      	it	cs
 8000e1a:	4613      	movcs	r3, r2
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	e001      	b.n	8000e24 <ESC_1_SPEED+0x28>
 8000e20:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e24:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <ESC_1_SPEED+0x40>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	24000098 	.word	0x24000098

08000e40 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d907      	bls.n	8000e64 <ESC_2_SPEED+0x24>
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	bf28      	it	cs
 8000e5e:	4613      	movcs	r3, r2
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	e001      	b.n	8000e68 <ESC_2_SPEED+0x28>
 8000e64:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e68:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <ESC_2_SPEED+0x40>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	88fa      	ldrh	r2, [r7, #6]
 8000e72:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	24000098 	.word	0x24000098

08000e84 <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d907      	bls.n	8000ea8 <ESC_3_SPEED+0x24>
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	bf28      	it	cs
 8000ea2:	4613      	movcs	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	e001      	b.n	8000eac <ESC_3_SPEED+0x28>
 8000ea8:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000eac:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000eae:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <ESC_3_SPEED+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	24000098 	.word	0x24000098

08000ec8 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d907      	bls.n	8000eec <ESC_4_SPEED+0x24>
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	bf28      	it	cs
 8000ee6:	4613      	movcs	r3, r2
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	e001      	b.n	8000ef0 <ESC_4_SPEED+0x28>
 8000eec:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ef0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000ef2:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <ESC_4_SPEED+0x40>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	24000098 	.word	0x24000098

08000f0c <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f14:	4a20      	ldr	r2, [pc, #128]	@ (8000f98 <ESC_INT+0x8c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <ESC_INT+0x8c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f015 f90d 	bl	8016140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f26:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <ESC_INT+0x8c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f015 f907 	bl	8016140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <ESC_INT+0x8c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2108      	movs	r1, #8
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f015 f901 	bl	8016140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f3e:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <ESC_INT+0x8c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	210c      	movs	r1, #12
 8000f44:	4618      	mov	r0, r3
 8000f46:	f015 f8fb 	bl	8016140 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <ESC_INT+0x8c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f54:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <ESC_INT+0x8c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f60:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <ESC_INT+0x8c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f6c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <ESC_INT+0x8c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f78:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f80:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <ESC_INT+0x90>)
 8000f82:	f00c fec1 	bl	800dd08 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000f86:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f8a:	f007 fd81 	bl	8008a90 <HAL_Delay>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	24000098 	.word	0x24000098
 8000f9c:	58021800 	.word	0x58021800

08000fa0 <HMC5883L_Init>:


static I2C_HandleTypeDef *hi2c_HMC5883L;
extern HMC5883L_Struct HMC5883L;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8001058 <HMC5883L_Init+0xb8>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			15 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x70;
 8000fb2:	2370      	movs	r3, #112	@ 0x70
 8000fb4:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fb6:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <HMC5883L_Init+0xb8>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	f107 030f 	add.w	r3, r7, #15
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	213c      	movs	r1, #60	@ 0x3c
 8000fce:	f00c ff6b 	bl	800dea8 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xA0;
 8000fd2:	23a0      	movs	r3, #160	@ 0xa0
 8000fd4:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 8000fd6:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <HMC5883L_Init+0xb8>)
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	f107 030f 	add.w	r3, r7, #15
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2201      	movs	r2, #1
 8000fec:	213c      	movs	r1, #60	@ 0x3c
 8000fee:	f00c ff5b 	bl	800dea8 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HMC5883L_Init+0xb8>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 030f 	add.w	r3, r7, #15
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2202      	movs	r2, #2
 800100c:	213c      	movs	r1, #60	@ 0x3c
 800100e:	f00c ff4b 	bl	800dea8 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f007 fd3a 	bl	8008a90 <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HMC5883L_Init+0xb8>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	f107 030e 	add.w	r3, r7, #14
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	220a      	movs	r2, #10
 8001032:	213c      	movs	r1, #60	@ 0x3c
 8001034:	f00d f84c 	bl	800e0d0 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	2b48      	cmp	r3, #72	@ 0x48
 800103c:	d002      	beq.n	8001044 <HMC5883L_Init+0xa4>
		status = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	73bb      	strb	r3, [r7, #14]
 8001042:	e001      	b.n	8001048 <HMC5883L_Init+0xa8>
	}
	else{
		status = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 8001048:	200a      	movs	r0, #10
 800104a:	f007 fd21 	bl	8008a90 <HAL_Delay>

	return status;
 800104e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2400009c 	.word	0x2400009c

0800105c <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001062:	23b6      	movs	r3, #182	@ 0xb6
 8001064:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <HMC5883L_Get_Z_Start+0x40>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2306      	movs	r3, #6
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	463b      	mov	r3, r7
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	213c      	movs	r1, #60	@ 0x3c
 800107c:	f00d f828 	bl	800e0d0 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 8001080:	78bb      	ldrb	r3, [r7, #2]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2400009c 	.word	0x2400009c

080010a0 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L.I2C_Data, 6);
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	2306      	movs	r3, #6
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	213c      	movs	r1, #60	@ 0x3c
 80010b8:	f00d f9ae 	bl	800e418 <HAL_I2C_Mem_Read_IT>
	HMC5883L.HMC583L_IRQ = 1;
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <HMC5883L_Get_Z_Start_IT+0x34>)
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2400009c 	.word	0x2400009c
 80010d0:	000041c4 	.word	0x000041c4
 80010d4:	0000419c 	.word	0x0000419c

080010d8 <HMC5883L_Get_Z_End_IT>:

void HMC5883L_Get_Z_End_IT(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
		HMC5883L.Directions.X = (((int16_t)HMC5883L.I2C_Data[1]<<8) | HMC5883L.I2C_Data[0]) * 2.56;//important fake HMC5883L, msb -> lsb
 80010dc:	4b36      	ldr	r3, [pc, #216]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 80010de:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	4a34      	ldr	r2, [pc, #208]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 80010e6:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 80010ea:	4313      	orrs	r3, r2
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010f4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80011a0 <HMC5883L_Get_Z_End_IT+0xc8>
 80010f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001100:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001102:	edc3 7a02 	vstr	s15, [r3, #8]
		HMC5883L.Directions.Z = (((int16_t)HMC5883L.I2C_Data[3]<<8) | HMC5883L.I2C_Data[2]) * 2.56;// 2.56 - scale
 8001106:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001108:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	4a2a      	ldr	r2, [pc, #168]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001110:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8001114:	4313      	orrs	r3, r2
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800111e:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 80011a0 <HMC5883L_Get_Z_End_IT+0xc8>
 8001122:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001126:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 800112c:	edc3 7a00 	vstr	s15, [r3]
		HMC5883L.Directions.Y = (((int16_t)HMC5883L.I2C_Data[5]<<8) | HMC5883L.I2C_Data[4]) * 2.56;
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001132:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	4a1f      	ldr	r2, [pc, #124]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 800113a:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800113e:	4313      	orrs	r3, r2
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001148:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 80011a0 <HMC5883L_Get_Z_End_IT+0xc8>
 800114c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001150:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001156:	edc3 7a01 	vstr	s15, [r3, #4]
		HMC5883L.Directions.Heading = (atan2(HMC5883L.Directions.X, HMC5883L.Directions.Y))*180/M_PI;
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 800115c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001160:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001166:	edd3 6a01 	vldr	s13, [r3, #4]
 800116a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800116e:	eeb0 1b46 	vmov.f64	d1, d6
 8001172:	eeb0 0b47 	vmov.f64	d0, d7
 8001176:	f01c fde1 	bl	801dd3c <atan2>
 800117a:	eeb0 7b40 	vmov.f64	d7, d0
 800117e:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80011a8 <HMC5883L_Get_Z_End_IT+0xd0>
 8001182:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001186:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 80011b0 <HMC5883L_Get_Z_End_IT+0xd8>
 800118a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800118e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <HMC5883L_Get_Z_End_IT+0xe0>)
 8001194:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f3af 8000 	nop.w
 80011a0:	47ae147b 	.word	0x47ae147b
 80011a4:	40047ae1 	.word	0x40047ae1
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40668000 	.word	0x40668000
 80011b0:	54442d18 	.word	0x54442d18
 80011b4:	400921fb 	.word	0x400921fb
 80011b8:	0000419c 	.word	0x0000419c

080011bc <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 80011bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	e014      	b.n	8001200 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 80011d6:	f7ff ff41 	bl	800105c <HMC5883L_Get_Z_Start>
 80011da:	4603      	mov	r3, r0
 80011dc:	b21b      	sxth	r3, r3
 80011de:	17da      	asrs	r2, r3, #31
 80011e0:	461c      	mov	r4, r3
 80011e2:	4615      	mov	r5, r2
 80011e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011e8:	eb12 0804 	adds.w	r8, r2, r4
 80011ec:	eb43 0905 	adc.w	r9, r3, r5
 80011f0:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 80011f4:	2064      	movs	r0, #100	@ 0x64
 80011f6:	f007 fc4b 	bl	8008a90 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3301      	adds	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b09      	cmp	r3, #9
 8001204:	dde7      	ble.n	80011d6 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800120a:	f04f 020a 	mov.w	r2, #10
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	f7ff f87d 	bl	8000310 <__aeabi_ldivmod>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	b213      	sxth	r3, r2
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001228 <MPU6050_INIT>:
extern float looptime;
extern MPU6050_Struct MPU6050;



uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 8001230:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MPU6050_INIT+0x58>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 8001236:	f000 f825 	bl	8001284 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 800123a:	f000 f88f 	bl	800135c <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 800123e:	2005      	movs	r0, #5
 8001240:	f000 f838 	bl	80012b4 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 8001244:	2008      	movs	r0, #8
 8001246:	f000 f851 	bl	80012ec <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 800124a:	2008      	movs	r0, #8
 800124c:	f000 f86a 	bl	8001324 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 8001250:	f000 fc92 	bl	8001b78 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 8001254:	f000 f89a 	bl	800138c <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 8001258:	200a      	movs	r0, #10
 800125a:	f007 fc19 	bl	8008a90 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 800125e:	f000 fc73 	bl	8001b48 <MPU6050_READ_ID>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	2b68      	cmp	r3, #104	@ 0x68
 800126a:	d002      	beq.n	8001272 <MPU6050_INIT+0x4a>
		status = 0;//error
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e001      	b.n	8001276 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	240000a0 	.word	0x240000a0

08001284 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 800128a:	2300      	movs	r3, #0
 800128c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MPU6050_RESET+0x2c>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	226b      	movs	r2, #107	@ 0x6b
 80012a2:	21d0      	movs	r1, #208	@ 0xd0
 80012a4:	f00c fe00 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	240000a0 	.word	0x240000a0

080012b4 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af04      	add	r7, sp, #16
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MPU6050_CONFIG_DLPF+0x34>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f107 030f 	add.w	r3, r7, #15
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	221a      	movs	r2, #26
 80012d8:	21d0      	movs	r1, #208	@ 0xd0
 80012da:	f00c fde5 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	240000a0 	.word	0x240000a0

080012ec <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MPU6050_CONFIG_GYRO+0x34>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 030f 	add.w	r3, r7, #15
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	221b      	movs	r2, #27
 8001310:	21d0      	movs	r1, #208	@ 0xd0
 8001312:	f00c fdc9 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240000a0 	.word	0x240000a0

08001324 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af04      	add	r7, sp, #16
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MPU6050_CONFIG_ACCEL+0x34>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	221c      	movs	r2, #28
 8001348:	21d0      	movs	r1, #208	@ 0xd0
 800134a:	f00c fdad 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	240000a0 	.word	0x240000a0

0800135c <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 8001362:	2300      	movs	r3, #0
 8001364:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2301      	movs	r3, #1
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	2219      	movs	r2, #25
 800137a:	21d0      	movs	r1, #208	@ 0xd0
 800137c:	f00c fd94 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	240000a0 	.word	0x240000a0

0800138c <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 8001392:	2300      	movs	r3, #0
 8001394:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	2301      	movs	r3, #1
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	226a      	movs	r2, #106	@ 0x6a
 80013aa:	21d0      	movs	r1, #208	@ 0xd0
 80013ac:	f00c fd7c 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	240000a0 	.word	0x240000a0

080013bc <MPU6050_CALIBRATION>:
//}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(void){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 1000; i++){ //5 sec
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	e071      	b.n	80014d0 <MPU6050_CALIBRATION+0x114>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/MPU6050.Acc.Acc_Scale;
 80013ec:	f000 fb28 	bl	8001a40 <MPU6050_GET_ACCEL_FULLVALUE_X>
 80013f0:	4603      	mov	r3, r0
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013fa:	4b59      	ldr	r3, [pc, #356]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 80013fc:	ed93 7a06 	vldr	s14, [r3, #24]
 8001400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001404:	ed97 7a07 	vldr	s14, [r7, #28]
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	edc7 7a07 	vstr	s15, [r7, #28]
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/MPU6050.Acc.Acc_Scale;
 8001410:	f000 fb36 	bl	8001a80 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 8001414:	4603      	mov	r3, r0
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800141e:	4b50      	ldr	r3, [pc, #320]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 8001420:	ed93 7a06 	vldr	s14, [r3, #24]
 8001424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001428:	ed97 7a06 	vldr	s14, [r7, #24]
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	edc7 7a06 	vstr	s15, [r7, #24]
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/MPU6050.Acc.Acc_Scale;
 8001434:	f000 fb38 	bl	8001aa8 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 8001438:	4603      	mov	r3, r0
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001442:	4b47      	ldr	r3, [pc, #284]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 8001444:	ed93 7a06 	vldr	s14, [r3, #24]
 8001448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a05 	vstr	s15, [r7, #20]

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/MPU6050.Gyr.Gyr_Scale;
 8001458:	f000 fb3a 	bl	8001ad0 <MPU6050_GET_GYRO_FULLVALUE_X>
 800145c:	4603      	mov	r3, r0
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001466:	4b3e      	ldr	r3, [pc, #248]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 8001468:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800146c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001470:	ed97 7a04 	vldr	s14, [r7, #16]
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	edc7 7a04 	vstr	s15, [r7, #16]
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/MPU6050.Gyr.Gyr_Scale;
 800147c:	f000 fb3c 	bl	8001af8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001480:	4603      	mov	r3, r0
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800148a:	4b35      	ldr	r3, [pc, #212]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 800148c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001494:	ed97 7a03 	vldr	s14, [r7, #12]
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/MPU6050.Gyr.Gyr_Scale;
 80014a0:	f000 fb3e 	bl	8001b20 <MPU6050_GET_GYRO_FULLVALUE_Z>
 80014a4:	4603      	mov	r3, r0
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 80014b0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80014bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c0:	edc7 7a02 	vstr	s15, [r7, #8]
		  HAL_Delay(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f007 fae3 	bl	8008a90 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014d6:	db89      	blt.n	80013ec <MPU6050_CALIBRATION+0x30>
	}
	MPU6050.Acc.acc_x_cal = accelx/1000;
 80014d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014dc:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001564 <MPU6050_CALIBRATION+0x1a8>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 80014e6:	edc3 7a07 	vstr	s15, [r3, #28]
	MPU6050.Acc.acc_y_cal = accely/1000;
 80014ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80014ee:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001564 <MPU6050_CALIBRATION+0x1a8>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 80014f8:	edc3 7a08 	vstr	s15, [r3, #32]
	MPU6050.Acc.acc_z_cal = accelz/1000;
 80014fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001500:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001564 <MPU6050_CALIBRATION+0x1a8>
 8001504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 800150a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Acc.acc_z_cal = 1 - MPU6050.Acc.acc_z_cal;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 8001510:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 800151e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Gyr.gyr_x_cal = gyrox/1000;
 8001522:	ed97 7a04 	vldr	s14, [r7, #16]
 8001526:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001564 <MPU6050_CALIBRATION+0x1a8>
 800152a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 8001530:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	MPU6050.Gyr.gyr_y_cal = gyroy/1000;
 8001534:	ed97 7a03 	vldr	s14, [r7, #12]
 8001538:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001564 <MPU6050_CALIBRATION+0x1a8>
 800153c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001540:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 8001542:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	MPU6050.Gyr.gyr_z_cal = gyroz/1000;
 8001546:	ed97 7a02 	vldr	s14, [r7, #8]
 800154a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001564 <MPU6050_CALIBRATION+0x1a8>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <MPU6050_CALIBRATION+0x1a4>)
 8001554:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	00000000 	.word	0x00000000
 8001564:	447a0000 	.word	0x447a0000

08001568 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(void){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	float ang1 = sqrt((MPU6050.Acc.ax*MPU6050.Acc.ax)+(MPU6050.Acc.az*MPU6050.Acc.az));
 800156e:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001570:	ed93 7a00 	vldr	s14, [r3]
 8001574:	4b40      	ldr	r3, [pc, #256]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157e:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001580:	edd3 6a02 	vldr	s13, [r3, #8]
 8001584:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001586:	edd3 7a02 	vldr	s15, [r3, #8]
 800158a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001596:	eeb0 0b47 	vmov.f64	d0, d7
 800159a:	f01c fbd1 	bl	801dd40 <sqrt>
 800159e:	eeb0 7b40 	vmov.f64	d7, d0
 80015a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a6:	edc7 7a01 	vstr	s15, [r7, #4]
	float ang2 = sqrt((MPU6050.Acc.ay*MPU6050.Acc.ay)+(MPU6050.Acc.az*MPU6050.Acc.az));
 80015aa:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80015b0:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80015c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d2:	eeb0 0b47 	vmov.f64	d0, d7
 80015d6:	f01c fbb3 	bl	801dd40 <sqrt>
 80015da:	eeb0 7b40 	vmov.f64	d7, d0
 80015de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015e2:	edc7 7a00 	vstr	s15, [r7]

	MPU6050.Acc.ay_ang = ((-1*(atan(MPU6050.Acc.ax/ang2)))*180)/M_PI;
 80015e6:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015e8:	edd3 6a00 	vldr	s13, [r3]
 80015ec:	ed97 7a00 	vldr	s14, [r7]
 80015f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015f8:	eeb0 0b47 	vmov.f64	d0, d7
 80015fc:	f01c fbc0 	bl	801dd80 <atan>
 8001600:	eeb0 7b40 	vmov.f64	d7, d0
 8001604:	eeb1 7b47 	vneg.f64	d7, d7
 8001608:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8001668 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 800160c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001610:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8001670 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 8001614:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001618:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800161e:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.Acc.ax_ang = ((atan(MPU6050.Acc.ay/ang1))*180)/M_PI;
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001624:	edd3 6a01 	vldr	s13, [r3, #4]
 8001628:	ed97 7a01 	vldr	s14, [r7, #4]
 800162c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001630:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001634:	eeb0 0b47 	vmov.f64	d0, d7
 8001638:	f01c fba2 	bl	801dd80 <atan>
 800163c:	eeb0 7b40 	vmov.f64	d7, d0
 8001640:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001668 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 8001644:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001648:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8001670 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 800164c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001650:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001656:	edc3 7a03 	vstr	s15, [r3, #12]
//	axan = -1*(atan(ax/ang2));
//	ayan= atan(ay/ang1);
//
//	*ay_ang = (axan*180)/M_PI;
//	*ax_ang = (ayan*180)/M_PI;
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	f3af 8000 	nop.w
 8001668:	00000000 	.word	0x00000000
 800166c:	40668000 	.word	0x40668000
 8001670:	54442d18 	.word	0x54442d18
 8001674:	400921fb 	.word	0x400921fb
 8001678:	00000000 	.word	0x00000000

0800167c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, MPU6050.I2C_Data, 14);
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	230e      	movs	r3, #14
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	223b      	movs	r2, #59	@ 0x3b
 8001692:	21d0      	movs	r1, #208	@ 0xd0
 8001694:	f00c fec0 	bl	800e418 <HAL_I2C_Mem_Read_IT>
	MPU6050.MPU6050_IRQ = 1;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x34>)
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	240000a0 	.word	0x240000a0
 80016ac:	00000044 	.word	0x00000044
 80016b0:	00000000 	.word	0x00000000

080016b4 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(void){
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
	MPU6050.Acc.ax = (((int16_t)(MPU6050.I2C_Data[0]<<8) | MPU6050.I2C_Data[1])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_x_cal;
 80016b8:	4b53      	ldr	r3, [pc, #332]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b50      	ldr	r3, [pc, #320]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016ca:	4313      	orrs	r3, r2
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80016da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016de:	4b4a      	ldr	r3, [pc, #296]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80016e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e8:	4b47      	ldr	r3, [pc, #284]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016ea:	edc3 7a00 	vstr	s15, [r3]
	MPU6050.Acc.ay = (((int16_t)(MPU6050.I2C_Data[2]<<8) | MPU6050.I2C_Data[3])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_y_cal;
 80016ee:	4b46      	ldr	r3, [pc, #280]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016f0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b43      	ldr	r3, [pc, #268]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016fc:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001700:	4313      	orrs	r3, r2
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800170a:	4b3f      	ldr	r3, [pc, #252]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800170c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001714:	4b3c      	ldr	r3, [pc, #240]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001716:	edd3 7a08 	vldr	s15, [r3, #32]
 800171a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171e:	4b3a      	ldr	r3, [pc, #232]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001720:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU6050.Acc.az = (((int16_t)(MPU6050.I2C_Data[4]<<8) | MPU6050.I2C_Data[5])/MPU6050.Acc.Acc_Scale) + MPU6050.Acc.acc_z_cal;
 8001724:	4b38      	ldr	r3, [pc, #224]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001726:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21b      	sxth	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	4b35      	ldr	r3, [pc, #212]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001732:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001736:	4313      	orrs	r3, r2
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001740:	4b31      	ldr	r3, [pc, #196]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001742:	edd3 7a06 	vldr	s15, [r3, #24]
 8001746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800174a:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800174c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001756:	edc3 7a02 	vstr	s15, [r3, #8]

	MPU6050.Gyr.gx = (((int16_t)(MPU6050.I2C_Data[8]<<8) | MPU6050.I2C_Data[9])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_x_cal;
 800175a:	4b2b      	ldr	r3, [pc, #172]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800175c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b21b      	sxth	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001768:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800176c:	4313      	orrs	r3, r2
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001778:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800177c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001780:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001782:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800178c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	MPU6050.Gyr.gy = (((int16_t)(MPU6050.I2C_Data[10]<<8) | MPU6050.I2C_Data[11])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_y_cal;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001792:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21b      	sxth	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800179e:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 80017a2:	4313      	orrs	r3, r2
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017ae:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017b8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80017bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017c2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	MPU6050.Gyr.gz = (((int16_t)(MPU6050.I2C_Data[12]<<8) | MPU6050.I2C_Data[13])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_z_cal;
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017d8:	4313      	orrs	r3, r2
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017e4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017ee:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80017f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f6:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017f8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	00000000 	.word	0x00000000

0800180c <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float megz_ang){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	ed87 0a00 	vstr	s0, [r7]
	Complementary_getFilter(Complementary_Filter_st, MPU6050.Acc.ax_ang, MPU6050.Acc.ay_ang, megz_ang, MPU6050.Gyr.gx, MPU6050.Gyr.gy, MPU6050.Gyr.gz);
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 800181a:	edd3 7a03 	vldr	s15, [r3, #12]
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001820:	ed93 7a04 	vldr	s14, [r3, #16]
 8001824:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001826:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 800182c:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001832:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 8001836:	eef0 2a65 	vmov.f32	s5, s11
 800183a:	eeb0 2a46 	vmov.f32	s4, s12
 800183e:	eef0 1a66 	vmov.f32	s3, s13
 8001842:	ed97 1a00 	vldr	s2, [r7]
 8001846:	eef0 0a47 	vmov.f32	s1, s14
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f9aa 	bl	8001ba8 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	00000000 	.word	0x00000000

08001860 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	9302      	str	r3, [sp, #8]
 800186e:	2301      	movs	r3, #1
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2301      	movs	r3, #1
 8001878:	223d      	movs	r2, #61	@ 0x3d
 800187a:	21d0      	movs	r1, #208	@ 0xd0
 800187c:	f00c fc28 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 8001880:	79fb      	ldrb	r3, [r7, #7]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	240000a0 	.word	0x240000a0

08001890 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <MPU6050_GET_ACCEL_YL+0x2c>)
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	9302      	str	r3, [sp, #8]
 800189e:	2301      	movs	r3, #1
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2301      	movs	r3, #1
 80018a8:	223e      	movs	r2, #62	@ 0x3e
 80018aa:	21d0      	movs	r1, #208	@ 0xd0
 80018ac:	f00c fc10 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 80018b0:	79fb      	ldrb	r3, [r7, #7]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	240000a0 	.word	0x240000a0

080018c0 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <MPU6050_GET_ACCEL_ZH+0x2c>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	223f      	movs	r2, #63	@ 0x3f
 80018da:	21d0      	movs	r1, #208	@ 0xd0
 80018dc:	f00c fbf8 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	240000a0 	.word	0x240000a0

080018f0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MPU6050_GET_ACCEL_ZL+0x2c>)
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	2301      	movs	r3, #1
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2240      	movs	r2, #64	@ 0x40
 800190a:	21d0      	movs	r1, #208	@ 0xd0
 800190c:	f00c fbe0 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 8001910:	79fb      	ldrb	r3, [r7, #7]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	240000a0 	.word	0x240000a0

08001920 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_GYRO_XH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	2243      	movs	r2, #67	@ 0x43
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00c fbc8 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_GYRO_XL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	2244      	movs	r2, #68	@ 0x44
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00c fbb0 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_GYRO_YH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	2245      	movs	r2, #69	@ 0x45
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00c fb98 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_GYRO_YL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2246      	movs	r2, #70	@ 0x46
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00c fb80 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_ZH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2247      	movs	r2, #71	@ 0x47
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00c fb68 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_ZL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2248      	movs	r2, #72	@ 0x48
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00c fb50 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2302      	movs	r3, #2
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	223b      	movs	r2, #59	@ 0x3b
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00c fb38 	bl	800e0d0 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	797b      	ldrb	r3, [r7, #5]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	240000a0 	.word	0x240000a0

08001a80 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001a86:	f7ff feeb 	bl	8001860 <MPU6050_GET_ACCEL_YH>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21c      	sxth	r4, r3
 8001a90:	f7ff fefe 	bl	8001890 <MPU6050_GET_ACCEL_YL>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}

08001aa8 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001aae:	f7ff ff07 	bl	80018c0 <MPU6050_GET_ACCEL_ZH>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21c      	sxth	r4, r3
 8001ab8:	f7ff ff1a 	bl	80018f0 <MPU6050_GET_ACCEL_ZL>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4323      	orrs	r3, r4
 8001ac2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}

08001ad0 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001ad6:	f7ff ff23 	bl	8001920 <MPU6050_GET_GYRO_XH>
 8001ada:	4603      	mov	r3, r0
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b21c      	sxth	r4, r3
 8001ae0:	f7ff ff36 	bl	8001950 <MPU6050_GET_GYRO_XL>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4323      	orrs	r3, r4
 8001aea:	80fb      	strh	r3, [r7, #6]
	return data;
 8001aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}

08001af8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001afe:	f7ff ff3f 	bl	8001980 <MPU6050_GET_GYRO_YH>
 8001b02:	4603      	mov	r3, r0
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21c      	sxth	r4, r3
 8001b08:	f7ff ff52 	bl	80019b0 <MPU6050_GET_GYRO_YL>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	4323      	orrs	r3, r4
 8001b12:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}

08001b20 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001b26:	f7ff ff5b 	bl	80019e0 <MPU6050_GET_GYRO_ZH>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	b21c      	sxth	r4, r3
 8001b30:	f7ff ff6e 	bl	8001a10 <MPU6050_GET_GYRO_ZL>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	4323      	orrs	r3, r4
 8001b3a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}

08001b48 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <MPU6050_READ_ID+0x2c>)
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	2301      	movs	r3, #1
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	2301      	movs	r3, #1
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	2275      	movs	r2, #117	@ 0x75
 8001b62:	21d0      	movs	r1, #208	@ 0xd0
 8001b64:	f00c fab4 	bl	800e0d0 <HAL_I2C_Mem_Read>
	return data;
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	b25b      	sxtb	r3, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	240000a0 	.word	0x240000a0

08001b78 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001b82:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	2301      	movs	r3, #1
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2301      	movs	r3, #1
 8001b94:	2237      	movs	r2, #55	@ 0x37
 8001b96:	21d0      	movs	r1, #208	@ 0xd0
 8001b98:	f00c f986 	bl	800dea8 <HAL_I2C_Mem_Write>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	240000a0 	.word	0x240000a0

08001ba8 <Complementary_getFilter>:
	*VerVel += (VerAcc*looptime);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	@ 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	61f8      	str	r0, [r7, #28]
 8001bb0:	ed87 0a06 	vstr	s0, [r7, #24]
 8001bb4:	edc7 0a05 	vstr	s1, [r7, #20]
 8001bb8:	ed87 1a04 	vstr	s2, [r7, #16]
 8001bbc:	edc7 1a03 	vstr	s3, [r7, #12]
 8001bc0:	ed87 2a02 	vstr	s4, [r7, #8]
 8001bc4:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001bc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bd0:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001c90 <Complementary_getFilter+0xe8>
 8001bd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bd8:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <Complementary_getFilter+0xf8>)
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bf4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001c98 <Complementary_getFilter+0xf0>
 8001bf8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001bfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c12:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001c90 <Complementary_getFilter+0xe8>
 8001c16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <Complementary_getFilter+0xf8>)
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c36:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001c98 <Complementary_getFilter+0xf0>
 8001c3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (((gz_ang*looptime)+Complementary_Filter_st->oz));//todo add magnetomiter?
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <Complementary_getFilter+0xf8>)
 8001c4e:	ed93 7a00 	vldr	s14, [r3]
 8001c52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	47ae147b 	.word	0x47ae147b
 8001c94:	3f947ae1 	.word	0x3f947ae1
 8001c98:	f5c28f5c 	.word	0xf5c28f5c
 8001c9c:	3fef5c28 	.word	0x3fef5c28
 8001ca0:	0801e78c 	.word	0x0801e78c

08001ca4 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f006 feee 	bl	8008a90 <HAL_Delay>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <nRF24_SendSpi+0x28>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	f012 f969 	bl	8013fac <HAL_SPI_Transmit>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	240000a4 	.word	0x240000a4

08001ce8 <nRF24_SendSpi_IT>:
static void nRF24_SendSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit_IT(hspi_nrf, Data, Length);
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <nRF24_SendSpi_IT+0x24>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f013 f8ee 	bl	8014ee0 <HAL_SPI_Transmit_IT>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	240000a4 	.word	0x240000a4

08001d10 <nRF24_ReadSpi>:


static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <nRF24_ReadSpi+0x28>)
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	f012 fb2d 	bl	8014388 <HAL_SPI_Receive>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	240000a4 	.word	0x240000a4

08001d3c <nRF24_ReadSpi_IT>:
static void nRF24_ReadSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive_IT(hspi_nrf, Data, Length);
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <nRF24_ReadSpi_IT+0x24>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f013 f96e 	bl	8015034 <HAL_SPI_Receive_IT>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	240000a4 	.word	0x240000a4

08001d64 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001d72:	2200      	movs	r2, #0
 8001d74:	2180      	movs	r1, #128	@ 0x80
 8001d76:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <nRF24_ReadRegister+0x44>)
 8001d78:	f00b ffc6 	bl	800dd08 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001d7c:	1dfb      	adds	r3, r7, #7
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff9b 	bl	8001cbc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001d86:	f107 030f 	add.w	r3, r7, #15
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ffbf 	bl	8001d10 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001d92:	2201      	movs	r2, #1
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	4804      	ldr	r0, [pc, #16]	@ (8001da8 <nRF24_ReadRegister+0x44>)
 8001d98:	f00b ffb6 	bl	800dd08 <HAL_GPIO_WritePin>

	return result;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	58020400 	.word	0x58020400

08001dac <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2180      	movs	r1, #128	@ 0x80
 8001dc4:	480a      	ldr	r0, [pc, #40]	@ (8001df0 <nRF24_ReadRegisters+0x44>)
 8001dc6:	f00b ff9f 	bl	800dd08 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff74 	bl	8001cbc <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f7ff ff99 	bl	8001d10 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001dde:	2201      	movs	r2, #1
 8001de0:	2180      	movs	r1, #128	@ 0x80
 8001de2:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <nRF24_ReadRegisters+0x44>)
 8001de4:	f00b ff90 	bl	800dd08 <HAL_GPIO_WritePin>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58020400 	.word	0x58020400

08001df4 <nRF24_ReadRegisters_IT>:

static void nRF24_ReadRegisters_IT(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	480a      	ldr	r0, [pc, #40]	@ (8001e38 <nRF24_ReadRegisters_IT+0x44>)
 8001e0e:	f00b ff7b 	bl	800dd08 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff50 	bl	8001cbc <nRF24_SendSpi>
	nRF24_ReadSpi_IT(ret, len);
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f7ff ff8b 	bl	8001d3c <nRF24_ReadSpi_IT>

	NRF24.SPI_Rx_Inte = 1;
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <nRF24_ReadRegisters_IT+0x48>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	//NRF24_CSN_HIGH;
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	58020400 	.word	0x58020400
 8001e3c:	000000d0 	.word	0x000000d0

08001e40 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	460a      	mov	r2, r1
 8001e4a:	71fb      	strb	r3, [r7, #7]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f043 0320 	orr.w	r3, r3, #32
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	4809      	ldr	r0, [pc, #36]	@ (8001e88 <nRF24_WriteRegister+0x48>)
 8001e64:	f00b ff50 	bl	800dd08 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff24 	bl	8001cbc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e74:	2201      	movs	r2, #1
 8001e76:	2180      	movs	r1, #128	@ 0x80
 8001e78:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <nRF24_WriteRegister+0x48>)
 8001e7a:	f00b ff45 	bl	800dd08 <HAL_GPIO_WritePin>
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	58020400 	.word	0x58020400

08001e8c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	480b      	ldr	r0, [pc, #44]	@ (8001ed8 <nRF24_WriteRegisters+0x4c>)
 8001eac:	f00b ff2c 	bl	800dd08 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff01 	bl	8001cbc <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001eba:	79bb      	ldrb	r3, [r7, #6]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f7ff fefc 	bl	8001cbc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2180      	movs	r1, #128	@ 0x80
 8001ec8:	4803      	ldr	r0, [pc, #12]	@ (8001ed8 <nRF24_WriteRegisters+0x4c>)
 8001eca:	f00b ff1d 	bl	800dd08 <HAL_GPIO_WritePin>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	58020400 	.word	0x58020400

08001edc <nRF24_WriteRegisters_IT>:

static void nRF24_WriteRegisters_IT(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f043 0320 	orr.w	r3, r3, #32
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	480a      	ldr	r0, [pc, #40]	@ (8001f24 <nRF24_WriteRegisters_IT+0x48>)
 8001efc:	f00b ff04 	bl	800dd08 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	2101      	movs	r1, #1
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fed9 	bl	8001cbc <nRF24_SendSpi>
	nRF24_SendSpi_IT(val, len);
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6838      	ldr	r0, [r7, #0]
 8001f10:	f7ff feea 	bl	8001ce8 <nRF24_SendSpi_IT>

	NRF24.SPI_Tx_Inte = 1;
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <nRF24_WriteRegisters_IT+0x4c>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	//NRF24_CSN_HIGH;
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	58020400 	.word	0x58020400
 8001f28:	000000d0 	.word	0x000000d0

08001f2c <nRF24_RX_Mode>:



void nRF24_RX_Mode(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <nRF24_RX_Mode+0x60>)
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	uint8_t config = nRF24_ReadConfig();
 8001f3a:	f000 f85d 	bl	8001ff8 <nRF24_ReadConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f42:	4913      	ldr	r1, [pc, #76]	@ (8001f90 <nRF24_RX_Mode+0x64>)
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 fa06 	bl	8002356 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f853 	bl	8002008 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f62:	2070      	movs	r0, #112	@ 0x70
 8001f64:	f000 f8ab 	bl	80020be <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f68:	f000 f8b8 	bl	80020dc <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f6c:	f000 f8d0 	bl	8002110 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f70:	2201      	movs	r2, #1
 8001f72:	2140      	movs	r1, #64	@ 0x40
 8001f74:	4807      	ldr	r0, [pc, #28]	@ (8001f94 <nRF24_RX_Mode+0x68>)
 8001f76:	f00b fec7 	bl	800dd08 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8001f7a:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <nRF24_RX_Mode+0x60>)
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	000000d0 	.word	0x000000d0
 8001f90:	240000a8 	.word	0x240000a8
 8001f94:	58020400 	.word	0x58020400

08001f98 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <nRF24_TX_Mode+0x58>)
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24_CE_LOW;
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2140      	movs	r1, #64	@ 0x40
 8001faa:	4812      	ldr	r0, [pc, #72]	@ (8001ff4 <nRF24_TX_Mode+0x5c>)
 8001fac:	f00b feac 	bl	800dd08 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001fb0:	f000 f822 	bl	8001ff8 <nRF24_ReadConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f81c 	bl	8002008 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001fd0:	2070      	movs	r0, #112	@ 0x70
 8001fd2:	f000 f874 	bl	80020be <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001fd6:	f000 f881 	bl	80020dc <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001fda:	f000 f899 	bl	8002110 <nRF24_FlushTX>
	//important wait 2ms for next interactionw with NRF24
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8001fde:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <nRF24_TX_Mode+0x58>)
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	000000d0 	.word	0x000000d0
 8001ff4:	58020400 	.word	0x58020400

08001ff8 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff feb1 	bl	8001d64 <nRF24_ReadRegister>
 8002002:	4603      	mov	r3, r0
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}

08002008 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	4619      	mov	r1, r3
 8002016:	2000      	movs	r0, #0
 8002018:	f7ff ff12 	bl	8001e40 <nRF24_WriteRegister>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800202e:	2006      	movs	r0, #6
 8002030:	f7ff fe98 	bl	8001d64 <nRF24_ReadRegister>
 8002034:	4603      	mov	r3, r0
 8002036:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	f023 0307 	bic.w	r3, r3, #7
 800203e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	b25a      	sxtb	r2, r3
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4313      	orrs	r3, r2
 800204c:	b25b      	sxtb	r3, r3
 800204e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	4619      	mov	r1, r3
 8002054:	2006      	movs	r0, #6
 8002056:	f7ff fef3 	bl	8001e40 <nRF24_WriteRegister>
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800206c:	2006      	movs	r0, #6
 800206e:	f7ff fe79 	bl	8001d64 <nRF24_ReadRegister>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800207c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d104      	bne.n	800208e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	f043 0320 	orr.w	r3, r3, #32
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e006      	b.n	800209c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d103      	bne.n	800209c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4619      	mov	r1, r3
 80020a0:	2006      	movs	r0, #6
 80020a2:	f7ff fecd 	bl	8001e40 <nRF24_WriteRegister>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80020b2:	2007      	movs	r0, #7
 80020b4:	f7ff fe56 	bl	8001d64 <nRF24_ReadRegister>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}

080020be <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4619      	mov	r1, r3
 80020cc:	2007      	movs	r0, #7
 80020ce:	f7ff feb7 	bl	8001e40 <nRF24_WriteRegister>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80020e2:	23e2      	movs	r3, #226	@ 0xe2
 80020e4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020e6:	2200      	movs	r2, #0
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	4808      	ldr	r0, [pc, #32]	@ (800210c <nRF24_FlushRX+0x30>)
 80020ec:	f00b fe0c 	bl	800dd08 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020f0:	1dfb      	adds	r3, r7, #7
 80020f2:	2101      	movs	r1, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fde1 	bl	8001cbc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020fa:	2201      	movs	r2, #1
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	4803      	ldr	r0, [pc, #12]	@ (800210c <nRF24_FlushRX+0x30>)
 8002100:	f00b fe02 	bl	800dd08 <HAL_GPIO_WritePin>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	58020400 	.word	0x58020400

08002110 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002116:	23e1      	movs	r3, #225	@ 0xe1
 8002118:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800211a:	2200      	movs	r2, #0
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	4808      	ldr	r0, [pc, #32]	@ (8002140 <nRF24_FlushTX+0x30>)
 8002120:	f00b fdf2 	bl	800dd08 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	2101      	movs	r1, #1
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fdc7 	bl	8001cbc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800212e:	2201      	movs	r2, #1
 8002130:	2180      	movs	r1, #128	@ 0x80
 8002132:	4803      	ldr	r0, [pc, #12]	@ (8002140 <nRF24_FlushTX+0x30>)
 8002134:	f00b fde8 	bl	800dd08 <HAL_GPIO_WritePin>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	58020400 	.word	0x58020400

08002144 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800214e:	f7ff ff53 	bl	8001ff8 <nRF24_ReadConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d004      	beq.n	8002166 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	f043 0308 	orr.w	r3, r3, #8
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e003      	b.n	800216e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	f023 0308 	bic.w	r3, r3, #8
 800216c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff49 	bl	8002008 <nRF24_WriteConfig>
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002188:	f7ff ff36 	bl	8001ff8 <nRF24_ReadConfig>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d104      	bne.n	80021a0 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e003      	b.n	80021a8 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	f023 0304 	bic.w	r3, r3, #4
 80021a6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff2c 	bl	8002008 <nRF24_WriteConfig>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	460a      	mov	r2, r1
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	4613      	mov	r3, r2
 80021c6:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	b25b      	sxtb	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	2004      	movs	r0, #4
 80021e2:	f7ff fe2d 	bl	8001e40 <nRF24_WriteRegister>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	2005      	movs	r0, #5
 8002204:	f7ff fe1c 	bl	8001e40 <nRF24_WriteRegister>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	460a      	mov	r2, r1
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	4613      	mov	r3, r2
 800221e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d901      	bls.n	800222a <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8002226:	2305      	movs	r3, #5
 8002228:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	3311      	adds	r3, #17
 800222e:	b2da      	uxtb	r2, r3
 8002230:	79bb      	ldrb	r3, [r7, #6]
 8002232:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f7ff fe00 	bl	8001e40 <nRF24_WriteRegister>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b05      	cmp	r3, #5
 800225c:	d901      	bls.n	8002262 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800225e:	2305      	movs	r3, #5
 8002260:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8002262:	2002      	movs	r0, #2
 8002264:	f7ff fd7e 	bl	8001d64 <nRF24_ReadRegister>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10a      	bne.n	8002288 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2201      	movs	r2, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	b25a      	sxtb	r2, r3
 800227c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002280:	4313      	orrs	r3, r2
 8002282:	b25b      	sxtb	r3, r3
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	e00b      	b.n	80022a0 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25b      	sxtb	r3, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	b25a      	sxtb	r2, r3
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4013      	ands	r3, r2
 800229c:	b25b      	sxtb	r3, r3
 800229e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	4619      	mov	r1, r3
 80022a4:	2002      	movs	r0, #2
 80022a6:	f7ff fdcb 	bl	8001e40 <nRF24_WriteRegister>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	460a      	mov	r2, r1
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	4613      	mov	r3, r2
 80022c0:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d901      	bls.n	80022cc <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80022c8:	2305      	movs	r3, #5
 80022ca:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7ff fd49 	bl	8001d64 <nRF24_ReadRegister>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80022d6:	79bb      	ldrb	r3, [r7, #6]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d10a      	bne.n	80022f2 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2201      	movs	r2, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	b25a      	sxtb	r2, r3
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b25b      	sxtb	r3, r3
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e00b      	b.n	800230a <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2201      	movs	r2, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	4013      	ands	r3, r2
 8002306:	b25b      	sxtb	r3, r3
 8002308:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	4619      	mov	r1, r3
 800230e:	2001      	movs	r0, #1
 8002310:	f7ff fd96 	bl	8001e40 <nRF24_WriteRegister>
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d901      	bls.n	8002330 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 800232c:	2305      	movs	r3, #5
 800232e:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d801      	bhi.n	800233a <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8002336:	2303      	movs	r3, #3
 8002338:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	3b02      	subs	r3, #2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	2003      	movs	r0, #3
 800234a:	f7ff fd79 	bl	8001e40 <nRF24_WriteRegister>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	6039      	str	r1, [r7, #0]
 8002360:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <nRF24_SetRXAddress+0x18>
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d11d      	bne.n	80023aa <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	e00d      	b.n	8002390 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	441a      	add	r2, r3
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	f1c3 0302 	rsb	r3, r3, #2
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	3310      	adds	r3, #16
 8002384:	443b      	add	r3, r7
 8002386:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	3301      	adds	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d9ee      	bls.n	8002374 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	330a      	adds	r3, #10
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f107 010c 	add.w	r1, r7, #12
 80023a0:	2203      	movs	r2, #3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fd72 	bl	8001e8c <nRF24_WriteRegisters>
	{
 80023a8:	e00a      	b.n	80023c0 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	330a      	adds	r3, #10
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3302      	adds	r3, #2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff fd41 	bl	8001e40 <nRF24_WriteRegister>
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	2203      	movs	r2, #3
 80023d6:	4619      	mov	r1, r3
 80023d8:	200a      	movs	r0, #10
 80023da:	f7ff fce7 	bl	8001dac <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e00c      	b.n	80023fe <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	f1c3 0302 	rsb	r3, r3, #2
 80023ec:	3210      	adds	r2, #16
 80023ee:	443a      	add	r2, r7
 80023f0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023f4:	4a16      	ldr	r2, [pc, #88]	@ (8002450 <nRF24_SetTXAddress+0x88>)
 80023f6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	3301      	adds	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d9ef      	bls.n	80023e4 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e00d      	b.n	8002426 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	441a      	add	r2, r3
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	f1c3 0302 	rsb	r3, r3, #2
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	3310      	adds	r3, #16
 800241a:	443b      	add	r3, r7
 800241c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3301      	adds	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d9ee      	bls.n	800240a <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2203      	movs	r2, #3
 8002432:	4619      	mov	r1, r3
 8002434:	200a      	movs	r0, #10
 8002436:	f7ff fd29 	bl	8001e8c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2203      	movs	r2, #3
 8002440:	4619      	mov	r1, r3
 8002442:	2010      	movs	r0, #16
 8002444:	f7ff fd22 	bl	8001e8c <nRF24_WriteRegisters>

}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	240000a8 	.word	0x240000a8

08002454 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800245a:	f7ff fe28 	bl	80020ae <nRF24_ReadStatus>
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002468:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe26 	bl	80020be <nRF24_WriteStatus>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002484:	f7ff fdb8 	bl	8001ff8 <nRF24_ReadConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e003      	b.n	80024a4 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024a2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fdae 	bl	8002008 <nRF24_WriteConfig>
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024be:	f7ff fd9b 	bl	8001ff8 <nRF24_ReadConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	f043 0320 	orr.w	r3, r3, #32
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e003      	b.n	80024de <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	f023 0320 	bic.w	r3, r3, #32
 80024dc:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fd91 	bl	8002008 <nRF24_WriteConfig>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024f8:	f7ff fd7e 	bl	8001ff8 <nRF24_ReadConfig>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e003      	b.n	8002518 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	f023 0310 	bic.w	r3, r3, #16
 8002516:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fd74 	bl	8002008 <nRF24_WriteConfig>
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002530:	2220      	movs	r2, #32
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	20a0      	movs	r0, #160	@ 0xa0
 8002536:	f7ff fca9 	bl	8001e8c <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <nRF24_WriteTXPayload_IT>:

void nRF24_WriteTXPayload_IT(uint8_t * data)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <nRF24_WriteTXPayload_IT+0x24>)
 800254e:	2205      	movs	r2, #5
 8002550:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_WriteRegisters_IT(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002554:	2220      	movs	r2, #32
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	20a0      	movs	r0, #160	@ 0xa0
 800255a:	f7ff fcbf 	bl	8001edc <nRF24_WriteRegisters_IT>
	//nRF24_WaitTX();
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	000000d0 	.word	0x000000d0

0800256c <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8002572:	2201      	movs	r2, #1
 8002574:	2140      	movs	r1, #64	@ 0x40
 8002576:	4810      	ldr	r0, [pc, #64]	@ (80025b8 <nRF24_WaitTX+0x4c>)
 8002578:	f00b fbc6 	bl	800dd08 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 800257c:	2001      	movs	r0, #1
 800257e:	f7ff fb91 	bl	8001ca4 <nRF24_Delay>
	NRF24_CE_LOW;
 8002582:	2200      	movs	r2, #0
 8002584:	2140      	movs	r1, #64	@ 0x40
 8002586:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <nRF24_WaitTX+0x4c>)
 8002588:	f00b fbbe 	bl	800dd08 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 800258c:	2001      	movs	r0, #1
 800258e:	f7ff fb89 	bl	8001ca4 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002592:	f7ff fd8c 	bl	80020ae <nRF24_ReadStatus>
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <nRF24_WaitTX+0x42>
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ee      	beq.n	800258c <nRF24_WaitTX+0x20>

}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	58020400 	.word	0x58020400

080025bc <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80025c4:	2220      	movs	r2, #32
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	2061      	movs	r0, #97	@ 0x61
 80025ca:	f7ff fbef 	bl	8001dac <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 80025ce:	2140      	movs	r1, #64	@ 0x40
 80025d0:	2007      	movs	r0, #7
 80025d2:	f7ff fc35 	bl	8001e40 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 80025d6:	f7ff fd6a 	bl	80020ae <nRF24_ReadStatus>
 80025da:	4603      	mov	r3, r0
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80025e4:	2120      	movs	r1, #32
 80025e6:	2007      	movs	r0, #7
 80025e8:	f7ff fc2a 	bl	8001e40 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <nRF24_ReadRXPaylaod_IT>:

void nRF24_ReadRXPaylaod_IT(uint8_t *data){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <nRF24_ReadRXPaylaod_IT+0x24>)
 80025fe:	2205      	movs	r2, #5
 8002600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_ReadRegisters_IT(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002604:	2220      	movs	r2, #32
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	2061      	movs	r0, #97	@ 0x61
 800260a:	f7ff fbf3 	bl	8001df4 <nRF24_ReadRegisters_IT>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	000000d0 	.word	0x000000d0

0800261c <nRF24_ReadRXPaylaod_IT_End>:

void nRF24_ReadRXPaylaod_IT_End(void){
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	NRF24_CSN_HIGH;
 8002620:	2201      	movs	r2, #1
 8002622:	2180      	movs	r1, #128	@ 0x80
 8002624:	480b      	ldr	r0, [pc, #44]	@ (8002654 <nRF24_ReadRXPaylaod_IT_End+0x38>)
 8002626:	f00b fb6f 	bl	800dd08 <HAL_GPIO_WritePin>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 800262a:	2140      	movs	r1, #64	@ 0x40
 800262c:	2007      	movs	r0, #7
 800262e:	f7ff fc07 	bl	8001e40 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 8002632:	f7ff fd3c 	bl	80020ae <nRF24_ReadStatus>
 8002636:	4603      	mov	r3, r0
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <nRF24_ReadRXPaylaod_IT_End+0x2c>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002640:	2120      	movs	r1, #32
 8002642:	2007      	movs	r0, #7
 8002644:	f7ff fbfc 	bl	8001e40 <nRF24_WriteRegister>
	}
	NRF24.Status = NRF24_Ready;
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <nRF24_ReadRXPaylaod_IT_End+0x3c>)
 800264a:	2204      	movs	r2, #4
 800264c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	58020400 	.word	0x58020400
 8002658:	000000d0 	.word	0x000000d0

0800265c <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002666:	f000 f811 	bl	800268c <nRF24_ReadFifoStatus>
 800266a:	4603      	mov	r3, r0
 800266c:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	fa42 f303 	asr.w	r3, r2, r3
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8002690:	2017      	movs	r0, #23
 8002692:	f7ff fb67 	bl	8001d64 <nRF24_ReadRegister>
 8002696:	4603      	mov	r3, r0
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}

0800269c <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80026a4:	4a25      	ldr	r2, [pc, #148]	@ (800273c <nRF24_Init+0xa0>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80026aa:	2200      	movs	r2, #0
 80026ac:	2140      	movs	r1, #64	@ 0x40
 80026ae:	4824      	ldr	r0, [pc, #144]	@ (8002740 <nRF24_Init+0xa4>)
 80026b0:	f00b fb2a 	bl	800dd08 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80026b4:	2201      	movs	r2, #1
 80026b6:	2180      	movs	r1, #128	@ 0x80
 80026b8:	4821      	ldr	r0, [pc, #132]	@ (8002740 <nRF24_Init+0xa4>)
 80026ba:	f00b fb25 	bl	800dd08 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80026be:	200a      	movs	r0, #10
 80026c0:	f006 f9e6 	bl	8008a90 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80026c4:	2003      	movs	r0, #3
 80026c6:	f7ff fcad 	bl	8002024 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7ff fcc9 	bl	8002062 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff fd37 	bl	8002144 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff fd51 	bl	800217e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80026dc:	2100      	movs	r1, #0
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff fd6a 	bl	80021b8 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80026e4:	2100      	movs	r1, #0
 80026e6:	201c      	movs	r0, #28
 80026e8:	f7ff fbaa 	bl	8001e40 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80026ec:	2120      	movs	r1, #32
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff fd8e 	bl	8002210 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 80026f4:	200f      	movs	r0, #15
 80026f6:	f7ff fd7a 	bl	80021ee <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80026fa:	2101      	movs	r1, #1
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff fda3 	bl	8002248 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002702:	2101      	movs	r1, #1
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff fdd4 	bl	80022b2 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800270a:	2003      	movs	r0, #3
 800270c:	f7ff fe06 	bl	800231c <nRF24_SetAddressWidth>

	HAL_Delay(1);
 8002710:	2001      	movs	r0, #1
 8002712:	f006 f9bd 	bl	8008a90 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002716:	2001      	movs	r0, #1
 8002718:	f7ff feaf 	bl	800247a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 800271c:	2000      	movs	r0, #0
 800271e:	f7ff fec9 	bl	80024b4 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8002722:	2000      	movs	r0, #0
 8002724:	f7ff fee3 	bl	80024ee <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002728:	2001      	movs	r0, #1
 800272a:	f006 f9b1 	bl	8008a90 <HAL_Delay>

	nRF24_ClearInterrupts();
 800272e:	f7ff fe91 	bl	8002454 <nRF24_ClearInterrupts>


}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	240000a4 	.word	0x240000a4
 8002740:	58020400 	.word	0x58020400

08002744 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002748:	f3bf 8f4f 	dsb	sy
}
 800274c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <__NVIC_SystemReset+0x24>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002756:	4904      	ldr	r1, [pc, #16]	@ (8002768 <__NVIC_SystemReset+0x24>)
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <__NVIC_SystemReset+0x28>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800275e:	f3bf 8f4f 	dsb	sy
}
 8002762:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <__NVIC_SystemReset+0x20>
 8002768:	e000ed00 	.word	0xe000ed00
 800276c:	05fa0004 	.word	0x05fa0004

08002770 <interpretcommand>:
#include "main.h"

extern USART_Struct USART;

void interpretcommand(void){
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]
 800277a:	2300      	movs	r3, #0
 800277c:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	USART.commandready = 0;
 800277e:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <interpretcommand+0x94>)
 8002780:	2200      	movs	r2, #0
 8002782:	73da      	strb	r2, [r3, #15]

	for(int j = 0; j < 80; j++){
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e032      	b.n	80027f0 <interpretcommand+0x80>

		if(USART.words[j] == ' '){
 800278a:	4a1e      	ldr	r2, [pc, #120]	@ (8002804 <interpretcommand+0x94>)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	3310      	adds	r3, #16
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b20      	cmp	r3, #32
 8002796:	d102      	bne.n	800279e <interpretcommand+0x2e>
			vcount++;
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	3301      	adds	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <interpretcommand+0x4a>
			USART.command[j] = USART.words[j];
 80027a4:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <interpretcommand+0x94>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	3310      	adds	r3, #16
 80027ac:	7819      	ldrb	r1, [r3, #0]
 80027ae:	4a15      	ldr	r2, [pc, #84]	@ (8002804 <interpretcommand+0x94>)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	331c      	adds	r3, #28
 80027b6:	460a      	mov	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d114      	bne.n	80027ea <interpretcommand+0x7a>
			value1[J1] = USART.words[j];
 80027c0:	7dbb      	ldrb	r3, [r7, #22]
 80027c2:	4910      	ldr	r1, [pc, #64]	@ (8002804 <interpretcommand+0x94>)
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	440a      	add	r2, r1
 80027c8:	3210      	adds	r2, #16
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	3318      	adds	r3, #24
 80027ce:	443b      	add	r3, r7
 80027d0:	f803 2c14 	strb.w	r2, [r3, #-20]
			USART.UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80027d4:	7dba      	ldrb	r2, [r7, #22]
 80027d6:	7dbb      	ldrb	r3, [r7, #22]
 80027d8:	3218      	adds	r2, #24
 80027da:	443a      	add	r2, r7
 80027dc:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80027e0:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <interpretcommand+0x94>)
 80027e2:	54d1      	strb	r1, [r2, r3]
			J1++;
 80027e4:	7dbb      	ldrb	r3, [r7, #22]
 80027e6:	3301      	adds	r3, #1
 80027e8:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	3301      	adds	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b4f      	cmp	r3, #79	@ 0x4f
 80027f4:	ddc9      	ble.n	800278a <interpretcommand+0x1a>
		}
	}
}
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	000041cc 	.word	0x000041cc

08002808 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b50      	cmp	r3, #80	@ 0x50
 8002818:	d14c      	bne.n	80028b4 <executecommand+0xac>
	{
		MYDRON.PID_Pitch.Angle_Factors[0] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 800281a:	4bd5      	ldr	r3, [pc, #852]	@ (8002b70 <executecommand+0x368>)
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002826:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002b74 <executecommand+0x36c>
 800282a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800282e:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002b78 <executecommand+0x370>
 8002832:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002836:	4bce      	ldr	r3, [pc, #824]	@ (8002b70 <executecommand+0x368>)
 8002838:	789b      	ldrb	r3, [r3, #2]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002b74 <executecommand+0x36c>
 8002846:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800284a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800284e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002856:	4bc6      	ldr	r3, [pc, #792]	@ (8002b70 <executecommand+0x368>)
 8002858:	78db      	ldrb	r3, [r3, #3]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002862:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002b74 <executecommand+0x36c>
 8002866:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800286a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286e:	4bc0      	ldr	r3, [pc, #768]	@ (8002b70 <executecommand+0x368>)
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287a:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002b74 <executecommand+0x36c>
 800287e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002882:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002886:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800288a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288e:	4bb8      	ldr	r3, [pc, #736]	@ (8002b70 <executecommand+0x368>)
 8002890:	795b      	ldrb	r3, [r3, #5]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002b74 <executecommand+0x36c>
 800289e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028a2:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002b78 <executecommand+0x370>
 80028a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ae:	4bb3      	ldr	r3, [pc, #716]	@ (8002b7c <executecommand+0x374>)
 80028b0:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
	}

	if(command[0] == 'I')
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b49      	cmp	r3, #73	@ 0x49
 80028ba:	d153      	bne.n	8002964 <executecommand+0x15c>
	{
		MYDRON.PID_Pitch.Angle_Factors[1] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 80028bc:	4bac      	ldr	r3, [pc, #688]	@ (8002b70 <executecommand+0x368>)
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002b74 <executecommand+0x36c>
 80028cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028d0:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002b78 <executecommand+0x370>
 80028d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028d8:	4ba5      	ldr	r3, [pc, #660]	@ (8002b70 <executecommand+0x368>)
 80028da:	789b      	ldrb	r3, [r3, #2]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e4:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b74 <executecommand+0x36c>
 80028e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028ec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b70 <executecommand+0x368>)
 80028fa:	78db      	ldrb	r3, [r3, #3]
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002904:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002b74 <executecommand+0x36c>
 8002908:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800290c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002910:	4b97      	ldr	r3, [pc, #604]	@ (8002b70 <executecommand+0x368>)
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b74 <executecommand+0x36c>
 8002920:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002924:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002928:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800292c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002930:	4b8f      	ldr	r3, [pc, #572]	@ (8002b70 <executecommand+0x368>)
 8002932:	795b      	ldrb	r3, [r3, #5]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002b74 <executecommand+0x36c>
 8002940:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002944:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002b78 <executecommand+0x370>
 8002948:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	4b8a      	ldr	r3, [pc, #552]	@ (8002b7c <executecommand+0x374>)
 8002952:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		MYDRON.Pitch.Angle_Error_Sum = 0;
 8002956:	4989      	ldr	r1, [pc, #548]	@ (8002b7c <executecommand+0x374>)
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	}

	if(command[0] == 'D')
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b44      	cmp	r3, #68	@ 0x44
 800296a:	d14c      	bne.n	8002a06 <executecommand+0x1fe>
	{
		MYDRON.PID_Pitch.Angle_Factors[2] = ((((float)USART.UASRT_PID_VAL[1])-48)*1000) + ((((float)USART.UASRT_PID_VAL[2])-48)*100) + ((((float)USART.UASRT_PID_VAL[3])-48)*10) + ((((float)USART.UASRT_PID_VAL[4])-48)) + ((((float)USART.UASRT_PID_VAL[5])-48)/10);
 800296c:	4b80      	ldr	r3, [pc, #512]	@ (8002b70 <executecommand+0x368>)
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002978:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8002b74 <executecommand+0x36c>
 800297c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002980:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002b84 <executecommand+0x37c>
 8002984:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002988:	4b79      	ldr	r3, [pc, #484]	@ (8002b70 <executecommand+0x368>)
 800298a:	789b      	ldrb	r3, [r3, #2]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002994:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8002b74 <executecommand+0x36c>
 8002998:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800299c:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002b78 <executecommand+0x370>
 80029a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a8:	4b71      	ldr	r3, [pc, #452]	@ (8002b70 <executecommand+0x368>)
 80029aa:	78db      	ldrb	r3, [r3, #3]
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b4:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002b74 <executecommand+0x36c>
 80029b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029bc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c8:	4b69      	ldr	r3, [pc, #420]	@ (8002b70 <executecommand+0x368>)
 80029ca:	791b      	ldrb	r3, [r3, #4]
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d4:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8002b74 <executecommand+0x36c>
 80029d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e0:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <executecommand+0x368>)
 80029e2:	795b      	ldrb	r3, [r3, #5]
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ec:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8002b74 <executecommand+0x36c>
 80029f0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029f4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a00:	4b5e      	ldr	r3, [pc, #376]	@ (8002b7c <executecommand+0x374>)
 8002a02:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
	}
	if(command[0] == 'p')
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b70      	cmp	r3, #112	@ 0x70
 8002a0c:	d14c      	bne.n	8002aa8 <executecommand+0x2a0>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[0] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8002a0e:	4b58      	ldr	r3, [pc, #352]	@ (8002b70 <executecommand+0x368>)
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002b74 <executecommand+0x36c>
 8002a1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a22:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002b78 <executecommand+0x370>
 8002a26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a2a:	4b51      	ldr	r3, [pc, #324]	@ (8002b70 <executecommand+0x368>)
 8002a2c:	789b      	ldrb	r3, [r3, #2]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002b74 <executecommand+0x36c>
 8002a3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a3e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4a:	4b49      	ldr	r3, [pc, #292]	@ (8002b70 <executecommand+0x368>)
 8002a4c:	78db      	ldrb	r3, [r3, #3]
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a56:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8002b74 <executecommand+0x36c>
 8002a5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a62:	4b43      	ldr	r3, [pc, #268]	@ (8002b70 <executecommand+0x368>)
 8002a64:	791b      	ldrb	r3, [r3, #4]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6e:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002b74 <executecommand+0x36c>
 8002a72:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a76:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a82:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <executecommand+0x368>)
 8002a84:	795b      	ldrb	r3, [r3, #5]
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8e:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8002b74 <executecommand+0x36c>
 8002a92:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a96:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 8002b78 <executecommand+0x370>
 8002a9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa2:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <executecommand+0x374>)
 8002aa4:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
	}

	if(command[0] == 'i')
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b69      	cmp	r3, #105	@ 0x69
 8002aae:	d153      	bne.n	8002b58 <executecommand+0x350>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[1] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <executecommand+0x368>)
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002abc:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002b74 <executecommand+0x36c>
 8002ac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ac4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002b78 <executecommand+0x370>
 8002ac8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002acc:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <executecommand+0x368>)
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002b74 <executecommand+0x36c>
 8002adc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ae0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aec:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <executecommand+0x368>)
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002b74 <executecommand+0x36c>
 8002afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b04:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <executecommand+0x368>)
 8002b06:	791b      	ldrb	r3, [r3, #4]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b10:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002b74 <executecommand+0x36c>
 8002b14:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b18:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <executecommand+0x368>)
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b30:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002b74 <executecommand+0x36c>
 8002b34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b38:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 8002b78 <executecommand+0x370>
 8002b3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <executecommand+0x374>)
 8002b46:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
		MYDRON.Pitch.Angular_Rate_Error_Sum = 0;
 8002b4a:	490c      	ldr	r1, [pc, #48]	@ (8002b7c <executecommand+0x374>)
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	}

	if(command[0] == 'd')
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b64      	cmp	r3, #100	@ 0x64
 8002b5e:	d15a      	bne.n	8002c16 <executecommand+0x40e>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[2] = ((((float)USART.UASRT_PID_VAL[1])-48)*1000) + ((((float)USART.UASRT_PID_VAL[2])-48)*100) + ((((float)USART.UASRT_PID_VAL[3])-48)*10) + ((((float)USART.UASRT_PID_VAL[4])-48)) + ((((float)USART.UASRT_PID_VAL[5])-48)/10);
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <executecommand+0x368>)
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6c:	e00c      	b.n	8002b88 <executecommand+0x380>
 8002b6e:	bf00      	nop
 8002b70:	000041cc 	.word	0x000041cc
 8002b74:	42400000 	.word	0x42400000
 8002b78:	42c80000 	.word	0x42c80000
 8002b7c:	00000160 	.word	0x00000160
 8002b80:	42400000 	.word	0x42400000
 8002b84:	447a0000 	.word	0x447a0000
 8002b88:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8002b80 <executecommand+0x378>
 8002b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b90:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8002b84 <executecommand+0x37c>
 8002b94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b98:	4bd4      	ldr	r3, [pc, #848]	@ (8002eec <executecommand+0x6e4>)
 8002b9a:	789b      	ldrb	r3, [r3, #2]
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba4:	eddf 6ad2 	vldr	s13, [pc, #840]	@ 8002ef0 <executecommand+0x6e8>
 8002ba8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bac:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002ef4 <executecommand+0x6ec>
 8002bb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb8:	4bcc      	ldr	r3, [pc, #816]	@ (8002eec <executecommand+0x6e4>)
 8002bba:	78db      	ldrb	r3, [r3, #3]
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc4:	eddf 6aca 	vldr	s13, [pc, #808]	@ 8002ef0 <executecommand+0x6e8>
 8002bc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bcc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002bd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd8:	4bc4      	ldr	r3, [pc, #784]	@ (8002eec <executecommand+0x6e4>)
 8002bda:	791b      	ldrb	r3, [r3, #4]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be4:	eddf 6ac2 	vldr	s13, [pc, #776]	@ 8002ef0 <executecommand+0x6e8>
 8002be8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf0:	4bbe      	ldr	r3, [pc, #760]	@ (8002eec <executecommand+0x6e4>)
 8002bf2:	795b      	ldrb	r3, [r3, #5]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfc:	eddf 6abc 	vldr	s13, [pc, #752]	@ 8002ef0 <executecommand+0x6e8>
 8002c00:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c04:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c10:	4bb9      	ldr	r3, [pc, #740]	@ (8002ef8 <executecommand+0x6f0>)
 8002c12:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
	}
	if(command[0] == 'F')
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b46      	cmp	r3, #70	@ 0x46
 8002c1c:	d150      	bne.n	8002cc0 <executecommand+0x4b8>
	{
		FDP_D_Gain_AR = ((((float)USART.UASRT_PID_VAL[1])-48)*1000) + ((((float)USART.UASRT_PID_VAL[2])-48)*100) + ((((float)USART.UASRT_PID_VAL[3])-48)*10) + ((((float)USART.UASRT_PID_VAL[4])-48)) + ((((float)USART.UASRT_PID_VAL[5])-48)/10);
 8002c1e:	4bb3      	ldr	r3, [pc, #716]	@ (8002eec <executecommand+0x6e4>)
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002ef0 <executecommand+0x6e8>
 8002c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c32:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002efc <executecommand+0x6f4>
 8002c36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c3a:	4bac      	ldr	r3, [pc, #688]	@ (8002eec <executecommand+0x6e4>)
 8002c3c:	789b      	ldrb	r3, [r3, #2]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8002ef0 <executecommand+0x6e8>
 8002c4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c4e:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002ef4 <executecommand+0x6ec>
 8002c52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c5a:	4ba4      	ldr	r3, [pc, #656]	@ (8002eec <executecommand+0x6e4>)
 8002c5c:	78db      	ldrb	r3, [r3, #3]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c66:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8002ef0 <executecommand+0x6e8>
 8002c6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c6e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8002eec <executecommand+0x6e4>)
 8002c7c:	791b      	ldrb	r3, [r3, #4]
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c86:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8002ef0 <executecommand+0x6e8>
 8002c8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c92:	4b96      	ldr	r3, [pc, #600]	@ (8002eec <executecommand+0x6e4>)
 8002c94:	795b      	ldrb	r3, [r3, #5]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8002ef0 <executecommand+0x6e8>
 8002ca2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ca6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002caa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cb6:	ee17 3a90 	vmov	r3, s15
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	4b90      	ldr	r3, [pc, #576]	@ (8002f00 <executecommand+0x6f8>)
 8002cbe:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b66      	cmp	r3, #102	@ 0x66
 8002cc6:	d150      	bne.n	8002d6a <executecommand+0x562>
	{
		FDP_D_Gain = ((((float)USART.UASRT_PID_VAL[1])-48)*1000) + ((((float)USART.UASRT_PID_VAL[2])-48)*100) + ((((float)USART.UASRT_PID_VAL[3])-48)*10) + ((((float)USART.UASRT_PID_VAL[4])-48)) + ((((float)USART.UASRT_PID_VAL[5])-48)/10);
 8002cc8:	4b88      	ldr	r3, [pc, #544]	@ (8002eec <executecommand+0x6e4>)
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	ee07 3a90 	vmov	s15, r3
 8002cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd4:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002ef0 <executecommand+0x6e8>
 8002cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cdc:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8002efc <executecommand+0x6f4>
 8002ce0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ce4:	4b81      	ldr	r3, [pc, #516]	@ (8002eec <executecommand+0x6e4>)
 8002ce6:	789b      	ldrb	r3, [r3, #2]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf0:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002ef0 <executecommand+0x6e8>
 8002cf4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cf8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002ef4 <executecommand+0x6ec>
 8002cfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d04:	4b79      	ldr	r3, [pc, #484]	@ (8002eec <executecommand+0x6e4>)
 8002d06:	78db      	ldrb	r3, [r3, #3]
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d10:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8002ef0 <executecommand+0x6e8>
 8002d14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d18:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d24:	4b71      	ldr	r3, [pc, #452]	@ (8002eec <executecommand+0x6e4>)
 8002d26:	791b      	ldrb	r3, [r3, #4]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d30:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002ef0 <executecommand+0x6e8>
 8002d34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002eec <executecommand+0x6e4>)
 8002d3e:	795b      	ldrb	r3, [r3, #5]
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d48:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002ef0 <executecommand+0x6e8>
 8002d4c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d50:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d54:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d60:	ee17 3a90 	vmov	r3, s15
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	4b67      	ldr	r3, [pc, #412]	@ (8002f04 <executecommand+0x6fc>)
 8002d68:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b61      	cmp	r3, #97	@ 0x61
 8002d70:	d14c      	bne.n	8002e0c <executecommand+0x604>
		{
			MYDRON.PID_Rool.Angle_Factors[0] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8002d72:	4b5e      	ldr	r3, [pc, #376]	@ (8002eec <executecommand+0x6e4>)
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002ef0 <executecommand+0x6e8>
 8002d82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d86:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002ef4 <executecommand+0x6ec>
 8002d8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d8e:	4b57      	ldr	r3, [pc, #348]	@ (8002eec <executecommand+0x6e4>)
 8002d90:	789b      	ldrb	r3, [r3, #2]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8002ef0 <executecommand+0x6e8>
 8002d9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002da2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002daa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dae:	4b4f      	ldr	r3, [pc, #316]	@ (8002eec <executecommand+0x6e4>)
 8002db0:	78db      	ldrb	r3, [r3, #3]
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dba:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002ef0 <executecommand+0x6e8>
 8002dbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc6:	4b49      	ldr	r3, [pc, #292]	@ (8002eec <executecommand+0x6e4>)
 8002dc8:	791b      	ldrb	r3, [r3, #4]
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd2:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8002ef0 <executecommand+0x6e8>
 8002dd6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dda:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002dde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de6:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <executecommand+0x6e4>)
 8002de8:	795b      	ldrb	r3, [r3, #5]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002ef0 <executecommand+0x6e8>
 8002df6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dfa:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8002ef4 <executecommand+0x6ec>
 8002dfe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e06:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <executecommand+0x6f0>)
 8002e08:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
		}

		if(command[0] == 'b')
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b62      	cmp	r3, #98	@ 0x62
 8002e12:	d153      	bne.n	8002ebc <executecommand+0x6b4>
		{
			MYDRON.PID_Rool.Angle_Factors[1] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8002e14:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <executecommand+0x6e4>)
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e20:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002ef0 <executecommand+0x6e8>
 8002e24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e28:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002ef4 <executecommand+0x6ec>
 8002e2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <executecommand+0x6e4>)
 8002e32:	789b      	ldrb	r3, [r3, #2]
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8002ef0 <executecommand+0x6e8>
 8002e40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e44:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e50:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <executecommand+0x6e4>)
 8002e52:	78db      	ldrb	r3, [r3, #3]
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002ef0 <executecommand+0x6e8>
 8002e60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e68:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <executecommand+0x6e4>)
 8002e6a:	791b      	ldrb	r3, [r3, #4]
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e74:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002ef0 <executecommand+0x6e8>
 8002e78:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e7c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e88:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <executecommand+0x6e4>)
 8002e8a:	795b      	ldrb	r3, [r3, #5]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e94:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002ef0 <executecommand+0x6e8>
 8002e98:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e9c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8002ef4 <executecommand+0x6ec>
 8002ea0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <executecommand+0x6f0>)
 8002eaa:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
			MYDRON.Pitch.Angle_Error_Sum = 0;
 8002eae:	4912      	ldr	r1, [pc, #72]	@ (8002ef8 <executecommand+0x6f0>)
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		}

		if(command[0] == 'c')
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b63      	cmp	r3, #99	@ 0x63
 8002ec2:	d160      	bne.n	8002f86 <executecommand+0x77e>
		{
			MYDRON.PID_Rool.Angle_Factors[2] = ((((float)USART.UASRT_PID_VAL[1])-48)*1000) + ((((float)USART.UASRT_PID_VAL[2])-48)*100) + ((((float)USART.UASRT_PID_VAL[3])-48)*10) + ((((float)USART.UASRT_PID_VAL[4])-48)) + ((((float)USART.UASRT_PID_VAL[5])-48)/10);
 8002ec4:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <executecommand+0x6e4>)
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002ef0 <executecommand+0x6e8>
 8002ed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ed8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002efc <executecommand+0x6f4>
 8002edc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ee0:	4b02      	ldr	r3, [pc, #8]	@ (8002eec <executecommand+0x6e4>)
 8002ee2:	789b      	ldrb	r3, [r3, #2]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	e012      	b.n	8002f10 <executecommand+0x708>
 8002eea:	bf00      	nop
 8002eec:	000041cc 	.word	0x000041cc
 8002ef0:	42400000 	.word	0x42400000
 8002ef4:	42c80000 	.word	0x42c80000
 8002ef8:	00000160 	.word	0x00000160
 8002efc:	447a0000 	.word	0x447a0000
 8002f00:	00004206 	.word	0x00004206
 8002f04:	00004208 	.word	0x00004208
 8002f08:	42400000 	.word	0x42400000
 8002f0c:	42c80000 	.word	0x42c80000
 8002f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f14:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002f08 <executecommand+0x700>
 8002f18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f1c:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8002f0c <executecommand+0x704>
 8002f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f28:	4bd5      	ldr	r3, [pc, #852]	@ (8003280 <executecommand+0xa78>)
 8002f2a:	78db      	ldrb	r3, [r3, #3]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f34:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 8003284 <executecommand+0xa7c>
 8002f38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f3c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f48:	4bcd      	ldr	r3, [pc, #820]	@ (8003280 <executecommand+0xa78>)
 8002f4a:	791b      	ldrb	r3, [r3, #4]
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f54:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8003284 <executecommand+0xa7c>
 8002f58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f60:	4bc7      	ldr	r3, [pc, #796]	@ (8003280 <executecommand+0xa78>)
 8002f62:	795b      	ldrb	r3, [r3, #5]
 8002f64:	ee07 3a90 	vmov	s15, r3
 8002f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6c:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003284 <executecommand+0xa7c>
 8002f70:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f74:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f78:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f80:	4bc1      	ldr	r3, [pc, #772]	@ (8003288 <executecommand+0xa80>)
 8002f82:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
		}
		if(command[0] == 'e')
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b65      	cmp	r3, #101	@ 0x65
 8002f8c:	d14c      	bne.n	8003028 <executecommand+0x820>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[0] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8002f8e:	4bbc      	ldr	r3, [pc, #752]	@ (8003280 <executecommand+0xa78>)
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003284 <executecommand+0xa7c>
 8002f9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fa2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800328c <executecommand+0xa84>
 8002fa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002faa:	4bb5      	ldr	r3, [pc, #724]	@ (8003280 <executecommand+0xa78>)
 8002fac:	789b      	ldrb	r3, [r3, #2]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb6:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8003284 <executecommand+0xa7c>
 8002fba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fbe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002fc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fca:	4bad      	ldr	r3, [pc, #692]	@ (8003280 <executecommand+0xa78>)
 8002fcc:	78db      	ldrb	r3, [r3, #3]
 8002fce:	ee07 3a90 	vmov	s15, r3
 8002fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd6:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8003284 <executecommand+0xa7c>
 8002fda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fe2:	4ba7      	ldr	r3, [pc, #668]	@ (8003280 <executecommand+0xa78>)
 8002fe4:	791b      	ldrb	r3, [r3, #4]
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fee:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003284 <executecommand+0xa7c>
 8002ff2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ff6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ffa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003002:	4b9f      	ldr	r3, [pc, #636]	@ (8003280 <executecommand+0xa78>)
 8003004:	795b      	ldrb	r3, [r3, #5]
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300e:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003284 <executecommand+0xa7c>
 8003012:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003016:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 800328c <executecommand+0xa84>
 800301a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800301e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003022:	4b99      	ldr	r3, [pc, #612]	@ (8003288 <executecommand+0xa80>)
 8003024:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
		}

		if(command[0] == 'g')
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b67      	cmp	r3, #103	@ 0x67
 800302e:	d153      	bne.n	80030d8 <executecommand+0x8d0>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[1] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8003030:	4b93      	ldr	r3, [pc, #588]	@ (8003280 <executecommand+0xa78>)
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003284 <executecommand+0xa7c>
 8003040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003044:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800328c <executecommand+0xa84>
 8003048:	ee27 7a87 	vmul.f32	s14, s15, s14
 800304c:	4b8c      	ldr	r3, [pc, #560]	@ (8003280 <executecommand+0xa78>)
 800304e:	789b      	ldrb	r3, [r3, #2]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003284 <executecommand+0xa7c>
 800305c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003060:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	4b84      	ldr	r3, [pc, #528]	@ (8003280 <executecommand+0xa78>)
 800306e:	78db      	ldrb	r3, [r3, #3]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003284 <executecommand+0xa7c>
 800307c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b7e      	ldr	r3, [pc, #504]	@ (8003280 <executecommand+0xa78>)
 8003086:	791b      	ldrb	r3, [r3, #4]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003284 <executecommand+0xa7c>
 8003094:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003098:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800309c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a4:	4b76      	ldr	r3, [pc, #472]	@ (8003280 <executecommand+0xa78>)
 80030a6:	795b      	ldrb	r3, [r3, #5]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b0:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003284 <executecommand+0xa7c>
 80030b4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030b8:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 800328c <executecommand+0xa84>
 80030bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c4:	4b70      	ldr	r3, [pc, #448]	@ (8003288 <executecommand+0xa80>)
 80030c6:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
			MYDRON.Rool.Angular_Rate_Error_Sum = 0;
 80030ca:	496f      	ldr	r1, [pc, #444]	@ (8003288 <executecommand+0xa80>)
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
		}

		if(command[0] == 'h')
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b68      	cmp	r3, #104	@ 0x68
 80030de:	d14c      	bne.n	800317a <executecommand+0x972>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[2] = ((((float)USART.UASRT_PID_VAL[1])-48)*1000) + ((((float)USART.UASRT_PID_VAL[2])-48)*100) + ((((float)USART.UASRT_PID_VAL[3])-48)*10) + ((((float)USART.UASRT_PID_VAL[4])-48)) + ((((float)USART.UASRT_PID_VAL[5])-48)/10);
 80030e0:	4b67      	ldr	r3, [pc, #412]	@ (8003280 <executecommand+0xa78>)
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ec:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003284 <executecommand+0xa7c>
 80030f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030f4:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8003290 <executecommand+0xa88>
 80030f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030fc:	4b60      	ldr	r3, [pc, #384]	@ (8003280 <executecommand+0xa78>)
 80030fe:	789b      	ldrb	r3, [r3, #2]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8003284 <executecommand+0xa7c>
 800310c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003110:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800328c <executecommand+0xa84>
 8003114:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311c:	4b58      	ldr	r3, [pc, #352]	@ (8003280 <executecommand+0xa78>)
 800311e:	78db      	ldrb	r3, [r3, #3]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003128:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8003284 <executecommand+0xa7c>
 800312c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003130:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313c:	4b50      	ldr	r3, [pc, #320]	@ (8003280 <executecommand+0xa78>)
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003148:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8003284 <executecommand+0xa7c>
 800314c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003154:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <executecommand+0xa78>)
 8003156:	795b      	ldrb	r3, [r3, #5]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003160:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003284 <executecommand+0xa7c>
 8003164:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003168:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800316c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003174:	4b44      	ldr	r3, [pc, #272]	@ (8003288 <executecommand+0xa80>)
 8003176:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140





		if(command[0] == 'j')
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b6a      	cmp	r3, #106	@ 0x6a
 8003180:	d14c      	bne.n	800321c <executecommand+0xa14>
			{
				MYDRON.PID_Yaw.Angle_Factors[0] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8003182:	4b3f      	ldr	r3, [pc, #252]	@ (8003280 <executecommand+0xa78>)
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8003284 <executecommand+0xa7c>
 8003192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003196:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800328c <executecommand+0xa84>
 800319a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800319e:	4b38      	ldr	r3, [pc, #224]	@ (8003280 <executecommand+0xa78>)
 80031a0:	789b      	ldrb	r3, [r3, #2]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003284 <executecommand+0xa7c>
 80031ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031b2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80031b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031be:	4b30      	ldr	r3, [pc, #192]	@ (8003280 <executecommand+0xa78>)
 80031c0:	78db      	ldrb	r3, [r3, #3]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8003284 <executecommand+0xa7c>
 80031ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003280 <executecommand+0xa78>)
 80031d8:	791b      	ldrb	r3, [r3, #4]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8003284 <executecommand+0xa7c>
 80031e6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031ea:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f6:	4b22      	ldr	r3, [pc, #136]	@ (8003280 <executecommand+0xa78>)
 80031f8:	795b      	ldrb	r3, [r3, #5]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8003284 <executecommand+0xa7c>
 8003206:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800320a:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800328c <executecommand+0xa84>
 800320e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	4b1c      	ldr	r3, [pc, #112]	@ (8003288 <executecommand+0xa80>)
 8003218:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158
			}

			if(command[0] == 'k')
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b6b      	cmp	r3, #107	@ 0x6b
 8003222:	d161      	bne.n	80032e8 <executecommand+0xae0>
			{
				MYDRON.PID_Yaw.Angle_Factors[1] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8003224:	4b16      	ldr	r3, [pc, #88]	@ (8003280 <executecommand+0xa78>)
 8003226:	785b      	ldrb	r3, [r3, #1]
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003230:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003284 <executecommand+0xa7c>
 8003234:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003238:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800328c <executecommand+0xa84>
 800323c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003240:	4b0f      	ldr	r3, [pc, #60]	@ (8003280 <executecommand+0xa78>)
 8003242:	789b      	ldrb	r3, [r3, #2]
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8003284 <executecommand+0xa7c>
 8003250:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003254:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003258:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800325c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003260:	4b07      	ldr	r3, [pc, #28]	@ (8003280 <executecommand+0xa78>)
 8003262:	78db      	ldrb	r3, [r3, #3]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003284 <executecommand+0xa7c>
 8003270:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003278:	4b01      	ldr	r3, [pc, #4]	@ (8003280 <executecommand+0xa78>)
 800327a:	791b      	ldrb	r3, [r3, #4]
 800327c:	e00c      	b.n	8003298 <executecommand+0xa90>
 800327e:	bf00      	nop
 8003280:	000041cc 	.word	0x000041cc
 8003284:	42400000 	.word	0x42400000
 8003288:	00000160 	.word	0x00000160
 800328c:	42c80000 	.word	0x42c80000
 8003290:	447a0000 	.word	0x447a0000
 8003294:	42400000 	.word	0x42400000
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a0:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8003294 <executecommand+0xa8c>
 80032a4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032a8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b4:	4bbe      	ldr	r3, [pc, #760]	@ (80035b0 <executecommand+0xda8>)
 80032b6:	795b      	ldrb	r3, [r3, #5]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c0:	eddf 6abc 	vldr	s13, [pc, #752]	@ 80035b4 <executecommand+0xdac>
 80032c4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032c8:	ed9f 6abb 	vldr	s12, [pc, #748]	@ 80035b8 <executecommand+0xdb0>
 80032cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d4:	4bb9      	ldr	r3, [pc, #740]	@ (80035bc <executecommand+0xdb4>)
 80032d6:	edc3 7a57 	vstr	s15, [r3, #348]	@ 0x15c
				MYDRON.Yaw.Angle_Error_Sum = 0;
 80032da:	49b8      	ldr	r1, [pc, #736]	@ (80035bc <executecommand+0xdb4>)
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
			}

			if(command[0] == 'l')
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b6c      	cmp	r3, #108	@ 0x6c
 80032ee:	d14c      	bne.n	800338a <executecommand+0xb82>
			{
				MYDRON.PID_Yaw.Angle_Factors[2] = ((((float)USART.UASRT_PID_VAL[1])-48)*1000) + ((((float)USART.UASRT_PID_VAL[2])-48)*100) + ((((float)USART.UASRT_PID_VAL[3])-48)*10) + ((((float)USART.UASRT_PID_VAL[4])-48)) + ((((float)USART.UASRT_PID_VAL[5])-48)/10);
 80032f0:	4baf      	ldr	r3, [pc, #700]	@ (80035b0 <executecommand+0xda8>)
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fc:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80035b4 <executecommand+0xdac>
 8003300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003304:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80035c0 <executecommand+0xdb8>
 8003308:	ee27 7a87 	vmul.f32	s14, s15, s14
 800330c:	4ba8      	ldr	r3, [pc, #672]	@ (80035b0 <executecommand+0xda8>)
 800330e:	789b      	ldrb	r3, [r3, #2]
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003318:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 80035b4 <executecommand+0xdac>
 800331c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003320:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80035b8 <executecommand+0xdb0>
 8003324:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800332c:	4ba0      	ldr	r3, [pc, #640]	@ (80035b0 <executecommand+0xda8>)
 800332e:	78db      	ldrb	r3, [r3, #3]
 8003330:	ee07 3a90 	vmov	s15, r3
 8003334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003338:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80035b4 <executecommand+0xdac>
 800333c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003340:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003344:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800334c:	4b98      	ldr	r3, [pc, #608]	@ (80035b0 <executecommand+0xda8>)
 800334e:	791b      	ldrb	r3, [r3, #4]
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003358:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80035b4 <executecommand+0xdac>
 800335c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003364:	4b92      	ldr	r3, [pc, #584]	@ (80035b0 <executecommand+0xda8>)
 8003366:	795b      	ldrb	r3, [r3, #5]
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003370:	eddf 6a90 	vldr	s13, [pc, #576]	@ 80035b4 <executecommand+0xdac>
 8003374:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003378:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800337c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003384:	4b8d      	ldr	r3, [pc, #564]	@ (80035bc <executecommand+0xdb4>)
 8003386:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
			}
			if(command[0] == 'm')
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b6d      	cmp	r3, #109	@ 0x6d
 8003390:	d14c      	bne.n	800342c <executecommand+0xc24>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[0] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8003392:	4b87      	ldr	r3, [pc, #540]	@ (80035b0 <executecommand+0xda8>)
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80035b4 <executecommand+0xdac>
 80033a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033a6:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80035b8 <executecommand+0xdb0>
 80033aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033ae:	4b80      	ldr	r3, [pc, #512]	@ (80035b0 <executecommand+0xda8>)
 80033b0:	789b      	ldrb	r3, [r3, #2]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80035b4 <executecommand+0xdac>
 80033be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033c2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ce:	4b78      	ldr	r3, [pc, #480]	@ (80035b0 <executecommand+0xda8>)
 80033d0:	78db      	ldrb	r3, [r3, #3]
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033da:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80035b4 <executecommand+0xdac>
 80033de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e6:	4b72      	ldr	r3, [pc, #456]	@ (80035b0 <executecommand+0xda8>)
 80033e8:	791b      	ldrb	r3, [r3, #4]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80035b4 <executecommand+0xdac>
 80033f6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033fa:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003406:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <executecommand+0xda8>)
 8003408:	795b      	ldrb	r3, [r3, #5]
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	eddf 6a68 	vldr	s13, [pc, #416]	@ 80035b4 <executecommand+0xdac>
 8003416:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800341a:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 80035b8 <executecommand+0xdb0>
 800341e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003426:	4b65      	ldr	r3, [pc, #404]	@ (80035bc <executecommand+0xdb4>)
 8003428:	edc3 7a5b 	vstr	s15, [r3, #364]	@ 0x16c
			}

			if(command[0] == 'n')
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b6e      	cmp	r3, #110	@ 0x6e
 8003432:	d153      	bne.n	80034dc <executecommand+0xcd4>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[1] = ((((float)USART.UASRT_PID_VAL[1])-48)*100) + ((((float)USART.UASRT_PID_VAL[2])-48)*10) + ((((float)USART.UASRT_PID_VAL[3])-48)) + ((((float)USART.UASRT_PID_VAL[4])-48)/10) + ((((float)USART.UASRT_PID_VAL[5])-48)/100);
 8003434:	4b5e      	ldr	r3, [pc, #376]	@ (80035b0 <executecommand+0xda8>)
 8003436:	785b      	ldrb	r3, [r3, #1]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003440:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80035b4 <executecommand+0xdac>
 8003444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003448:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80035b8 <executecommand+0xdb0>
 800344c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003450:	4b57      	ldr	r3, [pc, #348]	@ (80035b0 <executecommand+0xda8>)
 8003452:	789b      	ldrb	r3, [r3, #2]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345c:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80035b4 <executecommand+0xdac>
 8003460:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003464:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003468:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800346c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003470:	4b4f      	ldr	r3, [pc, #316]	@ (80035b0 <executecommand+0xda8>)
 8003472:	78db      	ldrb	r3, [r3, #3]
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347c:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80035b4 <executecommand+0xdac>
 8003480:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003488:	4b49      	ldr	r3, [pc, #292]	@ (80035b0 <executecommand+0xda8>)
 800348a:	791b      	ldrb	r3, [r3, #4]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003494:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80035b4 <executecommand+0xdac>
 8003498:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800349c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a8:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <executecommand+0xda8>)
 80034aa:	795b      	ldrb	r3, [r3, #5]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b4:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80035b4 <executecommand+0xdac>
 80034b8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034bc:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80035b8 <executecommand+0xdb0>
 80034c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c8:	4b3c      	ldr	r3, [pc, #240]	@ (80035bc <executecommand+0xdb4>)
 80034ca:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
				MYDRON.Yaw.Angular_Rate_Error_Sum = 0;
 80034ce:	493b      	ldr	r1, [pc, #236]	@ (80035bc <executecommand+0xdb4>)
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
			}

			if(command[0] == 'o')
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b6f      	cmp	r3, #111	@ 0x6f
 80034e2:	d14c      	bne.n	800357e <executecommand+0xd76>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[2] = ((((float)USART.UASRT_PID_VAL[1])-48)*1000) + ((((float)USART.UASRT_PID_VAL[2])-48)*100) + ((((float)USART.UASRT_PID_VAL[3])-48)*10) + ((((float)USART.UASRT_PID_VAL[4])-48)) + ((((float)USART.UASRT_PID_VAL[5])-48)/10);
 80034e4:	4b32      	ldr	r3, [pc, #200]	@ (80035b0 <executecommand+0xda8>)
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80035b4 <executecommand+0xdac>
 80034f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034f8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80035c0 <executecommand+0xdb8>
 80034fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003500:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <executecommand+0xda8>)
 8003502:	789b      	ldrb	r3, [r3, #2]
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80035b4 <executecommand+0xdac>
 8003510:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003514:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80035b8 <executecommand+0xdb0>
 8003518:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800351c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003520:	4b23      	ldr	r3, [pc, #140]	@ (80035b0 <executecommand+0xda8>)
 8003522:	78db      	ldrb	r3, [r3, #3]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80035b4 <executecommand+0xdac>
 8003530:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003534:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003538:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800353c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <executecommand+0xda8>)
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354c:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80035b4 <executecommand+0xdac>
 8003550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003558:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <executecommand+0xda8>)
 800355a:	795b      	ldrb	r3, [r3, #5]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003564:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80035b4 <executecommand+0xdac>
 8003568:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800356c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003570:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003578:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <executecommand+0xdb4>)
 800357a:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
			}

	if(command[0] == 'r'){
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b72      	cmp	r3, #114	@ 0x72
 8003584:	d101      	bne.n	800358a <executecommand+0xd82>
		NVIC_SystemReset();
 8003586:	f7ff f8dd 	bl	8002744 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	e007      	b.n	80035a0 <executecommand+0xd98>
		USART.UASRT_PID_VAL[i] = 0;
 8003590:	4a07      	ldr	r2, [pc, #28]	@ (80035b0 <executecommand+0xda8>)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4413      	add	r3, r2
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3301      	adds	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b0e      	cmp	r3, #14
 80035a4:	ddf4      	ble.n	8003590 <executecommand+0xd88>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	000041cc 	.word	0x000041cc
 80035b4:	42400000 	.word	0x42400000
 80035b8:	42c80000 	.word	0x42c80000
 80035bc:	00000160 	.word	0x00000160
 80035c0:	447a0000 	.word	0x447a0000

080035c4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	@ 0x28
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	2224      	movs	r2, #36	@ 0x24
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f01a fb73 	bl	801dcbc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80035d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003690 <MX_ADC2_Init+0xcc>)
 80035d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003694 <MX_ADC2_Init+0xd0>)
 80035da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80035dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003690 <MX_ADC2_Init+0xcc>)
 80035de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003690 <MX_ADC2_Init+0xcc>)
 80035e6:	2208      	movs	r2, #8
 80035e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035ea:	4b29      	ldr	r3, [pc, #164]	@ (8003690 <MX_ADC2_Init+0xcc>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035f0:	4b27      	ldr	r3, [pc, #156]	@ (8003690 <MX_ADC2_Init+0xcc>)
 80035f2:	2204      	movs	r2, #4
 80035f4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035f6:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <MX_ADC2_Init+0xcc>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	@ (8003690 <MX_ADC2_Init+0xcc>)
 80035fe:	2200      	movs	r2, #0
 8003600:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003602:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <MX_ADC2_Init+0xcc>)
 8003604:	2201      	movs	r2, #1
 8003606:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003608:	4b21      	ldr	r3, [pc, #132]	@ (8003690 <MX_ADC2_Init+0xcc>)
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8003610:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <MX_ADC2_Init+0xcc>)
 8003612:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003616:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003618:	4b1d      	ldr	r3, [pc, #116]	@ (8003690 <MX_ADC2_Init+0xcc>)
 800361a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800361e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003620:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <MX_ADC2_Init+0xcc>)
 8003622:	2203      	movs	r2, #3
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003626:	4b1a      	ldr	r3, [pc, #104]	@ (8003690 <MX_ADC2_Init+0xcc>)
 8003628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800362c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800362e:	4b18      	ldr	r3, [pc, #96]	@ (8003690 <MX_ADC2_Init+0xcc>)
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003634:	4b16      	ldr	r3, [pc, #88]	@ (8003690 <MX_ADC2_Init+0xcc>)
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800363c:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <MX_ADC2_Init+0xcc>)
 800363e:	2201      	movs	r2, #1
 8003640:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003642:	4813      	ldr	r0, [pc, #76]	@ (8003690 <MX_ADC2_Init+0xcc>)
 8003644:	f005 fd6e 	bl	8009124 <HAL_ADC_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800364e:	f004 f957 	bl	8007900 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003652:	4b11      	ldr	r3, [pc, #68]	@ (8003698 <MX_ADC2_Init+0xd4>)
 8003654:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003656:	2306      	movs	r3, #6
 8003658:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800365a:	2307      	movs	r3, #7
 800365c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800365e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003662:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003664:	2304      	movs	r3, #4
 8003666:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4806      	ldr	r0, [pc, #24]	@ (8003690 <MX_ADC2_Init+0xcc>)
 8003678:	f006 fa9a 	bl	8009bb0 <HAL_ADC_ConfigChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8003682:	f004 f93d 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003686:	bf00      	nop
 8003688:	3728      	adds	r7, #40	@ 0x28
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	240000ac 	.word	0x240000ac
 8003694:	40022100 	.word	0x40022100
 8003698:	19200040 	.word	0x19200040

0800369c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a34      	ldr	r2, [pc, #208]	@ (800378c <HAL_ADC_MspInit+0xf0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d162      	bne.n	8003784 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80036be:	4b34      	ldr	r3, [pc, #208]	@ (8003790 <HAL_ADC_MspInit+0xf4>)
 80036c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036c4:	4a32      	ldr	r2, [pc, #200]	@ (8003790 <HAL_ADC_MspInit+0xf4>)
 80036c6:	f043 0320 	orr.w	r3, r3, #32
 80036ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80036ce:	4b30      	ldr	r3, [pc, #192]	@ (8003790 <HAL_ADC_MspInit+0xf4>)
 80036d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003790 <HAL_ADC_MspInit+0xf4>)
 80036de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003790 <HAL_ADC_MspInit+0xf4>)
 80036e4:	f043 0320 	orr.w	r3, r3, #32
 80036e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036ec:	4b28      	ldr	r3, [pc, #160]	@ (8003790 <HAL_ADC_MspInit+0xf4>)
 80036ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003700:	2303      	movs	r3, #3
 8003702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4619      	mov	r1, r3
 800370e:	4821      	ldr	r0, [pc, #132]	@ (8003794 <HAL_ADC_MspInit+0xf8>)
 8003710:	f00a f93a 	bl	800d988 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003714:	4b20      	ldr	r3, [pc, #128]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 8003716:	4a21      	ldr	r2, [pc, #132]	@ (800379c <HAL_ADC_MspInit+0x100>)
 8003718:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800371a:	4b1f      	ldr	r3, [pc, #124]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 800371c:	220a      	movs	r2, #10
 800371e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003720:	4b1d      	ldr	r3, [pc, #116]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003726:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 8003728:	2200      	movs	r2, #0
 800372a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800372c:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 800372e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003732:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003734:	4b18      	ldr	r3, [pc, #96]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 8003736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800373a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800373c:	4b16      	ldr	r3, [pc, #88]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 800373e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003742:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003744:	4b14      	ldr	r3, [pc, #80]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 8003746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800374a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800374c:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 800374e:	2200      	movs	r2, #0
 8003750:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003752:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 8003754:	2200      	movs	r2, #0
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003758:	480f      	ldr	r0, [pc, #60]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 800375a:	f007 fac3 	bl	800ace4 <HAL_DMA_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8003764:	f004 f8cc 	bl	8007900 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 800376c:	659a      	str	r2, [r3, #88]	@ 0x58
 800376e:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <HAL_ADC_MspInit+0xfc>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003774:	2200      	movs	r2, #0
 8003776:	2100      	movs	r1, #0
 8003778:	2012      	movs	r0, #18
 800377a:	f007 fa06 	bl	800ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800377e:	2012      	movs	r0, #18
 8003780:	f007 fa1d 	bl	800abbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003784:	bf00      	nop
 8003786:	3728      	adds	r7, #40	@ 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40022100 	.word	0x40022100
 8003790:	58024400 	.word	0x58024400
 8003794:	58021400 	.word	0x58021400
 8003798:	2400011c 	.word	0x2400011c
 800379c:	40020410 	.word	0x40020410

080037a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037a6:	4b19      	ldr	r3, [pc, #100]	@ (800380c <MX_DMA_Init+0x6c>)
 80037a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037ac:	4a17      	ldr	r2, [pc, #92]	@ (800380c <MX_DMA_Init+0x6c>)
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <MX_DMA_Init+0x6c>)
 80037b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <MX_DMA_Init+0x6c>)
 80037c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037ca:	4a10      	ldr	r2, [pc, #64]	@ (800380c <MX_DMA_Init+0x6c>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037d4:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <MX_DMA_Init+0x6c>)
 80037d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2100      	movs	r1, #0
 80037e6:	200b      	movs	r0, #11
 80037e8:	f007 f9cf 	bl	800ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037ec:	200b      	movs	r0, #11
 80037ee:	f007 f9e6 	bl	800abbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2100      	movs	r1, #0
 80037f6:	2038      	movs	r0, #56	@ 0x38
 80037f8:	f007 f9c7 	bl	800ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037fc:	2038      	movs	r0, #56	@ 0x38
 80037fe:	f007 f9de 	bl	800abbe <HAL_NVIC_EnableIRQ>

}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	58024400 	.word	0x58024400

08003810 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003810:	b580      	push	{r7, lr}
 8003812:	b08e      	sub	sp, #56	@ 0x38
 8003814:	af00      	add	r7, sp, #0
 8003816:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(MYDRON.Pitch.Angle_Error);
 800382c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a60 <Thrust_filter+0x250>)
 800382e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003836:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(MYDRON.Rool.Angle_Error);
 800383a:	4b89      	ldr	r3, [pc, #548]	@ (8003a60 <Thrust_filter+0x250>)
 800383c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003844:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003848:	ed97 7b08 	vldr	d7, [r7, #32]
 800384c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003850:	eeb0 0a67 	vmov.f32	s0, s15
 8003854:	f003 fb8a 	bl	8006f6c <WartoscBezwgledna>
 8003858:	eef0 7a40 	vmov.f32	s15, s0
 800385c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003860:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 8003864:	ed97 7b06 	vldr	d7, [r7, #24]
 8003868:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800386c:	eeb0 0a67 	vmov.f32	s0, s15
 8003870:	f003 fb7c 	bl	8006f6c <WartoscBezwgledna>
 8003874:	eef0 7a40 	vmov.f32	s15, s0
 8003878:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800387c:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 8003880:	ed97 6b08 	vldr	d6, [r7, #32]
 8003884:	ed97 7b06 	vldr	d7, [r7, #24]
 8003888:	ee36 7b07 	vadd.f64	d7, d6, d7
 800388c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003890:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003894:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8003898:	eeb0 0b47 	vmov.f64	d0, d7
 800389c:	f01a fba8 	bl	801dff0 <pow>
 80038a0:	ed87 0b04 	vstr	d0, [r7, #16]
	if(MYDRON.Thrust.Wanted > 10500){
 80038a4:	4b6e      	ldr	r3, [pc, #440]	@ (8003a60 <Thrust_filter+0x250>)
 80038a6:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 80038aa:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038ae:	4293      	cmp	r3, r2
 80038b0:	dd04      	ble.n	80038bc <Thrust_filter+0xac>
		MYDRON.Thrust.Wanted = 10500;
 80038b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003a60 <Thrust_filter+0x250>)
 80038b4:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038b8:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
	}

	thrust_error = MYDRON.Thrust.Wanted - MYDRON.Thrust.Now;
 80038bc:	4b68      	ldr	r3, [pc, #416]	@ (8003a60 <Thrust_filter+0x250>)
 80038be:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	4b66      	ldr	r3, [pc, #408]	@ (8003a60 <Thrust_filter+0x250>)
 80038c6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 80038d0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	da13      	bge.n	8003900 <Thrust_filter+0xf0>
		thrust_error = WartoscBezwgledna(thrust_error);
 80038d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038dc:	ee07 3a90 	vmov	s15, r3
 80038e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e4:	eeb0 0a67 	vmov.f32	s0, s15
 80038e8:	f003 fb40 	bl	8006f6c <WartoscBezwgledna>
 80038ec:	eef0 7a40 	vmov.f32	s15, s0
 80038f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038f4:	ee17 3a90 	vmov	r3, s15
 80038f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003900:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 809d 	beq.w	8003a44 <Thrust_filter+0x234>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800390a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003916:	eeb0 0b47 	vmov.f64	d0, d7
 800391a:	f01a fa11 	bl	801dd40 <sqrt>
 800391e:	eeb0 7b40 	vmov.f64	d7, d0
 8003922:	eeb0 0b47 	vmov.f64	d0, d7
 8003926:	f01a fa0b 	bl	801dd40 <sqrt>
 800392a:	eeb0 7b40 	vmov.f64	d7, d0
 800392e:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8003a50 <Thrust_filter+0x240>
 8003932:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003936:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800393a:	ed97 7b00 	vldr	d7, [r7]
 800393e:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8003a58 <Thrust_filter+0x248>
 8003942:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003946:	ed97 7b02 	vldr	d7, [r7, #8]
 800394a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800394e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003952:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003956:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 800395a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <Thrust_filter+0x15e>
			thrust_add = thrust_add*(-1);
 8003962:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003966:	eeb1 7b47 	vneg.f64	d7, d7
 800396a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 800396e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003972:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003976:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d513      	bpl.n	80039a8 <Thrust_filter+0x198>
 8003980:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003984:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003988:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003990:	dd0a      	ble.n	80039a8 <Thrust_filter+0x198>
			MYDRON.Thrust.Values = MYDRON.Thrust.Values + thrust_add;
 8003992:	4b33      	ldr	r3, [pc, #204]	@ (8003a60 <Thrust_filter+0x250>)
 8003994:	ed93 6b32 	vldr	d6, [r3, #200]	@ 0xc8
 8003998:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800399c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a60 <Thrust_filter+0x250>)
 80039a2:	ed83 7b32 	vstr	d7, [r3, #200]	@ 0xc8
 80039a6:	e012      	b.n	80039ce <Thrust_filter+0x1be>
		}
		else{
			MYDRON.Thrust.Now = MYDRON.Thrust.Now + thrust_add;
 80039a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <Thrust_filter+0x250>)
 80039aa:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039b6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039c2:	ee17 3a90 	vmov	r3, s15
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	4b25      	ldr	r3, [pc, #148]	@ (8003a60 <Thrust_filter+0x250>)
 80039ca:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		}

		if(MYDRON.Thrust.Values >= 1 || MYDRON.Thrust.Values <= -1){
 80039ce:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <Thrust_filter+0x250>)
 80039d0:	ed93 7b32 	vldr	d7, [r3, #200]	@ 0xc8
 80039d4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	da09      	bge.n	80039f6 <Thrust_filter+0x1e6>
 80039e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a60 <Thrust_filter+0x250>)
 80039e4:	ed93 7b32 	vldr	d7, [r3, #200]	@ 0xc8
 80039e8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	d81a      	bhi.n	8003a2c <Thrust_filter+0x21c>
			MYDRON.Thrust.Now = MYDRON.Thrust.Now + MYDRON.Thrust.Values;
 80039f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a60 <Thrust_filter+0x250>)
 80039f8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a04:	4b16      	ldr	r3, [pc, #88]	@ (8003a60 <Thrust_filter+0x250>)
 8003a06:	ed93 7b32 	vldr	d7, [r3, #200]	@ 0xc8
 8003a0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a12:	ee17 3a90 	vmov	r3, s15
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <Thrust_filter+0x250>)
 8003a1a:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
			MYDRON.Thrust.Values = 0;
 8003a1e:	4910      	ldr	r1, [pc, #64]	@ (8003a60 <Thrust_filter+0x250>)
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
		}
		if(MYDRON.Thrust.Now > 10000){//ograniczenie THRUST
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a60 <Thrust_filter+0x250>)
 8003a2e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8003a32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d904      	bls.n	8003a44 <Thrust_filter+0x234>
			MYDRON.Thrust.Now = 10000;
 8003a3a:	4b09      	ldr	r3, [pc, #36]	@ (8003a60 <Thrust_filter+0x250>)
 8003a3c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a40:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
		}
	}
}
 8003a44:	bf00      	nop
 8003a46:	3738      	adds	r7, #56	@ 0x38
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	f3af 8000 	nop.w
 8003a50:	00000000 	.word	0x00000000
 8003a54:	409f4000 	.word	0x409f4000
 8003a58:	30553261 	.word	0x30553261
 8003a5c:	3f43a92a 	.word	0x3f43a92a
 8003a60:	00000160 	.word	0x00000160

08003a64 <PID_call>:
//
//	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_call(Dron Paramiters){
 8003a64:	b084      	sub	sp, #16
 8003a66:	b490      	push	{r4, r7}
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	f107 0408 	add.w	r4, r7, #8
 8003a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Paramiters.PID_Pitch.Angle_Value = (Paramiters.Pitch.Angle_Error * Paramiters.PID_Pitch.Angle_Factors[0]) + (Paramiters.Pitch.Angle_Error_Sum * Paramiters.PID_Pitch.Angle_Factors[1] * looptime) + ((Paramiters.Pitch.Angle_Error - Paramiters.Pitch.Old_Angle_Error) * Paramiters.PID_Pitch.Angle_Factors[2]);
 8003a72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a76:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8003a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a82:	ed97 5b0c 	vldr	d5, [r7, #48]	@ 0x30
 8003a86:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8003a8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a8e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003a92:	4b7b      	ldr	r3, [pc, #492]	@ (8003c80 <PID_call+0x21c>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003aa0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003aa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aa8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003aac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ab0:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8003ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003abc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ac4:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
	Paramiters.PID_Rool.Angle_Value = (Paramiters.Rool.Angle_Error * Paramiters.PID_Rool.Angle_Factors[0]) + (Paramiters.Rool.Angle_Error_Sum * Paramiters.PID_Rool.Angle_Factors[1] * looptime) + ((Paramiters.Rool.Angle_Error - Paramiters.Rool.Old_Angle_Error) * Paramiters.PID_Rool.Angle_Factors[2]);
 8003ac8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003acc:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8003ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ad8:	ed97 5b1c 	vldr	d5, [r7, #112]	@ 0x70
 8003adc:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003ae0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ae4:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003ae8:	4b65      	ldr	r3, [pc, #404]	@ (8003c80 <PID_call+0x21c>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003af2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003af6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003afa:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003afe:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003b02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b06:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b1a:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124
	Paramiters.PID_Yaw.Angle_Value = (Paramiters.Yaw.Angle_Error * Paramiters.PID_Yaw.Angle_Factors[0]) + (Paramiters.Yaw.Angle_Error_Sum * Paramiters.PID_Yaw.Angle_Factors[1] * looptime) + ((Paramiters.Yaw.Angle_Error - Paramiters.Yaw.Old_Angle_Error) * Paramiters.PID_Yaw.Angle_Factors[2]);
 8003b1e:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8003b22:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b2e:	ed97 5b2c 	vldr	d5, [r7, #176]	@ 0xb0
 8003b32:	edd7 7a59 	vldr	s15, [r7, #356]	@ 0x164
 8003b36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b3a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003b3e:	4b50      	ldr	r3, [pc, #320]	@ (8003c80 <PID_call+0x21c>)
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b48:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b50:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8003b54:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b5c:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8003b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b70:	edc7 7a56 	vstr	s15, [r7, #344]	@ 0x158

	Paramiters.PID_Pitch.Angular_Rate_Value = (Paramiters.Pitch.Angular_Rate_Error * Paramiters.PID_Pitch.Angular_Rate_Factors[0]) + (Paramiters.Pitch.Angular_Rate_Error_Sum * Paramiters.PID_Pitch.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Pitch.Angular_Rate_Error - Paramiters.Pitch.Old_Angular_Rate_Error) * Paramiters.PID_Pitch.Angular_Rate_Factors[2]);
 8003b74:	ed97 7a08 	vldr	s14, [r7, #32]
 8003b78:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8003b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b80:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b84:	ed97 5b0e 	vldr	d5, [r7, #56]	@ 0x38
 8003b88:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8003b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b90:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003b94:	4b3a      	ldr	r3, [pc, #232]	@ (8003c80 <PID_call+0x21c>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ba2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ba6:	ed97 7a08 	vldr	s14, [r7, #32]
 8003baa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003bae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bb2:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bc2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bc6:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
	Paramiters.PID_Rool.Angular_Rate_Value = (Paramiters.Rool.Angular_Rate_Error * Paramiters.PID_Rool.Angular_Rate_Factors[0]) + (Paramiters.Rool.Angular_Rate_Error_Sum * Paramiters.PID_Rool.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Rool.Angular_Rate_Error - Paramiters.Rool.Old_Angular_Rate_Error) * Paramiters.PID_Rool.Angular_Rate_Factors[2]);
 8003bca:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003bce:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003bda:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8003bde:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003be2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003be6:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003bea:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <PID_call+0x21c>)
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bf4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bf8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003bfc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003c00:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003c04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c08:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8003c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c1c:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
	Paramiters.PID_Yaw.Angular_Rate_Value = (Paramiters.Yaw.Angular_Rate_Error * Paramiters.PID_Yaw.Angular_Rate_Factors[0]) + (Paramiters.Yaw.Angular_Rate_Error_Sum * Paramiters.PID_Yaw.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Yaw.Angular_Rate_Error - Paramiters.Yaw.Old_Angular_Rate_Error) * Paramiters.PID_Yaw.Angular_Rate_Factors[2]);
 8003c20:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8003c24:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8003c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c30:	ed97 5b2e 	vldr	d5, [r7, #184]	@ 0xb8
 8003c34:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8003c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c3c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <PID_call+0x21c>)
 8003c42:	edd3 7a00 	vldr	s15, [r3]
 8003c46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c4e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c52:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8003c56:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003c5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c5e:	edd7 7a5f 	vldr	s15, [r7, #380]	@ 0x17c
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c72:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc90      	pop	{r4, r7}
 8003c7c:	b004      	add	sp, #16
 8003c7e:	4770      	bx	lr
 8003c80:	0801e78c 	.word	0x0801e78c
 8003c84:	00000000 	.word	0x00000000

08003c88 <Get_batteryvalue>:
//		default:
//			break;
	//}
}

void Get_batteryvalue(void){
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003c8c:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <Get_batteryvalue+0x88>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003c9c:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 8003d08 <Get_batteryvalue+0x80>
 8003ca0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003ca4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ca8:	ee17 3a90 	vmov	r3, s15
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	4b19      	ldr	r3, [pc, #100]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003cb0:	f8a3 2188 	strh.w	r2, [r3, #392]	@ 0x188
	if(MYDRON.batterysize >= 100){
 8003cb4:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003cb6:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8003cba:	2b63      	cmp	r3, #99	@ 0x63
 8003cbc:	d903      	bls.n	8003cc6 <Get_batteryvalue+0x3e>
		MYDRON.batterysize = 100;
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003cc0:	2264      	movs	r2, #100	@ 0x64
 8003cc2:	f8a3 2188 	strh.w	r2, [r3, #392]	@ 0x188
	}

	if(MYDRON.batterysize < 25){
 8003cc6:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003cc8:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8003ccc:	2b18      	cmp	r3, #24
 8003cce:	d803      	bhi.n	8003cd8 <Get_batteryvalue+0x50>
		MYDRON.Status.Battery = DRON_BATTERY_RUN_OUT;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003cd2:	2207      	movs	r2, #7
 8003cd4:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
	}
	if(MYDRON.batterysize <= 10){
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003cda:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8003cde:	2b0a      	cmp	r3, #10
 8003ce0:	d803      	bhi.n	8003cea <Get_batteryvalue+0x62>
		MYDRON.Status.Battery = DRON_BATTERY_CRIT_VAL;
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003ce4:	2209      	movs	r2, #9
 8003ce6:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
	}
	if(MYDRON.batterysize >= 25){
 8003cea:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003cec:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8003cf0:	2b18      	cmp	r3, #24
 8003cf2:	d903      	bls.n	8003cfc <Get_batteryvalue+0x74>
		MYDRON.Status.Battery = DRON_BATTERY_OK;
 8003cf4:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <Get_batteryvalue+0x8c>)
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
	}
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	7ae147ae 	.word	0x7ae147ae
 8003d0c:	401dae14 	.word	0x401dae14
 8003d10:	24000f48 	.word	0x24000f48
 8003d14:	00000160 	.word	0x00000160

08003d18 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d22:	4802      	ldr	r0, [pc, #8]	@ (8003d2c <SELECT+0x14>)
 8003d24:	f009 fff0 	bl	800dd08 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	58020c00 	.word	0x58020c00

08003d30 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003d34:	2201      	movs	r2, #1
 8003d36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d3a:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <DESELECT+0x14>)
 8003d3c:	f009 ffe4 	bl	800dd08 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003d40:	bf00      	nop
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	58020c00 	.word	0x58020c00

08003d48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003d52:	bf00      	nop
 8003d54:	4b07      	ldr	r3, [pc, #28]	@ (8003d74 <SPI_TxByte+0x2c>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d1f9      	bne.n	8003d54 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003d60:	1df9      	adds	r1, r7, #7
 8003d62:	2364      	movs	r3, #100	@ 0x64
 8003d64:	2201      	movs	r2, #1
 8003d66:	4804      	ldr	r0, [pc, #16]	@ (8003d78 <SPI_TxByte+0x30>)
 8003d68:	f010 f920 	bl	8013fac <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40020010 	.word	0x40020010
 8003d78:	24000274 	.word	0x24000274

08003d7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003d88:	bf00      	nop
 8003d8a:	4b08      	ldr	r3, [pc, #32]	@ (8003dac <SPI_TxBuffer+0x30>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d1f9      	bne.n	8003d8a <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8003d96:	887b      	ldrh	r3, [r7, #2]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4804      	ldr	r0, [pc, #16]	@ (8003db0 <SPI_TxBuffer+0x34>)
 8003d9e:	f011 f9f3 	bl	8015188 <HAL_SPI_Transmit_DMA>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40020010 	.word	0x40020010
 8003db0:	24000274 	.word	0x24000274

08003db4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003dba:	23ff      	movs	r3, #255	@ 0xff
 8003dbc:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003dbe:	bf00      	nop
 8003dc0:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <SPI_RxByte+0x34>)
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d1f9      	bne.n	8003dc0 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003dcc:	1dba      	adds	r2, r7, #6
 8003dce:	1df9      	adds	r1, r7, #7
 8003dd0:	2364      	movs	r3, #100	@ 0x64
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4805      	ldr	r0, [pc, #20]	@ (8003dec <SPI_RxByte+0x38>)
 8003dd8:	f010 fd48 	bl	801486c <HAL_SPI_TransmitReceive>

	return data;
 8003ddc:	79bb      	ldrb	r3, [r7, #6]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40020010 	.word	0x40020010
 8003dec:	24000274 	.word	0x24000274

08003df0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003df8:	f7ff ffdc 	bl	8003db4 <SPI_RxByte>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	461a      	mov	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	701a      	strb	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003e12:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <SD_ReadyWait+0x30>)
 8003e14:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003e18:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003e1a:	f7ff ffcb 	bl	8003db4 <SPI_RxByte>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2bff      	cmp	r3, #255	@ 0xff
 8003e26:	d004      	beq.n	8003e32 <SD_ReadyWait+0x26>
 8003e28:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <SD_ReadyWait+0x30>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f3      	bne.n	8003e1a <SD_ReadyWait+0xe>

	return res;
 8003e32:	79fb      	ldrb	r3, [r7, #7]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	2400037c 	.word	0x2400037c

08003e40 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003e46:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003e4a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003e4c:	f7ff ff70 	bl	8003d30 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	e005      	b.n	8003e62 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003e56:	20ff      	movs	r0, #255	@ 0xff
 8003e58:	f7ff ff76 	bl	8003d48 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	ddf6      	ble.n	8003e56 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003e68:	f7ff ff56 	bl	8003d18 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003e6c:	2340      	movs	r3, #64	@ 0x40
 8003e6e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003e80:	2395      	movs	r3, #149	@ 0x95
 8003e82:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003e84:	463b      	mov	r3, r7
 8003e86:	2106      	movs	r1, #6
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff77 	bl	8003d7c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003e8e:	e002      	b.n	8003e96 <SD_PowerOn+0x56>
	{
		cnt--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003e96:	f7ff ff8d 	bl	8003db4 <SPI_RxByte>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d002      	beq.n	8003ea6 <SD_PowerOn+0x66>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f4      	bne.n	8003e90 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003ea6:	f7ff ff43 	bl	8003d30 <DESELECT>
	SPI_TxByte(0XFF);
 8003eaa:	20ff      	movs	r0, #255	@ 0xff
 8003eac:	f7ff ff4c 	bl	8003d48 <SPI_TxByte>

	PowerFlag = 1;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	@ (8003ec0 <SD_PowerOn+0x80>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	24000195 	.word	0x24000195

08003ec4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	@ (8003ed8 <SD_PowerOff+0x14>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	24000195 	.word	0x24000195

08003edc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	@ (8003ef0 <SD_CheckPower+0x14>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	24000195 	.word	0x24000195

08003ef4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 8003efe:	4b14      	ldr	r3, [pc, #80]	@ (8003f50 <SD_RxDataBlock+0x5c>)
 8003f00:	220a      	movs	r2, #10
 8003f02:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003f04:	f7ff ff56 	bl	8003db4 <SPI_RxByte>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2bff      	cmp	r3, #255	@ 0xff
 8003f10:	d104      	bne.n	8003f1c <SD_RxDataBlock+0x28>
 8003f12:	4b0f      	ldr	r3, [pc, #60]	@ (8003f50 <SD_RxDataBlock+0x5c>)
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f3      	bne.n	8003f04 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003f20:	d001      	beq.n	8003f26 <SD_RxDataBlock+0x32>
 8003f22:	2300      	movs	r3, #0
 8003f24:	e00f      	b.n	8003f46 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff5f 	bl	8003df0 <SPI_RxBytePtr>
	} while(len--);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	603a      	str	r2, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f4      	bne.n	8003f26 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8003f3c:	f7ff ff3a 	bl	8003db4 <SPI_RxByte>
	SPI_RxByte();
 8003f40:	f7ff ff38 	bl	8003db4 <SPI_RxByte>

	return TRUE;
 8003f44:	2301      	movs	r3, #1
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	24000378 	.word	0x24000378

08003f54 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003f64:	f7ff ff52 	bl	8003e0c <SD_ReadyWait>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2bff      	cmp	r3, #255	@ 0xff
 8003f6c:	d001      	beq.n	8003f72 <SD_TxDataBlock+0x1e>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e02f      	b.n	8003fd2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fee7 	bl	8003d48 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	2bfd      	cmp	r3, #253	@ 0xfd
 8003f7e:	d020      	beq.n	8003fc2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003f80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fef9 	bl	8003d7c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003f8a:	f7ff ff13 	bl	8003db4 <SPI_RxByte>
		SPI_RxByte();
 8003f8e:	f7ff ff11 	bl	8003db4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003f92:	e00b      	b.n	8003fac <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003f94:	f7ff ff0e 	bl	8003db4 <SPI_RxByte>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d006      	beq.n	8003fb4 <SD_TxDataBlock+0x60>
			i++;
 8003fa6:	7bbb      	ldrb	r3, [r7, #14]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003fac:	7bbb      	ldrb	r3, [r7, #14]
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d9f0      	bls.n	8003f94 <SD_TxDataBlock+0x40>
 8003fb2:	e000      	b.n	8003fb6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003fb4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003fb6:	bf00      	nop
 8003fb8:	f7ff fefc 	bl	8003db4 <SPI_RxByte>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0fa      	beq.n	8003fb8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d101      	bne.n	8003fd0 <SD_TxDataBlock+0x7c>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	6039      	str	r1, [r7, #0]
 8003fe4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003fe6:	f7ff ff11 	bl	8003e0c <SD_ReadyWait>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2bff      	cmp	r3, #255	@ 0xff
 8003fee:	d001      	beq.n	8003ff4 <SD_SendCmd+0x1a>
 8003ff0:	23ff      	movs	r3, #255	@ 0xff
 8003ff2:	e042      	b.n	800407a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fea6 	bl	8003d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	b2db      	uxtb	r3, r3
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fea0 	bl	8003d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	b2db      	uxtb	r3, r3
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fe9a 	bl	8003d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fe94 	bl	8003d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fe8f 	bl	8003d48 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	2b40      	cmp	r3, #64	@ 0x40
 800402e:	d102      	bne.n	8004036 <SD_SendCmd+0x5c>
 8004030:	2395      	movs	r3, #149	@ 0x95
 8004032:	73fb      	strb	r3, [r7, #15]
 8004034:	e007      	b.n	8004046 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b48      	cmp	r3, #72	@ 0x48
 800403a:	d102      	bne.n	8004042 <SD_SendCmd+0x68>
 800403c:	2387      	movs	r3, #135	@ 0x87
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e001      	b.n	8004046 <SD_SendCmd+0x6c>
	else crc = 1;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fe7d 	bl	8003d48 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b4c      	cmp	r3, #76	@ 0x4c
 8004052:	d101      	bne.n	8004058 <SD_SendCmd+0x7e>
 8004054:	f7ff feae 	bl	8003db4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004058:	230a      	movs	r3, #10
 800405a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800405c:	f7ff feaa 	bl	8003db4 <SPI_RxByte>
 8004060:	4603      	mov	r3, r0
 8004062:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004064:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004068:	2b00      	cmp	r3, #0
 800406a:	da05      	bge.n	8004078 <SD_SendCmd+0x9e>
 800406c:	7bbb      	ldrb	r3, [r7, #14]
 800406e:	3b01      	subs	r3, #1
 8004070:	73bb      	strb	r3, [r7, #14]
 8004072:	7bbb      	ldrb	r3, [r7, #14]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f1      	bne.n	800405c <SD_SendCmd+0x82>

	return res;
 8004078:	7b7b      	ldrb	r3, [r7, #13]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <SD_disk_initialize+0x14>
 8004094:	2301      	movs	r3, #1
 8004096:	e0d6      	b.n	8004246 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004098:	4b6d      	ldr	r3, [pc, #436]	@ (8004250 <SD_disk_initialize+0x1cc>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <SD_disk_initialize+0x2a>
 80040a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004250 <SD_disk_initialize+0x1cc>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e0cb      	b.n	8004246 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80040ae:	f7ff fec7 	bl	8003e40 <SD_PowerOn>

	/* slave select */
	SELECT();
 80040b2:	f7ff fe31 	bl	8003d18 <SELECT>

	/* check disk type */
	type = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80040ba:	2100      	movs	r1, #0
 80040bc:	2040      	movs	r0, #64	@ 0x40
 80040be:	f7ff ff8c 	bl	8003fda <SD_SendCmd>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f040 80a6 	bne.w	8004216 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80040ca:	4b62      	ldr	r3, [pc, #392]	@ (8004254 <SD_disk_initialize+0x1d0>)
 80040cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040d0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80040d2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80040d6:	2048      	movs	r0, #72	@ 0x48
 80040d8:	f7ff ff7f 	bl	8003fda <SD_SendCmd>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d158      	bne.n	8004194 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
 80040e6:	e00c      	b.n	8004102 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80040e8:	7bfc      	ldrb	r4, [r7, #15]
 80040ea:	f7ff fe63 	bl	8003db4 <SPI_RxByte>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	f104 0310 	add.w	r3, r4, #16
 80040f6:	443b      	add	r3, r7
 80040f8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	3301      	adds	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d9ef      	bls.n	80040e8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004108:	7abb      	ldrb	r3, [r7, #10]
 800410a:	2b01      	cmp	r3, #1
 800410c:	f040 8083 	bne.w	8004216 <SD_disk_initialize+0x192>
 8004110:	7afb      	ldrb	r3, [r7, #11]
 8004112:	2baa      	cmp	r3, #170	@ 0xaa
 8004114:	d17f      	bne.n	8004216 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004116:	2100      	movs	r1, #0
 8004118:	2077      	movs	r0, #119	@ 0x77
 800411a:	f7ff ff5e 	bl	8003fda <SD_SendCmd>
 800411e:	4603      	mov	r3, r0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d807      	bhi.n	8004134 <SD_disk_initialize+0xb0>
 8004124:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004128:	2069      	movs	r0, #105	@ 0x69
 800412a:	f7ff ff56 	bl	8003fda <SD_SendCmd>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004134:	4b47      	ldr	r3, [pc, #284]	@ (8004254 <SD_disk_initialize+0x1d0>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1eb      	bne.n	8004116 <SD_disk_initialize+0x92>
 800413e:	e000      	b.n	8004142 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004140:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004142:	4b44      	ldr	r3, [pc, #272]	@ (8004254 <SD_disk_initialize+0x1d0>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d064      	beq.n	8004216 <SD_disk_initialize+0x192>
 800414c:	2100      	movs	r1, #0
 800414e:	207a      	movs	r0, #122	@ 0x7a
 8004150:	f7ff ff43 	bl	8003fda <SD_SendCmd>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d15d      	bne.n	8004216 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800415a:	2300      	movs	r3, #0
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e00c      	b.n	800417a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004160:	7bfc      	ldrb	r4, [r7, #15]
 8004162:	f7ff fe27 	bl	8003db4 <SPI_RxByte>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	f104 0310 	add.w	r3, r4, #16
 800416e:	443b      	add	r3, r7
 8004170:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	3301      	adds	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d9ef      	bls.n	8004160 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004180:	7a3b      	ldrb	r3, [r7, #8]
 8004182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <SD_disk_initialize+0x10a>
 800418a:	230c      	movs	r3, #12
 800418c:	e000      	b.n	8004190 <SD_disk_initialize+0x10c>
 800418e:	2304      	movs	r3, #4
 8004190:	73bb      	strb	r3, [r7, #14]
 8004192:	e040      	b.n	8004216 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004194:	2100      	movs	r1, #0
 8004196:	2077      	movs	r0, #119	@ 0x77
 8004198:	f7ff ff1f 	bl	8003fda <SD_SendCmd>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d808      	bhi.n	80041b4 <SD_disk_initialize+0x130>
 80041a2:	2100      	movs	r1, #0
 80041a4:	2069      	movs	r0, #105	@ 0x69
 80041a6:	f7ff ff18 	bl	8003fda <SD_SendCmd>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d801      	bhi.n	80041b4 <SD_disk_initialize+0x130>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e000      	b.n	80041b6 <SD_disk_initialize+0x132>
 80041b4:	2301      	movs	r3, #1
 80041b6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80041b8:	7bbb      	ldrb	r3, [r7, #14]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d10e      	bne.n	80041dc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80041be:	2100      	movs	r1, #0
 80041c0:	2077      	movs	r0, #119	@ 0x77
 80041c2:	f7ff ff0a 	bl	8003fda <SD_SendCmd>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d80e      	bhi.n	80041ea <SD_disk_initialize+0x166>
 80041cc:	2100      	movs	r1, #0
 80041ce:	2069      	movs	r0, #105	@ 0x69
 80041d0:	f7ff ff03 	bl	8003fda <SD_SendCmd>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <SD_disk_initialize+0x166>
 80041da:	e00d      	b.n	80041f8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80041dc:	2100      	movs	r1, #0
 80041de:	2041      	movs	r0, #65	@ 0x41
 80041e0:	f7ff fefb 	bl	8003fda <SD_SendCmd>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80041ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004254 <SD_disk_initialize+0x1d0>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e1      	bne.n	80041b8 <SD_disk_initialize+0x134>
 80041f4:	e000      	b.n	80041f8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80041f6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80041f8:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <SD_disk_initialize+0x1d0>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <SD_disk_initialize+0x18e>
 8004202:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004206:	2050      	movs	r0, #80	@ 0x50
 8004208:	f7ff fee7 	bl	8003fda <SD_SendCmd>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <SD_disk_initialize+0x192>
 8004212:	2300      	movs	r3, #0
 8004214:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004216:	4a10      	ldr	r2, [pc, #64]	@ (8004258 <SD_disk_initialize+0x1d4>)
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800421c:	f7ff fd88 	bl	8003d30 <DESELECT>
	SPI_RxByte();
 8004220:	f7ff fdc8 	bl	8003db4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800422a:	4b09      	ldr	r3, [pc, #36]	@ (8004250 <SD_disk_initialize+0x1cc>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <SD_disk_initialize+0x1cc>)
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e001      	b.n	8004240 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800423c:	f7ff fe42 	bl	8003ec4 <SD_PowerOff>
	}

	return Stat;
 8004240:	4b03      	ldr	r3, [pc, #12]	@ (8004250 <SD_disk_initialize+0x1cc>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bd90      	pop	{r4, r7, pc}
 800424e:	bf00      	nop
 8004250:	24000000 	.word	0x24000000
 8004254:	24000378 	.word	0x24000378
 8004258:	24000194 	.word	0x24000194

0800425c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <SD_disk_status+0x14>
 800426c:	2301      	movs	r3, #1
 800426e:	e002      	b.n	8004276 <SD_disk_status+0x1a>
	return Stat;
 8004270:	4b04      	ldr	r3, [pc, #16]	@ (8004284 <SD_disk_status+0x28>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b2db      	uxtb	r3, r3
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	24000000 	.word	0x24000000

08004288 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4603      	mov	r3, r0
 8004296:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <SD_disk_read+0x1c>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <SD_disk_read+0x20>
 80042a4:	2304      	movs	r3, #4
 80042a6:	e051      	b.n	800434c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80042a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004354 <SD_disk_read+0xcc>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <SD_disk_read+0x32>
 80042b6:	2303      	movs	r3, #3
 80042b8:	e048      	b.n	800434c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80042ba:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <SD_disk_read+0xd0>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <SD_disk_read+0x44>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	025b      	lsls	r3, r3, #9
 80042ca:	607b      	str	r3, [r7, #4]

	SELECT();
 80042cc:	f7ff fd24 	bl	8003d18 <SELECT>

	if (count == 1)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d111      	bne.n	80042fa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	2051      	movs	r0, #81	@ 0x51
 80042da:	f7ff fe7e 	bl	8003fda <SD_SendCmd>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d129      	bne.n	8004338 <SD_disk_read+0xb0>
 80042e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f7ff fe03 	bl	8003ef4 <SD_RxDataBlock>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d021      	beq.n	8004338 <SD_disk_read+0xb0>
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	e01e      	b.n	8004338 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	2052      	movs	r0, #82	@ 0x52
 80042fe:	f7ff fe6c 	bl	8003fda <SD_SendCmd>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d117      	bne.n	8004338 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800430c:	68b8      	ldr	r0, [r7, #8]
 800430e:	f7ff fdf1 	bl	8003ef4 <SD_RxDataBlock>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <SD_disk_read+0xa6>
				buff += 512;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800431e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	3b01      	subs	r3, #1
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ed      	bne.n	8004308 <SD_disk_read+0x80>
 800432c:	e000      	b.n	8004330 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800432e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004330:	2100      	movs	r1, #0
 8004332:	204c      	movs	r0, #76	@ 0x4c
 8004334:	f7ff fe51 	bl	8003fda <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004338:	f7ff fcfa 	bl	8003d30 <DESELECT>
	SPI_RxByte();
 800433c:	f7ff fd3a 	bl	8003db4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	24000000 	.word	0x24000000
 8004358:	24000194 	.word	0x24000194

0800435c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <SD_disk_write+0x1c>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <SD_disk_write+0x20>
 8004378:	2304      	movs	r3, #4
 800437a:	e06b      	b.n	8004454 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800437c:	4b37      	ldr	r3, [pc, #220]	@ (800445c <SD_disk_write+0x100>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <SD_disk_write+0x32>
 800438a:	2303      	movs	r3, #3
 800438c:	e062      	b.n	8004454 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800438e:	4b33      	ldr	r3, [pc, #204]	@ (800445c <SD_disk_write+0x100>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <SD_disk_write+0x44>
 800439c:	2302      	movs	r3, #2
 800439e:	e059      	b.n	8004454 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80043a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004460 <SD_disk_write+0x104>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <SD_disk_write+0x56>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	025b      	lsls	r3, r3, #9
 80043b0:	607b      	str	r3, [r7, #4]

	SELECT();
 80043b2:	f7ff fcb1 	bl	8003d18 <SELECT>

	if (count == 1)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d110      	bne.n	80043de <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	2058      	movs	r0, #88	@ 0x58
 80043c0:	f7ff fe0b 	bl	8003fda <SD_SendCmd>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d13a      	bne.n	8004440 <SD_disk_write+0xe4>
 80043ca:	21fe      	movs	r1, #254	@ 0xfe
 80043cc:	68b8      	ldr	r0, [r7, #8]
 80043ce:	f7ff fdc1 	bl	8003f54 <SD_TxDataBlock>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d033      	beq.n	8004440 <SD_disk_write+0xe4>
			count = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	e030      	b.n	8004440 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80043de:	4b20      	ldr	r3, [pc, #128]	@ (8004460 <SD_disk_write+0x104>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80043ea:	2100      	movs	r1, #0
 80043ec:	2077      	movs	r0, #119	@ 0x77
 80043ee:	f7ff fdf4 	bl	8003fda <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	2057      	movs	r0, #87	@ 0x57
 80043f6:	f7ff fdf0 	bl	8003fda <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	2059      	movs	r0, #89	@ 0x59
 80043fe:	f7ff fdec 	bl	8003fda <SD_SendCmd>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11b      	bne.n	8004440 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004408:	21fc      	movs	r1, #252	@ 0xfc
 800440a:	68b8      	ldr	r0, [r7, #8]
 800440c:	f7ff fda2 	bl	8003f54 <SD_TxDataBlock>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <SD_disk_write+0xd0>
				buff += 512;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800441c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	3b01      	subs	r3, #1
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ee      	bne.n	8004408 <SD_disk_write+0xac>
 800442a:	e000      	b.n	800442e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800442c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800442e:	21fd      	movs	r1, #253	@ 0xfd
 8004430:	2000      	movs	r0, #0
 8004432:	f7ff fd8f 	bl	8003f54 <SD_TxDataBlock>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <SD_disk_write+0xe4>
			{
				count = 1;
 800443c:	2301      	movs	r3, #1
 800443e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004440:	f7ff fc76 	bl	8003d30 <DESELECT>
	SPI_RxByte();
 8004444:	f7ff fcb6 	bl	8003db4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	24000000 	.word	0x24000000
 8004460:	24000194 	.word	0x24000194

08004464 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b08b      	sub	sp, #44	@ 0x2c
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	603a      	str	r2, [r7, #0]
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	460b      	mov	r3, r1
 8004472:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <SD_disk_ioctl+0x1e>
 800447e:	2304      	movs	r3, #4
 8004480:	e113      	b.n	80046aa <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004488:	79bb      	ldrb	r3, [r7, #6]
 800448a:	2b05      	cmp	r3, #5
 800448c:	d124      	bne.n	80044d8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d012      	beq.n	80044bc <SD_disk_ioctl+0x58>
 8004496:	2b02      	cmp	r3, #2
 8004498:	dc1a      	bgt.n	80044d0 <SD_disk_ioctl+0x6c>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <SD_disk_ioctl+0x40>
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d006      	beq.n	80044b0 <SD_disk_ioctl+0x4c>
 80044a2:	e015      	b.n	80044d0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80044a4:	f7ff fd0e 	bl	8003ec4 <SD_PowerOff>
			res = RES_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80044ae:	e0fa      	b.n	80046a6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80044b0:	f7ff fcc6 	bl	8003e40 <SD_PowerOn>
			res = RES_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80044ba:	e0f4      	b.n	80046a6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	1c5c      	adds	r4, r3, #1
 80044c0:	f7ff fd0c 	bl	8003edc <SD_CheckPower>
 80044c4:	4603      	mov	r3, r0
 80044c6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80044ce:	e0ea      	b.n	80046a6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80044d0:	2304      	movs	r3, #4
 80044d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80044d6:	e0e6      	b.n	80046a6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80044d8:	4b76      	ldr	r3, [pc, #472]	@ (80046b4 <SD_disk_ioctl+0x250>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <SD_disk_ioctl+0x86>
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0df      	b.n	80046aa <SD_disk_ioctl+0x246>

		SELECT();
 80044ea:	f7ff fc15 	bl	8003d18 <SELECT>

		switch (ctrl)
 80044ee:	79bb      	ldrb	r3, [r7, #6]
 80044f0:	2b0d      	cmp	r3, #13
 80044f2:	f200 80c9 	bhi.w	8004688 <SD_disk_ioctl+0x224>
 80044f6:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <SD_disk_ioctl+0x98>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	080045f3 	.word	0x080045f3
 8004500:	08004535 	.word	0x08004535
 8004504:	080045e3 	.word	0x080045e3
 8004508:	08004689 	.word	0x08004689
 800450c:	08004689 	.word	0x08004689
 8004510:	08004689 	.word	0x08004689
 8004514:	08004689 	.word	0x08004689
 8004518:	08004689 	.word	0x08004689
 800451c:	08004689 	.word	0x08004689
 8004520:	08004689 	.word	0x08004689
 8004524:	08004689 	.word	0x08004689
 8004528:	08004605 	.word	0x08004605
 800452c:	08004629 	.word	0x08004629
 8004530:	0800464d 	.word	0x0800464d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004534:	2100      	movs	r1, #0
 8004536:	2049      	movs	r0, #73	@ 0x49
 8004538:	f7ff fd4f 	bl	8003fda <SD_SendCmd>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 80a6 	bne.w	8004690 <SD_disk_ioctl+0x22c>
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	2110      	movs	r1, #16
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fcd2 	bl	8003ef4 <SD_RxDataBlock>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 809c 	beq.w	8004690 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004558:	7b3b      	ldrb	r3, [r7, #12]
 800455a:	099b      	lsrs	r3, r3, #6
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d10d      	bne.n	800457e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004562:	7d7b      	ldrb	r3, [r7, #21]
 8004564:	461a      	mov	r2, r3
 8004566:	7d3b      	ldrb	r3, [r7, #20]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	b29b      	uxth	r3, r3
 800456c:	4413      	add	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	3301      	adds	r3, #1
 8004572:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004574:	8bfb      	ldrh	r3, [r7, #30]
 8004576:	029a      	lsls	r2, r3, #10
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e02d      	b.n	80045da <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800457e:	7c7b      	ldrb	r3, [r7, #17]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	b2da      	uxtb	r2, r3
 8004586:	7dbb      	ldrb	r3, [r7, #22]
 8004588:	09db      	lsrs	r3, r3, #7
 800458a:	b2db      	uxtb	r3, r3
 800458c:	4413      	add	r3, r2
 800458e:	b2da      	uxtb	r2, r3
 8004590:	7d7b      	ldrb	r3, [r7, #21]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0306 	and.w	r3, r3, #6
 800459a:	b2db      	uxtb	r3, r3
 800459c:	4413      	add	r3, r2
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	3302      	adds	r3, #2
 80045a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80045a6:	7d3b      	ldrb	r3, [r7, #20]
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	7cbb      	ldrb	r3, [r7, #18]
 80045ba:	029b      	lsls	r3, r3, #10
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3301      	adds	r3, #1
 80045ca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80045cc:	8bfa      	ldrh	r2, [r7, #30]
 80045ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045d2:	3b09      	subs	r3, #9
 80045d4:	409a      	lsls	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80045e0:	e056      	b.n	8004690 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045e8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80045f0:	e055      	b.n	800469e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80045f2:	f7ff fc0b 	bl	8003e0c <SD_ReadyWait>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2bff      	cmp	r3, #255	@ 0xff
 80045fa:	d14b      	bne.n	8004694 <SD_disk_ioctl+0x230>
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004602:	e047      	b.n	8004694 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004604:	2100      	movs	r1, #0
 8004606:	2049      	movs	r0, #73	@ 0x49
 8004608:	f7ff fce7 	bl	8003fda <SD_SendCmd>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d142      	bne.n	8004698 <SD_disk_ioctl+0x234>
 8004612:	2110      	movs	r1, #16
 8004614:	6a38      	ldr	r0, [r7, #32]
 8004616:	f7ff fc6d 	bl	8003ef4 <SD_RxDataBlock>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03b      	beq.n	8004698 <SD_disk_ioctl+0x234>
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004626:	e037      	b.n	8004698 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004628:	2100      	movs	r1, #0
 800462a:	204a      	movs	r0, #74	@ 0x4a
 800462c:	f7ff fcd5 	bl	8003fda <SD_SendCmd>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d132      	bne.n	800469c <SD_disk_ioctl+0x238>
 8004636:	2110      	movs	r1, #16
 8004638:	6a38      	ldr	r0, [r7, #32]
 800463a:	f7ff fc5b 	bl	8003ef4 <SD_RxDataBlock>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02b      	beq.n	800469c <SD_disk_ioctl+0x238>
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800464a:	e027      	b.n	800469c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800464c:	2100      	movs	r1, #0
 800464e:	207a      	movs	r0, #122	@ 0x7a
 8004650:	f7ff fcc3 	bl	8003fda <SD_SendCmd>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d116      	bne.n	8004688 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800465a:	2300      	movs	r3, #0
 800465c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004660:	e00b      	b.n	800467a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004662:	6a3c      	ldr	r4, [r7, #32]
 8004664:	1c63      	adds	r3, r4, #1
 8004666:	623b      	str	r3, [r7, #32]
 8004668:	f7ff fba4 	bl	8003db4 <SPI_RxByte>
 800466c:	4603      	mov	r3, r0
 800466e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004670:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004674:	3301      	adds	r3, #1
 8004676:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800467a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800467e:	2b03      	cmp	r3, #3
 8004680:	d9ef      	bls.n	8004662 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004688:	2304      	movs	r3, #4
 800468a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800468e:	e006      	b.n	800469e <SD_disk_ioctl+0x23a>
			break;
 8004690:	bf00      	nop
 8004692:	e004      	b.n	800469e <SD_disk_ioctl+0x23a>
			break;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <SD_disk_ioctl+0x23a>
			break;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <SD_disk_ioctl+0x23a>
			break;
 800469c:	bf00      	nop
		}

		DESELECT();
 800469e:	f7ff fb47 	bl	8003d30 <DESELECT>
		SPI_RxByte();
 80046a2:	f7ff fb87 	bl	8003db4 <SPI_RxByte>
	}

	return res;
 80046a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	372c      	adds	r7, #44	@ 0x2c
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}
 80046b2:	bf00      	nop
 80046b4:	24000000 	.word	0x24000000

080046b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08e      	sub	sp, #56	@ 0x38
 80046bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	605a      	str	r2, [r3, #4]
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046ce:	4b8b      	ldr	r3, [pc, #556]	@ (80048fc <MX_GPIO_Init+0x244>)
 80046d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046d4:	4a89      	ldr	r2, [pc, #548]	@ (80048fc <MX_GPIO_Init+0x244>)
 80046d6:	f043 0310 	orr.w	r3, r3, #16
 80046da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046de:	4b87      	ldr	r3, [pc, #540]	@ (80048fc <MX_GPIO_Init+0x244>)
 80046e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046ec:	4b83      	ldr	r3, [pc, #524]	@ (80048fc <MX_GPIO_Init+0x244>)
 80046ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f2:	4a82      	ldr	r2, [pc, #520]	@ (80048fc <MX_GPIO_Init+0x244>)
 80046f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046fc:	4b7f      	ldr	r3, [pc, #508]	@ (80048fc <MX_GPIO_Init+0x244>)
 80046fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800470a:	4b7c      	ldr	r3, [pc, #496]	@ (80048fc <MX_GPIO_Init+0x244>)
 800470c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004710:	4a7a      	ldr	r2, [pc, #488]	@ (80048fc <MX_GPIO_Init+0x244>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800471a:	4b78      	ldr	r3, [pc, #480]	@ (80048fc <MX_GPIO_Init+0x244>)
 800471c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004728:	4b74      	ldr	r3, [pc, #464]	@ (80048fc <MX_GPIO_Init+0x244>)
 800472a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800472e:	4a73      	ldr	r2, [pc, #460]	@ (80048fc <MX_GPIO_Init+0x244>)
 8004730:	f043 0320 	orr.w	r3, r3, #32
 8004734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004738:	4b70      	ldr	r3, [pc, #448]	@ (80048fc <MX_GPIO_Init+0x244>)
 800473a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004746:	4b6d      	ldr	r3, [pc, #436]	@ (80048fc <MX_GPIO_Init+0x244>)
 8004748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800474c:	4a6b      	ldr	r2, [pc, #428]	@ (80048fc <MX_GPIO_Init+0x244>)
 800474e:	f043 0302 	orr.w	r3, r3, #2
 8004752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004756:	4b69      	ldr	r3, [pc, #420]	@ (80048fc <MX_GPIO_Init+0x244>)
 8004758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004764:	4b65      	ldr	r3, [pc, #404]	@ (80048fc <MX_GPIO_Init+0x244>)
 8004766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800476a:	4a64      	ldr	r2, [pc, #400]	@ (80048fc <MX_GPIO_Init+0x244>)
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004774:	4b61      	ldr	r3, [pc, #388]	@ (80048fc <MX_GPIO_Init+0x244>)
 8004776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004782:	4b5e      	ldr	r3, [pc, #376]	@ (80048fc <MX_GPIO_Init+0x244>)
 8004784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004788:	4a5c      	ldr	r2, [pc, #368]	@ (80048fc <MX_GPIO_Init+0x244>)
 800478a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800478e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004792:	4b5a      	ldr	r3, [pc, #360]	@ (80048fc <MX_GPIO_Init+0x244>)
 8004794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a0:	4b56      	ldr	r3, [pc, #344]	@ (80048fc <MX_GPIO_Init+0x244>)
 80047a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047a6:	4a55      	ldr	r2, [pc, #340]	@ (80048fc <MX_GPIO_Init+0x244>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047b0:	4b52      	ldr	r3, [pc, #328]	@ (80048fc <MX_GPIO_Init+0x244>)
 80047b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80047be:	2200      	movs	r2, #0
 80047c0:	f248 0108 	movw	r1, #32776	@ 0x8008
 80047c4:	484e      	ldr	r0, [pc, #312]	@ (8004900 <MX_GPIO_Init+0x248>)
 80047c6:	f009 fa9f 	bl	800dd08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 80047ca:	2200      	movs	r2, #0
 80047cc:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 80047d0:	484c      	ldr	r0, [pc, #304]	@ (8004904 <MX_GPIO_Init+0x24c>)
 80047d2:	f009 fa99 	bl	800dd08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 80047d6:	2200      	movs	r2, #0
 80047d8:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 80047dc:	484a      	ldr	r0, [pc, #296]	@ (8004908 <MX_GPIO_Init+0x250>)
 80047de:	f009 fa93 	bl	800dd08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 80047e2:	2200      	movs	r2, #0
 80047e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047e8:	4848      	ldr	r0, [pc, #288]	@ (800490c <MX_GPIO_Init+0x254>)
 80047ea:	f009 fa8d 	bl	800dd08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 80047ee:	2200      	movs	r2, #0
 80047f0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80047f4:	4846      	ldr	r0, [pc, #280]	@ (8004910 <MX_GPIO_Init+0x258>)
 80047f6:	f009 fa87 	bl	800dd08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 80047fa:	f248 0308 	movw	r3, #32776	@ 0x8008
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004800:	2301      	movs	r3, #1
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004808:	2300      	movs	r3, #0
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800480c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004810:	4619      	mov	r1, r3
 8004812:	483b      	ldr	r0, [pc, #236]	@ (8004900 <MX_GPIO_Init+0x248>)
 8004814:	f009 f8b8 	bl	800d988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004818:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800481e:	2301      	movs	r3, #1
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004822:	2300      	movs	r3, #0
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004826:	2300      	movs	r3, #0
 8004828:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800482a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800482e:	4619      	mov	r1, r3
 8004830:	4834      	ldr	r0, [pc, #208]	@ (8004904 <MX_GPIO_Init+0x24c>)
 8004832:	f009 f8a9 	bl	800d988 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800483c:	2300      	movs	r3, #0
 800483e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2300      	movs	r3, #0
 8004842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004848:	4619      	mov	r1, r3
 800484a:	482e      	ldr	r0, [pc, #184]	@ (8004904 <MX_GPIO_Init+0x24c>)
 800484c:	f009 f89c 	bl	800d988 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004850:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004856:	2301      	movs	r3, #1
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485e:	2300      	movs	r3, #0
 8004860:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004866:	4619      	mov	r1, r3
 8004868:	4827      	ldr	r0, [pc, #156]	@ (8004908 <MX_GPIO_Init+0x250>)
 800486a:	f009 f88d 	bl	800d988 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 800486e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004874:	2301      	movs	r3, #1
 8004876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800487c:	2301      	movs	r3, #1
 800487e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004884:	4619      	mov	r1, r3
 8004886:	4820      	ldr	r0, [pc, #128]	@ (8004908 <MX_GPIO_Init+0x250>)
 8004888:	f009 f87e 	bl	800d988 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 800488c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004892:	2301      	movs	r3, #1
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489a:	2300      	movs	r3, #0
 800489c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 800489e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048a2:	4619      	mov	r1, r3
 80048a4:	4819      	ldr	r0, [pc, #100]	@ (800490c <MX_GPIO_Init+0x254>)
 80048a6:	f009 f86f 	bl	800d988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 80048aa:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048b0:	2301      	movs	r3, #1
 80048b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b8:	2300      	movs	r3, #0
 80048ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048c0:	4619      	mov	r1, r3
 80048c2:	4813      	ldr	r0, [pc, #76]	@ (8004910 <MX_GPIO_Init+0x258>)
 80048c4:	f009 f860 	bl	800d988 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80048c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80048d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048dc:	4619      	mov	r1, r3
 80048de:	480b      	ldr	r0, [pc, #44]	@ (800490c <MX_GPIO_Init+0x254>)
 80048e0:	f009 f852 	bl	800d988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80048e4:	2200      	movs	r2, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	2028      	movs	r0, #40	@ 0x28
 80048ea:	f006 f94e 	bl	800ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80048ee:	2028      	movs	r0, #40	@ 0x28
 80048f0:	f006 f965 	bl	800abbe <HAL_NVIC_EnableIRQ>

}
 80048f4:	bf00      	nop
 80048f6:	3738      	adds	r7, #56	@ 0x38
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	58024400 	.word	0x58024400
 8004900:	58021000 	.word	0x58021000
 8004904:	58020400 	.word	0x58020400
 8004908:	58020c00 	.word	0x58020c00
 800490c:	58021800 	.word	0x58021800
 8004910:	58020000 	.word	0x58020000

08004914 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004918:	4b1d      	ldr	r3, [pc, #116]	@ (8004990 <MX_I2C5_Init+0x7c>)
 800491a:	4a1e      	ldr	r2, [pc, #120]	@ (8004994 <MX_I2C5_Init+0x80>)
 800491c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 800491e:	4b1c      	ldr	r3, [pc, #112]	@ (8004990 <MX_I2C5_Init+0x7c>)
 8004920:	2200      	movs	r2, #0
 8004922:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004924:	4b1a      	ldr	r3, [pc, #104]	@ (8004990 <MX_I2C5_Init+0x7c>)
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800492a:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <MX_I2C5_Init+0x7c>)
 800492c:	2201      	movs	r2, #1
 800492e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004930:	4b17      	ldr	r3, [pc, #92]	@ (8004990 <MX_I2C5_Init+0x7c>)
 8004932:	2200      	movs	r2, #0
 8004934:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004936:	4b16      	ldr	r3, [pc, #88]	@ (8004990 <MX_I2C5_Init+0x7c>)
 8004938:	2200      	movs	r2, #0
 800493a:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800493c:	4b14      	ldr	r3, [pc, #80]	@ (8004990 <MX_I2C5_Init+0x7c>)
 800493e:	2200      	movs	r2, #0
 8004940:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004942:	4b13      	ldr	r3, [pc, #76]	@ (8004990 <MX_I2C5_Init+0x7c>)
 8004944:	2200      	movs	r2, #0
 8004946:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004948:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <MX_I2C5_Init+0x7c>)
 800494a:	2200      	movs	r2, #0
 800494c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 800494e:	4810      	ldr	r0, [pc, #64]	@ (8004990 <MX_I2C5_Init+0x7c>)
 8004950:	f009 fa0e 	bl	800dd70 <HAL_I2C_Init>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 800495a:	f002 ffd1 	bl	8007900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800495e:	2100      	movs	r1, #0
 8004960:	480b      	ldr	r0, [pc, #44]	@ (8004990 <MX_I2C5_Init+0x7c>)
 8004962:	f00b fdbd 	bl	80104e0 <HAL_I2CEx_ConfigAnalogFilter>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 800496c:	f002 ffc8 	bl	8007900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004970:	2100      	movs	r1, #0
 8004972:	4807      	ldr	r0, [pc, #28]	@ (8004990 <MX_I2C5_Init+0x7c>)
 8004974:	f00b fdff 	bl	8010576 <HAL_I2CEx_ConfigDigitalFilter>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 800497e:	f002 ffbf 	bl	8007900 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004982:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004986:	f00b fe43 	bl	8010610 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	24000198 	.word	0x24000198
 8004994:	40006400 	.word	0x40006400

08004998 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b0b8      	sub	sp, #224	@ 0xe0
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	22b8      	movs	r2, #184	@ 0xb8
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f019 f97f 	bl	801dcbc <memset>
  if(i2cHandle->Instance==I2C5)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a70 <HAL_I2C_MspInit+0xd8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d14f      	bne.n	8004a68 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 80049c8:	f04f 0208 	mov.w	r2, #8
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 80049d4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80049d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049dc:	f107 0310 	add.w	r3, r7, #16
 80049e0:	4618      	mov	r0, r3
 80049e2:	f00c fdd9 	bl	8011598 <HAL_RCCEx_PeriphCLKConfig>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80049ec:	f002 ff88 	bl	8007900 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049f0:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <HAL_I2C_MspInit+0xdc>)
 80049f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a74 <HAL_I2C_MspInit+0xdc>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a00:	4b1c      	ldr	r3, [pc, #112]	@ (8004a74 <HAL_I2C_MspInit+0xdc>)
 8004a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a16:	2312      	movs	r3, #18
 8004a18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004a28:	2304      	movs	r3, #4
 8004a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a2e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004a32:	4619      	mov	r1, r3
 8004a34:	4810      	ldr	r0, [pc, #64]	@ (8004a78 <HAL_I2C_MspInit+0xe0>)
 8004a36:	f008 ffa7 	bl	800d988 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a74 <HAL_I2C_MspInit+0xdc>)
 8004a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a40:	4a0c      	ldr	r2, [pc, #48]	@ (8004a74 <HAL_I2C_MspInit+0xdc>)
 8004a42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <HAL_I2C_MspInit+0xdc>)
 8004a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	209d      	movs	r0, #157	@ 0x9d
 8004a5e:	f006 f894 	bl	800ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004a62:	209d      	movs	r0, #157	@ 0x9d
 8004a64:	f006 f8ab 	bl	800abbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004a68:	bf00      	nop
 8004a6a:	37e0      	adds	r7, #224	@ 0xe0
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40006400 	.word	0x40006400
 8004a74:	58024400 	.word	0x58024400
 8004a78:	58020800 	.word	0x58020800

08004a7c <__NVIC_SystemReset>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004a80:	f3bf 8f4f 	dsb	sy
}
 8004a84:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <__NVIC_SystemReset+0x24>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a8e:	4904      	ldr	r1, [pc, #16]	@ (8004aa0 <__NVIC_SystemReset+0x24>)
 8004a90:	4b04      	ldr	r3, [pc, #16]	@ (8004aa4 <__NVIC_SystemReset+0x28>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a96:	f3bf 8f4f 	dsb	sy
}
 8004a9a:	bf00      	nop
    __NOP();
 8004a9c:	bf00      	nop
 8004a9e:	e7fd      	b.n	8004a9c <__NVIC_SystemReset+0x20>
 8004aa0:	e000ed00 	.word	0xe000ed00
 8004aa4:	05fa0004 	.word	0x05fa0004

08004aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004aae:	f002 fefb 	bl	80078a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ab2:	f003 ff5b 	bl	800896c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ab6:	f000 fef5 	bl	80058a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004aba:	f000 ff65 	bl	8005988 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004abe:	f7ff fdfb 	bl	80046b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ac2:	f7fe fe6d 	bl	80037a0 <MX_DMA_Init>
  MX_I2C5_Init();
 8004ac6:	f7ff ff25 	bl	8004914 <MX_I2C5_Init>
  MX_ADC2_Init();
 8004aca:	f7fe fd7b 	bl	80035c4 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004ace:	f002 ff73 	bl	80079b8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004ad2:	f003 fe63 	bl	800879c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004ad6:	f003 fa89 	bl	8007fec <MX_TIM1_Init>
  MX_TIM8_Init();
 8004ada:	f003 fbff 	bl	80082dc <MX_TIM8_Init>
  MX_TIM3_Init();
 8004ade:	f003 fb81 	bl	80081e4 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004ae2:	f015 ff37 	bl	801a954 <MX_FATFS_Init>
  MX_TIM2_Init();
 8004ae6:	f003 fb29 	bl	800813c <MX_TIM2_Init>
  MX_SPI1_Init();
 8004aea:	f002 ff0f 	bl	800790c <MX_SPI1_Init>
  MX_TIM23_Init();
 8004aee:	f003 fc4b 	bl	8008388 <MX_TIM23_Init>
  MX_TIM24_Init();
 8004af2:	f003 fca1 	bl	8008438 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004af6:	2201      	movs	r2, #1
 8004af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004afc:	48b3      	ldr	r0, [pc, #716]	@ (8004dcc <main+0x324>)
 8004afe:	f009 f903 	bl	800dd08 <HAL_GPIO_WritePin>


  	STARTUP = 1;
 8004b02:	4bb3      	ldr	r3, [pc, #716]	@ (8004dd0 <main+0x328>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
  	DRON_ON_GRUND = 1;
 8004b08:	4bb2      	ldr	r3, [pc, #712]	@ (8004dd4 <main+0x32c>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]

  	MPU6050.Acc.Acc_Scale = 8192;
 8004b0e:	4bb2      	ldr	r3, [pc, #712]	@ (8004dd8 <main+0x330>)
 8004b10:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8004b14:	619a      	str	r2, [r3, #24]
  	MPU6050.Acc.acc_x_cal = 0;
 8004b16:	4bb0      	ldr	r3, [pc, #704]	@ (8004dd8 <main+0x330>)
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	61da      	str	r2, [r3, #28]
  	MPU6050.Acc.acc_y_cal = 0;
 8004b1e:	4bae      	ldr	r3, [pc, #696]	@ (8004dd8 <main+0x330>)
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	621a      	str	r2, [r3, #32]
  	MPU6050.Acc.acc_z_cal = 0;
 8004b26:	4bac      	ldr	r3, [pc, #688]	@ (8004dd8 <main+0x330>)
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  	MPU6050.Acc.ax_ang = 0;
 8004b2e:	4baa      	ldr	r3, [pc, #680]	@ (8004dd8 <main+0x330>)
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	60da      	str	r2, [r3, #12]
  	MPU6050.Acc.ay_ang = 0;
 8004b36:	4ba8      	ldr	r3, [pc, #672]	@ (8004dd8 <main+0x330>)
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	611a      	str	r2, [r3, #16]
  	MPU6050.Acc.az_ang = 0;
 8004b3e:	4ba6      	ldr	r3, [pc, #664]	@ (8004dd8 <main+0x330>)
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	615a      	str	r2, [r3, #20]
  	MPU6050.Acc.ax = 0;
 8004b46:	4ba4      	ldr	r3, [pc, #656]	@ (8004dd8 <main+0x330>)
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
  	MPU6050.Acc.ay = 0;
 8004b4e:	4ba2      	ldr	r3, [pc, #648]	@ (8004dd8 <main+0x330>)
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	605a      	str	r2, [r3, #4]
  	MPU6050.Acc.az = 0;
 8004b56:	4ba0      	ldr	r3, [pc, #640]	@ (8004dd8 <main+0x330>)
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
  	MPU6050.Gyr.Gyr_Scale = 65.5;
 8004b5e:	4b9e      	ldr	r3, [pc, #632]	@ (8004dd8 <main+0x330>)
 8004b60:	4a9e      	ldr	r2, [pc, #632]	@ (8004ddc <main+0x334>)
 8004b62:	635a      	str	r2, [r3, #52]	@ 0x34
  	MPU6050.Gyr.gyr_x_cal = 0;
 8004b64:	4b9c      	ldr	r3, [pc, #624]	@ (8004dd8 <main+0x330>)
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	639a      	str	r2, [r3, #56]	@ 0x38
  	MPU6050.Gyr.gyr_y_cal = 0;
 8004b6c:	4b9a      	ldr	r3, [pc, #616]	@ (8004dd8 <main+0x330>)
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	63da      	str	r2, [r3, #60]	@ 0x3c
  	MPU6050.Gyr.gyr_z_cal = 0;
 8004b74:	4b98      	ldr	r3, [pc, #608]	@ (8004dd8 <main+0x330>)
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	@ 0x40
  	MPU6050.Gyr.gx = 0;
 8004b7c:	4b96      	ldr	r3, [pc, #600]	@ (8004dd8 <main+0x330>)
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	629a      	str	r2, [r3, #40]	@ 0x28
  	MPU6050.Gyr.gy = 0;
 8004b84:	4b94      	ldr	r3, [pc, #592]	@ (8004dd8 <main+0x330>)
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  	MPU6050.Gyr.gz = 0;
 8004b8c:	4b92      	ldr	r3, [pc, #584]	@ (8004dd8 <main+0x330>)
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
  	MPU6050.MPU6050_IRQ = 0;
 8004b94:	4b90      	ldr	r3, [pc, #576]	@ (8004dd8 <main+0x330>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52



  	data.x = 0;
 8004b9c:	4b90      	ldr	r3, [pc, #576]	@ (8004de0 <main+0x338>)
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
  	data.y = 0;
 8004ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8004de0 <main+0x338>)
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]
  	data.z = 0;
 8004bac:	4b8c      	ldr	r3, [pc, #560]	@ (8004de0 <main+0x338>)
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	609a      	str	r2, [r3, #8]
  	data.ox = 0;
 8004bb4:	4b8a      	ldr	r3, [pc, #552]	@ (8004de0 <main+0x338>)
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	60da      	str	r2, [r3, #12]
  	data.oy = 0;
 8004bbc:	4b88      	ldr	r3, [pc, #544]	@ (8004de0 <main+0x338>)
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	611a      	str	r2, [r3, #16]
  	data.oz = 0;
 8004bc4:	4b86      	ldr	r3, [pc, #536]	@ (8004de0 <main+0x338>)
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	615a      	str	r2, [r3, #20]



	NRF24.NRF24_MODE = NRF24_Error;
 8004bcc:	4b85      	ldr	r3, [pc, #532]	@ (8004de4 <main+0x33c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	NRF24.Status = NRF24_Ready;
 8004bd4:	4b83      	ldr	r3, [pc, #524]	@ (8004de4 <main+0x33c>)
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24.Message_Status = 0;
 8004bdc:	4b81      	ldr	r3, [pc, #516]	@ (8004de4 <main+0x33c>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	NRF24.NRF24_Message_count = 0;
 8004be4:	4b7f      	ldr	r3, [pc, #508]	@ (8004de4 <main+0x33c>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	NRF24.Timer_1 = 0;
 8004bec:	4b7d      	ldr	r3, [pc, #500]	@ (8004de4 <main+0x33c>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24.Timer_2 = 0;
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	@ (8004de4 <main+0x33c>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24.Step = 0;
 8004bfc:	4b79      	ldr	r3, [pc, #484]	@ (8004de4 <main+0x33c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24.SPI_Rx_Inte = 0;
 8004c04:	4b77      	ldr	r3, [pc, #476]	@ (8004de4 <main+0x33c>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	NRF24.SPI_Tx_Inte = 0;
 8004c0c:	4b75      	ldr	r3, [pc, #468]	@ (8004de4 <main+0x33c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89



	BMP180.BMP180_IRQ = 0;
 8004c14:	4b74      	ldr	r3, [pc, #464]	@ (8004de8 <main+0x340>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	BMP180.ampritude = 0;
 8004c1c:	4b72      	ldr	r3, [pc, #456]	@ (8004de8 <main+0x340>)
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	651a      	str	r2, [r3, #80]	@ 0x50
	BMP180.pres = 0;
 8004c24:	4b70      	ldr	r3, [pc, #448]	@ (8004de8 <main+0x340>)
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
	BMP180.startpres = 0;
 8004c2c:	4b6e      	ldr	r3, [pc, #440]	@ (8004de8 <main+0x340>)
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
	BMP180.temp = 0;
 8004c34:	4b6c      	ldr	r3, [pc, #432]	@ (8004de8 <main+0x340>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	649a      	str	r2, [r3, #72]	@ 0x48
	BMP180.Raw_Data.pressure = 0;
 8004c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004de8 <main+0x340>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	@ 0x44
	BMP180.Raw_Data.temperature = 0;
 8004c42:	4b69      	ldr	r3, [pc, #420]	@ (8004de8 <main+0x340>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	641a      	str	r2, [r3, #64]	@ 0x40
	BMP180.Timer_1 = 0;
 8004c48:	4b67      	ldr	r3, [pc, #412]	@ (8004de8 <main+0x340>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	BMP180.Step = 0;
 8004c50:	4b65      	ldr	r3, [pc, #404]	@ (8004de8 <main+0x340>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62



	MYDRON.dronheight = 0;
 8004c58:	4b64      	ldr	r3, [pc, #400]	@ (8004dec <main+0x344>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8a3 218a 	strh.w	r2, [r3, #394]	@ 0x18a
	MYDRON.batterysize = 0;
 8004c60:	4b62      	ldr	r3, [pc, #392]	@ (8004dec <main+0x344>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8a3 2188 	strh.w	r2, [r3, #392]	@ 0x188

	MYDRON.Pitch.Angle_Error_Sum = 0;
 8004c68:	4960      	ldr	r1, [pc, #384]	@ (8004dec <main+0x344>)
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	MYDRON.Pitch.Angle_Error = 0;
 8004c76:	4b5d      	ldr	r3, [pc, #372]	@ (8004dec <main+0x344>)
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	615a      	str	r2, [r3, #20]
	MYDRON.Pitch.Angular_Rate_Error = 0;
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dec <main+0x344>)
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	619a      	str	r2, [r3, #24]
	MYDRON.Pitch.Angular_Rate_Error_Sum = 0;
 8004c86:	4959      	ldr	r1, [pc, #356]	@ (8004dec <main+0x344>)
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	MYDRON.Pitch.Last_Wanted_rx = 0;
 8004c94:	4b55      	ldr	r3, [pc, #340]	@ (8004dec <main+0x344>)
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
	MYDRON.Pitch.Now = 0;
 8004c9c:	4b53      	ldr	r3, [pc, #332]	@ (8004dec <main+0x344>)
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
	MYDRON.Pitch.Old_Angle_Error = 0;
 8004ca4:	4b51      	ldr	r3, [pc, #324]	@ (8004dec <main+0x344>)
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	61da      	str	r2, [r3, #28]
	MYDRON.Pitch.Old_Angular_Rate_Error = 0;
 8004cac:	4b4f      	ldr	r3, [pc, #316]	@ (8004dec <main+0x344>)
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	621a      	str	r2, [r3, #32]
	MYDRON.Pitch.Value = 0;
 8004cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8004dec <main+0x344>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	871a      	strh	r2, [r3, #56]	@ 0x38
	MYDRON.Pitch.Wanted = 0;
 8004cba:	4b4c      	ldr	r3, [pc, #304]	@ (8004dec <main+0x344>)
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	609a      	str	r2, [r3, #8]
	MYDRON.Pitch.Wanted_Factor = 0.65;
 8004cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8004dec <main+0x344>)
 8004cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8004df0 <main+0x348>)
 8004cc6:	60da      	str	r2, [r3, #12]
	MYDRON.Pitch.Wanted_rx = 0;
 8004cc8:	4b48      	ldr	r3, [pc, #288]	@ (8004dec <main+0x344>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	801a      	strh	r2, [r3, #0]
	MYDRON.Pitch.Wanted_v = 0;
 8004cce:	4b47      	ldr	r3, [pc, #284]	@ (8004dec <main+0x344>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	805a      	strh	r2, [r3, #2]

	MYDRON.Rool.Angle_Error_Sum = 0;
 8004cd4:	4945      	ldr	r1, [pc, #276]	@ (8004dec <main+0x344>)
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	MYDRON.Rool.Angle_Error = 0;
 8004ce2:	4b42      	ldr	r3, [pc, #264]	@ (8004dec <main+0x344>)
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	655a      	str	r2, [r3, #84]	@ 0x54
	MYDRON.Rool.Angular_Rate_Error = 0;
 8004cea:	4b40      	ldr	r3, [pc, #256]	@ (8004dec <main+0x344>)
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	659a      	str	r2, [r3, #88]	@ 0x58
	MYDRON.Rool.Angular_Rate_Error_Sum = 0;
 8004cf2:	493e      	ldr	r1, [pc, #248]	@ (8004dec <main+0x344>)
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	MYDRON.Rool.Last_Wanted_rx = 0;
 8004d00:	4b3a      	ldr	r3, [pc, #232]	@ (8004dec <main+0x344>)
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	645a      	str	r2, [r3, #68]	@ 0x44
	MYDRON.Rool.Now = 0;
 8004d08:	4b38      	ldr	r3, [pc, #224]	@ (8004dec <main+0x344>)
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	651a      	str	r2, [r3, #80]	@ 0x50
	MYDRON.Rool.Old_Angle_Error = 0;
 8004d10:	4b36      	ldr	r3, [pc, #216]	@ (8004dec <main+0x344>)
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	65da      	str	r2, [r3, #92]	@ 0x5c
	MYDRON.Rool.Old_Angular_Rate_Error = 0;
 8004d18:	4b34      	ldr	r3, [pc, #208]	@ (8004dec <main+0x344>)
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	@ 0x60
	MYDRON.Rool.Value = 0;
 8004d20:	4b32      	ldr	r3, [pc, #200]	@ (8004dec <main+0x344>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	MYDRON.Rool.Wanted = 0;
 8004d28:	4b30      	ldr	r3, [pc, #192]	@ (8004dec <main+0x344>)
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	649a      	str	r2, [r3, #72]	@ 0x48
	MYDRON.Rool.Wanted_Factor = 0.66;
 8004d30:	4b2e      	ldr	r3, [pc, #184]	@ (8004dec <main+0x344>)
 8004d32:	4a30      	ldr	r2, [pc, #192]	@ (8004df4 <main+0x34c>)
 8004d34:	64da      	str	r2, [r3, #76]	@ 0x4c
	MYDRON.Rool.Wanted_rx = 0;
 8004d36:	4b2d      	ldr	r3, [pc, #180]	@ (8004dec <main+0x344>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	MYDRON.Rool.Wanted_v = 0;
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004dec <main+0x344>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	MYDRON.Yaw.Angle_Error_Sum = 0;
 8004d46:	4929      	ldr	r1, [pc, #164]	@ (8004dec <main+0x344>)
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	MYDRON.Yaw.Angle_Error = 0;
 8004d54:	4b25      	ldr	r3, [pc, #148]	@ (8004dec <main+0x344>)
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	MYDRON.Yaw.Angular_Rate_Error = 0;
 8004d5e:	4b23      	ldr	r3, [pc, #140]	@ (8004dec <main+0x344>)
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	MYDRON.Yaw.Angular_Rate_Error_Sum = 0;
 8004d68:	4920      	ldr	r1, [pc, #128]	@ (8004dec <main+0x344>)
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	MYDRON.Yaw.Last_Wanted_rx = 0;
 8004d76:	4b1d      	ldr	r3, [pc, #116]	@ (8004dec <main+0x344>)
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	MYDRON.Yaw.Now = 0;
 8004d80:	4b1a      	ldr	r3, [pc, #104]	@ (8004dec <main+0x344>)
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	MYDRON.Yaw.Old_Angle_Error = 0;
 8004d8a:	4b18      	ldr	r3, [pc, #96]	@ (8004dec <main+0x344>)
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	MYDRON.Yaw.Old_Angular_Rate_Error = 0;
 8004d94:	4b15      	ldr	r3, [pc, #84]	@ (8004dec <main+0x344>)
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MYDRON.Yaw.Value = 0;
 8004d9e:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <main+0x344>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
	MYDRON.Yaw.Wanted = 0;
 8004da6:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <main+0x344>)
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MYDRON.Yaw.Wanted_Factor = 0.6;
 8004db0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <main+0x344>)
 8004db2:	4a11      	ldr	r2, [pc, #68]	@ (8004df8 <main+0x350>)
 8004db4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	MYDRON.Yaw.Wanted_rx = 0;
 8004db8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dec <main+0x344>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	MYDRON.Yaw.Wanted_v = 0;
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <main+0x344>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
 8004dc8:	e018      	b.n	8004dfc <main+0x354>
 8004dca:	bf00      	nop
 8004dcc:	58021800 	.word	0x58021800
 8004dd0:	000041f4 	.word	0x000041f4
 8004dd4:	00004210 	.word	0x00004210
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	42830000 	.word	0x42830000
 8004de0:	00000054 	.word	0x00000054
 8004de4:	000000d0 	.word	0x000000d0
 8004de8:	0000006c 	.word	0x0000006c
 8004dec:	00000160 	.word	0x00000160
 8004df0:	3f266666 	.word	0x3f266666
 8004df4:	3f28f5c3 	.word	0x3f28f5c3
 8004df8:	3f19999a 	.word	0x3f19999a

	MYDRON.PID_Pitch.Angle_Factors[0] = 6;
 8004dfc:	4bc2      	ldr	r3, [pc, #776]	@ (8005108 <main+0x660>)
 8004dfe:	4ac3      	ldr	r2, [pc, #780]	@ (800510c <main+0x664>)
 8004e00:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	MYDRON.PID_Pitch.Angle_Factors[1] = 8;
 8004e04:	4bc0      	ldr	r3, [pc, #768]	@ (8005108 <main+0x660>)
 8004e06:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004e0a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	MYDRON.PID_Pitch.Angle_Factors[2] = 25;
 8004e0e:	4bbe      	ldr	r3, [pc, #760]	@ (8005108 <main+0x660>)
 8004e10:	4abf      	ldr	r2, [pc, #764]	@ (8005110 <main+0x668>)
 8004e12:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	MYDRON.PID_Pitch.Angle_Factors[3] = 0;
 8004e16:	4bbc      	ldr	r3, [pc, #752]	@ (8005108 <main+0x660>)
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	MYDRON.PID_Pitch.Angle_Factors[4] = 0;
 8004e20:	4bb9      	ldr	r3, [pc, #740]	@ (8005108 <main+0x660>)
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	MYDRON.PID_Pitch.Angular_Rate_Factors[0] = 10;
 8004e2a:	4bb7      	ldr	r3, [pc, #732]	@ (8005108 <main+0x660>)
 8004e2c:	4ab9      	ldr	r2, [pc, #740]	@ (8005114 <main+0x66c>)
 8004e2e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	MYDRON.PID_Pitch.Angular_Rate_Factors[1] = 0;
 8004e32:	4bb5      	ldr	r3, [pc, #724]	@ (8005108 <main+0x660>)
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	MYDRON.PID_Pitch.Angular_Rate_Factors[2] = 30;
 8004e3c:	4bb2      	ldr	r3, [pc, #712]	@ (8005108 <main+0x660>)
 8004e3e:	4ab6      	ldr	r2, [pc, #728]	@ (8005118 <main+0x670>)
 8004e40:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	MYDRON.PID_Pitch.Angular_Rate_Factors[3] = 0;
 8004e44:	4bb0      	ldr	r3, [pc, #704]	@ (8005108 <main+0x660>)
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	MYDRON.PID_Pitch.Angular_Rate_Factors[4] = 0;
 8004e4e:	4bae      	ldr	r3, [pc, #696]	@ (8005108 <main+0x660>)
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	MYDRON.PID_Pitch.Angle_Value = 0;
 8004e58:	4bab      	ldr	r3, [pc, #684]	@ (8005108 <main+0x660>)
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	MYDRON.PID_Pitch.Angular_Rate_Value = 0;
 8004e62:	4ba9      	ldr	r3, [pc, #676]	@ (8005108 <main+0x660>)
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

	MYDRON.PID_Rool.Angle_Factors[0] = 5;
 8004e6c:	4ba6      	ldr	r3, [pc, #664]	@ (8005108 <main+0x660>)
 8004e6e:	4aab      	ldr	r2, [pc, #684]	@ (800511c <main+0x674>)
 8004e70:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	MYDRON.PID_Rool.Angle_Factors[1] = 10;
 8004e74:	4ba4      	ldr	r3, [pc, #656]	@ (8005108 <main+0x660>)
 8004e76:	4aa7      	ldr	r2, [pc, #668]	@ (8005114 <main+0x66c>)
 8004e78:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
	MYDRON.PID_Rool.Angle_Factors[2] = 0;
 8004e7c:	4ba2      	ldr	r3, [pc, #648]	@ (8005108 <main+0x660>)
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	MYDRON.PID_Rool.Angle_Factors[3] = 0;
 8004e86:	4ba0      	ldr	r3, [pc, #640]	@ (8005108 <main+0x660>)
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	MYDRON.PID_Rool.Angle_Factors[4] = 0;
 8004e90:	4b9d      	ldr	r3, [pc, #628]	@ (8005108 <main+0x660>)
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	MYDRON.PID_Rool.Angular_Rate_Factors[0] =  10;
 8004e9a:	4b9b      	ldr	r3, [pc, #620]	@ (8005108 <main+0x660>)
 8004e9c:	4a9d      	ldr	r2, [pc, #628]	@ (8005114 <main+0x66c>)
 8004e9e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	MYDRON.PID_Rool.Angular_Rate_Factors[1] = 0;
 8004ea2:	4b99      	ldr	r3, [pc, #612]	@ (8005108 <main+0x660>)
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
	MYDRON.PID_Rool.Angular_Rate_Factors[2] = 20;
 8004eac:	4b96      	ldr	r3, [pc, #600]	@ (8005108 <main+0x660>)
 8004eae:	4a9c      	ldr	r2, [pc, #624]	@ (8005120 <main+0x678>)
 8004eb0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	MYDRON.PID_Rool.Angular_Rate_Factors[3] = 0;
 8004eb4:	4b94      	ldr	r3, [pc, #592]	@ (8005108 <main+0x660>)
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	MYDRON.PID_Rool.Angular_Rate_Factors[4] = 0;
 8004ebe:	4b92      	ldr	r3, [pc, #584]	@ (8005108 <main+0x660>)
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	MYDRON.PID_Rool.Angle_Value = 0;
 8004ec8:	4b8f      	ldr	r3, [pc, #572]	@ (8005108 <main+0x660>)
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	MYDRON.PID_Rool.Angular_Rate_Value = 0;
 8004ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8005108 <main+0x660>)
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

	MYDRON.PID_Yaw.Angle_Factors[0] = 10;
 8004edc:	4b8a      	ldr	r3, [pc, #552]	@ (8005108 <main+0x660>)
 8004ede:	4a8d      	ldr	r2, [pc, #564]	@ (8005114 <main+0x66c>)
 8004ee0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	MYDRON.PID_Yaw.Angle_Factors[1] = 0;
 8004ee4:	4b88      	ldr	r3, [pc, #544]	@ (8005108 <main+0x660>)
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	MYDRON.PID_Yaw.Angle_Factors[2] = 0;
 8004eee:	4b86      	ldr	r3, [pc, #536]	@ (8005108 <main+0x660>)
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
	MYDRON.PID_Yaw.Angle_Factors[3] = 0;
 8004ef8:	4b83      	ldr	r3, [pc, #524]	@ (8005108 <main+0x660>)
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
	MYDRON.PID_Yaw.Angle_Factors[4] = 0;
 8004f02:	4b81      	ldr	r3, [pc, #516]	@ (8005108 <main+0x660>)
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	MYDRON.PID_Yaw.Angular_Rate_Factors[0] = 15;
 8004f0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005108 <main+0x660>)
 8004f0e:	4a85      	ldr	r2, [pc, #532]	@ (8005124 <main+0x67c>)
 8004f10:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	MYDRON.PID_Yaw.Angular_Rate_Factors[1] = 0;
 8004f14:	4b7c      	ldr	r3, [pc, #496]	@ (8005108 <main+0x660>)
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
	MYDRON.PID_Yaw.Angular_Rate_Factors[2] = 5;
 8004f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8005108 <main+0x660>)
 8004f20:	4a7e      	ldr	r2, [pc, #504]	@ (800511c <main+0x674>)
 8004f22:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
	MYDRON.PID_Yaw.Angular_Rate_Factors[3] = 0;
 8004f26:	4b78      	ldr	r3, [pc, #480]	@ (8005108 <main+0x660>)
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
	MYDRON.PID_Yaw.Angular_Rate_Factors[4] = 0;
 8004f30:	4b75      	ldr	r3, [pc, #468]	@ (8005108 <main+0x660>)
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
	MYDRON.PID_Yaw.Angle_Value = 0;
 8004f3a:	4b73      	ldr	r3, [pc, #460]	@ (8005108 <main+0x660>)
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
	MYDRON.PID_Yaw.Angular_Rate_Value = 0;
 8004f44:	4b70      	ldr	r3, [pc, #448]	@ (8005108 <main+0x660>)
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154

	MYDRON.Thrust.Now = 0;
 8004f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005108 <main+0x660>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
	MYDRON.Thrust.Old_Speed_1 = min_speed;
 8004f56:	4b6c      	ldr	r3, [pc, #432]	@ (8005108 <main+0x660>)
 8004f58:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f5c:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
	MYDRON.Thrust.Old_Speed_2 = min_speed;
 8004f60:	4b69      	ldr	r3, [pc, #420]	@ (8005108 <main+0x660>)
 8004f62:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f66:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
	MYDRON.Thrust.Old_Speed_3 = min_speed;
 8004f6a:	4b67      	ldr	r3, [pc, #412]	@ (8005108 <main+0x660>)
 8004f6c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f70:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
	MYDRON.Thrust.Old_Speed_4 = min_speed;
 8004f74:	4b64      	ldr	r3, [pc, #400]	@ (8005108 <main+0x660>)
 8004f76:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f7a:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
	MYDRON.Thrust.Speed_1 = min_speed;
 8004f7e:	4b62      	ldr	r3, [pc, #392]	@ (8005108 <main+0x660>)
 8004f80:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f84:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
	MYDRON.Thrust.Speed_2 = min_speed;
 8004f88:	4b5f      	ldr	r3, [pc, #380]	@ (8005108 <main+0x660>)
 8004f8a:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f8e:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
	MYDRON.Thrust.Speed_3 = min_speed;
 8004f92:	4b5d      	ldr	r3, [pc, #372]	@ (8005108 <main+0x660>)
 8004f94:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f98:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	MYDRON.Thrust.Speed_4 = min_speed;
 8004f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8005108 <main+0x660>)
 8004f9e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004fa2:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
	MYDRON.Thrust.Thrust_Limit = 10000;
 8004fa6:	4b58      	ldr	r3, [pc, #352]	@ (8005108 <main+0x660>)
 8004fa8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004fac:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
	MYDRON.Thrust.Values = 0;
 8004fb0:	4955      	ldr	r1, [pc, #340]	@ (8005108 <main+0x660>)
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
	MYDRON.Thrust.Wanted = 0;
 8004fbe:	4b52      	ldr	r3, [pc, #328]	@ (8005108 <main+0x660>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2

	MYDRON.Status.Battery = DRON_BATTERY_OK;
 8004fc6:	4b50      	ldr	r3, [pc, #320]	@ (8005108 <main+0x660>)
 8004fc8:	2208      	movs	r2, #8
 8004fca:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
	MYDRON.Status.Code = DRON_CODE_OK;
 8004fce:	4b4e      	ldr	r3, [pc, #312]	@ (8005108 <main+0x660>)
 8004fd0:	2205      	movs	r2, #5
 8004fd2:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
	MYDRON.Status.Connection = DRON_CONNECTED;
 8004fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8005108 <main+0x660>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
	MYDRON.Status.Wobble = NO_WOBBLE;
 8004fde:	4b4a      	ldr	r3, [pc, #296]	@ (8005108 <main+0x660>)
 8004fe0:	220e      	movs	r2, #14
 8004fe2:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187



	HMC5883L.Directions.Heading = 0;
 8004fe6:	4b50      	ldr	r3, [pc, #320]	@ (8005128 <main+0x680>)
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	619a      	str	r2, [r3, #24]
	HMC5883L.Directions.Old_X = 0;
 8004fee:	4b4e      	ldr	r3, [pc, #312]	@ (8005128 <main+0x680>)
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	615a      	str	r2, [r3, #20]
	HMC5883L.Directions.Old_Y = 0;
 8004ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8005128 <main+0x680>)
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
	HMC5883L.Directions.Old_Z = 0;
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <main+0x680>)
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	60da      	str	r2, [r3, #12]
	HMC5883L.Directions.X = 0;
 8005006:	4b48      	ldr	r3, [pc, #288]	@ (8005128 <main+0x680>)
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
	HMC5883L.Directions.Y = 0;
 800500e:	4b46      	ldr	r3, [pc, #280]	@ (8005128 <main+0x680>)
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	605a      	str	r2, [r3, #4]
	HMC5883L.Directions.Z = 0;
 8005016:	4b44      	ldr	r3, [pc, #272]	@ (8005128 <main+0x680>)
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
	HMC5883L.HMC583L_IRQ = 0;
 800501e:	4b42      	ldr	r3, [pc, #264]	@ (8005128 <main+0x680>)
 8005020:	2200      	movs	r2, #0
 8005022:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	HMC5883L.Off_Set_Values.X = 0;
 8005026:	4b40      	ldr	r3, [pc, #256]	@ (8005128 <main+0x680>)
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	625a      	str	r2, [r3, #36]	@ 0x24
	HMC5883L.Off_Set_Values.Y = 0;
 800502e:	4b3e      	ldr	r3, [pc, #248]	@ (8005128 <main+0x680>)
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	621a      	str	r2, [r3, #32]
	HMC5883L.Off_Set_Values.Z = 0;
 8005036:	4b3c      	ldr	r3, [pc, #240]	@ (8005128 <main+0x680>)
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	61da      	str	r2, [r3, #28]



  	TIM_inte_SD = 0, TIM_inte = 0;
 800503e:	4b3b      	ldr	r3, [pc, #236]	@ (800512c <main+0x684>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	4b3a      	ldr	r3, [pc, #232]	@ (8005130 <main+0x688>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 800504a:	4b3a      	ldr	r3, [pc, #232]	@ (8005134 <main+0x68c>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
  	FDP_D_Gain_AR = 0;
 8005050:	4b39      	ldr	r3, [pc, #228]	@ (8005138 <main+0x690>)
 8005052:	2200      	movs	r2, #0
 8005054:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 8005056:	4b39      	ldr	r3, [pc, #228]	@ (800513c <main+0x694>)
 8005058:	2200      	movs	r2, #0
 800505a:	801a      	strh	r2, [r3, #0]
  	Mainloop_Number = 0;
 800505c:	4b38      	ldr	r3, [pc, #224]	@ (8005140 <main+0x698>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8005062:	4b38      	ldr	r3, [pc, #224]	@ (8005144 <main+0x69c>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8005068:	4b37      	ldr	r3, [pc, #220]	@ (8005148 <main+0x6a0>)
 800506a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800506e:	601a      	str	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8005070:	4b36      	ldr	r3, [pc, #216]	@ (800514c <main+0x6a4>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	4b36      	ldr	r3, [pc, #216]	@ (8005150 <main+0x6a8>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
  	NRF24_inte = 0;
 800507c:	4b35      	ldr	r3, [pc, #212]	@ (8005154 <main+0x6ac>)
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8005082:	4a35      	ldr	r2, [pc, #212]	@ (8005158 <main+0x6b0>)
 8005084:	f107 0308 	add.w	r3, r7, #8
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	4611      	mov	r1, r2
 800508c:	8019      	strh	r1, [r3, #0]
 800508e:	3302      	adds	r3, #2
 8005090:	0c12      	lsrs	r2, r2, #16
 8005092:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 8005094:	4a31      	ldr	r2, [pc, #196]	@ (800515c <main+0x6b4>)
 8005096:	1d3b      	adds	r3, r7, #4
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	4611      	mov	r1, r2
 800509c:	8019      	strh	r1, [r3, #0]
 800509e:	3302      	adds	r3, #2
 80050a0:	0c12      	lsrs	r2, r2, #16
 80050a2:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 80050a4:	2201      	movs	r2, #1
 80050a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050aa:	482d      	ldr	r0, [pc, #180]	@ (8005160 <main+0x6b8>)
 80050ac:	f008 fe2c 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_6_1;
 80050b0:	2201      	movs	r2, #1
 80050b2:	2108      	movs	r1, #8
 80050b4:	482b      	ldr	r0, [pc, #172]	@ (8005164 <main+0x6bc>)
 80050b6:	f008 fe27 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_7_1;
 80050ba:	2201      	movs	r2, #1
 80050bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050c0:	4827      	ldr	r0, [pc, #156]	@ (8005160 <main+0x6b8>)
 80050c2:	f008 fe21 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 80050c6:	2201      	movs	r2, #1
 80050c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050cc:	4826      	ldr	r0, [pc, #152]	@ (8005168 <main+0x6c0>)
 80050ce:	f008 fe1b 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_G_1;
 80050d2:	2201      	movs	r2, #1
 80050d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050d8:	4822      	ldr	r0, [pc, #136]	@ (8005164 <main+0x6bc>)
 80050da:	f008 fe15 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_Y_1;
 80050de:	2201      	movs	r2, #1
 80050e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050e4:	4821      	ldr	r0, [pc, #132]	@ (800516c <main+0x6c4>)
 80050e6:	f008 fe0f 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_R_1;
 80050ea:	2201      	movs	r2, #1
 80050ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050f0:	481e      	ldr	r0, [pc, #120]	@ (800516c <main+0x6c4>)
 80050f2:	f008 fe09 	bl	800dd08 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 80050f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050fa:	f003 fcc9 	bl	8008a90 <HAL_Delay>
  	LED_G_0;
 80050fe:	2200      	movs	r2, #0
 8005100:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005104:	e034      	b.n	8005170 <main+0x6c8>
 8005106:	bf00      	nop
 8005108:	00000160 	.word	0x00000160
 800510c:	40c00000 	.word	0x40c00000
 8005110:	41c80000 	.word	0x41c80000
 8005114:	41200000 	.word	0x41200000
 8005118:	41f00000 	.word	0x41f00000
 800511c:	40a00000 	.word	0x40a00000
 8005120:	41a00000 	.word	0x41a00000
 8005124:	41700000 	.word	0x41700000
 8005128:	0000419c 	.word	0x0000419c
 800512c:	000041ec 	.word	0x000041ec
 8005130:	000041f0 	.word	0x000041f0
 8005134:	000041f8 	.word	0x000041f8
 8005138:	00004206 	.word	0x00004206
 800513c:	00004208 	.word	0x00004208
 8005140:	00004214 	.word	0x00004214
 8005144:	00004218 	.word	0x00004218
 8005148:	0000420c 	.word	0x0000420c
 800514c:	000041fc 	.word	0x000041fc
 8005150:	00004200 	.word	0x00004200
 8005154:	00004205 	.word	0x00004205
 8005158:	0801e73c 	.word	0x0801e73c
 800515c:	0801e740 	.word	0x0801e740
 8005160:	58020000 	.word	0x58020000
 8005164:	58021000 	.word	0x58021000
 8005168:	58020c00 	.word	0x58020c00
 800516c:	58020400 	.word	0x58020400
 8005170:	48a9      	ldr	r0, [pc, #676]	@ (8005418 <main+0x970>)
 8005172:	f008 fdc9 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_Y_0;
 8005176:	2200      	movs	r2, #0
 8005178:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800517c:	48a7      	ldr	r0, [pc, #668]	@ (800541c <main+0x974>)
 800517e:	f008 fdc3 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_R_0;
 8005182:	2200      	movs	r2, #0
 8005184:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005188:	48a4      	ldr	r0, [pc, #656]	@ (800541c <main+0x974>)
 800518a:	f008 fdbd 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_5_0;
 800518e:	2200      	movs	r2, #0
 8005190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005194:	48a2      	ldr	r0, [pc, #648]	@ (8005420 <main+0x978>)
 8005196:	f008 fdb7 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_6_0;
 800519a:	2200      	movs	r2, #0
 800519c:	2108      	movs	r1, #8
 800519e:	489e      	ldr	r0, [pc, #632]	@ (8005418 <main+0x970>)
 80051a0:	f008 fdb2 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_7_0;
 80051a4:	2200      	movs	r2, #0
 80051a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051aa:	489d      	ldr	r0, [pc, #628]	@ (8005420 <main+0x978>)
 80051ac:	f008 fdac 	bl	800dd08 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 80051b0:	2200      	movs	r2, #0
 80051b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051b6:	489b      	ldr	r0, [pc, #620]	@ (8005424 <main+0x97c>)
 80051b8:	f008 fda6 	bl	800dd08 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	e009      	b.n	80051d6 <main+0x72e>
  		Old_Data_stack.olddata[i] = 0;
 80051c2:	4a99      	ldr	r2, [pc, #612]	@ (8005428 <main+0x980>)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80051dc:	dbf1      	blt.n	80051c2 <main+0x71a>
  	}
  	Old_Data_stack.start_pointer = 0;
 80051de:	4b92      	ldr	r3, [pc, #584]	@ (8005428 <main+0x980>)
 80051e0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 80051ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005428 <main+0x980>)
 80051ec:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80051f0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80051f4:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 80051f8:	4b8c      	ldr	r3, [pc, #560]	@ (800542c <main+0x984>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 80051fe:	488c      	ldr	r0, [pc, #560]	@ (8005430 <main+0x988>)
 8005200:	f010 fdbc 	bl	8015d7c <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 8005204:	2201      	movs	r2, #1
 8005206:	4989      	ldr	r1, [pc, #548]	@ (800542c <main+0x984>)
 8005208:	488a      	ldr	r0, [pc, #552]	@ (8005434 <main+0x98c>)
 800520a:	f004 f993 	bl	8009534 <HAL_ADC_Start_DMA>
  	LED_R_1;
 800520e:	2201      	movs	r2, #1
 8005210:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005214:	4881      	ldr	r0, [pc, #516]	@ (800541c <main+0x974>)
 8005216:	f008 fd77 	bl	800dd08 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 800521a:	bf00      	nop
 800521c:	4b83      	ldr	r3, [pc, #524]	@ (800542c <main+0x984>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0fb      	beq.n	800521c <main+0x774>

  	}
  	LED_R_0;
 8005224:	2200      	movs	r2, #0
 8005226:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800522a:	487c      	ldr	r0, [pc, #496]	@ (800541c <main+0x974>)
 800522c:	f008 fd6c 	bl	800dd08 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 8005230:	f7fe fd2a 	bl	8003c88 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005234:	2104      	movs	r1, #4
 8005236:	4880      	ldr	r0, [pc, #512]	@ (8005438 <main+0x990>)
 8005238:	f010 ff82 	bl	8016140 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800523c:	2108      	movs	r1, #8
 800523e:	487e      	ldr	r0, [pc, #504]	@ (8005438 <main+0x990>)
 8005240:	f010 ff7e 	bl	8016140 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005244:	210c      	movs	r1, #12
 8005246:	487c      	ldr	r0, [pc, #496]	@ (8005438 <main+0x990>)
 8005248:	f010 ff7a 	bl	8016140 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800524c:	4b7b      	ldr	r3, [pc, #492]	@ (800543c <main+0x994>)
 800524e:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8005252:	b2db      	uxtb	r3, r3
 8005254:	4618      	mov	r0, r3
 8005256:	f001 fec7 	bl	8006fe8 <RGB_LED_For_BAT>
  	if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT)
 800525a:	4b78      	ldr	r3, [pc, #480]	@ (800543c <main+0x994>)
 800525c:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8005260:	2b07      	cmp	r3, #7
 8005262:	d107      	bne.n	8005274 <main+0x7cc>
  	{
  		LED_R_1;
 8005264:	2201      	movs	r2, #1
 8005266:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800526a:	486c      	ldr	r0, [pc, #432]	@ (800541c <main+0x974>)
 800526c:	f008 fd4c 	bl	800dd08 <HAL_GPIO_WritePin>
  		while(1){
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <main+0x7c8>

  		}
  	}
  	if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005274:	4b71      	ldr	r3, [pc, #452]	@ (800543c <main+0x994>)
 8005276:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 800527a:	2b09      	cmp	r3, #9
 800527c:	d107      	bne.n	800528e <main+0x7e6>
  		LED_R_1;
 800527e:	2201      	movs	r2, #1
 8005280:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005284:	4865      	ldr	r0, [pc, #404]	@ (800541c <main+0x974>)
 8005286:	f008 fd3f 	bl	800dd08 <HAL_GPIO_WritePin>

  		while(1){
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <main+0x7e2>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 800528e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005292:	4862      	ldr	r0, [pc, #392]	@ (800541c <main+0x974>)
 8005294:	f008 fd20 	bl	800dcd8 <HAL_GPIO_ReadPin>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	4b68      	ldr	r3, [pc, #416]	@ (8005440 <main+0x998>)
 800529e:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 80052a0:	4b67      	ldr	r3, [pc, #412]	@ (8005440 <main+0x998>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d103      	bne.n	80052b0 <main+0x808>
		SD_enable_Flag = 0;
 80052a8:	4b65      	ldr	r3, [pc, #404]	@ (8005440 <main+0x998>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	e002      	b.n	80052b6 <main+0x80e>
	}
	else{
		SD_enable_Flag = 1;
 80052b0:	4b63      	ldr	r3, [pc, #396]	@ (8005440 <main+0x998>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 80052b6:	4b62      	ldr	r3, [pc, #392]	@ (8005440 <main+0x998>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d15f      	bne.n	800537e <main+0x8d6>
		LED_uSD_1;
 80052be:	2201      	movs	r2, #1
 80052c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052c4:	4857      	ldr	r0, [pc, #348]	@ (8005424 <main+0x97c>)
 80052c6:	f008 fd1f 	bl	800dd08 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 80052ca:	2201      	movs	r2, #1
 80052cc:	495d      	ldr	r1, [pc, #372]	@ (8005444 <main+0x99c>)
 80052ce:	485e      	ldr	r0, [pc, #376]	@ (8005448 <main+0x9a0>)
 80052d0:	f017 fedc 	bl	801d08c <f_mount>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	4b5c      	ldr	r3, [pc, #368]	@ (800544c <main+0x9a4>)
 80052da:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80052dc:	485c      	ldr	r0, [pc, #368]	@ (8005450 <main+0x9a8>)
 80052de:	f018 fb1f 	bl	801d920 <f_unlink>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b59      	ldr	r3, [pc, #356]	@ (800544c <main+0x9a4>)
 80052e8:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 80052ea:	2201      	movs	r2, #1
 80052ec:	4955      	ldr	r1, [pc, #340]	@ (8005444 <main+0x99c>)
 80052ee:	4856      	ldr	r0, [pc, #344]	@ (8005448 <main+0x9a0>)
 80052f0:	f017 fecc 	bl	801d08c <f_mount>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	4b54      	ldr	r3, [pc, #336]	@ (800544c <main+0x9a4>)
 80052fa:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 80052fc:	220a      	movs	r2, #10
 80052fe:	4955      	ldr	r1, [pc, #340]	@ (8005454 <main+0x9ac>)
 8005300:	4855      	ldr	r0, [pc, #340]	@ (8005458 <main+0x9b0>)
 8005302:	f017 ff09 	bl	801d118 <f_open>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	4b50      	ldr	r3, [pc, #320]	@ (800544c <main+0x9a4>)
 800530c:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 800530e:	2200      	movs	r2, #0
 8005310:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005314:	4843      	ldr	r0, [pc, #268]	@ (8005424 <main+0x97c>)
 8005316:	f008 fcf7 	bl	800dd08 <HAL_GPIO_WritePin>

		LED_uSD_1;
 800531a:	2201      	movs	r2, #1
 800531c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005320:	4840      	ldr	r0, [pc, #256]	@ (8005424 <main+0x97c>)
 8005322:	f008 fcf1 	bl	800dd08 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005326:	2300      	movs	r3, #0
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	e007      	b.n	800533c <main+0x894>
			DataToSendBuffer[i] = 49;
 800532c:	4a4b      	ldr	r2, [pc, #300]	@ (800545c <main+0x9b4>)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4413      	add	r3, r2
 8005332:	2231      	movs	r2, #49	@ 0x31
 8005334:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	3301      	adds	r3, #1
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	4a48      	ldr	r2, [pc, #288]	@ (8005460 <main+0x9b8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	ddf3      	ble.n	800532c <main+0x884>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005344:	4b47      	ldr	r3, [pc, #284]	@ (8005464 <main+0x9bc>)
 8005346:	2281      	movs	r2, #129	@ 0x81
 8005348:	4944      	ldr	r1, [pc, #272]	@ (800545c <main+0x9b4>)
 800534a:	4843      	ldr	r0, [pc, #268]	@ (8005458 <main+0x9b0>)
 800534c:	f018 f8ac 	bl	801d4a8 <f_write>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	4b3d      	ldr	r3, [pc, #244]	@ (800544c <main+0x9a4>)
 8005356:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005358:	483f      	ldr	r0, [pc, #252]	@ (8005458 <main+0x9b0>)
 800535a:	f018 fab7 	bl	801d8cc <f_close>
 800535e:	4603      	mov	r3, r0
 8005360:	461a      	mov	r2, r3
 8005362:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <main+0x9a4>)
 8005364:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005366:	4b39      	ldr	r3, [pc, #228]	@ (800544c <main+0x9a4>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <main+0x8ca>
			NVIC_SystemReset();
 800536e:	f7ff fb85 	bl	8004a7c <__NVIC_SystemReset>
			while(1){

			}
		}
		LED_uSD_0;
 8005372:	2200      	movs	r2, #0
 8005374:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005378:	482a      	ldr	r0, [pc, #168]	@ (8005424 <main+0x97c>)
 800537a:	f008 fcc5 	bl	800dd08 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 800537e:	2201      	movs	r2, #1
 8005380:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005384:	4826      	ldr	r0, [pc, #152]	@ (8005420 <main+0x978>)
 8005386:	f008 fcbf 	bl	800dd08 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 800538a:	4837      	ldr	r0, [pc, #220]	@ (8005468 <main+0x9c0>)
 800538c:	f7fb ff4c 	bl	8001228 <MPU6050_INIT>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <main+0x8fe>
			LED_R_1;
 8005396:	2201      	movs	r2, #1
 8005398:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800539c:	481f      	ldr	r0, [pc, #124]	@ (800541c <main+0x974>)
 800539e:	f008 fcb3 	bl	800dd08 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 80053a2:	f7ff fb6b 	bl	8004a7c <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 80053a6:	2201      	movs	r2, #1
 80053a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80053ac:	481b      	ldr	r0, [pc, #108]	@ (800541c <main+0x974>)
 80053ae:	f008 fcab 	bl	800dd08 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION();
 80053b2:	f7fc f803 	bl	80013bc <MPU6050_CALIBRATION>
		LED_Y_0;
 80053b6:	2200      	movs	r2, #0
 80053b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80053bc:	4817      	ldr	r0, [pc, #92]	@ (800541c <main+0x974>)
 80053be:	f008 fca3 	bl	800dd08 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 80053c2:	4829      	ldr	r0, [pc, #164]	@ (8005468 <main+0x9c0>)
 80053c4:	f7fb f984 	bl	80006d0 <BMP180_init>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <main+0x936>
			LED_R_1;
 80053ce:	2201      	movs	r2, #1
 80053d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053d4:	4811      	ldr	r0, [pc, #68]	@ (800541c <main+0x974>)
 80053d6:	f008 fc97 	bl	800dd08 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 80053da:	f7ff fb4f 	bl	8004a7c <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 80053de:	2201      	movs	r2, #1
 80053e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80053e4:	480d      	ldr	r0, [pc, #52]	@ (800541c <main+0x974>)
 80053e6:	f008 fc8f 	bl	800dd08 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&BMP180.startpres);
 80053ea:	4820      	ldr	r0, [pc, #128]	@ (800546c <main+0x9c4>)
 80053ec:	f7fb fc8c 	bl	8000d08 <BMP180_CALIBRATION>
		LED_Y_0;
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80053f6:	4809      	ldr	r0, [pc, #36]	@ (800541c <main+0x974>)
 80053f8:	f008 fc86 	bl	800dd08 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 80053fc:	481a      	ldr	r0, [pc, #104]	@ (8005468 <main+0x9c0>)
 80053fe:	f7fb fdcf 	bl	8000fa0 <HMC5883L_Init>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d133      	bne.n	8005470 <main+0x9c8>
			LED_R_1;
 8005408:	2201      	movs	r2, #1
 800540a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800540e:	4803      	ldr	r0, [pc, #12]	@ (800541c <main+0x974>)
 8005410:	f008 fc7a 	bl	800dd08 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005414:	f7ff fb32 	bl	8004a7c <__NVIC_SystemReset>
 8005418:	58021000 	.word	0x58021000
 800541c:	58020400 	.word	0x58020400
 8005420:	58020000 	.word	0x58020000
 8005424:	58020c00 	.word	0x58020c00
 8005428:	000002f0 	.word	0x000002f0
 800542c:	24000f48 	.word	0x24000f48
 8005430:	24000464 	.word	0x24000464
 8005434:	240000ac 	.word	0x240000ac
 8005438:	24000380 	.word	0x24000380
 800543c:	00000160 	.word	0x00000160
 8005440:	0000421c 	.word	0x0000421c
 8005444:	0801e720 	.word	0x0801e720
 8005448:	24000f4c 	.word	0x24000f4c
 800544c:	24001f84 	.word	0x24001f84
 8005450:	0801e724 	.word	0x0801e724
 8005454:	0801e730 	.word	0x0801e730
 8005458:	24001f88 	.word	0x24001f88
 800545c:	24002fc0 	.word	0x24002fc0
 8005460:	0001f7e7 	.word	0x0001f7e7
 8005464:	24002fbc 	.word	0x24002fbc
 8005468:	24000198 	.word	0x24000198
 800546c:	000000c0 	.word	0x000000c0
			while(1){
			}
		}
		LED_Y_1;
 8005470:	2201      	movs	r2, #1
 8005472:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005476:	4898      	ldr	r0, [pc, #608]	@ (80056d8 <main+0xc30>)
 8005478:	f008 fc46 	bl	800dd08 <HAL_GPIO_WritePin>
		HMC5883L.Off_Set_Values.Z = HMC5883L_Calibration();
 800547c:	f7fb fe9e 	bl	80011bc <HMC5883L_Calibration>
 8005480:	4603      	mov	r3, r0
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800548a:	4b94      	ldr	r3, [pc, #592]	@ (80056dc <main+0xc34>)
 800548c:	edc3 7a07 	vstr	s15, [r3, #28]
		LED_Y_0;
 8005490:	2200      	movs	r2, #0
 8005492:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005496:	4890      	ldr	r0, [pc, #576]	@ (80056d8 <main+0xc30>)
 8005498:	f008 fc36 	bl	800dd08 <HAL_GPIO_WritePin>

		LED_5_0;
 800549c:	2200      	movs	r2, #0
 800549e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054a2:	488f      	ldr	r0, [pc, #572]	@ (80056e0 <main+0xc38>)
 80054a4:	f008 fc30 	bl	800dd08 <HAL_GPIO_WritePin>



	/////////////////////////////// nRF24
		LED_6_1;
 80054a8:	2201      	movs	r2, #1
 80054aa:	2108      	movs	r1, #8
 80054ac:	488d      	ldr	r0, [pc, #564]	@ (80056e4 <main+0xc3c>)
 80054ae:	f008 fc2b 	bl	800dd08 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi1);
 80054b2:	488d      	ldr	r0, [pc, #564]	@ (80056e8 <main+0xc40>)
 80054b4:	f7fd f8f2 	bl	800269c <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 80054b8:	f107 0308 	add.w	r3, r7, #8
 80054bc:	4619      	mov	r1, r3
 80054be:	2000      	movs	r0, #0
 80054c0:	f7fc ff49 	bl	8002356 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fc ff7e 	bl	80023c8 <nRF24_SetTXAddress>
		nRF24_TX_Mode();
 80054cc:	f7fc fd64 	bl	8001f98 <nRF24_TX_Mode>
		NRF24.NRF24_MODE = NRF24_Tx_Mode;
 80054d0:	4b86      	ldr	r3, [pc, #536]	@ (80056ec <main+0xc44>)
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



		for(int i = 0; i < 32; i++){
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e008      	b.n	80054f0 <main+0xa48>
			NRF24.Txcode[i] = 0;
 80054de:	4a83      	ldr	r2, [pc, #524]	@ (80056ec <main+0xc44>)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	3360      	adds	r3, #96	@ 0x60
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	3301      	adds	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2b1f      	cmp	r3, #31
 80054f4:	ddf3      	ble.n	80054de <main+0xa36>
		}
		NRF24.Txcode[22] = 'd';
 80054f6:	4b7d      	ldr	r3, [pc, #500]	@ (80056ec <main+0xc44>)
 80054f8:	2264      	movs	r2, #100	@ 0x64
 80054fa:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
		NRF24.Txcode[23] = 'r';
 80054fe:	4b7b      	ldr	r3, [pc, #492]	@ (80056ec <main+0xc44>)
 8005500:	2272      	movs	r2, #114	@ 0x72
 8005502:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
		NRF24.Txcode[24] = 'o';
 8005506:	4b79      	ldr	r3, [pc, #484]	@ (80056ec <main+0xc44>)
 8005508:	226f      	movs	r2, #111	@ 0x6f
 800550a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
		NRF24.Txcode[25] = 'n';
 800550e:	4b77      	ldr	r3, [pc, #476]	@ (80056ec <main+0xc44>)
 8005510:	226e      	movs	r2, #110	@ 0x6e
 8005512:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
		NRF24.Txcode[26] = '2';
 8005516:	4b75      	ldr	r3, [pc, #468]	@ (80056ec <main+0xc44>)
 8005518:	2232      	movs	r2, #50	@ 0x32
 800551a:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
		NRF24.Txcode[27] = 'c';
 800551e:	4b73      	ldr	r3, [pc, #460]	@ (80056ec <main+0xc44>)
 8005520:	2263      	movs	r2, #99	@ 0x63
 8005522:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
		NRF24.Txcode[28] = '1';
 8005526:	4b71      	ldr	r3, [pc, #452]	@ (80056ec <main+0xc44>)
 8005528:	2231      	movs	r2, #49	@ 0x31
 800552a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		NRF24.Txcode[29] = 'z';
 800552e:	4b6f      	ldr	r3, [pc, #444]	@ (80056ec <main+0xc44>)
 8005530:	227a      	movs	r2, #122	@ 0x7a
 8005532:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
		NRF24.Txcode[30] = 'a';
 8005536:	4b6d      	ldr	r3, [pc, #436]	@ (80056ec <main+0xc44>)
 8005538:	2261      	movs	r2, #97	@ 0x61
 800553a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
		NRF24.Txcode[31] = '7';
 800553e:	4b6b      	ldr	r3, [pc, #428]	@ (80056ec <main+0xc44>)
 8005540:	2237      	movs	r2, #55	@ 0x37
 8005542:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f



		nRF24_WriteTXPayload(NRF24.Txcode);
 8005546:	486a      	ldr	r0, [pc, #424]	@ (80056f0 <main+0xc48>)
 8005548:	f7fc ffee 	bl	8002528 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 800554c:	f7fd f80e 	bl	800256c <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005550:	f7fc fcec 	bl	8001f2c <nRF24_RX_Mode>
		NRF24.NRF24_MODE = NRF24_Rx_Mode;
 8005554:	4b65      	ldr	r3, [pc, #404]	@ (80056ec <main+0xc44>)
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		uint8_t cunter = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005560:	e022      	b.n	80055a8 <main+0xb00>
			LED_G_1;
 8005562:	2201      	movs	r2, #1
 8005564:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005568:	485e      	ldr	r0, [pc, #376]	@ (80056e4 <main+0xc3c>)
 800556a:	f008 fbcd 	bl	800dd08 <HAL_GPIO_WritePin>
			LED_Y_1;
 800556e:	2201      	movs	r2, #1
 8005570:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005574:	4858      	ldr	r0, [pc, #352]	@ (80056d8 <main+0xc30>)
 8005576:	f008 fbc7 	bl	800dd08 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800557a:	2001      	movs	r0, #1
 800557c:	f003 fa88 	bl	8008a90 <HAL_Delay>
			LED_G_0;
 8005580:	2200      	movs	r2, #0
 8005582:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005586:	4857      	ldr	r0, [pc, #348]	@ (80056e4 <main+0xc3c>)
 8005588:	f008 fbbe 	bl	800dd08 <HAL_GPIO_WritePin>
			LED_Y_0;
 800558c:	2200      	movs	r2, #0
 800558e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005592:	4851      	ldr	r0, [pc, #324]	@ (80056d8 <main+0xc30>)
 8005594:	f008 fbb8 	bl	800dd08 <HAL_GPIO_WritePin>

			cunter++;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	3301      	adds	r3, #1
 800559c:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 800559e:	7cfb      	ldrb	r3, [r7, #19]
 80055a0:	2bc8      	cmp	r3, #200	@ 0xc8
 80055a2:	d101      	bne.n	80055a8 <main+0xb00>
				NVIC_SystemReset();
 80055a4:	f7ff fa6a 	bl	8004a7c <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80055a8:	2000      	movs	r0, #0
 80055aa:	f7fd f857 	bl	800265c <nRF24_IsBitSetInFifoStatus>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d0d6      	beq.n	8005562 <main+0xaba>
			}
		}

		while(NRF24_inte != 1){
 80055b4:	bf00      	nop
 80055b6:	4b4f      	ldr	r3, [pc, #316]	@ (80056f4 <main+0xc4c>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d1fb      	bne.n	80055b6 <main+0xb0e>

		}
		nRF24_ReadRXPaylaod(NRF24.RxData);
 80055be:	484b      	ldr	r0, [pc, #300]	@ (80056ec <main+0xc44>)
 80055c0:	f7fc fffc 	bl	80025bc <nRF24_ReadRXPaylaod>
		STARTUP = 0;
 80055c4:	4b4c      	ldr	r3, [pc, #304]	@ (80056f8 <main+0xc50>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
		LED_6_0;
 80055ca:	2200      	movs	r2, #0
 80055cc:	2108      	movs	r1, #8
 80055ce:	4845      	ldr	r0, [pc, #276]	@ (80056e4 <main+0xc3c>)
 80055d0:	f008 fb9a 	bl	800dd08 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 80055d4:	230c      	movs	r3, #12
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e00c      	b.n	80055f4 <main+0xb4c>
			NRF24.Rxcode[i] = NRF24.RxData[i];
 80055da:	4a44      	ldr	r2, [pc, #272]	@ (80056ec <main+0xc44>)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	7819      	ldrb	r1, [r3, #0]
 80055e2:	4a42      	ldr	r2, [pc, #264]	@ (80056ec <main+0xc44>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	3340      	adds	r3, #64	@ 0x40
 80055ea:	460a      	mov	r2, r1
 80055ec:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b15      	cmp	r3, #21
 80055f8:	ddef      	ble.n	80055da <main+0xb32>
		}
	///////////////////////////////////////////////////////////////////////
		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 80055fa:	4840      	ldr	r0, [pc, #256]	@ (80056fc <main+0xc54>)
 80055fc:	f010 fc3c 	bl	8015e78 <HAL_TIM_Base_Start_IT>

		ESC_INT(&htim3);
 8005600:	483f      	ldr	r0, [pc, #252]	@ (8005700 <main+0xc58>)
 8005602:	f7fb fc83 	bl	8000f0c <ESC_INT>

		LED_7_1;
 8005606:	2201      	movs	r2, #1
 8005608:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800560c:	4834      	ldr	r0, [pc, #208]	@ (80056e0 <main+0xc38>)
 800560e:	f008 fb7b 	bl	800dd08 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &USART.Received, 1);
 8005612:	2201      	movs	r2, #1
 8005614:	493b      	ldr	r1, [pc, #236]	@ (8005704 <main+0xc5c>)
 8005616:	483c      	ldr	r0, [pc, #240]	@ (8005708 <main+0xc60>)
 8005618:	f012 fb8a 	bl	8017d30 <HAL_UART_Receive_IT>
		LED_7_0;
 800561c:	2200      	movs	r2, #0
 800561e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005622:	482f      	ldr	r0, [pc, #188]	@ (80056e0 <main+0xc38>)
 8005624:	f008 fb70 	bl	800dd08 <HAL_GPIO_WritePin>


		HAL_TIM_Base_Start_IT(&htim24);//przerwanie co 100ms
 8005628:	4838      	ldr	r0, [pc, #224]	@ (800570c <main+0xc64>)
 800562a:	f010 fc25 	bl	8015e78 <HAL_TIM_Base_Start_IT>

		Get_batteryvalue();
 800562e:	f7fe fb2b 	bl	8003c88 <Get_batteryvalue>
	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005632:	4b37      	ldr	r3, [pc, #220]	@ (8005710 <main+0xc68>)
 8005634:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8005638:	b2db      	uxtb	r3, r3
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fcd4 	bl	8006fe8 <RGB_LED_For_BAT>

	  	if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT)
 8005640:	4b33      	ldr	r3, [pc, #204]	@ (8005710 <main+0xc68>)
 8005642:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8005646:	2b07      	cmp	r3, #7
 8005648:	d107      	bne.n	800565a <main+0xbb2>
	  	{
	  		LED_R_1;
 800564a:	2201      	movs	r2, #1
 800564c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005650:	4821      	ldr	r0, [pc, #132]	@ (80056d8 <main+0xc30>)
 8005652:	f008 fb59 	bl	800dd08 <HAL_GPIO_WritePin>
	  		while(1){
 8005656:	bf00      	nop
 8005658:	e7fd      	b.n	8005656 <main+0xbae>

	  		}
	  	}

	  	if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 800565a:	4b2d      	ldr	r3, [pc, #180]	@ (8005710 <main+0xc68>)
 800565c:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8005660:	2b09      	cmp	r3, #9
 8005662:	d107      	bne.n	8005674 <main+0xbcc>
	  		LED_R_1;
 8005664:	2201      	movs	r2, #1
 8005666:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800566a:	481b      	ldr	r0, [pc, #108]	@ (80056d8 <main+0xc30>)
 800566c:	f008 fb4c 	bl	800dd08 <HAL_GPIO_WritePin>
	  		while(1){
 8005670:	bf00      	nop
 8005672:	e7fd      	b.n	8005670 <main+0xbc8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT){
 8005674:	4b26      	ldr	r3, [pc, #152]	@ (8005710 <main+0xc68>)
 8005676:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 800567a:	2b07      	cmp	r3, #7
 800567c:	d10c      	bne.n	8005698 <main+0xbf0>
	  			LED_R_1;
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005684:	4814      	ldr	r0, [pc, #80]	@ (80056d8 <main+0xc30>)
 8005686:	f008 fb3f 	bl	800dd08 <HAL_GPIO_WritePin>
	  			MYDRON.Thrust.Thrust_Limit = MYDRON.Thrust.Now;
 800568a:	4b21      	ldr	r3, [pc, #132]	@ (8005710 <main+0xc68>)
 800568c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8005690:	b21a      	sxth	r2, r3
 8005692:	4b1f      	ldr	r3, [pc, #124]	@ (8005710 <main+0xc68>)
 8005694:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
	  		}
	  		if(MYDRON.Status.Battery == DRON_BATTERY_OK){
 8005698:	4b1d      	ldr	r3, [pc, #116]	@ (8005710 <main+0xc68>)
 800569a:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d104      	bne.n	80056ac <main+0xc04>
	  			MYDRON.Thrust.Thrust_Limit = 10000;
 80056a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005710 <main+0xc68>)
 80056a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80056a8:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
	  		}
	  		if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 80056ac:	4b18      	ldr	r3, [pc, #96]	@ (8005710 <main+0xc68>)
 80056ae:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 80056b2:	2b09      	cmp	r3, #9
 80056b4:	d13c      	bne.n	8005730 <main+0xc88>
	  			ESC_POWER_1;
 80056b6:	2201      	movs	r2, #1
 80056b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80056bc:	4815      	ldr	r0, [pc, #84]	@ (8005714 <main+0xc6c>)
 80056be:	f008 fb23 	bl	800dd08 <HAL_GPIO_WritePin>
	  			LED_R_1;
 80056c2:	2201      	movs	r2, #1
 80056c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056c8:	4803      	ldr	r0, [pc, #12]	@ (80056d8 <main+0xc30>)
 80056ca:	f008 fb1d 	bl	800dd08 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 80056ce:	4812      	ldr	r0, [pc, #72]	@ (8005718 <main+0xc70>)
 80056d0:	f018 f8fc 	bl	801d8cc <f_close>
	  			while(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 80056d4:	e027      	b.n	8005726 <main+0xc7e>
 80056d6:	bf00      	nop
 80056d8:	58020400 	.word	0x58020400
 80056dc:	0000419c 	.word	0x0000419c
 80056e0:	58020000 	.word	0x58020000
 80056e4:	58021000 	.word	0x58021000
 80056e8:	240001ec 	.word	0x240001ec
 80056ec:	000000d0 	.word	0x000000d0
 80056f0:	00000130 	.word	0x00000130
 80056f4:	00004205 	.word	0x00004205
 80056f8:	000041f4 	.word	0x000041f4
 80056fc:	240003cc 	.word	0x240003cc
 8005700:	24000418 	.word	0x24000418
 8005704:	000041e6 	.word	0x000041e6
 8005708:	24000548 	.word	0x24000548
 800570c:	240004fc 	.word	0x240004fc
 8005710:	00000160 	.word	0x00000160
 8005714:	58021800 	.word	0x58021800
 8005718:	24001f88 	.word	0x24001f88
	  				HAL_Delay(10);
 800571c:	200a      	movs	r0, #10
 800571e:	f003 f9b7 	bl	8008a90 <HAL_Delay>
	  				Get_batteryvalue();
 8005722:	f7fe fab1 	bl	8003c88 <Get_batteryvalue>
	  			while(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005726:	4b4d      	ldr	r3, [pc, #308]	@ (800585c <main+0xdb4>)
 8005728:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 800572c:	2b09      	cmp	r3, #9
 800572e:	d0f5      	beq.n	800571c <main+0xc74>
	  			}
	  		}

	  		if(USART.commandready == 1){
 8005730:	4b4b      	ldr	r3, [pc, #300]	@ (8005860 <main+0xdb8>)
 8005732:	7bdb      	ldrb	r3, [r3, #15]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d111      	bne.n	800575c <main+0xcb4>
	  			LED_7_1;
 8005738:	2201      	movs	r2, #1
 800573a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800573e:	4849      	ldr	r0, [pc, #292]	@ (8005864 <main+0xdbc>)
 8005740:	f008 fae2 	bl	800dd08 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005744:	f7fd f814 	bl	8002770 <interpretcommand>
	  			executecommand(USART.command, USART.UASRT_PID_VAL);
 8005748:	4945      	ldr	r1, [pc, #276]	@ (8005860 <main+0xdb8>)
 800574a:	4847      	ldr	r0, [pc, #284]	@ (8005868 <main+0xdc0>)
 800574c:	f7fd f85c 	bl	8002808 <executecommand>
	  			LED_7_0;
 8005750:	2200      	movs	r2, #0
 8005752:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005756:	4843      	ldr	r0, [pc, #268]	@ (8005864 <main+0xdbc>)
 8005758:	f008 fad6 	bl	800dd08 <HAL_GPIO_WritePin>
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 800575c:	4b43      	ldr	r3, [pc, #268]	@ (800586c <main+0xdc4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d14d      	bne.n	8005800 <main+0xd58>
 8005764:	4b42      	ldr	r3, [pc, #264]	@ (8005870 <main+0xdc8>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d149      	bne.n	8005800 <main+0xd58>
 800576c:	4b41      	ldr	r3, [pc, #260]	@ (8005874 <main+0xdcc>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d145      	bne.n	8005800 <main+0xd58>
	  			TIM_inte_SD = 0;
 8005774:	4b3d      	ldr	r3, [pc, #244]	@ (800586c <main+0xdc4>)
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 800577a:	4b3f      	ldr	r3, [pc, #252]	@ (8005878 <main+0xdd0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fdc8 	bl	8007314 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005784:	4b3c      	ldr	r3, [pc, #240]	@ (8005878 <main+0xdd0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800578c:	4293      	cmp	r3, r2
 800578e:	d12b      	bne.n	80057e8 <main+0xd40>
	  				SD_In_Use = 1;
 8005790:	4b3a      	ldr	r3, [pc, #232]	@ (800587c <main+0xdd4>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005796:	2201      	movs	r2, #1
 8005798:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800579c:	4838      	ldr	r0, [pc, #224]	@ (8005880 <main+0xdd8>)
 800579e:	f008 fab3 	bl	800dd08 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 80057a2:	2232      	movs	r2, #50	@ 0x32
 80057a4:	4937      	ldr	r1, [pc, #220]	@ (8005884 <main+0xddc>)
 80057a6:	4838      	ldr	r0, [pc, #224]	@ (8005888 <main+0xde0>)
 80057a8:	f017 fcb6 	bl	801d118 <f_open>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005870 <main+0xdc8>)
 80057b2:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 80057b4:	4b35      	ldr	r3, [pc, #212]	@ (800588c <main+0xde4>)
 80057b6:	4a36      	ldr	r2, [pc, #216]	@ (8005890 <main+0xde8>)
 80057b8:	4936      	ldr	r1, [pc, #216]	@ (8005894 <main+0xdec>)
 80057ba:	4833      	ldr	r0, [pc, #204]	@ (8005888 <main+0xde0>)
 80057bc:	f017 fe74 	bl	801d4a8 <f_write>
 80057c0:	4603      	mov	r3, r0
 80057c2:	461a      	mov	r2, r3
 80057c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005870 <main+0xdc8>)
 80057c6:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 80057c8:	482f      	ldr	r0, [pc, #188]	@ (8005888 <main+0xde0>)
 80057ca:	f018 f87f 	bl	801d8cc <f_close>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	4b27      	ldr	r3, [pc, #156]	@ (8005870 <main+0xdc8>)
 80057d4:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057dc:	4828      	ldr	r0, [pc, #160]	@ (8005880 <main+0xdd8>)
 80057de:	f008 fa93 	bl	800dd08 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 80057e2:	4b26      	ldr	r3, [pc, #152]	@ (800587c <main+0xdd4>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 80057e8:	4b23      	ldr	r3, [pc, #140]	@ (8005878 <main+0xdd0>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057f0:	d203      	bcs.n	80057fa <main+0xd52>
 80057f2:	4b21      	ldr	r3, [pc, #132]	@ (8005878 <main+0xdd0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3301      	adds	r3, #1
 80057f8:	e000      	b.n	80057fc <main+0xd54>
 80057fa:	2300      	movs	r3, #0
 80057fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005878 <main+0xdd0>)
 80057fe:	6013      	str	r3, [r2, #0]
	  		}


	  		if(MYDRON.Status.Connection == DRON_DISCONNECTED){
 8005800:	4b16      	ldr	r3, [pc, #88]	@ (800585c <main+0xdb4>)
 8005802:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8005806:	2b02      	cmp	r3, #2
 8005808:	d118      	bne.n	800583c <main+0xd94>
	  			if(NRF24.Step == 0){
 800580a:	4b23      	ldr	r3, [pc, #140]	@ (8005898 <main+0xdf0>)
 800580c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <main+0xd82>
	  				NRF24.Step = 2;
 8005814:	4b20      	ldr	r3, [pc, #128]	@ (8005898 <main+0xdf0>)
 8005816:	2202      	movs	r2, #2
 8005818:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	  				NRF24.Status = NRF24_Ready;
 800581c:	4b1e      	ldr	r3, [pc, #120]	@ (8005898 <main+0xdf0>)
 800581e:	2204      	movs	r2, #4
 8005820:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	  				HAL_Delay(10);
 8005824:	200a      	movs	r0, #10
 8005826:	f003 f933 	bl	8008a90 <HAL_Delay>
	  			}
	  			if(NRF24.Step == 9){
 800582a:	4b1b      	ldr	r3, [pc, #108]	@ (8005898 <main+0xdf0>)
 800582c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005830:	2b09      	cmp	r3, #9
 8005832:	d103      	bne.n	800583c <main+0xd94>
	  				NRF24.Step = 0;
 8005834:	4b18      	ldr	r3, [pc, #96]	@ (8005898 <main+0xdf0>)
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	  			}
	  		}
	  		if(TIM_inte == 1){
 800583c:	4b17      	ldr	r3, [pc, #92]	@ (800589c <main+0xdf4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b01      	cmp	r3, #1
 8005842:	f47f af17 	bne.w	8005674 <main+0xbcc>
	  			LED_R_0;
 8005846:	2200      	movs	r2, #0
 8005848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800584c:	4814      	ldr	r0, [pc, #80]	@ (80058a0 <main+0xdf8>)
 800584e:	f008 fa5b 	bl	800dd08 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005852:	4b12      	ldr	r3, [pc, #72]	@ (800589c <main+0xdf4>)
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
	  if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT){
 8005858:	e70c      	b.n	8005674 <main+0xbcc>
 800585a:	bf00      	nop
 800585c:	00000160 	.word	0x00000160
 8005860:	000041cc 	.word	0x000041cc
 8005864:	58020000 	.word	0x58020000
 8005868:	000041e8 	.word	0x000041e8
 800586c:	000041ec 	.word	0x000041ec
 8005870:	24001f84 	.word	0x24001f84
 8005874:	0000421c 	.word	0x0000421c
 8005878:	00004214 	.word	0x00004214
 800587c:	00004218 	.word	0x00004218
 8005880:	58020c00 	.word	0x58020c00
 8005884:	0801e730 	.word	0x0801e730
 8005888:	24001f88 	.word	0x24001f88
 800588c:	24002fbc 	.word	0x24002fbc
 8005890:	0001f7e8 	.word	0x0001f7e8
 8005894:	24002fc0 	.word	0x24002fc0
 8005898:	000000d0 	.word	0x000000d0
 800589c:	000041f0 	.word	0x000041f0
 80058a0:	58020400 	.word	0x58020400

080058a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b09c      	sub	sp, #112	@ 0x70
 80058a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ae:	224c      	movs	r2, #76	@ 0x4c
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f018 fa02 	bl	801dcbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058b8:	1d3b      	adds	r3, r7, #4
 80058ba:	2220      	movs	r2, #32
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f018 f9fc 	bl	801dcbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80058c4:	2002      	movs	r0, #2
 80058c6:	f00a fec7 	bl	8010658 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80058ca:	2300      	movs	r3, #0
 80058cc:	603b      	str	r3, [r7, #0]
 80058ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005984 <SystemClock_Config+0xe0>)
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005984 <SystemClock_Config+0xe0>)
 80058d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80058d8:	6193      	str	r3, [r2, #24]
 80058da:	4b2a      	ldr	r3, [pc, #168]	@ (8005984 <SystemClock_Config+0xe0>)
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80058e6:	bf00      	nop
 80058e8:	4b26      	ldr	r3, [pc, #152]	@ (8005984 <SystemClock_Config+0xe0>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f4:	d1f8      	bne.n	80058e8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 80058f6:	2311      	movs	r3, #17
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80058fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005900:	2380      	movs	r3, #128	@ 0x80
 8005902:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005904:	2310      	movs	r3, #16
 8005906:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005908:	2302      	movs	r3, #2
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800590c:	2302      	movs	r3, #2
 800590e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005910:	2303      	movs	r3, #3
 8005912:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005914:	2344      	movs	r3, #68	@ 0x44
 8005916:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005918:	2301      	movs	r3, #1
 800591a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800591c:	2302      	movs	r3, #2
 800591e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005920:	2302      	movs	r3, #2
 8005922:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005924:	230c      	movs	r3, #12
 8005926:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005928:	2300      	movs	r3, #0
 800592a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800592c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005930:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005936:	4618      	mov	r0, r3
 8005938:	f00a fec8 	bl	80106cc <HAL_RCC_OscConfig>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005942:	f001 ffdd 	bl	8007900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005946:	233f      	movs	r3, #63	@ 0x3f
 8005948:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800594a:	2303      	movs	r3, #3
 800594c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005952:	2308      	movs	r3, #8
 8005954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005956:	2340      	movs	r3, #64	@ 0x40
 8005958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800595a:	2340      	movs	r3, #64	@ 0x40
 800595c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800595e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005962:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005964:	2340      	movs	r3, #64	@ 0x40
 8005966:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	2103      	movs	r1, #3
 800596c:	4618      	mov	r0, r3
 800596e:	f00b fa87 	bl	8010e80 <HAL_RCC_ClockConfig>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005978:	f001 ffc2 	bl	8007900 <Error_Handler>
  }
}
 800597c:	bf00      	nop
 800597e:	3770      	adds	r7, #112	@ 0x70
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	58024800 	.word	0x58024800

08005988 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b0ae      	sub	sp, #184	@ 0xb8
 800598c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800598e:	463b      	mov	r3, r7
 8005990:	22b8      	movs	r2, #184	@ 0xb8
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f018 f991 	bl	801dcbc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 800599a:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 80059a6:	2316      	movs	r3, #22
 80059a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 80059aa:	23c0      	movs	r3, #192	@ 0xc0
 80059ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80059ae:	2303      	movs	r3, #3
 80059b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80059b2:	2302      	movs	r3, #2
 80059b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80059b6:	2302      	movs	r3, #2
 80059b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80059be:	2320      	movs	r3, #32
 80059c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80059c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059d2:	463b      	mov	r3, r7
 80059d4:	4618      	mov	r0, r3
 80059d6:	f00b fddf 	bl	8011598 <HAL_RCCEx_PeriphCLKConfig>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80059e0:	f001 ff8e 	bl	8007900 <Error_Handler>
  }
}
 80059e4:	bf00      	nop
 80059e6:	37b8      	adds	r7, #184	@ 0xb8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	if(htim == &htim24){//100ms
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4aad      	ldr	r2, [pc, #692]	@ (8005cac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d109      	bne.n	8005a10 <HAL_TIM_PeriodElapsedCallback+0x24>
		BMP180_start_measurment_temp_IT();
 80059fc:	f7fa ff84 	bl	8000908 <BMP180_start_measurment_temp_IT>
		BMP180.Step++;//Step 1
 8005a00:	4bab      	ldr	r3, [pc, #684]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a02:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005a06:	3301      	adds	r3, #1
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	4ba9      	ldr	r3, [pc, #676]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a0c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	}
	if(htim == &htim23){//0.5 ms
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4aa8      	ldr	r2, [pc, #672]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d12b      	bne.n	8005a70 <HAL_TIM_PeriodElapsedCallback+0x84>
		if(BMP180.Timer_1 == 9){//4.5ms
 8005a18:	4ba5      	ldr	r3, [pc, #660]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a1e:	2b09      	cmp	r3, #9
 8005a20:	d10c      	bne.n	8005a3c <HAL_TIM_PeriodElapsedCallback+0x50>
			HAL_TIM_Base_Stop_IT(&htim23);
 8005a22:	48a4      	ldr	r0, [pc, #656]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005a24:	f010 faae 	bl	8015f84 <HAL_TIM_Base_Stop_IT>
			BMP180_READ_temp_IT();
 8005a28:	f7fa feb8 	bl	800079c <BMP180_READ_temp_IT>
			BMP180.Step++;//Step 3
 8005a2c:	4ba0      	ldr	r3, [pc, #640]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a2e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005a32:	3301      	adds	r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4b9e      	ldr	r3, [pc, #632]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a38:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
		}
		if(BMP180.Timer_1 == 61){//25.5ms
 8005a3c:	4b9c      	ldr	r3, [pc, #624]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a42:	2b3d      	cmp	r3, #61	@ 0x3d
 8005a44:	d10c      	bne.n	8005a60 <HAL_TIM_PeriodElapsedCallback+0x74>
			HAL_TIM_Base_Stop_IT(&htim23);
 8005a46:	489b      	ldr	r0, [pc, #620]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005a48:	f010 fa9c 	bl	8015f84 <HAL_TIM_Base_Stop_IT>
			BMP180_READ_pres_IT();
 8005a4c:	f7fa fec2 	bl	80007d4 <BMP180_READ_pres_IT>
			BMP180.Step++;//Step 6
 8005a50:	4b97      	ldr	r3, [pc, #604]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a52:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005a56:	3301      	adds	r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4b95      	ldr	r3, [pc, #596]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a5c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
		}
		BMP180.Timer_1++;
 8005a60:	4b93      	ldr	r3, [pc, #588]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a66:	3301      	adds	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	4b91      	ldr	r3, [pc, #580]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	}

	if(htim == &htim2)// 1 ms
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a91      	ldr	r2, [pc, #580]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	f040 81b0 	bne.w	8005dda <HAL_TIM_PeriodElapsedCallback+0x3ee>
	{
		TIM_inte_SD = 1;
 8005a7a:	4b90      	ldr	r3, [pc, #576]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005a80:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8005a86:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4a8d      	ldr	r2, [pc, #564]	@ (8005cc4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a8e:	6013      	str	r3, [r2, #0]

		if(NRF24.Timer_1 == 0){
 8005a90:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a92:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f040 8094 	bne.w	8005bc4 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			if(NRF24.Step == 2  && NRF24.Status == NRF24_Ready){
 8005a9c:	4b8a      	ldr	r3, [pc, #552]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a9e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8005aa6:	4b88      	ldr	r3, [pc, #544]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005aa8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d117      	bne.n	8005ae0 <HAL_TIM_PeriodElapsedCallback+0xf4>
				LED_6_1;
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2108      	movs	r1, #8
 8005ab4:	4885      	ldr	r0, [pc, #532]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005ab6:	f008 f927 	bl	800dd08 <HAL_GPIO_WritePin>
				nRF24_TX_Mode();
 8005aba:	f7fc fa6d 	bl	8001f98 <nRF24_TX_Mode>
				LED_6_0;
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2108      	movs	r1, #8
 8005ac2:	4882      	ldr	r0, [pc, #520]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005ac4:	f008 f920 	bl	800dd08 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 3
 8005ac8:	4b7f      	ldr	r3, [pc, #508]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005aca:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005ace:	3301      	adds	r3, #1
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	4b7d      	ldr	r3, [pc, #500]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005ad4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				NRF24.Timer_1 = 1;
 8005ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			}
			if(NRF24.Step == 3 && NRF24.Timer_1 == 0){
 8005ae0:	4b79      	ldr	r3, [pc, #484]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005ae2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d12d      	bne.n	8005b46 <HAL_TIM_PeriodElapsedCallback+0x15a>
 8005aea:	4b77      	ldr	r3, [pc, #476]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005aec:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d128      	bne.n	8005b46 <HAL_TIM_PeriodElapsedCallback+0x15a>
				NRF24.Status = NRF24_Ready;
 8005af4:	4b74      	ldr	r3, [pc, #464]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005af6:	2204      	movs	r2, #4
 8005af8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				NRF24.NRF24_MODE = NRF24_Tx_Mode;
 8005afc:	4b72      	ldr	r3, [pc, #456]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				NRF24.TxData[10] = (MYDRON.Status.Connection == DRON_DISCONNECTED) ? 1: 0;
 8005b04:	4b72      	ldr	r3, [pc, #456]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005b06:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	bf0c      	ite	eq
 8005b0e:	2301      	moveq	r3, #1
 8005b10:	2300      	movne	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b18:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

				LED_6_1;
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	2108      	movs	r1, #8
 8005b20:	486a      	ldr	r0, [pc, #424]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005b22:	f008 f8f1 	bl	800dd08 <HAL_GPIO_WritePin>
				nRF24_WriteTXPayload_IT(NRF24.TxData);
 8005b26:	486b      	ldr	r0, [pc, #428]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005b28:	f7fc fd0c 	bl	8002544 <nRF24_WriteTXPayload_IT>
				LED_6_0;
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2108      	movs	r1, #8
 8005b30:	4866      	ldr	r0, [pc, #408]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005b32:	f008 f8e9 	bl	800dd08 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 4
 8005b36:	4b64      	ldr	r3, [pc, #400]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b38:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	4b61      	ldr	r3, [pc, #388]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b42:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 5){
 8005b46:	4b60      	ldr	r3, [pc, #384]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b48:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b4c:	2b05      	cmp	r3, #5
 8005b4e:	d10c      	bne.n	8005b6a <HAL_TIM_PeriodElapsedCallback+0x17e>
				NRF24_CE_LOW;
 8005b50:	2200      	movs	r2, #0
 8005b52:	2140      	movs	r1, #64	@ 0x40
 8005b54:	4860      	ldr	r0, [pc, #384]	@ (8005cd8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005b56:	f008 f8d7 	bl	800dd08 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 6
 8005b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b5c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b60:	3301      	adds	r3, #1
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	4b58      	ldr	r3, [pc, #352]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 6){
 8005b6a:	4b57      	ldr	r3, [pc, #348]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b6c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d127      	bne.n	8005bc4 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				LED_6_1;
 8005b74:	2201      	movs	r2, #1
 8005b76:	2108      	movs	r1, #8
 8005b78:	4854      	ldr	r0, [pc, #336]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005b7a:	f008 f8c5 	bl	800dd08 <HAL_GPIO_WritePin>
				uint8_t status = nRF24_ReadStatus();
 8005b7e:	f7fc fa96 	bl	80020ae <nRF24_ReadStatus>
 8005b82:	4603      	mov	r3, r0
 8005b84:	72fb      	strb	r3, [r7, #11]
				if(((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS)))){//nRF24_WaitTX()
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PeriodElapsedCallback+0x1ae>
 8005b90:	7afb      	ldrb	r3, [r7, #11]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00f      	beq.n	8005bba <HAL_TIM_PeriodElapsedCallback+0x1ce>
					NRF24.Timer_2 = 1;
 8005b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
					NRF24.Status = NRF24_Ready;
 8005ba2:	4b49      	ldr	r3, [pc, #292]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
					NRF24.Step++;//Step 7
 8005baa:	4b47      	ldr	r3, [pc, #284]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005bac:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4b44      	ldr	r3, [pc, #272]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005bb6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				}
				LED_6_0;
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2108      	movs	r1, #8
 8005bbe:	4843      	ldr	r0, [pc, #268]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005bc0:	f008 f8a2 	bl	800dd08 <HAL_GPIO_WritePin>
			}
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 7 && NRF24.Status == NRF24_Ready){
 8005bc4:	4b40      	ldr	r3, [pc, #256]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005bc6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d121      	bne.n	8005c12 <HAL_TIM_PeriodElapsedCallback+0x226>
 8005bce:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005bd0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005bd4:	2b07      	cmp	r3, #7
 8005bd6:	d11c      	bne.n	8005c12 <HAL_TIM_PeriodElapsedCallback+0x226>
 8005bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005bda:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d117      	bne.n	8005c12 <HAL_TIM_PeriodElapsedCallback+0x226>
			LED_6_1;
 8005be2:	2201      	movs	r2, #1
 8005be4:	2108      	movs	r1, #8
 8005be6:	4839      	ldr	r0, [pc, #228]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005be8:	f008 f88e 	bl	800dd08 <HAL_GPIO_WritePin>
			nRF24_RX_Mode();
 8005bec:	f7fc f99e 	bl	8001f2c <nRF24_RX_Mode>
			LED_6_0;
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2108      	movs	r1, #8
 8005bf4:	4835      	ldr	r0, [pc, #212]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005bf6:	f008 f887 	bl	800dd08 <HAL_GPIO_WritePin>
			NRF24.Timer_2 = 1;
 8005bfa:	4b33      	ldr	r3, [pc, #204]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			NRF24.Step++;//Step 8
 8005c02:	4b31      	ldr	r3, [pc, #196]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005c04:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005c08:	3301      	adds	r3, #1
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005c0e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 8){
 8005c12:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005c14:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <HAL_TIM_PeriodElapsedCallback+0x252>
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005c1e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d10b      	bne.n	8005c3e <HAL_TIM_PeriodElapsedCallback+0x252>
			NRF24.Status = NRF24_Ready;
 8005c26:	4b28      	ldr	r3, [pc, #160]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005c28:	2204      	movs	r2, #4
 8005c2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			NRF24.NRF24_MODE = NRF24_Rx_Mode;
 8005c2e:	4b26      	ldr	r3, [pc, #152]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24.Step = 0;
 8005c36:	4b24      	ldr	r3, [pc, #144]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}


		if(i == 0){// na calosc 100ms
 8005c3e:	4b27      	ldr	r3, [pc, #156]	@ (8005cdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_TIM_PeriodElapsedCallback+0x268>
			RGB_LED_For_BAT(MYDRON.batterysize);
 8005c46:	4b22      	ldr	r3, [pc, #136]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005c48:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 f9ca 	bl	8006fe8 <RGB_LED_For_BAT>
		}
		if(i == 36){
 8005c54:	4b21      	ldr	r3, [pc, #132]	@ (8005cdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b24      	cmp	r3, #36	@ 0x24
 8005c5a:	d10d      	bne.n	8005c78 <HAL_TIM_PeriodElapsedCallback+0x28c>
			LED_5_1;
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c62:	481f      	ldr	r0, [pc, #124]	@ (8005ce0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005c64:	f008 f850 	bl	800dd08 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005c68:	f7fb fa1a 	bl	80010a0 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c72:	481b      	ldr	r0, [pc, #108]	@ (8005ce0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005c74:	f008 f848 	bl	800dd08 <HAL_GPIO_WritePin>
		}

		if(i == 40){//5
 8005c78:	4b18      	ldr	r3, [pc, #96]	@ (8005cdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b28      	cmp	r3, #40	@ 0x28
 8005c7e:	d145      	bne.n	8005d0c <HAL_TIM_PeriodElapsedCallback+0x320>
			Get_batteryvalue();
 8005c80:	f7fe f802 	bl	8003c88 <Get_batteryvalue>
			convert_value_to_array(MYDRON.dronheight, NRF24.TxData, 0, 3);
 8005c84:	4b12      	ldr	r3, [pc, #72]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005c86:	f9b3 018a 	ldrsh.w	r0, [r3, #394]	@ 0x18a
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4911      	ldr	r1, [pc, #68]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005c90:	f001 f8cd 	bl	8006e2e <convert_value_to_array>
			convert_value_to_array(MYDRON.batterysize, NRF24.TxData, 3, 6);
 8005c94:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005c96:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8005c9a:	b218      	sxth	r0, r3
 8005c9c:	2306      	movs	r3, #6
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	490c      	ldr	r1, [pc, #48]	@ (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005ca2:	f001 f8c4 	bl	8006e2e <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e02c      	b.n	8005d06 <HAL_TIM_PeriodElapsedCallback+0x31a>
 8005cac:	240004fc 	.word	0x240004fc
 8005cb0:	0000006c 	.word	0x0000006c
 8005cb4:	240004b0 	.word	0x240004b0
 8005cb8:	240003cc 	.word	0x240003cc
 8005cbc:	000041ec 	.word	0x000041ec
 8005cc0:	000041f0 	.word	0x000041f0
 8005cc4:	000041f8 	.word	0x000041f8
 8005cc8:	000000d0 	.word	0x000000d0
 8005ccc:	58021000 	.word	0x58021000
 8005cd0:	00000160 	.word	0x00000160
 8005cd4:	000000f0 	.word	0x000000f0
 8005cd8:	58020400 	.word	0x58020400
 8005cdc:	000041fc 	.word	0x000041fc
 8005ce0:	58020000 	.word	0x58020000
				NRF24.TxData[22+i] = NRF24.Txcode[22+i];
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f103 0216 	add.w	r2, r3, #22
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3316      	adds	r3, #22
 8005cee:	493d      	ldr	r1, [pc, #244]	@ (8005de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f892 1060 	ldrb.w	r1, [r2, #96]	@ 0x60
 8005cf6:	4a3b      	ldr	r2, [pc, #236]	@ (8005de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	f883 2020 	strb.w	r2, [r3, #32]
			for(int i = 0; i < 10; i++){
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b09      	cmp	r3, #9
 8005d0a:	ddeb      	ble.n	8005ce4 <HAL_TIM_PeriodElapsedCallback+0x2f8>
			}
		}


		LED_5_1;
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d12:	4835      	ldr	r0, [pc, #212]	@ (8005de8 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8005d14:	f007 fff8 	bl	800dd08 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005d18:	f7fb fcb0 	bl	800167c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d22:	4831      	ldr	r0, [pc, #196]	@ (8005de8 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8005d24:	f007 fff0 	bl	800dd08 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 8005d28:	4b30      	ldr	r3, [pc, #192]	@ (8005dec <HAL_TIM_PeriodElapsedCallback+0x400>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b64      	cmp	r3, #100	@ 0x64
 8005d2e:	d003      	beq.n	8005d38 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8005d30:	4b2e      	ldr	r3, [pc, #184]	@ (8005dec <HAL_TIM_PeriodElapsedCallback+0x400>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	e000      	b.n	8005d3a <HAL_TIM_PeriodElapsedCallback+0x34e>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dec <HAL_TIM_PeriodElapsedCallback+0x400>)
 8005d3c:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 8005d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005df0 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d46:	d309      	bcc.n	8005d5c <HAL_TIM_PeriodElapsedCallback+0x370>
			LED_R_1;
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d4e:	4829      	ldr	r0, [pc, #164]	@ (8005df4 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8005d50:	f007 ffda 	bl	800dd08 <HAL_GPIO_WritePin>
			MYDRON.Status.Connection = DRON_DISCONNECTED;
 8005d54:	4b28      	ldr	r3, [pc, #160]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
		}
		if(MYDRON.Status.Connection == DRON_DISCONNECTED){
 8005d5c:	4b26      	ldr	r3, [pc, #152]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8005d5e:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d112      	bne.n	8005d8c <HAL_TIM_PeriodElapsedCallback+0x3a0>
			MYDRON.Rool.Wanted = 0;
 8005d66:	4b24      	ldr	r3, [pc, #144]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	649a      	str	r2, [r3, #72]	@ 0x48
			MYDRON.Pitch.Wanted = 0;
 8005d6e:	4b22      	ldr	r3, [pc, #136]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
			MYDRON.Yaw.Wanted = 0;
 8005d76:	4b20      	ldr	r3, [pc, #128]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			MYDRON.Thrust.Wanted = DRON_SLOWFALING;
 8005d80:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005d84:	b21a      	sxth	r2, r3
 8005d86:	4b1c      	ldr	r3, [pc, #112]	@ (8005df8 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8005d88:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		}
		NRF24.Timer_1 != 0 ? NRF24.Timer_1--: 0;
 8005d8c:	4b15      	ldr	r3, [pc, #84]	@ (8005de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005d8e:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <HAL_TIM_PeriodElapsedCallback+0x3ba>
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005d98:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005da2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		NRF24.Timer_2 != 0 ? NRF24.Timer_2--: 0;
 8005da6:	4b0f      	ldr	r3, [pc, #60]	@ (8005de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005da8:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8005db0:	4b0c      	ldr	r3, [pc, #48]	@ (8005de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005db2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8005dbc:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
		BMP180.Timer != 0 ? BMP180.Timer--: 0;
 8005dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8005dfc <HAL_TIM_PeriodElapsedCallback+0x410>)
 8005dc2:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <HAL_TIM_PeriodElapsedCallback+0x3ee>
 8005dca:	4b0c      	ldr	r3, [pc, #48]	@ (8005dfc <HAL_TIM_PeriodElapsedCallback+0x410>)
 8005dcc:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <HAL_TIM_PeriodElapsedCallback+0x410>)
 8005dd6:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	}
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	000000d0 	.word	0x000000d0
 8005de8:	58020000 	.word	0x58020000
 8005dec:	000041fc 	.word	0x000041fc
 8005df0:	000041f8 	.word	0x000041f8
 8005df4:	58020400 	.word	0x58020400
 8005df8:	00000160 	.word	0x00000160
 8005dfc:	0000006c 	.word	0x0000006c

08005e00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e10:	d11b      	bne.n	8005e4a <HAL_GPIO_EXTI_Callback+0x4a>
	{
		NRF24_inte = 1;
 8005e12:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <HAL_GPIO_EXTI_Callback+0x54>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
		if(STARTUP == 0){
 8005e18:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <HAL_GPIO_EXTI_Callback+0x58>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d114      	bne.n	8005e4a <HAL_GPIO_EXTI_Callback+0x4a>
			LED_6_1;
 8005e20:	2201      	movs	r2, #1
 8005e22:	2108      	movs	r1, #8
 8005e24:	480d      	ldr	r0, [pc, #52]	@ (8005e5c <HAL_GPIO_EXTI_Callback+0x5c>)
 8005e26:	f007 ff6f 	bl	800dd08 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod_IT(NRF24.RxData);
 8005e2a:	480d      	ldr	r0, [pc, #52]	@ (8005e60 <HAL_GPIO_EXTI_Callback+0x60>)
 8005e2c:	f7fc fbe2 	bl	80025f4 <nRF24_ReadRXPaylaod_IT>
			NRF24.Step++;//step 1
 8005e30:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <HAL_GPIO_EXTI_Callback+0x60>)
 8005e32:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005e36:	3301      	adds	r3, #1
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4b09      	ldr	r3, [pc, #36]	@ (8005e60 <HAL_GPIO_EXTI_Callback+0x60>)
 8005e3c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			LED_6_0;
 8005e40:	2200      	movs	r2, #0
 8005e42:	2108      	movs	r1, #8
 8005e44:	4805      	ldr	r0, [pc, #20]	@ (8005e5c <HAL_GPIO_EXTI_Callback+0x5c>)
 8005e46:	f007 ff5f 	bl	800dd08 <HAL_GPIO_WritePin>
		}
	}
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	00004205 	.word	0x00004205
 8005e58:	000041f4 	.word	0x000041f4
 8005e5c:	58021000 	.word	0x58021000
 8005e60:	000000d0 	.word	0x000000d0

08005e64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	USART.words[USART.command_ch_num] = USART.Received;
 8005e6c:	4b25      	ldr	r3, [pc, #148]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005e6e:	7edb      	ldrb	r3, [r3, #27]
 8005e70:	4619      	mov	r1, r3
 8005e72:	4b24      	ldr	r3, [pc, #144]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005e74:	7e9a      	ldrb	r2, [r3, #26]
 8005e76:	4b23      	ldr	r3, [pc, #140]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005e78:	440b      	add	r3, r1
 8005e7a:	741a      	strb	r2, [r3, #16]

	if(USART.words[USART.command_ch_num] == '\r')
 8005e7c:	4b21      	ldr	r3, [pc, #132]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005e7e:	7edb      	ldrb	r3, [r3, #27]
 8005e80:	461a      	mov	r2, r3
 8005e82:	4b20      	ldr	r3, [pc, #128]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005e84:	4413      	add	r3, r2
 8005e86:	7c1b      	ldrb	r3, [r3, #16]
 8005e88:	2b0d      	cmp	r3, #13
 8005e8a:	d11b      	bne.n	8005ec4 <HAL_UART_RxCpltCallback+0x60>
	{
		char Y = '\n';
 8005e8c:	230a      	movs	r3, #10
 8005e8e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8005e90:	f107 010f 	add.w	r1, r7, #15
 8005e94:	2364      	movs	r3, #100	@ 0x64
 8005e96:	2201      	movs	r2, #1
 8005e98:	481b      	ldr	r0, [pc, #108]	@ (8005f08 <HAL_UART_RxCpltCallback+0xa4>)
 8005e9a:	f011 fe27 	bl	8017aec <HAL_UART_Transmit>
		Y = '\r';
 8005e9e:	230d      	movs	r3, #13
 8005ea0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8005ea2:	f107 010f 	add.w	r1, r7, #15
 8005ea6:	2364      	movs	r3, #100	@ 0x64
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4817      	ldr	r0, [pc, #92]	@ (8005f08 <HAL_UART_RxCpltCallback+0xa4>)
 8005eac:	f011 fe1e 	bl	8017aec <HAL_UART_Transmit>
		USART.words[USART.command_ch_num] = 0;
 8005eb0:	4b14      	ldr	r3, [pc, #80]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005eb2:	7edb      	ldrb	r3, [r3, #27]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4b13      	ldr	r3, [pc, #76]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	741a      	strb	r2, [r3, #16]
		USART.commandready = 1;
 8005ebe:	4b11      	ldr	r3, [pc, #68]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	73da      	strb	r2, [r3, #15]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&USART.words[USART.command_ch_num], 1);
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005ec6:	7edb      	ldrb	r3, [r3, #27]
 8005ec8:	3310      	adds	r3, #16
 8005eca:	4a0e      	ldr	r2, [pc, #56]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005ecc:	4413      	add	r3, r2
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	480d      	ldr	r0, [pc, #52]	@ (8005f08 <HAL_UART_RxCpltCallback+0xa4>)
 8005ed4:	f011 fe98 	bl	8017c08 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &USART.Received, 1);
 8005ed8:	2201      	movs	r2, #1
 8005eda:	490c      	ldr	r1, [pc, #48]	@ (8005f0c <HAL_UART_RxCpltCallback+0xa8>)
 8005edc:	480a      	ldr	r0, [pc, #40]	@ (8005f08 <HAL_UART_RxCpltCallback+0xa4>)
 8005ede:	f011 ff27 	bl	8017d30 <HAL_UART_Receive_IT>
	USART.command_ch_num++;
 8005ee2:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005ee4:	7edb      	ldrb	r3, [r3, #27]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005eec:	76da      	strb	r2, [r3, #27]

	if(USART.commandready == 1)
 8005eee:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005ef0:	7bdb      	ldrb	r3, [r3, #15]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d102      	bne.n	8005efc <HAL_UART_RxCpltCallback+0x98>
	{
		USART.command_ch_num = 0;
 8005ef6:	4b03      	ldr	r3, [pc, #12]	@ (8005f04 <HAL_UART_RxCpltCallback+0xa0>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	76da      	strb	r2, [r3, #27]
	}
}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	000041cc 	.word	0x000041cc
 8005f08:	24000548 	.word	0x24000548
 8005f0c:	000041e6 	.word	0x000041e6

08005f10 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	if(BMP180.Step == 1){
 8005f18:	4b11      	ldr	r3, [pc, #68]	@ (8005f60 <HAL_I2C_MemTxCpltCallback+0x50>)
 8005f1a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10a      	bne.n	8005f38 <HAL_I2C_MemTxCpltCallback+0x28>
		HAL_TIM_Base_Start_IT(&htim23);
 8005f22:	4810      	ldr	r0, [pc, #64]	@ (8005f64 <HAL_I2C_MemTxCpltCallback+0x54>)
 8005f24:	f00f ffa8 	bl	8015e78 <HAL_TIM_Base_Start_IT>
		BMP180.Step++;//Step 2
 8005f28:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <HAL_I2C_MemTxCpltCallback+0x50>)
 8005f2a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005f2e:	3301      	adds	r3, #1
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	4b0b      	ldr	r3, [pc, #44]	@ (8005f60 <HAL_I2C_MemTxCpltCallback+0x50>)
 8005f34:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	}
	if(BMP180.Step == 4){
 8005f38:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <HAL_I2C_MemTxCpltCallback+0x50>)
 8005f3a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d10a      	bne.n	8005f58 <HAL_I2C_MemTxCpltCallback+0x48>
		HAL_TIM_Base_Start_IT(&htim23);
 8005f42:	4808      	ldr	r0, [pc, #32]	@ (8005f64 <HAL_I2C_MemTxCpltCallback+0x54>)
 8005f44:	f00f ff98 	bl	8015e78 <HAL_TIM_Base_Start_IT>
		BMP180.Step++;//Step 5
 8005f48:	4b05      	ldr	r3, [pc, #20]	@ (8005f60 <HAL_I2C_MemTxCpltCallback+0x50>)
 8005f4a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005f4e:	3301      	adds	r3, #1
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	4b03      	ldr	r3, [pc, #12]	@ (8005f60 <HAL_I2C_MemTxCpltCallback+0x50>)
 8005f54:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	}
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	0000006c 	.word	0x0000006c
 8005f64:	240004b0 	.word	0x240004b0

08005f68 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005f68:	b590      	push	{r4, r7, lr}
 8005f6a:	b0e3      	sub	sp, #396	@ 0x18c
 8005f6c:	af60      	add	r7, sp, #384	@ 0x180
 8005f6e:	6078      	str	r0, [r7, #4]
	if(MPU6050.MPU6050_IRQ == 1){
 8005f70:	4bc5      	ldr	r3, [pc, #788]	@ (8006288 <HAL_I2C_MemRxCpltCallback+0x320>)
 8005f72:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	f040 84a7 	bne.w	80068ca <HAL_I2C_MemRxCpltCallback+0x962>
			MPU6050.MPU6050_IRQ = 0;
 8005f7c:	4bc2      	ldr	r3, [pc, #776]	@ (8006288 <HAL_I2C_MemRxCpltCallback+0x320>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

			LED_G_1;
 8005f84:	2201      	movs	r2, #1
 8005f86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f8a:	48c0      	ldr	r0, [pc, #768]	@ (800628c <HAL_I2C_MemRxCpltCallback+0x324>)
 8005f8c:	f007 febc 	bl	800dd08 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT();
 8005f90:	f7fb fb90 	bl	80016b4 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE();
 8005f94:	f7fb fae8 	bl	8001568 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, HMC5883L.Directions.Z);
 8005f98:	4bbd      	ldr	r3, [pc, #756]	@ (8006290 <HAL_I2C_MemRxCpltCallback+0x328>)
 8005f9a:	edd3 7a00 	vldr	s15, [r3]
 8005f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005fa2:	48bc      	ldr	r0, [pc, #752]	@ (8006294 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8005fa4:	f7fb fc32 	bl	800180c <MPU6050_GET_ACCANDGYR_FILTRED>



			MYDRON.Pitch.Now = data.x;
 8005fa8:	4bba      	ldr	r3, [pc, #744]	@ (8006294 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4aba      	ldr	r2, [pc, #744]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8005fae:	6113      	str	r3, [r2, #16]
			MYDRON.Rool.Now = data.y;
 8005fb0:	4bb8      	ldr	r3, [pc, #736]	@ (8006294 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4ab8      	ldr	r2, [pc, #736]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8005fb6:	6513      	str	r3, [r2, #80]	@ 0x50
			MYDRON.Yaw.Now = data.z;
 8005fb8:	4bb6      	ldr	r3, [pc, #728]	@ (8006294 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4ab6      	ldr	r2, [pc, #728]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8005fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90


			MYDRON.Rool.Wanted = (float)MYDRON.Rool.Wanted_rx/10;
 8005fc2:	4bb5      	ldr	r3, [pc, #724]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8005fc4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fd0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8005fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fd8:	4baf      	ldr	r3, [pc, #700]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8005fda:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
			MYDRON.Pitch.Wanted = (float)MYDRON.Pitch.Wanted_rx/10;
 8005fde:	4bae      	ldr	r3, [pc, #696]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8005fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8005ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ff4:	4ba8      	ldr	r3, [pc, #672]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8005ff6:	edc3 7a02 	vstr	s15, [r3, #8]
			MYDRON.Yaw.Wanted = 0;//(float)MYDRON.Yaw.Wanted_rx/10;
 8005ffa:	4ba7      	ldr	r3, [pc, #668]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
				  			/*
				  				 * FDP
				  				 */
			MYDRON.Rool.Wanted = (MYDRON.Rool.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Rool.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006004:	4ba4      	ldr	r3, [pc, #656]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006006:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800600a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 800600e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006012:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006016:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 800601a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800601e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006022:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602a:	4b9b      	ldr	r3, [pc, #620]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800602c:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8006030:	eddf 7a9a 	vldr	s15, [pc, #616]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 8006034:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006038:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800603c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8006040:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006044:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8006048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800604c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006050:	4b91      	ldr	r3, [pc, #580]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006052:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
			MYDRON.Pitch.Wanted = (MYDRON.Pitch.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Pitch.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006056:	4b90      	ldr	r3, [pc, #576]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006058:	ed93 7a02 	vldr	s14, [r3, #8]
 800605c:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 8006060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006064:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006068:	eddf 7a8c 	vldr	s15, [pc, #560]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 800606c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607c:	4b86      	ldr	r3, [pc, #536]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800607e:	edd3 6a01 	vldr	s13, [r3, #4]
 8006082:	eddf 7a86 	vldr	s15, [pc, #536]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 8006086:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800608a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800608e:	ee37 6a86 	vadd.f32	s12, s15, s12
 8006092:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006096:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800609a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800609e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80060a4:	edc3 7a02 	vstr	s15, [r3, #8]
			MYDRON.Yaw.Wanted = (MYDRON.Yaw.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Yaw.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 80060a8:	4b7b      	ldr	r3, [pc, #492]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80060aa:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 80060ae:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 80060b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80060ba:	eddf 7a78 	vldr	s15, [pc, #480]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 80060be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ce:	4b72      	ldr	r3, [pc, #456]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80060d0:	edd3 6a21 	vldr	s13, [r3, #132]	@ 0x84
 80060d4:	eddf 7a71 	vldr	s15, [pc, #452]	@ 800629c <HAL_I2C_MemRxCpltCallback+0x334>
 80060d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060dc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80060e0:	ee37 6a86 	vadd.f32	s12, s15, s12
 80060e4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80060e8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80060ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f4:	4b68      	ldr	r3, [pc, #416]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80060f6:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88


			MYDRON.Rool.Last_Wanted_rx = MYDRON.Rool.Wanted;
 80060fa:	4b67      	ldr	r3, [pc, #412]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fe:	4a66      	ldr	r2, [pc, #408]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006100:	6453      	str	r3, [r2, #68]	@ 0x44
			MYDRON.Pitch.Last_Wanted_rx = MYDRON.Pitch.Wanted;
 8006102:	4b65      	ldr	r3, [pc, #404]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	4a64      	ldr	r2, [pc, #400]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006108:	6053      	str	r3, [r2, #4]
			MYDRON.Yaw.Last_Wanted_rx= MYDRON.Yaw.Wanted;
 800610a:	4b63      	ldr	r3, [pc, #396]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006110:	4a61      	ldr	r2, [pc, #388]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006112:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84


			MYDRON.Pitch.Angle_Error = MYDRON.Pitch.Wanted - MYDRON.Pitch.Now;
 8006116:	4b60      	ldr	r3, [pc, #384]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006118:	ed93 7a02 	vldr	s14, [r3, #8]
 800611c:	4b5e      	ldr	r3, [pc, #376]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800611e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006126:	4b5c      	ldr	r3, [pc, #368]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006128:	edc3 7a05 	vstr	s15, [r3, #20]
			MYDRON.Rool.Angle_Error = MYDRON.Rool.Wanted - MYDRON.Rool.Now;
 800612c:	4b5a      	ldr	r3, [pc, #360]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800612e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8006132:	4b59      	ldr	r3, [pc, #356]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006134:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8006138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800613c:	4b56      	ldr	r3, [pc, #344]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800613e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		  	MYDRON.Yaw.Angle_Error = MYDRON.Yaw.Wanted - MYDRON.Yaw.Now;
 8006142:	4b55      	ldr	r3, [pc, #340]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006144:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 8006148:	4b53      	ldr	r3, [pc, #332]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800614a:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800614e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006152:	4b51      	ldr	r3, [pc, #324]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006154:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		  	MYDRON.Pitch.Angular_Rate_Error = MYDRON.PID_Pitch.Angle_Value- MPU6050.Gyr.gx;
 8006158:	4b4f      	ldr	r3, [pc, #316]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800615a:	ed93 7a3a 	vldr	s14, [r3, #232]	@ 0xe8
 800615e:	4b4a      	ldr	r3, [pc, #296]	@ (8006288 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006160:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8006164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006168:	4b4b      	ldr	r3, [pc, #300]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800616a:	edc3 7a06 	vstr	s15, [r3, #24]
		  	MYDRON.Rool.Angular_Rate_Error = MYDRON.PID_Rool.Angle_Value- MPU6050.Gyr.gy;
 800616e:	4b4a      	ldr	r3, [pc, #296]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006170:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 8006174:	4b44      	ldr	r3, [pc, #272]	@ (8006288 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006176:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800617a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800617e:	4b46      	ldr	r3, [pc, #280]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006180:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		  	MYDRON.Yaw.Angular_Rate_Error = MYDRON.PID_Yaw.Angle_Value- MPU6050.Gyr.gz;
 8006184:	4b44      	ldr	r3, [pc, #272]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006186:	ed93 7a54 	vldr	s14, [r3, #336]	@ 0x150
 800618a:	4b3f      	ldr	r3, [pc, #252]	@ (8006288 <HAL_I2C_MemRxCpltCallback+0x320>)
 800618c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006194:	4b40      	ldr	r3, [pc, #256]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006196:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98


			MYDRON.Pitch.Angle_Error_Sum = (MYDRON.PID_Pitch.Status != 0) ? MYDRON.Pitch.Angle_Error_Sum : MYDRON.Pitch.Angle_Error_Sum + (MYDRON.Pitch.Angle_Error);//pitch_error -> pitch_error
 800619a:	4b3f      	ldr	r3, [pc, #252]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800619c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_I2C_MemRxCpltCallback+0x244>
 80061a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061a6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80061aa:	e009      	b.n	80061c0 <HAL_I2C_MemRxCpltCallback+0x258>
 80061ac:	4b3a      	ldr	r3, [pc, #232]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061ae:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80061b2:	4b39      	ldr	r3, [pc, #228]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80061b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80061bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061c0:	4b35      	ldr	r3, [pc, #212]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061c2:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
			MYDRON.Rool.Angle_Error_Sum = (MYDRON.PID_Rool.Status != 0) ? MYDRON.Rool.Angle_Error_Sum : MYDRON.Rool.Angle_Error_Sum + (MYDRON.Rool.Angle_Error);//rool_error
 80061c6:	4b34      	ldr	r3, [pc, #208]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061c8:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_I2C_MemRxCpltCallback+0x270>
 80061d0:	4b31      	ldr	r3, [pc, #196]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061d2:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 80061d6:	e009      	b.n	80061ec <HAL_I2C_MemRxCpltCallback+0x284>
 80061d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061da:	ed93 6b1a 	vldr	d6, [r3, #104]	@ 0x68
 80061de:	4b2e      	ldr	r3, [pc, #184]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061e0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80061e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80061e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061ee:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			MYDRON.Yaw.Angle_Error_Sum = (MYDRON.PID_Yaw.Status != 0) ? MYDRON.Yaw.Angle_Error_Sum : MYDRON.Yaw.Angle_Error_Sum + (MYDRON.Yaw.Angle_Error);//yaw_error
 80061f2:	4b29      	ldr	r3, [pc, #164]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061f4:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_I2C_MemRxCpltCallback+0x29c>
 80061fc:	4b26      	ldr	r3, [pc, #152]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 80061fe:	ed93 7b2a 	vldr	d7, [r3, #168]	@ 0xa8
 8006202:	e009      	b.n	8006218 <HAL_I2C_MemRxCpltCallback+0x2b0>
 8006204:	4b24      	ldr	r3, [pc, #144]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006206:	ed93 6b2a 	vldr	d6, [r3, #168]	@ 0xa8
 800620a:	4b23      	ldr	r3, [pc, #140]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800620c:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8006210:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006214:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006218:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800621a:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8

			MYDRON.Pitch.Angular_Rate_Error_Sum = (MYDRON.PID_Pitch.Status != 0) ? MYDRON.Pitch.Angular_Rate_Error_Sum : MYDRON.Pitch.Angular_Rate_Error_Sum + (MYDRON.Pitch.Angular_Rate_Error);//pitch_ar_error
 800621e:	4b1e      	ldr	r3, [pc, #120]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006220:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_I2C_MemRxCpltCallback+0x2c8>
 8006228:	4b1b      	ldr	r3, [pc, #108]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800622a:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800622e:	e009      	b.n	8006244 <HAL_I2C_MemRxCpltCallback+0x2dc>
 8006230:	4b19      	ldr	r3, [pc, #100]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006232:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8006236:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006238:	edd3 7a06 	vldr	s15, [r3, #24]
 800623c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006240:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006244:	4b14      	ldr	r3, [pc, #80]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006246:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			MYDRON.Rool.Angular_Rate_Error_Sum = (MYDRON.PID_Rool.Status != 0) ? MYDRON.Rool.Angular_Rate_Error_Sum : MYDRON.Rool.Angular_Rate_Error_Sum + (MYDRON.Rool.Angular_Rate_Error);
 800624a:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800624c:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_I2C_MemRxCpltCallback+0x2f4>
 8006254:	4b10      	ldr	r3, [pc, #64]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006256:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800625a:	e009      	b.n	8006270 <HAL_I2C_MemRxCpltCallback+0x308>
 800625c:	4b0e      	ldr	r3, [pc, #56]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 800625e:	ed93 6b1c 	vldr	d6, [r3, #112]	@ 0x70
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006264:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8006268:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800626c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006270:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006272:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			MYDRON.Yaw.Angular_Rate_Error_Sum = (MYDRON.PID_Yaw.Status != 0) ? MYDRON.Yaw.Angular_Rate_Error_Sum : MYDRON.Yaw.Angular_Rate_Error_Sum + (MYDRON.Yaw.Angular_Rate_Error);
 8006276:	4b08      	ldr	r3, [pc, #32]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006278:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00f      	beq.n	80062a0 <HAL_I2C_MemRxCpltCallback+0x338>
 8006280:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006282:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 8006286:	e015      	b.n	80062b4 <HAL_I2C_MemRxCpltCallback+0x34c>
 8006288:	00000000 	.word	0x00000000
 800628c:	58021000 	.word	0x58021000
 8006290:	0000419c 	.word	0x0000419c
 8006294:	00000054 	.word	0x00000054
 8006298:	00000160 	.word	0x00000160
 800629c:	3a83126f 	.word	0x3a83126f
 80062a0:	4bab      	ldr	r3, [pc, #684]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062a2:	ed93 6b2c 	vldr	d6, [r3, #176]	@ 0xb0
 80062a6:	4baa      	ldr	r3, [pc, #680]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062a8:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 80062ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80062b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80062b4:	4ba6      	ldr	r3, [pc, #664]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062b6:	ed83 7b2c 	vstr	d7, [r3, #176]	@ 0xb0


			PID_call(MYDRON);
 80062ba:	4ca5      	ldr	r4, [pc, #660]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062bc:	4668      	mov	r0, sp
 80062be:	f104 0310 	add.w	r3, r4, #16
 80062c2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80062c6:	4619      	mov	r1, r3
 80062c8:	f017 fd2a 	bl	801dd20 <memcpy>
 80062cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80062d0:	f7fd fbc8 	bl	8003a64 <PID_call>


			MYDRON.Pitch.Old_Angle_Error = MYDRON.Pitch.Angle_Error;
 80062d4:	4b9e      	ldr	r3, [pc, #632]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	4a9d      	ldr	r2, [pc, #628]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062da:	61d3      	str	r3, [r2, #28]
			MYDRON.Rool.Old_Angle_Error = MYDRON.Rool.Angle_Error;
 80062dc:	4b9c      	ldr	r3, [pc, #624]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e0:	4a9b      	ldr	r2, [pc, #620]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062e2:	65d3      	str	r3, [r2, #92]	@ 0x5c
			MYDRON.Yaw.Old_Angle_Error = MYDRON.Yaw.Angle_Error;
 80062e4:	4b9a      	ldr	r3, [pc, #616]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ea:	4a99      	ldr	r2, [pc, #612]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062ec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

			MYDRON.Pitch.Old_Angle_Error = MYDRON.Pitch.Angular_Rate_Error;
 80062f0:	4b97      	ldr	r3, [pc, #604]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	4a96      	ldr	r2, [pc, #600]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062f6:	61d3      	str	r3, [r2, #28]
			MYDRON.Rool.Old_Angle_Error = MYDRON.Rool.Angular_Rate_Error;
 80062f8:	4b95      	ldr	r3, [pc, #596]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fc:	4a94      	ldr	r2, [pc, #592]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80062fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
			MYDRON.Yaw.Old_Angle_Error = MYDRON.Yaw.Angular_Rate_Error;
 8006300:	4b93      	ldr	r3, [pc, #588]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006306:	4a92      	ldr	r2, [pc, #584]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006308:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c


			MYDRON.Pitch.Value  	= (MYDRON.PID_Pitch.Angular_Rate_Value > 5000) ? PITCH_MAX_VAL(): (MYDRON.PID_Pitch.Angular_Rate_Value < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 800630c:	4b90      	ldr	r3, [pc, #576]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 800630e:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 8006312:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8006554 <HAL_I2C_MemRxCpltCallback+0x5ec>
 8006316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800631a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631e:	dd04      	ble.n	800632a <HAL_I2C_MemRxCpltCallback+0x3c2>
 8006320:	f001 fa40 	bl	80077a4 <PITCH_MAX_VAL>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	e012      	b.n	8006350 <HAL_I2C_MemRxCpltCallback+0x3e8>
 800632a:	4b89      	ldr	r3, [pc, #548]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 800632c:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 8006330:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8006558 <HAL_I2C_MemRxCpltCallback+0x5f0>
 8006334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633c:	d504      	bpl.n	8006348 <HAL_I2C_MemRxCpltCallback+0x3e0>
 800633e:	f001 fa41 	bl	80077c4 <PITCH_MIN_VAL>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	e003      	b.n	8006350 <HAL_I2C_MemRxCpltCallback+0x3e8>
 8006348:	f001 fa82 	bl	8007850 <PITCH_GOOD_VAL>
 800634c:	4603      	mov	r3, r0
 800634e:	461a      	mov	r2, r3
 8006350:	4b7f      	ldr	r3, [pc, #508]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006352:	871a      	strh	r2, [r3, #56]	@ 0x38
			MYDRON.Rool.Value 	    = (MYDRON.PID_Rool.Angular_Rate_Value > 5000) ? ROOL_MAX_VAL(): (MYDRON.PID_Rool.Angular_Rate_Value < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006354:	4b7e      	ldr	r3, [pc, #504]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006356:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 800635a:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8006554 <HAL_I2C_MemRxCpltCallback+0x5ec>
 800635e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006366:	dd04      	ble.n	8006372 <HAL_I2C_MemRxCpltCallback+0x40a>
 8006368:	f001 f9fc 	bl	8007764 <ROOL_MAX_VAL>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	e012      	b.n	8006398 <HAL_I2C_MemRxCpltCallback+0x430>
 8006372:	4b77      	ldr	r3, [pc, #476]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006374:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8006378:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8006558 <HAL_I2C_MemRxCpltCallback+0x5f0>
 800637c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d504      	bpl.n	8006390 <HAL_I2C_MemRxCpltCallback+0x428>
 8006386:	f001 f9fd 	bl	8007784 <ROOL_MIN_VAL>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	e003      	b.n	8006398 <HAL_I2C_MemRxCpltCallback+0x430>
 8006390:	f001 fa48 	bl	8007824 <ROOL_GOOD_VAL>
 8006394:	4603      	mov	r3, r0
 8006396:	461a      	mov	r2, r3
 8006398:	4b6d      	ldr	r3, [pc, #436]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 800639a:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
			MYDRON.Yaw.Value  		= (MYDRON.PID_Yaw.Angular_Rate_Value > 5000) ? YAW_MAX_VAL(): (MYDRON.PID_Yaw.Angular_Rate_Value < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 800639e:	4b6c      	ldr	r3, [pc, #432]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80063a0:	edd3 7a55 	vldr	s15, [r3, #340]	@ 0x154
 80063a4:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8006554 <HAL_I2C_MemRxCpltCallback+0x5ec>
 80063a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b0:	dd04      	ble.n	80063bc <HAL_I2C_MemRxCpltCallback+0x454>
 80063b2:	f001 fa17 	bl	80077e4 <YAW_MAX_VAL>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	e012      	b.n	80063e2 <HAL_I2C_MemRxCpltCallback+0x47a>
 80063bc:	4b64      	ldr	r3, [pc, #400]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80063be:	edd3 7a55 	vldr	s15, [r3, #340]	@ 0x154
 80063c2:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8006558 <HAL_I2C_MemRxCpltCallback+0x5f0>
 80063c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ce:	d504      	bpl.n	80063da <HAL_I2C_MemRxCpltCallback+0x472>
 80063d0:	f001 fa18 	bl	8007804 <YAW_MIN_VAL>
 80063d4:	4603      	mov	r3, r0
 80063d6:	461a      	mov	r2, r3
 80063d8:	e003      	b.n	80063e2 <HAL_I2C_MemRxCpltCallback+0x47a>
 80063da:	f001 fa4f 	bl	800787c <YAW_GOOD_VAL>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80063e4:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 80063e8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80063ec:	f7fd fa10 	bl	8003810 <Thrust_filter>
			if(MYDRON.Thrust.Now > MYDRON.Thrust.Thrust_Limit){
 80063f0:	4b57      	ldr	r3, [pc, #348]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80063f2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 80063f6:	461a      	mov	r2, r3
 80063f8:	4b55      	ldr	r3, [pc, #340]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80063fa:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 80063fe:	429a      	cmp	r2, r3
 8006400:	dd06      	ble.n	8006410 <HAL_I2C_MemRxCpltCallback+0x4a8>
				MYDRON.Thrust.Now = MYDRON.Thrust.Thrust_Limit;
 8006402:	4b53      	ldr	r3, [pc, #332]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006404:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 8006408:	b29a      	uxth	r2, r3
 800640a:	4b51      	ldr	r3, [pc, #324]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 800640c:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
			}


			Stack_Push(WartoscBezwgledna(MYDRON.PID_Pitch.Angle_Factors[4]));
 8006410:	4b4f      	ldr	r3, [pc, #316]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006412:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8006416:	eeb0 0a67 	vmov.f32	s0, s15
 800641a:	f000 fda7 	bl	8006f6c <WartoscBezwgledna>
 800641e:	eef0 7a40 	vmov.f32	s15, s0
 8006422:	eeb0 0a67 	vmov.f32	s0, s15
 8006426:	f001 f951 	bl	80076cc <Stack_Push>
			Stack_Push(WartoscBezwgledna(MYDRON.PID_Pitch.Angle_Factors[4]));
 800642a:	4b49      	ldr	r3, [pc, #292]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 800642c:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8006430:	eeb0 0a67 	vmov.f32	s0, s15
 8006434:	f000 fd9a 	bl	8006f6c <WartoscBezwgledna>
 8006438:	eef0 7a40 	vmov.f32	s15, s0
 800643c:	eeb0 0a67 	vmov.f32	s0, s15
 8006440:	f001 f944 	bl	80076cc <Stack_Push>
			Stack_Push(MYDRON.Pitch.Now);
 8006444:	4b42      	ldr	r3, [pc, #264]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006446:	edd3 7a04 	vldr	s15, [r3, #16]
 800644a:	eeb0 0a67 	vmov.f32	s0, s15
 800644e:	f001 f93d 	bl	80076cc <Stack_Push>
			Stack_Push(MYDRON.Rool.Now);
 8006452:	4b3f      	ldr	r3, [pc, #252]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006454:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8006458:	eeb0 0a67 	vmov.f32	s0, s15
 800645c:	f001 f936 	bl	80076cc <Stack_Push>


			MYDRON.Thrust.Speed_1 = (((uint32_t)((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value - MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value - MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500) : max_speed;//trust 7000 max
 8006460:	4b3b      	ldr	r3, [pc, #236]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006462:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800646e:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8006538 <HAL_I2C_MemRxCpltCallback+0x5d0>
 8006472:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006476:	4b36      	ldr	r3, [pc, #216]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006478:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006484:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006488:	4b31      	ldr	r3, [pc, #196]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 800648a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006496:	ee36 6b47 	vsub.f64	d6, d6, d7
 800649a:	4b2d      	ldr	r3, [pc, #180]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 800649c:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80064a0:	ee07 3a90 	vmov	s15, r3
 80064a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80064ac:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006540 <HAL_I2C_MemRxCpltCallback+0x5d8>
 80064b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064b4:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006548 <HAL_I2C_MemRxCpltCallback+0x5e0>
 80064b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80064c0:	ee17 2a90 	vmov	r2, s15
 80064c4:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d847      	bhi.n	800655c <HAL_I2C_MemRxCpltCallback+0x5f4>
 80064cc:	4b20      	ldr	r3, [pc, #128]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80064ce:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064da:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8006538 <HAL_I2C_MemRxCpltCallback+0x5d0>
 80064de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80064e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80064e4:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80064f4:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 80064f6:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006502:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006506:	4b12      	ldr	r3, [pc, #72]	@ (8006550 <HAL_I2C_MemRxCpltCallback+0x5e8>)
 8006508:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006514:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006518:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006540 <HAL_I2C_MemRxCpltCallback+0x5d8>
 800651c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006520:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006548 <HAL_I2C_MemRxCpltCallback+0x5e0>
 8006524:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006528:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800652c:	ee17 3a90 	vmov	r3, s15
 8006530:	b29b      	uxth	r3, r3
 8006532:	e015      	b.n	8006560 <HAL_I2C_MemRxCpltCallback+0x5f8>
 8006534:	f3af 8000 	nop.w
 8006538:	66666666 	.word	0x66666666
 800653c:	3fe66666 	.word	0x3fe66666
 8006540:	00000000 	.word	0x00000000
 8006544:	40c48200 	.word	0x40c48200
 8006548:	00000000 	.word	0x00000000
 800654c:	407f4000 	.word	0x407f4000
 8006550:	00000160 	.word	0x00000160
 8006554:	459c4000 	.word	0x459c4000
 8006558:	c59c4000 	.word	0xc59c4000
 800655c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006560:	4aab      	ldr	r2, [pc, #684]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 8006562:	f8a2 30d0 	strh.w	r3, [r2, #208]	@ 0xd0
			MYDRON.Thrust.Speed_2 = (((uint32_t)((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value - MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value - MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 8006566:	4baa      	ldr	r3, [pc, #680]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 8006568:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006574:	ed9f 6ba0 	vldr	d6, [pc, #640]	@ 80067f8 <HAL_I2C_MemRxCpltCallback+0x890>
 8006578:	ee27 6b06 	vmul.f64	d6, d7, d6
 800657c:	4ba4      	ldr	r3, [pc, #656]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 800657e:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800658a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800658e:	4ba0      	ldr	r3, [pc, #640]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 8006590:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800659c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80065a0:	4b9b      	ldr	r3, [pc, #620]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80065a2:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80065b2:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8006800 <HAL_I2C_MemRxCpltCallback+0x898>
 80065b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065ba:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8006808 <HAL_I2C_MemRxCpltCallback+0x8a0>
 80065be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065c6:	ee17 2a90 	vmov	r2, s15
 80065ca:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d833      	bhi.n	800663a <HAL_I2C_MemRxCpltCallback+0x6d2>
 80065d2:	4b8f      	ldr	r3, [pc, #572]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80065d4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 80065d8:	ee07 3a90 	vmov	s15, r3
 80065dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065e0:	ed9f 6b85 	vldr	d6, [pc, #532]	@ 80067f8 <HAL_I2C_MemRxCpltCallback+0x890>
 80065e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065e8:	4b89      	ldr	r3, [pc, #548]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80065ea:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80065fa:	4b85      	ldr	r3, [pc, #532]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80065fc:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006608:	ee36 6b47 	vsub.f64	d6, d6, d7
 800660c:	4b80      	ldr	r3, [pc, #512]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 800660e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800661a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800661e:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8006800 <HAL_I2C_MemRxCpltCallback+0x898>
 8006622:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006626:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8006808 <HAL_I2C_MemRxCpltCallback+0x8a0>
 800662a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800662e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006632:	ee17 3a90 	vmov	r3, s15
 8006636:	b29b      	uxth	r3, r3
 8006638:	e001      	b.n	800663e <HAL_I2C_MemRxCpltCallback+0x6d6>
 800663a:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 800663e:	4a74      	ldr	r2, [pc, #464]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 8006640:	f8a2 30d2 	strh.w	r3, [r2, #210]	@ 0xd2
			MYDRON.Thrust.Speed_3 = (((uint32_t)((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value + MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value + MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 8006644:	4b72      	ldr	r3, [pc, #456]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 8006646:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006652:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80067f8 <HAL_I2C_MemRxCpltCallback+0x890>
 8006656:	ee27 6b06 	vmul.f64	d6, d7, d6
 800665a:	4b6d      	ldr	r3, [pc, #436]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 800665c:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006668:	ee36 6b07 	vadd.f64	d6, d6, d7
 800666c:	4b68      	ldr	r3, [pc, #416]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 800666e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800667a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800667e:	4b64      	ldr	r3, [pc, #400]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 8006680:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800668c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006690:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8006800 <HAL_I2C_MemRxCpltCallback+0x898>
 8006694:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006698:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8006808 <HAL_I2C_MemRxCpltCallback+0x8a0>
 800669c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066a4:	ee17 2a90 	vmov	r2, s15
 80066a8:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d833      	bhi.n	8006718 <HAL_I2C_MemRxCpltCallback+0x7b0>
 80066b0:	4b57      	ldr	r3, [pc, #348]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80066b2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066be:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 80067f8 <HAL_I2C_MemRxCpltCallback+0x890>
 80066c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80066c6:	4b52      	ldr	r3, [pc, #328]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80066c8:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80066d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80066da:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80066ea:	4b49      	ldr	r3, [pc, #292]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80066ec:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80066fc:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 8006800 <HAL_I2C_MemRxCpltCallback+0x898>
 8006700:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006704:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 8006808 <HAL_I2C_MemRxCpltCallback+0x8a0>
 8006708:	ee37 7b06 	vadd.f64	d7, d7, d6
 800670c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006710:	ee17 3a90 	vmov	r3, s15
 8006714:	b29b      	uxth	r3, r3
 8006716:	e001      	b.n	800671c <HAL_I2C_MemRxCpltCallback+0x7b4>
 8006718:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 800671c:	4a3c      	ldr	r2, [pc, #240]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 800671e:	f8a2 30d4 	strh.w	r3, [r2, #212]	@ 0xd4
			MYDRON.Thrust.Speed_4 = (((uint32_t)((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value + MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value + MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 8006722:	4b3b      	ldr	r3, [pc, #236]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 8006724:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006730:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80067f8 <HAL_I2C_MemRxCpltCallback+0x890>
 8006734:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006738:	4b35      	ldr	r3, [pc, #212]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 800673a:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006746:	ee36 6b47 	vsub.f64	d6, d6, d7
 800674a:	4b31      	ldr	r3, [pc, #196]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 800674c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006758:	ee36 6b07 	vadd.f64	d6, d6, d7
 800675c:	4b2c      	ldr	r3, [pc, #176]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 800675e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800676a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800676e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006800 <HAL_I2C_MemRxCpltCallback+0x898>
 8006772:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006776:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006808 <HAL_I2C_MemRxCpltCallback+0x8a0>
 800677a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800677e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006782:	ee17 2a90 	vmov	r2, s15
 8006786:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 800678a:	429a      	cmp	r2, r3
 800678c:	d842      	bhi.n	8006814 <HAL_I2C_MemRxCpltCallback+0x8ac>
 800678e:	4b20      	ldr	r3, [pc, #128]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 8006790:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800679c:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80067f8 <HAL_I2C_MemRxCpltCallback+0x890>
 80067a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80067a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80067a6:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80067b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80067b6:	4b16      	ldr	r3, [pc, #88]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80067b8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80067c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80067c8:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <HAL_I2C_MemRxCpltCallback+0x8a8>)
 80067ca:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80067d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80067da:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006800 <HAL_I2C_MemRxCpltCallback+0x898>
 80067de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80067e2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006808 <HAL_I2C_MemRxCpltCallback+0x8a0>
 80067e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80067ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067ee:	ee17 3a90 	vmov	r3, s15
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	e010      	b.n	8006818 <HAL_I2C_MemRxCpltCallback+0x8b0>
 80067f6:	bf00      	nop
 80067f8:	66666666 	.word	0x66666666
 80067fc:	3fe66666 	.word	0x3fe66666
 8006800:	00000000 	.word	0x00000000
 8006804:	40c48200 	.word	0x40c48200
 8006808:	00000000 	.word	0x00000000
 800680c:	407f4000 	.word	0x407f4000
 8006810:	00000160 	.word	0x00000160
 8006814:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006818:	4a75      	ldr	r2, [pc, #468]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 800681a:	f8a2 30d6 	strh.w	r3, [r2, #214]	@ 0xd6

			if( MYDRON.Thrust.Speed_1 != MYDRON.Thrust.Old_Speed_1){
 800681e:	4b74      	ldr	r3, [pc, #464]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006820:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8006824:	4b72      	ldr	r3, [pc, #456]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006826:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	@ 0xd8
 800682a:	429a      	cmp	r2, r3
 800682c:	d005      	beq.n	800683a <HAL_I2C_MemRxCpltCallback+0x8d2>
				ESC_1_SPEED( MYDRON.Thrust.Speed_1);
 800682e:	4b70      	ldr	r3, [pc, #448]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006830:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8006834:	4618      	mov	r0, r3
 8006836:	f7fa fae1 	bl	8000dfc <ESC_1_SPEED>
			}
			if( MYDRON.Thrust.Speed_2 != MYDRON.Thrust.Old_Speed_2){
 800683a:	4b6d      	ldr	r3, [pc, #436]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 800683c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8006840:	4b6b      	ldr	r3, [pc, #428]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006842:	f8b3 30da 	ldrh.w	r3, [r3, #218]	@ 0xda
 8006846:	429a      	cmp	r2, r3
 8006848:	d005      	beq.n	8006856 <HAL_I2C_MemRxCpltCallback+0x8ee>
				ESC_2_SPEED( MYDRON.Thrust.Speed_2);
 800684a:	4b69      	ldr	r3, [pc, #420]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 800684c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 8006850:	4618      	mov	r0, r3
 8006852:	f7fa faf5 	bl	8000e40 <ESC_2_SPEED>
			}
			if( MYDRON.Thrust.Speed_3 != MYDRON.Thrust.Old_Speed_3){
 8006856:	4b66      	ldr	r3, [pc, #408]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006858:	f8b3 20d4 	ldrh.w	r2, [r3, #212]	@ 0xd4
 800685c:	4b64      	ldr	r3, [pc, #400]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 800685e:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8006862:	429a      	cmp	r2, r3
 8006864:	d005      	beq.n	8006872 <HAL_I2C_MemRxCpltCallback+0x90a>
				ESC_3_SPEED( MYDRON.Thrust.Speed_3);
 8006866:	4b62      	ldr	r3, [pc, #392]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006868:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 800686c:	4618      	mov	r0, r3
 800686e:	f7fa fb09 	bl	8000e84 <ESC_3_SPEED>
			}
			if( MYDRON.Thrust.Speed_4 != MYDRON.Thrust.Old_Speed_4){
 8006872:	4b5f      	ldr	r3, [pc, #380]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006874:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
 8006878:	4b5d      	ldr	r3, [pc, #372]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 800687a:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 800687e:	429a      	cmp	r2, r3
 8006880:	d005      	beq.n	800688e <HAL_I2C_MemRxCpltCallback+0x926>
				ESC_4_SPEED( MYDRON.Thrust.Speed_4);
 8006882:	4b5b      	ldr	r3, [pc, #364]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006884:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8006888:	4618      	mov	r0, r3
 800688a:	f7fa fb1d 	bl	8000ec8 <ESC_4_SPEED>
			}

			MYDRON.Thrust.Old_Speed_1 = MYDRON.Thrust.Speed_1;
 800688e:	4b58      	ldr	r3, [pc, #352]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006890:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8006894:	4b56      	ldr	r3, [pc, #344]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 8006896:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
			MYDRON.Thrust.Old_Speed_2 = MYDRON.Thrust.Speed_2;
 800689a:	4b55      	ldr	r3, [pc, #340]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 800689c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 80068a0:	4b53      	ldr	r3, [pc, #332]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 80068a2:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
			MYDRON.Thrust.Old_Speed_3 = MYDRON.Thrust.Speed_3;
 80068a6:	4b52      	ldr	r3, [pc, #328]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 80068a8:	f8b3 20d4 	ldrh.w	r2, [r3, #212]	@ 0xd4
 80068ac:	4b50      	ldr	r3, [pc, #320]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 80068ae:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
			MYDRON.Thrust.Old_Speed_4 = MYDRON.Thrust.Speed_4;
 80068b2:	4b4f      	ldr	r3, [pc, #316]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 80068b4:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
 80068b8:	4b4d      	ldr	r3, [pc, #308]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 80068ba:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde

			LED_G_0;
 80068be:	2200      	movs	r2, #0
 80068c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068c4:	484b      	ldr	r0, [pc, #300]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0xa8c>)
 80068c6:	f007 fa1f 	bl	800dd08 <HAL_GPIO_WritePin>
	}
	if(HMC5883L.HMC583L_IRQ == 1){
 80068ca:	4b4b      	ldr	r3, [pc, #300]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80068cc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d126      	bne.n	8006922 <HAL_I2C_MemRxCpltCallback+0x9ba>
		HMC5883L.HMC583L_IRQ = 0;
 80068d4:	4b48      	ldr	r3, [pc, #288]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		HMC5883L_Get_Z_End_IT();
 80068dc:	f7fa fbfc 	bl	80010d8 <HMC5883L_Get_Z_End_IT>
		HMC5883L.Directions.Z = (HMC5883L.Directions.Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (HMC5883L.Directions.Old_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 80068e0:	4b45      	ldr	r3, [pc, #276]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80068e2:	edd3 7a00 	vldr	s15, [r3]
 80068e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80068ea:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 80069d8 <HAL_I2C_MemRxCpltCallback+0xa70>
 80068ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80068f2:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 80069e0 <HAL_I2C_MemRxCpltCallback+0xa78>
 80068f6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80068fa:	4b3f      	ldr	r3, [pc, #252]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 80068fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8006900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006904:	ed9f 5b38 	vldr	d5, [pc, #224]	@ 80069e8 <HAL_I2C_MemRxCpltCallback+0xa80>
 8006908:	ee27 7b05 	vmul.f64	d7, d7, d5
 800690c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006910:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006914:	4b38      	ldr	r3, [pc, #224]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006916:	edc3 7a00 	vstr	s15, [r3]
		HMC5883L.Directions.Old_Z = HMC5883L.Directions.Z;
 800691a:	4b37      	ldr	r3, [pc, #220]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a36      	ldr	r2, [pc, #216]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0xa90>)
 8006920:	60d3      	str	r3, [r2, #12]
	}
	if(BMP180.Step == 3){
 8006922:	4b36      	ldr	r3, [pc, #216]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 8006924:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8006928:	2b03      	cmp	r3, #3
 800692a:	d11a      	bne.n	8006962 <HAL_I2C_MemRxCpltCallback+0x9fa>
		BMP180.Raw_Data.temperature = BMP180_GET_temp_IT();
 800692c:	f7f9 ff6e 	bl	800080c <BMP180_GET_temp_IT>
 8006930:	4603      	mov	r3, r0
 8006932:	461a      	mov	r2, r3
 8006934:	4b31      	ldr	r3, [pc, #196]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 8006936:	641a      	str	r2, [r3, #64]	@ 0x40
		BMP180.temp = BMP180_GET_temp(BMP180.Raw_Data.temperature);
 8006938:	4b30      	ldr	r3, [pc, #192]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	b29b      	uxth	r3, r3
 800693e:	4618      	mov	r0, r3
 8006940:	f7fa f888 	bl	8000a54 <BMP180_GET_temp>
 8006944:	eef0 7a40 	vmov.f32	s15, s0
 8006948:	4b2c      	ldr	r3, [pc, #176]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 800694a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		BMP180_start_measurment_pres_IT();
 800694e:	f7f9 ffbf 	bl	80008d0 <BMP180_start_measurment_pres_IT>
		BMP180.Step++;// Step 4
 8006952:	4b2a      	ldr	r3, [pc, #168]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 8006954:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8006958:	3301      	adds	r3, #1
 800695a:	b2da      	uxtb	r2, r3
 800695c:	4b27      	ldr	r3, [pc, #156]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 800695e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	}
	if(BMP180.Step == 6){
 8006962:	4b26      	ldr	r3, [pc, #152]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 8006964:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8006968:	2b06      	cmp	r3, #6
 800696a:	d12f      	bne.n	80069cc <HAL_I2C_MemRxCpltCallback+0xa64>
		BMP180.Raw_Data.pressure = BMP180_GET_pres_IT();
 800696c:	f7f9 ff64 	bl	8000838 <BMP180_GET_pres_IT>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	4b21      	ldr	r3, [pc, #132]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 8006976:	645a      	str	r2, [r3, #68]	@ 0x44
		BMP180.pres = BMP180_GET_pres(BMP180.Raw_Data.pressure);
 8006978:	4b20      	ldr	r3, [pc, #128]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 800697a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697c:	b29b      	uxth	r3, r3
 800697e:	4618      	mov	r0, r3
 8006980:	f7fa f8b2 	bl	8000ae8 <BMP180_GET_pres>
 8006984:	eef0 7a40 	vmov.f32	s15, s0
 8006988:	4b1c      	ldr	r3, [pc, #112]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 800698a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		BMP180.ampritude = BMP180.startpres - BMP180.pres;
 800698e:	4b1b      	ldr	r3, [pc, #108]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 8006990:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8006994:	4b19      	ldr	r3, [pc, #100]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 8006996:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800699a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800699e:	4b17      	ldr	r3, [pc, #92]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 80069a0:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		MYDRON.dronheight = (int16_t)BMP180_GET_height();
 80069a4:	f7fa f9f4 	bl	8000d90 <BMP180_GET_height>
 80069a8:	eef0 7a40 	vmov.f32	s15, s0
 80069ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069b0:	ee17 3a90 	vmov	r3, s15
 80069b4:	b21a      	sxth	r2, r3
 80069b6:	4b0e      	ldr	r3, [pc, #56]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0xa88>)
 80069b8:	f8a3 218a 	strh.w	r2, [r3, #394]	@ 0x18a
		BMP180.Timer_1 = 0;
 80069bc:	4b0f      	ldr	r3, [pc, #60]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 80069be:	2200      	movs	r2, #0
 80069c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
		BMP180.Step = 0;
 80069c4:	4b0d      	ldr	r3, [pc, #52]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0xa94>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	}
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd90      	pop	{r4, r7, pc}
 80069d4:	f3af 8000 	nop.w
 80069d8:	9999999a 	.word	0x9999999a
 80069dc:	3fc99999 	.word	0x3fc99999
 80069e0:	33333333 	.word	0x33333333
 80069e4:	3ff33333 	.word	0x3ff33333
 80069e8:	aaaaaaab 	.word	0xaaaaaaab
 80069ec:	3feaaaaa 	.word	0x3feaaaaa
 80069f0:	00000160 	.word	0x00000160
 80069f4:	58021000 	.word	0x58021000
 80069f8:	0000419c 	.word	0x0000419c
 80069fc:	0000006c 	.word	0x0000006c

08006a00 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi){
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	if(NRF24.SPI_Tx_Inte == 1 && NRF24.Step == 4){
 8006a08:	4b1a      	ldr	r3, [pc, #104]	@ (8006a74 <HAL_SPI_TxCpltCallback+0x74>)
 8006a0a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02c      	beq.n	8006a6c <HAL_SPI_TxCpltCallback+0x6c>
 8006a12:	4b18      	ldr	r3, [pc, #96]	@ (8006a74 <HAL_SPI_TxCpltCallback+0x74>)
 8006a14:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d127      	bne.n	8006a6c <HAL_SPI_TxCpltCallback+0x6c>
		LED_6_1;
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	2108      	movs	r1, #8
 8006a20:	4815      	ldr	r0, [pc, #84]	@ (8006a78 <HAL_SPI_TxCpltCallback+0x78>)
 8006a22:	f007 f971 	bl	800dd08 <HAL_GPIO_WritePin>
		NRF24_CSN_HIGH;
 8006a26:	2201      	movs	r2, #1
 8006a28:	2180      	movs	r1, #128	@ 0x80
 8006a2a:	4814      	ldr	r0, [pc, #80]	@ (8006a7c <HAL_SPI_TxCpltCallback+0x7c>)
 8006a2c:	f007 f96c 	bl	800dd08 <HAL_GPIO_WritePin>
		NRF24_CE_HIGH;//nRF24_WaitTX()
 8006a30:	2201      	movs	r2, #1
 8006a32:	2140      	movs	r1, #64	@ 0x40
 8006a34:	4811      	ldr	r0, [pc, #68]	@ (8006a7c <HAL_SPI_TxCpltCallback+0x7c>)
 8006a36:	f007 f967 	bl	800dd08 <HAL_GPIO_WritePin>
		LED_6_0;
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2108      	movs	r1, #8
 8006a3e:	480e      	ldr	r0, [pc, #56]	@ (8006a78 <HAL_SPI_TxCpltCallback+0x78>)
 8006a40:	f007 f962 	bl	800dd08 <HAL_GPIO_WritePin>
		//
		NRF24.Status = NRF24_Ready;
 8006a44:	4b0b      	ldr	r3, [pc, #44]	@ (8006a74 <HAL_SPI_TxCpltCallback+0x74>)
 8006a46:	2204      	movs	r2, #4
 8006a48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		NRF24.Timer_1 = 1;
 8006a4c:	4b09      	ldr	r3, [pc, #36]	@ (8006a74 <HAL_SPI_TxCpltCallback+0x74>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		NRF24.SPI_Tx_Inte = 0;
 8006a54:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <HAL_SPI_TxCpltCallback+0x74>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		NRF24.Step++;//Step 5
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <HAL_SPI_TxCpltCallback+0x74>)
 8006a5e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006a62:	3301      	adds	r3, #1
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	4b03      	ldr	r3, [pc, #12]	@ (8006a74 <HAL_SPI_TxCpltCallback+0x74>)
 8006a68:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	}
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	000000d0 	.word	0x000000d0
 8006a78:	58021000 	.word	0x58021000
 8006a7c:	58020400 	.word	0x58020400

08006a80 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	if(STARTUP == 0 && NRF24.SPI_Rx_Inte == 1 && NRF24.Step == 1){
 8006a88:	4bad      	ldr	r3, [pc, #692]	@ (8006d40 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 8153 	bne.w	8006d38 <HAL_SPI_RxCpltCallback+0x2b8>
 8006a92:	4bac      	ldr	r3, [pc, #688]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006a94:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 814d 	beq.w	8006d38 <HAL_SPI_RxCpltCallback+0x2b8>
 8006a9e:	4ba9      	ldr	r3, [pc, #676]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006aa0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 8147 	bne.w	8006d38 <HAL_SPI_RxCpltCallback+0x2b8>

		NRF24.SPI_Rx_Inte = 0;
 8006aaa:	4ba6      	ldr	r3, [pc, #664]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
		LED_6_1;
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	2108      	movs	r1, #8
 8006ab6:	48a4      	ldr	r0, [pc, #656]	@ (8006d48 <HAL_SPI_RxCpltCallback+0x2c8>)
 8006ab8:	f007 f926 	bl	800dd08 <HAL_GPIO_WritePin>
		nRF24_ReadRXPaylaod_IT_End();
 8006abc:	f7fb fdae 	bl	800261c <nRF24_ReadRXPaylaod_IT_End>
		LED_6_0;
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2108      	movs	r1, #8
 8006ac4:	48a0      	ldr	r0, [pc, #640]	@ (8006d48 <HAL_SPI_RxCpltCallback+0x2c8>)
 8006ac6:	f007 f91f 	bl	800dd08 <HAL_GPIO_WritePin>
		NRF24.Step++;//step 2
 8006aca:	4b9e      	ldr	r3, [pc, #632]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006acc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	4b9b      	ldr	r3, [pc, #620]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006ad6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		NRF24.Timer_1 = 2;
 8006ada:	4b9a      	ldr	r3, [pc, #616]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

		LED_Y_1;
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ae8:	4898      	ldr	r0, [pc, #608]	@ (8006d4c <HAL_SPI_RxCpltCallback+0x2cc>)
 8006aea:	f007 f90d 	bl	800dd08 <HAL_GPIO_WritePin>

		loopnum = 0;
 8006aee:	4b98      	ldr	r3, [pc, #608]	@ (8006d50 <HAL_SPI_RxCpltCallback+0x2d0>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e013      	b.n	8006b22 <HAL_SPI_RxCpltCallback+0xa2>
			if(NRF24.RxData[12+abc] == NRF24.Rxcode[abc+12]){
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	330c      	adds	r3, #12
 8006afe:	4a91      	ldr	r2, [pc, #580]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006b00:	5cd2      	ldrb	r2, [r2, r3]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	330c      	adds	r3, #12
 8006b06:	498f      	ldr	r1, [pc, #572]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006b08:	440b      	add	r3, r1
 8006b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d104      	bne.n	8006b1c <HAL_SPI_RxCpltCallback+0x9c>
				loopnum++;
 8006b12:	4b8f      	ldr	r3, [pc, #572]	@ (8006d50 <HAL_SPI_RxCpltCallback+0x2d0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3301      	adds	r3, #1
 8006b18:	4a8d      	ldr	r2, [pc, #564]	@ (8006d50 <HAL_SPI_RxCpltCallback+0x2d0>)
 8006b1a:	6013      	str	r3, [r2, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b09      	cmp	r3, #9
 8006b26:	dde8      	ble.n	8006afa <HAL_SPI_RxCpltCallback+0x7a>
			}
		}

		if(loopnum == 10){
 8006b28:	4b89      	ldr	r3, [pc, #548]	@ (8006d50 <HAL_SPI_RxCpltCallback+0x2d0>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b0a      	cmp	r3, #10
 8006b2e:	f040 80f1 	bne.w	8006d14 <HAL_SPI_RxCpltCallback+0x294>
			convert_array_to_value(NRF24.RxData, &MYDRON.Pitch.Wanted_v, 0, 2);//pitch
 8006b32:	2302      	movs	r3, #2
 8006b34:	2200      	movs	r2, #0
 8006b36:	4987      	ldr	r1, [pc, #540]	@ (8006d54 <HAL_SPI_RxCpltCallback+0x2d4>)
 8006b38:	4882      	ldr	r0, [pc, #520]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006b3a:	f000 f927 	bl	8006d8c <convert_array_to_value>
			convert_array_to_value(NRF24.RxData, &MYDRON.Rool.Wanted_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006b3e:	2305      	movs	r3, #5
 8006b40:	2203      	movs	r2, #3
 8006b42:	4985      	ldr	r1, [pc, #532]	@ (8006d58 <HAL_SPI_RxCpltCallback+0x2d8>)
 8006b44:	487f      	ldr	r0, [pc, #508]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006b46:	f000 f921 	bl	8006d8c <convert_array_to_value>
			if(wobble_strenght == 1){
 8006b4a:	4b84      	ldr	r3, [pc, #528]	@ (8006d5c <HAL_SPI_RxCpltCallback+0x2dc>)
 8006b4c:	edd3 7a00 	vldr	s15, [r3]
 8006b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b54:	eef4 7a47 	vcmp.f32	s15, s14
 8006b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5c:	d105      	bne.n	8006b6a <HAL_SPI_RxCpltCallback+0xea>
				convert_array_to_value(NRF24.RxData, &MYDRON.Thrust.Wanted, 6, 8);//
 8006b5e:	2308      	movs	r3, #8
 8006b60:	2206      	movs	r2, #6
 8006b62:	497f      	ldr	r1, [pc, #508]	@ (8006d60 <HAL_SPI_RxCpltCallback+0x2e0>)
 8006b64:	4877      	ldr	r0, [pc, #476]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006b66:	f000 f911 	bl	8006d8c <convert_array_to_value>
			}
			convert_array_to_value(NRF24.RxData, &MYDRON.Yaw.Wanted_v, 9, 11);//
 8006b6a:	230b      	movs	r3, #11
 8006b6c:	2209      	movs	r2, #9
 8006b6e:	497d      	ldr	r1, [pc, #500]	@ (8006d64 <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b70:	4874      	ldr	r0, [pc, #464]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006b72:	f000 f90b 	bl	8006d8c <convert_array_to_value>
			MYDRON.Status.Connection = DRON_CONNECTED;
 8006b76:	4b7c      	ldr	r3, [pc, #496]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184

			if(NRF24.RxData[23] == 1){
 8006b7e:	4b71      	ldr	r3, [pc, #452]	@ (8006d44 <HAL_SPI_RxCpltCallback+0x2c4>)
 8006b80:	7ddb      	ldrb	r3, [r3, #23]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d11b      	bne.n	8006bbe <HAL_SPI_RxCpltCallback+0x13e>
				ESC_POWER_1;
 8006b86:	2201      	movs	r2, #1
 8006b88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b8c:	4877      	ldr	r0, [pc, #476]	@ (8006d6c <HAL_SPI_RxCpltCallback+0x2ec>)
 8006b8e:	f007 f8bb 	bl	800dd08 <HAL_GPIO_WritePin>
				LED_R_1;
 8006b92:	2201      	movs	r2, #1
 8006b94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006b98:	486c      	ldr	r0, [pc, #432]	@ (8006d4c <HAL_SPI_RxCpltCallback+0x2cc>)
 8006b9a:	f007 f8b5 	bl	800dd08 <HAL_GPIO_WritePin>
				if(SD_enable_Flag == 1){
 8006b9e:	4b74      	ldr	r3, [pc, #464]	@ (8006d70 <HAL_SPI_RxCpltCallback+0x2f0>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10b      	bne.n	8006bbe <HAL_SPI_RxCpltCallback+0x13e>
					f_close(&fil);
 8006ba6:	4873      	ldr	r0, [pc, #460]	@ (8006d74 <HAL_SPI_RxCpltCallback+0x2f4>)
 8006ba8:	f016 fe90 	bl	801d8cc <f_close>
					fresult = f_mount(NULL, "/", 1);
 8006bac:	2201      	movs	r2, #1
 8006bae:	4972      	ldr	r1, [pc, #456]	@ (8006d78 <HAL_SPI_RxCpltCallback+0x2f8>)
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f016 fa6b 	bl	801d08c <f_mount>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4b70      	ldr	r3, [pc, #448]	@ (8006d7c <HAL_SPI_RxCpltCallback+0x2fc>)
 8006bbc:	701a      	strb	r2, [r3, #0]
					}
			}

			if(MYDRON.Thrust.Wanted == 9999){
 8006bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006bc0:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8006bc4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d103      	bne.n	8006bd4 <HAL_SPI_RxCpltCallback+0x154>
				MYDRON.Thrust.Max_Flag = THRUST_MAX;
 8006bcc:	4b66      	ldr	r3, [pc, #408]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006bce:	2210      	movs	r2, #16
 8006bd0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
		  	}
			MYDRON.Thrust.Wanted = MYDRON.Thrust.Wanted * 20;
 8006bd4:	4b64      	ldr	r3, [pc, #400]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006bd6:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	0092      	lsls	r2, r2, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b21a      	sxth	r2, r3
 8006be8:	4b5f      	ldr	r3, [pc, #380]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006bea:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			MYDRON.Thrust.Wanted = MYDRON.Thrust.Wanted - 10000;
 8006bee:	4b5e      	ldr	r3, [pc, #376]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006bf0:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	4b62      	ldr	r3, [pc, #392]	@ (8006d80 <HAL_SPI_RxCpltCallback+0x300>)
 8006bf8:	4413      	add	r3, r2
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	b21a      	sxth	r2, r3
 8006bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c00:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			if(MYDRON.Thrust.Wanted < 0){
 8006c04:	4b58      	ldr	r3, [pc, #352]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c06:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	da03      	bge.n	8006c16 <HAL_SPI_RxCpltCallback+0x196>
				MYDRON.Thrust.Wanted = 0;
 8006c0e:	4b56      	ldr	r3, [pc, #344]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			}

			MYDRON.Rool.Wanted_rx = (MYDRON.Rool.Wanted_v - 500)*MYDRON.Rool.Wanted_Factor;//MYDRON.Rool.Wanted_rx (-90 <-> 90)
 8006c16:	4b54      	ldr	r3, [pc, #336]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c18:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8006c1c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006c20:	ee07 3a90 	vmov	s15, r3
 8006c24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c28:	4b4f      	ldr	r3, [pc, #316]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c2a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8006c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c36:	ee17 3a90 	vmov	r3, s15
 8006c3a:	b21a      	sxth	r2, r3
 8006c3c:	4b4a      	ldr	r3, [pc, #296]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			MYDRON.Pitch.Wanted_rx = (MYDRON.Pitch.Wanted_v - 500)*MYDRON.Pitch.Wanted_Factor;// (-450 <-> 450)
 8006c42:	4b49      	ldr	r3, [pc, #292]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006c48:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c54:	4b44      	ldr	r3, [pc, #272]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c56:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c62:	ee17 3a90 	vmov	r3, s15
 8006c66:	b21a      	sxth	r2, r3
 8006c68:	4b3f      	ldr	r3, [pc, #252]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c6a:	801a      	strh	r2, [r3, #0]
			MYDRON.Yaw.Wanted_rx = (MYDRON.Yaw.Wanted_v - 500)*MYDRON.Yaw.Wanted_Factor;// wanted yaw is in deg/s
 8006c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c6e:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 8006c72:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c80:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8006c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c8c:	ee17 3a90 	vmov	r3, s15
 8006c90:	b21a      	sxth	r2, r3
 8006c92:	4b35      	ldr	r3, [pc, #212]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c94:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

			MYDRON.Rool.Wanted_rx = (MYDRON.Rool.Wanted_rx >= 300) ? 300 : (MYDRON.Rool.Wanted_rx <= -300) ? -300 : MYDRON.Rool.Wanted_rx;
 8006c98:	4b33      	ldr	r3, [pc, #204]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006c9a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006c9e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006ca2:	da08      	bge.n	8006cb6 <HAL_SPI_RxCpltCallback+0x236>
 8006ca4:	4b30      	ldr	r3, [pc, #192]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006ca6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006caa:	4a36      	ldr	r2, [pc, #216]	@ (8006d84 <HAL_SPI_RxCpltCallback+0x304>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	bfb8      	it	lt
 8006cb0:	4613      	movlt	r3, r2
 8006cb2:	b21b      	sxth	r3, r3
 8006cb4:	e001      	b.n	8006cba <HAL_SPI_RxCpltCallback+0x23a>
 8006cb6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006cba:	4a2b      	ldr	r2, [pc, #172]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006cbc:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
			MYDRON.Pitch.Wanted_rx = (MYDRON.Pitch.Wanted_rx >= 300) ? 300 : (MYDRON.Pitch.Wanted_rx <= -300) ? -300 : MYDRON.Pitch.Wanted_rx;
 8006cc0:	4b29      	ldr	r3, [pc, #164]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cc6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006cca:	da08      	bge.n	8006cde <HAL_SPI_RxCpltCallback+0x25e>
 8006ccc:	4b26      	ldr	r3, [pc, #152]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8006d84 <HAL_SPI_RxCpltCallback+0x304>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	bfb8      	it	lt
 8006cd8:	4613      	movlt	r3, r2
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	e001      	b.n	8006ce2 <HAL_SPI_RxCpltCallback+0x262>
 8006cde:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006ce2:	4a21      	ldr	r2, [pc, #132]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006ce4:	8013      	strh	r3, [r2, #0]
			MYDRON.Yaw.Wanted_rx = (MYDRON.Yaw.Wanted_rx >= 300) ? 300 : (MYDRON.Yaw.Wanted_rx <= -300) ? -300 : MYDRON.Yaw.Wanted_rx;
 8006ce6:	4b20      	ldr	r3, [pc, #128]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006ce8:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8006cec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006cf0:	da08      	bge.n	8006d04 <HAL_SPI_RxCpltCallback+0x284>
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006cf4:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8006cf8:	4a22      	ldr	r2, [pc, #136]	@ (8006d84 <HAL_SPI_RxCpltCallback+0x304>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	bfb8      	it	lt
 8006cfe:	4613      	movlt	r3, r2
 8006d00:	b21b      	sxth	r3, r3
 8006d02:	e001      	b.n	8006d08 <HAL_SPI_RxCpltCallback+0x288>
 8006d04:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006d08:	4a17      	ldr	r2, [pc, #92]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006d0a:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80

			NRF_TIM_Inte = 0;
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d88 <HAL_SPI_RxCpltCallback+0x308>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
		}

		if(loopnum > 0 && loopnum < 10){
 8006d14:	4b0e      	ldr	r3, [pc, #56]	@ (8006d50 <HAL_SPI_RxCpltCallback+0x2d0>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <HAL_SPI_RxCpltCallback+0x2ac>
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d50 <HAL_SPI_RxCpltCallback+0x2d0>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b09      	cmp	r3, #9
 8006d22:	d803      	bhi.n	8006d2c <HAL_SPI_RxCpltCallback+0x2ac>
			MYDRON.Status.Connection = DRON_CONNECTION_ERROR;
 8006d24:	4b10      	ldr	r3, [pc, #64]	@ (8006d68 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006d26:	2203      	movs	r2, #3
 8006d28:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
		}
		LED_Y_0;
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d32:	4806      	ldr	r0, [pc, #24]	@ (8006d4c <HAL_SPI_RxCpltCallback+0x2cc>)
 8006d34:	f006 ffe8 	bl	800dd08 <HAL_GPIO_WritePin>
	}
}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	000041f4 	.word	0x000041f4
 8006d44:	000000d0 	.word	0x000000d0
 8006d48:	58021000 	.word	0x58021000
 8006d4c:	58020400 	.word	0x58020400
 8006d50:	00004200 	.word	0x00004200
 8006d54:	00000162 	.word	0x00000162
 8006d58:	000001a2 	.word	0x000001a2
 8006d5c:	0000420c 	.word	0x0000420c
 8006d60:	00000222 	.word	0x00000222
 8006d64:	000001e2 	.word	0x000001e2
 8006d68:	00000160 	.word	0x00000160
 8006d6c:	58021800 	.word	0x58021800
 8006d70:	0000421c 	.word	0x0000421c
 8006d74:	24001f88 	.word	0x24001f88
 8006d78:	0801e720 	.word	0x0801e720
 8006d7c:	24001f84 	.word	0x24001f84
 8006d80:	ffffd8f0 	.word	0xffffd8f0
 8006d84:	fffffed4 	.word	0xfffffed4
 8006d88:	000041f8 	.word	0x000041f8

08006d8c <convert_array_to_value>:

void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	ed2d 8b04 	vpush	{d8-d9}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	460b      	mov	r3, r1
 8006da0:	71fb      	strb	r3, [r7, #7]
 8006da2:	4613      	mov	r3, r2
 8006da4:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8006dac:	79ba      	ldrb	r2, [r7, #6]
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e02e      	b.n	8006e18 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dc0:	ee07 3a90 	vmov	s15, r3
 8006dc4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8006dc8:	79fa      	ldrb	r2, [r7, #7]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4413      	add	r3, r2
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dec:	eeb0 1b47 	vmov.f64	d1, d7
 8006df0:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006df4:	f017 f8fc 	bl	801dff0 <pow>
 8006df8:	eeb0 7b40 	vmov.f64	d7, d0
 8006dfc:	ee29 7b07 	vmul.f64	d7, d9, d7
 8006e00:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006e04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006e08:	ee17 3a90 	vmov	r3, s15
 8006e0c:	b21a      	sxth	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	3301      	adds	r3, #1
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	dacc      	bge.n	8006dba <convert_array_to_value+0x2e>
	}
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	ecbd 8b04 	vpop	{d8-d9}
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006e2e:	b590      	push	{r4, r7, lr}
 8006e30:	b087      	sub	sp, #28
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6039      	str	r1, [r7, #0]
 8006e36:	4611      	mov	r1, r2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	80fb      	strh	r3, [r7, #6]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	717b      	strb	r3, [r7, #5]
 8006e42:	4613      	mov	r3, r2
 8006e44:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006e4e:	793a      	ldrb	r2, [r7, #4]
 8006e50:	797b      	ldrb	r3, [r7, #5]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e03e      	b.n	8006eda <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8006e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d028      	beq.n	8006eb6 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	200a      	movs	r0, #10
 8006e6e:	f000 f83d 	bl	8006eec <potenga>
 8006e72:	4603      	mov	r3, r0
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	88fa      	ldrh	r2, [r7, #6]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	80fb      	strh	r3, [r7, #6]
			x++;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	3301      	adds	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8006e84:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e96:	eeb0 1b47 	vmov.f64	d1, d7
 8006e9a:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006e9e:	f017 f8a7 	bl	801dff0 <pow>
 8006ea2:	eeb0 7b40 	vmov.f64	d7, d0
 8006ea6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006eaa:	ee17 3a90 	vmov	r3, s15
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	dad3      	bge.n	8006e5c <convert_value_to_array+0x2e>
 8006eb4:	e000      	b.n	8006eb8 <convert_value_to_array+0x8a>
				break;
 8006eb6:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8006eb8:	797a      	ldrb	r2, [r7, #5]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	613b      	str	r3, [r7, #16]
		x = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	dad0      	bge.n	8006e84 <convert_value_to_array+0x56>
	}
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd90      	pop	{r4, r7, pc}

08006eec <potenga>:
uint32_t potenga(int a, int b){
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <potenga+0x18>
		return 1;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e02d      	b.n	8006f60 <potenga+0x74>
	}
	if(b == 1){
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <potenga+0x22>
		return a;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	e028      	b.n	8006f60 <potenga+0x74>
	}
	if(b > 1){
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	dd10      	ble.n	8006f36 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	e007      	b.n	8006f2a <potenga+0x3e>
			a = a*c;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
 8006f22:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	3301      	adds	r3, #1
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	dbf3      	blt.n	8006f1a <potenga+0x2e>
		}
		return a;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	e014      	b.n	8006f60 <potenga+0x74>
	}
	if(b < 0){
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	da10      	bge.n	8006f5e <potenga+0x72>
		for(int i = 0; i < b; i++){
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	e007      	b.n	8006f52 <potenga+0x66>
			a = a/c;
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8006f4a:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	dbf3      	blt.n	8006f42 <potenga+0x56>
		}
		return a;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	e000      	b.n	8006f60 <potenga+0x74>
	}
	return a;
 8006f5e:	687b      	ldr	r3, [r7, #4]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 8006f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f82:	d504      	bpl.n	8006f8e <WartoscBezwgledna+0x22>
 8006f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f88:	eef1 7a67 	vneg.f32	s15, s15
 8006f8c:	e001      	b.n	8006f92 <WartoscBezwgledna+0x26>
 8006f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f92:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	ee07 3a90 	vmov	s15, r3
}
 8006f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
	...

08006fac <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	71fb      	strb	r3, [r7, #7]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	71bb      	strb	r3, [r7, #6]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8006fbe:	4b09      	ldr	r3, [pc, #36]	@ (8006fe4 <RGB_LED_Set_color+0x38>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	797a      	ldrb	r2, [r7, #5]
 8006fc4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8006fc6:	4b07      	ldr	r3, [pc, #28]	@ (8006fe4 <RGB_LED_Set_color+0x38>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	79fa      	ldrb	r2, [r7, #7]
 8006fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8006fce:	4b05      	ldr	r3, [pc, #20]	@ (8006fe4 <RGB_LED_Set_color+0x38>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	79ba      	ldrb	r2, [r7, #6]
 8006fd4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	24000380 	.word	0x24000380

08006fe8 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007000:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007050 <RGB_LED_For_BAT+0x68>
 8007004:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007008:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007058 <RGB_LED_For_BAT+0x70>
 800700c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007010:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007014:	edc7 7a00 	vstr	s15, [r7]
 8007018:	783b      	ldrb	r3, [r7, #0]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	79fa      	ldrb	r2, [r7, #7]
 800701e:	ee07 2a90 	vmov	s15, r2
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800702a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8007050 <RGB_LED_For_BAT+0x68>
 800702e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007032:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007036:	edc7 7a00 	vstr	s15, [r7]
 800703a:	783a      	ldrb	r2, [r7, #0]
 800703c:	b2d1      	uxtb	r1, r2
 800703e:	2200      	movs	r2, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff ffb3 	bl	8006fac <RGB_LED_Set_color>
}
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	66666666 	.word	0x66666666
 8007054:	40046666 	.word	0x40046666
 8007058:	00000000 	.word	0x00000000
 800705c:	406fe000 	.word	0x406fe000

08007060 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6039      	str	r1, [r7, #0]
 8007068:	4611      	mov	r1, r2
 800706a:	461a      	mov	r2, r3
 800706c:	4603      	mov	r3, r0
 800706e:	80fb      	strh	r3, [r7, #6]
 8007070:	460b      	mov	r3, r1
 8007072:	717b      	strb	r3, [r7, #5]
 8007074:	4613      	mov	r3, r2
 8007076:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007080:	793a      	ldrb	r2, [r7, #4]
 8007082:	797b      	ldrb	r3, [r7, #5]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708c:	2b00      	cmp	r3, #0
 800708e:	da04      	bge.n	800709a <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007090:	797b      	ldrb	r3, [r7, #5]
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4413      	add	r3, r2
 8007096:	222d      	movs	r2, #45	@ 0x2d
 8007098:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 800709a:	2301      	movs	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e035      	b.n	800710c <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 80070a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01d      	beq.n	80070e4 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	4619      	mov	r1, r3
 80070b0:	200a      	movs	r0, #10
 80070b2:	f7ff ff1b 	bl	8006eec <potenga>
 80070b6:	4603      	mov	r3, r0
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	b29b      	uxth	r3, r3
 80070c0:	80fb      	strh	r3, [r7, #6]
			x++;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	3301      	adds	r3, #1
 80070c6:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 80070c8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	4619      	mov	r1, r3
 80070d4:	200a      	movs	r0, #10
 80070d6:	f7ff ff09 	bl	8006eec <potenga>
 80070da:	4603      	mov	r3, r0
 80070dc:	b29b      	uxth	r3, r3
 80070de:	429c      	cmp	r4, r3
 80070e0:	dade      	bge.n	80070a0 <convert_value_to_array2+0x40>
 80070e2:	e000      	b.n	80070e6 <convert_value_to_array2+0x86>
				break;
 80070e4:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	7979      	ldrb	r1, [r7, #5]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	440b      	add	r3, r1
 80070f0:	4619      	mov	r1, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	440b      	add	r3, r1
 80070f6:	3230      	adds	r2, #48	@ 0x30
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	3301      	adds	r3, #1
 8007100:	613b      	str	r3, [r7, #16]
		x = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3301      	adds	r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	429a      	cmp	r2, r3
 8007112:	dad9      	bge.n	80070c8 <convert_value_to_array2+0x68>
	}
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}

0800711e <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 800711e:	b580      	push	{r7, lr}
 8007120:	ed2d 8b02 	vpush	{d8}
 8007124:	b08c      	sub	sp, #48	@ 0x30
 8007126:	af00      	add	r7, sp, #0
 8007128:	ed87 0a03 	vstr	s0, [r7, #12]
 800712c:	60b8      	str	r0, [r7, #8]
 800712e:	460b      	mov	r3, r1
 8007130:	71fb      	strb	r3, [r7, #7]
 8007132:	4613      	mov	r3, r2
 8007134:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 800713e:	79ba      	ldrb	r2, [r7, #6]
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 800714a:	edd7 7a03 	vldr	s15, [r7, #12]
 800714e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007156:	d50a      	bpl.n	800716e <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	222d      	movs	r2, #45	@ 0x2d
 8007160:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 8007162:	edd7 7a03 	vldr	s15, [r7, #12]
 8007166:	eef1 7a67 	vneg.f32	s15, s15
 800716a:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
 8007172:	e021      	b.n	80071b8 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007182:	eeb0 1b47 	vmov.f64	d1, d7
 8007186:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800718a:	f016 ff31 	bl	801dff0 <pow>
 800718e:	eeb0 7b40 	vmov.f64	d7, d0
 8007192:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007196:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 800719a:	ed97 7a03 	vldr	s14, [r7, #12]
 800719e:	edd7 7a04 	vldr	s15, [r7, #16]
 80071a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071aa:	da0b      	bge.n	80071c4 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	3301      	adds	r3, #1
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	3301      	adds	r3, #1
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	429a      	cmp	r2, r3
 80071c0:	dbd8      	blt.n	8007174 <convert_value_to_array3+0x56>
 80071c2:	e000      	b.n	80071c6 <convert_value_to_array3+0xa8>
			break;
 80071c4:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dc07      	bgt.n	80071e6 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	3301      	adds	r3, #1
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	222e      	movs	r2, #46	@ 0x2e
 80071e0:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	dd0a      	ble.n	8007202 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 80071ec:	79fa      	ldrb	r2, [r7, #7]
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	4413      	add	r3, r2
 80071f2:	3301      	adds	r3, #1
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	4413      	add	r3, r2
 80071f8:	222e      	movs	r2, #46	@ 0x2e
 80071fa:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	3301      	adds	r3, #1
 8007200:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 8007202:	edd7 7a03 	vldr	s15, [r7, #12]
 8007206:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	1e5a      	subs	r2, r3, #1
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800721a:	eeb0 1b47 	vmov.f64	d1, d7
 800721e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007222:	f016 fee5 	bl	801dff0 <pow>
 8007226:	eeb0 7b40 	vmov.f64	d7, d0
 800722a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800722e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007232:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007236:	2300      	movs	r3, #0
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e05f      	b.n	80072fc <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 800723c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007248:	d93d      	bls.n	80072c6 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 800724a:	edd7 7a03 	vldr	s15, [r7, #12]
 800724e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007262:	eeb0 1b47 	vmov.f64	d1, d7
 8007266:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800726a:	f016 fec1 	bl	801dff0 <pow>
 800726e:	eeb0 7b40 	vmov.f64	d7, d0
 8007272:	ee38 7b47 	vsub.f64	d7, d8, d7
 8007276:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800727a:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	3301      	adds	r3, #1
 8007282:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007294:	eeb0 1b47 	vmov.f64	d1, d7
 8007298:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800729c:	f016 fea8 	bl	801dff0 <pow>
 80072a0:	eeb0 7b40 	vmov.f64	d7, d0
 80072a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80072a8:	ee17 3a90 	vmov	r3, s15
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80072ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c2:	dabb      	bge.n	800723c <convert_value_to_array3+0x11e>
 80072c4:	e000      	b.n	80072c8 <convert_value_to_array3+0x1aa>
				break;
 80072c6:	bf00      	nop
		}

        if(loopnum == kropka){
 80072c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d102      	bne.n	80072d6 <convert_value_to_array3+0x1b8>
            loopnum++;
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	3301      	adds	r3, #1
 80072d4:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	79f9      	ldrb	r1, [r7, #7]
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	440b      	add	r3, r1
 80072e0:	4619      	mov	r1, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	440b      	add	r3, r1
 80072e6:	3230      	adds	r2, #48	@ 0x30
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80072ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ee:	3301      	adds	r3, #1
 80072f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	3301      	adds	r3, #1
 80072fa:	61bb      	str	r3, [r7, #24]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	3b02      	subs	r3, #2
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	429a      	cmp	r2, r3
 8007304:	dbbe      	blt.n	8007284 <convert_value_to_array3+0x166>
	}
}
 8007306:	bf00      	nop
 8007308:	bf00      	nop
 800730a:	3730      	adds	r7, #48	@ 0x30
 800730c:	46bd      	mov	sp, r7
 800730e:	ecbd 8b02 	vpop	{d8}
 8007312:	bd80      	pop	{r7, pc}

08007314 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 800731c:	4bac      	ldr	r3, [pc, #688]	@ (80075d0 <uSD_Card_SendData_To_Buffer+0x2bc>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	b218      	sxth	r0, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	01db      	lsls	r3, r3, #7
 8007328:	b2da      	uxtb	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	01db      	lsls	r3, r3, #7
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3308      	adds	r3, #8
 8007334:	b2db      	uxtb	r3, r3
 8007336:	49a7      	ldr	r1, [pc, #668]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007338:	f7ff fe92 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	01db      	lsls	r3, r3, #7
 8007340:	3308      	adds	r3, #8
 8007342:	4aa4      	ldr	r2, [pc, #656]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007344:	2120      	movs	r1, #32
 8007346:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.Thrust.Speed_1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007348:	4ba3      	ldr	r3, [pc, #652]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 800734a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800734e:	b218      	sxth	r0, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	01db      	lsls	r3, r3, #7
 8007356:	b2db      	uxtb	r3, r3
 8007358:	3309      	adds	r3, #9
 800735a:	b2da      	uxtb	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	01db      	lsls	r3, r3, #7
 8007362:	b2db      	uxtb	r3, r3
 8007364:	330f      	adds	r3, #15
 8007366:	b2db      	uxtb	r3, r3
 8007368:	499a      	ldr	r1, [pc, #616]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 800736a:	f7ff fe79 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	01db      	lsls	r3, r3, #7
 8007372:	330f      	adds	r3, #15
 8007374:	4a97      	ldr	r2, [pc, #604]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007376:	2120      	movs	r1, #32
 8007378:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 800737a:	4b97      	ldr	r3, [pc, #604]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 800737c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 8007380:	b218      	sxth	r0, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	01db      	lsls	r3, r3, #7
 8007388:	b2db      	uxtb	r3, r3
 800738a:	3310      	adds	r3, #16
 800738c:	b2da      	uxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	01db      	lsls	r3, r3, #7
 8007394:	b2db      	uxtb	r3, r3
 8007396:	3316      	adds	r3, #22
 8007398:	b2db      	uxtb	r3, r3
 800739a:	498e      	ldr	r1, [pc, #568]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 800739c:	f7ff fe60 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	01db      	lsls	r3, r3, #7
 80073a4:	3316      	adds	r3, #22
 80073a6:	4a8b      	ldr	r2, [pc, #556]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80073a8:	2120      	movs	r1, #32
 80073aa:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 80073ac:	4b8a      	ldr	r3, [pc, #552]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 80073ae:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 80073b2:	b218      	sxth	r0, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	01db      	lsls	r3, r3, #7
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	3317      	adds	r3, #23
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	01db      	lsls	r3, r3, #7
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	331d      	adds	r3, #29
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	4981      	ldr	r1, [pc, #516]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80073ce:	f7ff fe47 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	01db      	lsls	r3, r3, #7
 80073d6:	331d      	adds	r3, #29
 80073d8:	4a7e      	ldr	r2, [pc, #504]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80073da:	2120      	movs	r1, #32
 80073dc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 80073de:	4b7e      	ldr	r3, [pc, #504]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 80073e0:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80073e4:	b218      	sxth	r0, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	01db      	lsls	r3, r3, #7
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	331e      	adds	r3, #30
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	01db      	lsls	r3, r3, #7
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	3324      	adds	r3, #36	@ 0x24
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4975      	ldr	r1, [pc, #468]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007400:	f7ff fe2e 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	01db      	lsls	r3, r3, #7
 8007408:	3324      	adds	r3, #36	@ 0x24
 800740a:	4a72      	ldr	r2, [pc, #456]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 800740c:	2120      	movs	r1, #32
 800740e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(MYDRON.Rool.Wanted, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007410:	4b71      	ldr	r3, [pc, #452]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007412:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	b2db      	uxtb	r3, r3
 800741e:	3325      	adds	r3, #37	@ 0x25
 8007420:	b2d9      	uxtb	r1, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	01db      	lsls	r3, r3, #7
 8007428:	b2db      	uxtb	r3, r3
 800742a:	332d      	adds	r3, #45	@ 0x2d
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	4868      	ldr	r0, [pc, #416]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007432:	eeb0 0a67 	vmov.f32	s0, s15
 8007436:	f7ff fe72 	bl	800711e <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	01db      	lsls	r3, r3, #7
 800743e:	332d      	adds	r3, #45	@ 0x2d
 8007440:	4a64      	ldr	r2, [pc, #400]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007442:	2120      	movs	r1, #32
 8007444:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(MYDRON.Pitch.Wanted, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 8007446:	4b64      	ldr	r3, [pc, #400]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007448:	edd3 7a02 	vldr	s15, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	01db      	lsls	r3, r3, #7
 8007452:	b2db      	uxtb	r3, r3
 8007454:	332e      	adds	r3, #46	@ 0x2e
 8007456:	b2d9      	uxtb	r1, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	01db      	lsls	r3, r3, #7
 800745e:	b2db      	uxtb	r3, r3
 8007460:	3336      	adds	r3, #54	@ 0x36
 8007462:	b2db      	uxtb	r3, r3
 8007464:	461a      	mov	r2, r3
 8007466:	485b      	ldr	r0, [pc, #364]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007468:	eeb0 0a67 	vmov.f32	s0, s15
 800746c:	f7ff fe57 	bl	800711e <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	01db      	lsls	r3, r3, #7
 8007474:	3336      	adds	r3, #54	@ 0x36
 8007476:	4a57      	ldr	r2, [pc, #348]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007478:	2120      	movs	r1, #32
 800747a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(MYDRON.Yaw.Wanted, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 800747c:	4b56      	ldr	r3, [pc, #344]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 800747e:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	01db      	lsls	r3, r3, #7
 8007488:	b2db      	uxtb	r3, r3
 800748a:	3337      	adds	r3, #55	@ 0x37
 800748c:	b2d9      	uxtb	r1, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	01db      	lsls	r3, r3, #7
 8007494:	b2db      	uxtb	r3, r3
 8007496:	333f      	adds	r3, #63	@ 0x3f
 8007498:	b2db      	uxtb	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	484d      	ldr	r0, [pc, #308]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 800749e:	eeb0 0a67 	vmov.f32	s0, s15
 80074a2:	f7ff fe3c 	bl	800711e <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	01db      	lsls	r3, r3, #7
 80074aa:	333f      	adds	r3, #63	@ 0x3f
 80074ac:	4a49      	ldr	r2, [pc, #292]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80074ae:	2120      	movs	r1, #32
 80074b0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(MYDRON.Pitch.Angle_Error_Sum, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 80074b2:	4b49      	ldr	r3, [pc, #292]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 80074b4:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80074b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80074bc:	ee17 3a90 	vmov	r3, s15
 80074c0:	b218      	sxth	r0, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	01db      	lsls	r3, r3, #7
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	3340      	adds	r3, #64	@ 0x40
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	01db      	lsls	r3, r3, #7
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	3348      	adds	r3, #72	@ 0x48
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	493e      	ldr	r1, [pc, #248]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80074dc:	f7ff fdc0 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	01db      	lsls	r3, r3, #7
 80074e4:	3348      	adds	r3, #72	@ 0x48
 80074e6:	4a3b      	ldr	r2, [pc, #236]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80074e8:	2120      	movs	r1, #32
 80074ea:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Rool.Angle_Error_Sum, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 80074ec:	4b3a      	ldr	r3, [pc, #232]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 80074ee:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 80074f2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80074f6:	ee17 3a90 	vmov	r3, s15
 80074fa:	b218      	sxth	r0, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	01db      	lsls	r3, r3, #7
 8007502:	b2db      	uxtb	r3, r3
 8007504:	3349      	adds	r3, #73	@ 0x49
 8007506:	b2da      	uxtb	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	01db      	lsls	r3, r3, #7
 800750e:	b2db      	uxtb	r3, r3
 8007510:	3351      	adds	r3, #81	@ 0x51
 8007512:	b2db      	uxtb	r3, r3
 8007514:	492f      	ldr	r1, [pc, #188]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007516:	f7ff fda3 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	01db      	lsls	r3, r3, #7
 800751e:	3351      	adds	r3, #81	@ 0x51
 8007520:	4a2c      	ldr	r2, [pc, #176]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007522:	2120      	movs	r1, #32
 8007524:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Yaw.Angle_Error_Sum, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007526:	4b2c      	ldr	r3, [pc, #176]	@ (80075d8 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007528:	ed93 7b2a 	vldr	d7, [r3, #168]	@ 0xa8
 800752c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007530:	ee17 3a90 	vmov	r3, s15
 8007534:	b218      	sxth	r0, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	01db      	lsls	r3, r3, #7
 800753c:	b2db      	uxtb	r3, r3
 800753e:	3352      	adds	r3, #82	@ 0x52
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	01db      	lsls	r3, r3, #7
 8007548:	b2db      	uxtb	r3, r3
 800754a:	335a      	adds	r3, #90	@ 0x5a
 800754c:	b2db      	uxtb	r3, r3
 800754e:	4921      	ldr	r1, [pc, #132]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007550:	f7ff fd86 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	01db      	lsls	r3, r3, #7
 8007558:	335a      	adds	r3, #90	@ 0x5a
 800755a:	4a1e      	ldr	r2, [pc, #120]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 800755c:	2120      	movs	r1, #32
 800755e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007560:	4b1e      	ldr	r3, [pc, #120]	@ (80075dc <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007562:	edd3 7a00 	vldr	s15, [r3]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	01db      	lsls	r3, r3, #7
 800756c:	b2db      	uxtb	r3, r3
 800756e:	335b      	adds	r3, #91	@ 0x5b
 8007570:	b2d9      	uxtb	r1, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	01db      	lsls	r3, r3, #7
 8007578:	b2db      	uxtb	r3, r3
 800757a:	3362      	adds	r3, #98	@ 0x62
 800757c:	b2db      	uxtb	r3, r3
 800757e:	461a      	mov	r2, r3
 8007580:	4814      	ldr	r0, [pc, #80]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007582:	eeb0 0a67 	vmov.f32	s0, s15
 8007586:	f7ff fdca 	bl	800711e <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	01db      	lsls	r3, r3, #7
 800758e:	3362      	adds	r3, #98	@ 0x62
 8007590:	4a10      	ldr	r2, [pc, #64]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007592:	2120      	movs	r1, #32
 8007594:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007596:	4b11      	ldr	r3, [pc, #68]	@ (80075dc <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007598:	edd3 7a01 	vldr	s15, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	01db      	lsls	r3, r3, #7
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	3363      	adds	r3, #99	@ 0x63
 80075a6:	b2d9      	uxtb	r1, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	01db      	lsls	r3, r3, #7
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	336a      	adds	r3, #106	@ 0x6a
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	4807      	ldr	r0, [pc, #28]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80075b8:	eeb0 0a67 	vmov.f32	s0, s15
 80075bc:	f7ff fdaf 	bl	800711e <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	01db      	lsls	r3, r3, #7
 80075c4:	336a      	adds	r3, #106	@ 0x6a
 80075c6:	4a03      	ldr	r2, [pc, #12]	@ (80075d4 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80075c8:	2120      	movs	r1, #32
 80075ca:	54d1      	strb	r1, [r2, r3]
 80075cc:	e008      	b.n	80075e0 <uSD_Card_SendData_To_Buffer+0x2cc>
 80075ce:	bf00      	nop
 80075d0:	00004214 	.word	0x00004214
 80075d4:	24002fc0 	.word	0x24002fc0
 80075d8:	00000160 	.word	0x00000160
 80075dc:	00000054 	.word	0x00000054
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 80075e0:	4b36      	ldr	r3, [pc, #216]	@ (80076bc <uSD_Card_SendData_To_Buffer+0x3a8>)
 80075e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	336b      	adds	r3, #107	@ 0x6b
 80075f0:	b2d9      	uxtb	r1, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	01db      	lsls	r3, r3, #7
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	3372      	adds	r3, #114	@ 0x72
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	482f      	ldr	r0, [pc, #188]	@ (80076c0 <uSD_Card_SendData_To_Buffer+0x3ac>)
 8007602:	eeb0 0a67 	vmov.f32	s0, s15
 8007606:	f7ff fd8a 	bl	800711e <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	01db      	lsls	r3, r3, #7
 800760e:	3372      	adds	r3, #114	@ 0x72
 8007610:	4a2b      	ldr	r2, [pc, #172]	@ (80076c0 <uSD_Card_SendData_To_Buffer+0x3ac>)
 8007612:	2120      	movs	r1, #32
 8007614:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007616:	4b2b      	ldr	r3, [pc, #172]	@ (80076c4 <uSD_Card_SendData_To_Buffer+0x3b0>)
 8007618:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 800761c:	b218      	sxth	r0, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	01db      	lsls	r3, r3, #7
 8007624:	b2db      	uxtb	r3, r3
 8007626:	3373      	adds	r3, #115	@ 0x73
 8007628:	b2da      	uxtb	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	01db      	lsls	r3, r3, #7
 8007630:	b2db      	uxtb	r3, r3
 8007632:	3377      	adds	r3, #119	@ 0x77
 8007634:	b2db      	uxtb	r3, r3
 8007636:	4922      	ldr	r1, [pc, #136]	@ (80076c0 <uSD_Card_SendData_To_Buffer+0x3ac>)
 8007638:	f7ff fd12 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	01db      	lsls	r3, r3, #7
 8007640:	3377      	adds	r3, #119	@ 0x77
 8007642:	4a1f      	ldr	r2, [pc, #124]	@ (80076c0 <uSD_Card_SendData_To_Buffer+0x3ac>)
 8007644:	2120      	movs	r1, #32
 8007646:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007648:	4b1e      	ldr	r3, [pc, #120]	@ (80076c4 <uSD_Card_SendData_To_Buffer+0x3b0>)
 800764a:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800764e:	b218      	sxth	r0, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	b2db      	uxtb	r3, r3
 8007654:	01db      	lsls	r3, r3, #7
 8007656:	b2db      	uxtb	r3, r3
 8007658:	3378      	adds	r3, #120	@ 0x78
 800765a:	b2da      	uxtb	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	01db      	lsls	r3, r3, #7
 8007662:	b2db      	uxtb	r3, r3
 8007664:	337a      	adds	r3, #122	@ 0x7a
 8007666:	b2db      	uxtb	r3, r3
 8007668:	4915      	ldr	r1, [pc, #84]	@ (80076c0 <uSD_Card_SendData_To_Buffer+0x3ac>)
 800766a:	f7ff fcf9 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	01db      	lsls	r3, r3, #7
 8007672:	337a      	adds	r3, #122	@ 0x7a
 8007674:	4a12      	ldr	r2, [pc, #72]	@ (80076c0 <uSD_Card_SendData_To_Buffer+0x3ac>)
 8007676:	2120      	movs	r1, #32
 8007678:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(HMC5883L.Directions.Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 800767a:	4b13      	ldr	r3, [pc, #76]	@ (80076c8 <uSD_Card_SendData_To_Buffer+0x3b4>)
 800767c:	edd3 7a00 	vldr	s15, [r3]
 8007680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007684:	ee17 3a90 	vmov	r3, s15
 8007688:	b218      	sxth	r0, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	01db      	lsls	r3, r3, #7
 8007690:	b2db      	uxtb	r3, r3
 8007692:	337b      	adds	r3, #123	@ 0x7b
 8007694:	b2da      	uxtb	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	01db      	lsls	r3, r3, #7
 800769c:	b2db      	uxtb	r3, r3
 800769e:	337f      	adds	r3, #127	@ 0x7f
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	4907      	ldr	r1, [pc, #28]	@ (80076c0 <uSD_Card_SendData_To_Buffer+0x3ac>)
 80076a4:	f7ff fcdc 	bl	8007060 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3301      	adds	r3, #1
 80076ac:	01db      	lsls	r3, r3, #7
 80076ae:	4a04      	ldr	r2, [pc, #16]	@ (80076c0 <uSD_Card_SendData_To_Buffer+0x3ac>)
 80076b0:	210a      	movs	r1, #10
 80076b2:	54d1      	strb	r1, [r2, r3]
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	00000054 	.word	0x00000054
 80076c0:	24002fc0 	.word	0x24002fc0
 80076c4:	00000160 	.word	0x00000160
 80076c8:	0000419c 	.word	0x0000419c

080076cc <Stack_Push>:

void Stack_Push(float data){
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 80076d6:	4b22      	ldr	r3, [pc, #136]	@ (8007760 <Stack_Push+0x94>)
 80076d8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80076dc:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80076e0:	3301      	adds	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007760 <Stack_Push+0x94>)
 80076e6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80076ea:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 80076ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007760 <Stack_Push+0x94>)
 80076f0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80076f4:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80076f8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80076fc:	d105      	bne.n	800770a <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 80076fe:	4b18      	ldr	r3, [pc, #96]	@ (8007760 <Stack_Push+0x94>)
 8007700:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007704:	2200      	movs	r2, #0
 8007706:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 800770a:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <Stack_Push+0x94>)
 800770c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007710:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007714:	4a12      	ldr	r2, [pc, #72]	@ (8007760 <Stack_Push+0x94>)
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 800771e:	4b10      	ldr	r3, [pc, #64]	@ (8007760 <Stack_Push+0x94>)
 8007720:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007724:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007728:	3301      	adds	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	4b0c      	ldr	r3, [pc, #48]	@ (8007760 <Stack_Push+0x94>)
 800772e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007732:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007736:	4b0a      	ldr	r3, [pc, #40]	@ (8007760 <Stack_Push+0x94>)
 8007738:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800773c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007740:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007744:	d105      	bne.n	8007752 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007746:	4b06      	ldr	r3, [pc, #24]	@ (8007760 <Stack_Push+0x94>)
 8007748:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800774c:	2200      	movs	r2, #0
 800774e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	000002f0 	.word	0x000002f0

08007764 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 2;
 8007768:	4b05      	ldr	r3, [pc, #20]	@ (8007780 <ROOL_MAX_VAL+0x1c>)
 800776a:	2202      	movs	r2, #2
 800776c:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
	return 5000;
 8007770:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	00000160 	.word	0x00000160

08007784 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 1;
 8007788:	4b04      	ldr	r3, [pc, #16]	@ (800779c <ROOL_MIN_VAL+0x18>)
 800778a:	2201      	movs	r2, #1
 800778c:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
	return -5000;
 8007790:	4b03      	ldr	r3, [pc, #12]	@ (80077a0 <ROOL_MIN_VAL+0x1c>)
}
 8007792:	4618      	mov	r0, r3
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	00000160 	.word	0x00000160
 80077a0:	ffffec78 	.word	0xffffec78

080077a4 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 2;
 80077a8:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <PITCH_MAX_VAL+0x1c>)
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	return 5000;
 80077b0:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	00000160 	.word	0x00000160

080077c4 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 1;
 80077c8:	4b04      	ldr	r3, [pc, #16]	@ (80077dc <PITCH_MIN_VAL+0x18>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	return -5000;
 80077d0:	4b03      	ldr	r3, [pc, #12]	@ (80077e0 <PITCH_MIN_VAL+0x1c>)
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	00000160 	.word	0x00000160
 80077e0:	ffffec78 	.word	0xffffec78

080077e4 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 2;
 80077e8:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <YAW_MAX_VAL+0x1c>)
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
	return 5000;
 80077f0:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	00000160 	.word	0x00000160

08007804 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 1;
 8007808:	4b04      	ldr	r3, [pc, #16]	@ (800781c <YAW_MIN_VAL+0x18>)
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
	return -5000;
 8007810:	4b03      	ldr	r3, [pc, #12]	@ (8007820 <YAW_MIN_VAL+0x1c>)
}
 8007812:	4618      	mov	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	00000160 	.word	0x00000160
 8007820:	ffffec78 	.word	0xffffec78

08007824 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 0;
 8007828:	4b08      	ldr	r3, [pc, #32]	@ (800784c <ROOL_GOOD_VAL+0x28>)
 800782a:	2200      	movs	r2, #0
 800782c:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
	return MYDRON.PID_Rool.Angular_Rate_Value;
 8007830:	4b06      	ldr	r3, [pc, #24]	@ (800784c <ROOL_GOOD_VAL+0x28>)
 8007832:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8007836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800783a:	ee17 3a90 	vmov	r3, s15
 800783e:	b21b      	sxth	r3, r3
}
 8007840:	4618      	mov	r0, r3
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	00000160 	.word	0x00000160

08007850 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 0;
 8007854:	4b08      	ldr	r3, [pc, #32]	@ (8007878 <PITCH_GOOD_VAL+0x28>)
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	return MYDRON.PID_Pitch.Angular_Rate_Value;
 800785c:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <PITCH_GOOD_VAL+0x28>)
 800785e:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 8007862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007866:	ee17 3a90 	vmov	r3, s15
 800786a:	b21b      	sxth	r3, r3
}
 800786c:	4618      	mov	r0, r3
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	00000160 	.word	0x00000160

0800787c <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 0;
 8007880:	4b08      	ldr	r3, [pc, #32]	@ (80078a4 <YAW_GOOD_VAL+0x28>)
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
	return MYDRON.PID_Yaw.Angular_Rate_Value;
 8007888:	4b06      	ldr	r3, [pc, #24]	@ (80078a4 <YAW_GOOD_VAL+0x28>)
 800788a:	edd3 7a55 	vldr	s15, [r3, #340]	@ 0x154
 800788e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007892:	ee17 3a90 	vmov	r3, s15
 8007896:	b21b      	sxth	r3, r3
}
 8007898:	4618      	mov	r0, r3
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	00000160 	.word	0x00000160

080078a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80078ae:	463b      	mov	r3, r7
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	605a      	str	r2, [r3, #4]
 80078b6:	609a      	str	r2, [r3, #8]
 80078b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80078ba:	f003 f99b 	bl	800abf4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80078be:	2301      	movs	r3, #1
 80078c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80078ca:	231f      	movs	r3, #31
 80078cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80078ce:	2387      	movs	r3, #135	@ 0x87
 80078d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80078d6:	2300      	movs	r3, #0
 80078d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80078da:	2301      	movs	r3, #1
 80078dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80078de:	2301      	movs	r3, #1
 80078e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80078ea:	463b      	mov	r3, r7
 80078ec:	4618      	mov	r0, r3
 80078ee:	f003 f9b9 	bl	800ac64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80078f2:	2004      	movs	r0, #4
 80078f4:	f003 f996 	bl	800ac24 <HAL_MPU_Enable>

}
 80078f8:	bf00      	nop
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007904:	b672      	cpsid	i
}
 8007906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007908:	bf00      	nop
 800790a:	e7fd      	b.n	8007908 <Error_Handler+0x8>

0800790c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007910:	4b27      	ldr	r3, [pc, #156]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007912:	4a28      	ldr	r2, [pc, #160]	@ (80079b4 <MX_SPI1_Init+0xa8>)
 8007914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007916:	4b26      	ldr	r3, [pc, #152]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007918:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800791c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800791e:	4b24      	ldr	r3, [pc, #144]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007920:	2200      	movs	r2, #0
 8007922:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007924:	4b22      	ldr	r3, [pc, #136]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007926:	2207      	movs	r2, #7
 8007928:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800792a:	4b21      	ldr	r3, [pc, #132]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 800792c:	2200      	movs	r2, #0
 800792e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007930:	4b1f      	ldr	r3, [pc, #124]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007932:	2200      	movs	r2, #0
 8007934:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007936:	4b1e      	ldr	r3, [pc, #120]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007938:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800793c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800793e:	4b1c      	ldr	r3, [pc, #112]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007940:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007944:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007946:	4b1a      	ldr	r3, [pc, #104]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007948:	2200      	movs	r2, #0
 800794a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800794c:	4b18      	ldr	r3, [pc, #96]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 800794e:	2200      	movs	r2, #0
 8007950:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007952:	4b17      	ldr	r3, [pc, #92]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007954:	2200      	movs	r2, #0
 8007956:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8007958:	4b15      	ldr	r3, [pc, #84]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 800795a:	2200      	movs	r2, #0
 800795c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800795e:	4b14      	ldr	r3, [pc, #80]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007960:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007964:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007966:	4b12      	ldr	r3, [pc, #72]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007968:	2200      	movs	r2, #0
 800796a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800796c:	4b10      	ldr	r3, [pc, #64]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 800796e:	2200      	movs	r2, #0
 8007970:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007972:	4b0f      	ldr	r3, [pc, #60]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007974:	2200      	movs	r2, #0
 8007976:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007978:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 800797a:	2200      	movs	r2, #0
 800797c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800797e:	4b0c      	ldr	r3, [pc, #48]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007980:	2200      	movs	r2, #0
 8007982:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007984:	4b0a      	ldr	r3, [pc, #40]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007986:	2200      	movs	r2, #0
 8007988:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800798a:	4b09      	ldr	r3, [pc, #36]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 800798c:	2200      	movs	r2, #0
 800798e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007990:	4b07      	ldr	r3, [pc, #28]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007992:	2200      	movs	r2, #0
 8007994:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007996:	4b06      	ldr	r3, [pc, #24]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 8007998:	2200      	movs	r2, #0
 800799a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800799c:	4804      	ldr	r0, [pc, #16]	@ (80079b0 <MX_SPI1_Init+0xa4>)
 800799e:	f00c f9e1 	bl	8013d64 <HAL_SPI_Init>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80079a8:	f7ff ffaa 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80079ac:	bf00      	nop
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	240001ec 	.word	0x240001ec
 80079b4:	40013000 	.word	0x40013000

080079b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80079bc:	4b27      	ldr	r3, [pc, #156]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079be:	4a28      	ldr	r2, [pc, #160]	@ (8007a60 <MX_SPI2_Init+0xa8>)
 80079c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80079c2:	4b26      	ldr	r3, [pc, #152]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80079c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80079ca:	4b24      	ldr	r3, [pc, #144]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80079d0:	4b22      	ldr	r3, [pc, #136]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079d2:	2207      	movs	r2, #7
 80079d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80079d6:	4b21      	ldr	r3, [pc, #132]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079d8:	2200      	movs	r2, #0
 80079da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80079dc:	4b1f      	ldr	r3, [pc, #124]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079de:	2200      	movs	r2, #0
 80079e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80079e2:	4b1e      	ldr	r3, [pc, #120]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80079e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079ea:	4b1c      	ldr	r3, [pc, #112]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80079f0:	4b1a      	ldr	r3, [pc, #104]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80079f6:	4b19      	ldr	r3, [pc, #100]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079fc:	4b17      	ldr	r3, [pc, #92]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007a02:	4b16      	ldr	r3, [pc, #88]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007a08:	4b14      	ldr	r3, [pc, #80]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007a0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007a10:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007a16:	4b11      	ldr	r3, [pc, #68]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007a22:	4b0e      	ldr	r3, [pc, #56]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007a28:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007a34:	4b09      	ldr	r3, [pc, #36]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007a3a:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007a40:	4b06      	ldr	r3, [pc, #24]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007a46:	4805      	ldr	r0, [pc, #20]	@ (8007a5c <MX_SPI2_Init+0xa4>)
 8007a48:	f00c f98c 	bl	8013d64 <HAL_SPI_Init>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007a52:	f7ff ff55 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007a56:	bf00      	nop
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	24000274 	.word	0x24000274
 8007a60:	40003800 	.word	0x40003800

08007a64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	@ 0x30
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a6c:	f107 031c 	add.w	r3, r7, #28
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	605a      	str	r2, [r3, #4]
 8007a76:	609a      	str	r2, [r3, #8]
 8007a78:	60da      	str	r2, [r3, #12]
 8007a7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a60      	ldr	r2, [pc, #384]	@ (8007c04 <HAL_SPI_MspInit+0x1a0>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d136      	bne.n	8007af4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007a86:	4b60      	ldr	r3, [pc, #384]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007a8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007a96:	4b5c      	ldr	r3, [pc, #368]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007aa0:	61bb      	str	r3, [r7, #24]
 8007aa2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aa4:	4b58      	ldr	r3, [pc, #352]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007aaa:	4a57      	ldr	r2, [pc, #348]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007aac:	f043 0302 	orr.w	r3, r3, #2
 8007ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007ab4:	4b54      	ldr	r3, [pc, #336]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007ac2:	2338      	movs	r3, #56	@ 0x38
 8007ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007ad2:	2305      	movs	r3, #5
 8007ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ad6:	f107 031c 	add.w	r3, r7, #28
 8007ada:	4619      	mov	r1, r3
 8007adc:	484b      	ldr	r0, [pc, #300]	@ (8007c0c <HAL_SPI_MspInit+0x1a8>)
 8007ade:	f005 ff53 	bl	800d988 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	2023      	movs	r0, #35	@ 0x23
 8007ae8:	f003 f84f 	bl	800ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007aec:	2023      	movs	r0, #35	@ 0x23
 8007aee:	f003 f866 	bl	800abbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007af2:	e082      	b.n	8007bfa <HAL_SPI_MspInit+0x196>
  else if(spiHandle->Instance==SPI2)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a45      	ldr	r2, [pc, #276]	@ (8007c10 <HAL_SPI_MspInit+0x1ac>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d17d      	bne.n	8007bfa <HAL_SPI_MspInit+0x196>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007afe:	4b42      	ldr	r3, [pc, #264]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b04:	4a40      	ldr	r2, [pc, #256]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b22:	4a39      	ldr	r2, [pc, #228]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007b24:	f043 0302 	orr.w	r3, r3, #2
 8007b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b2c:	4b36      	ldr	r3, [pc, #216]	@ (8007c08 <HAL_SPI_MspInit+0x1a4>)
 8007b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b40:	2302      	movs	r3, #2
 8007b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b4c:	2305      	movs	r3, #5
 8007b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b50:	f107 031c 	add.w	r3, r7, #28
 8007b54:	4619      	mov	r1, r3
 8007b56:	482d      	ldr	r0, [pc, #180]	@ (8007c0c <HAL_SPI_MspInit+0x1a8>)
 8007b58:	f005 ff16 	bl	800d988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007b5c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b62:	2302      	movs	r3, #2
 8007b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b66:	2301      	movs	r3, #1
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b6e:	2305      	movs	r3, #5
 8007b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b72:	f107 031c 	add.w	r3, r7, #28
 8007b76:	4619      	mov	r1, r3
 8007b78:	4824      	ldr	r0, [pc, #144]	@ (8007c0c <HAL_SPI_MspInit+0x1a8>)
 8007b7a:	f005 ff05 	bl	800d988 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8007b7e:	4b25      	ldr	r3, [pc, #148]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007b80:	4a25      	ldr	r2, [pc, #148]	@ (8007c18 <HAL_SPI_MspInit+0x1b4>)
 8007b82:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007b84:	4b23      	ldr	r3, [pc, #140]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007b86:	2228      	movs	r2, #40	@ 0x28
 8007b88:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b8a:	4b22      	ldr	r3, [pc, #136]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007b8c:	2240      	movs	r2, #64	@ 0x40
 8007b8e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b90:	4b20      	ldr	r3, [pc, #128]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007b96:	4b1f      	ldr	r3, [pc, #124]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007b98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b9c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007baa:	4b1a      	ldr	r3, [pc, #104]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007bb0:	4b18      	ldr	r3, [pc, #96]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007bb6:	4b17      	ldr	r3, [pc, #92]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007bb8:	2204      	movs	r2, #4
 8007bba:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007bbc:	4b15      	ldr	r3, [pc, #84]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007bc2:	4b14      	ldr	r3, [pc, #80]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007bc8:	4b12      	ldr	r3, [pc, #72]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007bce:	4811      	ldr	r0, [pc, #68]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007bd0:	f003 f888 	bl	800ace4 <HAL_DMA_Init>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <HAL_SPI_MspInit+0x17a>
      Error_Handler();
 8007bda:	f7ff fe91 	bl	8007900 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a0c      	ldr	r2, [pc, #48]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007be2:	679a      	str	r2, [r3, #120]	@ 0x78
 8007be4:	4a0b      	ldr	r2, [pc, #44]	@ (8007c14 <HAL_SPI_MspInit+0x1b0>)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007bea:	2200      	movs	r2, #0
 8007bec:	2100      	movs	r1, #0
 8007bee:	2024      	movs	r0, #36	@ 0x24
 8007bf0:	f002 ffcb 	bl	800ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007bf4:	2024      	movs	r0, #36	@ 0x24
 8007bf6:	f002 ffe2 	bl	800abbe <HAL_NVIC_EnableIRQ>
}
 8007bfa:	bf00      	nop
 8007bfc:	3730      	adds	r7, #48	@ 0x30
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40013000 	.word	0x40013000
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	58020400 	.word	0x58020400
 8007c10:	40003800 	.word	0x40003800
 8007c14:	240002fc 	.word	0x240002fc
 8007c18:	40020010 	.word	0x40020010

08007c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c22:	4b0a      	ldr	r3, [pc, #40]	@ (8007c4c <HAL_MspInit+0x30>)
 8007c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c28:	4a08      	ldr	r2, [pc, #32]	@ (8007c4c <HAL_MspInit+0x30>)
 8007c2a:	f043 0302 	orr.w	r3, r3, #2
 8007c2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007c32:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <HAL_MspInit+0x30>)
 8007c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	607b      	str	r3, [r7, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	58024400 	.word	0x58024400

08007c50 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007c54:	4b0b      	ldr	r3, [pc, #44]	@ (8007c84 <SDTimer_Handler+0x34>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <SDTimer_Handler+0x16>
    Timer1--;
 8007c5c:	4b09      	ldr	r3, [pc, #36]	@ (8007c84 <SDTimer_Handler+0x34>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	4a08      	ldr	r2, [pc, #32]	@ (8007c84 <SDTimer_Handler+0x34>)
 8007c64:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007c66:	4b08      	ldr	r3, [pc, #32]	@ (8007c88 <SDTimer_Handler+0x38>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <SDTimer_Handler+0x28>
    Timer2--;
 8007c6e:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <SDTimer_Handler+0x38>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	4a04      	ldr	r2, [pc, #16]	@ (8007c88 <SDTimer_Handler+0x38>)
 8007c76:	6013      	str	r3, [r2, #0]
}
 8007c78:	bf00      	nop
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	24000378 	.word	0x24000378
 8007c88:	2400037c 	.word	0x2400037c

08007c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007c90:	2200      	movs	r2, #0
 8007c92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c96:	480a      	ldr	r0, [pc, #40]	@ (8007cc0 <NMI_Handler+0x34>)
 8007c98:	f006 f836 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007ca2:	4808      	ldr	r0, [pc, #32]	@ (8007cc4 <NMI_Handler+0x38>)
 8007ca4:	f006 f830 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_R_1;
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007cae:	4805      	ldr	r0, [pc, #20]	@ (8007cc4 <NMI_Handler+0x38>)
 8007cb0:	f006 f82a 	bl	800dd08 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007cb4:	4804      	ldr	r0, [pc, #16]	@ (8007cc8 <NMI_Handler+0x3c>)
 8007cb6:	f015 fe09 	bl	801d8cc <f_close>
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <NMI_Handler+0x2e>
 8007cbe:	bf00      	nop
 8007cc0:	58021000 	.word	0x58021000
 8007cc4:	58020400 	.word	0x58020400
 8007cc8:	24001f88 	.word	0x24001f88

08007ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cd6:	480a      	ldr	r0, [pc, #40]	@ (8007d00 <HardFault_Handler+0x34>)
 8007cd8:	f006 f816 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007ce2:	4808      	ldr	r0, [pc, #32]	@ (8007d04 <HardFault_Handler+0x38>)
 8007ce4:	f006 f810 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_R_1;
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007cee:	4805      	ldr	r0, [pc, #20]	@ (8007d04 <HardFault_Handler+0x38>)
 8007cf0:	f006 f80a 	bl	800dd08 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007cf4:	4804      	ldr	r0, [pc, #16]	@ (8007d08 <HardFault_Handler+0x3c>)
 8007cf6:	f015 fde9 	bl	801d8cc <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <HardFault_Handler+0x2e>
 8007cfe:	bf00      	nop
 8007d00:	58021000 	.word	0x58021000
 8007d04:	58020400 	.word	0x58020400
 8007d08:	24001f88 	.word	0x24001f88

08007d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 8007d10:	2200      	movs	r2, #0
 8007d12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d16:	480a      	ldr	r0, [pc, #40]	@ (8007d40 <MemManage_Handler+0x34>)
 8007d18:	f005 fff6 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d22:	4808      	ldr	r0, [pc, #32]	@ (8007d44 <MemManage_Handler+0x38>)
 8007d24:	f005 fff0 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_R_1;
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007d2e:	4805      	ldr	r0, [pc, #20]	@ (8007d44 <MemManage_Handler+0x38>)
 8007d30:	f005 ffea 	bl	800dd08 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007d34:	4804      	ldr	r0, [pc, #16]	@ (8007d48 <MemManage_Handler+0x3c>)
 8007d36:	f015 fdc9 	bl	801d8cc <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <MemManage_Handler+0x2e>
 8007d3e:	bf00      	nop
 8007d40:	58021000 	.word	0x58021000
 8007d44:	58020400 	.word	0x58020400
 8007d48:	24001f88 	.word	0x24001f88

08007d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8007d50:	2201      	movs	r2, #1
 8007d52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d56:	480a      	ldr	r0, [pc, #40]	@ (8007d80 <BusFault_Handler+0x34>)
 8007d58:	f005 ffd6 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_Y_1;
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d62:	4808      	ldr	r0, [pc, #32]	@ (8007d84 <BusFault_Handler+0x38>)
 8007d64:	f005 ffd0 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_R_1;
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007d6e:	4805      	ldr	r0, [pc, #20]	@ (8007d84 <BusFault_Handler+0x38>)
 8007d70:	f005 ffca 	bl	800dd08 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007d74:	4804      	ldr	r0, [pc, #16]	@ (8007d88 <BusFault_Handler+0x3c>)
 8007d76:	f015 fda9 	bl	801d8cc <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d7a:	bf00      	nop
 8007d7c:	e7fd      	b.n	8007d7a <BusFault_Handler+0x2e>
 8007d7e:	bf00      	nop
 8007d80:	58021000 	.word	0x58021000
 8007d84:	58020400 	.word	0x58020400
 8007d88:	24001f88 	.word	0x24001f88

08007d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8007d90:	2200      	movs	r2, #0
 8007d92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d96:	480a      	ldr	r0, [pc, #40]	@ (8007dc0 <UsageFault_Handler+0x34>)
 8007d98:	f005 ffb6 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_Y_1;
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007da2:	4808      	ldr	r0, [pc, #32]	@ (8007dc4 <UsageFault_Handler+0x38>)
 8007da4:	f005 ffb0 	bl	800dd08 <HAL_GPIO_WritePin>
	LED_R_1;
 8007da8:	2201      	movs	r2, #1
 8007daa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007dae:	4805      	ldr	r0, [pc, #20]	@ (8007dc4 <UsageFault_Handler+0x38>)
 8007db0:	f005 ffaa 	bl	800dd08 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007db4:	4804      	ldr	r0, [pc, #16]	@ (8007dc8 <UsageFault_Handler+0x3c>)
 8007db6:	f015 fd89 	bl	801d8cc <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <UsageFault_Handler+0x2e>
 8007dbe:	bf00      	nop
 8007dc0:	58021000 	.word	0x58021000
 8007dc4:	58020400 	.word	0x58020400
 8007dc8:	24001f88 	.word	0x24001f88

08007dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007dd0:	bf00      	nop
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007dde:	bf00      	nop
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007dec:	bf00      	nop
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
	...

08007df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8007dfc:	4b08      	ldr	r3, [pc, #32]	@ (8007e20 <SysTick_Handler+0x28>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	4a07      	ldr	r2, [pc, #28]	@ (8007e20 <SysTick_Handler+0x28>)
 8007e04:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8007e06:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <SysTick_Handler+0x28>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b09      	cmp	r3, #9
 8007e0c:	d904      	bls.n	8007e18 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8007e0e:	4b04      	ldr	r3, [pc, #16]	@ (8007e20 <SysTick_Handler+0x28>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8007e14:	f7ff ff1c 	bl	8007c50 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e18:	f000 fe1a 	bl	8008a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e1c:	bf00      	nop
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	24000374 	.word	0x24000374

08007e24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007e28:	4802      	ldr	r0, [pc, #8]	@ (8007e34 <DMA1_Stream0_IRQHandler+0x10>)
 8007e2a:	f004 fa81 	bl	800c330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007e2e:	bf00      	nop
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	240002fc 	.word	0x240002fc

08007e38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8007e3c:	4802      	ldr	r0, [pc, #8]	@ (8007e48 <ADC_IRQHandler+0x10>)
 8007e3e:	f001 fc55 	bl	80096ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007e42:	bf00      	nop
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	240000ac 	.word	0x240000ac

08007e4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007e50:	4802      	ldr	r0, [pc, #8]	@ (8007e5c <TIM2_IRQHandler+0x10>)
 8007e52:	f00e fae8 	bl	8016426 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	240003cc 	.word	0x240003cc

08007e60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007e64:	4802      	ldr	r0, [pc, #8]	@ (8007e70 <SPI1_IRQHandler+0x10>)
 8007e66:	f00d fad1 	bl	801540c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007e6a:	bf00      	nop
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	240001ec 	.word	0x240001ec

08007e74 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007e78:	4802      	ldr	r0, [pc, #8]	@ (8007e84 <SPI2_IRQHandler+0x10>)
 8007e7a:	f00d fac7 	bl	801540c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007e7e:	bf00      	nop
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	24000274 	.word	0x24000274

08007e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007e8c:	4802      	ldr	r0, [pc, #8]	@ (8007e98 <USART1_IRQHandler+0x10>)
 8007e8e:	f00f ff9b 	bl	8017dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007e92:	bf00      	nop
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	24000548 	.word	0x24000548

08007e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8007ea0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007ea4:	f005 ff49 	bl	800dd3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007ea8:	bf00      	nop
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007eb0:	4802      	ldr	r0, [pc, #8]	@ (8007ebc <DMA2_Stream0_IRQHandler+0x10>)
 8007eb2:	f004 fa3d 	bl	800c330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007eb6:	bf00      	nop
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	2400011c 	.word	0x2400011c

08007ec0 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8007ec4:	4802      	ldr	r0, [pc, #8]	@ (8007ed0 <I2C5_EV_IRQHandler+0x10>)
 8007ec6:	f006 fb2d 	bl	800e524 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8007eca:	bf00      	nop
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	24000198 	.word	0x24000198

08007ed4 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8007ed8:	4802      	ldr	r0, [pc, #8]	@ (8007ee4 <TIM23_IRQHandler+0x10>)
 8007eda:	f00e faa4 	bl	8016426 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8007ede:	bf00      	nop
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	240004b0 	.word	0x240004b0

08007ee8 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8007eec:	4802      	ldr	r0, [pc, #8]	@ (8007ef8 <TIM24_IRQHandler+0x10>)
 8007eee:	f00e fa9a 	bl	8016426 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8007ef2:	bf00      	nop
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	240004fc 	.word	0x240004fc

08007efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007f00:	4b32      	ldr	r3, [pc, #200]	@ (8007fcc <SystemInit+0xd0>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f06:	4a31      	ldr	r2, [pc, #196]	@ (8007fcc <SystemInit+0xd0>)
 8007f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007f10:	4b2f      	ldr	r3, [pc, #188]	@ (8007fd0 <SystemInit+0xd4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	2b06      	cmp	r3, #6
 8007f1a:	d807      	bhi.n	8007f2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8007fd0 <SystemInit+0xd4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f023 030f 	bic.w	r3, r3, #15
 8007f24:	4a2a      	ldr	r2, [pc, #168]	@ (8007fd0 <SystemInit+0xd4>)
 8007f26:	f043 0307 	orr.w	r3, r3, #7
 8007f2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007f2c:	4b29      	ldr	r3, [pc, #164]	@ (8007fd4 <SystemInit+0xd8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a28      	ldr	r2, [pc, #160]	@ (8007fd4 <SystemInit+0xd8>)
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007f38:	4b26      	ldr	r3, [pc, #152]	@ (8007fd4 <SystemInit+0xd8>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007f3e:	4b25      	ldr	r3, [pc, #148]	@ (8007fd4 <SystemInit+0xd8>)
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4924      	ldr	r1, [pc, #144]	@ (8007fd4 <SystemInit+0xd8>)
 8007f44:	4b24      	ldr	r3, [pc, #144]	@ (8007fd8 <SystemInit+0xdc>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007f4a:	4b21      	ldr	r3, [pc, #132]	@ (8007fd0 <SystemInit+0xd4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d007      	beq.n	8007f66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007f56:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd0 <SystemInit+0xd4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f023 030f 	bic.w	r3, r3, #15
 8007f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007fd0 <SystemInit+0xd4>)
 8007f60:	f043 0307 	orr.w	r3, r3, #7
 8007f64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007f66:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd4 <SystemInit+0xd8>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007f6c:	4b19      	ldr	r3, [pc, #100]	@ (8007fd4 <SystemInit+0xd8>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007f72:	4b18      	ldr	r3, [pc, #96]	@ (8007fd4 <SystemInit+0xd8>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007f78:	4b16      	ldr	r3, [pc, #88]	@ (8007fd4 <SystemInit+0xd8>)
 8007f7a:	4a18      	ldr	r2, [pc, #96]	@ (8007fdc <SystemInit+0xe0>)
 8007f7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007f7e:	4b15      	ldr	r3, [pc, #84]	@ (8007fd4 <SystemInit+0xd8>)
 8007f80:	4a17      	ldr	r2, [pc, #92]	@ (8007fe0 <SystemInit+0xe4>)
 8007f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007f84:	4b13      	ldr	r3, [pc, #76]	@ (8007fd4 <SystemInit+0xd8>)
 8007f86:	4a17      	ldr	r2, [pc, #92]	@ (8007fe4 <SystemInit+0xe8>)
 8007f88:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007f8a:	4b12      	ldr	r3, [pc, #72]	@ (8007fd4 <SystemInit+0xd8>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007f90:	4b10      	ldr	r3, [pc, #64]	@ (8007fd4 <SystemInit+0xd8>)
 8007f92:	4a14      	ldr	r2, [pc, #80]	@ (8007fe4 <SystemInit+0xe8>)
 8007f94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007f96:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd4 <SystemInit+0xd8>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <SystemInit+0xd8>)
 8007f9e:	4a11      	ldr	r2, [pc, #68]	@ (8007fe4 <SystemInit+0xe8>)
 8007fa0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <SystemInit+0xd8>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <SystemInit+0xd8>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a09      	ldr	r2, [pc, #36]	@ (8007fd4 <SystemInit+0xd8>)
 8007fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007fb4:	4b07      	ldr	r3, [pc, #28]	@ (8007fd4 <SystemInit+0xd8>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007fba:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe8 <SystemInit+0xec>)
 8007fbc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007fc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007fc2:	bf00      	nop
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	e000ed00 	.word	0xe000ed00
 8007fd0:	52002000 	.word	0x52002000
 8007fd4:	58024400 	.word	0x58024400
 8007fd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8007fdc:	02020200 	.word	0x02020200
 8007fe0:	01ff0000 	.word	0x01ff0000
 8007fe4:	01010280 	.word	0x01010280
 8007fe8:	52004000 	.word	0x52004000

08007fec <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b098      	sub	sp, #96	@ 0x60
 8007ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ff2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	605a      	str	r2, [r3, #4]
 8007ffc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007ffe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	605a      	str	r2, [r3, #4]
 8008008:	609a      	str	r2, [r3, #8]
 800800a:	60da      	str	r2, [r3, #12]
 800800c:	611a      	str	r2, [r3, #16]
 800800e:	615a      	str	r2, [r3, #20]
 8008010:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	2234      	movs	r2, #52	@ 0x34
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f015 fe4f 	bl	801dcbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800801e:	4b45      	ldr	r3, [pc, #276]	@ (8008134 <MX_TIM1_Init+0x148>)
 8008020:	4a45      	ldr	r2, [pc, #276]	@ (8008138 <MX_TIM1_Init+0x14c>)
 8008022:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008024:	4b43      	ldr	r3, [pc, #268]	@ (8008134 <MX_TIM1_Init+0x148>)
 8008026:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800802a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800802c:	4b41      	ldr	r3, [pc, #260]	@ (8008134 <MX_TIM1_Init+0x148>)
 800802e:	2200      	movs	r2, #0
 8008030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008032:	4b40      	ldr	r3, [pc, #256]	@ (8008134 <MX_TIM1_Init+0x148>)
 8008034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008038:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800803a:	4b3e      	ldr	r3, [pc, #248]	@ (8008134 <MX_TIM1_Init+0x148>)
 800803c:	2200      	movs	r2, #0
 800803e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008040:	4b3c      	ldr	r3, [pc, #240]	@ (8008134 <MX_TIM1_Init+0x148>)
 8008042:	2200      	movs	r2, #0
 8008044:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008046:	4b3b      	ldr	r3, [pc, #236]	@ (8008134 <MX_TIM1_Init+0x148>)
 8008048:	2280      	movs	r2, #128	@ 0x80
 800804a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800804c:	4839      	ldr	r0, [pc, #228]	@ (8008134 <MX_TIM1_Init+0x148>)
 800804e:	f00e f81f 	bl	8016090 <HAL_TIM_PWM_Init>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008058:	f7ff fc52 	bl	8007900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800805c:	2300      	movs	r3, #0
 800805e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008060:	2300      	movs	r3, #0
 8008062:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008064:	2300      	movs	r3, #0
 8008066:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800806c:	4619      	mov	r1, r3
 800806e:	4831      	ldr	r0, [pc, #196]	@ (8008134 <MX_TIM1_Init+0x148>)
 8008070:	f00f fba6 	bl	80177c0 <HAL_TIMEx_MasterConfigSynchronization>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800807a:	f7ff fc41 	bl	8007900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800807e:	2360      	movs	r3, #96	@ 0x60
 8008080:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008086:	2300      	movs	r3, #0
 8008088:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800808a:	2300      	movs	r3, #0
 800808c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800808e:	2300      	movs	r3, #0
 8008090:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008092:	2300      	movs	r3, #0
 8008094:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008096:	2300      	movs	r3, #0
 8008098:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800809a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800809e:	2204      	movs	r2, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4824      	ldr	r0, [pc, #144]	@ (8008134 <MX_TIM1_Init+0x148>)
 80080a4:	f00e fbdc 	bl	8016860 <HAL_TIM_PWM_ConfigChannel>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80080ae:	f7ff fc27 	bl	8007900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80080b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80080b6:	2208      	movs	r2, #8
 80080b8:	4619      	mov	r1, r3
 80080ba:	481e      	ldr	r0, [pc, #120]	@ (8008134 <MX_TIM1_Init+0x148>)
 80080bc:	f00e fbd0 	bl	8016860 <HAL_TIM_PWM_ConfigChannel>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80080c6:	f7ff fc1b 	bl	8007900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80080ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80080ce:	220c      	movs	r2, #12
 80080d0:	4619      	mov	r1, r3
 80080d2:	4818      	ldr	r0, [pc, #96]	@ (8008134 <MX_TIM1_Init+0x148>)
 80080d4:	f00e fbc4 	bl	8016860 <HAL_TIM_PWM_ConfigChannel>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80080de:	f7ff fc0f 	bl	8007900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80080f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80080fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008100:	2300      	movs	r3, #0
 8008102:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008104:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008108:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008112:	1d3b      	adds	r3, r7, #4
 8008114:	4619      	mov	r1, r3
 8008116:	4807      	ldr	r0, [pc, #28]	@ (8008134 <MX_TIM1_Init+0x148>)
 8008118:	f00f fbee 	bl	80178f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008122:	f7ff fbed 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008126:	4803      	ldr	r0, [pc, #12]	@ (8008134 <MX_TIM1_Init+0x148>)
 8008128:	f000 fad2 	bl	80086d0 <HAL_TIM_MspPostInit>

}
 800812c:	bf00      	nop
 800812e:	3760      	adds	r7, #96	@ 0x60
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	24000380 	.word	0x24000380
 8008138:	40010000 	.word	0x40010000

0800813c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008142:	f107 0314 	add.w	r3, r7, #20
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	605a      	str	r2, [r3, #4]
 800814c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	609a      	str	r2, [r3, #8]
 8008158:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800815a:	4b21      	ldr	r3, [pc, #132]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 800815c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008160:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008162:	4b1f      	ldr	r3, [pc, #124]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 8008164:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008168:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800816a:	4b1d      	ldr	r3, [pc, #116]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 800816c:	2200      	movs	r2, #0
 800816e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008170:	4b1b      	ldr	r3, [pc, #108]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 8008172:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008176:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008178:	4b19      	ldr	r3, [pc, #100]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 800817a:	2200      	movs	r2, #0
 800817c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800817e:	4b18      	ldr	r3, [pc, #96]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 8008180:	2280      	movs	r2, #128	@ 0x80
 8008182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008184:	4816      	ldr	r0, [pc, #88]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 8008186:	f00e f8f7 	bl	8016378 <HAL_TIM_IC_Init>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008190:	f7ff fbb6 	bl	8007900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800819c:	f107 0314 	add.w	r3, r7, #20
 80081a0:	4619      	mov	r1, r3
 80081a2:	480f      	ldr	r0, [pc, #60]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 80081a4:	f00f fb0c 	bl	80177c0 <HAL_TIMEx_MasterConfigSynchronization>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80081ae:	f7ff fba7 	bl	8007900 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80081b2:	2300      	movs	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80081b6:	2301      	movs	r3, #1
 80081b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80081c2:	1d3b      	adds	r3, r7, #4
 80081c4:	2200      	movs	r2, #0
 80081c6:	4619      	mov	r1, r3
 80081c8:	4805      	ldr	r0, [pc, #20]	@ (80081e0 <MX_TIM2_Init+0xa4>)
 80081ca:	f00e faad 	bl	8016728 <HAL_TIM_IC_ConfigChannel>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80081d4:	f7ff fb94 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80081d8:	bf00      	nop
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	240003cc 	.word	0x240003cc

080081e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08a      	sub	sp, #40	@ 0x28
 80081e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081ea:	f107 031c 	add.w	r3, r7, #28
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	605a      	str	r2, [r3, #4]
 80081f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80081f6:	463b      	mov	r3, r7
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	609a      	str	r2, [r3, #8]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	611a      	str	r2, [r3, #16]
 8008204:	615a      	str	r2, [r3, #20]
 8008206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008208:	4b32      	ldr	r3, [pc, #200]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 800820a:	4a33      	ldr	r2, [pc, #204]	@ (80082d8 <MX_TIM3_Init+0xf4>)
 800820c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 800820e:	4b31      	ldr	r3, [pc, #196]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 8008210:	221c      	movs	r2, #28
 8008212:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008214:	4b2f      	ldr	r3, [pc, #188]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 8008216:	2200      	movs	r2, #0
 8008218:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800821a:	4b2e      	ldr	r3, [pc, #184]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 800821c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008220:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008222:	4b2c      	ldr	r3, [pc, #176]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 8008224:	2200      	movs	r2, #0
 8008226:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008228:	4b2a      	ldr	r3, [pc, #168]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 800822a:	2200      	movs	r2, #0
 800822c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800822e:	4829      	ldr	r0, [pc, #164]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 8008230:	f00d ff2e 	bl	8016090 <HAL_TIM_PWM_Init>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800823a:	f7ff fb61 	bl	8007900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800823e:	2300      	movs	r3, #0
 8008240:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008246:	f107 031c 	add.w	r3, r7, #28
 800824a:	4619      	mov	r1, r3
 800824c:	4821      	ldr	r0, [pc, #132]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 800824e:	f00f fab7 	bl	80177c0 <HAL_TIMEx_MasterConfigSynchronization>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008258:	f7ff fb52 	bl	8007900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800825c:	2360      	movs	r3, #96	@ 0x60
 800825e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008264:	2300      	movs	r3, #0
 8008266:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008268:	2300      	movs	r3, #0
 800826a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800826c:	463b      	mov	r3, r7
 800826e:	2200      	movs	r2, #0
 8008270:	4619      	mov	r1, r3
 8008272:	4818      	ldr	r0, [pc, #96]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 8008274:	f00e faf4 	bl	8016860 <HAL_TIM_PWM_ConfigChannel>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800827e:	f7ff fb3f 	bl	8007900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008282:	463b      	mov	r3, r7
 8008284:	2204      	movs	r2, #4
 8008286:	4619      	mov	r1, r3
 8008288:	4812      	ldr	r0, [pc, #72]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 800828a:	f00e fae9 	bl	8016860 <HAL_TIM_PWM_ConfigChannel>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008294:	f7ff fb34 	bl	8007900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008298:	463b      	mov	r3, r7
 800829a:	2208      	movs	r2, #8
 800829c:	4619      	mov	r1, r3
 800829e:	480d      	ldr	r0, [pc, #52]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 80082a0:	f00e fade 	bl	8016860 <HAL_TIM_PWM_ConfigChannel>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80082aa:	f7ff fb29 	bl	8007900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80082ae:	463b      	mov	r3, r7
 80082b0:	220c      	movs	r2, #12
 80082b2:	4619      	mov	r1, r3
 80082b4:	4807      	ldr	r0, [pc, #28]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 80082b6:	f00e fad3 	bl	8016860 <HAL_TIM_PWM_ConfigChannel>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80082c0:	f7ff fb1e 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80082c4:	4803      	ldr	r0, [pc, #12]	@ (80082d4 <MX_TIM3_Init+0xf0>)
 80082c6:	f000 fa03 	bl	80086d0 <HAL_TIM_MspPostInit>

}
 80082ca:	bf00      	nop
 80082cc:	3728      	adds	r7, #40	@ 0x28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	24000418 	.word	0x24000418
 80082d8:	40000400 	.word	0x40000400

080082dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082e2:	f107 0310 	add.w	r3, r7, #16
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	605a      	str	r2, [r3, #4]
 80082ec:	609a      	str	r2, [r3, #8]
 80082ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082f0:	1d3b      	adds	r3, r7, #4
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	605a      	str	r2, [r3, #4]
 80082f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80082fa:	4b21      	ldr	r3, [pc, #132]	@ (8008380 <MX_TIM8_Init+0xa4>)
 80082fc:	4a21      	ldr	r2, [pc, #132]	@ (8008384 <MX_TIM8_Init+0xa8>)
 80082fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008300:	4b1f      	ldr	r3, [pc, #124]	@ (8008380 <MX_TIM8_Init+0xa4>)
 8008302:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008306:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008308:	4b1d      	ldr	r3, [pc, #116]	@ (8008380 <MX_TIM8_Init+0xa4>)
 800830a:	2200      	movs	r2, #0
 800830c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 800830e:	4b1c      	ldr	r3, [pc, #112]	@ (8008380 <MX_TIM8_Init+0xa4>)
 8008310:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008314:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008316:	4b1a      	ldr	r3, [pc, #104]	@ (8008380 <MX_TIM8_Init+0xa4>)
 8008318:	2200      	movs	r2, #0
 800831a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800831c:	4b18      	ldr	r3, [pc, #96]	@ (8008380 <MX_TIM8_Init+0xa4>)
 800831e:	2200      	movs	r2, #0
 8008320:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008322:	4b17      	ldr	r3, [pc, #92]	@ (8008380 <MX_TIM8_Init+0xa4>)
 8008324:	2200      	movs	r2, #0
 8008326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008328:	4815      	ldr	r0, [pc, #84]	@ (8008380 <MX_TIM8_Init+0xa4>)
 800832a:	f00d fcd0 	bl	8015cce <HAL_TIM_Base_Init>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008334:	f7ff fae4 	bl	8007900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800833c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800833e:	f107 0310 	add.w	r3, r7, #16
 8008342:	4619      	mov	r1, r3
 8008344:	480e      	ldr	r0, [pc, #56]	@ (8008380 <MX_TIM8_Init+0xa4>)
 8008346:	f00e fb9f 	bl	8016a88 <HAL_TIM_ConfigClockSource>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008350:	f7ff fad6 	bl	8007900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008354:	2320      	movs	r3, #32
 8008356:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008358:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800835c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008362:	1d3b      	adds	r3, r7, #4
 8008364:	4619      	mov	r1, r3
 8008366:	4806      	ldr	r0, [pc, #24]	@ (8008380 <MX_TIM8_Init+0xa4>)
 8008368:	f00f fa2a 	bl	80177c0 <HAL_TIMEx_MasterConfigSynchronization>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008372:	f7ff fac5 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008376:	bf00      	nop
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	24000464 	.word	0x24000464
 8008384:	40010400 	.word	0x40010400

08008388 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	@ 0x28
 800838c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800838e:	f107 031c 	add.w	r3, r7, #28
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	605a      	str	r2, [r3, #4]
 8008398:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800839a:	463b      	mov	r3, r7
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	609a      	str	r2, [r3, #8]
 80083a4:	60da      	str	r2, [r3, #12]
 80083a6:	611a      	str	r2, [r3, #16]
 80083a8:	615a      	str	r2, [r3, #20]
 80083aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80083ac:	4b20      	ldr	r3, [pc, #128]	@ (8008430 <MX_TIM23_Init+0xa8>)
 80083ae:	4a21      	ldr	r2, [pc, #132]	@ (8008434 <MX_TIM23_Init+0xac>)
 80083b0:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 99;
 80083b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008430 <MX_TIM23_Init+0xa8>)
 80083b4:	2263      	movs	r2, #99	@ 0x63
 80083b6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008430 <MX_TIM23_Init+0xa8>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1374;
 80083be:	4b1c      	ldr	r3, [pc, #112]	@ (8008430 <MX_TIM23_Init+0xa8>)
 80083c0:	f240 525e 	movw	r2, #1374	@ 0x55e
 80083c4:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008430 <MX_TIM23_Init+0xa8>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083cc:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <MX_TIM23_Init+0xa8>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim23) != HAL_OK)
 80083d2:	4817      	ldr	r0, [pc, #92]	@ (8008430 <MX_TIM23_Init+0xa8>)
 80083d4:	f00d fe05 	bl	8015fe2 <HAL_TIM_OC_Init>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 80083de:	f7ff fa8f 	bl	8007900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80083ea:	f107 031c 	add.w	r3, r7, #28
 80083ee:	4619      	mov	r1, r3
 80083f0:	480f      	ldr	r0, [pc, #60]	@ (8008430 <MX_TIM23_Init+0xa8>)
 80083f2:	f00f f9e5 	bl	80177c0 <HAL_TIMEx_MasterConfigSynchronization>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 80083fc:	f7ff fa80 	bl	8007900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8008400:	2300      	movs	r3, #0
 8008402:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008408:	2300      	movs	r3, #0
 800840a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800840c:	2300      	movs	r3, #0
 800840e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008410:	463b      	mov	r3, r7
 8008412:	2200      	movs	r2, #0
 8008414:	4619      	mov	r1, r3
 8008416:	4806      	ldr	r0, [pc, #24]	@ (8008430 <MX_TIM23_Init+0xa8>)
 8008418:	f00e f90c 	bl	8016634 <HAL_TIM_OC_ConfigChannel>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 8008422:	f7ff fa6d 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8008426:	bf00      	nop
 8008428:	3728      	adds	r7, #40	@ 0x28
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	240004b0 	.word	0x240004b0
 8008434:	4000e000 	.word	0x4000e000

08008438 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b08a      	sub	sp, #40	@ 0x28
 800843c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800843e:	f107 031c 	add.w	r3, r7, #28
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	605a      	str	r2, [r3, #4]
 8008448:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800844a:	463b      	mov	r3, r7
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	605a      	str	r2, [r3, #4]
 8008452:	609a      	str	r2, [r3, #8]
 8008454:	60da      	str	r2, [r3, #12]
 8008456:	611a      	str	r2, [r3, #16]
 8008458:	615a      	str	r2, [r3, #20]
 800845a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800845c:	4b20      	ldr	r3, [pc, #128]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 800845e:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <MX_TIM24_Init+0xac>)
 8008460:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 999;
 8008462:	4b1f      	ldr	r3, [pc, #124]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 8008464:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008468:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800846a:	4b1d      	ldr	r3, [pc, #116]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 800846c:	2200      	movs	r2, #0
 800846e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 27499;
 8008470:	4b1b      	ldr	r3, [pc, #108]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 8008472:	f646 326b 	movw	r2, #27499	@ 0x6b6b
 8008476:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008478:	4b19      	ldr	r3, [pc, #100]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800847e:	4b18      	ldr	r3, [pc, #96]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 8008480:	2200      	movs	r2, #0
 8008482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim24) != HAL_OK)
 8008484:	4816      	ldr	r0, [pc, #88]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 8008486:	f00d fdac 	bl	8015fe2 <HAL_TIM_OC_Init>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <MX_TIM24_Init+0x5c>
  {
    Error_Handler();
 8008490:	f7ff fa36 	bl	8007900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008494:	2300      	movs	r3, #0
 8008496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008498:	2300      	movs	r3, #0
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800849c:	f107 031c 	add.w	r3, r7, #28
 80084a0:	4619      	mov	r1, r3
 80084a2:	480f      	ldr	r0, [pc, #60]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 80084a4:	f00f f98c 	bl	80177c0 <HAL_TIMEx_MasterConfigSynchronization>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <MX_TIM24_Init+0x7a>
  {
    Error_Handler();
 80084ae:	f7ff fa27 	bl	8007900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80084b2:	2300      	movs	r3, #0
 80084b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80084be:	2300      	movs	r3, #0
 80084c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084c2:	463b      	mov	r3, r7
 80084c4:	2200      	movs	r2, #0
 80084c6:	4619      	mov	r1, r3
 80084c8:	4805      	ldr	r0, [pc, #20]	@ (80084e0 <MX_TIM24_Init+0xa8>)
 80084ca:	f00e f8b3 	bl	8016634 <HAL_TIM_OC_ConfigChannel>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <MX_TIM24_Init+0xa0>
  {
    Error_Handler();
 80084d4:	f7ff fa14 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80084d8:	bf00      	nop
 80084da:	3728      	adds	r7, #40	@ 0x28
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	240004fc 	.word	0x240004fc
 80084e4:	4000e400 	.word	0x4000e400

080084e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a16      	ldr	r2, [pc, #88]	@ (8008550 <HAL_TIM_PWM_MspInit+0x68>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d10f      	bne.n	800851a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084fa:	4b16      	ldr	r3, [pc, #88]	@ (8008554 <HAL_TIM_PWM_MspInit+0x6c>)
 80084fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008500:	4a14      	ldr	r2, [pc, #80]	@ (8008554 <HAL_TIM_PWM_MspInit+0x6c>)
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800850a:	4b12      	ldr	r3, [pc, #72]	@ (8008554 <HAL_TIM_PWM_MspInit+0x6c>)
 800850c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008518:	e013      	b.n	8008542 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a0e      	ldr	r2, [pc, #56]	@ (8008558 <HAL_TIM_PWM_MspInit+0x70>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d10e      	bne.n	8008542 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008524:	4b0b      	ldr	r3, [pc, #44]	@ (8008554 <HAL_TIM_PWM_MspInit+0x6c>)
 8008526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800852a:	4a0a      	ldr	r2, [pc, #40]	@ (8008554 <HAL_TIM_PWM_MspInit+0x6c>)
 800852c:	f043 0302 	orr.w	r3, r3, #2
 8008530:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008534:	4b07      	ldr	r3, [pc, #28]	@ (8008554 <HAL_TIM_PWM_MspInit+0x6c>)
 8008536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	60bb      	str	r3, [r7, #8]
 8008540:	68bb      	ldr	r3, [r7, #8]
}
 8008542:	bf00      	nop
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	40010000 	.word	0x40010000
 8008554:	58024400 	.word	0x58024400
 8008558:	40000400 	.word	0x40000400

0800855c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	@ 0x28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008564:	f107 0314 	add.w	r3, r7, #20
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	605a      	str	r2, [r3, #4]
 800856e:	609a      	str	r2, [r3, #8]
 8008570:	60da      	str	r2, [r3, #12]
 8008572:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857c:	d135      	bne.n	80085ea <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800857e:	4b1d      	ldr	r3, [pc, #116]	@ (80085f4 <HAL_TIM_IC_MspInit+0x98>)
 8008580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008584:	4a1b      	ldr	r2, [pc, #108]	@ (80085f4 <HAL_TIM_IC_MspInit+0x98>)
 8008586:	f043 0301 	orr.w	r3, r3, #1
 800858a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800858e:	4b19      	ldr	r3, [pc, #100]	@ (80085f4 <HAL_TIM_IC_MspInit+0x98>)
 8008590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	613b      	str	r3, [r7, #16]
 800859a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800859c:	4b15      	ldr	r3, [pc, #84]	@ (80085f4 <HAL_TIM_IC_MspInit+0x98>)
 800859e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085a2:	4a14      	ldr	r2, [pc, #80]	@ (80085f4 <HAL_TIM_IC_MspInit+0x98>)
 80085a4:	f043 0301 	orr.w	r3, r3, #1
 80085a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80085ac:	4b11      	ldr	r3, [pc, #68]	@ (80085f4 <HAL_TIM_IC_MspInit+0x98>)
 80085ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80085ba:	2301      	movs	r3, #1
 80085bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085be:	2302      	movs	r3, #2
 80085c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c6:	2300      	movs	r3, #0
 80085c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80085ca:	2301      	movs	r3, #1
 80085cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ce:	f107 0314 	add.w	r3, r7, #20
 80085d2:	4619      	mov	r1, r3
 80085d4:	4808      	ldr	r0, [pc, #32]	@ (80085f8 <HAL_TIM_IC_MspInit+0x9c>)
 80085d6:	f005 f9d7 	bl	800d988 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80085da:	2200      	movs	r2, #0
 80085dc:	2101      	movs	r1, #1
 80085de:	201c      	movs	r0, #28
 80085e0:	f002 fad3 	bl	800ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80085e4:	201c      	movs	r0, #28
 80085e6:	f002 faea 	bl	800abbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80085ea:	bf00      	nop
 80085ec:	3728      	adds	r7, #40	@ 0x28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	58024400 	.word	0x58024400
 80085f8:	58020000 	.word	0x58020000

080085fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a0b      	ldr	r2, [pc, #44]	@ (8008638 <HAL_TIM_Base_MspInit+0x3c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d10e      	bne.n	800862c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800860e:	4b0b      	ldr	r3, [pc, #44]	@ (800863c <HAL_TIM_Base_MspInit+0x40>)
 8008610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008614:	4a09      	ldr	r2, [pc, #36]	@ (800863c <HAL_TIM_Base_MspInit+0x40>)
 8008616:	f043 0302 	orr.w	r3, r3, #2
 800861a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800861e:	4b07      	ldr	r3, [pc, #28]	@ (800863c <HAL_TIM_Base_MspInit+0x40>)
 8008620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800862c:	bf00      	nop
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	40010400 	.word	0x40010400
 800863c:	58024400 	.word	0x58024400

08008640 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM23)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a1d      	ldr	r2, [pc, #116]	@ (80086c4 <HAL_TIM_OC_MspInit+0x84>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d117      	bne.n	8008682 <HAL_TIM_OC_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8008652:	4b1d      	ldr	r3, [pc, #116]	@ (80086c8 <HAL_TIM_OC_MspInit+0x88>)
 8008654:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008658:	4a1b      	ldr	r2, [pc, #108]	@ (80086c8 <HAL_TIM_OC_MspInit+0x88>)
 800865a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800865e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8008662:	4b19      	ldr	r3, [pc, #100]	@ (80086c8 <HAL_TIM_OC_MspInit+0x88>)
 8008664:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8008670:	2200      	movs	r2, #0
 8008672:	2100      	movs	r1, #0
 8008674:	20a1      	movs	r0, #161	@ 0xa1
 8008676:	f002 fa88 	bl	800ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800867a:	20a1      	movs	r0, #161	@ 0xa1
 800867c:	f002 fa9f 	bl	800abbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8008680:	e01b      	b.n	80086ba <HAL_TIM_OC_MspInit+0x7a>
  else if(tim_ocHandle->Instance==TIM24)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a11      	ldr	r2, [pc, #68]	@ (80086cc <HAL_TIM_OC_MspInit+0x8c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d116      	bne.n	80086ba <HAL_TIM_OC_MspInit+0x7a>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800868c:	4b0e      	ldr	r3, [pc, #56]	@ (80086c8 <HAL_TIM_OC_MspInit+0x88>)
 800868e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008692:	4a0d      	ldr	r2, [pc, #52]	@ (80086c8 <HAL_TIM_OC_MspInit+0x88>)
 8008694:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008698:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800869c:	4b0a      	ldr	r3, [pc, #40]	@ (80086c8 <HAL_TIM_OC_MspInit+0x88>)
 800869e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80086a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086a6:	60bb      	str	r3, [r7, #8]
 80086a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 80086aa:	2200      	movs	r2, #0
 80086ac:	2100      	movs	r1, #0
 80086ae:	20a2      	movs	r0, #162	@ 0xa2
 80086b0:	f002 fa6b 	bl	800ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 80086b4:	20a2      	movs	r0, #162	@ 0xa2
 80086b6:	f002 fa82 	bl	800abbe <HAL_NVIC_EnableIRQ>
}
 80086ba:	bf00      	nop
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	4000e000 	.word	0x4000e000
 80086c8:	58024400 	.word	0x58024400
 80086cc:	4000e400 	.word	0x4000e400

080086d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	@ 0x28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d8:	f107 0314 	add.w	r3, r7, #20
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a26      	ldr	r2, [pc, #152]	@ (8008788 <HAL_TIM_MspPostInit+0xb8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d120      	bne.n	8008734 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80086f2:	4b26      	ldr	r3, [pc, #152]	@ (800878c <HAL_TIM_MspPostInit+0xbc>)
 80086f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086f8:	4a24      	ldr	r2, [pc, #144]	@ (800878c <HAL_TIM_MspPostInit+0xbc>)
 80086fa:	f043 0310 	orr.w	r3, r3, #16
 80086fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008702:	4b22      	ldr	r3, [pc, #136]	@ (800878c <HAL_TIM_MspPostInit+0xbc>)
 8008704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008710:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008716:	2302      	movs	r3, #2
 8008718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800871a:	2300      	movs	r3, #0
 800871c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800871e:	2300      	movs	r3, #0
 8008720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008722:	2301      	movs	r3, #1
 8008724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008726:	f107 0314 	add.w	r3, r7, #20
 800872a:	4619      	mov	r1, r3
 800872c:	4818      	ldr	r0, [pc, #96]	@ (8008790 <HAL_TIM_MspPostInit+0xc0>)
 800872e:	f005 f92b 	bl	800d988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008732:	e024      	b.n	800877e <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a16      	ldr	r2, [pc, #88]	@ (8008794 <HAL_TIM_MspPostInit+0xc4>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d11f      	bne.n	800877e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800873e:	4b13      	ldr	r3, [pc, #76]	@ (800878c <HAL_TIM_MspPostInit+0xbc>)
 8008740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008744:	4a11      	ldr	r2, [pc, #68]	@ (800878c <HAL_TIM_MspPostInit+0xbc>)
 8008746:	f043 0304 	orr.w	r3, r3, #4
 800874a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800874e:	4b0f      	ldr	r3, [pc, #60]	@ (800878c <HAL_TIM_MspPostInit+0xbc>)
 8008750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800875c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008762:	2302      	movs	r3, #2
 8008764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008766:	2300      	movs	r3, #0
 8008768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800876a:	2300      	movs	r3, #0
 800876c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800876e:	2302      	movs	r3, #2
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008772:	f107 0314 	add.w	r3, r7, #20
 8008776:	4619      	mov	r1, r3
 8008778:	4807      	ldr	r0, [pc, #28]	@ (8008798 <HAL_TIM_MspPostInit+0xc8>)
 800877a:	f005 f905 	bl	800d988 <HAL_GPIO_Init>
}
 800877e:	bf00      	nop
 8008780:	3728      	adds	r7, #40	@ 0x28
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	40010000 	.word	0x40010000
 800878c:	58024400 	.word	0x58024400
 8008790:	58021000 	.word	0x58021000
 8008794:	40000400 	.word	0x40000400
 8008798:	58020800 	.word	0x58020800

0800879c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80087a0:	4b22      	ldr	r3, [pc, #136]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087a2:	4a23      	ldr	r2, [pc, #140]	@ (8008830 <MX_USART1_UART_Init+0x94>)
 80087a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80087a6:	4b21      	ldr	r3, [pc, #132]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80087ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80087ae:	4b1f      	ldr	r3, [pc, #124]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80087b4:	4b1d      	ldr	r3, [pc, #116]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80087ba:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087bc:	2200      	movs	r2, #0
 80087be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80087c0:	4b1a      	ldr	r3, [pc, #104]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087c2:	220c      	movs	r2, #12
 80087c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087c6:	4b19      	ldr	r3, [pc, #100]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80087cc:	4b17      	ldr	r3, [pc, #92]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087d2:	4b16      	ldr	r3, [pc, #88]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80087d8:	4b14      	ldr	r3, [pc, #80]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087da:	2200      	movs	r2, #0
 80087dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80087de:	4b13      	ldr	r3, [pc, #76]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80087e4:	4811      	ldr	r0, [pc, #68]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087e6:	f00f f931 	bl	8017a4c <HAL_UART_Init>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80087f0:	f7ff f886 	bl	8007900 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80087f4:	2100      	movs	r1, #0
 80087f6:	480d      	ldr	r0, [pc, #52]	@ (800882c <MX_USART1_UART_Init+0x90>)
 80087f8:	f011 ffe1 	bl	801a7be <HAL_UARTEx_SetTxFifoThreshold>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008802:	f7ff f87d 	bl	8007900 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008806:	2100      	movs	r1, #0
 8008808:	4808      	ldr	r0, [pc, #32]	@ (800882c <MX_USART1_UART_Init+0x90>)
 800880a:	f012 f816 	bl	801a83a <HAL_UARTEx_SetRxFifoThreshold>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008814:	f7ff f874 	bl	8007900 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008818:	4804      	ldr	r0, [pc, #16]	@ (800882c <MX_USART1_UART_Init+0x90>)
 800881a:	f011 ff97 	bl	801a74c <HAL_UARTEx_DisableFifoMode>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008824:	f7ff f86c 	bl	8007900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008828:	bf00      	nop
 800882a:	bd80      	pop	{r7, pc}
 800882c:	24000548 	.word	0x24000548
 8008830:	40011000 	.word	0x40011000

08008834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b0b8      	sub	sp, #224	@ 0xe0
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800883c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	609a      	str	r2, [r3, #8]
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800884c:	f107 0310 	add.w	r3, r7, #16
 8008850:	22b8      	movs	r2, #184	@ 0xb8
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f015 fa31 	bl	801dcbc <memset>
  if(uartHandle->Instance==USART1)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a2b      	ldr	r2, [pc, #172]	@ (800890c <HAL_UART_MspInit+0xd8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d14e      	bne.n	8008902 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008864:	f04f 0201 	mov.w	r2, #1
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008870:	2300      	movs	r3, #0
 8008872:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008876:	f107 0310 	add.w	r3, r7, #16
 800887a:	4618      	mov	r0, r3
 800887c:	f008 fe8c 	bl	8011598 <HAL_RCCEx_PeriphCLKConfig>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008886:	f7ff f83b 	bl	8007900 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800888a:	4b21      	ldr	r3, [pc, #132]	@ (8008910 <HAL_UART_MspInit+0xdc>)
 800888c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008890:	4a1f      	ldr	r2, [pc, #124]	@ (8008910 <HAL_UART_MspInit+0xdc>)
 8008892:	f043 0310 	orr.w	r3, r3, #16
 8008896:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800889a:	4b1d      	ldr	r3, [pc, #116]	@ (8008910 <HAL_UART_MspInit+0xdc>)
 800889c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088a8:	4b19      	ldr	r3, [pc, #100]	@ (8008910 <HAL_UART_MspInit+0xdc>)
 80088aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088ae:	4a18      	ldr	r2, [pc, #96]	@ (8008910 <HAL_UART_MspInit+0xdc>)
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80088b8:	4b15      	ldr	r3, [pc, #84]	@ (8008910 <HAL_UART_MspInit+0xdc>)
 80088ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	60bb      	str	r3, [r7, #8]
 80088c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80088c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80088ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ce:	2302      	movs	r3, #2
 80088d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088da:	2300      	movs	r3, #0
 80088dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80088e0:	2307      	movs	r3, #7
 80088e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088e6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80088ea:	4619      	mov	r1, r3
 80088ec:	4809      	ldr	r0, [pc, #36]	@ (8008914 <HAL_UART_MspInit+0xe0>)
 80088ee:	f005 f84b 	bl	800d988 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80088f2:	2200      	movs	r2, #0
 80088f4:	2100      	movs	r1, #0
 80088f6:	2025      	movs	r0, #37	@ 0x25
 80088f8:	f002 f947 	bl	800ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80088fc:	2025      	movs	r0, #37	@ 0x25
 80088fe:	f002 f95e 	bl	800abbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008902:	bf00      	nop
 8008904:	37e0      	adds	r7, #224	@ 0xe0
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40011000 	.word	0x40011000
 8008910:	58024400 	.word	0x58024400
 8008914:	58020000 	.word	0x58020000

08008918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008950 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800891c:	f7ff faee 	bl	8007efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008920:	480c      	ldr	r0, [pc, #48]	@ (8008954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008922:	490d      	ldr	r1, [pc, #52]	@ (8008958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008924:	4a0d      	ldr	r2, [pc, #52]	@ (800895c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008928:	e002      	b.n	8008930 <LoopCopyDataInit>

0800892a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800892a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800892c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800892e:	3304      	adds	r3, #4

08008930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008934:	d3f9      	bcc.n	800892a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008936:	4a0a      	ldr	r2, [pc, #40]	@ (8008960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008938:	4c0a      	ldr	r4, [pc, #40]	@ (8008964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800893a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800893c:	e001      	b.n	8008942 <LoopFillZerobss>

0800893e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800893e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008940:	3204      	adds	r2, #4

08008942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008944:	d3fb      	bcc.n	800893e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008946:	f015 f9c7 	bl	801dcd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800894a:	f7fc f8ad 	bl	8004aa8 <main>
  bx  lr
 800894e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008950:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008954:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008958:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800895c:	08020548 	.word	0x08020548
  ldr r2, =_sbss
 8008960:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8008964:	24000944 	.word	0x24000944

08008968 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008968:	e7fe      	b.n	8008968 <ADC3_IRQHandler>
	...

0800896c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008972:	2003      	movs	r0, #3
 8008974:	f002 f8fe 	bl	800ab74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008978:	f008 fc38 	bl	80111ec <HAL_RCC_GetSysClockFreq>
 800897c:	4602      	mov	r2, r0
 800897e:	4b15      	ldr	r3, [pc, #84]	@ (80089d4 <HAL_Init+0x68>)
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	f003 030f 	and.w	r3, r3, #15
 8008988:	4913      	ldr	r1, [pc, #76]	@ (80089d8 <HAL_Init+0x6c>)
 800898a:	5ccb      	ldrb	r3, [r1, r3]
 800898c:	f003 031f 	and.w	r3, r3, #31
 8008990:	fa22 f303 	lsr.w	r3, r2, r3
 8008994:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008996:	4b0f      	ldr	r3, [pc, #60]	@ (80089d4 <HAL_Init+0x68>)
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f003 030f 	and.w	r3, r3, #15
 800899e:	4a0e      	ldr	r2, [pc, #56]	@ (80089d8 <HAL_Init+0x6c>)
 80089a0:	5cd3      	ldrb	r3, [r2, r3]
 80089a2:	f003 031f 	and.w	r3, r3, #31
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ac:	4a0b      	ldr	r2, [pc, #44]	@ (80089dc <HAL_Init+0x70>)
 80089ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089b0:	4a0b      	ldr	r2, [pc, #44]	@ (80089e0 <HAL_Init+0x74>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80089b6:	200f      	movs	r0, #15
 80089b8:	f000 f814 	bl	80089e4 <HAL_InitTick>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e002      	b.n	80089cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80089c6:	f7ff f929 	bl	8007c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	58024400 	.word	0x58024400
 80089d8:	0801e790 	.word	0x0801e790
 80089dc:	24000008 	.word	0x24000008
 80089e0:	24000004 	.word	0x24000004

080089e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80089ec:	4b15      	ldr	r3, [pc, #84]	@ (8008a44 <HAL_InitTick+0x60>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e021      	b.n	8008a3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80089f8:	4b13      	ldr	r3, [pc, #76]	@ (8008a48 <HAL_InitTick+0x64>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	4b11      	ldr	r3, [pc, #68]	@ (8008a44 <HAL_InitTick+0x60>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f002 f8e3 	bl	800abda <HAL_SYSTICK_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e00e      	b.n	8008a3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b0f      	cmp	r3, #15
 8008a22:	d80a      	bhi.n	8008a3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a24:	2200      	movs	r2, #0
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	f002 f8ad 	bl	800ab8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a30:	4a06      	ldr	r2, [pc, #24]	@ (8008a4c <HAL_InitTick+0x68>)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e000      	b.n	8008a3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	24000010 	.word	0x24000010
 8008a48:	24000004 	.word	0x24000004
 8008a4c:	2400000c 	.word	0x2400000c

08008a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008a54:	4b06      	ldr	r3, [pc, #24]	@ (8008a70 <HAL_IncTick+0x20>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b06      	ldr	r3, [pc, #24]	@ (8008a74 <HAL_IncTick+0x24>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4413      	add	r3, r2
 8008a60:	4a04      	ldr	r2, [pc, #16]	@ (8008a74 <HAL_IncTick+0x24>)
 8008a62:	6013      	str	r3, [r2, #0]
}
 8008a64:	bf00      	nop
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	24000010 	.word	0x24000010
 8008a74:	240005dc 	.word	0x240005dc

08008a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8008a7c:	4b03      	ldr	r3, [pc, #12]	@ (8008a8c <HAL_GetTick+0x14>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	240005dc 	.word	0x240005dc

08008a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a98:	f7ff ffee 	bl	8008a78 <HAL_GetTick>
 8008a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa8:	d005      	beq.n	8008ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad4 <HAL_Delay+0x44>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008ab6:	bf00      	nop
 8008ab8:	f7ff ffde 	bl	8008a78 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d8f7      	bhi.n	8008ab8 <HAL_Delay+0x28>
  {
  }
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	24000010 	.word	0x24000010

08008ad8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	609a      	str	r2, [r3, #8]
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	609a      	str	r2, [r3, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a18      	ldr	r2, [pc, #96]	@ (8008bb0 <LL_ADC_SetChannelPreselection+0x70>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d027      	beq.n	8008ba2 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d107      	bne.n	8008b6c <LL_ADC_SetChannelPreselection+0x2c>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	0e9b      	lsrs	r3, r3, #26
 8008b60:	f003 031f 	and.w	r3, r3, #31
 8008b64:	2201      	movs	r2, #1
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	e015      	b.n	8008b98 <LL_ADC_SetChannelPreselection+0x58>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	fa93 f3a3 	rbit	r3, r3
 8008b76:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8008b82:	2320      	movs	r3, #32
 8008b84:	e003      	b.n	8008b8e <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	fab3 f383 	clz	r3, r3
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 031f 	and.w	r3, r3, #31
 8008b92:	2201      	movs	r2, #1
 8008b94:	fa02 f303 	lsl.w	r3, r2, r3
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	69d2      	ldr	r2, [r2, #28]
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	58026000 	.word	0x58026000

08008bb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3360      	adds	r3, #96	@ 0x60
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4a10      	ldr	r2, [pc, #64]	@ (8008c14 <LL_ADC_SetOffset+0x60>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d10b      	bne.n	8008bf0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8008bee:	e00b      	b.n	8008c08 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	430b      	orrs	r3, r1
 8008c02:	431a      	orrs	r2, r3
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	601a      	str	r2, [r3, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	371c      	adds	r7, #28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	58026000 	.word	0x58026000

08008c18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3360      	adds	r3, #96	@ 0x60
 8008c26:	461a      	mov	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f003 031f 	and.w	r3, r3, #31
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	431a      	orrs	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	611a      	str	r2, [r3, #16]
}
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4a0c      	ldr	r2, [pc, #48]	@ (8008cb8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00e      	beq.n	8008caa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3360      	adds	r3, #96	@ 0x60
 8008c90:	461a      	mov	r2, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	601a      	str	r2, [r3, #0]
  }
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	58026000 	.word	0x58026000

08008cbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4a0c      	ldr	r2, [pc, #48]	@ (8008cfc <LL_ADC_SetOffsetSaturation+0x40>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10e      	bne.n	8008cee <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3360      	adds	r3, #96	@ 0x60
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8008cee:	bf00      	nop
 8008cf0:	371c      	adds	r7, #28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	58026000 	.word	0x58026000

08008d00 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8008d40 <LL_ADC_SetOffsetSign+0x40>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d10e      	bne.n	8008d32 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3360      	adds	r3, #96	@ 0x60
 8008d18:	461a      	mov	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8008d32:	bf00      	nop
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	58026000 	.word	0x58026000

08008d44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3360      	adds	r3, #96	@ 0x60
 8008d54:	461a      	mov	r2, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4a0c      	ldr	r2, [pc, #48]	@ (8008d94 <LL_ADC_SetOffsetState+0x50>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d108      	bne.n	8008d78 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	431a      	orrs	r2, r3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8008d76:	e007      	b.n	8008d88 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	431a      	orrs	r2, r3
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	601a      	str	r2, [r3, #0]
}
 8008d88:	bf00      	nop
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	58026000 	.word	0x58026000

08008d98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e000      	b.n	8008db2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b087      	sub	sp, #28
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3330      	adds	r3, #48	@ 0x30
 8008dce:	461a      	mov	r2, r3
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	0a1b      	lsrs	r3, r3, #8
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	f003 030c 	and.w	r3, r3, #12
 8008dda:	4413      	add	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f003 031f 	and.w	r3, r3, #31
 8008de8:	211f      	movs	r1, #31
 8008dea:	fa01 f303 	lsl.w	r3, r1, r3
 8008dee:	43db      	mvns	r3, r3
 8008df0:	401a      	ands	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	0e9b      	lsrs	r3, r3, #26
 8008df6:	f003 011f 	and.w	r1, r3, #31
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f003 031f 	and.w	r3, r3, #31
 8008e00:	fa01 f303 	lsl.w	r3, r1, r3
 8008e04:	431a      	orrs	r2, r3
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f023 0203 	bic.w	r2, r3, #3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60da      	str	r2, [r3, #12]
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f043 0201 	orr.w	r2, r3, #1
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	60da      	str	r2, [r3, #12]
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a08      	ldr	r2, [pc, #32]	@ (8008e8c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d107      	bne.n	8008e7e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f023 0203 	bic.w	r2, r3, #3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60da      	str	r2, [r3, #12]
  }
}
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	58026000 	.word	0x58026000

08008e90 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e9c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e000      	b.n	8008eaa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b087      	sub	sp, #28
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	0e5b      	lsrs	r3, r3, #25
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	4413      	add	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	0d1b      	lsrs	r3, r3, #20
 8008ede:	f003 031f 	and.w	r3, r3, #31
 8008ee2:	2107      	movs	r1, #7
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	43db      	mvns	r3, r3
 8008eea:	401a      	ands	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	0d1b      	lsrs	r3, r3, #20
 8008ef0:	f003 031f 	and.w	r3, r3, #31
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8008efa:	431a      	orrs	r2, r3
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008f00:	bf00      	nop
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8008f84 <LL_ADC_SetChannelSingleDiff+0x78>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d115      	bne.n	8008f4c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f2c:	43db      	mvns	r3, r3
 8008f2e:	401a      	ands	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f003 0318 	and.w	r3, r3, #24
 8008f36:	4914      	ldr	r1, [pc, #80]	@ (8008f88 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008f38:	40d9      	lsrs	r1, r3
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	400b      	ands	r3, r1
 8008f3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f42:	431a      	orrs	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8008f4a:	e014      	b.n	8008f76 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	401a      	ands	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f003 0318 	and.w	r3, r3, #24
 8008f62:	4909      	ldr	r1, [pc, #36]	@ (8008f88 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008f64:	40d9      	lsrs	r1, r3
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	400b      	ands	r3, r1
 8008f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8008f76:	bf00      	nop
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	58026000 	.word	0x58026000
 8008f88:	000fffff 	.word	0x000fffff

08008f8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 031f 	and.w	r3, r3, #31
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	4b04      	ldr	r3, [pc, #16]	@ (8008fe4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	6093      	str	r3, [r2, #8]
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	5fffffc0 	.word	0x5fffffc0

08008fe8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ffc:	d101      	bne.n	8009002 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	4b05      	ldr	r3, [pc, #20]	@ (8009034 <LL_ADC_EnableInternalRegulator+0x24>)
 800901e:	4013      	ands	r3, r2
 8009020:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	6fffffc0 	.word	0x6fffffc0

08009038 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800904c:	d101      	bne.n	8009052 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	4b05      	ldr	r3, [pc, #20]	@ (8009084 <LL_ADC_Enable+0x24>)
 800906e:	4013      	ands	r3, r2
 8009070:	f043 0201 	orr.w	r2, r3, #1
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	7fffffc0 	.word	0x7fffffc0

08009088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <LL_ADC_IsEnabled+0x18>
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <LL_ADC_IsEnabled+0x1a>
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689a      	ldr	r2, [r3, #8]
 80090bc:	4b05      	ldr	r3, [pc, #20]	@ (80090d4 <LL_ADC_REG_StartConversion+0x24>)
 80090be:	4013      	ands	r3, r2
 80090c0:	f043 0204 	orr.w	r2, r3, #4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	7fffffc0 	.word	0x7fffffc0

080090d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d101      	bne.n	80090f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80090ec:	2301      	movs	r3, #1
 80090ee:	e000      	b.n	80090f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80090fe:	b480      	push	{r7}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b08      	cmp	r3, #8
 8009110:	d101      	bne.n	8009116 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009112:	2301      	movs	r3, #1
 8009114:	e000      	b.n	8009118 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009124:	b590      	push	{r4, r7, lr}
 8009126:	b089      	sub	sp, #36	@ 0x24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009130:	2300      	movs	r3, #0
 8009132:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e1ee      	b.n	800951c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7fa faa5 	bl	800369c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff ff3f 	bl	8008fe8 <LL_ADC_IsDeepPowerDownEnabled>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d004      	beq.n	800917a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff ff25 	bl	8008fc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff ff5a 	bl	8009038 <LL_ADC_IsInternalRegulatorEnabled>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d114      	bne.n	80091b4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff ff3e 	bl	8009010 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009194:	4b8e      	ldr	r3, [pc, #568]	@ (80093d0 <HAL_ADC_Init+0x2ac>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	099b      	lsrs	r3, r3, #6
 800919a:	4a8e      	ldr	r2, [pc, #568]	@ (80093d4 <HAL_ADC_Init+0x2b0>)
 800919c:	fba2 2303 	umull	r2, r3, r2, r3
 80091a0:	099b      	lsrs	r3, r3, #6
 80091a2:	3301      	adds	r3, #1
 80091a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80091a6:	e002      	b.n	80091ae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1f9      	bne.n	80091a8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff ff3d 	bl	8009038 <LL_ADC_IsInternalRegulatorEnabled>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10d      	bne.n	80091e0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c8:	f043 0210 	orr.w	r2, r3, #16
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091d4:	f043 0201 	orr.w	r2, r3, #1
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff ff77 	bl	80090d8 <LL_ADC_REG_IsConversionOngoing>
 80091ea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091f0:	f003 0310 	and.w	r3, r3, #16
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 8188 	bne.w	800950a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f040 8184 	bne.w	800950a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009206:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800920a:	f043 0202 	orr.w	r2, r3, #2
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff ff36 	bl	8009088 <LL_ADC_IsEnabled>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d136      	bne.n	8009290 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a6c      	ldr	r2, [pc, #432]	@ (80093d8 <HAL_ADC_Init+0x2b4>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d004      	beq.n	8009236 <HAL_ADC_Init+0x112>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a6a      	ldr	r2, [pc, #424]	@ (80093dc <HAL_ADC_Init+0x2b8>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d10e      	bne.n	8009254 <HAL_ADC_Init+0x130>
 8009236:	4868      	ldr	r0, [pc, #416]	@ (80093d8 <HAL_ADC_Init+0x2b4>)
 8009238:	f7ff ff26 	bl	8009088 <LL_ADC_IsEnabled>
 800923c:	4604      	mov	r4, r0
 800923e:	4867      	ldr	r0, [pc, #412]	@ (80093dc <HAL_ADC_Init+0x2b8>)
 8009240:	f7ff ff22 	bl	8009088 <LL_ADC_IsEnabled>
 8009244:	4603      	mov	r3, r0
 8009246:	4323      	orrs	r3, r4
 8009248:	2b00      	cmp	r3, #0
 800924a:	bf0c      	ite	eq
 800924c:	2301      	moveq	r3, #1
 800924e:	2300      	movne	r3, #0
 8009250:	b2db      	uxtb	r3, r3
 8009252:	e008      	b.n	8009266 <HAL_ADC_Init+0x142>
 8009254:	4862      	ldr	r0, [pc, #392]	@ (80093e0 <HAL_ADC_Init+0x2bc>)
 8009256:	f7ff ff17 	bl	8009088 <LL_ADC_IsEnabled>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	bf0c      	ite	eq
 8009260:	2301      	moveq	r3, #1
 8009262:	2300      	movne	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d012      	beq.n	8009290 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a5a      	ldr	r2, [pc, #360]	@ (80093d8 <HAL_ADC_Init+0x2b4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d004      	beq.n	800927e <HAL_ADC_Init+0x15a>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a58      	ldr	r2, [pc, #352]	@ (80093dc <HAL_ADC_Init+0x2b8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d101      	bne.n	8009282 <HAL_ADC_Init+0x15e>
 800927e:	4a59      	ldr	r2, [pc, #356]	@ (80093e4 <HAL_ADC_Init+0x2c0>)
 8009280:	e000      	b.n	8009284 <HAL_ADC_Init+0x160>
 8009282:	4a59      	ldr	r2, [pc, #356]	@ (80093e8 <HAL_ADC_Init+0x2c4>)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7ff fc24 	bl	8008ad8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a52      	ldr	r2, [pc, #328]	@ (80093e0 <HAL_ADC_Init+0x2bc>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d129      	bne.n	80092ee <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7e5b      	ldrb	r3, [r3, #25]
 800929e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80092a4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80092aa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d013      	beq.n	80092dc <HAL_ADC_Init+0x1b8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2b0c      	cmp	r3, #12
 80092ba:	d00d      	beq.n	80092d8 <HAL_ADC_Init+0x1b4>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b1c      	cmp	r3, #28
 80092c2:	d007      	beq.n	80092d4 <HAL_ADC_Init+0x1b0>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	2b18      	cmp	r3, #24
 80092ca:	d101      	bne.n	80092d0 <HAL_ADC_Init+0x1ac>
 80092cc:	2318      	movs	r3, #24
 80092ce:	e006      	b.n	80092de <HAL_ADC_Init+0x1ba>
 80092d0:	2300      	movs	r3, #0
 80092d2:	e004      	b.n	80092de <HAL_ADC_Init+0x1ba>
 80092d4:	2310      	movs	r3, #16
 80092d6:	e002      	b.n	80092de <HAL_ADC_Init+0x1ba>
 80092d8:	2308      	movs	r3, #8
 80092da:	e000      	b.n	80092de <HAL_ADC_Init+0x1ba>
 80092dc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80092de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80092e8:	4313      	orrs	r3, r2
 80092ea:	61bb      	str	r3, [r7, #24]
 80092ec:	e00e      	b.n	800930c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	7e5b      	ldrb	r3, [r3, #25]
 80092f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80092f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80092fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009306:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009308:	4313      	orrs	r3, r2
 800930a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d106      	bne.n	8009324 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931a:	3b01      	subs	r3, #1
 800931c:	045b      	lsls	r3, r3, #17
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	4313      	orrs	r3, r2
 8009322:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009328:	2b00      	cmp	r3, #0
 800932a:	d009      	beq.n	8009340 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009330:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	4313      	orrs	r3, r2
 800933e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a26      	ldr	r2, [pc, #152]	@ (80093e0 <HAL_ADC_Init+0x2bc>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d115      	bne.n	8009376 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	4b26      	ldr	r3, [pc, #152]	@ (80093ec <HAL_ADC_Init+0x2c8>)
 8009352:	4013      	ands	r3, r2
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6812      	ldr	r2, [r2, #0]
 8009358:	69b9      	ldr	r1, [r7, #24]
 800935a:	430b      	orrs	r3, r1
 800935c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	430a      	orrs	r2, r1
 8009372:	611a      	str	r2, [r3, #16]
 8009374:	e009      	b.n	800938a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	4b1c      	ldr	r3, [pc, #112]	@ (80093f0 <HAL_ADC_Init+0x2cc>)
 800937e:	4013      	ands	r3, r2
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	69b9      	ldr	r1, [r7, #24]
 8009386:	430b      	orrs	r3, r1
 8009388:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff fea2 	bl	80090d8 <LL_ADC_REG_IsConversionOngoing>
 8009394:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff feaf 	bl	80090fe <LL_ADC_INJ_IsConversionOngoing>
 80093a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f040 808e 	bne.w	80094c6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f040 808a 	bne.w	80094c6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a0a      	ldr	r2, [pc, #40]	@ (80093e0 <HAL_ADC_Init+0x2bc>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d11b      	bne.n	80093f4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7e1b      	ldrb	r3, [r3, #24]
 80093c0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80093c8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80093ca:	4313      	orrs	r3, r2
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	e018      	b.n	8009402 <HAL_ADC_Init+0x2de>
 80093d0:	24000004 	.word	0x24000004
 80093d4:	053e2d63 	.word	0x053e2d63
 80093d8:	40022000 	.word	0x40022000
 80093dc:	40022100 	.word	0x40022100
 80093e0:	58026000 	.word	0x58026000
 80093e4:	40022300 	.word	0x40022300
 80093e8:	58026300 	.word	0x58026300
 80093ec:	fff04007 	.word	0xfff04007
 80093f0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	7e1b      	ldrb	r3, [r3, #24]
 80093f8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80093fe:	4313      	orrs	r3, r2
 8009400:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	4b46      	ldr	r3, [pc, #280]	@ (8009524 <HAL_ADC_Init+0x400>)
 800940a:	4013      	ands	r3, r2
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	69b9      	ldr	r1, [r7, #24]
 8009412:	430b      	orrs	r3, r1
 8009414:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800941c:	2b01      	cmp	r3, #1
 800941e:	d137      	bne.n	8009490 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009424:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a3f      	ldr	r2, [pc, #252]	@ (8009528 <HAL_ADC_Init+0x404>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d116      	bne.n	800945e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691a      	ldr	r2, [r3, #16]
 8009436:	4b3d      	ldr	r3, [pc, #244]	@ (800952c <HAL_ADC_Init+0x408>)
 8009438:	4013      	ands	r3, r2
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009442:	4311      	orrs	r1, r2
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009448:	4311      	orrs	r1, r2
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800944e:	430a      	orrs	r2, r1
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0201 	orr.w	r2, r2, #1
 800945a:	611a      	str	r2, [r3, #16]
 800945c:	e020      	b.n	80094a0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691a      	ldr	r2, [r3, #16]
 8009464:	4b32      	ldr	r3, [pc, #200]	@ (8009530 <HAL_ADC_Init+0x40c>)
 8009466:	4013      	ands	r3, r2
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800946c:	3a01      	subs	r2, #1
 800946e:	0411      	lsls	r1, r2, #16
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009474:	4311      	orrs	r1, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800947a:	4311      	orrs	r1, r2
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009480:	430a      	orrs	r2, r1
 8009482:	431a      	orrs	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f042 0201 	orr.w	r2, r2, #1
 800948c:	611a      	str	r2, [r3, #16]
 800948e:	e007      	b.n	80094a0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	691a      	ldr	r2, [r3, #16]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0201 	bic.w	r2, r2, #1
 800949e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009528 <HAL_ADC_Init+0x404>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d002      	beq.n	80094c6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 f967 	bl	800a794 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d10c      	bne.n	80094e8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d4:	f023 010f 	bic.w	r1, r3, #15
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	1e5a      	subs	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80094e6:	e007      	b.n	80094f8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 020f 	bic.w	r2, r2, #15
 80094f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094fc:	f023 0303 	bic.w	r3, r3, #3
 8009500:	f043 0201 	orr.w	r2, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	661a      	str	r2, [r3, #96]	@ 0x60
 8009508:	e007      	b.n	800951a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800950e:	f043 0210 	orr.w	r2, r3, #16
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800951a:	7ffb      	ldrb	r3, [r7, #31]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3724      	adds	r7, #36	@ 0x24
 8009520:	46bd      	mov	sp, r7
 8009522:	bd90      	pop	{r4, r7, pc}
 8009524:	ffffbffc 	.word	0xffffbffc
 8009528:	58026000 	.word	0x58026000
 800952c:	fc00f81f 	.word	0xfc00f81f
 8009530:	fc00f81e 	.word	0xfc00f81e

08009534 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a60      	ldr	r2, [pc, #384]	@ (80096c8 <HAL_ADC_Start_DMA+0x194>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d004      	beq.n	8009554 <HAL_ADC_Start_DMA+0x20>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a5f      	ldr	r2, [pc, #380]	@ (80096cc <HAL_ADC_Start_DMA+0x198>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d101      	bne.n	8009558 <HAL_ADC_Start_DMA+0x24>
 8009554:	4b5e      	ldr	r3, [pc, #376]	@ (80096d0 <HAL_ADC_Start_DMA+0x19c>)
 8009556:	e000      	b.n	800955a <HAL_ADC_Start_DMA+0x26>
 8009558:	4b5e      	ldr	r3, [pc, #376]	@ (80096d4 <HAL_ADC_Start_DMA+0x1a0>)
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff fd16 	bl	8008f8c <LL_ADC_GetMultimode>
 8009560:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4618      	mov	r0, r3
 8009568:	f7ff fdb6 	bl	80090d8 <LL_ADC_REG_IsConversionOngoing>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	f040 80a2 	bne.w	80096b8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800957a:	2b01      	cmp	r3, #1
 800957c:	d101      	bne.n	8009582 <HAL_ADC_Start_DMA+0x4e>
 800957e:	2302      	movs	r3, #2
 8009580:	e09d      	b.n	80096be <HAL_ADC_Start_DMA+0x18a>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d006      	beq.n	800959e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	2b05      	cmp	r3, #5
 8009594:	d003      	beq.n	800959e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b09      	cmp	r3, #9
 800959a:	f040 8086 	bne.w	80096aa <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 ffda 	bl	800a558 <ADC_Enable>
 80095a4:	4603      	mov	r3, r0
 80095a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d178      	bne.n	80096a0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80095b2:	4b49      	ldr	r3, [pc, #292]	@ (80096d8 <HAL_ADC_Start_DMA+0x1a4>)
 80095b4:	4013      	ands	r3, r2
 80095b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a42      	ldr	r2, [pc, #264]	@ (80096cc <HAL_ADC_Start_DMA+0x198>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d002      	beq.n	80095ce <HAL_ADC_Start_DMA+0x9a>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	e000      	b.n	80095d0 <HAL_ADC_Start_DMA+0x9c>
 80095ce:	4b3e      	ldr	r3, [pc, #248]	@ (80096c8 <HAL_ADC_Start_DMA+0x194>)
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	6812      	ldr	r2, [r2, #0]
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d002      	beq.n	80095de <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d105      	bne.n	80095ea <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d006      	beq.n	8009604 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095fa:	f023 0206 	bic.w	r2, r3, #6
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	665a      	str	r2, [r3, #100]	@ 0x64
 8009602:	e002      	b.n	800960a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960e:	4a33      	ldr	r2, [pc, #204]	@ (80096dc <HAL_ADC_Start_DMA+0x1a8>)
 8009610:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009616:	4a32      	ldr	r2, [pc, #200]	@ (80096e0 <HAL_ADC_Start_DMA+0x1ac>)
 8009618:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800961e:	4a31      	ldr	r2, [pc, #196]	@ (80096e4 <HAL_ADC_Start_DMA+0x1b0>)
 8009620:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	221c      	movs	r2, #28
 8009628:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	685a      	ldr	r2, [r3, #4]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f042 0210 	orr.w	r2, r2, #16
 8009640:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a28      	ldr	r2, [pc, #160]	@ (80096e8 <HAL_ADC_Start_DMA+0x1b4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d10f      	bne.n	800966c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f7ff fbfe 	bl	8008e5c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff fbe9 	bl	8008e3c <LL_ADC_EnableDMAReq>
 800966a:	e007      	b.n	800967c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f7ff fbcd 	bl	8008e16 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3340      	adds	r3, #64	@ 0x40
 8009686:	4619      	mov	r1, r3
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f001 fe82 	bl	800b394 <HAL_DMA_Start_IT>
 8009690:	4603      	mov	r3, r0
 8009692:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4618      	mov	r0, r3
 800969a:	f7ff fd09 	bl	80090b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800969e:	e00d      	b.n	80096bc <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80096a8:	e008      	b.n	80096bc <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80096b6:	e001      	b.n	80096bc <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
 80096ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	40022000 	.word	0x40022000
 80096cc:	40022100 	.word	0x40022100
 80096d0:	40022300 	.word	0x40022300
 80096d4:	58026300 	.word	0x58026300
 80096d8:	fffff0fe 	.word	0xfffff0fe
 80096dc:	0800a66d 	.word	0x0800a66d
 80096e0:	0800a745 	.word	0x0800a745
 80096e4:	0800a761 	.word	0x0800a761
 80096e8:	58026000 	.word	0x58026000

080096ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08a      	sub	sp, #40	@ 0x28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80096f4:	2300      	movs	r3, #0
 80096f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a87      	ldr	r2, [pc, #540]	@ (800992c <HAL_ADC_IRQHandler+0x240>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d004      	beq.n	800971c <HAL_ADC_IRQHandler+0x30>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a86      	ldr	r2, [pc, #536]	@ (8009930 <HAL_ADC_IRQHandler+0x244>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d101      	bne.n	8009720 <HAL_ADC_IRQHandler+0x34>
 800971c:	4b85      	ldr	r3, [pc, #532]	@ (8009934 <HAL_ADC_IRQHandler+0x248>)
 800971e:	e000      	b.n	8009722 <HAL_ADC_IRQHandler+0x36>
 8009720:	4b85      	ldr	r3, [pc, #532]	@ (8009938 <HAL_ADC_IRQHandler+0x24c>)
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff fc32 	bl	8008f8c <LL_ADC_GetMultimode>
 8009728:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	f003 0302 	and.w	r3, r3, #2
 8009730:	2b00      	cmp	r3, #0
 8009732:	d017      	beq.n	8009764 <HAL_ADC_IRQHandler+0x78>
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d012      	beq.n	8009764 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009742:	f003 0310 	and.w	r3, r3, #16
 8009746:	2b00      	cmp	r3, #0
 8009748:	d105      	bne.n	8009756 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800974e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 f932 	bl	800a9c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2202      	movs	r2, #2
 8009762:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d004      	beq.n	8009778 <HAL_ADC_IRQHandler+0x8c>
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 8083 	beq.w	800988a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d07d      	beq.n	800988a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009792:	f003 0310 	and.w	r3, r3, #16
 8009796:	2b00      	cmp	r3, #0
 8009798:	d105      	bne.n	80097a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800979e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff faf4 	bl	8008d98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d062      	beq.n	800987c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a5d      	ldr	r2, [pc, #372]	@ (8009930 <HAL_ADC_IRQHandler+0x244>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d002      	beq.n	80097c6 <HAL_ADC_IRQHandler+0xda>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	e000      	b.n	80097c8 <HAL_ADC_IRQHandler+0xdc>
 80097c6:	4b59      	ldr	r3, [pc, #356]	@ (800992c <HAL_ADC_IRQHandler+0x240>)
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6812      	ldr	r2, [r2, #0]
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d008      	beq.n	80097e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d005      	beq.n	80097e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2b05      	cmp	r3, #5
 80097da:	d002      	beq.n	80097e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2b09      	cmp	r3, #9
 80097e0:	d104      	bne.n	80097ec <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	623b      	str	r3, [r7, #32]
 80097ea:	e00c      	b.n	8009806 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a4f      	ldr	r2, [pc, #316]	@ (8009930 <HAL_ADC_IRQHandler+0x244>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d002      	beq.n	80097fc <HAL_ADC_IRQHandler+0x110>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	e000      	b.n	80097fe <HAL_ADC_IRQHandler+0x112>
 80097fc:	4b4b      	ldr	r3, [pc, #300]	@ (800992c <HAL_ADC_IRQHandler+0x240>)
 80097fe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d135      	bne.n	800987c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b08      	cmp	r3, #8
 800981c:	d12e      	bne.n	800987c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff fc58 	bl	80090d8 <LL_ADC_REG_IsConversionOngoing>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d11a      	bne.n	8009864 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 020c 	bic.w	r2, r2, #12
 800983c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009842:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800984e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d112      	bne.n	800987c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800985a:	f043 0201 	orr.w	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	661a      	str	r2, [r3, #96]	@ 0x60
 8009862:	e00b      	b.n	800987c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009868:	f043 0210 	orr.w	r2, r3, #16
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009874:	f043 0201 	orr.w	r2, r3, #1
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f96f 	bl	8009b60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	220c      	movs	r2, #12
 8009888:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f003 0320 	and.w	r3, r3, #32
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <HAL_ADC_IRQHandler+0x1b2>
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f003 0320 	and.w	r3, r3, #32
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10b      	bne.n	80098b6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 80a0 	beq.w	80099ea <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 809a 	beq.w	80099ea <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098ba:	f003 0310 	and.w	r3, r3, #16
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d105      	bne.n	80098ce <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098c6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fadc 	bl	8008e90 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80098d8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fa5a 	bl	8008d98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80098e4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a11      	ldr	r2, [pc, #68]	@ (8009930 <HAL_ADC_IRQHandler+0x244>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d002      	beq.n	80098f6 <HAL_ADC_IRQHandler+0x20a>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	e000      	b.n	80098f8 <HAL_ADC_IRQHandler+0x20c>
 80098f6:	4b0d      	ldr	r3, [pc, #52]	@ (800992c <HAL_ADC_IRQHandler+0x240>)
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6812      	ldr	r2, [r2, #0]
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d008      	beq.n	8009912 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2b06      	cmp	r3, #6
 800990a:	d002      	beq.n	8009912 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2b07      	cmp	r3, #7
 8009910:	d104      	bne.n	800991c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	623b      	str	r3, [r7, #32]
 800991a:	e014      	b.n	8009946 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a03      	ldr	r2, [pc, #12]	@ (8009930 <HAL_ADC_IRQHandler+0x244>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00a      	beq.n	800993c <HAL_ADC_IRQHandler+0x250>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	e008      	b.n	800993e <HAL_ADC_IRQHandler+0x252>
 800992c:	40022000 	.word	0x40022000
 8009930:	40022100 	.word	0x40022100
 8009934:	40022300 	.word	0x40022300
 8009938:	58026300 	.word	0x58026300
 800993c:	4b84      	ldr	r3, [pc, #528]	@ (8009b50 <HAL_ADC_IRQHandler+0x464>)
 800993e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d047      	beq.n	80099dc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d007      	beq.n	8009966 <HAL_ADC_IRQHandler+0x27a>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d03f      	beq.n	80099dc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009962:	2b00      	cmp	r3, #0
 8009964:	d13a      	bne.n	80099dc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009970:	2b40      	cmp	r3, #64	@ 0x40
 8009972:	d133      	bne.n	80099dc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d12e      	bne.n	80099dc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4618      	mov	r0, r3
 8009984:	f7ff fbbb 	bl	80090fe <LL_ADC_INJ_IsConversionOngoing>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d11a      	bne.n	80099c4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800999c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d112      	bne.n	80099dc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099ba:	f043 0201 	orr.w	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80099c2:	e00b      	b.n	80099dc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099c8:	f043 0210 	orr.w	r2, r3, #16
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099d4:	f043 0201 	orr.w	r2, r3, #1
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 ffc7 	bl	800a970 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2260      	movs	r2, #96	@ 0x60
 80099e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d011      	beq.n	8009a18 <HAL_ADC_IRQHandler+0x32c>
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00c      	beq.n	8009a18 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f8bc 	bl	8009b88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2280      	movs	r2, #128	@ 0x80
 8009a16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d012      	beq.n	8009a48 <HAL_ADC_IRQHandler+0x35c>
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00d      	beq.n	8009a48 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a30:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 ffad 	bl	800a998 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d012      	beq.n	8009a78 <HAL_ADC_IRQHandler+0x38c>
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00d      	beq.n	8009a78 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 ff9f 	bl	800a9ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d043      	beq.n	8009b0a <HAL_ADC_IRQHandler+0x41e>
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	f003 0310 	and.w	r3, r3, #16
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d03e      	beq.n	8009b0a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8009a94:	2301      	movs	r3, #1
 8009a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a98:	e021      	b.n	8009ade <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d015      	beq.n	8009acc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a2a      	ldr	r2, [pc, #168]	@ (8009b50 <HAL_ADC_IRQHandler+0x464>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d004      	beq.n	8009ab4 <HAL_ADC_IRQHandler+0x3c8>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a29      	ldr	r2, [pc, #164]	@ (8009b54 <HAL_ADC_IRQHandler+0x468>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d101      	bne.n	8009ab8 <HAL_ADC_IRQHandler+0x3cc>
 8009ab4:	4b28      	ldr	r3, [pc, #160]	@ (8009b58 <HAL_ADC_IRQHandler+0x46c>)
 8009ab6:	e000      	b.n	8009aba <HAL_ADC_IRQHandler+0x3ce>
 8009ab8:	4b28      	ldr	r3, [pc, #160]	@ (8009b5c <HAL_ADC_IRQHandler+0x470>)
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff fa74 	bl	8008fa8 <LL_ADC_GetMultiDMATransfer>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00b      	beq.n	8009ade <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aca:	e008      	b.n	8009ade <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8009ada:	2301      	movs	r3, #1
 8009adc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d10e      	bne.n	8009b02 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ae8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009af4:	f043 0202 	orr.w	r2, r3, #2
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f84d 	bl	8009b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2210      	movs	r2, #16
 8009b08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d018      	beq.n	8009b46 <HAL_ADC_IRQHandler+0x45a>
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d013      	beq.n	8009b46 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b22:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b2e:	f043 0208 	orr.w	r2, r3, #8
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b3e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 ff1f 	bl	800a984 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009b46:	bf00      	nop
 8009b48:	3728      	adds	r7, #40	@ 0x28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40022000 	.word	0x40022000
 8009b54:	40022100 	.word	0x40022100
 8009b58:	40022300 	.word	0x40022300
 8009b5c:	58026300 	.word	0x58026300

08009b60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009bb0:	b590      	push	{r4, r7, lr}
 8009bb2:	b0a5      	sub	sp, #148	@ 0x94
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bca:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	4aa4      	ldr	r2, [pc, #656]	@ (8009e64 <HAL_ADC_ConfigChannel+0x2b4>)
 8009bd2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d102      	bne.n	8009be4 <HAL_ADC_ConfigChannel+0x34>
 8009bde:	2302      	movs	r3, #2
 8009be0:	f000 bca2 	b.w	800a528 <HAL_ADC_ConfigChannel+0x978>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff fa71 	bl	80090d8 <LL_ADC_REG_IsConversionOngoing>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 8486 	bne.w	800a50a <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	db31      	blt.n	8009c6a <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a97      	ldr	r2, [pc, #604]	@ (8009e68 <HAL_ADC_ConfigChannel+0x2b8>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d02c      	beq.n	8009c6a <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d108      	bne.n	8009c2e <HAL_ADC_ConfigChannel+0x7e>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	0e9b      	lsrs	r3, r3, #26
 8009c22:	f003 031f 	and.w	r3, r3, #31
 8009c26:	2201      	movs	r2, #1
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	e016      	b.n	8009c5c <HAL_ADC_ConfigChannel+0xac>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c36:	fa93 f3a3 	rbit	r3, r3
 8009c3a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8009c3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c3e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8009c46:	2320      	movs	r3, #32
 8009c48:	e003      	b.n	8009c52 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8009c4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c4c:	fab3 f383 	clz	r3, r3
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	f003 031f 	and.w	r3, r3, #31
 8009c56:	2201      	movs	r2, #1
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	6812      	ldr	r2, [r2, #0]
 8009c60:	69d1      	ldr	r1, [r2, #28]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	430b      	orrs	r3, r1
 8009c68:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6818      	ldr	r0, [r3, #0]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6859      	ldr	r1, [r3, #4]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f7ff f8a1 	bl	8008dbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff fa29 	bl	80090d8 <LL_ADC_REG_IsConversionOngoing>
 8009c86:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff fa35 	bl	80090fe <LL_ADC_INJ_IsConversionOngoing>
 8009c94:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f040 824a 	bne.w	800a136 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f040 8245 	bne.w	800a136 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	f7ff f8fc 	bl	8008eb6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a69      	ldr	r2, [pc, #420]	@ (8009e68 <HAL_ADC_ConfigChannel+0x2b8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d10d      	bne.n	8009ce4 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	695a      	ldr	r2, [r3, #20]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	08db      	lsrs	r3, r3, #3
 8009cd4:	f003 0303 	and.w	r3, r3, #3
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	fa02 f303 	lsl.w	r3, r2, r3
 8009cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ce2:	e032      	b.n	8009d4a <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009ce4:	4b61      	ldr	r3, [pc, #388]	@ (8009e6c <HAL_ADC_ConfigChannel+0x2bc>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cf0:	d10b      	bne.n	8009d0a <HAL_ADC_ConfigChannel+0x15a>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	695a      	ldr	r2, [r3, #20]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	089b      	lsrs	r3, r3, #2
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	fa02 f303 	lsl.w	r3, r2, r3
 8009d08:	e01d      	b.n	8009d46 <HAL_ADC_ConfigChannel+0x196>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f003 0310 	and.w	r3, r3, #16
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10b      	bne.n	8009d30 <HAL_ADC_ConfigChannel+0x180>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	695a      	ldr	r2, [r3, #20]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	089b      	lsrs	r3, r3, #2
 8009d24:	f003 0307 	and.w	r3, r3, #7
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2e:	e00a      	b.n	8009d46 <HAL_ADC_ConfigChannel+0x196>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	695a      	ldr	r2, [r3, #20]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	089b      	lsrs	r3, r3, #2
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	fa02 f303 	lsl.w	r3, r2, r3
 8009d46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	d048      	beq.n	8009de4 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	6919      	ldr	r1, [r3, #16]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d62:	f7fe ff27 	bl	8008bb4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8009e68 <HAL_ADC_ConfigChannel+0x2b8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d119      	bne.n	8009da4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6919      	ldr	r1, [r3, #16]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	f7fe ffbf 	bl	8008d00 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6919      	ldr	r1, [r3, #16]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d102      	bne.n	8009d9a <HAL_ADC_ConfigChannel+0x1ea>
 8009d94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d98:	e000      	b.n	8009d9c <HAL_ADC_ConfigChannel+0x1ec>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	f7fe ff8d 	bl	8008cbc <LL_ADC_SetOffsetSaturation>
 8009da2:	e1c8      	b.n	800a136 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	6919      	ldr	r1, [r3, #16]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d102      	bne.n	8009dbc <HAL_ADC_ConfigChannel+0x20c>
 8009db6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dba:	e000      	b.n	8009dbe <HAL_ADC_ConfigChannel+0x20e>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f7fe ff5a 	bl	8008c78 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	6919      	ldr	r1, [r3, #16]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	7e1b      	ldrb	r3, [r3, #24]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d102      	bne.n	8009dda <HAL_ADC_ConfigChannel+0x22a>
 8009dd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009dd8:	e000      	b.n	8009ddc <HAL_ADC_ConfigChannel+0x22c>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	461a      	mov	r2, r3
 8009dde:	f7fe ff31 	bl	8008c44 <LL_ADC_SetDataRightShift>
 8009de2:	e1a8      	b.n	800a136 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a1f      	ldr	r2, [pc, #124]	@ (8009e68 <HAL_ADC_ConfigChannel+0x2b8>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	f040 815b 	bne.w	800a0a6 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2100      	movs	r1, #0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe ff0e 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <HAL_ADC_ConfigChannel+0x26c>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe ff03 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009e12:	4603      	mov	r3, r0
 8009e14:	0e9b      	lsrs	r3, r3, #26
 8009e16:	f003 021f 	and.w	r2, r3, #31
 8009e1a:	e017      	b.n	8009e4c <HAL_ADC_ConfigChannel+0x29c>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe fef8 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e2e:	fa93 f3a3 	rbit	r3, r3
 8009e32:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009e3e:	2320      	movs	r3, #32
 8009e40:	e003      	b.n	8009e4a <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8009e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e44:	fab3 f383 	clz	r3, r3
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10b      	bne.n	8009e70 <HAL_ADC_ConfigChannel+0x2c0>
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	0e9b      	lsrs	r3, r3, #26
 8009e5e:	f003 031f 	and.w	r3, r3, #31
 8009e62:	e017      	b.n	8009e94 <HAL_ADC_ConfigChannel+0x2e4>
 8009e64:	47ff0000 	.word	0x47ff0000
 8009e68:	58026000 	.word	0x58026000
 8009e6c:	5c001000 	.word	0x5c001000
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e78:	fa93 f3a3 	rbit	r3, r3
 8009e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009e7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e80:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009e82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8009e88:	2320      	movs	r3, #32
 8009e8a:	e003      	b.n	8009e94 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8009e8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e8e:	fab3 f383 	clz	r3, r3
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d106      	bne.n	8009ea6 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fe ff4f 	bl	8008d44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2101      	movs	r1, #1
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe feb3 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <HAL_ADC_ConfigChannel+0x322>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fea8 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	0e9b      	lsrs	r3, r3, #26
 8009ecc:	f003 021f 	and.w	r2, r3, #31
 8009ed0:	e017      	b.n	8009f02 <HAL_ADC_ConfigChannel+0x352>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe fe9d 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ee4:	fa93 f3a3 	rbit	r3, r3
 8009ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8009ef4:	2320      	movs	r3, #32
 8009ef6:	e003      	b.n	8009f00 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8009ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009efa:	fab3 f383 	clz	r3, r3
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	461a      	mov	r2, r3
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d105      	bne.n	8009f1a <HAL_ADC_ConfigChannel+0x36a>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	0e9b      	lsrs	r3, r3, #26
 8009f14:	f003 031f 	and.w	r3, r3, #31
 8009f18:	e011      	b.n	8009f3e <HAL_ADC_ConfigChannel+0x38e>
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f22:	fa93 f3a3 	rbit	r3, r3
 8009f26:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8009f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8009f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8009f32:	2320      	movs	r3, #32
 8009f34:	e003      	b.n	8009f3e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8009f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f38:	fab3 f383 	clz	r3, r3
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d106      	bne.n	8009f50 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2200      	movs	r2, #0
 8009f48:	2101      	movs	r1, #1
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fefa 	bl	8008d44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2102      	movs	r1, #2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fe5e 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <HAL_ADC_ConfigChannel+0x3cc>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2102      	movs	r1, #2
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fe fe53 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009f72:	4603      	mov	r3, r0
 8009f74:	0e9b      	lsrs	r3, r3, #26
 8009f76:	f003 021f 	and.w	r2, r3, #31
 8009f7a:	e017      	b.n	8009fac <HAL_ADC_ConfigChannel+0x3fc>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2102      	movs	r1, #2
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fe48 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8e:	fa93 f3a3 	rbit	r3, r3
 8009f92:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8009f9e:	2320      	movs	r3, #32
 8009fa0:	e003      	b.n	8009faa <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8009fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa4:	fab3 f383 	clz	r3, r3
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	461a      	mov	r2, r3
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d105      	bne.n	8009fc4 <HAL_ADC_ConfigChannel+0x414>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	0e9b      	lsrs	r3, r3, #26
 8009fbe:	f003 031f 	and.w	r3, r3, #31
 8009fc2:	e011      	b.n	8009fe8 <HAL_ADC_ConfigChannel+0x438>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fcc:	fa93 f3a3 	rbit	r3, r3
 8009fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8009fdc:	2320      	movs	r3, #32
 8009fde:	e003      	b.n	8009fe8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	fab3 f383 	clz	r3, r3
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d106      	bne.n	8009ffa <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fe fea5 	bl	8008d44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2103      	movs	r1, #3
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe fe09 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 800a006:	4603      	mov	r3, r0
 800a008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <HAL_ADC_ConfigChannel+0x476>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2103      	movs	r1, #3
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fdfe 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 800a01c:	4603      	mov	r3, r0
 800a01e:	0e9b      	lsrs	r3, r3, #26
 800a020:	f003 021f 	and.w	r2, r3, #31
 800a024:	e017      	b.n	800a056 <HAL_ADC_ConfigChannel+0x4a6>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2103      	movs	r1, #3
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe fdf3 	bl	8008c18 <LL_ADC_GetOffsetChannel>
 800a032:	4603      	mov	r3, r0
 800a034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	fa93 f3a3 	rbit	r3, r3
 800a03c:	61fb      	str	r3, [r7, #28]
  return result;
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800a048:	2320      	movs	r3, #32
 800a04a:	e003      	b.n	800a054 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800a04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04e:	fab3 f383 	clz	r3, r3
 800a052:	b2db      	uxtb	r3, r3
 800a054:	461a      	mov	r2, r3
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d105      	bne.n	800a06e <HAL_ADC_ConfigChannel+0x4be>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	0e9b      	lsrs	r3, r3, #26
 800a068:	f003 031f 	and.w	r3, r3, #31
 800a06c:	e011      	b.n	800a092 <HAL_ADC_ConfigChannel+0x4e2>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	fa93 f3a3 	rbit	r3, r3
 800a07a:	613b      	str	r3, [r7, #16]
  return result;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800a086:	2320      	movs	r3, #32
 800a088:	e003      	b.n	800a092 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	fab3 f383 	clz	r3, r3
 800a090:	b2db      	uxtb	r3, r3
 800a092:	429a      	cmp	r2, r3
 800a094:	d14f      	bne.n	800a136 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2200      	movs	r2, #0
 800a09c:	2103      	movs	r1, #3
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fe50 	bl	8008d44 <LL_ADC_SetOffsetState>
 800a0a4:	e047      	b.n	800a136 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	069b      	lsls	r3, r3, #26
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d107      	bne.n	800a0ca <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a0c8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	069b      	lsls	r3, r3, #26
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d107      	bne.n	800a0ee <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a0ec:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	069b      	lsls	r3, r3, #26
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d107      	bne.n	800a112 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a110:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a118:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	069b      	lsls	r3, r3, #26
 800a122:	429a      	cmp	r2, r3
 800a124:	d107      	bne.n	800a136 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a134:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe ffa4 	bl	8009088 <LL_ADC_IsEnabled>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 81ea 	bne.w	800a51c <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6818      	ldr	r0, [r3, #0]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	6819      	ldr	r1, [r3, #0]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	461a      	mov	r2, r3
 800a156:	f7fe fed9 	bl	8008f0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	4a7a      	ldr	r2, [pc, #488]	@ (800a348 <HAL_ADC_ConfigChannel+0x798>)
 800a160:	4293      	cmp	r3, r2
 800a162:	f040 80e0 	bne.w	800a326 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4977      	ldr	r1, [pc, #476]	@ (800a34c <HAL_ADC_ConfigChannel+0x79c>)
 800a170:	428b      	cmp	r3, r1
 800a172:	d147      	bne.n	800a204 <HAL_ADC_ConfigChannel+0x654>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4975      	ldr	r1, [pc, #468]	@ (800a350 <HAL_ADC_ConfigChannel+0x7a0>)
 800a17a:	428b      	cmp	r3, r1
 800a17c:	d040      	beq.n	800a200 <HAL_ADC_ConfigChannel+0x650>
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4974      	ldr	r1, [pc, #464]	@ (800a354 <HAL_ADC_ConfigChannel+0x7a4>)
 800a184:	428b      	cmp	r3, r1
 800a186:	d039      	beq.n	800a1fc <HAL_ADC_ConfigChannel+0x64c>
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4972      	ldr	r1, [pc, #456]	@ (800a358 <HAL_ADC_ConfigChannel+0x7a8>)
 800a18e:	428b      	cmp	r3, r1
 800a190:	d032      	beq.n	800a1f8 <HAL_ADC_ConfigChannel+0x648>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4971      	ldr	r1, [pc, #452]	@ (800a35c <HAL_ADC_ConfigChannel+0x7ac>)
 800a198:	428b      	cmp	r3, r1
 800a19a:	d02b      	beq.n	800a1f4 <HAL_ADC_ConfigChannel+0x644>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	496f      	ldr	r1, [pc, #444]	@ (800a360 <HAL_ADC_ConfigChannel+0x7b0>)
 800a1a2:	428b      	cmp	r3, r1
 800a1a4:	d024      	beq.n	800a1f0 <HAL_ADC_ConfigChannel+0x640>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	496e      	ldr	r1, [pc, #440]	@ (800a364 <HAL_ADC_ConfigChannel+0x7b4>)
 800a1ac:	428b      	cmp	r3, r1
 800a1ae:	d01d      	beq.n	800a1ec <HAL_ADC_ConfigChannel+0x63c>
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	496c      	ldr	r1, [pc, #432]	@ (800a368 <HAL_ADC_ConfigChannel+0x7b8>)
 800a1b6:	428b      	cmp	r3, r1
 800a1b8:	d016      	beq.n	800a1e8 <HAL_ADC_ConfigChannel+0x638>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	496b      	ldr	r1, [pc, #428]	@ (800a36c <HAL_ADC_ConfigChannel+0x7bc>)
 800a1c0:	428b      	cmp	r3, r1
 800a1c2:	d00f      	beq.n	800a1e4 <HAL_ADC_ConfigChannel+0x634>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4969      	ldr	r1, [pc, #420]	@ (800a370 <HAL_ADC_ConfigChannel+0x7c0>)
 800a1ca:	428b      	cmp	r3, r1
 800a1cc:	d008      	beq.n	800a1e0 <HAL_ADC_ConfigChannel+0x630>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4968      	ldr	r1, [pc, #416]	@ (800a374 <HAL_ADC_ConfigChannel+0x7c4>)
 800a1d4:	428b      	cmp	r3, r1
 800a1d6:	d101      	bne.n	800a1dc <HAL_ADC_ConfigChannel+0x62c>
 800a1d8:	4b67      	ldr	r3, [pc, #412]	@ (800a378 <HAL_ADC_ConfigChannel+0x7c8>)
 800a1da:	e0a0      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	e09e      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1e0:	4b66      	ldr	r3, [pc, #408]	@ (800a37c <HAL_ADC_ConfigChannel+0x7cc>)
 800a1e2:	e09c      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1e4:	4b66      	ldr	r3, [pc, #408]	@ (800a380 <HAL_ADC_ConfigChannel+0x7d0>)
 800a1e6:	e09a      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1e8:	4b60      	ldr	r3, [pc, #384]	@ (800a36c <HAL_ADC_ConfigChannel+0x7bc>)
 800a1ea:	e098      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1ec:	4b5e      	ldr	r3, [pc, #376]	@ (800a368 <HAL_ADC_ConfigChannel+0x7b8>)
 800a1ee:	e096      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1f0:	4b64      	ldr	r3, [pc, #400]	@ (800a384 <HAL_ADC_ConfigChannel+0x7d4>)
 800a1f2:	e094      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1f4:	4b64      	ldr	r3, [pc, #400]	@ (800a388 <HAL_ADC_ConfigChannel+0x7d8>)
 800a1f6:	e092      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1f8:	4b64      	ldr	r3, [pc, #400]	@ (800a38c <HAL_ADC_ConfigChannel+0x7dc>)
 800a1fa:	e090      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a1fc:	4b64      	ldr	r3, [pc, #400]	@ (800a390 <HAL_ADC_ConfigChannel+0x7e0>)
 800a1fe:	e08e      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a200:	2301      	movs	r3, #1
 800a202:	e08c      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4962      	ldr	r1, [pc, #392]	@ (800a394 <HAL_ADC_ConfigChannel+0x7e4>)
 800a20a:	428b      	cmp	r3, r1
 800a20c:	d140      	bne.n	800a290 <HAL_ADC_ConfigChannel+0x6e0>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	494f      	ldr	r1, [pc, #316]	@ (800a350 <HAL_ADC_ConfigChannel+0x7a0>)
 800a214:	428b      	cmp	r3, r1
 800a216:	d039      	beq.n	800a28c <HAL_ADC_ConfigChannel+0x6dc>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	494d      	ldr	r1, [pc, #308]	@ (800a354 <HAL_ADC_ConfigChannel+0x7a4>)
 800a21e:	428b      	cmp	r3, r1
 800a220:	d032      	beq.n	800a288 <HAL_ADC_ConfigChannel+0x6d8>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	494c      	ldr	r1, [pc, #304]	@ (800a358 <HAL_ADC_ConfigChannel+0x7a8>)
 800a228:	428b      	cmp	r3, r1
 800a22a:	d02b      	beq.n	800a284 <HAL_ADC_ConfigChannel+0x6d4>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	494a      	ldr	r1, [pc, #296]	@ (800a35c <HAL_ADC_ConfigChannel+0x7ac>)
 800a232:	428b      	cmp	r3, r1
 800a234:	d024      	beq.n	800a280 <HAL_ADC_ConfigChannel+0x6d0>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4949      	ldr	r1, [pc, #292]	@ (800a360 <HAL_ADC_ConfigChannel+0x7b0>)
 800a23c:	428b      	cmp	r3, r1
 800a23e:	d01d      	beq.n	800a27c <HAL_ADC_ConfigChannel+0x6cc>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4947      	ldr	r1, [pc, #284]	@ (800a364 <HAL_ADC_ConfigChannel+0x7b4>)
 800a246:	428b      	cmp	r3, r1
 800a248:	d016      	beq.n	800a278 <HAL_ADC_ConfigChannel+0x6c8>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4946      	ldr	r1, [pc, #280]	@ (800a368 <HAL_ADC_ConfigChannel+0x7b8>)
 800a250:	428b      	cmp	r3, r1
 800a252:	d00f      	beq.n	800a274 <HAL_ADC_ConfigChannel+0x6c4>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4944      	ldr	r1, [pc, #272]	@ (800a36c <HAL_ADC_ConfigChannel+0x7bc>)
 800a25a:	428b      	cmp	r3, r1
 800a25c:	d008      	beq.n	800a270 <HAL_ADC_ConfigChannel+0x6c0>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4944      	ldr	r1, [pc, #272]	@ (800a374 <HAL_ADC_ConfigChannel+0x7c4>)
 800a264:	428b      	cmp	r3, r1
 800a266:	d101      	bne.n	800a26c <HAL_ADC_ConfigChannel+0x6bc>
 800a268:	4b43      	ldr	r3, [pc, #268]	@ (800a378 <HAL_ADC_ConfigChannel+0x7c8>)
 800a26a:	e058      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a26c:	2300      	movs	r3, #0
 800a26e:	e056      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a270:	4b43      	ldr	r3, [pc, #268]	@ (800a380 <HAL_ADC_ConfigChannel+0x7d0>)
 800a272:	e054      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a274:	4b3d      	ldr	r3, [pc, #244]	@ (800a36c <HAL_ADC_ConfigChannel+0x7bc>)
 800a276:	e052      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a278:	4b3b      	ldr	r3, [pc, #236]	@ (800a368 <HAL_ADC_ConfigChannel+0x7b8>)
 800a27a:	e050      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a27c:	4b41      	ldr	r3, [pc, #260]	@ (800a384 <HAL_ADC_ConfigChannel+0x7d4>)
 800a27e:	e04e      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a280:	4b41      	ldr	r3, [pc, #260]	@ (800a388 <HAL_ADC_ConfigChannel+0x7d8>)
 800a282:	e04c      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a284:	4b41      	ldr	r3, [pc, #260]	@ (800a38c <HAL_ADC_ConfigChannel+0x7dc>)
 800a286:	e04a      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a288:	4b41      	ldr	r3, [pc, #260]	@ (800a390 <HAL_ADC_ConfigChannel+0x7e0>)
 800a28a:	e048      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e046      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4940      	ldr	r1, [pc, #256]	@ (800a398 <HAL_ADC_ConfigChannel+0x7e8>)
 800a296:	428b      	cmp	r3, r1
 800a298:	d140      	bne.n	800a31c <HAL_ADC_ConfigChannel+0x76c>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	492c      	ldr	r1, [pc, #176]	@ (800a350 <HAL_ADC_ConfigChannel+0x7a0>)
 800a2a0:	428b      	cmp	r3, r1
 800a2a2:	d039      	beq.n	800a318 <HAL_ADC_ConfigChannel+0x768>
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	492a      	ldr	r1, [pc, #168]	@ (800a354 <HAL_ADC_ConfigChannel+0x7a4>)
 800a2aa:	428b      	cmp	r3, r1
 800a2ac:	d032      	beq.n	800a314 <HAL_ADC_ConfigChannel+0x764>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4929      	ldr	r1, [pc, #164]	@ (800a358 <HAL_ADC_ConfigChannel+0x7a8>)
 800a2b4:	428b      	cmp	r3, r1
 800a2b6:	d02b      	beq.n	800a310 <HAL_ADC_ConfigChannel+0x760>
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4927      	ldr	r1, [pc, #156]	@ (800a35c <HAL_ADC_ConfigChannel+0x7ac>)
 800a2be:	428b      	cmp	r3, r1
 800a2c0:	d024      	beq.n	800a30c <HAL_ADC_ConfigChannel+0x75c>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4926      	ldr	r1, [pc, #152]	@ (800a360 <HAL_ADC_ConfigChannel+0x7b0>)
 800a2c8:	428b      	cmp	r3, r1
 800a2ca:	d01d      	beq.n	800a308 <HAL_ADC_ConfigChannel+0x758>
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4924      	ldr	r1, [pc, #144]	@ (800a364 <HAL_ADC_ConfigChannel+0x7b4>)
 800a2d2:	428b      	cmp	r3, r1
 800a2d4:	d016      	beq.n	800a304 <HAL_ADC_ConfigChannel+0x754>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4923      	ldr	r1, [pc, #140]	@ (800a368 <HAL_ADC_ConfigChannel+0x7b8>)
 800a2dc:	428b      	cmp	r3, r1
 800a2de:	d00f      	beq.n	800a300 <HAL_ADC_ConfigChannel+0x750>
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4926      	ldr	r1, [pc, #152]	@ (800a380 <HAL_ADC_ConfigChannel+0x7d0>)
 800a2e6:	428b      	cmp	r3, r1
 800a2e8:	d008      	beq.n	800a2fc <HAL_ADC_ConfigChannel+0x74c>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	492b      	ldr	r1, [pc, #172]	@ (800a39c <HAL_ADC_ConfigChannel+0x7ec>)
 800a2f0:	428b      	cmp	r3, r1
 800a2f2:	d101      	bne.n	800a2f8 <HAL_ADC_ConfigChannel+0x748>
 800a2f4:	4b2a      	ldr	r3, [pc, #168]	@ (800a3a0 <HAL_ADC_ConfigChannel+0x7f0>)
 800a2f6:	e012      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e010      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a2fc:	4b27      	ldr	r3, [pc, #156]	@ (800a39c <HAL_ADC_ConfigChannel+0x7ec>)
 800a2fe:	e00e      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a300:	4b1a      	ldr	r3, [pc, #104]	@ (800a36c <HAL_ADC_ConfigChannel+0x7bc>)
 800a302:	e00c      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a304:	4b18      	ldr	r3, [pc, #96]	@ (800a368 <HAL_ADC_ConfigChannel+0x7b8>)
 800a306:	e00a      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a308:	4b1e      	ldr	r3, [pc, #120]	@ (800a384 <HAL_ADC_ConfigChannel+0x7d4>)
 800a30a:	e008      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a30c:	4b1e      	ldr	r3, [pc, #120]	@ (800a388 <HAL_ADC_ConfigChannel+0x7d8>)
 800a30e:	e006      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a310:	4b1e      	ldr	r3, [pc, #120]	@ (800a38c <HAL_ADC_ConfigChannel+0x7dc>)
 800a312:	e004      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a314:	4b1e      	ldr	r3, [pc, #120]	@ (800a390 <HAL_ADC_ConfigChannel+0x7e0>)
 800a316:	e002      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a318:	2301      	movs	r3, #1
 800a31a:	e000      	b.n	800a31e <HAL_ADC_ConfigChannel+0x76e>
 800a31c:	2300      	movs	r3, #0
 800a31e:	4619      	mov	r1, r3
 800a320:	4610      	mov	r0, r2
 800a322:	f7fe fc0d 	bl	8008b40 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f280 80f6 	bge.w	800a51c <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a05      	ldr	r2, [pc, #20]	@ (800a34c <HAL_ADC_ConfigChannel+0x79c>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d004      	beq.n	800a344 <HAL_ADC_ConfigChannel+0x794>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a15      	ldr	r2, [pc, #84]	@ (800a394 <HAL_ADC_ConfigChannel+0x7e4>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d131      	bne.n	800a3a8 <HAL_ADC_ConfigChannel+0x7f8>
 800a344:	4b17      	ldr	r3, [pc, #92]	@ (800a3a4 <HAL_ADC_ConfigChannel+0x7f4>)
 800a346:	e030      	b.n	800a3aa <HAL_ADC_ConfigChannel+0x7fa>
 800a348:	47ff0000 	.word	0x47ff0000
 800a34c:	40022000 	.word	0x40022000
 800a350:	04300002 	.word	0x04300002
 800a354:	08600004 	.word	0x08600004
 800a358:	0c900008 	.word	0x0c900008
 800a35c:	10c00010 	.word	0x10c00010
 800a360:	14f00020 	.word	0x14f00020
 800a364:	2a000400 	.word	0x2a000400
 800a368:	2e300800 	.word	0x2e300800
 800a36c:	32601000 	.word	0x32601000
 800a370:	43210000 	.word	0x43210000
 800a374:	4b840000 	.word	0x4b840000
 800a378:	4fb80000 	.word	0x4fb80000
 800a37c:	47520000 	.word	0x47520000
 800a380:	36902000 	.word	0x36902000
 800a384:	25b00200 	.word	0x25b00200
 800a388:	21800100 	.word	0x21800100
 800a38c:	1d500080 	.word	0x1d500080
 800a390:	19200040 	.word	0x19200040
 800a394:	40022100 	.word	0x40022100
 800a398:	58026000 	.word	0x58026000
 800a39c:	3ac04000 	.word	0x3ac04000
 800a3a0:	3ef08000 	.word	0x3ef08000
 800a3a4:	40022300 	.word	0x40022300
 800a3a8:	4b61      	ldr	r3, [pc, #388]	@ (800a530 <HAL_ADC_ConfigChannel+0x980>)
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fbba 	bl	8008b24 <LL_ADC_GetCommonPathInternalCh>
 800a3b0:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a5f      	ldr	r2, [pc, #380]	@ (800a534 <HAL_ADC_ConfigChannel+0x984>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d004      	beq.n	800a3c6 <HAL_ADC_ConfigChannel+0x816>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a5d      	ldr	r2, [pc, #372]	@ (800a538 <HAL_ADC_ConfigChannel+0x988>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d10e      	bne.n	800a3e4 <HAL_ADC_ConfigChannel+0x834>
 800a3c6:	485b      	ldr	r0, [pc, #364]	@ (800a534 <HAL_ADC_ConfigChannel+0x984>)
 800a3c8:	f7fe fe5e 	bl	8009088 <LL_ADC_IsEnabled>
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	485a      	ldr	r0, [pc, #360]	@ (800a538 <HAL_ADC_ConfigChannel+0x988>)
 800a3d0:	f7fe fe5a 	bl	8009088 <LL_ADC_IsEnabled>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	4323      	orrs	r3, r4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bf0c      	ite	eq
 800a3dc:	2301      	moveq	r3, #1
 800a3de:	2300      	movne	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	e008      	b.n	800a3f6 <HAL_ADC_ConfigChannel+0x846>
 800a3e4:	4855      	ldr	r0, [pc, #340]	@ (800a53c <HAL_ADC_ConfigChannel+0x98c>)
 800a3e6:	f7fe fe4f 	bl	8009088 <LL_ADC_IsEnabled>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bf0c      	ite	eq
 800a3f0:	2301      	moveq	r3, #1
 800a3f2:	2300      	movne	r3, #0
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d07d      	beq.n	800a4f6 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a50      	ldr	r2, [pc, #320]	@ (800a540 <HAL_ADC_ConfigChannel+0x990>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d130      	bne.n	800a466 <HAL_ADC_ConfigChannel+0x8b6>
 800a404:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d12b      	bne.n	800a466 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a4a      	ldr	r2, [pc, #296]	@ (800a53c <HAL_ADC_ConfigChannel+0x98c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	f040 8081 	bne.w	800a51c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a45      	ldr	r2, [pc, #276]	@ (800a534 <HAL_ADC_ConfigChannel+0x984>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d004      	beq.n	800a42e <HAL_ADC_ConfigChannel+0x87e>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a43      	ldr	r2, [pc, #268]	@ (800a538 <HAL_ADC_ConfigChannel+0x988>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d101      	bne.n	800a432 <HAL_ADC_ConfigChannel+0x882>
 800a42e:	4a45      	ldr	r2, [pc, #276]	@ (800a544 <HAL_ADC_ConfigChannel+0x994>)
 800a430:	e000      	b.n	800a434 <HAL_ADC_ConfigChannel+0x884>
 800a432:	4a3f      	ldr	r2, [pc, #252]	@ (800a530 <HAL_ADC_ConfigChannel+0x980>)
 800a434:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a436:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a43a:	4619      	mov	r1, r3
 800a43c:	4610      	mov	r0, r2
 800a43e:	f7fe fb5e 	bl	8008afe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a442:	4b41      	ldr	r3, [pc, #260]	@ (800a548 <HAL_ADC_ConfigChannel+0x998>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	099b      	lsrs	r3, r3, #6
 800a448:	4a40      	ldr	r2, [pc, #256]	@ (800a54c <HAL_ADC_ConfigChannel+0x99c>)
 800a44a:	fba2 2303 	umull	r2, r3, r2, r3
 800a44e:	099b      	lsrs	r3, r3, #6
 800a450:	3301      	adds	r3, #1
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800a456:	e002      	b.n	800a45e <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1f9      	bne.n	800a458 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a464:	e05a      	b.n	800a51c <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a39      	ldr	r2, [pc, #228]	@ (800a550 <HAL_ADC_ConfigChannel+0x9a0>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d11e      	bne.n	800a4ae <HAL_ADC_ConfigChannel+0x8fe>
 800a470:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a472:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d119      	bne.n	800a4ae <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a2f      	ldr	r2, [pc, #188]	@ (800a53c <HAL_ADC_ConfigChannel+0x98c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d14b      	bne.n	800a51c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a2a      	ldr	r2, [pc, #168]	@ (800a534 <HAL_ADC_ConfigChannel+0x984>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d004      	beq.n	800a498 <HAL_ADC_ConfigChannel+0x8e8>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a29      	ldr	r2, [pc, #164]	@ (800a538 <HAL_ADC_ConfigChannel+0x988>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d101      	bne.n	800a49c <HAL_ADC_ConfigChannel+0x8ec>
 800a498:	4a2a      	ldr	r2, [pc, #168]	@ (800a544 <HAL_ADC_ConfigChannel+0x994>)
 800a49a:	e000      	b.n	800a49e <HAL_ADC_ConfigChannel+0x8ee>
 800a49c:	4a24      	ldr	r2, [pc, #144]	@ (800a530 <HAL_ADC_ConfigChannel+0x980>)
 800a49e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a4a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7fe fb29 	bl	8008afe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a4ac:	e036      	b.n	800a51c <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a28      	ldr	r2, [pc, #160]	@ (800a554 <HAL_ADC_ConfigChannel+0x9a4>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d131      	bne.n	800a51c <HAL_ADC_ConfigChannel+0x96c>
 800a4b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a4ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d12c      	bne.n	800a51c <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a1d      	ldr	r2, [pc, #116]	@ (800a53c <HAL_ADC_ConfigChannel+0x98c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d127      	bne.n	800a51c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a18      	ldr	r2, [pc, #96]	@ (800a534 <HAL_ADC_ConfigChannel+0x984>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d004      	beq.n	800a4e0 <HAL_ADC_ConfigChannel+0x930>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a17      	ldr	r2, [pc, #92]	@ (800a538 <HAL_ADC_ConfigChannel+0x988>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d101      	bne.n	800a4e4 <HAL_ADC_ConfigChannel+0x934>
 800a4e0:	4a18      	ldr	r2, [pc, #96]	@ (800a544 <HAL_ADC_ConfigChannel+0x994>)
 800a4e2:	e000      	b.n	800a4e6 <HAL_ADC_ConfigChannel+0x936>
 800a4e4:	4a12      	ldr	r2, [pc, #72]	@ (800a530 <HAL_ADC_ConfigChannel+0x980>)
 800a4e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a4e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	f7fe fb05 	bl	8008afe <LL_ADC_SetCommonPathInternalCh>
 800a4f4:	e012      	b.n	800a51c <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4fa:	f043 0220 	orr.w	r2, r3, #32
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a508:	e008      	b.n	800a51c <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a50e:	f043 0220 	orr.w	r2, r3, #32
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800a524:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3794      	adds	r7, #148	@ 0x94
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd90      	pop	{r4, r7, pc}
 800a530:	58026300 	.word	0x58026300
 800a534:	40022000 	.word	0x40022000
 800a538:	40022100 	.word	0x40022100
 800a53c:	58026000 	.word	0x58026000
 800a540:	c7520000 	.word	0xc7520000
 800a544:	40022300 	.word	0x40022300
 800a548:	24000004 	.word	0x24000004
 800a54c:	053e2d63 	.word	0x053e2d63
 800a550:	c3210000 	.word	0xc3210000
 800a554:	cb840000 	.word	0xcb840000

0800a558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe fd8f 	bl	8009088 <LL_ADC_IsEnabled>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d16e      	bne.n	800a64e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	4b38      	ldr	r3, [pc, #224]	@ (800a658 <ADC_Enable+0x100>)
 800a578:	4013      	ands	r3, r2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00d      	beq.n	800a59a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a582:	f043 0210 	orr.w	r2, r3, #16
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a58e:	f043 0201 	orr.w	r2, r3, #1
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e05a      	b.n	800a650 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe fd5e 	bl	8009060 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a5a4:	f7fe fa68 	bl	8008a78 <HAL_GetTick>
 800a5a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a2b      	ldr	r2, [pc, #172]	@ (800a65c <ADC_Enable+0x104>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d004      	beq.n	800a5be <ADC_Enable+0x66>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a29      	ldr	r2, [pc, #164]	@ (800a660 <ADC_Enable+0x108>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d101      	bne.n	800a5c2 <ADC_Enable+0x6a>
 800a5be:	4b29      	ldr	r3, [pc, #164]	@ (800a664 <ADC_Enable+0x10c>)
 800a5c0:	e000      	b.n	800a5c4 <ADC_Enable+0x6c>
 800a5c2:	4b29      	ldr	r3, [pc, #164]	@ (800a668 <ADC_Enable+0x110>)
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fce1 	bl	8008f8c <LL_ADC_GetMultimode>
 800a5ca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a23      	ldr	r2, [pc, #140]	@ (800a660 <ADC_Enable+0x108>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d002      	beq.n	800a5dc <ADC_Enable+0x84>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	e000      	b.n	800a5de <ADC_Enable+0x86>
 800a5dc:	4b1f      	ldr	r3, [pc, #124]	@ (800a65c <ADC_Enable+0x104>)
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	6812      	ldr	r2, [r2, #0]
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d02c      	beq.n	800a640 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d130      	bne.n	800a64e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a5ec:	e028      	b.n	800a640 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe fd48 	bl	8009088 <LL_ADC_IsEnabled>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d104      	bne.n	800a608 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe fd2c 	bl	8009060 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a608:	f7fe fa36 	bl	8008a78 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b02      	cmp	r3, #2
 800a614:	d914      	bls.n	800a640 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b01      	cmp	r3, #1
 800a622:	d00d      	beq.n	800a640 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a628:	f043 0210 	orr.w	r2, r3, #16
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a634:	f043 0201 	orr.w	r2, r3, #1
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e007      	b.n	800a650 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d1cf      	bne.n	800a5ee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	8000003f 	.word	0x8000003f
 800a65c:	40022000 	.word	0x40022000
 800a660:	40022100 	.word	0x40022100
 800a664:	40022300 	.word	0x40022300
 800a668:	58026300 	.word	0x58026300

0800a66c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a678:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a67e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a682:	2b00      	cmp	r3, #0
 800a684:	d14b      	bne.n	800a71e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a68a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0308 	and.w	r3, r3, #8
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d021      	beq.n	800a6e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe fb77 	bl	8008d98 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d032      	beq.n	800a716 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d12b      	bne.n	800a716 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d11f      	bne.n	800a716 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6da:	f043 0201 	orr.w	r2, r3, #1
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	661a      	str	r2, [r3, #96]	@ 0x60
 800a6e2:	e018      	b.n	800a716 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d111      	bne.n	800a716 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d105      	bne.n	800a716 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a70e:	f043 0201 	orr.w	r2, r3, #1
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7ff fa22 	bl	8009b60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a71c:	e00e      	b.n	800a73c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a722:	f003 0310 	and.w	r3, r3, #16
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7ff fa36 	bl	8009b9c <HAL_ADC_ErrorCallback>
}
 800a730:	e004      	b.n	800a73c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
}
 800a73c:	bf00      	nop
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a750:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff fa0e 	bl	8009b74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a758:	bf00      	nop
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a76c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a772:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a77e:	f043 0204 	orr.w	r2, r3, #4
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7ff fa08 	bl	8009b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a6c      	ldr	r2, [pc, #432]	@ (800a954 <ADC_ConfigureBoostMode+0x1c0>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d004      	beq.n	800a7b0 <ADC_ConfigureBoostMode+0x1c>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a6b      	ldr	r2, [pc, #428]	@ (800a958 <ADC_ConfigureBoostMode+0x1c4>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d109      	bne.n	800a7c4 <ADC_ConfigureBoostMode+0x30>
 800a7b0:	4b6a      	ldr	r3, [pc, #424]	@ (800a95c <ADC_ConfigureBoostMode+0x1c8>)
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bf14      	ite	ne
 800a7bc:	2301      	movne	r3, #1
 800a7be:	2300      	moveq	r3, #0
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	e008      	b.n	800a7d6 <ADC_ConfigureBoostMode+0x42>
 800a7c4:	4b66      	ldr	r3, [pc, #408]	@ (800a960 <ADC_ConfigureBoostMode+0x1cc>)
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bf14      	ite	ne
 800a7d0:	2301      	movne	r3, #1
 800a7d2:	2300      	moveq	r3, #0
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d01c      	beq.n	800a814 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800a7da:	f006 fe81 	bl	80114e0 <HAL_RCC_GetHCLKFreq>
 800a7de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7e8:	d010      	beq.n	800a80c <ADC_ConfigureBoostMode+0x78>
 800a7ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7ee:	d873      	bhi.n	800a8d8 <ADC_ConfigureBoostMode+0x144>
 800a7f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7f4:	d002      	beq.n	800a7fc <ADC_ConfigureBoostMode+0x68>
 800a7f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7fa:	d16d      	bne.n	800a8d8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	0c1b      	lsrs	r3, r3, #16
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	fbb2 f3f3 	udiv	r3, r2, r3
 800a808:	60fb      	str	r3, [r7, #12]
        break;
 800a80a:	e068      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	089b      	lsrs	r3, r3, #2
 800a810:	60fb      	str	r3, [r7, #12]
        break;
 800a812:	e064      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800a814:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a818:	f04f 0100 	mov.w	r1, #0
 800a81c:	f008 f85c 	bl	80128d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a820:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800a82a:	d051      	beq.n	800a8d0 <ADC_ConfigureBoostMode+0x13c>
 800a82c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800a830:	d854      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a832:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800a836:	d047      	beq.n	800a8c8 <ADC_ConfigureBoostMode+0x134>
 800a838:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800a83c:	d84e      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a83e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800a842:	d03d      	beq.n	800a8c0 <ADC_ConfigureBoostMode+0x12c>
 800a844:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800a848:	d848      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a84a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a84e:	d033      	beq.n	800a8b8 <ADC_ConfigureBoostMode+0x124>
 800a850:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a854:	d842      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a856:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800a85a:	d029      	beq.n	800a8b0 <ADC_ConfigureBoostMode+0x11c>
 800a85c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800a860:	d83c      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a862:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a866:	d01a      	beq.n	800a89e <ADC_ConfigureBoostMode+0x10a>
 800a868:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a86c:	d836      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a86e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a872:	d014      	beq.n	800a89e <ADC_ConfigureBoostMode+0x10a>
 800a874:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a878:	d830      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a87a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a87e:	d00e      	beq.n	800a89e <ADC_ConfigureBoostMode+0x10a>
 800a880:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a884:	d82a      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a886:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a88a:	d008      	beq.n	800a89e <ADC_ConfigureBoostMode+0x10a>
 800a88c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a890:	d824      	bhi.n	800a8dc <ADC_ConfigureBoostMode+0x148>
 800a892:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a896:	d002      	beq.n	800a89e <ADC_ConfigureBoostMode+0x10a>
 800a898:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a89c:	d11e      	bne.n	800a8dc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	0c9b      	lsrs	r3, r3, #18
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ac:	60fb      	str	r3, [r7, #12]
        break;
 800a8ae:	e016      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	091b      	lsrs	r3, r3, #4
 800a8b4:	60fb      	str	r3, [r7, #12]
        break;
 800a8b6:	e012      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	095b      	lsrs	r3, r3, #5
 800a8bc:	60fb      	str	r3, [r7, #12]
        break;
 800a8be:	e00e      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	099b      	lsrs	r3, r3, #6
 800a8c4:	60fb      	str	r3, [r7, #12]
        break;
 800a8c6:	e00a      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	09db      	lsrs	r3, r3, #7
 800a8cc:	60fb      	str	r3, [r7, #12]
        break;
 800a8ce:	e006      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	60fb      	str	r3, [r7, #12]
        break;
 800a8d6:	e002      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
        break;
 800a8d8:	bf00      	nop
 800a8da:	e000      	b.n	800a8de <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800a8dc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	085b      	lsrs	r3, r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	4a1f      	ldr	r2, [pc, #124]	@ (800a964 <ADC_ConfigureBoostMode+0x1d0>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d808      	bhi.n	800a8fe <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689a      	ldr	r2, [r3, #8]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a8fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800a8fc:	e025      	b.n	800a94a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4a19      	ldr	r2, [pc, #100]	@ (800a968 <ADC_ConfigureBoostMode+0x1d4>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d80a      	bhi.n	800a91c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a918:	609a      	str	r2, [r3, #8]
}
 800a91a:	e016      	b.n	800a94a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4a13      	ldr	r2, [pc, #76]	@ (800a96c <ADC_ConfigureBoostMode+0x1d8>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d80a      	bhi.n	800a93a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a936:	609a      	str	r2, [r3, #8]
}
 800a938:	e007      	b.n	800a94a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689a      	ldr	r2, [r3, #8]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a948:	609a      	str	r2, [r3, #8]
}
 800a94a:	bf00      	nop
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	40022000 	.word	0x40022000
 800a958:	40022100 	.word	0x40022100
 800a95c:	40022300 	.word	0x40022300
 800a960:	58026300 	.word	0x58026300
 800a964:	005f5e10 	.word	0x005f5e10
 800a968:	00bebc20 	.word	0x00bebc20
 800a96c:	017d7840 	.word	0x017d7840

0800a970 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <__NVIC_SetPriorityGrouping>:
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f003 0307 	and.w	r3, r3, #7
 800a9e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa14 <__NVIC_SetPriorityGrouping+0x40>)
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a9fc:	4b06      	ldr	r3, [pc, #24]	@ (800aa18 <__NVIC_SetPriorityGrouping+0x44>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aa02:	4a04      	ldr	r2, [pc, #16]	@ (800aa14 <__NVIC_SetPriorityGrouping+0x40>)
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	60d3      	str	r3, [r2, #12]
}
 800aa08:	bf00      	nop
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	e000ed00 	.word	0xe000ed00
 800aa18:	05fa0000 	.word	0x05fa0000

0800aa1c <__NVIC_GetPriorityGrouping>:
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aa20:	4b04      	ldr	r3, [pc, #16]	@ (800aa34 <__NVIC_GetPriorityGrouping+0x18>)
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	0a1b      	lsrs	r3, r3, #8
 800aa26:	f003 0307 	and.w	r3, r3, #7
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	e000ed00 	.word	0xe000ed00

0800aa38 <__NVIC_EnableIRQ>:
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800aa42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	db0b      	blt.n	800aa62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	f003 021f 	and.w	r2, r3, #31
 800aa50:	4907      	ldr	r1, [pc, #28]	@ (800aa70 <__NVIC_EnableIRQ+0x38>)
 800aa52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	2001      	movs	r0, #1
 800aa5a:	fa00 f202 	lsl.w	r2, r0, r2
 800aa5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800aa62:	bf00      	nop
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	e000e100 	.word	0xe000e100

0800aa74 <__NVIC_SetPriority>:
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800aa80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	db0a      	blt.n	800aa9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	490c      	ldr	r1, [pc, #48]	@ (800aac0 <__NVIC_SetPriority+0x4c>)
 800aa8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa92:	0112      	lsls	r2, r2, #4
 800aa94:	b2d2      	uxtb	r2, r2
 800aa96:	440b      	add	r3, r1
 800aa98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aa9c:	e00a      	b.n	800aab4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	4908      	ldr	r1, [pc, #32]	@ (800aac4 <__NVIC_SetPriority+0x50>)
 800aaa4:	88fb      	ldrh	r3, [r7, #6]
 800aaa6:	f003 030f 	and.w	r3, r3, #15
 800aaaa:	3b04      	subs	r3, #4
 800aaac:	0112      	lsls	r2, r2, #4
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	440b      	add	r3, r1
 800aab2:	761a      	strb	r2, [r3, #24]
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	e000e100 	.word	0xe000e100
 800aac4:	e000ed00 	.word	0xe000ed00

0800aac8 <NVIC_EncodePriority>:
{
 800aac8:	b480      	push	{r7}
 800aaca:	b089      	sub	sp, #36	@ 0x24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	f1c3 0307 	rsb	r3, r3, #7
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	bf28      	it	cs
 800aae6:	2304      	movcs	r3, #4
 800aae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	3304      	adds	r3, #4
 800aaee:	2b06      	cmp	r3, #6
 800aaf0:	d902      	bls.n	800aaf8 <NVIC_EncodePriority+0x30>
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	3b03      	subs	r3, #3
 800aaf6:	e000      	b.n	800aafa <NVIC_EncodePriority+0x32>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aafc:	f04f 32ff 	mov.w	r2, #4294967295
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	fa02 f303 	lsl.w	r3, r2, r3
 800ab06:	43da      	mvns	r2, r3
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	401a      	ands	r2, r3
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ab10:	f04f 31ff 	mov.w	r1, #4294967295
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	fa01 f303 	lsl.w	r3, r1, r3
 800ab1a:	43d9      	mvns	r1, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab20:	4313      	orrs	r3, r2
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3724      	adds	r7, #36	@ 0x24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
	...

0800ab30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab40:	d301      	bcc.n	800ab46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ab42:	2301      	movs	r3, #1
 800ab44:	e00f      	b.n	800ab66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ab46:	4a0a      	ldr	r2, [pc, #40]	@ (800ab70 <SysTick_Config+0x40>)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ab4e:	210f      	movs	r1, #15
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	f7ff ff8e 	bl	800aa74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ab58:	4b05      	ldr	r3, [pc, #20]	@ (800ab70 <SysTick_Config+0x40>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ab5e:	4b04      	ldr	r3, [pc, #16]	@ (800ab70 <SysTick_Config+0x40>)
 800ab60:	2207      	movs	r2, #7
 800ab62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	e000e010 	.word	0xe000e010

0800ab74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7ff ff29 	bl	800a9d4 <__NVIC_SetPriorityGrouping>
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b086      	sub	sp, #24
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	4603      	mov	r3, r0
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
 800ab96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ab98:	f7ff ff40 	bl	800aa1c <__NVIC_GetPriorityGrouping>
 800ab9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	68b9      	ldr	r1, [r7, #8]
 800aba2:	6978      	ldr	r0, [r7, #20]
 800aba4:	f7ff ff90 	bl	800aac8 <NVIC_EncodePriority>
 800aba8:	4602      	mov	r2, r0
 800abaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800abae:	4611      	mov	r1, r2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff ff5f 	bl	800aa74 <__NVIC_SetPriority>
}
 800abb6:	bf00      	nop
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b082      	sub	sp, #8
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	4603      	mov	r3, r0
 800abc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800abc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff ff33 	bl	800aa38 <__NVIC_EnableIRQ>
}
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7ff ffa4 	bl	800ab30 <SysTick_Config>
 800abe8:	4603      	mov	r3, r0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800abf4:	b480      	push	{r7}
 800abf6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800abf8:	f3bf 8f5f 	dmb	sy
}
 800abfc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800abfe:	4b07      	ldr	r3, [pc, #28]	@ (800ac1c <HAL_MPU_Disable+0x28>)
 800ac00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac02:	4a06      	ldr	r2, [pc, #24]	@ (800ac1c <HAL_MPU_Disable+0x28>)
 800ac04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac08:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800ac0a:	4b05      	ldr	r3, [pc, #20]	@ (800ac20 <HAL_MPU_Disable+0x2c>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	605a      	str	r2, [r3, #4]
}
 800ac10:	bf00      	nop
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	e000ed00 	.word	0xe000ed00
 800ac20:	e000ed90 	.word	0xe000ed90

0800ac24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800ac2c:	4a0b      	ldr	r2, [pc, #44]	@ (800ac5c <HAL_MPU_Enable+0x38>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f043 0301 	orr.w	r3, r3, #1
 800ac34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800ac36:	4b0a      	ldr	r3, [pc, #40]	@ (800ac60 <HAL_MPU_Enable+0x3c>)
 800ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3a:	4a09      	ldr	r2, [pc, #36]	@ (800ac60 <HAL_MPU_Enable+0x3c>)
 800ac3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac40:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800ac42:	f3bf 8f4f 	dsb	sy
}
 800ac46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ac48:	f3bf 8f6f 	isb	sy
}
 800ac4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	e000ed90 	.word	0xe000ed90
 800ac60:	e000ed00 	.word	0xe000ed00

0800ac64 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	785a      	ldrb	r2, [r3, #1]
 800ac70:	4b1b      	ldr	r3, [pc, #108]	@ (800ace0 <HAL_MPU_ConfigRegion+0x7c>)
 800ac72:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800ac74:	4b1a      	ldr	r3, [pc, #104]	@ (800ace0 <HAL_MPU_ConfigRegion+0x7c>)
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	4a19      	ldr	r2, [pc, #100]	@ (800ace0 <HAL_MPU_ConfigRegion+0x7c>)
 800ac7a:	f023 0301 	bic.w	r3, r3, #1
 800ac7e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800ac80:	4a17      	ldr	r2, [pc, #92]	@ (800ace0 <HAL_MPU_ConfigRegion+0x7c>)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7b1b      	ldrb	r3, [r3, #12]
 800ac8c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	7adb      	ldrb	r3, [r3, #11]
 800ac92:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	7a9b      	ldrb	r3, [r3, #10]
 800ac9a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ac9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	7b5b      	ldrb	r3, [r3, #13]
 800aca2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800aca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7b9b      	ldrb	r3, [r3, #14]
 800acaa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800acac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	7bdb      	ldrb	r3, [r3, #15]
 800acb2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800acb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7a5b      	ldrb	r3, [r3, #9]
 800acba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800acbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	7a1b      	ldrb	r3, [r3, #8]
 800acc2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800acc4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	7812      	ldrb	r2, [r2, #0]
 800acca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800accc:	4a04      	ldr	r2, [pc, #16]	@ (800ace0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800acce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800acd0:	6113      	str	r3, [r2, #16]
}
 800acd2:	bf00      	nop
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	e000ed90 	.word	0xe000ed90

0800ace4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800acec:	f7fd fec4 	bl	8008a78 <HAL_GetTick>
 800acf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e312      	b.n	800b322 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a66      	ldr	r2, [pc, #408]	@ (800ae9c <HAL_DMA_Init+0x1b8>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d04a      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a65      	ldr	r2, [pc, #404]	@ (800aea0 <HAL_DMA_Init+0x1bc>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d045      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a63      	ldr	r2, [pc, #396]	@ (800aea4 <HAL_DMA_Init+0x1c0>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d040      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a62      	ldr	r2, [pc, #392]	@ (800aea8 <HAL_DMA_Init+0x1c4>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d03b      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a60      	ldr	r2, [pc, #384]	@ (800aeac <HAL_DMA_Init+0x1c8>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d036      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a5f      	ldr	r2, [pc, #380]	@ (800aeb0 <HAL_DMA_Init+0x1cc>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d031      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a5d      	ldr	r2, [pc, #372]	@ (800aeb4 <HAL_DMA_Init+0x1d0>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d02c      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a5c      	ldr	r2, [pc, #368]	@ (800aeb8 <HAL_DMA_Init+0x1d4>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d027      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a5a      	ldr	r2, [pc, #360]	@ (800aebc <HAL_DMA_Init+0x1d8>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d022      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a59      	ldr	r2, [pc, #356]	@ (800aec0 <HAL_DMA_Init+0x1dc>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d01d      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a57      	ldr	r2, [pc, #348]	@ (800aec4 <HAL_DMA_Init+0x1e0>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d018      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a56      	ldr	r2, [pc, #344]	@ (800aec8 <HAL_DMA_Init+0x1e4>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d013      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a54      	ldr	r2, [pc, #336]	@ (800aecc <HAL_DMA_Init+0x1e8>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d00e      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a53      	ldr	r2, [pc, #332]	@ (800aed0 <HAL_DMA_Init+0x1ec>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d009      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a51      	ldr	r2, [pc, #324]	@ (800aed4 <HAL_DMA_Init+0x1f0>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d004      	beq.n	800ad9c <HAL_DMA_Init+0xb8>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a50      	ldr	r2, [pc, #320]	@ (800aed8 <HAL_DMA_Init+0x1f4>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d101      	bne.n	800ada0 <HAL_DMA_Init+0xbc>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e000      	b.n	800ada2 <HAL_DMA_Init+0xbe>
 800ada0:	2300      	movs	r3, #0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 813c 	beq.w	800b020 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2202      	movs	r2, #2
 800adac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a37      	ldr	r2, [pc, #220]	@ (800ae9c <HAL_DMA_Init+0x1b8>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d04a      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a36      	ldr	r2, [pc, #216]	@ (800aea0 <HAL_DMA_Init+0x1bc>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d045      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a34      	ldr	r2, [pc, #208]	@ (800aea4 <HAL_DMA_Init+0x1c0>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d040      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a33      	ldr	r2, [pc, #204]	@ (800aea8 <HAL_DMA_Init+0x1c4>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d03b      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a31      	ldr	r2, [pc, #196]	@ (800aeac <HAL_DMA_Init+0x1c8>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d036      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a30      	ldr	r2, [pc, #192]	@ (800aeb0 <HAL_DMA_Init+0x1cc>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d031      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a2e      	ldr	r2, [pc, #184]	@ (800aeb4 <HAL_DMA_Init+0x1d0>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d02c      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a2d      	ldr	r2, [pc, #180]	@ (800aeb8 <HAL_DMA_Init+0x1d4>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d027      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a2b      	ldr	r2, [pc, #172]	@ (800aebc <HAL_DMA_Init+0x1d8>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d022      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a2a      	ldr	r2, [pc, #168]	@ (800aec0 <HAL_DMA_Init+0x1dc>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d01d      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a28      	ldr	r2, [pc, #160]	@ (800aec4 <HAL_DMA_Init+0x1e0>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d018      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a27      	ldr	r2, [pc, #156]	@ (800aec8 <HAL_DMA_Init+0x1e4>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d013      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a25      	ldr	r2, [pc, #148]	@ (800aecc <HAL_DMA_Init+0x1e8>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d00e      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a24      	ldr	r2, [pc, #144]	@ (800aed0 <HAL_DMA_Init+0x1ec>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d009      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a22      	ldr	r2, [pc, #136]	@ (800aed4 <HAL_DMA_Init+0x1f0>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d004      	beq.n	800ae58 <HAL_DMA_Init+0x174>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a21      	ldr	r2, [pc, #132]	@ (800aed8 <HAL_DMA_Init+0x1f4>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d108      	bne.n	800ae6a <HAL_DMA_Init+0x186>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f022 0201 	bic.w	r2, r2, #1
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	e007      	b.n	800ae7a <HAL_DMA_Init+0x196>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f022 0201 	bic.w	r2, r2, #1
 800ae78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ae7a:	e02f      	b.n	800aedc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ae7c:	f7fd fdfc 	bl	8008a78 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b05      	cmp	r3, #5
 800ae88:	d928      	bls.n	800aedc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2203      	movs	r2, #3
 800ae94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e242      	b.n	800b322 <HAL_DMA_Init+0x63e>
 800ae9c:	40020010 	.word	0x40020010
 800aea0:	40020028 	.word	0x40020028
 800aea4:	40020040 	.word	0x40020040
 800aea8:	40020058 	.word	0x40020058
 800aeac:	40020070 	.word	0x40020070
 800aeb0:	40020088 	.word	0x40020088
 800aeb4:	400200a0 	.word	0x400200a0
 800aeb8:	400200b8 	.word	0x400200b8
 800aebc:	40020410 	.word	0x40020410
 800aec0:	40020428 	.word	0x40020428
 800aec4:	40020440 	.word	0x40020440
 800aec8:	40020458 	.word	0x40020458
 800aecc:	40020470 	.word	0x40020470
 800aed0:	40020488 	.word	0x40020488
 800aed4:	400204a0 	.word	0x400204a0
 800aed8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1c8      	bne.n	800ae7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	4b83      	ldr	r3, [pc, #524]	@ (800b104 <HAL_DMA_Init+0x420>)
 800aef6:	4013      	ands	r3, r2
 800aef8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800af02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4313      	orrs	r3, r2
 800af26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	d107      	bne.n	800af40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af38:	4313      	orrs	r3, r2
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	2b28      	cmp	r3, #40	@ 0x28
 800af46:	d903      	bls.n	800af50 <HAL_DMA_Init+0x26c>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af4e:	d91f      	bls.n	800af90 <HAL_DMA_Init+0x2ac>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	2b3e      	cmp	r3, #62	@ 0x3e
 800af56:	d903      	bls.n	800af60 <HAL_DMA_Init+0x27c>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b42      	cmp	r3, #66	@ 0x42
 800af5e:	d917      	bls.n	800af90 <HAL_DMA_Init+0x2ac>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	2b46      	cmp	r3, #70	@ 0x46
 800af66:	d903      	bls.n	800af70 <HAL_DMA_Init+0x28c>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	2b48      	cmp	r3, #72	@ 0x48
 800af6e:	d90f      	bls.n	800af90 <HAL_DMA_Init+0x2ac>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	2b4e      	cmp	r3, #78	@ 0x4e
 800af76:	d903      	bls.n	800af80 <HAL_DMA_Init+0x29c>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	2b52      	cmp	r3, #82	@ 0x52
 800af7e:	d907      	bls.n	800af90 <HAL_DMA_Init+0x2ac>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	2b73      	cmp	r3, #115	@ 0x73
 800af86:	d905      	bls.n	800af94 <HAL_DMA_Init+0x2b0>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	2b77      	cmp	r3, #119	@ 0x77
 800af8e:	d801      	bhi.n	800af94 <HAL_DMA_Init+0x2b0>
 800af90:	2301      	movs	r3, #1
 800af92:	e000      	b.n	800af96 <HAL_DMA_Init+0x2b2>
 800af94:	2300      	movs	r3, #0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afa0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f023 0307 	bic.w	r3, r3, #7
 800afb8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d117      	bne.n	800affc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00e      	beq.n	800affc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f002 fb48 	bl	800d674 <DMA_CheckFifoParam>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d008      	beq.n	800affc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2240      	movs	r2, #64	@ 0x40
 800afee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e192      	b.n	800b322 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f002 fa83 	bl	800d510 <DMA_CalcBaseAndBitshift>
 800b00a:	4603      	mov	r3, r0
 800b00c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b012:	f003 031f 	and.w	r3, r3, #31
 800b016:	223f      	movs	r2, #63	@ 0x3f
 800b018:	409a      	lsls	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	609a      	str	r2, [r3, #8]
 800b01e:	e0c8      	b.n	800b1b2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a38      	ldr	r2, [pc, #224]	@ (800b108 <HAL_DMA_Init+0x424>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d022      	beq.n	800b070 <HAL_DMA_Init+0x38c>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a37      	ldr	r2, [pc, #220]	@ (800b10c <HAL_DMA_Init+0x428>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d01d      	beq.n	800b070 <HAL_DMA_Init+0x38c>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a35      	ldr	r2, [pc, #212]	@ (800b110 <HAL_DMA_Init+0x42c>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d018      	beq.n	800b070 <HAL_DMA_Init+0x38c>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a34      	ldr	r2, [pc, #208]	@ (800b114 <HAL_DMA_Init+0x430>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d013      	beq.n	800b070 <HAL_DMA_Init+0x38c>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a32      	ldr	r2, [pc, #200]	@ (800b118 <HAL_DMA_Init+0x434>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d00e      	beq.n	800b070 <HAL_DMA_Init+0x38c>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a31      	ldr	r2, [pc, #196]	@ (800b11c <HAL_DMA_Init+0x438>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d009      	beq.n	800b070 <HAL_DMA_Init+0x38c>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a2f      	ldr	r2, [pc, #188]	@ (800b120 <HAL_DMA_Init+0x43c>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d004      	beq.n	800b070 <HAL_DMA_Init+0x38c>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a2e      	ldr	r2, [pc, #184]	@ (800b124 <HAL_DMA_Init+0x440>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d101      	bne.n	800b074 <HAL_DMA_Init+0x390>
 800b070:	2301      	movs	r3, #1
 800b072:	e000      	b.n	800b076 <HAL_DMA_Init+0x392>
 800b074:	2300      	movs	r3, #0
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 8092 	beq.w	800b1a0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a21      	ldr	r2, [pc, #132]	@ (800b108 <HAL_DMA_Init+0x424>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d021      	beq.n	800b0ca <HAL_DMA_Init+0x3e6>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a20      	ldr	r2, [pc, #128]	@ (800b10c <HAL_DMA_Init+0x428>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d01c      	beq.n	800b0ca <HAL_DMA_Init+0x3e6>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a1e      	ldr	r2, [pc, #120]	@ (800b110 <HAL_DMA_Init+0x42c>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d017      	beq.n	800b0ca <HAL_DMA_Init+0x3e6>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a1d      	ldr	r2, [pc, #116]	@ (800b114 <HAL_DMA_Init+0x430>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d012      	beq.n	800b0ca <HAL_DMA_Init+0x3e6>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a1b      	ldr	r2, [pc, #108]	@ (800b118 <HAL_DMA_Init+0x434>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d00d      	beq.n	800b0ca <HAL_DMA_Init+0x3e6>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a1a      	ldr	r2, [pc, #104]	@ (800b11c <HAL_DMA_Init+0x438>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d008      	beq.n	800b0ca <HAL_DMA_Init+0x3e6>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a18      	ldr	r2, [pc, #96]	@ (800b120 <HAL_DMA_Init+0x43c>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d003      	beq.n	800b0ca <HAL_DMA_Init+0x3e6>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a17      	ldr	r2, [pc, #92]	@ (800b124 <HAL_DMA_Init+0x440>)
 800b0c8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	4b10      	ldr	r3, [pc, #64]	@ (800b128 <HAL_DMA_Init+0x444>)
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	2b40      	cmp	r3, #64	@ 0x40
 800b0f0:	d01c      	beq.n	800b12c <HAL_DMA_Init+0x448>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	2b80      	cmp	r3, #128	@ 0x80
 800b0f8:	d102      	bne.n	800b100 <HAL_DMA_Init+0x41c>
 800b0fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b0fe:	e016      	b.n	800b12e <HAL_DMA_Init+0x44a>
 800b100:	2300      	movs	r3, #0
 800b102:	e014      	b.n	800b12e <HAL_DMA_Init+0x44a>
 800b104:	fe10803f 	.word	0xfe10803f
 800b108:	58025408 	.word	0x58025408
 800b10c:	5802541c 	.word	0x5802541c
 800b110:	58025430 	.word	0x58025430
 800b114:	58025444 	.word	0x58025444
 800b118:	58025458 	.word	0x58025458
 800b11c:	5802546c 	.word	0x5802546c
 800b120:	58025480 	.word	0x58025480
 800b124:	58025494 	.word	0x58025494
 800b128:	fffe000f 	.word	0xfffe000f
 800b12c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	68d2      	ldr	r2, [r2, #12]
 800b132:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b13c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b14c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b15c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	4313      	orrs	r3, r2
 800b162:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	4b6e      	ldr	r3, [pc, #440]	@ (800b32c <HAL_DMA_Init+0x648>)
 800b174:	4413      	add	r3, r2
 800b176:	4a6e      	ldr	r2, [pc, #440]	@ (800b330 <HAL_DMA_Init+0x64c>)
 800b178:	fba2 2303 	umull	r2, r3, r2, r3
 800b17c:	091b      	lsrs	r3, r3, #4
 800b17e:	009a      	lsls	r2, r3, #2
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f002 f9c3 	bl	800d510 <DMA_CalcBaseAndBitshift>
 800b18a:	4603      	mov	r3, r0
 800b18c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b192:	f003 031f 	and.w	r3, r3, #31
 800b196:	2201      	movs	r2, #1
 800b198:	409a      	lsls	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	605a      	str	r2, [r3, #4]
 800b19e:	e008      	b.n	800b1b2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2240      	movs	r2, #64	@ 0x40
 800b1a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2203      	movs	r2, #3
 800b1aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e0b7      	b.n	800b322 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a5f      	ldr	r2, [pc, #380]	@ (800b334 <HAL_DMA_Init+0x650>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d072      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a5d      	ldr	r2, [pc, #372]	@ (800b338 <HAL_DMA_Init+0x654>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d06d      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a5c      	ldr	r2, [pc, #368]	@ (800b33c <HAL_DMA_Init+0x658>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d068      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a5a      	ldr	r2, [pc, #360]	@ (800b340 <HAL_DMA_Init+0x65c>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d063      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a59      	ldr	r2, [pc, #356]	@ (800b344 <HAL_DMA_Init+0x660>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d05e      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a57      	ldr	r2, [pc, #348]	@ (800b348 <HAL_DMA_Init+0x664>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d059      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a56      	ldr	r2, [pc, #344]	@ (800b34c <HAL_DMA_Init+0x668>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d054      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a54      	ldr	r2, [pc, #336]	@ (800b350 <HAL_DMA_Init+0x66c>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d04f      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a53      	ldr	r2, [pc, #332]	@ (800b354 <HAL_DMA_Init+0x670>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d04a      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a51      	ldr	r2, [pc, #324]	@ (800b358 <HAL_DMA_Init+0x674>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d045      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a50      	ldr	r2, [pc, #320]	@ (800b35c <HAL_DMA_Init+0x678>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d040      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a4e      	ldr	r2, [pc, #312]	@ (800b360 <HAL_DMA_Init+0x67c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d03b      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a4d      	ldr	r2, [pc, #308]	@ (800b364 <HAL_DMA_Init+0x680>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d036      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a4b      	ldr	r2, [pc, #300]	@ (800b368 <HAL_DMA_Init+0x684>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d031      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a4a      	ldr	r2, [pc, #296]	@ (800b36c <HAL_DMA_Init+0x688>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d02c      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a48      	ldr	r2, [pc, #288]	@ (800b370 <HAL_DMA_Init+0x68c>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d027      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a47      	ldr	r2, [pc, #284]	@ (800b374 <HAL_DMA_Init+0x690>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d022      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a45      	ldr	r2, [pc, #276]	@ (800b378 <HAL_DMA_Init+0x694>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d01d      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a44      	ldr	r2, [pc, #272]	@ (800b37c <HAL_DMA_Init+0x698>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d018      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a42      	ldr	r2, [pc, #264]	@ (800b380 <HAL_DMA_Init+0x69c>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d013      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a41      	ldr	r2, [pc, #260]	@ (800b384 <HAL_DMA_Init+0x6a0>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00e      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a3f      	ldr	r2, [pc, #252]	@ (800b388 <HAL_DMA_Init+0x6a4>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d009      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a3e      	ldr	r2, [pc, #248]	@ (800b38c <HAL_DMA_Init+0x6a8>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d004      	beq.n	800b2a2 <HAL_DMA_Init+0x5be>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a3c      	ldr	r2, [pc, #240]	@ (800b390 <HAL_DMA_Init+0x6ac>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d101      	bne.n	800b2a6 <HAL_DMA_Init+0x5c2>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e000      	b.n	800b2a8 <HAL_DMA_Init+0x5c4>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d032      	beq.n	800b312 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f002 fa5d 	bl	800d76c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	2b80      	cmp	r3, #128	@ 0x80
 800b2b8:	d102      	bne.n	800b2c0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b2d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d010      	beq.n	800b300 <HAL_DMA_Init+0x61c>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	2b08      	cmp	r3, #8
 800b2e4:	d80c      	bhi.n	800b300 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f002 fada 	bl	800d8a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b2fc:	605a      	str	r2, [r3, #4]
 800b2fe:	e008      	b.n	800b312 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	a7fdabf8 	.word	0xa7fdabf8
 800b330:	cccccccd 	.word	0xcccccccd
 800b334:	40020010 	.word	0x40020010
 800b338:	40020028 	.word	0x40020028
 800b33c:	40020040 	.word	0x40020040
 800b340:	40020058 	.word	0x40020058
 800b344:	40020070 	.word	0x40020070
 800b348:	40020088 	.word	0x40020088
 800b34c:	400200a0 	.word	0x400200a0
 800b350:	400200b8 	.word	0x400200b8
 800b354:	40020410 	.word	0x40020410
 800b358:	40020428 	.word	0x40020428
 800b35c:	40020440 	.word	0x40020440
 800b360:	40020458 	.word	0x40020458
 800b364:	40020470 	.word	0x40020470
 800b368:	40020488 	.word	0x40020488
 800b36c:	400204a0 	.word	0x400204a0
 800b370:	400204b8 	.word	0x400204b8
 800b374:	58025408 	.word	0x58025408
 800b378:	5802541c 	.word	0x5802541c
 800b37c:	58025430 	.word	0x58025430
 800b380:	58025444 	.word	0x58025444
 800b384:	58025458 	.word	0x58025458
 800b388:	5802546c 	.word	0x5802546c
 800b38c:	58025480 	.word	0x58025480
 800b390:	58025494 	.word	0x58025494

0800b394 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e226      	b.n	800b7fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d101      	bne.n	800b3be <HAL_DMA_Start_IT+0x2a>
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	e21f      	b.n	800b7fe <HAL_DMA_Start_IT+0x46a>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	f040 820a 	bne.w	800b7e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a68      	ldr	r2, [pc, #416]	@ (800b588 <HAL_DMA_Start_IT+0x1f4>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d04a      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a66      	ldr	r2, [pc, #408]	@ (800b58c <HAL_DMA_Start_IT+0x1f8>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d045      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a65      	ldr	r2, [pc, #404]	@ (800b590 <HAL_DMA_Start_IT+0x1fc>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d040      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a63      	ldr	r2, [pc, #396]	@ (800b594 <HAL_DMA_Start_IT+0x200>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d03b      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a62      	ldr	r2, [pc, #392]	@ (800b598 <HAL_DMA_Start_IT+0x204>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d036      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a60      	ldr	r2, [pc, #384]	@ (800b59c <HAL_DMA_Start_IT+0x208>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d031      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a5f      	ldr	r2, [pc, #380]	@ (800b5a0 <HAL_DMA_Start_IT+0x20c>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d02c      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a5d      	ldr	r2, [pc, #372]	@ (800b5a4 <HAL_DMA_Start_IT+0x210>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d027      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a5c      	ldr	r2, [pc, #368]	@ (800b5a8 <HAL_DMA_Start_IT+0x214>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d022      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a5a      	ldr	r2, [pc, #360]	@ (800b5ac <HAL_DMA_Start_IT+0x218>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d01d      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a59      	ldr	r2, [pc, #356]	@ (800b5b0 <HAL_DMA_Start_IT+0x21c>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d018      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a57      	ldr	r2, [pc, #348]	@ (800b5b4 <HAL_DMA_Start_IT+0x220>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d013      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a56      	ldr	r2, [pc, #344]	@ (800b5b8 <HAL_DMA_Start_IT+0x224>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d00e      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a54      	ldr	r2, [pc, #336]	@ (800b5bc <HAL_DMA_Start_IT+0x228>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d009      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a53      	ldr	r2, [pc, #332]	@ (800b5c0 <HAL_DMA_Start_IT+0x22c>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d004      	beq.n	800b482 <HAL_DMA_Start_IT+0xee>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a51      	ldr	r2, [pc, #324]	@ (800b5c4 <HAL_DMA_Start_IT+0x230>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d108      	bne.n	800b494 <HAL_DMA_Start_IT+0x100>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f022 0201 	bic.w	r2, r2, #1
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	e007      	b.n	800b4a4 <HAL_DMA_Start_IT+0x110>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f022 0201 	bic.w	r2, r2, #1
 800b4a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	68b9      	ldr	r1, [r7, #8]
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f001 fe84 	bl	800d1b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a34      	ldr	r2, [pc, #208]	@ (800b588 <HAL_DMA_Start_IT+0x1f4>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d04a      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a33      	ldr	r2, [pc, #204]	@ (800b58c <HAL_DMA_Start_IT+0x1f8>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d045      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a31      	ldr	r2, [pc, #196]	@ (800b590 <HAL_DMA_Start_IT+0x1fc>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d040      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a30      	ldr	r2, [pc, #192]	@ (800b594 <HAL_DMA_Start_IT+0x200>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d03b      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a2e      	ldr	r2, [pc, #184]	@ (800b598 <HAL_DMA_Start_IT+0x204>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d036      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a2d      	ldr	r2, [pc, #180]	@ (800b59c <HAL_DMA_Start_IT+0x208>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d031      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a2b      	ldr	r2, [pc, #172]	@ (800b5a0 <HAL_DMA_Start_IT+0x20c>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d02c      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800b5a4 <HAL_DMA_Start_IT+0x210>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d027      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a28      	ldr	r2, [pc, #160]	@ (800b5a8 <HAL_DMA_Start_IT+0x214>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d022      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a27      	ldr	r2, [pc, #156]	@ (800b5ac <HAL_DMA_Start_IT+0x218>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d01d      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a25      	ldr	r2, [pc, #148]	@ (800b5b0 <HAL_DMA_Start_IT+0x21c>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d018      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a24      	ldr	r2, [pc, #144]	@ (800b5b4 <HAL_DMA_Start_IT+0x220>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d013      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a22      	ldr	r2, [pc, #136]	@ (800b5b8 <HAL_DMA_Start_IT+0x224>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d00e      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a21      	ldr	r2, [pc, #132]	@ (800b5bc <HAL_DMA_Start_IT+0x228>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d009      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a1f      	ldr	r2, [pc, #124]	@ (800b5c0 <HAL_DMA_Start_IT+0x22c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d004      	beq.n	800b550 <HAL_DMA_Start_IT+0x1bc>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a1e      	ldr	r2, [pc, #120]	@ (800b5c4 <HAL_DMA_Start_IT+0x230>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d101      	bne.n	800b554 <HAL_DMA_Start_IT+0x1c0>
 800b550:	2301      	movs	r3, #1
 800b552:	e000      	b.n	800b556 <HAL_DMA_Start_IT+0x1c2>
 800b554:	2300      	movs	r3, #0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d036      	beq.n	800b5c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f023 021e 	bic.w	r2, r3, #30
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f042 0216 	orr.w	r2, r2, #22
 800b56c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b572:	2b00      	cmp	r3, #0
 800b574:	d03e      	beq.n	800b5f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f042 0208 	orr.w	r2, r2, #8
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	e035      	b.n	800b5f4 <HAL_DMA_Start_IT+0x260>
 800b588:	40020010 	.word	0x40020010
 800b58c:	40020028 	.word	0x40020028
 800b590:	40020040 	.word	0x40020040
 800b594:	40020058 	.word	0x40020058
 800b598:	40020070 	.word	0x40020070
 800b59c:	40020088 	.word	0x40020088
 800b5a0:	400200a0 	.word	0x400200a0
 800b5a4:	400200b8 	.word	0x400200b8
 800b5a8:	40020410 	.word	0x40020410
 800b5ac:	40020428 	.word	0x40020428
 800b5b0:	40020440 	.word	0x40020440
 800b5b4:	40020458 	.word	0x40020458
 800b5b8:	40020470 	.word	0x40020470
 800b5bc:	40020488 	.word	0x40020488
 800b5c0:	400204a0 	.word	0x400204a0
 800b5c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f023 020e 	bic.w	r2, r3, #14
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f042 020a 	orr.w	r2, r2, #10
 800b5da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d007      	beq.n	800b5f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0204 	orr.w	r2, r2, #4
 800b5f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a83      	ldr	r2, [pc, #524]	@ (800b808 <HAL_DMA_Start_IT+0x474>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d072      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a82      	ldr	r2, [pc, #520]	@ (800b80c <HAL_DMA_Start_IT+0x478>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d06d      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a80      	ldr	r2, [pc, #512]	@ (800b810 <HAL_DMA_Start_IT+0x47c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d068      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a7f      	ldr	r2, [pc, #508]	@ (800b814 <HAL_DMA_Start_IT+0x480>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d063      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a7d      	ldr	r2, [pc, #500]	@ (800b818 <HAL_DMA_Start_IT+0x484>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d05e      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a7c      	ldr	r2, [pc, #496]	@ (800b81c <HAL_DMA_Start_IT+0x488>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d059      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a7a      	ldr	r2, [pc, #488]	@ (800b820 <HAL_DMA_Start_IT+0x48c>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d054      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a79      	ldr	r2, [pc, #484]	@ (800b824 <HAL_DMA_Start_IT+0x490>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d04f      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a77      	ldr	r2, [pc, #476]	@ (800b828 <HAL_DMA_Start_IT+0x494>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d04a      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a76      	ldr	r2, [pc, #472]	@ (800b82c <HAL_DMA_Start_IT+0x498>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d045      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a74      	ldr	r2, [pc, #464]	@ (800b830 <HAL_DMA_Start_IT+0x49c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d040      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a73      	ldr	r2, [pc, #460]	@ (800b834 <HAL_DMA_Start_IT+0x4a0>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d03b      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a71      	ldr	r2, [pc, #452]	@ (800b838 <HAL_DMA_Start_IT+0x4a4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d036      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a70      	ldr	r2, [pc, #448]	@ (800b83c <HAL_DMA_Start_IT+0x4a8>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d031      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a6e      	ldr	r2, [pc, #440]	@ (800b840 <HAL_DMA_Start_IT+0x4ac>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d02c      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a6d      	ldr	r2, [pc, #436]	@ (800b844 <HAL_DMA_Start_IT+0x4b0>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d027      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a6b      	ldr	r2, [pc, #428]	@ (800b848 <HAL_DMA_Start_IT+0x4b4>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d022      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a6a      	ldr	r2, [pc, #424]	@ (800b84c <HAL_DMA_Start_IT+0x4b8>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d01d      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a68      	ldr	r2, [pc, #416]	@ (800b850 <HAL_DMA_Start_IT+0x4bc>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d018      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a67      	ldr	r2, [pc, #412]	@ (800b854 <HAL_DMA_Start_IT+0x4c0>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d013      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a65      	ldr	r2, [pc, #404]	@ (800b858 <HAL_DMA_Start_IT+0x4c4>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d00e      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a64      	ldr	r2, [pc, #400]	@ (800b85c <HAL_DMA_Start_IT+0x4c8>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d009      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a62      	ldr	r2, [pc, #392]	@ (800b860 <HAL_DMA_Start_IT+0x4cc>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d004      	beq.n	800b6e4 <HAL_DMA_Start_IT+0x350>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a61      	ldr	r2, [pc, #388]	@ (800b864 <HAL_DMA_Start_IT+0x4d0>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d101      	bne.n	800b6e8 <HAL_DMA_Start_IT+0x354>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e000      	b.n	800b6ea <HAL_DMA_Start_IT+0x356>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d01a      	beq.n	800b724 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b706:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b70a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b710:	2b00      	cmp	r3, #0
 800b712:	d007      	beq.n	800b724 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b71e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b722:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a37      	ldr	r2, [pc, #220]	@ (800b808 <HAL_DMA_Start_IT+0x474>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d04a      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a36      	ldr	r2, [pc, #216]	@ (800b80c <HAL_DMA_Start_IT+0x478>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d045      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a34      	ldr	r2, [pc, #208]	@ (800b810 <HAL_DMA_Start_IT+0x47c>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d040      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a33      	ldr	r2, [pc, #204]	@ (800b814 <HAL_DMA_Start_IT+0x480>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d03b      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a31      	ldr	r2, [pc, #196]	@ (800b818 <HAL_DMA_Start_IT+0x484>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d036      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a30      	ldr	r2, [pc, #192]	@ (800b81c <HAL_DMA_Start_IT+0x488>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d031      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a2e      	ldr	r2, [pc, #184]	@ (800b820 <HAL_DMA_Start_IT+0x48c>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d02c      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a2d      	ldr	r2, [pc, #180]	@ (800b824 <HAL_DMA_Start_IT+0x490>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d027      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a2b      	ldr	r2, [pc, #172]	@ (800b828 <HAL_DMA_Start_IT+0x494>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d022      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a2a      	ldr	r2, [pc, #168]	@ (800b82c <HAL_DMA_Start_IT+0x498>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d01d      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a28      	ldr	r2, [pc, #160]	@ (800b830 <HAL_DMA_Start_IT+0x49c>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d018      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a27      	ldr	r2, [pc, #156]	@ (800b834 <HAL_DMA_Start_IT+0x4a0>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d013      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a25      	ldr	r2, [pc, #148]	@ (800b838 <HAL_DMA_Start_IT+0x4a4>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d00e      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a24      	ldr	r2, [pc, #144]	@ (800b83c <HAL_DMA_Start_IT+0x4a8>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d009      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a22      	ldr	r2, [pc, #136]	@ (800b840 <HAL_DMA_Start_IT+0x4ac>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d004      	beq.n	800b7c4 <HAL_DMA_Start_IT+0x430>
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a21      	ldr	r2, [pc, #132]	@ (800b844 <HAL_DMA_Start_IT+0x4b0>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d108      	bne.n	800b7d6 <HAL_DMA_Start_IT+0x442>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f042 0201 	orr.w	r2, r2, #1
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	e012      	b.n	800b7fc <HAL_DMA_Start_IT+0x468>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f042 0201 	orr.w	r2, r2, #1
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	e009      	b.n	800b7fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b7ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	40020010 	.word	0x40020010
 800b80c:	40020028 	.word	0x40020028
 800b810:	40020040 	.word	0x40020040
 800b814:	40020058 	.word	0x40020058
 800b818:	40020070 	.word	0x40020070
 800b81c:	40020088 	.word	0x40020088
 800b820:	400200a0 	.word	0x400200a0
 800b824:	400200b8 	.word	0x400200b8
 800b828:	40020410 	.word	0x40020410
 800b82c:	40020428 	.word	0x40020428
 800b830:	40020440 	.word	0x40020440
 800b834:	40020458 	.word	0x40020458
 800b838:	40020470 	.word	0x40020470
 800b83c:	40020488 	.word	0x40020488
 800b840:	400204a0 	.word	0x400204a0
 800b844:	400204b8 	.word	0x400204b8
 800b848:	58025408 	.word	0x58025408
 800b84c:	5802541c 	.word	0x5802541c
 800b850:	58025430 	.word	0x58025430
 800b854:	58025444 	.word	0x58025444
 800b858:	58025458 	.word	0x58025458
 800b85c:	5802546c 	.word	0x5802546c
 800b860:	58025480 	.word	0x58025480
 800b864:	58025494 	.word	0x58025494

0800b868 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800b870:	f7fd f902 	bl	8008a78 <HAL_GetTick>
 800b874:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e2dc      	b.n	800be3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d008      	beq.n	800b89e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2280      	movs	r2, #128	@ 0x80
 800b890:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e2cd      	b.n	800be3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a76      	ldr	r2, [pc, #472]	@ (800ba7c <HAL_DMA_Abort+0x214>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d04a      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a74      	ldr	r2, [pc, #464]	@ (800ba80 <HAL_DMA_Abort+0x218>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d045      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a73      	ldr	r2, [pc, #460]	@ (800ba84 <HAL_DMA_Abort+0x21c>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d040      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a71      	ldr	r2, [pc, #452]	@ (800ba88 <HAL_DMA_Abort+0x220>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d03b      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a70      	ldr	r2, [pc, #448]	@ (800ba8c <HAL_DMA_Abort+0x224>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d036      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a6e      	ldr	r2, [pc, #440]	@ (800ba90 <HAL_DMA_Abort+0x228>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d031      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a6d      	ldr	r2, [pc, #436]	@ (800ba94 <HAL_DMA_Abort+0x22c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d02c      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a6b      	ldr	r2, [pc, #428]	@ (800ba98 <HAL_DMA_Abort+0x230>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d027      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a6a      	ldr	r2, [pc, #424]	@ (800ba9c <HAL_DMA_Abort+0x234>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d022      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a68      	ldr	r2, [pc, #416]	@ (800baa0 <HAL_DMA_Abort+0x238>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d01d      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a67      	ldr	r2, [pc, #412]	@ (800baa4 <HAL_DMA_Abort+0x23c>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d018      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a65      	ldr	r2, [pc, #404]	@ (800baa8 <HAL_DMA_Abort+0x240>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d013      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a64      	ldr	r2, [pc, #400]	@ (800baac <HAL_DMA_Abort+0x244>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d00e      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a62      	ldr	r2, [pc, #392]	@ (800bab0 <HAL_DMA_Abort+0x248>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d009      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a61      	ldr	r2, [pc, #388]	@ (800bab4 <HAL_DMA_Abort+0x24c>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d004      	beq.n	800b93e <HAL_DMA_Abort+0xd6>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a5f      	ldr	r2, [pc, #380]	@ (800bab8 <HAL_DMA_Abort+0x250>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d101      	bne.n	800b942 <HAL_DMA_Abort+0xda>
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <HAL_DMA_Abort+0xdc>
 800b942:	2300      	movs	r3, #0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d013      	beq.n	800b970 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f022 021e 	bic.w	r2, r2, #30
 800b956:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	695a      	ldr	r2, [r3, #20]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b966:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	e00a      	b.n	800b986 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f022 020e 	bic.w	r2, r2, #14
 800b97e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a3c      	ldr	r2, [pc, #240]	@ (800ba7c <HAL_DMA_Abort+0x214>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d072      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a3a      	ldr	r2, [pc, #232]	@ (800ba80 <HAL_DMA_Abort+0x218>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d06d      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a39      	ldr	r2, [pc, #228]	@ (800ba84 <HAL_DMA_Abort+0x21c>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d068      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a37      	ldr	r2, [pc, #220]	@ (800ba88 <HAL_DMA_Abort+0x220>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d063      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a36      	ldr	r2, [pc, #216]	@ (800ba8c <HAL_DMA_Abort+0x224>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d05e      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a34      	ldr	r2, [pc, #208]	@ (800ba90 <HAL_DMA_Abort+0x228>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d059      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a33      	ldr	r2, [pc, #204]	@ (800ba94 <HAL_DMA_Abort+0x22c>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d054      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a31      	ldr	r2, [pc, #196]	@ (800ba98 <HAL_DMA_Abort+0x230>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d04f      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a30      	ldr	r2, [pc, #192]	@ (800ba9c <HAL_DMA_Abort+0x234>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d04a      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a2e      	ldr	r2, [pc, #184]	@ (800baa0 <HAL_DMA_Abort+0x238>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d045      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a2d      	ldr	r2, [pc, #180]	@ (800baa4 <HAL_DMA_Abort+0x23c>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d040      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a2b      	ldr	r2, [pc, #172]	@ (800baa8 <HAL_DMA_Abort+0x240>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d03b      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a2a      	ldr	r2, [pc, #168]	@ (800baac <HAL_DMA_Abort+0x244>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d036      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a28      	ldr	r2, [pc, #160]	@ (800bab0 <HAL_DMA_Abort+0x248>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d031      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a27      	ldr	r2, [pc, #156]	@ (800bab4 <HAL_DMA_Abort+0x24c>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d02c      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a25      	ldr	r2, [pc, #148]	@ (800bab8 <HAL_DMA_Abort+0x250>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d027      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a24      	ldr	r2, [pc, #144]	@ (800babc <HAL_DMA_Abort+0x254>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d022      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a22      	ldr	r2, [pc, #136]	@ (800bac0 <HAL_DMA_Abort+0x258>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d01d      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a21      	ldr	r2, [pc, #132]	@ (800bac4 <HAL_DMA_Abort+0x25c>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d018      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a1f      	ldr	r2, [pc, #124]	@ (800bac8 <HAL_DMA_Abort+0x260>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d013      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a1e      	ldr	r2, [pc, #120]	@ (800bacc <HAL_DMA_Abort+0x264>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d00e      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a1c      	ldr	r2, [pc, #112]	@ (800bad0 <HAL_DMA_Abort+0x268>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d009      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a1b      	ldr	r2, [pc, #108]	@ (800bad4 <HAL_DMA_Abort+0x26c>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d004      	beq.n	800ba76 <HAL_DMA_Abort+0x20e>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a19      	ldr	r2, [pc, #100]	@ (800bad8 <HAL_DMA_Abort+0x270>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d132      	bne.n	800badc <HAL_DMA_Abort+0x274>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e031      	b.n	800bade <HAL_DMA_Abort+0x276>
 800ba7a:	bf00      	nop
 800ba7c:	40020010 	.word	0x40020010
 800ba80:	40020028 	.word	0x40020028
 800ba84:	40020040 	.word	0x40020040
 800ba88:	40020058 	.word	0x40020058
 800ba8c:	40020070 	.word	0x40020070
 800ba90:	40020088 	.word	0x40020088
 800ba94:	400200a0 	.word	0x400200a0
 800ba98:	400200b8 	.word	0x400200b8
 800ba9c:	40020410 	.word	0x40020410
 800baa0:	40020428 	.word	0x40020428
 800baa4:	40020440 	.word	0x40020440
 800baa8:	40020458 	.word	0x40020458
 800baac:	40020470 	.word	0x40020470
 800bab0:	40020488 	.word	0x40020488
 800bab4:	400204a0 	.word	0x400204a0
 800bab8:	400204b8 	.word	0x400204b8
 800babc:	58025408 	.word	0x58025408
 800bac0:	5802541c 	.word	0x5802541c
 800bac4:	58025430 	.word	0x58025430
 800bac8:	58025444 	.word	0x58025444
 800bacc:	58025458 	.word	0x58025458
 800bad0:	5802546c 	.word	0x5802546c
 800bad4:	58025480 	.word	0x58025480
 800bad8:	58025494 	.word	0x58025494
 800badc:	2300      	movs	r3, #0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d007      	beq.n	800baf2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800baf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a6d      	ldr	r2, [pc, #436]	@ (800bcac <HAL_DMA_Abort+0x444>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d04a      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a6b      	ldr	r2, [pc, #428]	@ (800bcb0 <HAL_DMA_Abort+0x448>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d045      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a6a      	ldr	r2, [pc, #424]	@ (800bcb4 <HAL_DMA_Abort+0x44c>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d040      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a68      	ldr	r2, [pc, #416]	@ (800bcb8 <HAL_DMA_Abort+0x450>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d03b      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a67      	ldr	r2, [pc, #412]	@ (800bcbc <HAL_DMA_Abort+0x454>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d036      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a65      	ldr	r2, [pc, #404]	@ (800bcc0 <HAL_DMA_Abort+0x458>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d031      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a64      	ldr	r2, [pc, #400]	@ (800bcc4 <HAL_DMA_Abort+0x45c>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d02c      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a62      	ldr	r2, [pc, #392]	@ (800bcc8 <HAL_DMA_Abort+0x460>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d027      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a61      	ldr	r2, [pc, #388]	@ (800bccc <HAL_DMA_Abort+0x464>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d022      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a5f      	ldr	r2, [pc, #380]	@ (800bcd0 <HAL_DMA_Abort+0x468>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d01d      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a5e      	ldr	r2, [pc, #376]	@ (800bcd4 <HAL_DMA_Abort+0x46c>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d018      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a5c      	ldr	r2, [pc, #368]	@ (800bcd8 <HAL_DMA_Abort+0x470>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d013      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a5b      	ldr	r2, [pc, #364]	@ (800bcdc <HAL_DMA_Abort+0x474>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d00e      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a59      	ldr	r2, [pc, #356]	@ (800bce0 <HAL_DMA_Abort+0x478>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d009      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a58      	ldr	r2, [pc, #352]	@ (800bce4 <HAL_DMA_Abort+0x47c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d004      	beq.n	800bb92 <HAL_DMA_Abort+0x32a>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a56      	ldr	r2, [pc, #344]	@ (800bce8 <HAL_DMA_Abort+0x480>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d108      	bne.n	800bba4 <HAL_DMA_Abort+0x33c>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0201 	bic.w	r2, r2, #1
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	e007      	b.n	800bbb4 <HAL_DMA_Abort+0x34c>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f022 0201 	bic.w	r2, r2, #1
 800bbb2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800bbb4:	e013      	b.n	800bbde <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bbb6:	f7fc ff5f 	bl	8008a78 <HAL_GetTick>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	2b05      	cmp	r3, #5
 800bbc2:	d90c      	bls.n	800bbde <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2220      	movs	r2, #32
 800bbc8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2203      	movs	r2, #3
 800bbce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e12d      	b.n	800be3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e5      	bne.n	800bbb6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a2f      	ldr	r2, [pc, #188]	@ (800bcac <HAL_DMA_Abort+0x444>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d04a      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a2d      	ldr	r2, [pc, #180]	@ (800bcb0 <HAL_DMA_Abort+0x448>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d045      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a2c      	ldr	r2, [pc, #176]	@ (800bcb4 <HAL_DMA_Abort+0x44c>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d040      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a2a      	ldr	r2, [pc, #168]	@ (800bcb8 <HAL_DMA_Abort+0x450>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d03b      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a29      	ldr	r2, [pc, #164]	@ (800bcbc <HAL_DMA_Abort+0x454>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d036      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a27      	ldr	r2, [pc, #156]	@ (800bcc0 <HAL_DMA_Abort+0x458>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d031      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a26      	ldr	r2, [pc, #152]	@ (800bcc4 <HAL_DMA_Abort+0x45c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d02c      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a24      	ldr	r2, [pc, #144]	@ (800bcc8 <HAL_DMA_Abort+0x460>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d027      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a23      	ldr	r2, [pc, #140]	@ (800bccc <HAL_DMA_Abort+0x464>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d022      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a21      	ldr	r2, [pc, #132]	@ (800bcd0 <HAL_DMA_Abort+0x468>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d01d      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a20      	ldr	r2, [pc, #128]	@ (800bcd4 <HAL_DMA_Abort+0x46c>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d018      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a1e      	ldr	r2, [pc, #120]	@ (800bcd8 <HAL_DMA_Abort+0x470>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d013      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a1d      	ldr	r2, [pc, #116]	@ (800bcdc <HAL_DMA_Abort+0x474>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d00e      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a1b      	ldr	r2, [pc, #108]	@ (800bce0 <HAL_DMA_Abort+0x478>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d009      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a1a      	ldr	r2, [pc, #104]	@ (800bce4 <HAL_DMA_Abort+0x47c>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d004      	beq.n	800bc8a <HAL_DMA_Abort+0x422>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a18      	ldr	r2, [pc, #96]	@ (800bce8 <HAL_DMA_Abort+0x480>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d101      	bne.n	800bc8e <HAL_DMA_Abort+0x426>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e000      	b.n	800bc90 <HAL_DMA_Abort+0x428>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d02b      	beq.n	800bcec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc98:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc9e:	f003 031f 	and.w	r3, r3, #31
 800bca2:	223f      	movs	r2, #63	@ 0x3f
 800bca4:	409a      	lsls	r2, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	609a      	str	r2, [r3, #8]
 800bcaa:	e02a      	b.n	800bd02 <HAL_DMA_Abort+0x49a>
 800bcac:	40020010 	.word	0x40020010
 800bcb0:	40020028 	.word	0x40020028
 800bcb4:	40020040 	.word	0x40020040
 800bcb8:	40020058 	.word	0x40020058
 800bcbc:	40020070 	.word	0x40020070
 800bcc0:	40020088 	.word	0x40020088
 800bcc4:	400200a0 	.word	0x400200a0
 800bcc8:	400200b8 	.word	0x400200b8
 800bccc:	40020410 	.word	0x40020410
 800bcd0:	40020428 	.word	0x40020428
 800bcd4:	40020440 	.word	0x40020440
 800bcd8:	40020458 	.word	0x40020458
 800bcdc:	40020470 	.word	0x40020470
 800bce0:	40020488 	.word	0x40020488
 800bce4:	400204a0 	.word	0x400204a0
 800bce8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcf0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcf6:	f003 031f 	and.w	r3, r3, #31
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	409a      	lsls	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a4f      	ldr	r2, [pc, #316]	@ (800be44 <HAL_DMA_Abort+0x5dc>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d072      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a4d      	ldr	r2, [pc, #308]	@ (800be48 <HAL_DMA_Abort+0x5e0>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d06d      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a4c      	ldr	r2, [pc, #304]	@ (800be4c <HAL_DMA_Abort+0x5e4>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d068      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a4a      	ldr	r2, [pc, #296]	@ (800be50 <HAL_DMA_Abort+0x5e8>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d063      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a49      	ldr	r2, [pc, #292]	@ (800be54 <HAL_DMA_Abort+0x5ec>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d05e      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a47      	ldr	r2, [pc, #284]	@ (800be58 <HAL_DMA_Abort+0x5f0>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d059      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a46      	ldr	r2, [pc, #280]	@ (800be5c <HAL_DMA_Abort+0x5f4>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d054      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a44      	ldr	r2, [pc, #272]	@ (800be60 <HAL_DMA_Abort+0x5f8>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d04f      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a43      	ldr	r2, [pc, #268]	@ (800be64 <HAL_DMA_Abort+0x5fc>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d04a      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a41      	ldr	r2, [pc, #260]	@ (800be68 <HAL_DMA_Abort+0x600>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d045      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a40      	ldr	r2, [pc, #256]	@ (800be6c <HAL_DMA_Abort+0x604>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d040      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a3e      	ldr	r2, [pc, #248]	@ (800be70 <HAL_DMA_Abort+0x608>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d03b      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a3d      	ldr	r2, [pc, #244]	@ (800be74 <HAL_DMA_Abort+0x60c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d036      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a3b      	ldr	r2, [pc, #236]	@ (800be78 <HAL_DMA_Abort+0x610>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d031      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a3a      	ldr	r2, [pc, #232]	@ (800be7c <HAL_DMA_Abort+0x614>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d02c      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a38      	ldr	r2, [pc, #224]	@ (800be80 <HAL_DMA_Abort+0x618>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d027      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a37      	ldr	r2, [pc, #220]	@ (800be84 <HAL_DMA_Abort+0x61c>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d022      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a35      	ldr	r2, [pc, #212]	@ (800be88 <HAL_DMA_Abort+0x620>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d01d      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a34      	ldr	r2, [pc, #208]	@ (800be8c <HAL_DMA_Abort+0x624>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d018      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a32      	ldr	r2, [pc, #200]	@ (800be90 <HAL_DMA_Abort+0x628>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d013      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a31      	ldr	r2, [pc, #196]	@ (800be94 <HAL_DMA_Abort+0x62c>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d00e      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a2f      	ldr	r2, [pc, #188]	@ (800be98 <HAL_DMA_Abort+0x630>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d009      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a2e      	ldr	r2, [pc, #184]	@ (800be9c <HAL_DMA_Abort+0x634>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d004      	beq.n	800bdf2 <HAL_DMA_Abort+0x58a>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a2c      	ldr	r2, [pc, #176]	@ (800bea0 <HAL_DMA_Abort+0x638>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d101      	bne.n	800bdf6 <HAL_DMA_Abort+0x58e>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e000      	b.n	800bdf8 <HAL_DMA_Abort+0x590>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d015      	beq.n	800be28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800be04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00c      	beq.n	800be28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800be26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	40020010 	.word	0x40020010
 800be48:	40020028 	.word	0x40020028
 800be4c:	40020040 	.word	0x40020040
 800be50:	40020058 	.word	0x40020058
 800be54:	40020070 	.word	0x40020070
 800be58:	40020088 	.word	0x40020088
 800be5c:	400200a0 	.word	0x400200a0
 800be60:	400200b8 	.word	0x400200b8
 800be64:	40020410 	.word	0x40020410
 800be68:	40020428 	.word	0x40020428
 800be6c:	40020440 	.word	0x40020440
 800be70:	40020458 	.word	0x40020458
 800be74:	40020470 	.word	0x40020470
 800be78:	40020488 	.word	0x40020488
 800be7c:	400204a0 	.word	0x400204a0
 800be80:	400204b8 	.word	0x400204b8
 800be84:	58025408 	.word	0x58025408
 800be88:	5802541c 	.word	0x5802541c
 800be8c:	58025430 	.word	0x58025430
 800be90:	58025444 	.word	0x58025444
 800be94:	58025458 	.word	0x58025458
 800be98:	5802546c 	.word	0x5802546c
 800be9c:	58025480 	.word	0x58025480
 800bea0:	58025494 	.word	0x58025494

0800bea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	e237      	b.n	800c326 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d004      	beq.n	800becc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2280      	movs	r2, #128	@ 0x80
 800bec6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	e22c      	b.n	800c326 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a5c      	ldr	r2, [pc, #368]	@ (800c044 <HAL_DMA_Abort_IT+0x1a0>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d04a      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a5b      	ldr	r2, [pc, #364]	@ (800c048 <HAL_DMA_Abort_IT+0x1a4>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d045      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a59      	ldr	r2, [pc, #356]	@ (800c04c <HAL_DMA_Abort_IT+0x1a8>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d040      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a58      	ldr	r2, [pc, #352]	@ (800c050 <HAL_DMA_Abort_IT+0x1ac>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d03b      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a56      	ldr	r2, [pc, #344]	@ (800c054 <HAL_DMA_Abort_IT+0x1b0>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d036      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a55      	ldr	r2, [pc, #340]	@ (800c058 <HAL_DMA_Abort_IT+0x1b4>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d031      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a53      	ldr	r2, [pc, #332]	@ (800c05c <HAL_DMA_Abort_IT+0x1b8>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d02c      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a52      	ldr	r2, [pc, #328]	@ (800c060 <HAL_DMA_Abort_IT+0x1bc>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d027      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a50      	ldr	r2, [pc, #320]	@ (800c064 <HAL_DMA_Abort_IT+0x1c0>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d022      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a4f      	ldr	r2, [pc, #316]	@ (800c068 <HAL_DMA_Abort_IT+0x1c4>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d01d      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a4d      	ldr	r2, [pc, #308]	@ (800c06c <HAL_DMA_Abort_IT+0x1c8>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d018      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a4c      	ldr	r2, [pc, #304]	@ (800c070 <HAL_DMA_Abort_IT+0x1cc>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d013      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a4a      	ldr	r2, [pc, #296]	@ (800c074 <HAL_DMA_Abort_IT+0x1d0>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d00e      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a49      	ldr	r2, [pc, #292]	@ (800c078 <HAL_DMA_Abort_IT+0x1d4>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d009      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a47      	ldr	r2, [pc, #284]	@ (800c07c <HAL_DMA_Abort_IT+0x1d8>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d004      	beq.n	800bf6c <HAL_DMA_Abort_IT+0xc8>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a46      	ldr	r2, [pc, #280]	@ (800c080 <HAL_DMA_Abort_IT+0x1dc>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d101      	bne.n	800bf70 <HAL_DMA_Abort_IT+0xcc>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e000      	b.n	800bf72 <HAL_DMA_Abort_IT+0xce>
 800bf70:	2300      	movs	r3, #0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f000 8086 	beq.w	800c084 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2204      	movs	r2, #4
 800bf7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a2f      	ldr	r2, [pc, #188]	@ (800c044 <HAL_DMA_Abort_IT+0x1a0>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d04a      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a2e      	ldr	r2, [pc, #184]	@ (800c048 <HAL_DMA_Abort_IT+0x1a4>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d045      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a2c      	ldr	r2, [pc, #176]	@ (800c04c <HAL_DMA_Abort_IT+0x1a8>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d040      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a2b      	ldr	r2, [pc, #172]	@ (800c050 <HAL_DMA_Abort_IT+0x1ac>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d03b      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a29      	ldr	r2, [pc, #164]	@ (800c054 <HAL_DMA_Abort_IT+0x1b0>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d036      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a28      	ldr	r2, [pc, #160]	@ (800c058 <HAL_DMA_Abort_IT+0x1b4>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d031      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a26      	ldr	r2, [pc, #152]	@ (800c05c <HAL_DMA_Abort_IT+0x1b8>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d02c      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a25      	ldr	r2, [pc, #148]	@ (800c060 <HAL_DMA_Abort_IT+0x1bc>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d027      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a23      	ldr	r2, [pc, #140]	@ (800c064 <HAL_DMA_Abort_IT+0x1c0>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d022      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a22      	ldr	r2, [pc, #136]	@ (800c068 <HAL_DMA_Abort_IT+0x1c4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d01d      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a20      	ldr	r2, [pc, #128]	@ (800c06c <HAL_DMA_Abort_IT+0x1c8>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d018      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a1f      	ldr	r2, [pc, #124]	@ (800c070 <HAL_DMA_Abort_IT+0x1cc>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d013      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a1d      	ldr	r2, [pc, #116]	@ (800c074 <HAL_DMA_Abort_IT+0x1d0>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d00e      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a1c      	ldr	r2, [pc, #112]	@ (800c078 <HAL_DMA_Abort_IT+0x1d4>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d009      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a1a      	ldr	r2, [pc, #104]	@ (800c07c <HAL_DMA_Abort_IT+0x1d8>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d004      	beq.n	800c020 <HAL_DMA_Abort_IT+0x17c>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a19      	ldr	r2, [pc, #100]	@ (800c080 <HAL_DMA_Abort_IT+0x1dc>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d108      	bne.n	800c032 <HAL_DMA_Abort_IT+0x18e>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f022 0201 	bic.w	r2, r2, #1
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	e178      	b.n	800c324 <HAL_DMA_Abort_IT+0x480>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f022 0201 	bic.w	r2, r2, #1
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	e16f      	b.n	800c324 <HAL_DMA_Abort_IT+0x480>
 800c044:	40020010 	.word	0x40020010
 800c048:	40020028 	.word	0x40020028
 800c04c:	40020040 	.word	0x40020040
 800c050:	40020058 	.word	0x40020058
 800c054:	40020070 	.word	0x40020070
 800c058:	40020088 	.word	0x40020088
 800c05c:	400200a0 	.word	0x400200a0
 800c060:	400200b8 	.word	0x400200b8
 800c064:	40020410 	.word	0x40020410
 800c068:	40020428 	.word	0x40020428
 800c06c:	40020440 	.word	0x40020440
 800c070:	40020458 	.word	0x40020458
 800c074:	40020470 	.word	0x40020470
 800c078:	40020488 	.word	0x40020488
 800c07c:	400204a0 	.word	0x400204a0
 800c080:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f022 020e 	bic.w	r2, r2, #14
 800c092:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a6c      	ldr	r2, [pc, #432]	@ (800c24c <HAL_DMA_Abort_IT+0x3a8>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d04a      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a6b      	ldr	r2, [pc, #428]	@ (800c250 <HAL_DMA_Abort_IT+0x3ac>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d045      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a69      	ldr	r2, [pc, #420]	@ (800c254 <HAL_DMA_Abort_IT+0x3b0>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d040      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a68      	ldr	r2, [pc, #416]	@ (800c258 <HAL_DMA_Abort_IT+0x3b4>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d03b      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a66      	ldr	r2, [pc, #408]	@ (800c25c <HAL_DMA_Abort_IT+0x3b8>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d036      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a65      	ldr	r2, [pc, #404]	@ (800c260 <HAL_DMA_Abort_IT+0x3bc>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d031      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a63      	ldr	r2, [pc, #396]	@ (800c264 <HAL_DMA_Abort_IT+0x3c0>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d02c      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a62      	ldr	r2, [pc, #392]	@ (800c268 <HAL_DMA_Abort_IT+0x3c4>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d027      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a60      	ldr	r2, [pc, #384]	@ (800c26c <HAL_DMA_Abort_IT+0x3c8>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d022      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a5f      	ldr	r2, [pc, #380]	@ (800c270 <HAL_DMA_Abort_IT+0x3cc>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d01d      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a5d      	ldr	r2, [pc, #372]	@ (800c274 <HAL_DMA_Abort_IT+0x3d0>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d018      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a5c      	ldr	r2, [pc, #368]	@ (800c278 <HAL_DMA_Abort_IT+0x3d4>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d013      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a5a      	ldr	r2, [pc, #360]	@ (800c27c <HAL_DMA_Abort_IT+0x3d8>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d00e      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a59      	ldr	r2, [pc, #356]	@ (800c280 <HAL_DMA_Abort_IT+0x3dc>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d009      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a57      	ldr	r2, [pc, #348]	@ (800c284 <HAL_DMA_Abort_IT+0x3e0>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d004      	beq.n	800c134 <HAL_DMA_Abort_IT+0x290>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a56      	ldr	r2, [pc, #344]	@ (800c288 <HAL_DMA_Abort_IT+0x3e4>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d108      	bne.n	800c146 <HAL_DMA_Abort_IT+0x2a2>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f022 0201 	bic.w	r2, r2, #1
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	e007      	b.n	800c156 <HAL_DMA_Abort_IT+0x2b2>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f022 0201 	bic.w	r2, r2, #1
 800c154:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a3c      	ldr	r2, [pc, #240]	@ (800c24c <HAL_DMA_Abort_IT+0x3a8>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d072      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a3a      	ldr	r2, [pc, #232]	@ (800c250 <HAL_DMA_Abort_IT+0x3ac>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d06d      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a39      	ldr	r2, [pc, #228]	@ (800c254 <HAL_DMA_Abort_IT+0x3b0>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d068      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a37      	ldr	r2, [pc, #220]	@ (800c258 <HAL_DMA_Abort_IT+0x3b4>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d063      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a36      	ldr	r2, [pc, #216]	@ (800c25c <HAL_DMA_Abort_IT+0x3b8>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d05e      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a34      	ldr	r2, [pc, #208]	@ (800c260 <HAL_DMA_Abort_IT+0x3bc>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d059      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a33      	ldr	r2, [pc, #204]	@ (800c264 <HAL_DMA_Abort_IT+0x3c0>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d054      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a31      	ldr	r2, [pc, #196]	@ (800c268 <HAL_DMA_Abort_IT+0x3c4>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d04f      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a30      	ldr	r2, [pc, #192]	@ (800c26c <HAL_DMA_Abort_IT+0x3c8>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d04a      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a2e      	ldr	r2, [pc, #184]	@ (800c270 <HAL_DMA_Abort_IT+0x3cc>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d045      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a2d      	ldr	r2, [pc, #180]	@ (800c274 <HAL_DMA_Abort_IT+0x3d0>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d040      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a2b      	ldr	r2, [pc, #172]	@ (800c278 <HAL_DMA_Abort_IT+0x3d4>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d03b      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a2a      	ldr	r2, [pc, #168]	@ (800c27c <HAL_DMA_Abort_IT+0x3d8>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d036      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a28      	ldr	r2, [pc, #160]	@ (800c280 <HAL_DMA_Abort_IT+0x3dc>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d031      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a27      	ldr	r2, [pc, #156]	@ (800c284 <HAL_DMA_Abort_IT+0x3e0>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d02c      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a25      	ldr	r2, [pc, #148]	@ (800c288 <HAL_DMA_Abort_IT+0x3e4>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d027      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a24      	ldr	r2, [pc, #144]	@ (800c28c <HAL_DMA_Abort_IT+0x3e8>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d022      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a22      	ldr	r2, [pc, #136]	@ (800c290 <HAL_DMA_Abort_IT+0x3ec>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d01d      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a21      	ldr	r2, [pc, #132]	@ (800c294 <HAL_DMA_Abort_IT+0x3f0>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d018      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a1f      	ldr	r2, [pc, #124]	@ (800c298 <HAL_DMA_Abort_IT+0x3f4>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d013      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a1e      	ldr	r2, [pc, #120]	@ (800c29c <HAL_DMA_Abort_IT+0x3f8>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d00e      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a1c      	ldr	r2, [pc, #112]	@ (800c2a0 <HAL_DMA_Abort_IT+0x3fc>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d009      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a1b      	ldr	r2, [pc, #108]	@ (800c2a4 <HAL_DMA_Abort_IT+0x400>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d004      	beq.n	800c246 <HAL_DMA_Abort_IT+0x3a2>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a19      	ldr	r2, [pc, #100]	@ (800c2a8 <HAL_DMA_Abort_IT+0x404>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d132      	bne.n	800c2ac <HAL_DMA_Abort_IT+0x408>
 800c246:	2301      	movs	r3, #1
 800c248:	e031      	b.n	800c2ae <HAL_DMA_Abort_IT+0x40a>
 800c24a:	bf00      	nop
 800c24c:	40020010 	.word	0x40020010
 800c250:	40020028 	.word	0x40020028
 800c254:	40020040 	.word	0x40020040
 800c258:	40020058 	.word	0x40020058
 800c25c:	40020070 	.word	0x40020070
 800c260:	40020088 	.word	0x40020088
 800c264:	400200a0 	.word	0x400200a0
 800c268:	400200b8 	.word	0x400200b8
 800c26c:	40020410 	.word	0x40020410
 800c270:	40020428 	.word	0x40020428
 800c274:	40020440 	.word	0x40020440
 800c278:	40020458 	.word	0x40020458
 800c27c:	40020470 	.word	0x40020470
 800c280:	40020488 	.word	0x40020488
 800c284:	400204a0 	.word	0x400204a0
 800c288:	400204b8 	.word	0x400204b8
 800c28c:	58025408 	.word	0x58025408
 800c290:	5802541c 	.word	0x5802541c
 800c294:	58025430 	.word	0x58025430
 800c298:	58025444 	.word	0x58025444
 800c29c:	58025458 	.word	0x58025458
 800c2a0:	5802546c 	.word	0x5802546c
 800c2a4:	58025480 	.word	0x58025480
 800c2a8:	58025494 	.word	0x58025494
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d028      	beq.n	800c304 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2c0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2c6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2cc:	f003 031f 	and.w	r3, r3, #31
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	409a      	lsls	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c2e0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00c      	beq.n	800c304 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c302:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop

0800c330 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b08a      	sub	sp, #40	@ 0x28
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800c338:	2300      	movs	r3, #0
 800c33a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c33c:	4b67      	ldr	r3, [pc, #412]	@ (800c4dc <HAL_DMA_IRQHandler+0x1ac>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a67      	ldr	r2, [pc, #412]	@ (800c4e0 <HAL_DMA_IRQHandler+0x1b0>)
 800c342:	fba2 2303 	umull	r2, r3, r2, r3
 800c346:	0a9b      	lsrs	r3, r3, #10
 800c348:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c34e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c354:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a5f      	ldr	r2, [pc, #380]	@ (800c4e4 <HAL_DMA_IRQHandler+0x1b4>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d04a      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a5d      	ldr	r2, [pc, #372]	@ (800c4e8 <HAL_DMA_IRQHandler+0x1b8>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d045      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a5c      	ldr	r2, [pc, #368]	@ (800c4ec <HAL_DMA_IRQHandler+0x1bc>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d040      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a5a      	ldr	r2, [pc, #360]	@ (800c4f0 <HAL_DMA_IRQHandler+0x1c0>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d03b      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a59      	ldr	r2, [pc, #356]	@ (800c4f4 <HAL_DMA_IRQHandler+0x1c4>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d036      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a57      	ldr	r2, [pc, #348]	@ (800c4f8 <HAL_DMA_IRQHandler+0x1c8>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d031      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a56      	ldr	r2, [pc, #344]	@ (800c4fc <HAL_DMA_IRQHandler+0x1cc>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d02c      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a54      	ldr	r2, [pc, #336]	@ (800c500 <HAL_DMA_IRQHandler+0x1d0>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d027      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a53      	ldr	r2, [pc, #332]	@ (800c504 <HAL_DMA_IRQHandler+0x1d4>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d022      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a51      	ldr	r2, [pc, #324]	@ (800c508 <HAL_DMA_IRQHandler+0x1d8>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d01d      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a50      	ldr	r2, [pc, #320]	@ (800c50c <HAL_DMA_IRQHandler+0x1dc>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d018      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a4e      	ldr	r2, [pc, #312]	@ (800c510 <HAL_DMA_IRQHandler+0x1e0>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d013      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a4d      	ldr	r2, [pc, #308]	@ (800c514 <HAL_DMA_IRQHandler+0x1e4>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d00e      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a4b      	ldr	r2, [pc, #300]	@ (800c518 <HAL_DMA_IRQHandler+0x1e8>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d009      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a4a      	ldr	r2, [pc, #296]	@ (800c51c <HAL_DMA_IRQHandler+0x1ec>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d004      	beq.n	800c402 <HAL_DMA_IRQHandler+0xd2>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a48      	ldr	r2, [pc, #288]	@ (800c520 <HAL_DMA_IRQHandler+0x1f0>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d101      	bne.n	800c406 <HAL_DMA_IRQHandler+0xd6>
 800c402:	2301      	movs	r3, #1
 800c404:	e000      	b.n	800c408 <HAL_DMA_IRQHandler+0xd8>
 800c406:	2300      	movs	r3, #0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 842b 	beq.w	800cc64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c412:	f003 031f 	and.w	r3, r3, #31
 800c416:	2208      	movs	r2, #8
 800c418:	409a      	lsls	r2, r3
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	4013      	ands	r3, r2
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 80a2 	beq.w	800c568 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a2e      	ldr	r2, [pc, #184]	@ (800c4e4 <HAL_DMA_IRQHandler+0x1b4>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d04a      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a2d      	ldr	r2, [pc, #180]	@ (800c4e8 <HAL_DMA_IRQHandler+0x1b8>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d045      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a2b      	ldr	r2, [pc, #172]	@ (800c4ec <HAL_DMA_IRQHandler+0x1bc>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d040      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a2a      	ldr	r2, [pc, #168]	@ (800c4f0 <HAL_DMA_IRQHandler+0x1c0>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d03b      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a28      	ldr	r2, [pc, #160]	@ (800c4f4 <HAL_DMA_IRQHandler+0x1c4>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d036      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a27      	ldr	r2, [pc, #156]	@ (800c4f8 <HAL_DMA_IRQHandler+0x1c8>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d031      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a25      	ldr	r2, [pc, #148]	@ (800c4fc <HAL_DMA_IRQHandler+0x1cc>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d02c      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a24      	ldr	r2, [pc, #144]	@ (800c500 <HAL_DMA_IRQHandler+0x1d0>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d027      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a22      	ldr	r2, [pc, #136]	@ (800c504 <HAL_DMA_IRQHandler+0x1d4>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d022      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a21      	ldr	r2, [pc, #132]	@ (800c508 <HAL_DMA_IRQHandler+0x1d8>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d01d      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a1f      	ldr	r2, [pc, #124]	@ (800c50c <HAL_DMA_IRQHandler+0x1dc>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d018      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a1e      	ldr	r2, [pc, #120]	@ (800c510 <HAL_DMA_IRQHandler+0x1e0>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d013      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a1c      	ldr	r2, [pc, #112]	@ (800c514 <HAL_DMA_IRQHandler+0x1e4>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00e      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c518 <HAL_DMA_IRQHandler+0x1e8>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d009      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a19      	ldr	r2, [pc, #100]	@ (800c51c <HAL_DMA_IRQHandler+0x1ec>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d004      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x194>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a18      	ldr	r2, [pc, #96]	@ (800c520 <HAL_DMA_IRQHandler+0x1f0>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d12f      	bne.n	800c524 <HAL_DMA_IRQHandler+0x1f4>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0304 	and.w	r3, r3, #4
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	bf14      	ite	ne
 800c4d2:	2301      	movne	r3, #1
 800c4d4:	2300      	moveq	r3, #0
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	e02e      	b.n	800c538 <HAL_DMA_IRQHandler+0x208>
 800c4da:	bf00      	nop
 800c4dc:	24000004 	.word	0x24000004
 800c4e0:	1b4e81b5 	.word	0x1b4e81b5
 800c4e4:	40020010 	.word	0x40020010
 800c4e8:	40020028 	.word	0x40020028
 800c4ec:	40020040 	.word	0x40020040
 800c4f0:	40020058 	.word	0x40020058
 800c4f4:	40020070 	.word	0x40020070
 800c4f8:	40020088 	.word	0x40020088
 800c4fc:	400200a0 	.word	0x400200a0
 800c500:	400200b8 	.word	0x400200b8
 800c504:	40020410 	.word	0x40020410
 800c508:	40020428 	.word	0x40020428
 800c50c:	40020440 	.word	0x40020440
 800c510:	40020458 	.word	0x40020458
 800c514:	40020470 	.word	0x40020470
 800c518:	40020488 	.word	0x40020488
 800c51c:	400204a0 	.word	0x400204a0
 800c520:	400204b8 	.word	0x400204b8
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0308 	and.w	r3, r3, #8
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bf14      	ite	ne
 800c532:	2301      	movne	r3, #1
 800c534:	2300      	moveq	r3, #0
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d015      	beq.n	800c568 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f022 0204 	bic.w	r2, r2, #4
 800c54a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c550:	f003 031f 	and.w	r3, r3, #31
 800c554:	2208      	movs	r2, #8
 800c556:	409a      	lsls	r2, r3
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c560:	f043 0201 	orr.w	r2, r3, #1
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c56c:	f003 031f 	and.w	r3, r3, #31
 800c570:	69ba      	ldr	r2, [r7, #24]
 800c572:	fa22 f303 	lsr.w	r3, r2, r3
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d06e      	beq.n	800c65c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a69      	ldr	r2, [pc, #420]	@ (800c728 <HAL_DMA_IRQHandler+0x3f8>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d04a      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a67      	ldr	r2, [pc, #412]	@ (800c72c <HAL_DMA_IRQHandler+0x3fc>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d045      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a66      	ldr	r2, [pc, #408]	@ (800c730 <HAL_DMA_IRQHandler+0x400>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d040      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a64      	ldr	r2, [pc, #400]	@ (800c734 <HAL_DMA_IRQHandler+0x404>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d03b      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a63      	ldr	r2, [pc, #396]	@ (800c738 <HAL_DMA_IRQHandler+0x408>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d036      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a61      	ldr	r2, [pc, #388]	@ (800c73c <HAL_DMA_IRQHandler+0x40c>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d031      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a60      	ldr	r2, [pc, #384]	@ (800c740 <HAL_DMA_IRQHandler+0x410>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d02c      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a5e      	ldr	r2, [pc, #376]	@ (800c744 <HAL_DMA_IRQHandler+0x414>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d027      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a5d      	ldr	r2, [pc, #372]	@ (800c748 <HAL_DMA_IRQHandler+0x418>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d022      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a5b      	ldr	r2, [pc, #364]	@ (800c74c <HAL_DMA_IRQHandler+0x41c>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d01d      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a5a      	ldr	r2, [pc, #360]	@ (800c750 <HAL_DMA_IRQHandler+0x420>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d018      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a58      	ldr	r2, [pc, #352]	@ (800c754 <HAL_DMA_IRQHandler+0x424>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d013      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a57      	ldr	r2, [pc, #348]	@ (800c758 <HAL_DMA_IRQHandler+0x428>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d00e      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a55      	ldr	r2, [pc, #340]	@ (800c75c <HAL_DMA_IRQHandler+0x42c>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d009      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a54      	ldr	r2, [pc, #336]	@ (800c760 <HAL_DMA_IRQHandler+0x430>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d004      	beq.n	800c61e <HAL_DMA_IRQHandler+0x2ee>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a52      	ldr	r2, [pc, #328]	@ (800c764 <HAL_DMA_IRQHandler+0x434>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d10a      	bne.n	800c634 <HAL_DMA_IRQHandler+0x304>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c628:	2b00      	cmp	r3, #0
 800c62a:	bf14      	ite	ne
 800c62c:	2301      	movne	r3, #1
 800c62e:	2300      	moveq	r3, #0
 800c630:	b2db      	uxtb	r3, r3
 800c632:	e003      	b.n	800c63c <HAL_DMA_IRQHandler+0x30c>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2300      	movs	r3, #0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00d      	beq.n	800c65c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c644:	f003 031f 	and.w	r3, r3, #31
 800c648:	2201      	movs	r2, #1
 800c64a:	409a      	lsls	r2, r3
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c654:	f043 0202 	orr.w	r2, r3, #2
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c660:	f003 031f 	and.w	r3, r3, #31
 800c664:	2204      	movs	r2, #4
 800c666:	409a      	lsls	r2, r3
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	4013      	ands	r3, r2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 808f 	beq.w	800c790 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a2c      	ldr	r2, [pc, #176]	@ (800c728 <HAL_DMA_IRQHandler+0x3f8>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d04a      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a2a      	ldr	r2, [pc, #168]	@ (800c72c <HAL_DMA_IRQHandler+0x3fc>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d045      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a29      	ldr	r2, [pc, #164]	@ (800c730 <HAL_DMA_IRQHandler+0x400>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d040      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a27      	ldr	r2, [pc, #156]	@ (800c734 <HAL_DMA_IRQHandler+0x404>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d03b      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a26      	ldr	r2, [pc, #152]	@ (800c738 <HAL_DMA_IRQHandler+0x408>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d036      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a24      	ldr	r2, [pc, #144]	@ (800c73c <HAL_DMA_IRQHandler+0x40c>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d031      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a23      	ldr	r2, [pc, #140]	@ (800c740 <HAL_DMA_IRQHandler+0x410>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d02c      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a21      	ldr	r2, [pc, #132]	@ (800c744 <HAL_DMA_IRQHandler+0x414>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d027      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a20      	ldr	r2, [pc, #128]	@ (800c748 <HAL_DMA_IRQHandler+0x418>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d022      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a1e      	ldr	r2, [pc, #120]	@ (800c74c <HAL_DMA_IRQHandler+0x41c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d01d      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a1d      	ldr	r2, [pc, #116]	@ (800c750 <HAL_DMA_IRQHandler+0x420>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d018      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a1b      	ldr	r2, [pc, #108]	@ (800c754 <HAL_DMA_IRQHandler+0x424>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d013      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a1a      	ldr	r2, [pc, #104]	@ (800c758 <HAL_DMA_IRQHandler+0x428>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d00e      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a18      	ldr	r2, [pc, #96]	@ (800c75c <HAL_DMA_IRQHandler+0x42c>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d009      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a17      	ldr	r2, [pc, #92]	@ (800c760 <HAL_DMA_IRQHandler+0x430>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d004      	beq.n	800c712 <HAL_DMA_IRQHandler+0x3e2>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a15      	ldr	r2, [pc, #84]	@ (800c764 <HAL_DMA_IRQHandler+0x434>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d12a      	bne.n	800c768 <HAL_DMA_IRQHandler+0x438>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 0302 	and.w	r3, r3, #2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	bf14      	ite	ne
 800c720:	2301      	movne	r3, #1
 800c722:	2300      	moveq	r3, #0
 800c724:	b2db      	uxtb	r3, r3
 800c726:	e023      	b.n	800c770 <HAL_DMA_IRQHandler+0x440>
 800c728:	40020010 	.word	0x40020010
 800c72c:	40020028 	.word	0x40020028
 800c730:	40020040 	.word	0x40020040
 800c734:	40020058 	.word	0x40020058
 800c738:	40020070 	.word	0x40020070
 800c73c:	40020088 	.word	0x40020088
 800c740:	400200a0 	.word	0x400200a0
 800c744:	400200b8 	.word	0x400200b8
 800c748:	40020410 	.word	0x40020410
 800c74c:	40020428 	.word	0x40020428
 800c750:	40020440 	.word	0x40020440
 800c754:	40020458 	.word	0x40020458
 800c758:	40020470 	.word	0x40020470
 800c75c:	40020488 	.word	0x40020488
 800c760:	400204a0 	.word	0x400204a0
 800c764:	400204b8 	.word	0x400204b8
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2300      	movs	r3, #0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00d      	beq.n	800c790 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c778:	f003 031f 	and.w	r3, r3, #31
 800c77c:	2204      	movs	r2, #4
 800c77e:	409a      	lsls	r2, r3
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c788:	f043 0204 	orr.w	r2, r3, #4
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c794:	f003 031f 	and.w	r3, r3, #31
 800c798:	2210      	movs	r2, #16
 800c79a:	409a      	lsls	r2, r3
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	4013      	ands	r3, r2
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 80a6 	beq.w	800c8f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a85      	ldr	r2, [pc, #532]	@ (800c9c0 <HAL_DMA_IRQHandler+0x690>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d04a      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a83      	ldr	r2, [pc, #524]	@ (800c9c4 <HAL_DMA_IRQHandler+0x694>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d045      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a82      	ldr	r2, [pc, #520]	@ (800c9c8 <HAL_DMA_IRQHandler+0x698>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d040      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a80      	ldr	r2, [pc, #512]	@ (800c9cc <HAL_DMA_IRQHandler+0x69c>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d03b      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a7f      	ldr	r2, [pc, #508]	@ (800c9d0 <HAL_DMA_IRQHandler+0x6a0>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d036      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a7d      	ldr	r2, [pc, #500]	@ (800c9d4 <HAL_DMA_IRQHandler+0x6a4>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d031      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a7c      	ldr	r2, [pc, #496]	@ (800c9d8 <HAL_DMA_IRQHandler+0x6a8>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d02c      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a7a      	ldr	r2, [pc, #488]	@ (800c9dc <HAL_DMA_IRQHandler+0x6ac>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d027      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a79      	ldr	r2, [pc, #484]	@ (800c9e0 <HAL_DMA_IRQHandler+0x6b0>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d022      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a77      	ldr	r2, [pc, #476]	@ (800c9e4 <HAL_DMA_IRQHandler+0x6b4>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d01d      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a76      	ldr	r2, [pc, #472]	@ (800c9e8 <HAL_DMA_IRQHandler+0x6b8>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d018      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a74      	ldr	r2, [pc, #464]	@ (800c9ec <HAL_DMA_IRQHandler+0x6bc>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d013      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a73      	ldr	r2, [pc, #460]	@ (800c9f0 <HAL_DMA_IRQHandler+0x6c0>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d00e      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a71      	ldr	r2, [pc, #452]	@ (800c9f4 <HAL_DMA_IRQHandler+0x6c4>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d009      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a70      	ldr	r2, [pc, #448]	@ (800c9f8 <HAL_DMA_IRQHandler+0x6c8>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d004      	beq.n	800c846 <HAL_DMA_IRQHandler+0x516>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a6e      	ldr	r2, [pc, #440]	@ (800c9fc <HAL_DMA_IRQHandler+0x6cc>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d10a      	bne.n	800c85c <HAL_DMA_IRQHandler+0x52c>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0308 	and.w	r3, r3, #8
 800c850:	2b00      	cmp	r3, #0
 800c852:	bf14      	ite	ne
 800c854:	2301      	movne	r3, #1
 800c856:	2300      	moveq	r3, #0
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	e009      	b.n	800c870 <HAL_DMA_IRQHandler+0x540>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0304 	and.w	r3, r3, #4
 800c866:	2b00      	cmp	r3, #0
 800c868:	bf14      	ite	ne
 800c86a:	2301      	movne	r3, #1
 800c86c:	2300      	moveq	r3, #0
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d03e      	beq.n	800c8f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c878:	f003 031f 	and.w	r3, r3, #31
 800c87c:	2210      	movs	r2, #16
 800c87e:	409a      	lsls	r2, r3
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d018      	beq.n	800c8c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d108      	bne.n	800c8b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d024      	beq.n	800c8f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	4798      	blx	r3
 800c8b0:	e01f      	b.n	800c8f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d01b      	beq.n	800c8f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	4798      	blx	r3
 800c8c2:	e016      	b.n	800c8f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d107      	bne.n	800c8e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f022 0208 	bic.w	r2, r2, #8
 800c8e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8f6:	f003 031f 	and.w	r3, r3, #31
 800c8fa:	2220      	movs	r2, #32
 800c8fc:	409a      	lsls	r2, r3
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	4013      	ands	r3, r2
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 8110 	beq.w	800cb28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a2c      	ldr	r2, [pc, #176]	@ (800c9c0 <HAL_DMA_IRQHandler+0x690>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d04a      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a2b      	ldr	r2, [pc, #172]	@ (800c9c4 <HAL_DMA_IRQHandler+0x694>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d045      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a29      	ldr	r2, [pc, #164]	@ (800c9c8 <HAL_DMA_IRQHandler+0x698>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d040      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a28      	ldr	r2, [pc, #160]	@ (800c9cc <HAL_DMA_IRQHandler+0x69c>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d03b      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a26      	ldr	r2, [pc, #152]	@ (800c9d0 <HAL_DMA_IRQHandler+0x6a0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d036      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a25      	ldr	r2, [pc, #148]	@ (800c9d4 <HAL_DMA_IRQHandler+0x6a4>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d031      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a23      	ldr	r2, [pc, #140]	@ (800c9d8 <HAL_DMA_IRQHandler+0x6a8>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d02c      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a22      	ldr	r2, [pc, #136]	@ (800c9dc <HAL_DMA_IRQHandler+0x6ac>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d027      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a20      	ldr	r2, [pc, #128]	@ (800c9e0 <HAL_DMA_IRQHandler+0x6b0>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d022      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a1f      	ldr	r2, [pc, #124]	@ (800c9e4 <HAL_DMA_IRQHandler+0x6b4>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d01d      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a1d      	ldr	r2, [pc, #116]	@ (800c9e8 <HAL_DMA_IRQHandler+0x6b8>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d018      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a1c      	ldr	r2, [pc, #112]	@ (800c9ec <HAL_DMA_IRQHandler+0x6bc>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d013      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a1a      	ldr	r2, [pc, #104]	@ (800c9f0 <HAL_DMA_IRQHandler+0x6c0>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d00e      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a19      	ldr	r2, [pc, #100]	@ (800c9f4 <HAL_DMA_IRQHandler+0x6c4>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d009      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a17      	ldr	r2, [pc, #92]	@ (800c9f8 <HAL_DMA_IRQHandler+0x6c8>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d004      	beq.n	800c9a8 <HAL_DMA_IRQHandler+0x678>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a16      	ldr	r2, [pc, #88]	@ (800c9fc <HAL_DMA_IRQHandler+0x6cc>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d12b      	bne.n	800ca00 <HAL_DMA_IRQHandler+0x6d0>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 0310 	and.w	r3, r3, #16
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bf14      	ite	ne
 800c9b6:	2301      	movne	r3, #1
 800c9b8:	2300      	moveq	r3, #0
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	e02a      	b.n	800ca14 <HAL_DMA_IRQHandler+0x6e4>
 800c9be:	bf00      	nop
 800c9c0:	40020010 	.word	0x40020010
 800c9c4:	40020028 	.word	0x40020028
 800c9c8:	40020040 	.word	0x40020040
 800c9cc:	40020058 	.word	0x40020058
 800c9d0:	40020070 	.word	0x40020070
 800c9d4:	40020088 	.word	0x40020088
 800c9d8:	400200a0 	.word	0x400200a0
 800c9dc:	400200b8 	.word	0x400200b8
 800c9e0:	40020410 	.word	0x40020410
 800c9e4:	40020428 	.word	0x40020428
 800c9e8:	40020440 	.word	0x40020440
 800c9ec:	40020458 	.word	0x40020458
 800c9f0:	40020470 	.word	0x40020470
 800c9f4:	40020488 	.word	0x40020488
 800c9f8:	400204a0 	.word	0x400204a0
 800c9fc:	400204b8 	.word	0x400204b8
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	bf14      	ite	ne
 800ca0e:	2301      	movne	r3, #1
 800ca10:	2300      	moveq	r3, #0
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 8087 	beq.w	800cb28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca1e:	f003 031f 	and.w	r3, r3, #31
 800ca22:	2220      	movs	r2, #32
 800ca24:	409a      	lsls	r2, r3
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b04      	cmp	r3, #4
 800ca34:	d139      	bne.n	800caaa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f022 0216 	bic.w	r2, r2, #22
 800ca44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	695a      	ldr	r2, [r3, #20]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d103      	bne.n	800ca66 <HAL_DMA_IRQHandler+0x736>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d007      	beq.n	800ca76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f022 0208 	bic.w	r2, r2, #8
 800ca74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca7a:	f003 031f 	and.w	r3, r3, #31
 800ca7e:	223f      	movs	r2, #63	@ 0x3f
 800ca80:	409a      	lsls	r2, r3
 800ca82:	6a3b      	ldr	r3, [r7, #32]
 800ca84:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 834a 	beq.w	800d134 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	4798      	blx	r3
          }
          return;
 800caa8:	e344      	b.n	800d134 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d018      	beq.n	800caea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d108      	bne.n	800cad8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d02c      	beq.n	800cb28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	4798      	blx	r3
 800cad6:	e027      	b.n	800cb28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d023      	beq.n	800cb28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	4798      	blx	r3
 800cae8:	e01e      	b.n	800cb28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10f      	bne.n	800cb18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f022 0210 	bic.w	r2, r2, #16
 800cb06:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d003      	beq.n	800cb28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 8306 	beq.w	800d13e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f000 8088 	beq.w	800cc50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2204      	movs	r2, #4
 800cb44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a7a      	ldr	r2, [pc, #488]	@ (800cd38 <HAL_DMA_IRQHandler+0xa08>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d04a      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a79      	ldr	r2, [pc, #484]	@ (800cd3c <HAL_DMA_IRQHandler+0xa0c>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d045      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a77      	ldr	r2, [pc, #476]	@ (800cd40 <HAL_DMA_IRQHandler+0xa10>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d040      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a76      	ldr	r2, [pc, #472]	@ (800cd44 <HAL_DMA_IRQHandler+0xa14>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d03b      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a74      	ldr	r2, [pc, #464]	@ (800cd48 <HAL_DMA_IRQHandler+0xa18>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d036      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a73      	ldr	r2, [pc, #460]	@ (800cd4c <HAL_DMA_IRQHandler+0xa1c>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d031      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a71      	ldr	r2, [pc, #452]	@ (800cd50 <HAL_DMA_IRQHandler+0xa20>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d02c      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a70      	ldr	r2, [pc, #448]	@ (800cd54 <HAL_DMA_IRQHandler+0xa24>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d027      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a6e      	ldr	r2, [pc, #440]	@ (800cd58 <HAL_DMA_IRQHandler+0xa28>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d022      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a6d      	ldr	r2, [pc, #436]	@ (800cd5c <HAL_DMA_IRQHandler+0xa2c>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d01d      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a6b      	ldr	r2, [pc, #428]	@ (800cd60 <HAL_DMA_IRQHandler+0xa30>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d018      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a6a      	ldr	r2, [pc, #424]	@ (800cd64 <HAL_DMA_IRQHandler+0xa34>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d013      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a68      	ldr	r2, [pc, #416]	@ (800cd68 <HAL_DMA_IRQHandler+0xa38>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d00e      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a67      	ldr	r2, [pc, #412]	@ (800cd6c <HAL_DMA_IRQHandler+0xa3c>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d009      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a65      	ldr	r2, [pc, #404]	@ (800cd70 <HAL_DMA_IRQHandler+0xa40>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d004      	beq.n	800cbe8 <HAL_DMA_IRQHandler+0x8b8>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a64      	ldr	r2, [pc, #400]	@ (800cd74 <HAL_DMA_IRQHandler+0xa44>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d108      	bne.n	800cbfa <HAL_DMA_IRQHandler+0x8ca>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 0201 	bic.w	r2, r2, #1
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	e007      	b.n	800cc0a <HAL_DMA_IRQHandler+0x8da>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f022 0201 	bic.w	r2, r2, #1
 800cc08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d307      	bcc.n	800cc26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1f2      	bne.n	800cc0a <HAL_DMA_IRQHandler+0x8da>
 800cc24:	e000      	b.n	800cc28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800cc26:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d004      	beq.n	800cc40 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2203      	movs	r2, #3
 800cc3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800cc3e:	e003      	b.n	800cc48 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 8272 	beq.w	800d13e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	4798      	blx	r3
 800cc62:	e26c      	b.n	800d13e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a43      	ldr	r2, [pc, #268]	@ (800cd78 <HAL_DMA_IRQHandler+0xa48>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d022      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x984>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a42      	ldr	r2, [pc, #264]	@ (800cd7c <HAL_DMA_IRQHandler+0xa4c>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d01d      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x984>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a40      	ldr	r2, [pc, #256]	@ (800cd80 <HAL_DMA_IRQHandler+0xa50>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d018      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x984>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a3f      	ldr	r2, [pc, #252]	@ (800cd84 <HAL_DMA_IRQHandler+0xa54>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d013      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x984>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a3d      	ldr	r2, [pc, #244]	@ (800cd88 <HAL_DMA_IRQHandler+0xa58>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d00e      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x984>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a3c      	ldr	r2, [pc, #240]	@ (800cd8c <HAL_DMA_IRQHandler+0xa5c>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d009      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x984>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a3a      	ldr	r2, [pc, #232]	@ (800cd90 <HAL_DMA_IRQHandler+0xa60>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d004      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x984>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a39      	ldr	r2, [pc, #228]	@ (800cd94 <HAL_DMA_IRQHandler+0xa64>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d101      	bne.n	800ccb8 <HAL_DMA_IRQHandler+0x988>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e000      	b.n	800ccba <HAL_DMA_IRQHandler+0x98a>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 823f 	beq.w	800d13e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cccc:	f003 031f 	and.w	r3, r3, #31
 800ccd0:	2204      	movs	r2, #4
 800ccd2:	409a      	lsls	r2, r3
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 80cd 	beq.w	800ce78 <HAL_DMA_IRQHandler+0xb48>
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 80c7 	beq.w	800ce78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccee:	f003 031f 	and.w	r3, r3, #31
 800ccf2:	2204      	movs	r2, #4
 800ccf4:	409a      	lsls	r2, r3
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d049      	beq.n	800cd98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d109      	bne.n	800cd22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f000 8210 	beq.w	800d138 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cd20:	e20a      	b.n	800d138 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 8206 	beq.w	800d138 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cd34:	e200      	b.n	800d138 <HAL_DMA_IRQHandler+0xe08>
 800cd36:	bf00      	nop
 800cd38:	40020010 	.word	0x40020010
 800cd3c:	40020028 	.word	0x40020028
 800cd40:	40020040 	.word	0x40020040
 800cd44:	40020058 	.word	0x40020058
 800cd48:	40020070 	.word	0x40020070
 800cd4c:	40020088 	.word	0x40020088
 800cd50:	400200a0 	.word	0x400200a0
 800cd54:	400200b8 	.word	0x400200b8
 800cd58:	40020410 	.word	0x40020410
 800cd5c:	40020428 	.word	0x40020428
 800cd60:	40020440 	.word	0x40020440
 800cd64:	40020458 	.word	0x40020458
 800cd68:	40020470 	.word	0x40020470
 800cd6c:	40020488 	.word	0x40020488
 800cd70:	400204a0 	.word	0x400204a0
 800cd74:	400204b8 	.word	0x400204b8
 800cd78:	58025408 	.word	0x58025408
 800cd7c:	5802541c 	.word	0x5802541c
 800cd80:	58025430 	.word	0x58025430
 800cd84:	58025444 	.word	0x58025444
 800cd88:	58025458 	.word	0x58025458
 800cd8c:	5802546c 	.word	0x5802546c
 800cd90:	58025480 	.word	0x58025480
 800cd94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	f003 0320 	and.w	r3, r3, #32
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d160      	bne.n	800ce64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a7f      	ldr	r2, [pc, #508]	@ (800cfa4 <HAL_DMA_IRQHandler+0xc74>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d04a      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a7d      	ldr	r2, [pc, #500]	@ (800cfa8 <HAL_DMA_IRQHandler+0xc78>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d045      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a7c      	ldr	r2, [pc, #496]	@ (800cfac <HAL_DMA_IRQHandler+0xc7c>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d040      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a7a      	ldr	r2, [pc, #488]	@ (800cfb0 <HAL_DMA_IRQHandler+0xc80>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d03b      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a79      	ldr	r2, [pc, #484]	@ (800cfb4 <HAL_DMA_IRQHandler+0xc84>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d036      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a77      	ldr	r2, [pc, #476]	@ (800cfb8 <HAL_DMA_IRQHandler+0xc88>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d031      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a76      	ldr	r2, [pc, #472]	@ (800cfbc <HAL_DMA_IRQHandler+0xc8c>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d02c      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a74      	ldr	r2, [pc, #464]	@ (800cfc0 <HAL_DMA_IRQHandler+0xc90>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d027      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a73      	ldr	r2, [pc, #460]	@ (800cfc4 <HAL_DMA_IRQHandler+0xc94>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d022      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a71      	ldr	r2, [pc, #452]	@ (800cfc8 <HAL_DMA_IRQHandler+0xc98>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d01d      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a70      	ldr	r2, [pc, #448]	@ (800cfcc <HAL_DMA_IRQHandler+0xc9c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d018      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a6e      	ldr	r2, [pc, #440]	@ (800cfd0 <HAL_DMA_IRQHandler+0xca0>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d013      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a6d      	ldr	r2, [pc, #436]	@ (800cfd4 <HAL_DMA_IRQHandler+0xca4>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d00e      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a6b      	ldr	r2, [pc, #428]	@ (800cfd8 <HAL_DMA_IRQHandler+0xca8>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d009      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a6a      	ldr	r2, [pc, #424]	@ (800cfdc <HAL_DMA_IRQHandler+0xcac>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d004      	beq.n	800ce42 <HAL_DMA_IRQHandler+0xb12>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a68      	ldr	r2, [pc, #416]	@ (800cfe0 <HAL_DMA_IRQHandler+0xcb0>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d108      	bne.n	800ce54 <HAL_DMA_IRQHandler+0xb24>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f022 0208 	bic.w	r2, r2, #8
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	e007      	b.n	800ce64 <HAL_DMA_IRQHandler+0xb34>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f022 0204 	bic.w	r2, r2, #4
 800ce62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 8165 	beq.w	800d138 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ce76:	e15f      	b.n	800d138 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce7c:	f003 031f 	and.w	r3, r3, #31
 800ce80:	2202      	movs	r2, #2
 800ce82:	409a      	lsls	r2, r3
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	4013      	ands	r3, r2
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f000 80c5 	beq.w	800d018 <HAL_DMA_IRQHandler+0xce8>
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	f003 0302 	and.w	r3, r3, #2
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f000 80bf 	beq.w	800d018 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	2202      	movs	r2, #2
 800cea4:	409a      	lsls	r2, r3
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d018      	beq.n	800cee6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d109      	bne.n	800ced2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 813a 	beq.w	800d13c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ced0:	e134      	b.n	800d13c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 8130 	beq.w	800d13c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cee4:	e12a      	b.n	800d13c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	f003 0320 	and.w	r3, r3, #32
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f040 8089 	bne.w	800d004 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a2b      	ldr	r2, [pc, #172]	@ (800cfa4 <HAL_DMA_IRQHandler+0xc74>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d04a      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a29      	ldr	r2, [pc, #164]	@ (800cfa8 <HAL_DMA_IRQHandler+0xc78>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d045      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a28      	ldr	r2, [pc, #160]	@ (800cfac <HAL_DMA_IRQHandler+0xc7c>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d040      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a26      	ldr	r2, [pc, #152]	@ (800cfb0 <HAL_DMA_IRQHandler+0xc80>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d03b      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a25      	ldr	r2, [pc, #148]	@ (800cfb4 <HAL_DMA_IRQHandler+0xc84>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d036      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a23      	ldr	r2, [pc, #140]	@ (800cfb8 <HAL_DMA_IRQHandler+0xc88>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d031      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a22      	ldr	r2, [pc, #136]	@ (800cfbc <HAL_DMA_IRQHandler+0xc8c>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d02c      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a20      	ldr	r2, [pc, #128]	@ (800cfc0 <HAL_DMA_IRQHandler+0xc90>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d027      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a1f      	ldr	r2, [pc, #124]	@ (800cfc4 <HAL_DMA_IRQHandler+0xc94>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d022      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a1d      	ldr	r2, [pc, #116]	@ (800cfc8 <HAL_DMA_IRQHandler+0xc98>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d01d      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a1c      	ldr	r2, [pc, #112]	@ (800cfcc <HAL_DMA_IRQHandler+0xc9c>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d018      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a1a      	ldr	r2, [pc, #104]	@ (800cfd0 <HAL_DMA_IRQHandler+0xca0>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d013      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a19      	ldr	r2, [pc, #100]	@ (800cfd4 <HAL_DMA_IRQHandler+0xca4>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d00e      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a17      	ldr	r2, [pc, #92]	@ (800cfd8 <HAL_DMA_IRQHandler+0xca8>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d009      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a16      	ldr	r2, [pc, #88]	@ (800cfdc <HAL_DMA_IRQHandler+0xcac>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d004      	beq.n	800cf92 <HAL_DMA_IRQHandler+0xc62>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a14      	ldr	r2, [pc, #80]	@ (800cfe0 <HAL_DMA_IRQHandler+0xcb0>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d128      	bne.n	800cfe4 <HAL_DMA_IRQHandler+0xcb4>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f022 0214 	bic.w	r2, r2, #20
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	e027      	b.n	800cff4 <HAL_DMA_IRQHandler+0xcc4>
 800cfa4:	40020010 	.word	0x40020010
 800cfa8:	40020028 	.word	0x40020028
 800cfac:	40020040 	.word	0x40020040
 800cfb0:	40020058 	.word	0x40020058
 800cfb4:	40020070 	.word	0x40020070
 800cfb8:	40020088 	.word	0x40020088
 800cfbc:	400200a0 	.word	0x400200a0
 800cfc0:	400200b8 	.word	0x400200b8
 800cfc4:	40020410 	.word	0x40020410
 800cfc8:	40020428 	.word	0x40020428
 800cfcc:	40020440 	.word	0x40020440
 800cfd0:	40020458 	.word	0x40020458
 800cfd4:	40020470 	.word	0x40020470
 800cfd8:	40020488 	.word	0x40020488
 800cfdc:	400204a0 	.word	0x400204a0
 800cfe0:	400204b8 	.word	0x400204b8
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f022 020a 	bic.w	r2, r2, #10
 800cff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 8097 	beq.w	800d13c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d016:	e091      	b.n	800d13c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d01c:	f003 031f 	and.w	r3, r3, #31
 800d020:	2208      	movs	r2, #8
 800d022:	409a      	lsls	r2, r3
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	4013      	ands	r3, r2
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 8088 	beq.w	800d13e <HAL_DMA_IRQHandler+0xe0e>
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	f003 0308 	and.w	r3, r3, #8
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 8082 	beq.w	800d13e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a41      	ldr	r2, [pc, #260]	@ (800d144 <HAL_DMA_IRQHandler+0xe14>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d04a      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a3f      	ldr	r2, [pc, #252]	@ (800d148 <HAL_DMA_IRQHandler+0xe18>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d045      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a3e      	ldr	r2, [pc, #248]	@ (800d14c <HAL_DMA_IRQHandler+0xe1c>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d040      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a3c      	ldr	r2, [pc, #240]	@ (800d150 <HAL_DMA_IRQHandler+0xe20>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d03b      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a3b      	ldr	r2, [pc, #236]	@ (800d154 <HAL_DMA_IRQHandler+0xe24>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d036      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a39      	ldr	r2, [pc, #228]	@ (800d158 <HAL_DMA_IRQHandler+0xe28>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d031      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a38      	ldr	r2, [pc, #224]	@ (800d15c <HAL_DMA_IRQHandler+0xe2c>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d02c      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a36      	ldr	r2, [pc, #216]	@ (800d160 <HAL_DMA_IRQHandler+0xe30>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d027      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a35      	ldr	r2, [pc, #212]	@ (800d164 <HAL_DMA_IRQHandler+0xe34>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d022      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a33      	ldr	r2, [pc, #204]	@ (800d168 <HAL_DMA_IRQHandler+0xe38>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d01d      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a32      	ldr	r2, [pc, #200]	@ (800d16c <HAL_DMA_IRQHandler+0xe3c>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d018      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a30      	ldr	r2, [pc, #192]	@ (800d170 <HAL_DMA_IRQHandler+0xe40>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d013      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a2f      	ldr	r2, [pc, #188]	@ (800d174 <HAL_DMA_IRQHandler+0xe44>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d00e      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a2d      	ldr	r2, [pc, #180]	@ (800d178 <HAL_DMA_IRQHandler+0xe48>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d009      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a2c      	ldr	r2, [pc, #176]	@ (800d17c <HAL_DMA_IRQHandler+0xe4c>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d004      	beq.n	800d0da <HAL_DMA_IRQHandler+0xdaa>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a2a      	ldr	r2, [pc, #168]	@ (800d180 <HAL_DMA_IRQHandler+0xe50>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d108      	bne.n	800d0ec <HAL_DMA_IRQHandler+0xdbc>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f022 021c 	bic.w	r2, r2, #28
 800d0e8:	601a      	str	r2, [r3, #0]
 800d0ea:	e007      	b.n	800d0fc <HAL_DMA_IRQHandler+0xdcc>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f022 020e 	bic.w	r2, r2, #14
 800d0fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d100:	f003 031f 	and.w	r3, r3, #31
 800d104:	2201      	movs	r2, #1
 800d106:	409a      	lsls	r2, r3
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2201      	movs	r2, #1
 800d116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d126:	2b00      	cmp	r3, #0
 800d128:	d009      	beq.n	800d13e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	4798      	blx	r3
 800d132:	e004      	b.n	800d13e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800d134:	bf00      	nop
 800d136:	e002      	b.n	800d13e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d13c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d13e:	3728      	adds	r7, #40	@ 0x28
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	40020010 	.word	0x40020010
 800d148:	40020028 	.word	0x40020028
 800d14c:	40020040 	.word	0x40020040
 800d150:	40020058 	.word	0x40020058
 800d154:	40020070 	.word	0x40020070
 800d158:	40020088 	.word	0x40020088
 800d15c:	400200a0 	.word	0x400200a0
 800d160:	400200b8 	.word	0x400200b8
 800d164:	40020410 	.word	0x40020410
 800d168:	40020428 	.word	0x40020428
 800d16c:	40020440 	.word	0x40020440
 800d170:	40020458 	.word	0x40020458
 800d174:	40020470 	.word	0x40020470
 800d178:	40020488 	.word	0x40020488
 800d17c:	400204a0 	.word	0x400204a0
 800d180:	400204b8 	.word	0x400204b8

0800d184 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d192:	b2db      	uxtb	r3, r3
}
 800d194:	4618      	mov	r0, r3
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a7f      	ldr	r2, [pc, #508]	@ (800d3d4 <DMA_SetConfig+0x21c>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d072      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a7d      	ldr	r2, [pc, #500]	@ (800d3d8 <DMA_SetConfig+0x220>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d06d      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a7c      	ldr	r2, [pc, #496]	@ (800d3dc <DMA_SetConfig+0x224>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d068      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a7a      	ldr	r2, [pc, #488]	@ (800d3e0 <DMA_SetConfig+0x228>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d063      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a79      	ldr	r2, [pc, #484]	@ (800d3e4 <DMA_SetConfig+0x22c>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d05e      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a77      	ldr	r2, [pc, #476]	@ (800d3e8 <DMA_SetConfig+0x230>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d059      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4a76      	ldr	r2, [pc, #472]	@ (800d3ec <DMA_SetConfig+0x234>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d054      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a74      	ldr	r2, [pc, #464]	@ (800d3f0 <DMA_SetConfig+0x238>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d04f      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a73      	ldr	r2, [pc, #460]	@ (800d3f4 <DMA_SetConfig+0x23c>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d04a      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a71      	ldr	r2, [pc, #452]	@ (800d3f8 <DMA_SetConfig+0x240>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d045      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a70      	ldr	r2, [pc, #448]	@ (800d3fc <DMA_SetConfig+0x244>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d040      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a6e      	ldr	r2, [pc, #440]	@ (800d400 <DMA_SetConfig+0x248>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d03b      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a6d      	ldr	r2, [pc, #436]	@ (800d404 <DMA_SetConfig+0x24c>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d036      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a6b      	ldr	r2, [pc, #428]	@ (800d408 <DMA_SetConfig+0x250>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d031      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a6a      	ldr	r2, [pc, #424]	@ (800d40c <DMA_SetConfig+0x254>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d02c      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a68      	ldr	r2, [pc, #416]	@ (800d410 <DMA_SetConfig+0x258>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d027      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a67      	ldr	r2, [pc, #412]	@ (800d414 <DMA_SetConfig+0x25c>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d022      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a65      	ldr	r2, [pc, #404]	@ (800d418 <DMA_SetConfig+0x260>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d01d      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a64      	ldr	r2, [pc, #400]	@ (800d41c <DMA_SetConfig+0x264>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d018      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a62      	ldr	r2, [pc, #392]	@ (800d420 <DMA_SetConfig+0x268>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d013      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a61      	ldr	r2, [pc, #388]	@ (800d424 <DMA_SetConfig+0x26c>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d00e      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a5f      	ldr	r2, [pc, #380]	@ (800d428 <DMA_SetConfig+0x270>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d009      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a5e      	ldr	r2, [pc, #376]	@ (800d42c <DMA_SetConfig+0x274>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d004      	beq.n	800d2c2 <DMA_SetConfig+0x10a>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a5c      	ldr	r2, [pc, #368]	@ (800d430 <DMA_SetConfig+0x278>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d101      	bne.n	800d2c6 <DMA_SetConfig+0x10e>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e000      	b.n	800d2c8 <DMA_SetConfig+0x110>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00d      	beq.n	800d2e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d2d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d004      	beq.n	800d2e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2e2:	68fa      	ldr	r2, [r7, #12]
 800d2e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d2e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a39      	ldr	r2, [pc, #228]	@ (800d3d4 <DMA_SetConfig+0x21c>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d04a      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a38      	ldr	r2, [pc, #224]	@ (800d3d8 <DMA_SetConfig+0x220>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d045      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a36      	ldr	r2, [pc, #216]	@ (800d3dc <DMA_SetConfig+0x224>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d040      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a35      	ldr	r2, [pc, #212]	@ (800d3e0 <DMA_SetConfig+0x228>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d03b      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a33      	ldr	r2, [pc, #204]	@ (800d3e4 <DMA_SetConfig+0x22c>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d036      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a32      	ldr	r2, [pc, #200]	@ (800d3e8 <DMA_SetConfig+0x230>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d031      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a30      	ldr	r2, [pc, #192]	@ (800d3ec <DMA_SetConfig+0x234>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d02c      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a2f      	ldr	r2, [pc, #188]	@ (800d3f0 <DMA_SetConfig+0x238>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d027      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a2d      	ldr	r2, [pc, #180]	@ (800d3f4 <DMA_SetConfig+0x23c>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d022      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a2c      	ldr	r2, [pc, #176]	@ (800d3f8 <DMA_SetConfig+0x240>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d01d      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a2a      	ldr	r2, [pc, #168]	@ (800d3fc <DMA_SetConfig+0x244>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d018      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a29      	ldr	r2, [pc, #164]	@ (800d400 <DMA_SetConfig+0x248>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d013      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a27      	ldr	r2, [pc, #156]	@ (800d404 <DMA_SetConfig+0x24c>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d00e      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a26      	ldr	r2, [pc, #152]	@ (800d408 <DMA_SetConfig+0x250>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d009      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a24      	ldr	r2, [pc, #144]	@ (800d40c <DMA_SetConfig+0x254>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d004      	beq.n	800d388 <DMA_SetConfig+0x1d0>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a23      	ldr	r2, [pc, #140]	@ (800d410 <DMA_SetConfig+0x258>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d101      	bne.n	800d38c <DMA_SetConfig+0x1d4>
 800d388:	2301      	movs	r3, #1
 800d38a:	e000      	b.n	800d38e <DMA_SetConfig+0x1d6>
 800d38c:	2300      	movs	r3, #0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d059      	beq.n	800d446 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d396:	f003 031f 	and.w	r3, r3, #31
 800d39a:	223f      	movs	r2, #63	@ 0x3f
 800d39c:	409a      	lsls	r2, r3
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d3b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	683a      	ldr	r2, [r7, #0]
 800d3b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	2b40      	cmp	r3, #64	@ 0x40
 800d3c0:	d138      	bne.n	800d434 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d3d2:	e086      	b.n	800d4e2 <DMA_SetConfig+0x32a>
 800d3d4:	40020010 	.word	0x40020010
 800d3d8:	40020028 	.word	0x40020028
 800d3dc:	40020040 	.word	0x40020040
 800d3e0:	40020058 	.word	0x40020058
 800d3e4:	40020070 	.word	0x40020070
 800d3e8:	40020088 	.word	0x40020088
 800d3ec:	400200a0 	.word	0x400200a0
 800d3f0:	400200b8 	.word	0x400200b8
 800d3f4:	40020410 	.word	0x40020410
 800d3f8:	40020428 	.word	0x40020428
 800d3fc:	40020440 	.word	0x40020440
 800d400:	40020458 	.word	0x40020458
 800d404:	40020470 	.word	0x40020470
 800d408:	40020488 	.word	0x40020488
 800d40c:	400204a0 	.word	0x400204a0
 800d410:	400204b8 	.word	0x400204b8
 800d414:	58025408 	.word	0x58025408
 800d418:	5802541c 	.word	0x5802541c
 800d41c:	58025430 	.word	0x58025430
 800d420:	58025444 	.word	0x58025444
 800d424:	58025458 	.word	0x58025458
 800d428:	5802546c 	.word	0x5802546c
 800d42c:	58025480 	.word	0x58025480
 800d430:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	68ba      	ldr	r2, [r7, #8]
 800d43a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	60da      	str	r2, [r3, #12]
}
 800d444:	e04d      	b.n	800d4e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a29      	ldr	r2, [pc, #164]	@ (800d4f0 <DMA_SetConfig+0x338>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d022      	beq.n	800d496 <DMA_SetConfig+0x2de>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a27      	ldr	r2, [pc, #156]	@ (800d4f4 <DMA_SetConfig+0x33c>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d01d      	beq.n	800d496 <DMA_SetConfig+0x2de>
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a26      	ldr	r2, [pc, #152]	@ (800d4f8 <DMA_SetConfig+0x340>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d018      	beq.n	800d496 <DMA_SetConfig+0x2de>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a24      	ldr	r2, [pc, #144]	@ (800d4fc <DMA_SetConfig+0x344>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d013      	beq.n	800d496 <DMA_SetConfig+0x2de>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4a23      	ldr	r2, [pc, #140]	@ (800d500 <DMA_SetConfig+0x348>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d00e      	beq.n	800d496 <DMA_SetConfig+0x2de>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a21      	ldr	r2, [pc, #132]	@ (800d504 <DMA_SetConfig+0x34c>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d009      	beq.n	800d496 <DMA_SetConfig+0x2de>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a20      	ldr	r2, [pc, #128]	@ (800d508 <DMA_SetConfig+0x350>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d004      	beq.n	800d496 <DMA_SetConfig+0x2de>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a1e      	ldr	r2, [pc, #120]	@ (800d50c <DMA_SetConfig+0x354>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d101      	bne.n	800d49a <DMA_SetConfig+0x2e2>
 800d496:	2301      	movs	r3, #1
 800d498:	e000      	b.n	800d49c <DMA_SetConfig+0x2e4>
 800d49a:	2300      	movs	r3, #0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d020      	beq.n	800d4e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4a4:	f003 031f 	and.w	r3, r3, #31
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	409a      	lsls	r2, r3
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	2b40      	cmp	r3, #64	@ 0x40
 800d4be:	d108      	bne.n	800d4d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	60da      	str	r2, [r3, #12]
}
 800d4d0:	e007      	b.n	800d4e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	60da      	str	r2, [r3, #12]
}
 800d4e2:	bf00      	nop
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	58025408 	.word	0x58025408
 800d4f4:	5802541c 	.word	0x5802541c
 800d4f8:	58025430 	.word	0x58025430
 800d4fc:	58025444 	.word	0x58025444
 800d500:	58025458 	.word	0x58025458
 800d504:	5802546c 	.word	0x5802546c
 800d508:	58025480 	.word	0x58025480
 800d50c:	58025494 	.word	0x58025494

0800d510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a42      	ldr	r2, [pc, #264]	@ (800d628 <DMA_CalcBaseAndBitshift+0x118>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d04a      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a41      	ldr	r2, [pc, #260]	@ (800d62c <DMA_CalcBaseAndBitshift+0x11c>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d045      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a3f      	ldr	r2, [pc, #252]	@ (800d630 <DMA_CalcBaseAndBitshift+0x120>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d040      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a3e      	ldr	r2, [pc, #248]	@ (800d634 <DMA_CalcBaseAndBitshift+0x124>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d03b      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a3c      	ldr	r2, [pc, #240]	@ (800d638 <DMA_CalcBaseAndBitshift+0x128>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d036      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a3b      	ldr	r2, [pc, #236]	@ (800d63c <DMA_CalcBaseAndBitshift+0x12c>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d031      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a39      	ldr	r2, [pc, #228]	@ (800d640 <DMA_CalcBaseAndBitshift+0x130>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d02c      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a38      	ldr	r2, [pc, #224]	@ (800d644 <DMA_CalcBaseAndBitshift+0x134>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d027      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a36      	ldr	r2, [pc, #216]	@ (800d648 <DMA_CalcBaseAndBitshift+0x138>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d022      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a35      	ldr	r2, [pc, #212]	@ (800d64c <DMA_CalcBaseAndBitshift+0x13c>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d01d      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a33      	ldr	r2, [pc, #204]	@ (800d650 <DMA_CalcBaseAndBitshift+0x140>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d018      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a32      	ldr	r2, [pc, #200]	@ (800d654 <DMA_CalcBaseAndBitshift+0x144>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d013      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a30      	ldr	r2, [pc, #192]	@ (800d658 <DMA_CalcBaseAndBitshift+0x148>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d00e      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a2f      	ldr	r2, [pc, #188]	@ (800d65c <DMA_CalcBaseAndBitshift+0x14c>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d009      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a2d      	ldr	r2, [pc, #180]	@ (800d660 <DMA_CalcBaseAndBitshift+0x150>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d004      	beq.n	800d5b8 <DMA_CalcBaseAndBitshift+0xa8>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a2c      	ldr	r2, [pc, #176]	@ (800d664 <DMA_CalcBaseAndBitshift+0x154>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d101      	bne.n	800d5bc <DMA_CalcBaseAndBitshift+0xac>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e000      	b.n	800d5be <DMA_CalcBaseAndBitshift+0xae>
 800d5bc:	2300      	movs	r3, #0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d024      	beq.n	800d60c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	3b10      	subs	r3, #16
 800d5ca:	4a27      	ldr	r2, [pc, #156]	@ (800d668 <DMA_CalcBaseAndBitshift+0x158>)
 800d5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d5d0:	091b      	lsrs	r3, r3, #4
 800d5d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f003 0307 	and.w	r3, r3, #7
 800d5da:	4a24      	ldr	r2, [pc, #144]	@ (800d66c <DMA_CalcBaseAndBitshift+0x15c>)
 800d5dc:	5cd3      	ldrb	r3, [r2, r3]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b03      	cmp	r3, #3
 800d5e8:	d908      	bls.n	800d5fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	4b1f      	ldr	r3, [pc, #124]	@ (800d670 <DMA_CalcBaseAndBitshift+0x160>)
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	1d1a      	adds	r2, r3, #4
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800d5fa:	e00d      	b.n	800d618 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	461a      	mov	r2, r3
 800d602:	4b1b      	ldr	r3, [pc, #108]	@ (800d670 <DMA_CalcBaseAndBitshift+0x160>)
 800d604:	4013      	ands	r3, r2
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	6593      	str	r3, [r2, #88]	@ 0x58
 800d60a:	e005      	b.n	800d618 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3714      	adds	r7, #20
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr
 800d628:	40020010 	.word	0x40020010
 800d62c:	40020028 	.word	0x40020028
 800d630:	40020040 	.word	0x40020040
 800d634:	40020058 	.word	0x40020058
 800d638:	40020070 	.word	0x40020070
 800d63c:	40020088 	.word	0x40020088
 800d640:	400200a0 	.word	0x400200a0
 800d644:	400200b8 	.word	0x400200b8
 800d648:	40020410 	.word	0x40020410
 800d64c:	40020428 	.word	0x40020428
 800d650:	40020440 	.word	0x40020440
 800d654:	40020458 	.word	0x40020458
 800d658:	40020470 	.word	0x40020470
 800d65c:	40020488 	.word	0x40020488
 800d660:	400204a0 	.word	0x400204a0
 800d664:	400204b8 	.word	0x400204b8
 800d668:	aaaaaaab 	.word	0xaaaaaaab
 800d66c:	0801e7a0 	.word	0x0801e7a0
 800d670:	fffffc00 	.word	0xfffffc00

0800d674 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	699b      	ldr	r3, [r3, #24]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d120      	bne.n	800d6ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d68c:	2b03      	cmp	r3, #3
 800d68e:	d858      	bhi.n	800d742 <DMA_CheckFifoParam+0xce>
 800d690:	a201      	add	r2, pc, #4	@ (adr r2, 800d698 <DMA_CheckFifoParam+0x24>)
 800d692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d696:	bf00      	nop
 800d698:	0800d6a9 	.word	0x0800d6a9
 800d69c:	0800d6bb 	.word	0x0800d6bb
 800d6a0:	0800d6a9 	.word	0x0800d6a9
 800d6a4:	0800d743 	.word	0x0800d743
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d048      	beq.n	800d746 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d6b8:	e045      	b.n	800d746 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d6c2:	d142      	bne.n	800d74a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d6c8:	e03f      	b.n	800d74a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6d2:	d123      	bne.n	800d71c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6d8:	2b03      	cmp	r3, #3
 800d6da:	d838      	bhi.n	800d74e <DMA_CheckFifoParam+0xda>
 800d6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e4 <DMA_CheckFifoParam+0x70>)
 800d6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e2:	bf00      	nop
 800d6e4:	0800d6f5 	.word	0x0800d6f5
 800d6e8:	0800d6fb 	.word	0x0800d6fb
 800d6ec:	0800d6f5 	.word	0x0800d6f5
 800d6f0:	0800d70d 	.word	0x0800d70d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	73fb      	strb	r3, [r7, #15]
        break;
 800d6f8:	e030      	b.n	800d75c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d702:	2b00      	cmp	r3, #0
 800d704:	d025      	beq.n	800d752 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d70a:	e022      	b.n	800d752 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d710:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d714:	d11f      	bne.n	800d756 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d71a:	e01c      	b.n	800d756 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d720:	2b02      	cmp	r3, #2
 800d722:	d902      	bls.n	800d72a <DMA_CheckFifoParam+0xb6>
 800d724:	2b03      	cmp	r3, #3
 800d726:	d003      	beq.n	800d730 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800d728:	e018      	b.n	800d75c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	73fb      	strb	r3, [r7, #15]
        break;
 800d72e:	e015      	b.n	800d75c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00e      	beq.n	800d75a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	73fb      	strb	r3, [r7, #15]
    break;
 800d740:	e00b      	b.n	800d75a <DMA_CheckFifoParam+0xe6>
        break;
 800d742:	bf00      	nop
 800d744:	e00a      	b.n	800d75c <DMA_CheckFifoParam+0xe8>
        break;
 800d746:	bf00      	nop
 800d748:	e008      	b.n	800d75c <DMA_CheckFifoParam+0xe8>
        break;
 800d74a:	bf00      	nop
 800d74c:	e006      	b.n	800d75c <DMA_CheckFifoParam+0xe8>
        break;
 800d74e:	bf00      	nop
 800d750:	e004      	b.n	800d75c <DMA_CheckFifoParam+0xe8>
        break;
 800d752:	bf00      	nop
 800d754:	e002      	b.n	800d75c <DMA_CheckFifoParam+0xe8>
        break;
 800d756:	bf00      	nop
 800d758:	e000      	b.n	800d75c <DMA_CheckFifoParam+0xe8>
    break;
 800d75a:	bf00      	nop
    }
  }

  return status;
 800d75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3714      	adds	r7, #20
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop

0800d76c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b085      	sub	sp, #20
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a38      	ldr	r2, [pc, #224]	@ (800d860 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d022      	beq.n	800d7ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a36      	ldr	r2, [pc, #216]	@ (800d864 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d01d      	beq.n	800d7ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a35      	ldr	r2, [pc, #212]	@ (800d868 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d018      	beq.n	800d7ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a33      	ldr	r2, [pc, #204]	@ (800d86c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d013      	beq.n	800d7ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a32      	ldr	r2, [pc, #200]	@ (800d870 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d00e      	beq.n	800d7ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a30      	ldr	r2, [pc, #192]	@ (800d874 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d009      	beq.n	800d7ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a2f      	ldr	r2, [pc, #188]	@ (800d878 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d004      	beq.n	800d7ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a2d      	ldr	r2, [pc, #180]	@ (800d87c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d101      	bne.n	800d7ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e000      	b.n	800d7d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d01a      	beq.n	800d80a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	3b08      	subs	r3, #8
 800d7dc:	4a28      	ldr	r2, [pc, #160]	@ (800d880 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800d7de:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e2:	091b      	lsrs	r3, r3, #4
 800d7e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	4b26      	ldr	r3, [pc, #152]	@ (800d884 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800d7ea:	4413      	add	r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4a24      	ldr	r2, [pc, #144]	@ (800d888 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800d7f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f003 031f 	and.w	r3, r3, #31
 800d800:	2201      	movs	r2, #1
 800d802:	409a      	lsls	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800d808:	e024      	b.n	800d854 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	3b10      	subs	r3, #16
 800d812:	4a1e      	ldr	r2, [pc, #120]	@ (800d88c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800d814:	fba2 2303 	umull	r2, r3, r2, r3
 800d818:	091b      	lsrs	r3, r3, #4
 800d81a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	4a1c      	ldr	r2, [pc, #112]	@ (800d890 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d806      	bhi.n	800d832 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	4a1b      	ldr	r2, [pc, #108]	@ (800d894 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d902      	bls.n	800d832 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	3308      	adds	r3, #8
 800d830:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	4b18      	ldr	r3, [pc, #96]	@ (800d898 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800d836:	4413      	add	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	461a      	mov	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4a16      	ldr	r2, [pc, #88]	@ (800d89c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800d844:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f003 031f 	and.w	r3, r3, #31
 800d84c:	2201      	movs	r2, #1
 800d84e:	409a      	lsls	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d854:	bf00      	nop
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	58025408 	.word	0x58025408
 800d864:	5802541c 	.word	0x5802541c
 800d868:	58025430 	.word	0x58025430
 800d86c:	58025444 	.word	0x58025444
 800d870:	58025458 	.word	0x58025458
 800d874:	5802546c 	.word	0x5802546c
 800d878:	58025480 	.word	0x58025480
 800d87c:	58025494 	.word	0x58025494
 800d880:	cccccccd 	.word	0xcccccccd
 800d884:	16009600 	.word	0x16009600
 800d888:	58025880 	.word	0x58025880
 800d88c:	aaaaaaab 	.word	0xaaaaaaab
 800d890:	400204b8 	.word	0x400204b8
 800d894:	4002040f 	.word	0x4002040f
 800d898:	10008200 	.word	0x10008200
 800d89c:	40020880 	.word	0x40020880

0800d8a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d04a      	beq.n	800d94c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2b08      	cmp	r3, #8
 800d8ba:	d847      	bhi.n	800d94c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a25      	ldr	r2, [pc, #148]	@ (800d958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d022      	beq.n	800d90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a24      	ldr	r2, [pc, #144]	@ (800d95c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d01d      	beq.n	800d90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a22      	ldr	r2, [pc, #136]	@ (800d960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d018      	beq.n	800d90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a21      	ldr	r2, [pc, #132]	@ (800d964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d013      	beq.n	800d90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a1f      	ldr	r2, [pc, #124]	@ (800d968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d00e      	beq.n	800d90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a1e      	ldr	r2, [pc, #120]	@ (800d96c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d009      	beq.n	800d90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a1c      	ldr	r2, [pc, #112]	@ (800d970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d004      	beq.n	800d90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4a1b      	ldr	r2, [pc, #108]	@ (800d974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d101      	bne.n	800d910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800d90c:	2301      	movs	r3, #1
 800d90e:	e000      	b.n	800d912 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800d910:	2300      	movs	r3, #0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00a      	beq.n	800d92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	4b17      	ldr	r3, [pc, #92]	@ (800d978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800d91a:	4413      	add	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	461a      	mov	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a15      	ldr	r2, [pc, #84]	@ (800d97c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800d928:	671a      	str	r2, [r3, #112]	@ 0x70
 800d92a:	e009      	b.n	800d940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d92c:	68fa      	ldr	r2, [r7, #12]
 800d92e:	4b14      	ldr	r3, [pc, #80]	@ (800d980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800d930:	4413      	add	r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	461a      	mov	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a11      	ldr	r2, [pc, #68]	@ (800d984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800d93e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	3b01      	subs	r3, #1
 800d944:	2201      	movs	r2, #1
 800d946:	409a      	lsls	r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800d94c:	bf00      	nop
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	58025408 	.word	0x58025408
 800d95c:	5802541c 	.word	0x5802541c
 800d960:	58025430 	.word	0x58025430
 800d964:	58025444 	.word	0x58025444
 800d968:	58025458 	.word	0x58025458
 800d96c:	5802546c 	.word	0x5802546c
 800d970:	58025480 	.word	0x58025480
 800d974:	58025494 	.word	0x58025494
 800d978:	1600963f 	.word	0x1600963f
 800d97c:	58025940 	.word	0x58025940
 800d980:	1000823f 	.word	0x1000823f
 800d984:	40020940 	.word	0x40020940

0800d988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800d988:	b480      	push	{r7}
 800d98a:	b089      	sub	sp, #36	@ 0x24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d992:	2300      	movs	r3, #0
 800d994:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d996:	4b86      	ldr	r3, [pc, #536]	@ (800dbb0 <HAL_GPIO_Init+0x228>)
 800d998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d99a:	e18c      	b.n	800dcb6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f000 817e 	beq.w	800dcb0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	f003 0303 	and.w	r3, r3, #3
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d005      	beq.n	800d9cc <HAL_GPIO_Init+0x44>
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	f003 0303 	and.w	r3, r3, #3
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d130      	bne.n	800da2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	2203      	movs	r2, #3
 800d9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9dc:	43db      	mvns	r3, r3
 800d9de:	69ba      	ldr	r2, [r7, #24]
 800d9e0:	4013      	ands	r3, r2
 800d9e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	68da      	ldr	r2, [r3, #12]
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	005b      	lsls	r3, r3, #1
 800d9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f0:	69ba      	ldr	r2, [r7, #24]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	69ba      	ldr	r2, [r7, #24]
 800d9fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800da02:	2201      	movs	r2, #1
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	fa02 f303 	lsl.w	r3, r2, r3
 800da0a:	43db      	mvns	r3, r3
 800da0c:	69ba      	ldr	r2, [r7, #24]
 800da0e:	4013      	ands	r3, r2
 800da10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	091b      	lsrs	r3, r3, #4
 800da18:	f003 0201 	and.w	r2, r3, #1
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	fa02 f303 	lsl.w	r3, r2, r3
 800da22:	69ba      	ldr	r2, [r7, #24]
 800da24:	4313      	orrs	r3, r2
 800da26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	69ba      	ldr	r2, [r7, #24]
 800da2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f003 0303 	and.w	r3, r3, #3
 800da36:	2b03      	cmp	r3, #3
 800da38:	d017      	beq.n	800da6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	2203      	movs	r2, #3
 800da46:	fa02 f303 	lsl.w	r3, r2, r3
 800da4a:	43db      	mvns	r3, r3
 800da4c:	69ba      	ldr	r2, [r7, #24]
 800da4e:	4013      	ands	r3, r2
 800da50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	689a      	ldr	r2, [r3, #8]
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	005b      	lsls	r3, r3, #1
 800da5a:	fa02 f303 	lsl.w	r3, r2, r3
 800da5e:	69ba      	ldr	r2, [r7, #24]
 800da60:	4313      	orrs	r3, r2
 800da62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	f003 0303 	and.w	r3, r3, #3
 800da72:	2b02      	cmp	r3, #2
 800da74:	d123      	bne.n	800dabe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	08da      	lsrs	r2, r3, #3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	3208      	adds	r2, #8
 800da7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	f003 0307 	and.w	r3, r3, #7
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	220f      	movs	r2, #15
 800da8e:	fa02 f303 	lsl.w	r3, r2, r3
 800da92:	43db      	mvns	r3, r3
 800da94:	69ba      	ldr	r2, [r7, #24]
 800da96:	4013      	ands	r3, r2
 800da98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	691a      	ldr	r2, [r3, #16]
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	f003 0307 	and.w	r3, r3, #7
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	fa02 f303 	lsl.w	r3, r2, r3
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	4313      	orrs	r3, r2
 800daae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	08da      	lsrs	r2, r3, #3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	3208      	adds	r2, #8
 800dab8:	69b9      	ldr	r1, [r7, #24]
 800daba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	2203      	movs	r2, #3
 800daca:	fa02 f303 	lsl.w	r3, r2, r3
 800dace:	43db      	mvns	r3, r3
 800dad0:	69ba      	ldr	r2, [r7, #24]
 800dad2:	4013      	ands	r3, r2
 800dad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	f003 0203 	and.w	r2, r3, #3
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	fa02 f303 	lsl.w	r3, r2, r3
 800dae6:	69ba      	ldr	r2, [r7, #24]
 800dae8:	4313      	orrs	r3, r2
 800daea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	69ba      	ldr	r2, [r7, #24]
 800daf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f000 80d8 	beq.w	800dcb0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800db00:	4b2c      	ldr	r3, [pc, #176]	@ (800dbb4 <HAL_GPIO_Init+0x22c>)
 800db02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db06:	4a2b      	ldr	r2, [pc, #172]	@ (800dbb4 <HAL_GPIO_Init+0x22c>)
 800db08:	f043 0302 	orr.w	r3, r3, #2
 800db0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800db10:	4b28      	ldr	r3, [pc, #160]	@ (800dbb4 <HAL_GPIO_Init+0x22c>)
 800db12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db16:	f003 0302 	and.w	r3, r3, #2
 800db1a:	60fb      	str	r3, [r7, #12]
 800db1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800db1e:	4a26      	ldr	r2, [pc, #152]	@ (800dbb8 <HAL_GPIO_Init+0x230>)
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	089b      	lsrs	r3, r3, #2
 800db24:	3302      	adds	r3, #2
 800db26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	f003 0303 	and.w	r3, r3, #3
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	220f      	movs	r2, #15
 800db36:	fa02 f303 	lsl.w	r3, r2, r3
 800db3a:	43db      	mvns	r3, r3
 800db3c:	69ba      	ldr	r2, [r7, #24]
 800db3e:	4013      	ands	r3, r2
 800db40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a1d      	ldr	r2, [pc, #116]	@ (800dbbc <HAL_GPIO_Init+0x234>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d04a      	beq.n	800dbe0 <HAL_GPIO_Init+0x258>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4a1c      	ldr	r2, [pc, #112]	@ (800dbc0 <HAL_GPIO_Init+0x238>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d02b      	beq.n	800dbaa <HAL_GPIO_Init+0x222>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a1b      	ldr	r2, [pc, #108]	@ (800dbc4 <HAL_GPIO_Init+0x23c>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d025      	beq.n	800dba6 <HAL_GPIO_Init+0x21e>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4a1a      	ldr	r2, [pc, #104]	@ (800dbc8 <HAL_GPIO_Init+0x240>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d01f      	beq.n	800dba2 <HAL_GPIO_Init+0x21a>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a19      	ldr	r2, [pc, #100]	@ (800dbcc <HAL_GPIO_Init+0x244>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d019      	beq.n	800db9e <HAL_GPIO_Init+0x216>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a18      	ldr	r2, [pc, #96]	@ (800dbd0 <HAL_GPIO_Init+0x248>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d013      	beq.n	800db9a <HAL_GPIO_Init+0x212>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a17      	ldr	r2, [pc, #92]	@ (800dbd4 <HAL_GPIO_Init+0x24c>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d00d      	beq.n	800db96 <HAL_GPIO_Init+0x20e>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4a16      	ldr	r2, [pc, #88]	@ (800dbd8 <HAL_GPIO_Init+0x250>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d007      	beq.n	800db92 <HAL_GPIO_Init+0x20a>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4a15      	ldr	r2, [pc, #84]	@ (800dbdc <HAL_GPIO_Init+0x254>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d101      	bne.n	800db8e <HAL_GPIO_Init+0x206>
 800db8a:	2309      	movs	r3, #9
 800db8c:	e029      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800db8e:	230a      	movs	r3, #10
 800db90:	e027      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800db92:	2307      	movs	r3, #7
 800db94:	e025      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800db96:	2306      	movs	r3, #6
 800db98:	e023      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800db9a:	2305      	movs	r3, #5
 800db9c:	e021      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800db9e:	2304      	movs	r3, #4
 800dba0:	e01f      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800dba2:	2303      	movs	r3, #3
 800dba4:	e01d      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800dba6:	2302      	movs	r3, #2
 800dba8:	e01b      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e019      	b.n	800dbe2 <HAL_GPIO_Init+0x25a>
 800dbae:	bf00      	nop
 800dbb0:	58000080 	.word	0x58000080
 800dbb4:	58024400 	.word	0x58024400
 800dbb8:	58000400 	.word	0x58000400
 800dbbc:	58020000 	.word	0x58020000
 800dbc0:	58020400 	.word	0x58020400
 800dbc4:	58020800 	.word	0x58020800
 800dbc8:	58020c00 	.word	0x58020c00
 800dbcc:	58021000 	.word	0x58021000
 800dbd0:	58021400 	.word	0x58021400
 800dbd4:	58021800 	.word	0x58021800
 800dbd8:	58021c00 	.word	0x58021c00
 800dbdc:	58022400 	.word	0x58022400
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	69fa      	ldr	r2, [r7, #28]
 800dbe4:	f002 0203 	and.w	r2, r2, #3
 800dbe8:	0092      	lsls	r2, r2, #2
 800dbea:	4093      	lsls	r3, r2
 800dbec:	69ba      	ldr	r2, [r7, #24]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dbf2:	4938      	ldr	r1, [pc, #224]	@ (800dcd4 <HAL_GPIO_Init+0x34c>)
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	089b      	lsrs	r3, r3, #2
 800dbf8:	3302      	adds	r3, #2
 800dbfa:	69ba      	ldr	r2, [r7, #24]
 800dbfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dc00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	43db      	mvns	r3, r3
 800dc0c:	69ba      	ldr	r2, [r7, #24]
 800dc0e:	4013      	ands	r3, r2
 800dc10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d003      	beq.n	800dc26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800dc1e:	69ba      	ldr	r2, [r7, #24]
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	4313      	orrs	r3, r2
 800dc24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800dc26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800dc2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	43db      	mvns	r3, r3
 800dc3a:	69ba      	ldr	r2, [r7, #24]
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d003      	beq.n	800dc54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800dc4c:	69ba      	ldr	r2, [r7, #24]
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800dc54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	43db      	mvns	r3, r3
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	4013      	ands	r3, r2
 800dc6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d003      	beq.n	800dc80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800dc78:	69ba      	ldr	r2, [r7, #24]
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	69ba      	ldr	r2, [r7, #24]
 800dc84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	43db      	mvns	r3, r3
 800dc90:	69ba      	ldr	r2, [r7, #24]
 800dc92:	4013      	ands	r3, r2
 800dc94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d003      	beq.n	800dcaa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800dca2:	69ba      	ldr	r2, [r7, #24]
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	69ba      	ldr	r2, [r7, #24]
 800dcae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	fa22 f303 	lsr.w	r3, r2, r3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f47f ae6b 	bne.w	800d99c <HAL_GPIO_Init+0x14>
  }
}
 800dcc6:	bf00      	nop
 800dcc8:	bf00      	nop
 800dcca:	3724      	adds	r7, #36	@ 0x24
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	58000400 	.word	0x58000400

0800dcd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	691a      	ldr	r2, [r3, #16]
 800dce8:	887b      	ldrh	r3, [r7, #2]
 800dcea:	4013      	ands	r3, r2
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	73fb      	strb	r3, [r7, #15]
 800dcf4:	e001      	b.n	800dcfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3714      	adds	r7, #20
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	807b      	strh	r3, [r7, #2]
 800dd14:	4613      	mov	r3, r2
 800dd16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dd18:	787b      	ldrb	r3, [r7, #1]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dd1e:	887a      	ldrh	r2, [r7, #2]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800dd24:	e003      	b.n	800dd2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800dd26:	887b      	ldrh	r3, [r7, #2]
 800dd28:	041a      	lsls	r2, r3, #16
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	619a      	str	r2, [r3, #24]
}
 800dd2e:	bf00      	nop
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	4603      	mov	r3, r0
 800dd42:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800dd44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd48:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800dd4c:	88fb      	ldrh	r3, [r7, #6]
 800dd4e:	4013      	ands	r3, r2
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d008      	beq.n	800dd66 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dd54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dd58:	88fb      	ldrh	r3, [r7, #6]
 800dd5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dd5e:	88fb      	ldrh	r3, [r7, #6]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f8 f84d 	bl	8005e00 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800dd66:	bf00      	nop
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
	...

0800dd70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d101      	bne.n	800dd82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e08b      	b.n	800de9a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7f6 fdfe 	bl	8004998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2224      	movs	r2, #36	@ 0x24
 800dda0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f022 0201 	bic.w	r2, r2, #1
 800ddb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ddc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	689a      	ldr	r2, [r3, #8]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ddd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d107      	bne.n	800ddea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	689a      	ldr	r2, [r3, #8]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dde6:	609a      	str	r2, [r3, #8]
 800dde8:	e006      	b.n	800ddf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	689a      	ldr	r2, [r3, #8]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800ddf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	d108      	bne.n	800de12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de0e:	605a      	str	r2, [r3, #4]
 800de10:	e007      	b.n	800de22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800de20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6859      	ldr	r1, [r3, #4]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	4b1d      	ldr	r3, [pc, #116]	@ (800dea4 <HAL_I2C_Init+0x134>)
 800de2e:	430b      	orrs	r3, r1
 800de30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	68da      	ldr	r2, [r3, #12]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800de40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	691a      	ldr	r2, [r3, #16]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	430a      	orrs	r2, r1
 800de5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	69d9      	ldr	r1, [r3, #28]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a1a      	ldr	r2, [r3, #32]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	430a      	orrs	r2, r1
 800de6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f042 0201 	orr.w	r2, r2, #1
 800de7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2220      	movs	r2, #32
 800de86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	02008000 	.word	0x02008000

0800dea8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b088      	sub	sp, #32
 800deac:	af02      	add	r7, sp, #8
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	4608      	mov	r0, r1
 800deb2:	4611      	mov	r1, r2
 800deb4:	461a      	mov	r2, r3
 800deb6:	4603      	mov	r3, r0
 800deb8:	817b      	strh	r3, [r7, #10]
 800deba:	460b      	mov	r3, r1
 800debc:	813b      	strh	r3, [r7, #8]
 800debe:	4613      	mov	r3, r2
 800dec0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	2b20      	cmp	r3, #32
 800decc:	f040 80f9 	bne.w	800e0c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d002      	beq.n	800dedc <HAL_I2C_Mem_Write+0x34>
 800ded6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d105      	bne.n	800dee8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dee2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e0ed      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800deee:	2b01      	cmp	r3, #1
 800def0:	d101      	bne.n	800def6 <HAL_I2C_Mem_Write+0x4e>
 800def2:	2302      	movs	r3, #2
 800def4:	e0e6      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x21c>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2201      	movs	r2, #1
 800defa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800defe:	f7fa fdbb 	bl	8008a78 <HAL_GetTick>
 800df02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	2319      	movs	r3, #25
 800df0a:	2201      	movs	r2, #1
 800df0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f002 f80e 	bl	800ff32 <I2C_WaitOnFlagUntilTimeout>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e0d1      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2221      	movs	r2, #33	@ 0x21
 800df24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2240      	movs	r2, #64	@ 0x40
 800df2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2200      	movs	r2, #0
 800df34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6a3a      	ldr	r2, [r7, #32]
 800df3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800df40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800df48:	88f8      	ldrh	r0, [r7, #6]
 800df4a:	893a      	ldrh	r2, [r7, #8]
 800df4c:	8979      	ldrh	r1, [r7, #10]
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	4603      	mov	r3, r0
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f001 f95b 	bl	800f214 <I2C_RequestMemoryWrite>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d005      	beq.n	800df70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2200      	movs	r2, #0
 800df68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800df6c:	2301      	movs	r3, #1
 800df6e:	e0a9      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df74:	b29b      	uxth	r3, r3
 800df76:	2bff      	cmp	r3, #255	@ 0xff
 800df78:	d90e      	bls.n	800df98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	22ff      	movs	r2, #255	@ 0xff
 800df7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df84:	b2da      	uxtb	r2, r3
 800df86:	8979      	ldrh	r1, [r7, #10]
 800df88:	2300      	movs	r3, #0
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f002 f991 	bl	80102b8 <I2C_TransferConfig>
 800df96:	e00f      	b.n	800dfb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	8979      	ldrh	r1, [r7, #10]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f002 f980 	bl	80102b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dfb8:	697a      	ldr	r2, [r7, #20]
 800dfba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f002 f811 	bl	800ffe4 <I2C_WaitOnTXISFlagUntilTimeout>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	e07b      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfd0:	781a      	ldrb	r2, [r3, #0]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfdc:	1c5a      	adds	r2, r3, #1
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dff4:	3b01      	subs	r3, #1
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e000:	b29b      	uxth	r3, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	d034      	beq.n	800e070 <HAL_I2C_Mem_Write+0x1c8>
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d130      	bne.n	800e070 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e014:	2200      	movs	r2, #0
 800e016:	2180      	movs	r1, #128	@ 0x80
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f001 ff8a 	bl	800ff32 <I2C_WaitOnFlagUntilTimeout>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d001      	beq.n	800e028 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e04d      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	2bff      	cmp	r3, #255	@ 0xff
 800e030:	d90e      	bls.n	800e050 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	22ff      	movs	r2, #255	@ 0xff
 800e036:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	8979      	ldrh	r1, [r7, #10]
 800e040:	2300      	movs	r3, #0
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f002 f935 	bl	80102b8 <I2C_TransferConfig>
 800e04e:	e00f      	b.n	800e070 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e054:	b29a      	uxth	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	8979      	ldrh	r1, [r7, #10]
 800e062:	2300      	movs	r3, #0
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f002 f924 	bl	80102b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e074:	b29b      	uxth	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d19e      	bne.n	800dfb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e07a:	697a      	ldr	r2, [r7, #20]
 800e07c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f001 fff7 	bl	8010072 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e01a      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2220      	movs	r2, #32
 800e094:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	6859      	ldr	r1, [r3, #4]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e0cc <HAL_I2C_Mem_Write+0x224>)
 800e0a2:	400b      	ands	r3, r1
 800e0a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2220      	movs	r2, #32
 800e0aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	e000      	b.n	800e0c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e0c2:	2302      	movs	r3, #2
  }
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3718      	adds	r7, #24
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	fe00e800 	.word	0xfe00e800

0800e0d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b088      	sub	sp, #32
 800e0d4:	af02      	add	r7, sp, #8
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	4608      	mov	r0, r1
 800e0da:	4611      	mov	r1, r2
 800e0dc:	461a      	mov	r2, r3
 800e0de:	4603      	mov	r3, r0
 800e0e0:	817b      	strh	r3, [r7, #10]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	813b      	strh	r3, [r7, #8]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b20      	cmp	r3, #32
 800e0f4:	f040 80fd 	bne.w	800e2f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0f8:	6a3b      	ldr	r3, [r7, #32]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d002      	beq.n	800e104 <HAL_I2C_Mem_Read+0x34>
 800e0fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e100:	2b00      	cmp	r3, #0
 800e102:	d105      	bne.n	800e110 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e10a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e0f1      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e116:	2b01      	cmp	r3, #1
 800e118:	d101      	bne.n	800e11e <HAL_I2C_Mem_Read+0x4e>
 800e11a:	2302      	movs	r3, #2
 800e11c:	e0ea      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x224>
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2201      	movs	r2, #1
 800e122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e126:	f7fa fca7 	bl	8008a78 <HAL_GetTick>
 800e12a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	2319      	movs	r3, #25
 800e132:	2201      	movs	r2, #1
 800e134:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f001 fefa 	bl	800ff32 <I2C_WaitOnFlagUntilTimeout>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d001      	beq.n	800e148 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e144:	2301      	movs	r3, #1
 800e146:	e0d5      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2222      	movs	r2, #34	@ 0x22
 800e14c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2240      	movs	r2, #64	@ 0x40
 800e154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2200      	movs	r2, #0
 800e15c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6a3a      	ldr	r2, [r7, #32]
 800e162:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2200      	movs	r2, #0
 800e16e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e170:	88f8      	ldrh	r0, [r7, #6]
 800e172:	893a      	ldrh	r2, [r7, #8]
 800e174:	8979      	ldrh	r1, [r7, #10]
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	9301      	str	r3, [sp, #4]
 800e17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	4603      	mov	r3, r0
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f001 f89b 	bl	800f2bc <I2C_RequestMemoryRead>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d005      	beq.n	800e198 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	e0ad      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	2bff      	cmp	r3, #255	@ 0xff
 800e1a0:	d90e      	bls.n	800e1c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	22ff      	movs	r2, #255	@ 0xff
 800e1a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	8979      	ldrh	r1, [r7, #10]
 800e1b0:	4b52      	ldr	r3, [pc, #328]	@ (800e2fc <HAL_I2C_Mem_Read+0x22c>)
 800e1b2:	9300      	str	r3, [sp, #0]
 800e1b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f002 f87d 	bl	80102b8 <I2C_TransferConfig>
 800e1be:	e00f      	b.n	800e1e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	8979      	ldrh	r1, [r7, #10]
 800e1d2:	4b4a      	ldr	r3, [pc, #296]	@ (800e2fc <HAL_I2C_Mem_Read+0x22c>)
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f002 f86c 	bl	80102b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	2104      	movs	r1, #4
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f001 fea1 	bl	800ff32 <I2C_WaitOnFlagUntilTimeout>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e07c      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e204:	b2d2      	uxtb	r2, r2
 800e206:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e216:	3b01      	subs	r3, #1
 800e218:	b29a      	uxth	r2, r3
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e222:	b29b      	uxth	r3, r3
 800e224:	3b01      	subs	r3, #1
 800e226:	b29a      	uxth	r2, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e230:	b29b      	uxth	r3, r3
 800e232:	2b00      	cmp	r3, #0
 800e234:	d034      	beq.n	800e2a0 <HAL_I2C_Mem_Read+0x1d0>
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d130      	bne.n	800e2a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e244:	2200      	movs	r2, #0
 800e246:	2180      	movs	r1, #128	@ 0x80
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f001 fe72 	bl	800ff32 <I2C_WaitOnFlagUntilTimeout>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d001      	beq.n	800e258 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	e04d      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	2bff      	cmp	r3, #255	@ 0xff
 800e260:	d90e      	bls.n	800e280 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	22ff      	movs	r2, #255	@ 0xff
 800e266:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	8979      	ldrh	r1, [r7, #10]
 800e270:	2300      	movs	r3, #0
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f002 f81d 	bl	80102b8 <I2C_TransferConfig>
 800e27e:	e00f      	b.n	800e2a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e284:	b29a      	uxth	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e28e:	b2da      	uxtb	r2, r3
 800e290:	8979      	ldrh	r1, [r7, #10]
 800e292:	2300      	movs	r3, #0
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f002 f80c 	bl	80102b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d19a      	bne.n	800e1e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f001 fedf 	bl	8010072 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e01a      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2220      	movs	r2, #32
 800e2c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	6859      	ldr	r1, [r3, #4]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e300 <HAL_I2C_Mem_Read+0x230>)
 800e2d2:	400b      	ands	r3, r1
 800e2d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2220      	movs	r2, #32
 800e2da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	e000      	b.n	800e2f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e2f2:	2302      	movs	r3, #2
  }
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	80002400 	.word	0x80002400
 800e300:	fe00e800 	.word	0xfe00e800

0800e304 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af02      	add	r7, sp, #8
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	4608      	mov	r0, r1
 800e30e:	4611      	mov	r1, r2
 800e310:	461a      	mov	r2, r3
 800e312:	4603      	mov	r3, r0
 800e314:	817b      	strh	r3, [r7, #10]
 800e316:	460b      	mov	r3, r1
 800e318:	813b      	strh	r3, [r7, #8]
 800e31a:	4613      	mov	r3, r2
 800e31c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e324:	b2db      	uxtb	r3, r3
 800e326:	2b20      	cmp	r3, #32
 800e328:	d16a      	bne.n	800e400 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <HAL_I2C_Mem_Write_IT+0x32>
 800e330:	8bbb      	ldrh	r3, [r7, #28]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d105      	bne.n	800e342 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e33c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	e05f      	b.n	800e402 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	699b      	ldr	r3, [r3, #24]
 800e348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e34c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e350:	d101      	bne.n	800e356 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800e352:	2302      	movs	r3, #2
 800e354:	e055      	b.n	800e402 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d101      	bne.n	800e364 <HAL_I2C_Mem_Write_IT+0x60>
 800e360:	2302      	movs	r3, #2
 800e362:	e04e      	b.n	800e402 <HAL_I2C_Mem_Write_IT+0xfe>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2201      	movs	r2, #1
 800e368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2221      	movs	r2, #33	@ 0x21
 800e370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2240      	movs	r2, #64	@ 0x40
 800e378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	69ba      	ldr	r2, [r7, #24]
 800e38c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	8bba      	ldrh	r2, [r7, #28]
 800e392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	4a1d      	ldr	r2, [pc, #116]	@ (800e40c <HAL_I2C_Mem_Write_IT+0x108>)
 800e398:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	4a1c      	ldr	r2, [pc, #112]	@ (800e410 <HAL_I2C_Mem_Write_IT+0x10c>)
 800e39e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e3a0:	897a      	ldrh	r2, [r7, #10]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e3a6:	88fb      	ldrh	r3, [r7, #6]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d109      	bne.n	800e3c0 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e3ac:	893b      	ldrh	r3, [r7, #8]
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3bc:	651a      	str	r2, [r3, #80]	@ 0x50
 800e3be:	e00b      	b.n	800e3d8 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e3c0:	893b      	ldrh	r3, [r7, #8]
 800e3c2:	0a1b      	lsrs	r3, r3, #8
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e3ce:	893b      	ldrh	r3, [r7, #8]
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e3d8:	88fb      	ldrh	r3, [r7, #6]
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	8979      	ldrh	r1, [r7, #10]
 800e3de:	4b0d      	ldr	r3, [pc, #52]	@ (800e414 <HAL_I2C_Mem_Write_IT+0x110>)
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f001 ff66 	bl	80102b8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f001 ff90 	bl	801031c <I2C_Enable_IRQ>

    return HAL_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	e000      	b.n	800e402 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e400:	2302      	movs	r3, #2
  }
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	ffff0000 	.word	0xffff0000
 800e410:	0800e601 	.word	0x0800e601
 800e414:	80002000 	.word	0x80002000

0800e418 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af02      	add	r7, sp, #8
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	4608      	mov	r0, r1
 800e422:	4611      	mov	r1, r2
 800e424:	461a      	mov	r2, r3
 800e426:	4603      	mov	r3, r0
 800e428:	817b      	strh	r3, [r7, #10]
 800e42a:	460b      	mov	r3, r1
 800e42c:	813b      	strh	r3, [r7, #8]
 800e42e:	4613      	mov	r3, r2
 800e430:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b20      	cmp	r3, #32
 800e43c:	d166      	bne.n	800e50c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d002      	beq.n	800e44a <HAL_I2C_Mem_Read_IT+0x32>
 800e444:	8bbb      	ldrh	r3, [r7, #28]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d105      	bne.n	800e456 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e450:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	e05b      	b.n	800e50e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	699b      	ldr	r3, [r3, #24]
 800e45c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e464:	d101      	bne.n	800e46a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800e466:	2302      	movs	r3, #2
 800e468:	e051      	b.n	800e50e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e470:	2b01      	cmp	r3, #1
 800e472:	d101      	bne.n	800e478 <HAL_I2C_Mem_Read_IT+0x60>
 800e474:	2302      	movs	r3, #2
 800e476:	e04a      	b.n	800e50e <HAL_I2C_Mem_Read_IT+0xf6>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2201      	movs	r2, #1
 800e47c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2222      	movs	r2, #34	@ 0x22
 800e484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2240      	movs	r2, #64	@ 0x40
 800e48c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	69ba      	ldr	r2, [r7, #24]
 800e49a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	8bba      	ldrh	r2, [r7, #28]
 800e4a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800e518 <HAL_I2C_Mem_Read_IT+0x100>)
 800e4a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	4a1c      	ldr	r2, [pc, #112]	@ (800e51c <HAL_I2C_Mem_Read_IT+0x104>)
 800e4ac:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e4ae:	897a      	ldrh	r2, [r7, #10]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e4b4:	88fb      	ldrh	r3, [r7, #6]
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d109      	bne.n	800e4ce <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e4ba:	893b      	ldrh	r3, [r7, #8]
 800e4bc:	b2da      	uxtb	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ca:	651a      	str	r2, [r3, #80]	@ 0x50
 800e4cc:	e00b      	b.n	800e4e6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e4ce:	893b      	ldrh	r3, [r7, #8]
 800e4d0:	0a1b      	lsrs	r3, r3, #8
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e4dc:	893b      	ldrh	r3, [r7, #8]
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e4e6:	88fb      	ldrh	r3, [r7, #6]
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	8979      	ldrh	r1, [r7, #10]
 800e4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800e520 <HAL_I2C_Mem_Read_IT+0x108>)
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f001 fee0 	bl	80102b8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e500:	2101      	movs	r1, #1
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f001 ff0a 	bl	801031c <I2C_Enable_IRQ>

    return HAL_OK;
 800e508:	2300      	movs	r3, #0
 800e50a:	e000      	b.n	800e50e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800e50c:	2302      	movs	r3, #2
  }
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	ffff0000 	.word	0xffff0000
 800e51c:	0800e601 	.word	0x0800e601
 800e520:	80002000 	.word	0x80002000

0800e524 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	699b      	ldr	r3, [r3, #24]
 800e532:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e540:	2b00      	cmp	r3, #0
 800e542:	d005      	beq.n	800e550 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e548:	68ba      	ldr	r2, [r7, #8]
 800e54a:	68f9      	ldr	r1, [r7, #12]
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	4798      	blx	r3
  }
}
 800e550:	bf00      	nop
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800e560:	bf00      	nop
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800e574:	bf00      	nop
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800e588:	bf00      	nop
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800e59c:	bf00      	nop
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	70fb      	strb	r3, [r7, #3]
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800e5b8:	bf00      	nop
 800e5ba:	370c      	adds	r7, #12
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800e5f4:	bf00      	nop
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b088      	sub	sp, #32
 800e604:	af02      	add	r7, sp, #8
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e60c:	4b8d      	ldr	r3, [pc, #564]	@ (800e844 <I2C_Mem_ISR_IT+0x244>)
 800e60e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d101      	bne.n	800e622 <I2C_Mem_ISR_IT+0x22>
 800e61e:	2302      	movs	r3, #2
 800e620:	e10c      	b.n	800e83c <I2C_Mem_ISR_IT+0x23c>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	f003 0310 	and.w	r3, r3, #16
 800e630:	2b00      	cmp	r3, #0
 800e632:	d012      	beq.n	800e65a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00d      	beq.n	800e65a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2210      	movs	r2, #16
 800e644:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e64a:	f043 0204 	orr.w	r2, r3, #4
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f001 fc2b 	bl	800feae <I2C_Flush_TXDR>
 800e658:	e0dd      	b.n	800e816 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	f003 0304 	and.w	r3, r3, #4
 800e660:	2b00      	cmp	r3, #0
 800e662:	d022      	beq.n	800e6aa <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d01d      	beq.n	800e6aa <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f023 0304 	bic.w	r3, r3, #4
 800e674:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e680:	b2d2      	uxtb	r2, r2
 800e682:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e688:	1c5a      	adds	r2, r3, #1
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e692:	3b01      	subs	r3, #1
 800e694:	b29a      	uxth	r2, r3
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e6a8:	e0b5      	b.n	800e816 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	f003 0302 	and.w	r3, r3, #2
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d02c      	beq.n	800e70e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d027      	beq.n	800e70e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c6:	d118      	bne.n	800e6fa <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6cc:	781a      	ldrb	r2, [r3, #0]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e6f8:	e08d      	b.n	800e816 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	68fa      	ldr	r2, [r7, #12]
 800e700:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e702:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f04f 32ff 	mov.w	r2, #4294967295
 800e70a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e70c:	e083      	b.n	800e816 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e714:	2b00      	cmp	r3, #0
 800e716:	d03c      	beq.n	800e792 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d037      	beq.n	800e792 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e726:	b29b      	uxth	r3, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d02c      	beq.n	800e786 <I2C_Mem_ISR_IT+0x186>
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e730:	2b00      	cmp	r3, #0
 800e732:	d128      	bne.n	800e786 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e738:	b29b      	uxth	r3, r3
 800e73a:	2bff      	cmp	r3, #255	@ 0xff
 800e73c:	d910      	bls.n	800e760 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	22ff      	movs	r2, #255	@ 0xff
 800e742:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e748:	b299      	uxth	r1, r3
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	2300      	movs	r3, #0
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f001 fdad 	bl	80102b8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e75e:	e017      	b.n	800e790 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e764:	b29a      	uxth	r2, r3
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e76e:	b299      	uxth	r1, r3
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e774:	b2da      	uxtb	r2, r3
 800e776:	2300      	movs	r3, #0
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f001 fd9a 	bl	80102b8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e784:	e004      	b.n	800e790 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e786:	2140      	movs	r1, #64	@ 0x40
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f001 fa79 	bl	800fc80 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e78e:	e042      	b.n	800e816 <I2C_Mem_ISR_IT+0x216>
 800e790:	e041      	b.n	800e816 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d03c      	beq.n	800e816 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d037      	beq.n	800e816 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f001 fe3b 	bl	8010424 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e7ae:	2102      	movs	r1, #2
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	f001 fdb3 	bl	801031c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	2b22      	cmp	r3, #34	@ 0x22
 800e7c0:	d101      	bne.n	800e7c6 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800e7c2:	4b21      	ldr	r3, [pc, #132]	@ (800e848 <I2C_Mem_ISR_IT+0x248>)
 800e7c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	2bff      	cmp	r3, #255	@ 0xff
 800e7ce:	d910      	bls.n	800e7f2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	22ff      	movs	r2, #255	@ 0xff
 800e7d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7da:	b299      	uxth	r1, r3
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f001 fd64 	bl	80102b8 <I2C_TransferConfig>
 800e7f0:	e011      	b.n	800e816 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e800:	b299      	uxth	r1, r3
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e806:	b2da      	uxtb	r2, r3
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f001 fd51 	bl	80102b8 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	f003 0320 	and.w	r3, r3, #32
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d008      	beq.n	800e832 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e826:	2b00      	cmp	r3, #0
 800e828:	d003      	beq.n	800e832 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800e82a:	6939      	ldr	r1, [r7, #16]
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f000 feb7 	bl	800f5a0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	80002000 	.word	0x80002000
 800e848:	80002400 	.word	0x80002400

0800e84c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e85c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d101      	bne.n	800e870 <I2C_Slave_ISR_IT+0x24>
 800e86c:	2302      	movs	r3, #2
 800e86e:	e0e2      	b.n	800ea36 <I2C_Slave_ISR_IT+0x1ea>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	f003 0320 	and.w	r3, r3, #32
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d009      	beq.n	800e896 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d004      	beq.n	800e896 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800e88c:	6939      	ldr	r1, [r7, #16]
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f000 ff4e 	bl	800f730 <I2C_ITSlaveCplt>
 800e894:	e0ca      	b.n	800ea2c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	f003 0310 	and.w	r3, r3, #16
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d04b      	beq.n	800e938 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d046      	beq.n	800e938 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d128      	bne.n	800e906 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b28      	cmp	r3, #40	@ 0x28
 800e8be:	d108      	bne.n	800e8d2 <I2C_Slave_ISR_IT+0x86>
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8c6:	d104      	bne.n	800e8d2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e8c8:	6939      	ldr	r1, [r7, #16]
 800e8ca:	68f8      	ldr	r0, [r7, #12]
 800e8cc:	f001 f984 	bl	800fbd8 <I2C_ITListenCplt>
 800e8d0:	e031      	b.n	800e936 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	2b29      	cmp	r3, #41	@ 0x29
 800e8dc:	d10e      	bne.n	800e8fc <I2C_Slave_ISR_IT+0xb0>
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e8e4:	d00a      	beq.n	800e8fc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2210      	movs	r2, #16
 800e8ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f001 fadd 	bl	800feae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f000 fdf6 	bl	800f4e6 <I2C_ITSlaveSeqCplt>
 800e8fa:	e01c      	b.n	800e936 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2210      	movs	r2, #16
 800e902:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800e904:	e08f      	b.n	800ea26 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2210      	movs	r2, #16
 800e90c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e912:	f043 0204 	orr.w	r2, r3, #4
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d003      	beq.n	800e928 <I2C_Slave_ISR_IT+0xdc>
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e926:	d17e      	bne.n	800ea26 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e92c:	4619      	mov	r1, r3
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f001 f9a6 	bl	800fc80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e934:	e077      	b.n	800ea26 <I2C_Slave_ISR_IT+0x1da>
 800e936:	e076      	b.n	800ea26 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	f003 0304 	and.w	r3, r3, #4
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d02f      	beq.n	800e9a2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d02a      	beq.n	800e9a2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e950:	b29b      	uxth	r3, r3
 800e952:	2b00      	cmp	r3, #0
 800e954:	d018      	beq.n	800e988 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e960:	b2d2      	uxtb	r2, r2
 800e962:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e968:	1c5a      	adds	r2, r3, #1
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e972:	3b01      	subs	r3, #1
 800e974:	b29a      	uxth	r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e97e:	b29b      	uxth	r3, r3
 800e980:	3b01      	subs	r3, #1
 800e982:	b29a      	uxth	r2, r3
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d14b      	bne.n	800ea2a <I2C_Slave_ISR_IT+0x1de>
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e998:	d047      	beq.n	800ea2a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f000 fda3 	bl	800f4e6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800e9a0:	e043      	b.n	800ea2a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	f003 0308 	and.w	r3, r3, #8
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d009      	beq.n	800e9c0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d004      	beq.n	800e9c0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800e9b6:	6939      	ldr	r1, [r7, #16]
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 fcd3 	bl	800f364 <I2C_ITAddrCplt>
 800e9be:	e035      	b.n	800ea2c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	f003 0302 	and.w	r3, r3, #2
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d030      	beq.n	800ea2c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d02b      	beq.n	800ea2c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d018      	beq.n	800ea10 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9e2:	781a      	ldrb	r2, [r3, #0]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea06:	3b01      	subs	r3, #1
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ea0e:	e00d      	b.n	800ea2c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea16:	d002      	beq.n	800ea1e <I2C_Slave_ISR_IT+0x1d2>
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d106      	bne.n	800ea2c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	f000 fd61 	bl	800f4e6 <I2C_ITSlaveSeqCplt>
 800ea24:	e002      	b.n	800ea2c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800ea26:	bf00      	nop
 800ea28:	e000      	b.n	800ea2c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800ea2a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3718      	adds	r7, #24
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b088      	sub	sp, #32
 800ea42:	af02      	add	r7, sp, #8
 800ea44:	60f8      	str	r0, [r7, #12]
 800ea46:	60b9      	str	r1, [r7, #8]
 800ea48:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d101      	bne.n	800ea58 <I2C_Master_ISR_DMA+0x1a>
 800ea54:	2302      	movs	r3, #2
 800ea56:	e0d9      	b.n	800ec0c <I2C_Master_ISR_DMA+0x1ce>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	f003 0310 	and.w	r3, r3, #16
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d016      	beq.n	800ea98 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d011      	beq.n	800ea98 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2210      	movs	r2, #16
 800ea7a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea80:	f043 0204 	orr.w	r2, r3, #4
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ea88:	2120      	movs	r1, #32
 800ea8a:	68f8      	ldr	r0, [r7, #12]
 800ea8c:	f001 fc46 	bl	801031c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f001 fa0c 	bl	800feae <I2C_Flush_TXDR>
 800ea96:	e0b4      	b.n	800ec02 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d071      	beq.n	800eb86 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d06c      	beq.n	800eb86 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eaba:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d04e      	beq.n	800eb64 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	b29b      	uxth	r3, r3
 800eace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ead2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ead8:	b29b      	uxth	r3, r3
 800eada:	2bff      	cmp	r3, #255	@ 0xff
 800eadc:	d906      	bls.n	800eaec <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	22ff      	movs	r2, #255	@ 0xff
 800eae2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800eae4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eae8:	617b      	str	r3, [r7, #20]
 800eaea:	e010      	b.n	800eb0e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaf0:	b29a      	uxth	r2, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eafa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800eafe:	d003      	beq.n	800eb08 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb04:	617b      	str	r3, [r7, #20]
 800eb06:	e002      	b.n	800eb0e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800eb08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eb0c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb12:	b2da      	uxtb	r2, r3
 800eb14:	8a79      	ldrh	r1, [r7, #18]
 800eb16:	2300      	movs	r3, #0
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	f001 fbcb 	bl	80102b8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b22      	cmp	r3, #34	@ 0x22
 800eb3e:	d108      	bne.n	800eb52 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eb4e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800eb50:	e057      	b.n	800ec02 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800eb62:	e04e      	b.n	800ec02 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb72:	d003      	beq.n	800eb7c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f000 fc79 	bl	800f46c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800eb7a:	e042      	b.n	800ec02 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800eb7c:	2140      	movs	r1, #64	@ 0x40
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f001 f87e 	bl	800fc80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800eb84:	e03d      	b.n	800ec02 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d028      	beq.n	800ebe2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d023      	beq.n	800ebe2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d119      	bne.n	800ebd8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ebb2:	d025      	beq.n	800ec00 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ebbc:	d108      	bne.n	800ebd0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	685a      	ldr	r2, [r3, #4]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ebcc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800ebce:	e017      	b.n	800ec00 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f000 fc4b 	bl	800f46c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800ebd6:	e013      	b.n	800ec00 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ebd8:	2140      	movs	r1, #64	@ 0x40
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f001 f850 	bl	800fc80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ebe0:	e00e      	b.n	800ec00 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	f003 0320 	and.w	r3, r3, #32
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00a      	beq.n	800ec02 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d005      	beq.n	800ec02 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f000 fcd1 	bl	800f5a0 <I2C_ITMasterCplt>
 800ebfe:	e000      	b.n	800ec02 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800ec00:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ec0a:	2300      	movs	r3, #0
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3718      	adds	r7, #24
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b088      	sub	sp, #32
 800ec18:	af02      	add	r7, sp, #8
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800ec20:	4b8d      	ldr	r3, [pc, #564]	@ (800ee58 <I2C_Mem_ISR_DMA+0x244>)
 800ec22:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d101      	bne.n	800ec32 <I2C_Mem_ISR_DMA+0x1e>
 800ec2e:	2302      	movs	r3, #2
 800ec30:	e10e      	b.n	800ee50 <I2C_Mem_ISR_DMA+0x23c>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	f003 0310 	and.w	r3, r3, #16
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d016      	beq.n	800ec72 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d011      	beq.n	800ec72 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2210      	movs	r2, #16
 800ec54:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec5a:	f043 0204 	orr.w	r2, r3, #4
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ec62:	2120      	movs	r1, #32
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f001 fb59 	bl	801031c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	f001 f91f 	bl	800feae <I2C_Flush_TXDR>
 800ec70:	e0e9      	b.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	f003 0302 	and.w	r3, r3, #2
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00e      	beq.n	800ec9a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d009      	beq.n	800ec9a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ec8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f04f 32ff 	mov.w	r2, #4294967295
 800ec96:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec98:	e0d5      	b.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d05f      	beq.n	800ed64 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d05a      	beq.n	800ed64 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ecae:	2101      	movs	r1, #1
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f001 fbb7 	bl	8010424 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ecb6:	2110      	movs	r1, #16
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f001 fb2f 	bl	801031c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d048      	beq.n	800ed5a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	2bff      	cmp	r3, #255	@ 0xff
 800ecd0:	d910      	bls.n	800ecf4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	22ff      	movs	r2, #255	@ 0xff
 800ecd6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecdc:	b299      	uxth	r1, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ece2:	b2da      	uxtb	r2, r3
 800ece4:	2300      	movs	r3, #0
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f001 fae3 	bl	80102b8 <I2C_TransferConfig>
 800ecf2:	e011      	b.n	800ed18 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed02:	b299      	uxth	r1, r3
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f001 fad0 	bl	80102b8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b22      	cmp	r3, #34	@ 0x22
 800ed34:	d108      	bne.n	800ed48 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ed44:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ed46:	e07e      	b.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ed56:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ed58:	e075      	b.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ed5a:	2140      	movs	r1, #64	@ 0x40
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f000 ff8f 	bl	800fc80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800ed62:	e070      	b.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d05d      	beq.n	800ee2a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d058      	beq.n	800ee2a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ed78:	2101      	movs	r1, #1
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f001 fb52 	bl	8010424 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ed80:	2110      	movs	r1, #16
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f001 faca 	bl	801031c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	2b22      	cmp	r3, #34	@ 0x22
 800ed92:	d101      	bne.n	800ed98 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800ed94:	4b31      	ldr	r3, [pc, #196]	@ (800ee5c <I2C_Mem_ISR_DMA+0x248>)
 800ed96:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	2bff      	cmp	r3, #255	@ 0xff
 800eda0:	d910      	bls.n	800edc4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	22ff      	movs	r2, #255	@ 0xff
 800eda6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edac:	b299      	uxth	r1, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f001 fa7b 	bl	80102b8 <I2C_TransferConfig>
 800edc2:	e011      	b.n	800ede8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edc8:	b29a      	uxth	r2, r3
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edd2:	b299      	uxth	r1, r3
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edd8:	b2da      	uxtb	r2, r3
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ede2:	68f8      	ldr	r0, [r7, #12]
 800ede4:	f001 fa68 	bl	80102b8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edec:	b29a      	uxth	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	2b22      	cmp	r3, #34	@ 0x22
 800ee04:	d108      	bne.n	800ee18 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ee14:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ee16:	e016      	b.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee26:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ee28:	e00d      	b.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	f003 0320 	and.w	r3, r3, #32
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d008      	beq.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d003      	beq.n	800ee46 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ee3e:	68b9      	ldr	r1, [r7, #8]
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f000 fbad 	bl	800f5a0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ee4e:	2300      	movs	r3, #0
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3718      	adds	r7, #24
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	80002000 	.word	0x80002000
 800ee5c:	80002400 	.word	0x80002400

0800ee60 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b088      	sub	sp, #32
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee70:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800ee72:	2300      	movs	r3, #0
 800ee74:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d101      	bne.n	800ee84 <I2C_Slave_ISR_DMA+0x24>
 800ee80:	2302      	movs	r3, #2
 800ee82:	e1c2      	b.n	800f20a <I2C_Slave_ISR_DMA+0x3aa>
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2201      	movs	r2, #1
 800ee88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	f003 0320 	and.w	r3, r3, #32
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d009      	beq.n	800eeaa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d004      	beq.n	800eeaa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f000 fc44 	bl	800f730 <I2C_ITSlaveCplt>
 800eea8:	e1aa      	b.n	800f200 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	f003 0310 	and.w	r3, r3, #16
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f000 8197 	beq.w	800f1e4 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f000 8191 	beq.w	800f1e4 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d105      	bne.n	800eed8 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f000 817f 	beq.w	800f1d6 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d07b      	beq.n	800efd8 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d076      	beq.n	800efd8 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a74      	ldr	r2, [pc, #464]	@ (800f0c4 <I2C_Slave_ISR_DMA+0x264>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d059      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a72      	ldr	r2, [pc, #456]	@ (800f0c8 <I2C_Slave_ISR_DMA+0x268>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d053      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4a70      	ldr	r2, [pc, #448]	@ (800f0cc <I2C_Slave_ISR_DMA+0x26c>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d04d      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a6e      	ldr	r2, [pc, #440]	@ (800f0d0 <I2C_Slave_ISR_DMA+0x270>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d047      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a6c      	ldr	r2, [pc, #432]	@ (800f0d4 <I2C_Slave_ISR_DMA+0x274>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d041      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a6a      	ldr	r2, [pc, #424]	@ (800f0d8 <I2C_Slave_ISR_DMA+0x278>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d03b      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a68      	ldr	r2, [pc, #416]	@ (800f0dc <I2C_Slave_ISR_DMA+0x27c>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d035      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a66      	ldr	r2, [pc, #408]	@ (800f0e0 <I2C_Slave_ISR_DMA+0x280>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d02f      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a64      	ldr	r2, [pc, #400]	@ (800f0e4 <I2C_Slave_ISR_DMA+0x284>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d029      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a62      	ldr	r2, [pc, #392]	@ (800f0e8 <I2C_Slave_ISR_DMA+0x288>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d023      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a60      	ldr	r2, [pc, #384]	@ (800f0ec <I2C_Slave_ISR_DMA+0x28c>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d01d      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a5e      	ldr	r2, [pc, #376]	@ (800f0f0 <I2C_Slave_ISR_DMA+0x290>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d017      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a5c      	ldr	r2, [pc, #368]	@ (800f0f4 <I2C_Slave_ISR_DMA+0x294>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d011      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a5a      	ldr	r2, [pc, #360]	@ (800f0f8 <I2C_Slave_ISR_DMA+0x298>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d00b      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a58      	ldr	r2, [pc, #352]	@ (800f0fc <I2C_Slave_ISR_DMA+0x29c>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d005      	beq.n	800efaa <I2C_Slave_ISR_DMA+0x14a>
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a56      	ldr	r2, [pc, #344]	@ (800f100 <I2C_Slave_ISR_DMA+0x2a0>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d109      	bne.n	800efbe <I2C_Slave_ISR_DMA+0x15e>
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	bf0c      	ite	eq
 800efb6:	2301      	moveq	r3, #1
 800efb8:	2300      	movne	r3, #0
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	e008      	b.n	800efd0 <I2C_Slave_ISR_DMA+0x170>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	bf0c      	ite	eq
 800efca:	2301      	moveq	r3, #1
 800efcc:	2300      	movne	r3, #0
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d001      	beq.n	800efd8 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800efd4:	2301      	movs	r3, #1
 800efd6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f000 809e 	beq.w	800f11e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f000 8098 	beq.w	800f11e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a33      	ldr	r2, [pc, #204]	@ (800f0c4 <I2C_Slave_ISR_DMA+0x264>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d059      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a31      	ldr	r2, [pc, #196]	@ (800f0c8 <I2C_Slave_ISR_DMA+0x268>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d053      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a2f      	ldr	r2, [pc, #188]	@ (800f0cc <I2C_Slave_ISR_DMA+0x26c>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d04d      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a2d      	ldr	r2, [pc, #180]	@ (800f0d0 <I2C_Slave_ISR_DMA+0x270>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d047      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a2b      	ldr	r2, [pc, #172]	@ (800f0d4 <I2C_Slave_ISR_DMA+0x274>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d041      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a29      	ldr	r2, [pc, #164]	@ (800f0d8 <I2C_Slave_ISR_DMA+0x278>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d03b      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a27      	ldr	r2, [pc, #156]	@ (800f0dc <I2C_Slave_ISR_DMA+0x27c>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d035      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a25      	ldr	r2, [pc, #148]	@ (800f0e0 <I2C_Slave_ISR_DMA+0x280>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d02f      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4a23      	ldr	r2, [pc, #140]	@ (800f0e4 <I2C_Slave_ISR_DMA+0x284>)
 800f056:	4293      	cmp	r3, r2
 800f058:	d029      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a21      	ldr	r2, [pc, #132]	@ (800f0e8 <I2C_Slave_ISR_DMA+0x288>)
 800f062:	4293      	cmp	r3, r2
 800f064:	d023      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a1f      	ldr	r2, [pc, #124]	@ (800f0ec <I2C_Slave_ISR_DMA+0x28c>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d01d      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4a1d      	ldr	r2, [pc, #116]	@ (800f0f0 <I2C_Slave_ISR_DMA+0x290>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d017      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a1b      	ldr	r2, [pc, #108]	@ (800f0f4 <I2C_Slave_ISR_DMA+0x294>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d011      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a19      	ldr	r2, [pc, #100]	@ (800f0f8 <I2C_Slave_ISR_DMA+0x298>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d00b      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a17      	ldr	r2, [pc, #92]	@ (800f0fc <I2C_Slave_ISR_DMA+0x29c>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d005      	beq.n	800f0ae <I2C_Slave_ISR_DMA+0x24e>
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4a15      	ldr	r2, [pc, #84]	@ (800f100 <I2C_Slave_ISR_DMA+0x2a0>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d12a      	bne.n	800f104 <I2C_Slave_ISR_DMA+0x2a4>
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	bf0c      	ite	eq
 800f0ba:	2301      	moveq	r3, #1
 800f0bc:	2300      	movne	r3, #0
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	e029      	b.n	800f116 <I2C_Slave_ISR_DMA+0x2b6>
 800f0c2:	bf00      	nop
 800f0c4:	40020010 	.word	0x40020010
 800f0c8:	40020028 	.word	0x40020028
 800f0cc:	40020040 	.word	0x40020040
 800f0d0:	40020058 	.word	0x40020058
 800f0d4:	40020070 	.word	0x40020070
 800f0d8:	40020088 	.word	0x40020088
 800f0dc:	400200a0 	.word	0x400200a0
 800f0e0:	400200b8 	.word	0x400200b8
 800f0e4:	40020410 	.word	0x40020410
 800f0e8:	40020428 	.word	0x40020428
 800f0ec:	40020440 	.word	0x40020440
 800f0f0:	40020458 	.word	0x40020458
 800f0f4:	40020470 	.word	0x40020470
 800f0f8:	40020488 	.word	0x40020488
 800f0fc:	400204a0 	.word	0x400204a0
 800f100:	400204b8 	.word	0x400204b8
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	bf0c      	ite	eq
 800f110:	2301      	moveq	r3, #1
 800f112:	2300      	movne	r3, #0
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b00      	cmp	r3, #0
 800f118:	d001      	beq.n	800f11e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800f11a:	2301      	movs	r3, #1
 800f11c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d128      	bne.n	800f176 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	2b28      	cmp	r3, #40	@ 0x28
 800f12e:	d108      	bne.n	800f142 <I2C_Slave_ISR_DMA+0x2e2>
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f136:	d104      	bne.n	800f142 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800f138:	68b9      	ldr	r1, [r7, #8]
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f000 fd4c 	bl	800fbd8 <I2C_ITListenCplt>
 800f140:	e048      	b.n	800f1d4 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	2b29      	cmp	r3, #41	@ 0x29
 800f14c:	d10e      	bne.n	800f16c <I2C_Slave_ISR_DMA+0x30c>
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f154:	d00a      	beq.n	800f16c <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2210      	movs	r2, #16
 800f15c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f000 fea5 	bl	800feae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f000 f9be 	bl	800f4e6 <I2C_ITSlaveSeqCplt>
 800f16a:	e033      	b.n	800f1d4 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2210      	movs	r2, #16
 800f172:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800f174:	e034      	b.n	800f1e0 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2210      	movs	r2, #16
 800f17c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f182:	f043 0204 	orr.w	r2, r3, #4
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f190:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d003      	beq.n	800f1a0 <I2C_Slave_ISR_DMA+0x340>
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f19e:	d11f      	bne.n	800f1e0 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f1a0:	7dfb      	ldrb	r3, [r7, #23]
 800f1a2:	2b21      	cmp	r3, #33	@ 0x21
 800f1a4:	d002      	beq.n	800f1ac <I2C_Slave_ISR_DMA+0x34c>
 800f1a6:	7dfb      	ldrb	r3, [r7, #23]
 800f1a8:	2b29      	cmp	r3, #41	@ 0x29
 800f1aa:	d103      	bne.n	800f1b4 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2221      	movs	r2, #33	@ 0x21
 800f1b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800f1b2:	e008      	b.n	800f1c6 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	2b22      	cmp	r3, #34	@ 0x22
 800f1b8:	d002      	beq.n	800f1c0 <I2C_Slave_ISR_DMA+0x360>
 800f1ba:	7dfb      	ldrb	r3, [r7, #23]
 800f1bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1be:	d102      	bne.n	800f1c6 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2222      	movs	r2, #34	@ 0x22
 800f1c4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f000 fd57 	bl	800fc80 <I2C_ITError>
      if (treatdmanack == 1U)
 800f1d2:	e005      	b.n	800f1e0 <I2C_Slave_ISR_DMA+0x380>
 800f1d4:	e004      	b.n	800f1e0 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2210      	movs	r2, #16
 800f1dc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f1de:	e00f      	b.n	800f200 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800f1e0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f1e2:	e00d      	b.n	800f200 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f003 0308 	and.w	r3, r3, #8
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d008      	beq.n	800f200 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d003      	beq.n	800f200 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800f1f8:	68b9      	ldr	r1, [r7, #8]
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f000 f8b2 	bl	800f364 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3720      	adds	r7, #32
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop

0800f214 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af02      	add	r7, sp, #8
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	4608      	mov	r0, r1
 800f21e:	4611      	mov	r1, r2
 800f220:	461a      	mov	r2, r3
 800f222:	4603      	mov	r3, r0
 800f224:	817b      	strh	r3, [r7, #10]
 800f226:	460b      	mov	r3, r1
 800f228:	813b      	strh	r3, [r7, #8]
 800f22a:	4613      	mov	r3, r2
 800f22c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f22e:	88fb      	ldrh	r3, [r7, #6]
 800f230:	b2da      	uxtb	r2, r3
 800f232:	8979      	ldrh	r1, [r7, #10]
 800f234:	4b20      	ldr	r3, [pc, #128]	@ (800f2b8 <I2C_RequestMemoryWrite+0xa4>)
 800f236:	9300      	str	r3, [sp, #0]
 800f238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f001 f83b 	bl	80102b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f242:	69fa      	ldr	r2, [r7, #28]
 800f244:	69b9      	ldr	r1, [r7, #24]
 800f246:	68f8      	ldr	r0, [r7, #12]
 800f248:	f000 fecc 	bl	800ffe4 <I2C_WaitOnTXISFlagUntilTimeout>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e02c      	b.n	800f2b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f256:	88fb      	ldrh	r3, [r7, #6]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d105      	bne.n	800f268 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f25c:	893b      	ldrh	r3, [r7, #8]
 800f25e:	b2da      	uxtb	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	629a      	str	r2, [r3, #40]	@ 0x28
 800f266:	e015      	b.n	800f294 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f268:	893b      	ldrh	r3, [r7, #8]
 800f26a:	0a1b      	lsrs	r3, r3, #8
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f276:	69fa      	ldr	r2, [r7, #28]
 800f278:	69b9      	ldr	r1, [r7, #24]
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f000 feb2 	bl	800ffe4 <I2C_WaitOnTXISFlagUntilTimeout>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d001      	beq.n	800f28a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	e012      	b.n	800f2b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f28a:	893b      	ldrh	r3, [r7, #8]
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	2200      	movs	r2, #0
 800f29c:	2180      	movs	r1, #128	@ 0x80
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	f000 fe47 	bl	800ff32 <I2C_WaitOnFlagUntilTimeout>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e000      	b.n	800f2b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	80002000 	.word	0x80002000

0800f2bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af02      	add	r7, sp, #8
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	817b      	strh	r3, [r7, #10]
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	813b      	strh	r3, [r7, #8]
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f2d6:	88fb      	ldrh	r3, [r7, #6]
 800f2d8:	b2da      	uxtb	r2, r3
 800f2da:	8979      	ldrh	r1, [r7, #10]
 800f2dc:	4b20      	ldr	r3, [pc, #128]	@ (800f360 <I2C_RequestMemoryRead+0xa4>)
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f000 ffe8 	bl	80102b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f2e8:	69fa      	ldr	r2, [r7, #28]
 800f2ea:	69b9      	ldr	r1, [r7, #24]
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 fe79 	bl	800ffe4 <I2C_WaitOnTXISFlagUntilTimeout>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d001      	beq.n	800f2fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e02c      	b.n	800f356 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f2fc:	88fb      	ldrh	r3, [r7, #6]
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d105      	bne.n	800f30e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f302:	893b      	ldrh	r3, [r7, #8]
 800f304:	b2da      	uxtb	r2, r3
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	629a      	str	r2, [r3, #40]	@ 0x28
 800f30c:	e015      	b.n	800f33a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f30e:	893b      	ldrh	r3, [r7, #8]
 800f310:	0a1b      	lsrs	r3, r3, #8
 800f312:	b29b      	uxth	r3, r3
 800f314:	b2da      	uxtb	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f31c:	69fa      	ldr	r2, [r7, #28]
 800f31e:	69b9      	ldr	r1, [r7, #24]
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f000 fe5f 	bl	800ffe4 <I2C_WaitOnTXISFlagUntilTimeout>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d001      	beq.n	800f330 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e012      	b.n	800f356 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f330:	893b      	ldrh	r3, [r7, #8]
 800f332:	b2da      	uxtb	r2, r3
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	2200      	movs	r2, #0
 800f342:	2140      	movs	r1, #64	@ 0x40
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f000 fdf4 	bl	800ff32 <I2C_WaitOnFlagUntilTimeout>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d001      	beq.n	800f354 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800f350:	2301      	movs	r3, #1
 800f352:	e000      	b.n	800f356 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	80002000 	.word	0x80002000

0800f364 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f374:	b2db      	uxtb	r3, r3
 800f376:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f37a:	2b28      	cmp	r3, #40	@ 0x28
 800f37c:	d16a      	bne.n	800f454 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	0c1b      	lsrs	r3, r3, #16
 800f386:	b2db      	uxtb	r3, r3
 800f388:	f003 0301 	and.w	r3, r3, #1
 800f38c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	0c1b      	lsrs	r3, r3, #16
 800f396:	b29b      	uxth	r3, r3
 800f398:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f39c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	689b      	ldr	r3, [r3, #8]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f3aa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f3b8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d138      	bne.n	800f434 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800f3c2:	897b      	ldrh	r3, [r7, #10]
 800f3c4:	09db      	lsrs	r3, r3, #7
 800f3c6:	b29a      	uxth	r2, r3
 800f3c8:	89bb      	ldrh	r3, [r7, #12]
 800f3ca:	4053      	eors	r3, r2
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	f003 0306 	and.w	r3, r3, #6
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d11c      	bne.n	800f410 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800f3d6:	897b      	ldrh	r3, [r7, #10]
 800f3d8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3de:	1c5a      	adds	r2, r3, #1
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3e8:	2b02      	cmp	r3, #2
 800f3ea:	d13b      	bne.n	800f464 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2208      	movs	r2, #8
 800f3f8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f402:	89ba      	ldrh	r2, [r7, #12]
 800f404:	7bfb      	ldrb	r3, [r7, #15]
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff f8cd 	bl	800e5a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f40e:	e029      	b.n	800f464 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800f410:	893b      	ldrh	r3, [r7, #8]
 800f412:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f414:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f001 f803 	bl	8010424 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f426:	89ba      	ldrh	r2, [r7, #12]
 800f428:	7bfb      	ldrb	r3, [r7, #15]
 800f42a:	4619      	mov	r1, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff f8bb 	bl	800e5a8 <HAL_I2C_AddrCallback>
}
 800f432:	e017      	b.n	800f464 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f434:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 fff3 	bl	8010424 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2200      	movs	r2, #0
 800f442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f446:	89ba      	ldrh	r2, [r7, #12]
 800f448:	7bfb      	ldrb	r3, [r7, #15]
 800f44a:	4619      	mov	r1, r3
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7ff f8ab 	bl	800e5a8 <HAL_I2C_AddrCallback>
}
 800f452:	e007      	b.n	800f464 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2208      	movs	r2, #8
 800f45a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800f464:	bf00      	nop
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f482:	b2db      	uxtb	r3, r3
 800f484:	2b21      	cmp	r3, #33	@ 0x21
 800f486:	d115      	bne.n	800f4b4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2220      	movs	r2, #32
 800f48c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2211      	movs	r2, #17
 800f494:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f49c:	2101      	movs	r1, #1
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 ffc0 	bl	8010424 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7ff f853 	bl	800e558 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f4b2:	e014      	b.n	800f4de <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2220      	movs	r2, #32
 800f4b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2212      	movs	r2, #18
 800f4c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f4c8:	2102      	movs	r1, #2
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 ffaa 	bl	8010424 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff f847 	bl	800e56c <HAL_I2C_MasterRxCpltCallback>
}
 800f4de:	bf00      	nop
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b084      	sub	sp, #16
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f504:	2b00      	cmp	r3, #0
 800f506:	d008      	beq.n	800f51a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	e00c      	b.n	800f534 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f520:	2b00      	cmp	r3, #0
 800f522:	d007      	beq.n	800f534 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f532:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	2b29      	cmp	r3, #41	@ 0x29
 800f53e:	d112      	bne.n	800f566 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2228      	movs	r2, #40	@ 0x28
 800f544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2221      	movs	r2, #33	@ 0x21
 800f54c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f54e:	2101      	movs	r1, #1
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 ff67 	bl	8010424 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7ff f80e 	bl	800e580 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f564:	e017      	b.n	800f596 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f570:	d111      	bne.n	800f596 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2228      	movs	r2, #40	@ 0x28
 800f576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2222      	movs	r2, #34	@ 0x22
 800f57e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f580:	2102      	movs	r1, #2
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 ff4e 	bl	8010424 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7fe ffff 	bl	800e594 <HAL_I2C_SlaveRxCpltCallback>
}
 800f596:	bf00      	nop
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
	...

0800f5a0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2220      	movs	r2, #32
 800f5b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b21      	cmp	r3, #33	@ 0x21
 800f5c0:	d107      	bne.n	800f5d2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f5c2:	2101      	movs	r1, #1
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 ff2d 	bl	8010424 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2211      	movs	r2, #17
 800f5ce:	631a      	str	r2, [r3, #48]	@ 0x30
 800f5d0:	e00c      	b.n	800f5ec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	2b22      	cmp	r3, #34	@ 0x22
 800f5dc:	d106      	bne.n	800f5ec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f5de:	2102      	movs	r1, #2
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 ff1f 	bl	8010424 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2212      	movs	r2, #18
 800f5ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	6859      	ldr	r1, [r3, #4]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	4b4c      	ldr	r3, [pc, #304]	@ (800f728 <I2C_ITMasterCplt+0x188>)
 800f5f8:	400b      	ands	r3, r1
 800f5fa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a49      	ldr	r2, [pc, #292]	@ (800f72c <I2C_ITMasterCplt+0x18c>)
 800f606:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	f003 0310 	and.w	r3, r3, #16
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d009      	beq.n	800f626 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2210      	movs	r2, #16
 800f618:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f61e:	f043 0204 	orr.w	r2, r3, #4
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	2b60      	cmp	r3, #96	@ 0x60
 800f630:	d10a      	bne.n	800f648 <I2C_ITMasterCplt+0xa8>
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	f003 0304 	and.w	r3, r3, #4
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d005      	beq.n	800f648 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f642:	b2db      	uxtb	r3, r3
 800f644:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800f646:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 fc30 	bl	800feae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f652:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b60      	cmp	r3, #96	@ 0x60
 800f65e:	d002      	beq.n	800f666 <I2C_ITMasterCplt+0xc6>
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d006      	beq.n	800f674 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f66a:	4619      	mov	r1, r3
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 fb07 	bl	800fc80 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f672:	e054      	b.n	800f71e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	2b21      	cmp	r3, #33	@ 0x21
 800f67e:	d124      	bne.n	800f6ca <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2220      	movs	r2, #32
 800f684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f694:	b2db      	uxtb	r3, r3
 800f696:	2b40      	cmp	r3, #64	@ 0x40
 800f698:	d10b      	bne.n	800f6b2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2200      	movs	r2, #0
 800f69e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7f6 fc30 	bl	8005f10 <HAL_I2C_MemTxCpltCallback>
}
 800f6b0:	e035      	b.n	800f71e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7fe ff48 	bl	800e558 <HAL_I2C_MasterTxCpltCallback>
}
 800f6c8:	e029      	b.n	800f71e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	2b22      	cmp	r3, #34	@ 0x22
 800f6d4:	d123      	bne.n	800f71e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2220      	movs	r2, #32
 800f6da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	2b40      	cmp	r3, #64	@ 0x40
 800f6ee:	d10b      	bne.n	800f708 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7f6 fc31 	bl	8005f68 <HAL_I2C_MemRxCpltCallback>
}
 800f706:	e00a      	b.n	800f71e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2200      	movs	r2, #0
 800f714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7fe ff27 	bl	800e56c <HAL_I2C_MasterRxCpltCallback>
}
 800f71e:	bf00      	nop
 800f720:	3718      	adds	r7, #24
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	fe00e800 	.word	0xfe00e800
 800f72c:	ffff0000 	.word	0xffff0000

0800f730 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b086      	sub	sp, #24
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f74a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f752:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2220      	movs	r2, #32
 800f75a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f75c:	7afb      	ldrb	r3, [r7, #11]
 800f75e:	2b21      	cmp	r3, #33	@ 0x21
 800f760:	d002      	beq.n	800f768 <I2C_ITSlaveCplt+0x38>
 800f762:	7afb      	ldrb	r3, [r7, #11]
 800f764:	2b29      	cmp	r3, #41	@ 0x29
 800f766:	d108      	bne.n	800f77a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800f768:	f248 0101 	movw	r1, #32769	@ 0x8001
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 fe59 	bl	8010424 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2221      	movs	r2, #33	@ 0x21
 800f776:	631a      	str	r2, [r3, #48]	@ 0x30
 800f778:	e019      	b.n	800f7ae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f77a:	7afb      	ldrb	r3, [r7, #11]
 800f77c:	2b22      	cmp	r3, #34	@ 0x22
 800f77e:	d002      	beq.n	800f786 <I2C_ITSlaveCplt+0x56>
 800f780:	7afb      	ldrb	r3, [r7, #11]
 800f782:	2b2a      	cmp	r3, #42	@ 0x2a
 800f784:	d108      	bne.n	800f798 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800f786:	f248 0102 	movw	r1, #32770	@ 0x8002
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 fe4a 	bl	8010424 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2222      	movs	r2, #34	@ 0x22
 800f794:	631a      	str	r2, [r3, #48]	@ 0x30
 800f796:	e00a      	b.n	800f7ae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800f798:	7afb      	ldrb	r3, [r7, #11]
 800f79a:	2b28      	cmp	r3, #40	@ 0x28
 800f79c:	d107      	bne.n	800f7ae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800f79e:	f248 0103 	movw	r1, #32771	@ 0x8003
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 fe3e 	bl	8010424 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	685a      	ldr	r2, [r3, #4]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f7bc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	6859      	ldr	r1, [r3, #4]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	4b7f      	ldr	r3, [pc, #508]	@ (800f9c8 <I2C_ITSlaveCplt+0x298>)
 800f7ca:	400b      	ands	r3, r1
 800f7cc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 fb6d 	bl	800feae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d07a      	beq.n	800f8d4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f7ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f000 8111 	beq.w	800fa1a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a73      	ldr	r2, [pc, #460]	@ (800f9cc <I2C_ITSlaveCplt+0x29c>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d059      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a71      	ldr	r2, [pc, #452]	@ (800f9d0 <I2C_ITSlaveCplt+0x2a0>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d053      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	4a6f      	ldr	r2, [pc, #444]	@ (800f9d4 <I2C_ITSlaveCplt+0x2a4>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d04d      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a6d      	ldr	r2, [pc, #436]	@ (800f9d8 <I2C_ITSlaveCplt+0x2a8>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d047      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a6b      	ldr	r2, [pc, #428]	@ (800f9dc <I2C_ITSlaveCplt+0x2ac>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d041      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a69      	ldr	r2, [pc, #420]	@ (800f9e0 <I2C_ITSlaveCplt+0x2b0>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d03b      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a67      	ldr	r2, [pc, #412]	@ (800f9e4 <I2C_ITSlaveCplt+0x2b4>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d035      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a65      	ldr	r2, [pc, #404]	@ (800f9e8 <I2C_ITSlaveCplt+0x2b8>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d02f      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	4a63      	ldr	r2, [pc, #396]	@ (800f9ec <I2C_ITSlaveCplt+0x2bc>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d029      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a61      	ldr	r2, [pc, #388]	@ (800f9f0 <I2C_ITSlaveCplt+0x2c0>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d023      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4a5f      	ldr	r2, [pc, #380]	@ (800f9f4 <I2C_ITSlaveCplt+0x2c4>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d01d      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a5d      	ldr	r2, [pc, #372]	@ (800f9f8 <I2C_ITSlaveCplt+0x2c8>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d017      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	4a5b      	ldr	r2, [pc, #364]	@ (800f9fc <I2C_ITSlaveCplt+0x2cc>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d011      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a59      	ldr	r2, [pc, #356]	@ (800fa00 <I2C_ITSlaveCplt+0x2d0>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d00b      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4a57      	ldr	r2, [pc, #348]	@ (800fa04 <I2C_ITSlaveCplt+0x2d4>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d005      	beq.n	800f8b8 <I2C_ITSlaveCplt+0x188>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	4a55      	ldr	r2, [pc, #340]	@ (800fa08 <I2C_ITSlaveCplt+0x2d8>)
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d105      	bne.n	800f8c4 <I2C_ITSlaveCplt+0x194>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	e004      	b.n	800f8ce <I2C_ITSlaveCplt+0x19e>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800f8d2:	e0a2      	b.n	800fa1a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f000 809d 	beq.w	800fa1a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f8ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f000 8090 	beq.w	800fa1a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4a32      	ldr	r2, [pc, #200]	@ (800f9cc <I2C_ITSlaveCplt+0x29c>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d059      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a30      	ldr	r2, [pc, #192]	@ (800f9d0 <I2C_ITSlaveCplt+0x2a0>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d053      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a2e      	ldr	r2, [pc, #184]	@ (800f9d4 <I2C_ITSlaveCplt+0x2a4>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d04d      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a2c      	ldr	r2, [pc, #176]	@ (800f9d8 <I2C_ITSlaveCplt+0x2a8>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d047      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a2a      	ldr	r2, [pc, #168]	@ (800f9dc <I2C_ITSlaveCplt+0x2ac>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d041      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a28      	ldr	r2, [pc, #160]	@ (800f9e0 <I2C_ITSlaveCplt+0x2b0>)
 800f93e:	4293      	cmp	r3, r2
 800f940:	d03b      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a26      	ldr	r2, [pc, #152]	@ (800f9e4 <I2C_ITSlaveCplt+0x2b4>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d035      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4a24      	ldr	r2, [pc, #144]	@ (800f9e8 <I2C_ITSlaveCplt+0x2b8>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d02f      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4a22      	ldr	r2, [pc, #136]	@ (800f9ec <I2C_ITSlaveCplt+0x2bc>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d029      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a20      	ldr	r2, [pc, #128]	@ (800f9f0 <I2C_ITSlaveCplt+0x2c0>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d023      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4a1e      	ldr	r2, [pc, #120]	@ (800f9f4 <I2C_ITSlaveCplt+0x2c4>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d01d      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a1c      	ldr	r2, [pc, #112]	@ (800f9f8 <I2C_ITSlaveCplt+0x2c8>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d017      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a1a      	ldr	r2, [pc, #104]	@ (800f9fc <I2C_ITSlaveCplt+0x2cc>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d011      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a18      	ldr	r2, [pc, #96]	@ (800fa00 <I2C_ITSlaveCplt+0x2d0>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d00b      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a16      	ldr	r2, [pc, #88]	@ (800fa04 <I2C_ITSlaveCplt+0x2d4>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d005      	beq.n	800f9ba <I2C_ITSlaveCplt+0x28a>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4a14      	ldr	r2, [pc, #80]	@ (800fa08 <I2C_ITSlaveCplt+0x2d8>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d128      	bne.n	800fa0c <I2C_ITSlaveCplt+0x2dc>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	e027      	b.n	800fa16 <I2C_ITSlaveCplt+0x2e6>
 800f9c6:	bf00      	nop
 800f9c8:	fe00e800 	.word	0xfe00e800
 800f9cc:	40020010 	.word	0x40020010
 800f9d0:	40020028 	.word	0x40020028
 800f9d4:	40020040 	.word	0x40020040
 800f9d8:	40020058 	.word	0x40020058
 800f9dc:	40020070 	.word	0x40020070
 800f9e0:	40020088 	.word	0x40020088
 800f9e4:	400200a0 	.word	0x400200a0
 800f9e8:	400200b8 	.word	0x400200b8
 800f9ec:	40020410 	.word	0x40020410
 800f9f0:	40020428 	.word	0x40020428
 800f9f4:	40020440 	.word	0x40020440
 800f9f8:	40020458 	.word	0x40020458
 800f9fc:	40020470 	.word	0x40020470
 800fa00:	40020488 	.word	0x40020488
 800fa04:	400204a0 	.word	0x400204a0
 800fa08:	400204b8 	.word	0x400204b8
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	f003 0304 	and.w	r3, r3, #4
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d020      	beq.n	800fa66 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	f023 0304 	bic.w	r3, r3, #4
 800fa2a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa36:	b2d2      	uxtb	r2, r2
 800fa38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa3e:	1c5a      	adds	r2, r3, #1
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d00c      	beq.n	800fa66 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa50:	3b01      	subs	r3, #1
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d005      	beq.n	800fa7c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa74:	f043 0204 	orr.w	r2, r3, #4
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	f003 0310 	and.w	r3, r3, #16
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d049      	beq.n	800fb1a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d044      	beq.n	800fb1a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d128      	bne.n	800faec <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	2b28      	cmp	r3, #40	@ 0x28
 800faa4:	d108      	bne.n	800fab8 <I2C_ITSlaveCplt+0x388>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800faac:	d104      	bne.n	800fab8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800faae:	6979      	ldr	r1, [r7, #20]
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 f891 	bl	800fbd8 <I2C_ITListenCplt>
 800fab6:	e030      	b.n	800fb1a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b29      	cmp	r3, #41	@ 0x29
 800fac2:	d10e      	bne.n	800fae2 <I2C_ITSlaveCplt+0x3b2>
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800faca:	d00a      	beq.n	800fae2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2210      	movs	r2, #16
 800fad2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 f9ea 	bl	800feae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f7ff fd03 	bl	800f4e6 <I2C_ITSlaveSeqCplt>
 800fae0:	e01b      	b.n	800fb1a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2210      	movs	r2, #16
 800fae8:	61da      	str	r2, [r3, #28]
 800faea:	e016      	b.n	800fb1a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2210      	movs	r2, #16
 800faf2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faf8:	f043 0204 	orr.w	r2, r3, #4
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d003      	beq.n	800fb0e <I2C_ITSlaveCplt+0x3de>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fb0c:	d105      	bne.n	800fb1a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb12:	4619      	mov	r1, r3
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 f8b3 	bl	800fc80 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2200      	movs	r2, #0
 800fb26:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d010      	beq.n	800fb52 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb34:	4619      	mov	r1, r3
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 f8a2 	bl	800fc80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b28      	cmp	r3, #40	@ 0x28
 800fb46:	d141      	bne.n	800fbcc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800fb48:	6979      	ldr	r1, [r7, #20]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f844 	bl	800fbd8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fb50:	e03c      	b.n	800fbcc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fb5a:	d014      	beq.n	800fb86 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7ff fcc2 	bl	800f4e6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a1b      	ldr	r2, [pc, #108]	@ (800fbd4 <I2C_ITSlaveCplt+0x4a4>)
 800fb66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7fe fd20 	bl	800e5c4 <HAL_I2C_ListenCpltCallback>
}
 800fb84:	e022      	b.n	800fbcc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	2b22      	cmp	r3, #34	@ 0x22
 800fb90:	d10e      	bne.n	800fbb0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2220      	movs	r2, #32
 800fb96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7fe fcf3 	bl	800e594 <HAL_I2C_SlaveRxCpltCallback>
}
 800fbae:	e00d      	b.n	800fbcc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2220      	movs	r2, #32
 800fbb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7fe fcda 	bl	800e580 <HAL_I2C_SlaveTxCpltCallback>
}
 800fbcc:	bf00      	nop
 800fbce:	3718      	adds	r7, #24
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	ffff0000 	.word	0xffff0000

0800fbd8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a25      	ldr	r2, [pc, #148]	@ (800fc7c <I2C_ITListenCplt+0xa4>)
 800fbe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2200      	movs	r2, #0
 800fbec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2220      	movs	r2, #32
 800fbf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	f003 0304 	and.w	r3, r3, #4
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d022      	beq.n	800fc54 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc18:	b2d2      	uxtb	r2, r2
 800fc1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc20:	1c5a      	adds	r2, r3, #1
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d012      	beq.n	800fc54 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc32:	3b01      	subs	r3, #1
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	3b01      	subs	r3, #1
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc4c:	f043 0204 	orr.w	r2, r3, #4
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fc54:	f248 0103 	movw	r1, #32771	@ 0x8003
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f000 fbe3 	bl	8010424 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2210      	movs	r2, #16
 800fc64:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7fe fca8 	bl	800e5c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800fc74:	bf00      	nop
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	ffff0000 	.word	0xffff0000

0800fc80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc90:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4a6d      	ldr	r2, [pc, #436]	@ (800fe54 <I2C_ITError+0x1d4>)
 800fc9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	431a      	orrs	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800fcb2:	7bfb      	ldrb	r3, [r7, #15]
 800fcb4:	2b28      	cmp	r3, #40	@ 0x28
 800fcb6:	d005      	beq.n	800fcc4 <I2C_ITError+0x44>
 800fcb8:	7bfb      	ldrb	r3, [r7, #15]
 800fcba:	2b29      	cmp	r3, #41	@ 0x29
 800fcbc:	d002      	beq.n	800fcc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800fcbe:	7bfb      	ldrb	r3, [r7, #15]
 800fcc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcc2:	d10b      	bne.n	800fcdc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fcc4:	2103      	movs	r1, #3
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 fbac 	bl	8010424 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2228      	movs	r2, #40	@ 0x28
 800fcd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4a60      	ldr	r2, [pc, #384]	@ (800fe58 <I2C_ITError+0x1d8>)
 800fcd8:	635a      	str	r2, [r3, #52]	@ 0x34
 800fcda:	e030      	b.n	800fd3e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fcdc:	f248 0103 	movw	r1, #32771	@ 0x8003
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 fb9f 	bl	8010424 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 f8e1 	bl	800feae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	2b60      	cmp	r3, #96	@ 0x60
 800fcf6:	d01f      	beq.n	800fd38 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	699b      	ldr	r3, [r3, #24]
 800fd06:	f003 0320 	and.w	r3, r3, #32
 800fd0a:	2b20      	cmp	r3, #32
 800fd0c:	d114      	bne.n	800fd38 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	f003 0310 	and.w	r3, r3, #16
 800fd18:	2b10      	cmp	r3, #16
 800fd1a:	d109      	bne.n	800fd30 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2210      	movs	r2, #16
 800fd22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd28:	f043 0204 	orr.w	r2, r3, #4
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2220      	movs	r2, #32
 800fd36:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d039      	beq.n	800fdc0 <I2C_ITError+0x140>
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	2b11      	cmp	r3, #17
 800fd50:	d002      	beq.n	800fd58 <I2C_ITError+0xd8>
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	2b21      	cmp	r3, #33	@ 0x21
 800fd56:	d133      	bne.n	800fdc0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fd62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd66:	d107      	bne.n	800fd78 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fd76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fd fa01 	bl	800d184 <HAL_DMA_GetState>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d017      	beq.n	800fdb8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd8c:	4a33      	ldr	r2, [pc, #204]	@ (800fe5c <I2C_ITError+0x1dc>)
 800fd8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2200      	movs	r2, #0
 800fd94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7fc f881 	bl	800bea4 <HAL_DMA_Abort_IT>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d04d      	beq.n	800fe44 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fdb6:	e045      	b.n	800fe44 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 f851 	bl	800fe60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fdbe:	e041      	b.n	800fe44 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d039      	beq.n	800fe3c <I2C_ITError+0x1bc>
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	2b12      	cmp	r3, #18
 800fdcc:	d002      	beq.n	800fdd4 <I2C_ITError+0x154>
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b22      	cmp	r3, #34	@ 0x22
 800fdd2:	d133      	bne.n	800fe3c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fdde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fde2:	d107      	bne.n	800fdf4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fdf2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fd f9c3 	bl	800d184 <HAL_DMA_GetState>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d017      	beq.n	800fe34 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe08:	4a14      	ldr	r2, [pc, #80]	@ (800fe5c <I2C_ITError+0x1dc>)
 800fe0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fc f843 	bl	800bea4 <HAL_DMA_Abort_IT>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d011      	beq.n	800fe48 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fe2e:	4610      	mov	r0, r2
 800fe30:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fe32:	e009      	b.n	800fe48 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 f813 	bl	800fe60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fe3a:	e005      	b.n	800fe48 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 f80f 	bl	800fe60 <I2C_TreatErrorCallback>
  }
}
 800fe42:	e002      	b.n	800fe4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fe44:	bf00      	nop
 800fe46:	e000      	b.n	800fe4a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fe48:	bf00      	nop
}
 800fe4a:	bf00      	nop
 800fe4c:	3710      	adds	r7, #16
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop
 800fe54:	ffff0000 	.word	0xffff0000
 800fe58:	0800e84d 	.word	0x0800e84d
 800fe5c:	0800fef7 	.word	0x0800fef7

0800fe60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	2b60      	cmp	r3, #96	@ 0x60
 800fe72:	d10e      	bne.n	800fe92 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2220      	movs	r2, #32
 800fe78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7fe fbae 	bl	800e5ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fe90:	e009      	b.n	800fea6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2200      	movs	r2, #0
 800fe96:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7fe fb99 	bl	800e5d8 <HAL_I2C_ErrorCallback>
}
 800fea6:	bf00      	nop
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}

0800feae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800feae:	b480      	push	{r7}
 800feb0:	b083      	sub	sp, #12
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	699b      	ldr	r3, [r3, #24]
 800febc:	f003 0302 	and.w	r3, r3, #2
 800fec0:	2b02      	cmp	r3, #2
 800fec2:	d103      	bne.n	800fecc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2200      	movs	r2, #0
 800feca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	699b      	ldr	r3, [r3, #24]
 800fed2:	f003 0301 	and.w	r3, r3, #1
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d007      	beq.n	800feea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	699a      	ldr	r2, [r3, #24]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	f042 0201 	orr.w	r2, r2, #1
 800fee8:	619a      	str	r2, [r3, #24]
  }
}
 800feea:	bf00      	nop
 800feec:	370c      	adds	r7, #12
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr

0800fef6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b084      	sub	sp, #16
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d003      	beq.n	800ff14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff10:	2200      	movs	r2, #0
 800ff12:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d003      	beq.n	800ff24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff20:	2200      	movs	r2, #0
 800ff22:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	f7ff ff9b 	bl	800fe60 <I2C_TreatErrorCallback>
}
 800ff2a:	bf00      	nop
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b084      	sub	sp, #16
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	60f8      	str	r0, [r7, #12]
 800ff3a:	60b9      	str	r1, [r7, #8]
 800ff3c:	603b      	str	r3, [r7, #0]
 800ff3e:	4613      	mov	r3, r2
 800ff40:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ff42:	e03b      	b.n	800ffbc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ff44:	69ba      	ldr	r2, [r7, #24]
 800ff46:	6839      	ldr	r1, [r7, #0]
 800ff48:	68f8      	ldr	r0, [r7, #12]
 800ff4a:	f000 f8d5 	bl	80100f8 <I2C_IsErrorOccurred>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d001      	beq.n	800ff58 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ff54:	2301      	movs	r3, #1
 800ff56:	e041      	b.n	800ffdc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff5e:	d02d      	beq.n	800ffbc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff60:	f7f8 fd8a 	bl	8008a78 <HAL_GetTick>
 800ff64:	4602      	mov	r2, r0
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d302      	bcc.n	800ff76 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d122      	bne.n	800ffbc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	699a      	ldr	r2, [r3, #24]
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	4013      	ands	r3, r2
 800ff80:	68ba      	ldr	r2, [r7, #8]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	bf0c      	ite	eq
 800ff86:	2301      	moveq	r3, #1
 800ff88:	2300      	movne	r3, #0
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	79fb      	ldrb	r3, [r7, #7]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d113      	bne.n	800ffbc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff98:	f043 0220 	orr.w	r2, r3, #32
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2220      	movs	r2, #32
 800ffa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e00f      	b.n	800ffdc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	699a      	ldr	r2, [r3, #24]
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	4013      	ands	r3, r2
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	bf0c      	ite	eq
 800ffcc:	2301      	moveq	r3, #1
 800ffce:	2300      	movne	r3, #0
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	79fb      	ldrb	r3, [r7, #7]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d0b4      	beq.n	800ff44 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fff0:	e033      	b.n	801005a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	68b9      	ldr	r1, [r7, #8]
 800fff6:	68f8      	ldr	r0, [r7, #12]
 800fff8:	f000 f87e 	bl	80100f8 <I2C_IsErrorOccurred>
 800fffc:	4603      	mov	r3, r0
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d001      	beq.n	8010006 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010002:	2301      	movs	r3, #1
 8010004:	e031      	b.n	801006a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000c:	d025      	beq.n	801005a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801000e:	f7f8 fd33 	bl	8008a78 <HAL_GetTick>
 8010012:	4602      	mov	r2, r0
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	68ba      	ldr	r2, [r7, #8]
 801001a:	429a      	cmp	r2, r3
 801001c:	d302      	bcc.n	8010024 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d11a      	bne.n	801005a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	699b      	ldr	r3, [r3, #24]
 801002a:	f003 0302 	and.w	r3, r3, #2
 801002e:	2b02      	cmp	r3, #2
 8010030:	d013      	beq.n	801005a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010036:	f043 0220 	orr.w	r2, r3, #32
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2220      	movs	r2, #32
 8010042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2200      	movs	r2, #0
 801004a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2200      	movs	r2, #0
 8010052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010056:	2301      	movs	r3, #1
 8010058:	e007      	b.n	801006a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	699b      	ldr	r3, [r3, #24]
 8010060:	f003 0302 	and.w	r3, r3, #2
 8010064:	2b02      	cmp	r3, #2
 8010066:	d1c4      	bne.n	800fff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010068:	2300      	movs	r3, #0
}
 801006a:	4618      	mov	r0, r3
 801006c:	3710      	adds	r7, #16
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b084      	sub	sp, #16
 8010076:	af00      	add	r7, sp, #0
 8010078:	60f8      	str	r0, [r7, #12]
 801007a:	60b9      	str	r1, [r7, #8]
 801007c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801007e:	e02f      	b.n	80100e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	68b9      	ldr	r1, [r7, #8]
 8010084:	68f8      	ldr	r0, [r7, #12]
 8010086:	f000 f837 	bl	80100f8 <I2C_IsErrorOccurred>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d001      	beq.n	8010094 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e02d      	b.n	80100f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010094:	f7f8 fcf0 	bl	8008a78 <HAL_GetTick>
 8010098:	4602      	mov	r2, r0
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	1ad3      	subs	r3, r2, r3
 801009e:	68ba      	ldr	r2, [r7, #8]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d302      	bcc.n	80100aa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d11a      	bne.n	80100e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	699b      	ldr	r3, [r3, #24]
 80100b0:	f003 0320 	and.w	r3, r3, #32
 80100b4:	2b20      	cmp	r3, #32
 80100b6:	d013      	beq.n	80100e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100bc:	f043 0220 	orr.w	r2, r3, #32
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2220      	movs	r2, #32
 80100c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2200      	movs	r2, #0
 80100d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80100dc:	2301      	movs	r3, #1
 80100de:	e007      	b.n	80100f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	699b      	ldr	r3, [r3, #24]
 80100e6:	f003 0320 	and.w	r3, r3, #32
 80100ea:	2b20      	cmp	r3, #32
 80100ec:	d1c8      	bne.n	8010080 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80100ee:	2300      	movs	r3, #0
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3710      	adds	r7, #16
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b08a      	sub	sp, #40	@ 0x28
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010104:	2300      	movs	r3, #0
 8010106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	699b      	ldr	r3, [r3, #24]
 8010110:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	f003 0310 	and.w	r3, r3, #16
 8010120:	2b00      	cmp	r3, #0
 8010122:	d068      	beq.n	80101f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2210      	movs	r2, #16
 801012a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801012c:	e049      	b.n	80101c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010134:	d045      	beq.n	80101c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010136:	f7f8 fc9f 	bl	8008a78 <HAL_GetTick>
 801013a:	4602      	mov	r2, r0
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	429a      	cmp	r2, r3
 8010144:	d302      	bcc.n	801014c <I2C_IsErrorOccurred+0x54>
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d13a      	bne.n	80101c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010156:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801015e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	699b      	ldr	r3, [r3, #24]
 8010166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801016a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801016e:	d121      	bne.n	80101b4 <I2C_IsErrorOccurred+0xbc>
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010176:	d01d      	beq.n	80101b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010178:	7cfb      	ldrb	r3, [r7, #19]
 801017a:	2b20      	cmp	r3, #32
 801017c:	d01a      	beq.n	80101b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	685a      	ldr	r2, [r3, #4]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801018c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801018e:	f7f8 fc73 	bl	8008a78 <HAL_GetTick>
 8010192:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010194:	e00e      	b.n	80101b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010196:	f7f8 fc6f 	bl	8008a78 <HAL_GetTick>
 801019a:	4602      	mov	r2, r0
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	2b19      	cmp	r3, #25
 80101a2:	d907      	bls.n	80101b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80101a4:	6a3b      	ldr	r3, [r7, #32]
 80101a6:	f043 0320 	orr.w	r3, r3, #32
 80101aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80101ac:	2301      	movs	r3, #1
 80101ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80101b2:	e006      	b.n	80101c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	f003 0320 	and.w	r3, r3, #32
 80101be:	2b20      	cmp	r3, #32
 80101c0:	d1e9      	bne.n	8010196 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	699b      	ldr	r3, [r3, #24]
 80101c8:	f003 0320 	and.w	r3, r3, #32
 80101cc:	2b20      	cmp	r3, #32
 80101ce:	d003      	beq.n	80101d8 <I2C_IsErrorOccurred+0xe0>
 80101d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d0aa      	beq.n	801012e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80101d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d103      	bne.n	80101e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2220      	movs	r2, #32
 80101e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80101e8:	6a3b      	ldr	r3, [r7, #32]
 80101ea:	f043 0304 	orr.w	r3, r3, #4
 80101ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80101f0:	2301      	movs	r3, #1
 80101f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	699b      	ldr	r3, [r3, #24]
 80101fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80101fe:	69bb      	ldr	r3, [r7, #24]
 8010200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00b      	beq.n	8010220 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010208:	6a3b      	ldr	r3, [r7, #32]
 801020a:	f043 0301 	orr.w	r3, r3, #1
 801020e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801021a:	2301      	movs	r3, #1
 801021c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010226:	2b00      	cmp	r3, #0
 8010228:	d00b      	beq.n	8010242 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801022a:	6a3b      	ldr	r3, [r7, #32]
 801022c:	f043 0308 	orr.w	r3, r3, #8
 8010230:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801023a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801023c:	2301      	movs	r3, #1
 801023e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00b      	beq.n	8010264 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801024c:	6a3b      	ldr	r3, [r7, #32]
 801024e:	f043 0302 	orr.w	r3, r3, #2
 8010252:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801025c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801025e:	2301      	movs	r3, #1
 8010260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010268:	2b00      	cmp	r3, #0
 801026a:	d01c      	beq.n	80102a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f7ff fe1e 	bl	800feae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	6859      	ldr	r1, [r3, #4]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	4b0d      	ldr	r3, [pc, #52]	@ (80102b4 <I2C_IsErrorOccurred+0x1bc>)
 801027e:	400b      	ands	r3, r1
 8010280:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010286:	6a3b      	ldr	r3, [r7, #32]
 8010288:	431a      	orrs	r2, r3
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2220      	movs	r2, #32
 8010292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2200      	movs	r2, #0
 801029a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2200      	movs	r2, #0
 80102a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80102a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3728      	adds	r7, #40	@ 0x28
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
 80102b2:	bf00      	nop
 80102b4:	fe00e800 	.word	0xfe00e800

080102b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b087      	sub	sp, #28
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	607b      	str	r3, [r7, #4]
 80102c2:	460b      	mov	r3, r1
 80102c4:	817b      	strh	r3, [r7, #10]
 80102c6:	4613      	mov	r3, r2
 80102c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80102ca:	897b      	ldrh	r3, [r7, #10]
 80102cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80102d0:	7a7b      	ldrb	r3, [r7, #9]
 80102d2:	041b      	lsls	r3, r3, #16
 80102d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80102d8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	4313      	orrs	r3, r2
 80102e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102e6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	685a      	ldr	r2, [r3, #4]
 80102ee:	6a3b      	ldr	r3, [r7, #32]
 80102f0:	0d5b      	lsrs	r3, r3, #21
 80102f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80102f6:	4b08      	ldr	r3, [pc, #32]	@ (8010318 <I2C_TransferConfig+0x60>)
 80102f8:	430b      	orrs	r3, r1
 80102fa:	43db      	mvns	r3, r3
 80102fc:	ea02 0103 	and.w	r1, r2, r3
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	697a      	ldr	r2, [r7, #20]
 8010306:	430a      	orrs	r2, r1
 8010308:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801030a:	bf00      	nop
 801030c:	371c      	adds	r7, #28
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop
 8010318:	03ff63ff 	.word	0x03ff63ff

0801031c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	460b      	mov	r3, r1
 8010326:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010328:	2300      	movs	r3, #0
 801032a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010330:	4a39      	ldr	r2, [pc, #228]	@ (8010418 <I2C_Enable_IRQ+0xfc>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d032      	beq.n	801039c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801033a:	4a38      	ldr	r2, [pc, #224]	@ (801041c <I2C_Enable_IRQ+0x100>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d02d      	beq.n	801039c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010344:	4a36      	ldr	r2, [pc, #216]	@ (8010420 <I2C_Enable_IRQ+0x104>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d028      	beq.n	801039c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801034a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801034e:	2b00      	cmp	r3, #0
 8010350:	da03      	bge.n	801035a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010358:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801035a:	887b      	ldrh	r3, [r7, #2]
 801035c:	f003 0301 	and.w	r3, r3, #1
 8010360:	2b00      	cmp	r3, #0
 8010362:	d003      	beq.n	801036c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 801036a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801036c:	887b      	ldrh	r3, [r7, #2]
 801036e:	f003 0302 	and.w	r3, r3, #2
 8010372:	2b00      	cmp	r3, #0
 8010374:	d003      	beq.n	801037e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 801037c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801037e:	887b      	ldrh	r3, [r7, #2]
 8010380:	2b10      	cmp	r3, #16
 8010382:	d103      	bne.n	801038c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 801038a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801038c:	887b      	ldrh	r3, [r7, #2]
 801038e:	2b20      	cmp	r3, #32
 8010390:	d133      	bne.n	80103fa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f043 0320 	orr.w	r3, r3, #32
 8010398:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801039a:	e02e      	b.n	80103fa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801039c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	da03      	bge.n	80103ac <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80103aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80103ac:	887b      	ldrh	r3, [r7, #2]
 80103ae:	f003 0301 	and.w	r3, r3, #1
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d003      	beq.n	80103be <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80103bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80103be:	887b      	ldrh	r3, [r7, #2]
 80103c0:	f003 0302 	and.w	r3, r3, #2
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d003      	beq.n	80103d0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80103ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80103d0:	887b      	ldrh	r3, [r7, #2]
 80103d2:	2b10      	cmp	r3, #16
 80103d4:	d103      	bne.n	80103de <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80103dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80103de:	887b      	ldrh	r3, [r7, #2]
 80103e0:	2b20      	cmp	r3, #32
 80103e2:	d103      	bne.n	80103ec <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80103ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80103ec:	887b      	ldrh	r3, [r7, #2]
 80103ee:	2b40      	cmp	r3, #64	@ 0x40
 80103f0:	d103      	bne.n	80103fa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103f8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	6819      	ldr	r1, [r3, #0]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	430a      	orrs	r2, r1
 8010408:	601a      	str	r2, [r3, #0]
}
 801040a:	bf00      	nop
 801040c:	3714      	adds	r7, #20
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr
 8010416:	bf00      	nop
 8010418:	0800ea3f 	.word	0x0800ea3f
 801041c:	0800ee61 	.word	0x0800ee61
 8010420:	0800ec15 	.word	0x0800ec15

08010424 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	460b      	mov	r3, r1
 801042e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010430:	2300      	movs	r3, #0
 8010432:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010434:	887b      	ldrh	r3, [r7, #2]
 8010436:	f003 0301 	and.w	r3, r3, #1
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00f      	beq.n	801045e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010444:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801044c:	b2db      	uxtb	r3, r3
 801044e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010452:	2b28      	cmp	r3, #40	@ 0x28
 8010454:	d003      	beq.n	801045e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 801045c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801045e:	887b      	ldrh	r3, [r7, #2]
 8010460:	f003 0302 	and.w	r3, r3, #2
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00f      	beq.n	8010488 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 801046e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010476:	b2db      	uxtb	r3, r3
 8010478:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801047c:	2b28      	cmp	r3, #40	@ 0x28
 801047e:	d003      	beq.n	8010488 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010486:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010488:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801048c:	2b00      	cmp	r3, #0
 801048e:	da03      	bge.n	8010498 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010496:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010498:	887b      	ldrh	r3, [r7, #2]
 801049a:	2b10      	cmp	r3, #16
 801049c:	d103      	bne.n	80104a6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80104a4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80104a6:	887b      	ldrh	r3, [r7, #2]
 80104a8:	2b20      	cmp	r3, #32
 80104aa:	d103      	bne.n	80104b4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f043 0320 	orr.w	r3, r3, #32
 80104b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80104b4:	887b      	ldrh	r3, [r7, #2]
 80104b6:	2b40      	cmp	r3, #64	@ 0x40
 80104b8:	d103      	bne.n	80104c2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104c0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	6819      	ldr	r1, [r3, #0]
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	43da      	mvns	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	400a      	ands	r2, r1
 80104d2:	601a      	str	r2, [r3, #0]
}
 80104d4:	bf00      	nop
 80104d6:	3714      	adds	r7, #20
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	2b20      	cmp	r3, #32
 80104f4:	d138      	bne.n	8010568 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d101      	bne.n	8010504 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010500:	2302      	movs	r3, #2
 8010502:	e032      	b.n	801056a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2224      	movs	r2, #36	@ 0x24
 8010510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f022 0201 	bic.w	r2, r2, #1
 8010522:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010532:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	6819      	ldr	r1, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	430a      	orrs	r2, r1
 8010542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f042 0201 	orr.w	r2, r2, #1
 8010552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2220      	movs	r2, #32
 8010558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	e000      	b.n	801056a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010568:	2302      	movs	r3, #2
  }
}
 801056a:	4618      	mov	r0, r3
 801056c:	370c      	adds	r7, #12
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr

08010576 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010576:	b480      	push	{r7}
 8010578:	b085      	sub	sp, #20
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
 801057e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010586:	b2db      	uxtb	r3, r3
 8010588:	2b20      	cmp	r3, #32
 801058a:	d139      	bne.n	8010600 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010592:	2b01      	cmp	r3, #1
 8010594:	d101      	bne.n	801059a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010596:	2302      	movs	r3, #2
 8010598:	e033      	b.n	8010602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2201      	movs	r2, #1
 801059e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2224      	movs	r2, #36	@ 0x24
 80105a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f022 0201 	bic.w	r2, r2, #1
 80105b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80105c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	021b      	lsls	r3, r3, #8
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	4313      	orrs	r3, r2
 80105d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	68fa      	ldr	r2, [r7, #12]
 80105da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f042 0201 	orr.w	r2, r2, #1
 80105ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2220      	movs	r2, #32
 80105f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80105fc:	2300      	movs	r3, #0
 80105fe:	e000      	b.n	8010602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010600:	2302      	movs	r3, #2
  }
}
 8010602:	4618      	mov	r0, r3
 8010604:	3714      	adds	r7, #20
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
	...

08010610 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010610:	b480      	push	{r7}
 8010612:	b085      	sub	sp, #20
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010618:	4b0d      	ldr	r3, [pc, #52]	@ (8010650 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801061a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801061e:	4a0c      	ldr	r2, [pc, #48]	@ (8010650 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010620:	f043 0302 	orr.w	r3, r3, #2
 8010624:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010628:	4b09      	ldr	r3, [pc, #36]	@ (8010650 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801062a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801062e:	f003 0302 	and.w	r3, r3, #2
 8010632:	60fb      	str	r3, [r7, #12]
 8010634:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8010636:	4b07      	ldr	r3, [pc, #28]	@ (8010654 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010638:	685a      	ldr	r2, [r3, #4]
 801063a:	4906      	ldr	r1, [pc, #24]	@ (8010654 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4313      	orrs	r3, r2
 8010640:	604b      	str	r3, [r1, #4]
}
 8010642:	bf00      	nop
 8010644:	3714      	adds	r7, #20
 8010646:	46bd      	mov	sp, r7
 8010648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064c:	4770      	bx	lr
 801064e:	bf00      	nop
 8010650:	58024400 	.word	0x58024400
 8010654:	58000400 	.word	0x58000400

08010658 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010660:	4b19      	ldr	r3, [pc, #100]	@ (80106c8 <HAL_PWREx_ConfigSupply+0x70>)
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	f003 0304 	and.w	r3, r3, #4
 8010668:	2b04      	cmp	r3, #4
 801066a:	d00a      	beq.n	8010682 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801066c:	4b16      	ldr	r3, [pc, #88]	@ (80106c8 <HAL_PWREx_ConfigSupply+0x70>)
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	f003 0307 	and.w	r3, r3, #7
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	429a      	cmp	r2, r3
 8010678:	d001      	beq.n	801067e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801067a:	2301      	movs	r3, #1
 801067c:	e01f      	b.n	80106be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	e01d      	b.n	80106be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010682:	4b11      	ldr	r3, [pc, #68]	@ (80106c8 <HAL_PWREx_ConfigSupply+0x70>)
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	f023 0207 	bic.w	r2, r3, #7
 801068a:	490f      	ldr	r1, [pc, #60]	@ (80106c8 <HAL_PWREx_ConfigSupply+0x70>)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	4313      	orrs	r3, r2
 8010690:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010692:	f7f8 f9f1 	bl	8008a78 <HAL_GetTick>
 8010696:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010698:	e009      	b.n	80106ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801069a:	f7f8 f9ed 	bl	8008a78 <HAL_GetTick>
 801069e:	4602      	mov	r2, r0
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80106a8:	d901      	bls.n	80106ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80106aa:	2301      	movs	r3, #1
 80106ac:	e007      	b.n	80106be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80106ae:	4b06      	ldr	r3, [pc, #24]	@ (80106c8 <HAL_PWREx_ConfigSupply+0x70>)
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80106b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80106ba:	d1ee      	bne.n	801069a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3710      	adds	r7, #16
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	58024800 	.word	0x58024800

080106cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b08c      	sub	sp, #48	@ 0x30
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d101      	bne.n	80106de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80106da:	2301      	movs	r3, #1
 80106dc:	e3c8      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f003 0301 	and.w	r3, r3, #1
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f000 8087 	beq.w	80107fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80106ec:	4b88      	ldr	r3, [pc, #544]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80106ee:	691b      	ldr	r3, [r3, #16]
 80106f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80106f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80106f6:	4b86      	ldr	r3, [pc, #536]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80106f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80106fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106fe:	2b10      	cmp	r3, #16
 8010700:	d007      	beq.n	8010712 <HAL_RCC_OscConfig+0x46>
 8010702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010704:	2b18      	cmp	r3, #24
 8010706:	d110      	bne.n	801072a <HAL_RCC_OscConfig+0x5e>
 8010708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801070a:	f003 0303 	and.w	r3, r3, #3
 801070e:	2b02      	cmp	r3, #2
 8010710:	d10b      	bne.n	801072a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010712:	4b7f      	ldr	r3, [pc, #508]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801071a:	2b00      	cmp	r3, #0
 801071c:	d06c      	beq.n	80107f8 <HAL_RCC_OscConfig+0x12c>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d168      	bne.n	80107f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8010726:	2301      	movs	r3, #1
 8010728:	e3a2      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010732:	d106      	bne.n	8010742 <HAL_RCC_OscConfig+0x76>
 8010734:	4b76      	ldr	r3, [pc, #472]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	4a75      	ldr	r2, [pc, #468]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801073a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801073e:	6013      	str	r3, [r2, #0]
 8010740:	e02e      	b.n	80107a0 <HAL_RCC_OscConfig+0xd4>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d10c      	bne.n	8010764 <HAL_RCC_OscConfig+0x98>
 801074a:	4b71      	ldr	r3, [pc, #452]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	4a70      	ldr	r2, [pc, #448]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010754:	6013      	str	r3, [r2, #0]
 8010756:	4b6e      	ldr	r3, [pc, #440]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4a6d      	ldr	r2, [pc, #436]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801075c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010760:	6013      	str	r3, [r2, #0]
 8010762:	e01d      	b.n	80107a0 <HAL_RCC_OscConfig+0xd4>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801076c:	d10c      	bne.n	8010788 <HAL_RCC_OscConfig+0xbc>
 801076e:	4b68      	ldr	r3, [pc, #416]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4a67      	ldr	r2, [pc, #412]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010778:	6013      	str	r3, [r2, #0]
 801077a:	4b65      	ldr	r3, [pc, #404]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4a64      	ldr	r2, [pc, #400]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010784:	6013      	str	r3, [r2, #0]
 8010786:	e00b      	b.n	80107a0 <HAL_RCC_OscConfig+0xd4>
 8010788:	4b61      	ldr	r3, [pc, #388]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4a60      	ldr	r2, [pc, #384]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801078e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010792:	6013      	str	r3, [r2, #0]
 8010794:	4b5e      	ldr	r3, [pc, #376]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4a5d      	ldr	r2, [pc, #372]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801079a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801079e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d013      	beq.n	80107d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107a8:	f7f8 f966 	bl	8008a78 <HAL_GetTick>
 80107ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80107ae:	e008      	b.n	80107c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80107b0:	f7f8 f962 	bl	8008a78 <HAL_GetTick>
 80107b4:	4602      	mov	r2, r0
 80107b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b8:	1ad3      	subs	r3, r2, r3
 80107ba:	2b64      	cmp	r3, #100	@ 0x64
 80107bc:	d901      	bls.n	80107c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80107be:	2303      	movs	r3, #3
 80107c0:	e356      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80107c2:	4b53      	ldr	r3, [pc, #332]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d0f0      	beq.n	80107b0 <HAL_RCC_OscConfig+0xe4>
 80107ce:	e014      	b.n	80107fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107d0:	f7f8 f952 	bl	8008a78 <HAL_GetTick>
 80107d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80107d6:	e008      	b.n	80107ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80107d8:	f7f8 f94e 	bl	8008a78 <HAL_GetTick>
 80107dc:	4602      	mov	r2, r0
 80107de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e0:	1ad3      	subs	r3, r2, r3
 80107e2:	2b64      	cmp	r3, #100	@ 0x64
 80107e4:	d901      	bls.n	80107ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80107e6:	2303      	movs	r3, #3
 80107e8:	e342      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80107ea:	4b49      	ldr	r3, [pc, #292]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1f0      	bne.n	80107d8 <HAL_RCC_OscConfig+0x10c>
 80107f6:	e000      	b.n	80107fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80107f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f003 0302 	and.w	r3, r3, #2
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 808c 	beq.w	8010920 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010808:	4b41      	ldr	r3, [pc, #260]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010810:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010812:	4b3f      	ldr	r3, [pc, #252]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010816:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d007      	beq.n	801082e <HAL_RCC_OscConfig+0x162>
 801081e:	6a3b      	ldr	r3, [r7, #32]
 8010820:	2b18      	cmp	r3, #24
 8010822:	d137      	bne.n	8010894 <HAL_RCC_OscConfig+0x1c8>
 8010824:	69fb      	ldr	r3, [r7, #28]
 8010826:	f003 0303 	and.w	r3, r3, #3
 801082a:	2b00      	cmp	r3, #0
 801082c:	d132      	bne.n	8010894 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801082e:	4b38      	ldr	r3, [pc, #224]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f003 0304 	and.w	r3, r3, #4
 8010836:	2b00      	cmp	r3, #0
 8010838:	d005      	beq.n	8010846 <HAL_RCC_OscConfig+0x17a>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	68db      	ldr	r3, [r3, #12]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d101      	bne.n	8010846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010842:	2301      	movs	r3, #1
 8010844:	e314      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010846:	4b32      	ldr	r3, [pc, #200]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f023 0219 	bic.w	r2, r3, #25
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	492f      	ldr	r1, [pc, #188]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010854:	4313      	orrs	r3, r2
 8010856:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010858:	f7f8 f90e 	bl	8008a78 <HAL_GetTick>
 801085c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801085e:	e008      	b.n	8010872 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010860:	f7f8 f90a 	bl	8008a78 <HAL_GetTick>
 8010864:	4602      	mov	r2, r0
 8010866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010868:	1ad3      	subs	r3, r2, r3
 801086a:	2b02      	cmp	r3, #2
 801086c:	d901      	bls.n	8010872 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801086e:	2303      	movs	r3, #3
 8010870:	e2fe      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010872:	4b27      	ldr	r3, [pc, #156]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f003 0304 	and.w	r3, r3, #4
 801087a:	2b00      	cmp	r3, #0
 801087c:	d0f0      	beq.n	8010860 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801087e:	4b24      	ldr	r3, [pc, #144]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	691b      	ldr	r3, [r3, #16]
 801088a:	061b      	lsls	r3, r3, #24
 801088c:	4920      	ldr	r1, [pc, #128]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801088e:	4313      	orrs	r3, r2
 8010890:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010892:	e045      	b.n	8010920 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d026      	beq.n	80108ea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801089c:	4b1c      	ldr	r3, [pc, #112]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f023 0219 	bic.w	r2, r3, #25
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	4919      	ldr	r1, [pc, #100]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80108aa:	4313      	orrs	r3, r2
 80108ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108ae:	f7f8 f8e3 	bl	8008a78 <HAL_GetTick>
 80108b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80108b4:	e008      	b.n	80108c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80108b6:	f7f8 f8df 	bl	8008a78 <HAL_GetTick>
 80108ba:	4602      	mov	r2, r0
 80108bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d901      	bls.n	80108c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80108c4:	2303      	movs	r3, #3
 80108c6:	e2d3      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80108c8:	4b11      	ldr	r3, [pc, #68]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f003 0304 	and.w	r3, r3, #4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d0f0      	beq.n	80108b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80108d4:	4b0e      	ldr	r3, [pc, #56]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	691b      	ldr	r3, [r3, #16]
 80108e0:	061b      	lsls	r3, r3, #24
 80108e2:	490b      	ldr	r1, [pc, #44]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80108e4:	4313      	orrs	r3, r2
 80108e6:	604b      	str	r3, [r1, #4]
 80108e8:	e01a      	b.n	8010920 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80108ea:	4b09      	ldr	r3, [pc, #36]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a08      	ldr	r2, [pc, #32]	@ (8010910 <HAL_RCC_OscConfig+0x244>)
 80108f0:	f023 0301 	bic.w	r3, r3, #1
 80108f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108f6:	f7f8 f8bf 	bl	8008a78 <HAL_GetTick>
 80108fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80108fc:	e00a      	b.n	8010914 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80108fe:	f7f8 f8bb 	bl	8008a78 <HAL_GetTick>
 8010902:	4602      	mov	r2, r0
 8010904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010906:	1ad3      	subs	r3, r2, r3
 8010908:	2b02      	cmp	r3, #2
 801090a:	d903      	bls.n	8010914 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801090c:	2303      	movs	r3, #3
 801090e:	e2af      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
 8010910:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010914:	4b96      	ldr	r3, [pc, #600]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f003 0304 	and.w	r3, r3, #4
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1ee      	bne.n	80108fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f003 0310 	and.w	r3, r3, #16
 8010928:	2b00      	cmp	r3, #0
 801092a:	d06a      	beq.n	8010a02 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801092c:	4b90      	ldr	r3, [pc, #576]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 801092e:	691b      	ldr	r3, [r3, #16]
 8010930:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010934:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010936:	4b8e      	ldr	r3, [pc, #568]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801093a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801093c:	69bb      	ldr	r3, [r7, #24]
 801093e:	2b08      	cmp	r3, #8
 8010940:	d007      	beq.n	8010952 <HAL_RCC_OscConfig+0x286>
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	2b18      	cmp	r3, #24
 8010946:	d11b      	bne.n	8010980 <HAL_RCC_OscConfig+0x2b4>
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	f003 0303 	and.w	r3, r3, #3
 801094e:	2b01      	cmp	r3, #1
 8010950:	d116      	bne.n	8010980 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010952:	4b87      	ldr	r3, [pc, #540]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801095a:	2b00      	cmp	r3, #0
 801095c:	d005      	beq.n	801096a <HAL_RCC_OscConfig+0x29e>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	69db      	ldr	r3, [r3, #28]
 8010962:	2b80      	cmp	r3, #128	@ 0x80
 8010964:	d001      	beq.n	801096a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	e282      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801096a:	4b81      	ldr	r3, [pc, #516]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 801096c:	68db      	ldr	r3, [r3, #12]
 801096e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6a1b      	ldr	r3, [r3, #32]
 8010976:	061b      	lsls	r3, r3, #24
 8010978:	497d      	ldr	r1, [pc, #500]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 801097a:	4313      	orrs	r3, r2
 801097c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801097e:	e040      	b.n	8010a02 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	69db      	ldr	r3, [r3, #28]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d023      	beq.n	80109d0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010988:	4b79      	ldr	r3, [pc, #484]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4a78      	ldr	r2, [pc, #480]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 801098e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010994:	f7f8 f870 	bl	8008a78 <HAL_GetTick>
 8010998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801099a:	e008      	b.n	80109ae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801099c:	f7f8 f86c 	bl	8008a78 <HAL_GetTick>
 80109a0:	4602      	mov	r2, r0
 80109a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a4:	1ad3      	subs	r3, r2, r3
 80109a6:	2b02      	cmp	r3, #2
 80109a8:	d901      	bls.n	80109ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80109aa:	2303      	movs	r3, #3
 80109ac:	e260      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80109ae:	4b70      	ldr	r3, [pc, #448]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d0f0      	beq.n	801099c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80109ba:	4b6d      	ldr	r3, [pc, #436]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6a1b      	ldr	r3, [r3, #32]
 80109c6:	061b      	lsls	r3, r3, #24
 80109c8:	4969      	ldr	r1, [pc, #420]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 80109ca:	4313      	orrs	r3, r2
 80109cc:	60cb      	str	r3, [r1, #12]
 80109ce:	e018      	b.n	8010a02 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80109d0:	4b67      	ldr	r3, [pc, #412]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a66      	ldr	r2, [pc, #408]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 80109d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80109da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109dc:	f7f8 f84c 	bl	8008a78 <HAL_GetTick>
 80109e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80109e2:	e008      	b.n	80109f6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80109e4:	f7f8 f848 	bl	8008a78 <HAL_GetTick>
 80109e8:	4602      	mov	r2, r0
 80109ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ec:	1ad3      	subs	r3, r2, r3
 80109ee:	2b02      	cmp	r3, #2
 80109f0:	d901      	bls.n	80109f6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80109f2:	2303      	movs	r3, #3
 80109f4:	e23c      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80109f6:	4b5e      	ldr	r3, [pc, #376]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d1f0      	bne.n	80109e4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f003 0308 	and.w	r3, r3, #8
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d036      	beq.n	8010a7c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	695b      	ldr	r3, [r3, #20]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d019      	beq.n	8010a4a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010a16:	4b56      	ldr	r3, [pc, #344]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a1a:	4a55      	ldr	r2, [pc, #340]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010a1c:	f043 0301 	orr.w	r3, r3, #1
 8010a20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a22:	f7f8 f829 	bl	8008a78 <HAL_GetTick>
 8010a26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010a28:	e008      	b.n	8010a3c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010a2a:	f7f8 f825 	bl	8008a78 <HAL_GetTick>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	2b02      	cmp	r3, #2
 8010a36:	d901      	bls.n	8010a3c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8010a38:	2303      	movs	r3, #3
 8010a3a:	e219      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010a3c:	4b4c      	ldr	r3, [pc, #304]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a40:	f003 0302 	and.w	r3, r3, #2
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d0f0      	beq.n	8010a2a <HAL_RCC_OscConfig+0x35e>
 8010a48:	e018      	b.n	8010a7c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010a4a:	4b49      	ldr	r3, [pc, #292]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a4e:	4a48      	ldr	r2, [pc, #288]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010a50:	f023 0301 	bic.w	r3, r3, #1
 8010a54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a56:	f7f8 f80f 	bl	8008a78 <HAL_GetTick>
 8010a5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010a5c:	e008      	b.n	8010a70 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010a5e:	f7f8 f80b 	bl	8008a78 <HAL_GetTick>
 8010a62:	4602      	mov	r2, r0
 8010a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a66:	1ad3      	subs	r3, r2, r3
 8010a68:	2b02      	cmp	r3, #2
 8010a6a:	d901      	bls.n	8010a70 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8010a6c:	2303      	movs	r3, #3
 8010a6e:	e1ff      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010a70:	4b3f      	ldr	r3, [pc, #252]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a74:	f003 0302 	and.w	r3, r3, #2
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1f0      	bne.n	8010a5e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f003 0320 	and.w	r3, r3, #32
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d036      	beq.n	8010af6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	699b      	ldr	r3, [r3, #24]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d019      	beq.n	8010ac4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010a90:	4b37      	ldr	r3, [pc, #220]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a36      	ldr	r2, [pc, #216]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010a96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010a9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010a9c:	f7f7 ffec 	bl	8008a78 <HAL_GetTick>
 8010aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010aa2:	e008      	b.n	8010ab6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010aa4:	f7f7 ffe8 	bl	8008a78 <HAL_GetTick>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	2b02      	cmp	r3, #2
 8010ab0:	d901      	bls.n	8010ab6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8010ab2:	2303      	movs	r3, #3
 8010ab4:	e1dc      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d0f0      	beq.n	8010aa4 <HAL_RCC_OscConfig+0x3d8>
 8010ac2:	e018      	b.n	8010af6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a29      	ldr	r2, [pc, #164]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ace:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010ad0:	f7f7 ffd2 	bl	8008a78 <HAL_GetTick>
 8010ad4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010ad6:	e008      	b.n	8010aea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010ad8:	f7f7 ffce 	bl	8008a78 <HAL_GetTick>
 8010adc:	4602      	mov	r2, r0
 8010ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	2b02      	cmp	r3, #2
 8010ae4:	d901      	bls.n	8010aea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	e1c2      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010aea:	4b21      	ldr	r3, [pc, #132]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d1f0      	bne.n	8010ad8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f003 0304 	and.w	r3, r3, #4
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	f000 8086 	beq.w	8010c10 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010b04:	4b1b      	ldr	r3, [pc, #108]	@ (8010b74 <HAL_RCC_OscConfig+0x4a8>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4a1a      	ldr	r2, [pc, #104]	@ (8010b74 <HAL_RCC_OscConfig+0x4a8>)
 8010b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010b0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010b10:	f7f7 ffb2 	bl	8008a78 <HAL_GetTick>
 8010b14:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010b16:	e008      	b.n	8010b2a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010b18:	f7f7 ffae 	bl	8008a78 <HAL_GetTick>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	2b64      	cmp	r3, #100	@ 0x64
 8010b24:	d901      	bls.n	8010b2a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8010b26:	2303      	movs	r3, #3
 8010b28:	e1a2      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010b2a:	4b12      	ldr	r3, [pc, #72]	@ (8010b74 <HAL_RCC_OscConfig+0x4a8>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d0f0      	beq.n	8010b18 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	689b      	ldr	r3, [r3, #8]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d106      	bne.n	8010b4c <HAL_RCC_OscConfig+0x480>
 8010b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b42:	4a0b      	ldr	r2, [pc, #44]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010b44:	f043 0301 	orr.w	r3, r3, #1
 8010b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8010b4a:	e032      	b.n	8010bb2 <HAL_RCC_OscConfig+0x4e6>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	689b      	ldr	r3, [r3, #8]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d111      	bne.n	8010b78 <HAL_RCC_OscConfig+0x4ac>
 8010b54:	4b06      	ldr	r3, [pc, #24]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b58:	4a05      	ldr	r2, [pc, #20]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010b5a:	f023 0301 	bic.w	r3, r3, #1
 8010b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8010b60:	4b03      	ldr	r3, [pc, #12]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b64:	4a02      	ldr	r2, [pc, #8]	@ (8010b70 <HAL_RCC_OscConfig+0x4a4>)
 8010b66:	f023 0304 	bic.w	r3, r3, #4
 8010b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8010b6c:	e021      	b.n	8010bb2 <HAL_RCC_OscConfig+0x4e6>
 8010b6e:	bf00      	nop
 8010b70:	58024400 	.word	0x58024400
 8010b74:	58024800 	.word	0x58024800
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	689b      	ldr	r3, [r3, #8]
 8010b7c:	2b05      	cmp	r3, #5
 8010b7e:	d10c      	bne.n	8010b9a <HAL_RCC_OscConfig+0x4ce>
 8010b80:	4b83      	ldr	r3, [pc, #524]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b84:	4a82      	ldr	r2, [pc, #520]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010b86:	f043 0304 	orr.w	r3, r3, #4
 8010b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8010b8c:	4b80      	ldr	r3, [pc, #512]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b90:	4a7f      	ldr	r2, [pc, #508]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010b92:	f043 0301 	orr.w	r3, r3, #1
 8010b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8010b98:	e00b      	b.n	8010bb2 <HAL_RCC_OscConfig+0x4e6>
 8010b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010ba0:	f023 0301 	bic.w	r3, r3, #1
 8010ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8010ba6:	4b7a      	ldr	r3, [pc, #488]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010baa:	4a79      	ldr	r2, [pc, #484]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010bac:	f023 0304 	bic.w	r3, r3, #4
 8010bb0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d015      	beq.n	8010be6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010bba:	f7f7 ff5d 	bl	8008a78 <HAL_GetTick>
 8010bbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010bc0:	e00a      	b.n	8010bd8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010bc2:	f7f7 ff59 	bl	8008a78 <HAL_GetTick>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bca:	1ad3      	subs	r3, r2, r3
 8010bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d901      	bls.n	8010bd8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8010bd4:	2303      	movs	r3, #3
 8010bd6:	e14b      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010bd8:	4b6d      	ldr	r3, [pc, #436]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bdc:	f003 0302 	and.w	r3, r3, #2
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d0ee      	beq.n	8010bc2 <HAL_RCC_OscConfig+0x4f6>
 8010be4:	e014      	b.n	8010c10 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010be6:	f7f7 ff47 	bl	8008a78 <HAL_GetTick>
 8010bea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010bec:	e00a      	b.n	8010c04 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010bee:	f7f7 ff43 	bl	8008a78 <HAL_GetTick>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d901      	bls.n	8010c04 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8010c00:	2303      	movs	r3, #3
 8010c02:	e135      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010c04:	4b62      	ldr	r3, [pc, #392]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c08:	f003 0302 	and.w	r3, r3, #2
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1ee      	bne.n	8010bee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f000 812a 	beq.w	8010e6e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010c1c:	691b      	ldr	r3, [r3, #16]
 8010c1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010c22:	2b18      	cmp	r3, #24
 8010c24:	f000 80ba 	beq.w	8010d9c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	f040 8095 	bne.w	8010d5c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010c32:	4b57      	ldr	r3, [pc, #348]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	4a56      	ldr	r2, [pc, #344]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c3e:	f7f7 ff1b 	bl	8008a78 <HAL_GetTick>
 8010c42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010c44:	e008      	b.n	8010c58 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010c46:	f7f7 ff17 	bl	8008a78 <HAL_GetTick>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d901      	bls.n	8010c58 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8010c54:	2303      	movs	r3, #3
 8010c56:	e10b      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010c58:	4b4d      	ldr	r3, [pc, #308]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1f0      	bne.n	8010c46 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010c64:	4b4a      	ldr	r3, [pc, #296]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010c66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010c68:	4b4a      	ldr	r3, [pc, #296]	@ (8010d94 <HAL_RCC_OscConfig+0x6c8>)
 8010c6a:	4013      	ands	r3, r2
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010c74:	0112      	lsls	r2, r2, #4
 8010c76:	430a      	orrs	r2, r1
 8010c78:	4945      	ldr	r1, [pc, #276]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	628b      	str	r3, [r1, #40]	@ 0x28
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c82:	3b01      	subs	r3, #1
 8010c84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	025b      	lsls	r3, r3, #9
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	431a      	orrs	r2, r3
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	041b      	lsls	r3, r3, #16
 8010c9c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010ca0:	431a      	orrs	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	061b      	lsls	r3, r3, #24
 8010caa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010cae:	4938      	ldr	r1, [pc, #224]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8010cb4:	4b36      	ldr	r3, [pc, #216]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cb8:	4a35      	ldr	r2, [pc, #212]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cba:	f023 0301 	bic.w	r3, r3, #1
 8010cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010cc0:	4b33      	ldr	r3, [pc, #204]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010cc4:	4b34      	ldr	r3, [pc, #208]	@ (8010d98 <HAL_RCC_OscConfig+0x6cc>)
 8010cc6:	4013      	ands	r3, r2
 8010cc8:	687a      	ldr	r2, [r7, #4]
 8010cca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010ccc:	00d2      	lsls	r2, r2, #3
 8010cce:	4930      	ldr	r1, [pc, #192]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cd0:	4313      	orrs	r3, r2
 8010cd2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cd8:	f023 020c 	bic.w	r2, r3, #12
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ce0:	492b      	ldr	r1, [pc, #172]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cea:	f023 0202 	bic.w	r2, r3, #2
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cf2:	4927      	ldr	r1, [pc, #156]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010cf8:	4b25      	ldr	r3, [pc, #148]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cfc:	4a24      	ldr	r2, [pc, #144]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d04:	4b22      	ldr	r3, [pc, #136]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d08:	4a21      	ldr	r2, [pc, #132]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010d10:	4b1f      	ldr	r3, [pc, #124]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d14:	4a1e      	ldr	r2, [pc, #120]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8010d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d20:	4a1b      	ldr	r2, [pc, #108]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d22:	f043 0301 	orr.w	r3, r3, #1
 8010d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010d28:	4b19      	ldr	r3, [pc, #100]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4a18      	ldr	r2, [pc, #96]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d34:	f7f7 fea0 	bl	8008a78 <HAL_GetTick>
 8010d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010d3a:	e008      	b.n	8010d4e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010d3c:	f7f7 fe9c 	bl	8008a78 <HAL_GetTick>
 8010d40:	4602      	mov	r2, r0
 8010d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d44:	1ad3      	subs	r3, r2, r3
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d901      	bls.n	8010d4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8010d4a:	2303      	movs	r3, #3
 8010d4c:	e090      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010d4e:	4b10      	ldr	r3, [pc, #64]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d0f0      	beq.n	8010d3c <HAL_RCC_OscConfig+0x670>
 8010d5a:	e088      	b.n	8010e6e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4a0b      	ldr	r2, [pc, #44]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d68:	f7f7 fe86 	bl	8008a78 <HAL_GetTick>
 8010d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010d6e:	e008      	b.n	8010d82 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010d70:	f7f7 fe82 	bl	8008a78 <HAL_GetTick>
 8010d74:	4602      	mov	r2, r0
 8010d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	2b02      	cmp	r3, #2
 8010d7c:	d901      	bls.n	8010d82 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8010d7e:	2303      	movs	r3, #3
 8010d80:	e076      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010d82:	4b03      	ldr	r3, [pc, #12]	@ (8010d90 <HAL_RCC_OscConfig+0x6c4>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1f0      	bne.n	8010d70 <HAL_RCC_OscConfig+0x6a4>
 8010d8e:	e06e      	b.n	8010e6e <HAL_RCC_OscConfig+0x7a2>
 8010d90:	58024400 	.word	0x58024400
 8010d94:	fffffc0c 	.word	0xfffffc0c
 8010d98:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010d9c:	4b36      	ldr	r3, [pc, #216]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010da0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010da2:	4b35      	ldr	r3, [pc, #212]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010da6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d031      	beq.n	8010e14 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	f003 0203 	and.w	r2, r3, #3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d12a      	bne.n	8010e14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	091b      	lsrs	r3, r3, #4
 8010dc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d122      	bne.n	8010e14 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d11a      	bne.n	8010e14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	0a5b      	lsrs	r3, r3, #9
 8010de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d111      	bne.n	8010e14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	0c1b      	lsrs	r3, r3, #16
 8010df4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dfc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d108      	bne.n	8010e14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	0e1b      	lsrs	r3, r3, #24
 8010e06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d001      	beq.n	8010e18 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8010e14:	2301      	movs	r3, #1
 8010e16:	e02b      	b.n	8010e70 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8010e18:	4b17      	ldr	r3, [pc, #92]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e1c:	08db      	lsrs	r3, r3, #3
 8010e1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e22:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e28:	693a      	ldr	r2, [r7, #16]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d01f      	beq.n	8010e6e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8010e2e:	4b12      	ldr	r3, [pc, #72]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e32:	4a11      	ldr	r2, [pc, #68]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010e34:	f023 0301 	bic.w	r3, r3, #1
 8010e38:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010e3a:	f7f7 fe1d 	bl	8008a78 <HAL_GetTick>
 8010e3e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8010e40:	bf00      	nop
 8010e42:	f7f7 fe19 	bl	8008a78 <HAL_GetTick>
 8010e46:	4602      	mov	r2, r0
 8010e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d0f9      	beq.n	8010e42 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e52:	4b0a      	ldr	r3, [pc, #40]	@ (8010e7c <HAL_RCC_OscConfig+0x7b0>)
 8010e54:	4013      	ands	r3, r2
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010e5a:	00d2      	lsls	r2, r2, #3
 8010e5c:	4906      	ldr	r1, [pc, #24]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8010e62:	4b05      	ldr	r3, [pc, #20]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e66:	4a04      	ldr	r2, [pc, #16]	@ (8010e78 <HAL_RCC_OscConfig+0x7ac>)
 8010e68:	f043 0301 	orr.w	r3, r3, #1
 8010e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3730      	adds	r7, #48	@ 0x30
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	58024400 	.word	0x58024400
 8010e7c:	ffff0007 	.word	0xffff0007

08010e80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b086      	sub	sp, #24
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d101      	bne.n	8010e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010e90:	2301      	movs	r3, #1
 8010e92:	e19c      	b.n	80111ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010e94:	4b8a      	ldr	r3, [pc, #552]	@ (80110c0 <HAL_RCC_ClockConfig+0x240>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f003 030f 	and.w	r3, r3, #15
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d910      	bls.n	8010ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010ea2:	4b87      	ldr	r3, [pc, #540]	@ (80110c0 <HAL_RCC_ClockConfig+0x240>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f023 020f 	bic.w	r2, r3, #15
 8010eaa:	4985      	ldr	r1, [pc, #532]	@ (80110c0 <HAL_RCC_ClockConfig+0x240>)
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010eb2:	4b83      	ldr	r3, [pc, #524]	@ (80110c0 <HAL_RCC_ClockConfig+0x240>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f003 030f 	and.w	r3, r3, #15
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d001      	beq.n	8010ec4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	e184      	b.n	80111ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f003 0304 	and.w	r3, r3, #4
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d010      	beq.n	8010ef2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	691a      	ldr	r2, [r3, #16]
 8010ed4:	4b7b      	ldr	r3, [pc, #492]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010ed6:	699b      	ldr	r3, [r3, #24]
 8010ed8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d908      	bls.n	8010ef2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010ee0:	4b78      	ldr	r3, [pc, #480]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010ee2:	699b      	ldr	r3, [r3, #24]
 8010ee4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	691b      	ldr	r3, [r3, #16]
 8010eec:	4975      	ldr	r1, [pc, #468]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010eee:	4313      	orrs	r3, r2
 8010ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f003 0308 	and.w	r3, r3, #8
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d010      	beq.n	8010f20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	695a      	ldr	r2, [r3, #20]
 8010f02:	4b70      	ldr	r3, [pc, #448]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f04:	69db      	ldr	r3, [r3, #28]
 8010f06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d908      	bls.n	8010f20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f10:	69db      	ldr	r3, [r3, #28]
 8010f12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	695b      	ldr	r3, [r3, #20]
 8010f1a:	496a      	ldr	r1, [pc, #424]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f003 0310 	and.w	r3, r3, #16
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d010      	beq.n	8010f4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	699a      	ldr	r2, [r3, #24]
 8010f30:	4b64      	ldr	r3, [pc, #400]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f32:	69db      	ldr	r3, [r3, #28]
 8010f34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d908      	bls.n	8010f4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010f3c:	4b61      	ldr	r3, [pc, #388]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f3e:	69db      	ldr	r3, [r3, #28]
 8010f40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	699b      	ldr	r3, [r3, #24]
 8010f48:	495e      	ldr	r1, [pc, #376]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f4a:	4313      	orrs	r3, r2
 8010f4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f003 0320 	and.w	r3, r3, #32
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d010      	beq.n	8010f7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	69da      	ldr	r2, [r3, #28]
 8010f5e:	4b59      	ldr	r3, [pc, #356]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f60:	6a1b      	ldr	r3, [r3, #32]
 8010f62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d908      	bls.n	8010f7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010f6a:	4b56      	ldr	r3, [pc, #344]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f6c:	6a1b      	ldr	r3, [r3, #32]
 8010f6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	69db      	ldr	r3, [r3, #28]
 8010f76:	4953      	ldr	r1, [pc, #332]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	f003 0302 	and.w	r3, r3, #2
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d010      	beq.n	8010faa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	68da      	ldr	r2, [r3, #12]
 8010f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f8e:	699b      	ldr	r3, [r3, #24]
 8010f90:	f003 030f 	and.w	r3, r3, #15
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d908      	bls.n	8010faa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010f98:	4b4a      	ldr	r3, [pc, #296]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010f9a:	699b      	ldr	r3, [r3, #24]
 8010f9c:	f023 020f 	bic.w	r2, r3, #15
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	4947      	ldr	r1, [pc, #284]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	f003 0301 	and.w	r3, r3, #1
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d055      	beq.n	8011062 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010fb6:	4b43      	ldr	r3, [pc, #268]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010fb8:	699b      	ldr	r3, [r3, #24]
 8010fba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	4940      	ldr	r1, [pc, #256]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	2b02      	cmp	r3, #2
 8010fce:	d107      	bne.n	8010fe0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d121      	bne.n	8011020 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e0f6      	b.n	80111ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	2b03      	cmp	r3, #3
 8010fe6:	d107      	bne.n	8010ff8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010fe8:	4b36      	ldr	r3, [pc, #216]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d115      	bne.n	8011020 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	e0ea      	b.n	80111ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d107      	bne.n	8011010 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011000:	4b30      	ldr	r3, [pc, #192]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011008:	2b00      	cmp	r3, #0
 801100a:	d109      	bne.n	8011020 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801100c:	2301      	movs	r3, #1
 801100e:	e0de      	b.n	80111ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011010:	4b2c      	ldr	r3, [pc, #176]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f003 0304 	and.w	r3, r3, #4
 8011018:	2b00      	cmp	r3, #0
 801101a:	d101      	bne.n	8011020 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801101c:	2301      	movs	r3, #1
 801101e:	e0d6      	b.n	80111ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011020:	4b28      	ldr	r3, [pc, #160]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	f023 0207 	bic.w	r2, r3, #7
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	4925      	ldr	r1, [pc, #148]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 801102e:	4313      	orrs	r3, r2
 8011030:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011032:	f7f7 fd21 	bl	8008a78 <HAL_GetTick>
 8011036:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011038:	e00a      	b.n	8011050 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801103a:	f7f7 fd1d 	bl	8008a78 <HAL_GetTick>
 801103e:	4602      	mov	r2, r0
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011048:	4293      	cmp	r3, r2
 801104a:	d901      	bls.n	8011050 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801104c:	2303      	movs	r3, #3
 801104e:	e0be      	b.n	80111ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011050:	4b1c      	ldr	r3, [pc, #112]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8011052:	691b      	ldr	r3, [r3, #16]
 8011054:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	429a      	cmp	r2, r3
 8011060:	d1eb      	bne.n	801103a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f003 0302 	and.w	r3, r3, #2
 801106a:	2b00      	cmp	r3, #0
 801106c:	d010      	beq.n	8011090 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	68da      	ldr	r2, [r3, #12]
 8011072:	4b14      	ldr	r3, [pc, #80]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8011074:	699b      	ldr	r3, [r3, #24]
 8011076:	f003 030f 	and.w	r3, r3, #15
 801107a:	429a      	cmp	r2, r3
 801107c:	d208      	bcs.n	8011090 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801107e:	4b11      	ldr	r3, [pc, #68]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 8011080:	699b      	ldr	r3, [r3, #24]
 8011082:	f023 020f 	bic.w	r2, r3, #15
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	490e      	ldr	r1, [pc, #56]	@ (80110c4 <HAL_RCC_ClockConfig+0x244>)
 801108c:	4313      	orrs	r3, r2
 801108e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011090:	4b0b      	ldr	r3, [pc, #44]	@ (80110c0 <HAL_RCC_ClockConfig+0x240>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f003 030f 	and.w	r3, r3, #15
 8011098:	683a      	ldr	r2, [r7, #0]
 801109a:	429a      	cmp	r2, r3
 801109c:	d214      	bcs.n	80110c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801109e:	4b08      	ldr	r3, [pc, #32]	@ (80110c0 <HAL_RCC_ClockConfig+0x240>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	f023 020f 	bic.w	r2, r3, #15
 80110a6:	4906      	ldr	r1, [pc, #24]	@ (80110c0 <HAL_RCC_ClockConfig+0x240>)
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	4313      	orrs	r3, r2
 80110ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80110ae:	4b04      	ldr	r3, [pc, #16]	@ (80110c0 <HAL_RCC_ClockConfig+0x240>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f003 030f 	and.w	r3, r3, #15
 80110b6:	683a      	ldr	r2, [r7, #0]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d005      	beq.n	80110c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80110bc:	2301      	movs	r3, #1
 80110be:	e086      	b.n	80111ce <HAL_RCC_ClockConfig+0x34e>
 80110c0:	52002000 	.word	0x52002000
 80110c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f003 0304 	and.w	r3, r3, #4
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d010      	beq.n	80110f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	691a      	ldr	r2, [r3, #16]
 80110d8:	4b3f      	ldr	r3, [pc, #252]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 80110da:	699b      	ldr	r3, [r3, #24]
 80110dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d208      	bcs.n	80110f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80110e4:	4b3c      	ldr	r3, [pc, #240]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 80110e6:	699b      	ldr	r3, [r3, #24]
 80110e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	691b      	ldr	r3, [r3, #16]
 80110f0:	4939      	ldr	r1, [pc, #228]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 80110f2:	4313      	orrs	r3, r2
 80110f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f003 0308 	and.w	r3, r3, #8
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d010      	beq.n	8011124 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	695a      	ldr	r2, [r3, #20]
 8011106:	4b34      	ldr	r3, [pc, #208]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 8011108:	69db      	ldr	r3, [r3, #28]
 801110a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801110e:	429a      	cmp	r2, r3
 8011110:	d208      	bcs.n	8011124 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011112:	4b31      	ldr	r3, [pc, #196]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 8011114:	69db      	ldr	r3, [r3, #28]
 8011116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	695b      	ldr	r3, [r3, #20]
 801111e:	492e      	ldr	r1, [pc, #184]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 8011120:	4313      	orrs	r3, r2
 8011122:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f003 0310 	and.w	r3, r3, #16
 801112c:	2b00      	cmp	r3, #0
 801112e:	d010      	beq.n	8011152 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	699a      	ldr	r2, [r3, #24]
 8011134:	4b28      	ldr	r3, [pc, #160]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 8011136:	69db      	ldr	r3, [r3, #28]
 8011138:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801113c:	429a      	cmp	r2, r3
 801113e:	d208      	bcs.n	8011152 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011140:	4b25      	ldr	r3, [pc, #148]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 8011142:	69db      	ldr	r3, [r3, #28]
 8011144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	699b      	ldr	r3, [r3, #24]
 801114c:	4922      	ldr	r1, [pc, #136]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 801114e:	4313      	orrs	r3, r2
 8011150:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	f003 0320 	and.w	r3, r3, #32
 801115a:	2b00      	cmp	r3, #0
 801115c:	d010      	beq.n	8011180 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	69da      	ldr	r2, [r3, #28]
 8011162:	4b1d      	ldr	r3, [pc, #116]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 8011164:	6a1b      	ldr	r3, [r3, #32]
 8011166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801116a:	429a      	cmp	r2, r3
 801116c:	d208      	bcs.n	8011180 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801116e:	4b1a      	ldr	r3, [pc, #104]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 8011170:	6a1b      	ldr	r3, [r3, #32]
 8011172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	69db      	ldr	r3, [r3, #28]
 801117a:	4917      	ldr	r1, [pc, #92]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 801117c:	4313      	orrs	r3, r2
 801117e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011180:	f000 f834 	bl	80111ec <HAL_RCC_GetSysClockFreq>
 8011184:	4602      	mov	r2, r0
 8011186:	4b14      	ldr	r3, [pc, #80]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 8011188:	699b      	ldr	r3, [r3, #24]
 801118a:	0a1b      	lsrs	r3, r3, #8
 801118c:	f003 030f 	and.w	r3, r3, #15
 8011190:	4912      	ldr	r1, [pc, #72]	@ (80111dc <HAL_RCC_ClockConfig+0x35c>)
 8011192:	5ccb      	ldrb	r3, [r1, r3]
 8011194:	f003 031f 	and.w	r3, r3, #31
 8011198:	fa22 f303 	lsr.w	r3, r2, r3
 801119c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801119e:	4b0e      	ldr	r3, [pc, #56]	@ (80111d8 <HAL_RCC_ClockConfig+0x358>)
 80111a0:	699b      	ldr	r3, [r3, #24]
 80111a2:	f003 030f 	and.w	r3, r3, #15
 80111a6:	4a0d      	ldr	r2, [pc, #52]	@ (80111dc <HAL_RCC_ClockConfig+0x35c>)
 80111a8:	5cd3      	ldrb	r3, [r2, r3]
 80111aa:	f003 031f 	and.w	r3, r3, #31
 80111ae:	693a      	ldr	r2, [r7, #16]
 80111b0:	fa22 f303 	lsr.w	r3, r2, r3
 80111b4:	4a0a      	ldr	r2, [pc, #40]	@ (80111e0 <HAL_RCC_ClockConfig+0x360>)
 80111b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80111b8:	4a0a      	ldr	r2, [pc, #40]	@ (80111e4 <HAL_RCC_ClockConfig+0x364>)
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80111be:	4b0a      	ldr	r3, [pc, #40]	@ (80111e8 <HAL_RCC_ClockConfig+0x368>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7f7 fc0e 	bl	80089e4 <HAL_InitTick>
 80111c8:	4603      	mov	r3, r0
 80111ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80111cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3718      	adds	r7, #24
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	58024400 	.word	0x58024400
 80111dc:	0801e790 	.word	0x0801e790
 80111e0:	24000008 	.word	0x24000008
 80111e4:	24000004 	.word	0x24000004
 80111e8:	2400000c 	.word	0x2400000c

080111ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b089      	sub	sp, #36	@ 0x24
 80111f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80111f2:	4bb3      	ldr	r3, [pc, #716]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111f4:	691b      	ldr	r3, [r3, #16]
 80111f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80111fa:	2b18      	cmp	r3, #24
 80111fc:	f200 8155 	bhi.w	80114aa <HAL_RCC_GetSysClockFreq+0x2be>
 8011200:	a201      	add	r2, pc, #4	@ (adr r2, 8011208 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011206:	bf00      	nop
 8011208:	0801126d 	.word	0x0801126d
 801120c:	080114ab 	.word	0x080114ab
 8011210:	080114ab 	.word	0x080114ab
 8011214:	080114ab 	.word	0x080114ab
 8011218:	080114ab 	.word	0x080114ab
 801121c:	080114ab 	.word	0x080114ab
 8011220:	080114ab 	.word	0x080114ab
 8011224:	080114ab 	.word	0x080114ab
 8011228:	08011293 	.word	0x08011293
 801122c:	080114ab 	.word	0x080114ab
 8011230:	080114ab 	.word	0x080114ab
 8011234:	080114ab 	.word	0x080114ab
 8011238:	080114ab 	.word	0x080114ab
 801123c:	080114ab 	.word	0x080114ab
 8011240:	080114ab 	.word	0x080114ab
 8011244:	080114ab 	.word	0x080114ab
 8011248:	08011299 	.word	0x08011299
 801124c:	080114ab 	.word	0x080114ab
 8011250:	080114ab 	.word	0x080114ab
 8011254:	080114ab 	.word	0x080114ab
 8011258:	080114ab 	.word	0x080114ab
 801125c:	080114ab 	.word	0x080114ab
 8011260:	080114ab 	.word	0x080114ab
 8011264:	080114ab 	.word	0x080114ab
 8011268:	0801129f 	.word	0x0801129f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801126c:	4b94      	ldr	r3, [pc, #592]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f003 0320 	and.w	r3, r3, #32
 8011274:	2b00      	cmp	r3, #0
 8011276:	d009      	beq.n	801128c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011278:	4b91      	ldr	r3, [pc, #580]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	08db      	lsrs	r3, r3, #3
 801127e:	f003 0303 	and.w	r3, r3, #3
 8011282:	4a90      	ldr	r2, [pc, #576]	@ (80114c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011284:	fa22 f303 	lsr.w	r3, r2, r3
 8011288:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801128a:	e111      	b.n	80114b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801128c:	4b8d      	ldr	r3, [pc, #564]	@ (80114c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801128e:	61bb      	str	r3, [r7, #24]
      break;
 8011290:	e10e      	b.n	80114b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011292:	4b8d      	ldr	r3, [pc, #564]	@ (80114c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011294:	61bb      	str	r3, [r7, #24]
      break;
 8011296:	e10b      	b.n	80114b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011298:	4b8c      	ldr	r3, [pc, #560]	@ (80114cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 801129a:	61bb      	str	r3, [r7, #24]
      break;
 801129c:	e108      	b.n	80114b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801129e:	4b88      	ldr	r3, [pc, #544]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80112a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112a2:	f003 0303 	and.w	r3, r3, #3
 80112a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80112a8:	4b85      	ldr	r3, [pc, #532]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80112aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112ac:	091b      	lsrs	r3, r3, #4
 80112ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80112b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80112b4:	4b82      	ldr	r3, [pc, #520]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80112b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112b8:	f003 0301 	and.w	r3, r3, #1
 80112bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80112be:	4b80      	ldr	r3, [pc, #512]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80112c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112c2:	08db      	lsrs	r3, r3, #3
 80112c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80112c8:	68fa      	ldr	r2, [r7, #12]
 80112ca:	fb02 f303 	mul.w	r3, r2, r3
 80112ce:	ee07 3a90 	vmov	s15, r3
 80112d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	f000 80e1 	beq.w	80114a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2b02      	cmp	r3, #2
 80112e6:	f000 8083 	beq.w	80113f0 <HAL_RCC_GetSysClockFreq+0x204>
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	2b02      	cmp	r3, #2
 80112ee:	f200 80a1 	bhi.w	8011434 <HAL_RCC_GetSysClockFreq+0x248>
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d003      	beq.n	8011300 <HAL_RCC_GetSysClockFreq+0x114>
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d056      	beq.n	80113ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80112fe:	e099      	b.n	8011434 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011300:	4b6f      	ldr	r3, [pc, #444]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f003 0320 	and.w	r3, r3, #32
 8011308:	2b00      	cmp	r3, #0
 801130a:	d02d      	beq.n	8011368 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801130c:	4b6c      	ldr	r3, [pc, #432]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	08db      	lsrs	r3, r3, #3
 8011312:	f003 0303 	and.w	r3, r3, #3
 8011316:	4a6b      	ldr	r2, [pc, #428]	@ (80114c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011318:	fa22 f303 	lsr.w	r3, r2, r3
 801131c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	ee07 3a90 	vmov	s15, r3
 8011324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	ee07 3a90 	vmov	s15, r3
 801132e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011336:	4b62      	ldr	r3, [pc, #392]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801133a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801133e:	ee07 3a90 	vmov	s15, r3
 8011342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011346:	ed97 6a02 	vldr	s12, [r7, #8]
 801134a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80114d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801134e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801135a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011362:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011366:	e087      	b.n	8011478 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	ee07 3a90 	vmov	s15, r3
 801136e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011372:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80114d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801137a:	4b51      	ldr	r3, [pc, #324]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801137e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011382:	ee07 3a90 	vmov	s15, r3
 8011386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801138a:	ed97 6a02 	vldr	s12, [r7, #8]
 801138e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80114d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801139a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801139e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80113aa:	e065      	b.n	8011478 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	ee07 3a90 	vmov	s15, r3
 80113b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80114d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80113ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113be:	4b40      	ldr	r3, [pc, #256]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80113c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113c6:	ee07 3a90 	vmov	s15, r3
 80113ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80113d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80114d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80113d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80113e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80113ee:	e043      	b.n	8011478 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	ee07 3a90 	vmov	s15, r3
 80113f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80114dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80113fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011402:	4b2f      	ldr	r3, [pc, #188]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801140a:	ee07 3a90 	vmov	s15, r3
 801140e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011412:	ed97 6a02 	vldr	s12, [r7, #8]
 8011416:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80114d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801141a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801141e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801142a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801142e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011432:	e021      	b.n	8011478 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	ee07 3a90 	vmov	s15, r3
 801143a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801143e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80114d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011446:	4b1e      	ldr	r3, [pc, #120]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801144a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801144e:	ee07 3a90 	vmov	s15, r3
 8011452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011456:	ed97 6a02 	vldr	s12, [r7, #8]
 801145a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80114d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801145e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801146a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011476:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011478:	4b11      	ldr	r3, [pc, #68]	@ (80114c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801147c:	0a5b      	lsrs	r3, r3, #9
 801147e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011482:	3301      	adds	r3, #1
 8011484:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	ee07 3a90 	vmov	s15, r3
 801148c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011490:	edd7 6a07 	vldr	s13, [r7, #28]
 8011494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801149c:	ee17 3a90 	vmov	r3, s15
 80114a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80114a2:	e005      	b.n	80114b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80114a4:	2300      	movs	r3, #0
 80114a6:	61bb      	str	r3, [r7, #24]
      break;
 80114a8:	e002      	b.n	80114b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80114aa:	4b07      	ldr	r3, [pc, #28]	@ (80114c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80114ac:	61bb      	str	r3, [r7, #24]
      break;
 80114ae:	bf00      	nop
  }

  return sysclockfreq;
 80114b0:	69bb      	ldr	r3, [r7, #24]
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3724      	adds	r7, #36	@ 0x24
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	58024400 	.word	0x58024400
 80114c4:	03d09000 	.word	0x03d09000
 80114c8:	003d0900 	.word	0x003d0900
 80114cc:	016e3600 	.word	0x016e3600
 80114d0:	46000000 	.word	0x46000000
 80114d4:	4c742400 	.word	0x4c742400
 80114d8:	4a742400 	.word	0x4a742400
 80114dc:	4bb71b00 	.word	0x4bb71b00

080114e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80114e6:	f7ff fe81 	bl	80111ec <HAL_RCC_GetSysClockFreq>
 80114ea:	4602      	mov	r2, r0
 80114ec:	4b10      	ldr	r3, [pc, #64]	@ (8011530 <HAL_RCC_GetHCLKFreq+0x50>)
 80114ee:	699b      	ldr	r3, [r3, #24]
 80114f0:	0a1b      	lsrs	r3, r3, #8
 80114f2:	f003 030f 	and.w	r3, r3, #15
 80114f6:	490f      	ldr	r1, [pc, #60]	@ (8011534 <HAL_RCC_GetHCLKFreq+0x54>)
 80114f8:	5ccb      	ldrb	r3, [r1, r3]
 80114fa:	f003 031f 	and.w	r3, r3, #31
 80114fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011502:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011504:	4b0a      	ldr	r3, [pc, #40]	@ (8011530 <HAL_RCC_GetHCLKFreq+0x50>)
 8011506:	699b      	ldr	r3, [r3, #24]
 8011508:	f003 030f 	and.w	r3, r3, #15
 801150c:	4a09      	ldr	r2, [pc, #36]	@ (8011534 <HAL_RCC_GetHCLKFreq+0x54>)
 801150e:	5cd3      	ldrb	r3, [r2, r3]
 8011510:	f003 031f 	and.w	r3, r3, #31
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	fa22 f303 	lsr.w	r3, r2, r3
 801151a:	4a07      	ldr	r2, [pc, #28]	@ (8011538 <HAL_RCC_GetHCLKFreq+0x58>)
 801151c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801151e:	4a07      	ldr	r2, [pc, #28]	@ (801153c <HAL_RCC_GetHCLKFreq+0x5c>)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011524:	4b04      	ldr	r3, [pc, #16]	@ (8011538 <HAL_RCC_GetHCLKFreq+0x58>)
 8011526:	681b      	ldr	r3, [r3, #0]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3708      	adds	r7, #8
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}
 8011530:	58024400 	.word	0x58024400
 8011534:	0801e790 	.word	0x0801e790
 8011538:	24000008 	.word	0x24000008
 801153c:	24000004 	.word	0x24000004

08011540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011544:	f7ff ffcc 	bl	80114e0 <HAL_RCC_GetHCLKFreq>
 8011548:	4602      	mov	r2, r0
 801154a:	4b06      	ldr	r3, [pc, #24]	@ (8011564 <HAL_RCC_GetPCLK1Freq+0x24>)
 801154c:	69db      	ldr	r3, [r3, #28]
 801154e:	091b      	lsrs	r3, r3, #4
 8011550:	f003 0307 	and.w	r3, r3, #7
 8011554:	4904      	ldr	r1, [pc, #16]	@ (8011568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011556:	5ccb      	ldrb	r3, [r1, r3]
 8011558:	f003 031f 	and.w	r3, r3, #31
 801155c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011560:	4618      	mov	r0, r3
 8011562:	bd80      	pop	{r7, pc}
 8011564:	58024400 	.word	0x58024400
 8011568:	0801e790 	.word	0x0801e790

0801156c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011570:	f7ff ffb6 	bl	80114e0 <HAL_RCC_GetHCLKFreq>
 8011574:	4602      	mov	r2, r0
 8011576:	4b06      	ldr	r3, [pc, #24]	@ (8011590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011578:	69db      	ldr	r3, [r3, #28]
 801157a:	0a1b      	lsrs	r3, r3, #8
 801157c:	f003 0307 	and.w	r3, r3, #7
 8011580:	4904      	ldr	r1, [pc, #16]	@ (8011594 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011582:	5ccb      	ldrb	r3, [r1, r3]
 8011584:	f003 031f 	and.w	r3, r3, #31
 8011588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801158c:	4618      	mov	r0, r3
 801158e:	bd80      	pop	{r7, pc}
 8011590:	58024400 	.word	0x58024400
 8011594:	0801e790 	.word	0x0801e790

08011598 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801159c:	b0c6      	sub	sp, #280	@ 0x118
 801159e:	af00      	add	r7, sp, #0
 80115a0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80115a4:	2300      	movs	r3, #0
 80115a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80115aa:	2300      	movs	r3, #0
 80115ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80115b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80115bc:	2500      	movs	r5, #0
 80115be:	ea54 0305 	orrs.w	r3, r4, r5
 80115c2:	d049      	beq.n	8011658 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80115c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80115ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80115ce:	d02f      	beq.n	8011630 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80115d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80115d4:	d828      	bhi.n	8011628 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80115d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80115da:	d01a      	beq.n	8011612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80115dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80115e0:	d822      	bhi.n	8011628 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80115e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115ea:	d007      	beq.n	80115fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80115ec:	e01c      	b.n	8011628 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80115ee:	4bab      	ldr	r3, [pc, #684]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80115f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115f2:	4aaa      	ldr	r2, [pc, #680]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80115f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80115f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80115fa:	e01a      	b.n	8011632 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80115fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011600:	3308      	adds	r3, #8
 8011602:	2102      	movs	r1, #2
 8011604:	4618      	mov	r0, r3
 8011606:	f002 fa49 	bl	8013a9c <RCCEx_PLL2_Config>
 801160a:	4603      	mov	r3, r0
 801160c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011610:	e00f      	b.n	8011632 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011616:	3328      	adds	r3, #40	@ 0x28
 8011618:	2102      	movs	r1, #2
 801161a:	4618      	mov	r0, r3
 801161c:	f002 faf0 	bl	8013c00 <RCCEx_PLL3_Config>
 8011620:	4603      	mov	r3, r0
 8011622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011626:	e004      	b.n	8011632 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011628:	2301      	movs	r3, #1
 801162a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801162e:	e000      	b.n	8011632 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011632:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011636:	2b00      	cmp	r3, #0
 8011638:	d10a      	bne.n	8011650 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801163a:	4b98      	ldr	r3, [pc, #608]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801163c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801163e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011648:	4a94      	ldr	r2, [pc, #592]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801164a:	430b      	orrs	r3, r1
 801164c:	6513      	str	r3, [r2, #80]	@ 0x50
 801164e:	e003      	b.n	8011658 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011654:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011660:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011664:	f04f 0900 	mov.w	r9, #0
 8011668:	ea58 0309 	orrs.w	r3, r8, r9
 801166c:	d047      	beq.n	80116fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801166e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011674:	2b04      	cmp	r3, #4
 8011676:	d82a      	bhi.n	80116ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011678:	a201      	add	r2, pc, #4	@ (adr r2, 8011680 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801167e:	bf00      	nop
 8011680:	08011695 	.word	0x08011695
 8011684:	080116a3 	.word	0x080116a3
 8011688:	080116b9 	.word	0x080116b9
 801168c:	080116d7 	.word	0x080116d7
 8011690:	080116d7 	.word	0x080116d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011694:	4b81      	ldr	r3, [pc, #516]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011698:	4a80      	ldr	r2, [pc, #512]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801169a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801169e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80116a0:	e01a      	b.n	80116d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80116a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116a6:	3308      	adds	r3, #8
 80116a8:	2100      	movs	r1, #0
 80116aa:	4618      	mov	r0, r3
 80116ac:	f002 f9f6 	bl	8013a9c <RCCEx_PLL2_Config>
 80116b0:	4603      	mov	r3, r0
 80116b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80116b6:	e00f      	b.n	80116d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80116b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116bc:	3328      	adds	r3, #40	@ 0x28
 80116be:	2100      	movs	r1, #0
 80116c0:	4618      	mov	r0, r3
 80116c2:	f002 fa9d 	bl	8013c00 <RCCEx_PLL3_Config>
 80116c6:	4603      	mov	r3, r0
 80116c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80116cc:	e004      	b.n	80116d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80116d4:	e000      	b.n	80116d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80116d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80116d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d10a      	bne.n	80116f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80116e0:	4b6e      	ldr	r3, [pc, #440]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80116e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116e4:	f023 0107 	bic.w	r1, r3, #7
 80116e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116ee:	4a6b      	ldr	r2, [pc, #428]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80116f0:	430b      	orrs	r3, r1
 80116f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80116f4:	e003      	b.n	80116fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80116f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80116fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80116fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011706:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 801170a:	f04f 0b00 	mov.w	fp, #0
 801170e:	ea5a 030b 	orrs.w	r3, sl, fp
 8011712:	d05b      	beq.n	80117cc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8011714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801171c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011720:	d03b      	beq.n	801179a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011722:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011726:	d834      	bhi.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011728:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801172c:	d037      	beq.n	801179e <HAL_RCCEx_PeriphCLKConfig+0x206>
 801172e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011732:	d82e      	bhi.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011734:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011738:	d033      	beq.n	80117a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801173a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801173e:	d828      	bhi.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011744:	d01a      	beq.n	801177c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801174a:	d822      	bhi.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801174c:	2b00      	cmp	r3, #0
 801174e:	d003      	beq.n	8011758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011750:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011754:	d007      	beq.n	8011766 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011756:	e01c      	b.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011758:	4b50      	ldr	r3, [pc, #320]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801175c:	4a4f      	ldr	r2, [pc, #316]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801175e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011764:	e01e      	b.n	80117a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801176a:	3308      	adds	r3, #8
 801176c:	2100      	movs	r1, #0
 801176e:	4618      	mov	r0, r3
 8011770:	f002 f994 	bl	8013a9c <RCCEx_PLL2_Config>
 8011774:	4603      	mov	r3, r0
 8011776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801177a:	e013      	b.n	80117a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801177c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011780:	3328      	adds	r3, #40	@ 0x28
 8011782:	2100      	movs	r1, #0
 8011784:	4618      	mov	r0, r3
 8011786:	f002 fa3b 	bl	8013c00 <RCCEx_PLL3_Config>
 801178a:	4603      	mov	r3, r0
 801178c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011790:	e008      	b.n	80117a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011792:	2301      	movs	r3, #1
 8011794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011798:	e004      	b.n	80117a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801179a:	bf00      	nop
 801179c:	e002      	b.n	80117a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801179e:	bf00      	nop
 80117a0:	e000      	b.n	80117a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80117a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80117a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d10b      	bne.n	80117c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80117ac:	4b3b      	ldr	r3, [pc, #236]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80117ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80117b0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80117b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80117bc:	4a37      	ldr	r2, [pc, #220]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80117be:	430b      	orrs	r3, r1
 80117c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80117c2:	e003      	b.n	80117cc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80117c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80117cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80117d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80117dc:	2300      	movs	r3, #0
 80117de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80117e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80117e6:	460b      	mov	r3, r1
 80117e8:	4313      	orrs	r3, r2
 80117ea:	d05d      	beq.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80117ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80117f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80117f8:	d03b      	beq.n	8011872 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80117fa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80117fe:	d834      	bhi.n	801186a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011800:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011804:	d037      	beq.n	8011876 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011806:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801180a:	d82e      	bhi.n	801186a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801180c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011810:	d033      	beq.n	801187a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011812:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011816:	d828      	bhi.n	801186a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011818:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801181c:	d01a      	beq.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801181e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011822:	d822      	bhi.n	801186a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011824:	2b00      	cmp	r3, #0
 8011826:	d003      	beq.n	8011830 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801182c:	d007      	beq.n	801183e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801182e:	e01c      	b.n	801186a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011830:	4b1a      	ldr	r3, [pc, #104]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011834:	4a19      	ldr	r2, [pc, #100]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801183a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801183c:	e01e      	b.n	801187c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801183e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011842:	3308      	adds	r3, #8
 8011844:	2100      	movs	r1, #0
 8011846:	4618      	mov	r0, r3
 8011848:	f002 f928 	bl	8013a9c <RCCEx_PLL2_Config>
 801184c:	4603      	mov	r3, r0
 801184e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011852:	e013      	b.n	801187c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011858:	3328      	adds	r3, #40	@ 0x28
 801185a:	2100      	movs	r1, #0
 801185c:	4618      	mov	r0, r3
 801185e:	f002 f9cf 	bl	8013c00 <RCCEx_PLL3_Config>
 8011862:	4603      	mov	r3, r0
 8011864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011868:	e008      	b.n	801187c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801186a:	2301      	movs	r3, #1
 801186c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011870:	e004      	b.n	801187c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011872:	bf00      	nop
 8011874:	e002      	b.n	801187c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011876:	bf00      	nop
 8011878:	e000      	b.n	801187c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801187a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801187c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011880:	2b00      	cmp	r3, #0
 8011882:	d10d      	bne.n	80118a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011884:	4b05      	ldr	r3, [pc, #20]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011888:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801188c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011890:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011894:	4a01      	ldr	r2, [pc, #4]	@ (801189c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011896:	430b      	orrs	r3, r1
 8011898:	6593      	str	r3, [r2, #88]	@ 0x58
 801189a:	e005      	b.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801189c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80118a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80118a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80118a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80118b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80118b8:	2300      	movs	r3, #0
 80118ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80118be:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80118c2:	460b      	mov	r3, r1
 80118c4:	4313      	orrs	r3, r2
 80118c6:	d03a      	beq.n	801193e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80118c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80118ce:	2b30      	cmp	r3, #48	@ 0x30
 80118d0:	d01f      	beq.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80118d2:	2b30      	cmp	r3, #48	@ 0x30
 80118d4:	d819      	bhi.n	801190a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80118d6:	2b20      	cmp	r3, #32
 80118d8:	d00c      	beq.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80118da:	2b20      	cmp	r3, #32
 80118dc:	d815      	bhi.n	801190a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d019      	beq.n	8011916 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80118e2:	2b10      	cmp	r3, #16
 80118e4:	d111      	bne.n	801190a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80118e6:	4baa      	ldr	r3, [pc, #680]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80118e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ea:	4aa9      	ldr	r2, [pc, #676]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80118ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80118f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80118f2:	e011      	b.n	8011918 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80118f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118f8:	3308      	adds	r3, #8
 80118fa:	2102      	movs	r1, #2
 80118fc:	4618      	mov	r0, r3
 80118fe:	f002 f8cd 	bl	8013a9c <RCCEx_PLL2_Config>
 8011902:	4603      	mov	r3, r0
 8011904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011908:	e006      	b.n	8011918 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801190a:	2301      	movs	r3, #1
 801190c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011910:	e002      	b.n	8011918 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011912:	bf00      	nop
 8011914:	e000      	b.n	8011918 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801191c:	2b00      	cmp	r3, #0
 801191e:	d10a      	bne.n	8011936 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011920:	4b9b      	ldr	r3, [pc, #620]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011924:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8011928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801192e:	4a98      	ldr	r2, [pc, #608]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011930:	430b      	orrs	r3, r1
 8011932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011934:	e003      	b.n	801193e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801193a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801193e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011946:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801194a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801194e:	2300      	movs	r3, #0
 8011950:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8011954:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8011958:	460b      	mov	r3, r1
 801195a:	4313      	orrs	r3, r2
 801195c:	d051      	beq.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801195e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011968:	d035      	beq.n	80119d6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801196a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801196e:	d82e      	bhi.n	80119ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011970:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011974:	d031      	beq.n	80119da <HAL_RCCEx_PeriphCLKConfig+0x442>
 8011976:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801197a:	d828      	bhi.n	80119ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 801197c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011980:	d01a      	beq.n	80119b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8011982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011986:	d822      	bhi.n	80119ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011988:	2b00      	cmp	r3, #0
 801198a:	d003      	beq.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801198c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011990:	d007      	beq.n	80119a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8011992:	e01c      	b.n	80119ce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011994:	4b7e      	ldr	r3, [pc, #504]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011998:	4a7d      	ldr	r2, [pc, #500]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801199a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801199e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80119a0:	e01c      	b.n	80119dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80119a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119a6:	3308      	adds	r3, #8
 80119a8:	2100      	movs	r1, #0
 80119aa:	4618      	mov	r0, r3
 80119ac:	f002 f876 	bl	8013a9c <RCCEx_PLL2_Config>
 80119b0:	4603      	mov	r3, r0
 80119b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80119b6:	e011      	b.n	80119dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80119b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119bc:	3328      	adds	r3, #40	@ 0x28
 80119be:	2100      	movs	r1, #0
 80119c0:	4618      	mov	r0, r3
 80119c2:	f002 f91d 	bl	8013c00 <RCCEx_PLL3_Config>
 80119c6:	4603      	mov	r3, r0
 80119c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80119cc:	e006      	b.n	80119dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80119ce:	2301      	movs	r3, #1
 80119d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80119d4:	e002      	b.n	80119dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80119d6:	bf00      	nop
 80119d8:	e000      	b.n	80119dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80119da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80119dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d10a      	bne.n	80119fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80119e4:	4b6a      	ldr	r3, [pc, #424]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80119e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80119ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80119f2:	4a67      	ldr	r2, [pc, #412]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80119f4:	430b      	orrs	r3, r1
 80119f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80119f8:	e003      	b.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8011a0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011a12:	2300      	movs	r3, #0
 8011a14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011a18:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	d053      	beq.n	8011aca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8011a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011a2c:	d033      	beq.n	8011a96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8011a2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011a32:	d82c      	bhi.n	8011a8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011a34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011a38:	d02f      	beq.n	8011a9a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8011a3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011a3e:	d826      	bhi.n	8011a8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011a40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011a44:	d02b      	beq.n	8011a9e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8011a46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011a4a:	d820      	bhi.n	8011a8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011a4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011a50:	d012      	beq.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8011a52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011a56:	d81a      	bhi.n	8011a8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d022      	beq.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8011a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011a60:	d115      	bne.n	8011a8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a66:	3308      	adds	r3, #8
 8011a68:	2101      	movs	r1, #1
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f002 f816 	bl	8013a9c <RCCEx_PLL2_Config>
 8011a70:	4603      	mov	r3, r0
 8011a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8011a76:	e015      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a7c:	3328      	adds	r3, #40	@ 0x28
 8011a7e:	2101      	movs	r1, #1
 8011a80:	4618      	mov	r0, r3
 8011a82:	f002 f8bd 	bl	8013c00 <RCCEx_PLL3_Config>
 8011a86:	4603      	mov	r3, r0
 8011a88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8011a8c:	e00a      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011a94:	e006      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011a96:	bf00      	nop
 8011a98:	e004      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011a9a:	bf00      	nop
 8011a9c:	e002      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011a9e:	bf00      	nop
 8011aa0:	e000      	b.n	8011aa4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10a      	bne.n	8011ac2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011aac:	4b38      	ldr	r3, [pc, #224]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ab0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011aba:	4a35      	ldr	r2, [pc, #212]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011abc:	430b      	orrs	r3, r1
 8011abe:	6513      	str	r3, [r2, #80]	@ 0x50
 8011ac0:	e003      	b.n	8011aca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ac6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8011ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011ada:	2300      	movs	r3, #0
 8011adc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8011ae0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	4313      	orrs	r3, r2
 8011ae8:	d058      	beq.n	8011b9c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8011aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011aee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011af6:	d033      	beq.n	8011b60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8011af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011afc:	d82c      	bhi.n	8011b58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b02:	d02f      	beq.n	8011b64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8011b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b08:	d826      	bhi.n	8011b58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011b0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011b0e:	d02b      	beq.n	8011b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8011b10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011b14:	d820      	bhi.n	8011b58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011b1a:	d012      	beq.n	8011b42 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8011b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011b20:	d81a      	bhi.n	8011b58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d022      	beq.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8011b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011b2a:	d115      	bne.n	8011b58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b30:	3308      	adds	r3, #8
 8011b32:	2101      	movs	r1, #1
 8011b34:	4618      	mov	r0, r3
 8011b36:	f001 ffb1 	bl	8013a9c <RCCEx_PLL2_Config>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8011b40:	e015      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b46:	3328      	adds	r3, #40	@ 0x28
 8011b48:	2101      	movs	r1, #1
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f002 f858 	bl	8013c00 <RCCEx_PLL3_Config>
 8011b50:	4603      	mov	r3, r0
 8011b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8011b56:	e00a      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8011b58:	2301      	movs	r3, #1
 8011b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011b5e:	e006      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011b60:	bf00      	nop
 8011b62:	e004      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011b64:	bf00      	nop
 8011b66:	e002      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011b68:	bf00      	nop
 8011b6a:	e000      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d10e      	bne.n	8011b94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011b76:	4b06      	ldr	r3, [pc, #24]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8011b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011b86:	4a02      	ldr	r2, [pc, #8]	@ (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011b88:	430b      	orrs	r3, r1
 8011b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8011b8c:	e006      	b.n	8011b9c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8011b8e:	bf00      	nop
 8011b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8011ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011bac:	2300      	movs	r3, #0
 8011bae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011bb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	d037      	beq.n	8011c2c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8011bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011bc6:	d00e      	beq.n	8011be6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8011bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011bcc:	d816      	bhi.n	8011bfc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d018      	beq.n	8011c04 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8011bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011bd6:	d111      	bne.n	8011bfc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011bd8:	4bc4      	ldr	r3, [pc, #784]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bdc:	4ac3      	ldr	r2, [pc, #780]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8011be4:	e00f      	b.n	8011c06 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bea:	3308      	adds	r3, #8
 8011bec:	2101      	movs	r1, #1
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f001 ff54 	bl	8013a9c <RCCEx_PLL2_Config>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8011bfa:	e004      	b.n	8011c06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011c02:	e000      	b.n	8011c06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8011c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d10a      	bne.n	8011c24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011c0e:	4bb7      	ldr	r3, [pc, #732]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8011c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c1c:	4ab3      	ldr	r2, [pc, #716]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011c1e:	430b      	orrs	r3, r1
 8011c20:	6513      	str	r3, [r2, #80]	@ 0x50
 8011c22:	e003      	b.n	8011c2c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8011c38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011c42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8011c46:	460b      	mov	r3, r1
 8011c48:	4313      	orrs	r3, r2
 8011c4a:	d039      	beq.n	8011cc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8011c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c52:	2b03      	cmp	r3, #3
 8011c54:	d81c      	bhi.n	8011c90 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8011c56:	a201      	add	r2, pc, #4	@ (adr r2, 8011c5c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8011c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c5c:	08011c99 	.word	0x08011c99
 8011c60:	08011c6d 	.word	0x08011c6d
 8011c64:	08011c7b 	.word	0x08011c7b
 8011c68:	08011c99 	.word	0x08011c99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011c6c:	4b9f      	ldr	r3, [pc, #636]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c70:	4a9e      	ldr	r2, [pc, #632]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8011c78:	e00f      	b.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c7e:	3308      	adds	r3, #8
 8011c80:	2102      	movs	r1, #2
 8011c82:	4618      	mov	r0, r3
 8011c84:	f001 ff0a 	bl	8013a9c <RCCEx_PLL2_Config>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8011c8e:	e004      	b.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011c90:	2301      	movs	r3, #1
 8011c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011c96:	e000      	b.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8011c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d10a      	bne.n	8011cb8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011ca2:	4b92      	ldr	r3, [pc, #584]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ca6:	f023 0103 	bic.w	r1, r3, #3
 8011caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011cb0:	4a8e      	ldr	r2, [pc, #568]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011cb2:	430b      	orrs	r3, r1
 8011cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011cb6:	e003      	b.n	8011cc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011cbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8011ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011cd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011cda:	460b      	mov	r3, r1
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	f000 8099 	beq.w	8011e14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011ce2:	4b83      	ldr	r3, [pc, #524]	@ (8011ef0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4a82      	ldr	r2, [pc, #520]	@ (8011ef0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011cee:	f7f6 fec3 	bl	8008a78 <HAL_GetTick>
 8011cf2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011cf6:	e00b      	b.n	8011d10 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011cf8:	f7f6 febe 	bl	8008a78 <HAL_GetTick>
 8011cfc:	4602      	mov	r2, r0
 8011cfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8011d02:	1ad3      	subs	r3, r2, r3
 8011d04:	2b64      	cmp	r3, #100	@ 0x64
 8011d06:	d903      	bls.n	8011d10 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8011d08:	2303      	movs	r3, #3
 8011d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011d0e:	e005      	b.n	8011d1c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011d10:	4b77      	ldr	r3, [pc, #476]	@ (8011ef0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d0ed      	beq.n	8011cf8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8011d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d173      	bne.n	8011e0c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011d24:	4b71      	ldr	r3, [pc, #452]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011d26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011d30:	4053      	eors	r3, r2
 8011d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d015      	beq.n	8011d66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011d42:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011d46:	4b69      	ldr	r3, [pc, #420]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d4a:	4a68      	ldr	r2, [pc, #416]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011d50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011d52:	4b66      	ldr	r3, [pc, #408]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d56:	4a65      	ldr	r2, [pc, #404]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011d5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011d5e:	4a63      	ldr	r2, [pc, #396]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011d64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8011d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011d72:	d118      	bne.n	8011da6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d74:	f7f6 fe80 	bl	8008a78 <HAL_GetTick>
 8011d78:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011d7c:	e00d      	b.n	8011d9a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011d7e:	f7f6 fe7b 	bl	8008a78 <HAL_GetTick>
 8011d82:	4602      	mov	r2, r0
 8011d84:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8011d88:	1ad2      	subs	r2, r2, r3
 8011d8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d903      	bls.n	8011d9a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8011d92:	2303      	movs	r3, #3
 8011d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8011d98:	e005      	b.n	8011da6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011d9a:	4b54      	ldr	r3, [pc, #336]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d9e:	f003 0302 	and.w	r3, r3, #2
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d0eb      	beq.n	8011d7e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8011da6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d129      	bne.n	8011e02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011dbe:	d10e      	bne.n	8011dde <HAL_RCCEx_PeriphCLKConfig+0x846>
 8011dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011dc2:	691b      	ldr	r3, [r3, #16]
 8011dc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011dd0:	091a      	lsrs	r2, r3, #4
 8011dd2:	4b48      	ldr	r3, [pc, #288]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8011dd4:	4013      	ands	r3, r2
 8011dd6:	4a45      	ldr	r2, [pc, #276]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011dd8:	430b      	orrs	r3, r1
 8011dda:	6113      	str	r3, [r2, #16]
 8011ddc:	e005      	b.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x852>
 8011dde:	4b43      	ldr	r3, [pc, #268]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011de0:	691b      	ldr	r3, [r3, #16]
 8011de2:	4a42      	ldr	r2, [pc, #264]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011de4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011de8:	6113      	str	r3, [r2, #16]
 8011dea:	4b40      	ldr	r3, [pc, #256]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011dec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8011eec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011dfc:	430b      	orrs	r3, r1
 8011dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8011e00:	e008      	b.n	8011e14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011e02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011e0a:	e003      	b.n	8011e14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1c:	f002 0301 	and.w	r3, r2, #1
 8011e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011e24:	2300      	movs	r3, #0
 8011e26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011e2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8011e2e:	460b      	mov	r3, r1
 8011e30:	4313      	orrs	r3, r2
 8011e32:	f000 808f 	beq.w	8011f54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8011e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e3c:	2b28      	cmp	r3, #40	@ 0x28
 8011e3e:	d871      	bhi.n	8011f24 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8011e40:	a201      	add	r2, pc, #4	@ (adr r2, 8011e48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8011e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e46:	bf00      	nop
 8011e48:	08011f2d 	.word	0x08011f2d
 8011e4c:	08011f25 	.word	0x08011f25
 8011e50:	08011f25 	.word	0x08011f25
 8011e54:	08011f25 	.word	0x08011f25
 8011e58:	08011f25 	.word	0x08011f25
 8011e5c:	08011f25 	.word	0x08011f25
 8011e60:	08011f25 	.word	0x08011f25
 8011e64:	08011f25 	.word	0x08011f25
 8011e68:	08011ef9 	.word	0x08011ef9
 8011e6c:	08011f25 	.word	0x08011f25
 8011e70:	08011f25 	.word	0x08011f25
 8011e74:	08011f25 	.word	0x08011f25
 8011e78:	08011f25 	.word	0x08011f25
 8011e7c:	08011f25 	.word	0x08011f25
 8011e80:	08011f25 	.word	0x08011f25
 8011e84:	08011f25 	.word	0x08011f25
 8011e88:	08011f0f 	.word	0x08011f0f
 8011e8c:	08011f25 	.word	0x08011f25
 8011e90:	08011f25 	.word	0x08011f25
 8011e94:	08011f25 	.word	0x08011f25
 8011e98:	08011f25 	.word	0x08011f25
 8011e9c:	08011f25 	.word	0x08011f25
 8011ea0:	08011f25 	.word	0x08011f25
 8011ea4:	08011f25 	.word	0x08011f25
 8011ea8:	08011f2d 	.word	0x08011f2d
 8011eac:	08011f25 	.word	0x08011f25
 8011eb0:	08011f25 	.word	0x08011f25
 8011eb4:	08011f25 	.word	0x08011f25
 8011eb8:	08011f25 	.word	0x08011f25
 8011ebc:	08011f25 	.word	0x08011f25
 8011ec0:	08011f25 	.word	0x08011f25
 8011ec4:	08011f25 	.word	0x08011f25
 8011ec8:	08011f2d 	.word	0x08011f2d
 8011ecc:	08011f25 	.word	0x08011f25
 8011ed0:	08011f25 	.word	0x08011f25
 8011ed4:	08011f25 	.word	0x08011f25
 8011ed8:	08011f25 	.word	0x08011f25
 8011edc:	08011f25 	.word	0x08011f25
 8011ee0:	08011f25 	.word	0x08011f25
 8011ee4:	08011f25 	.word	0x08011f25
 8011ee8:	08011f2d 	.word	0x08011f2d
 8011eec:	58024400 	.word	0x58024400
 8011ef0:	58024800 	.word	0x58024800
 8011ef4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011efc:	3308      	adds	r3, #8
 8011efe:	2101      	movs	r1, #1
 8011f00:	4618      	mov	r0, r3
 8011f02:	f001 fdcb 	bl	8013a9c <RCCEx_PLL2_Config>
 8011f06:	4603      	mov	r3, r0
 8011f08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011f0c:	e00f      	b.n	8011f2e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f12:	3328      	adds	r3, #40	@ 0x28
 8011f14:	2101      	movs	r1, #1
 8011f16:	4618      	mov	r0, r3
 8011f18:	f001 fe72 	bl	8013c00 <RCCEx_PLL3_Config>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011f22:	e004      	b.n	8011f2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011f24:	2301      	movs	r3, #1
 8011f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011f2a:	e000      	b.n	8011f2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8011f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d10a      	bne.n	8011f4c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011f36:	4bbf      	ldr	r3, [pc, #764]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8011f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f44:	4abb      	ldr	r2, [pc, #748]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011f46:	430b      	orrs	r3, r1
 8011f48:	6553      	str	r3, [r2, #84]	@ 0x54
 8011f4a:	e003      	b.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5c:	f002 0302 	and.w	r3, r2, #2
 8011f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011f64:	2300      	movs	r3, #0
 8011f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011f6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8011f6e:	460b      	mov	r3, r1
 8011f70:	4313      	orrs	r3, r2
 8011f72:	d041      	beq.n	8011ff8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8011f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f7a:	2b05      	cmp	r3, #5
 8011f7c:	d824      	bhi.n	8011fc8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8011f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8011f84 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8011f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f84:	08011fd1 	.word	0x08011fd1
 8011f88:	08011f9d 	.word	0x08011f9d
 8011f8c:	08011fb3 	.word	0x08011fb3
 8011f90:	08011fd1 	.word	0x08011fd1
 8011f94:	08011fd1 	.word	0x08011fd1
 8011f98:	08011fd1 	.word	0x08011fd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fa0:	3308      	adds	r3, #8
 8011fa2:	2101      	movs	r1, #1
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f001 fd79 	bl	8013a9c <RCCEx_PLL2_Config>
 8011faa:	4603      	mov	r3, r0
 8011fac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011fb0:	e00f      	b.n	8011fd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fb6:	3328      	adds	r3, #40	@ 0x28
 8011fb8:	2101      	movs	r1, #1
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f001 fe20 	bl	8013c00 <RCCEx_PLL3_Config>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011fc6:	e004      	b.n	8011fd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011fc8:	2301      	movs	r3, #1
 8011fca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011fce:	e000      	b.n	8011fd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8011fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10a      	bne.n	8011ff0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011fda:	4b96      	ldr	r3, [pc, #600]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fde:	f023 0107 	bic.w	r1, r3, #7
 8011fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fe8:	4a92      	ldr	r2, [pc, #584]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011fea:	430b      	orrs	r3, r1
 8011fec:	6553      	str	r3, [r2, #84]	@ 0x54
 8011fee:	e003      	b.n	8011ff8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012000:	f002 0304 	and.w	r3, r2, #4
 8012004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012008:	2300      	movs	r3, #0
 801200a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801200e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012012:	460b      	mov	r3, r1
 8012014:	4313      	orrs	r3, r2
 8012016:	d044      	beq.n	80120a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012020:	2b05      	cmp	r3, #5
 8012022:	d825      	bhi.n	8012070 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012024:	a201      	add	r2, pc, #4	@ (adr r2, 801202c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801202a:	bf00      	nop
 801202c:	08012079 	.word	0x08012079
 8012030:	08012045 	.word	0x08012045
 8012034:	0801205b 	.word	0x0801205b
 8012038:	08012079 	.word	0x08012079
 801203c:	08012079 	.word	0x08012079
 8012040:	08012079 	.word	0x08012079
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012048:	3308      	adds	r3, #8
 801204a:	2101      	movs	r1, #1
 801204c:	4618      	mov	r0, r3
 801204e:	f001 fd25 	bl	8013a9c <RCCEx_PLL2_Config>
 8012052:	4603      	mov	r3, r0
 8012054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012058:	e00f      	b.n	801207a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801205a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801205e:	3328      	adds	r3, #40	@ 0x28
 8012060:	2101      	movs	r1, #1
 8012062:	4618      	mov	r0, r3
 8012064:	f001 fdcc 	bl	8013c00 <RCCEx_PLL3_Config>
 8012068:	4603      	mov	r3, r0
 801206a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801206e:	e004      	b.n	801207a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012070:	2301      	movs	r3, #1
 8012072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012076:	e000      	b.n	801207a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012078:	bf00      	nop
    }

    if (ret == HAL_OK)
 801207a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801207e:	2b00      	cmp	r3, #0
 8012080:	d10b      	bne.n	801209a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012082:	4b6c      	ldr	r3, [pc, #432]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012086:	f023 0107 	bic.w	r1, r3, #7
 801208a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012092:	4a68      	ldr	r2, [pc, #416]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012094:	430b      	orrs	r3, r1
 8012096:	6593      	str	r3, [r2, #88]	@ 0x58
 8012098:	e003      	b.n	80120a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801209a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801209e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80120a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120aa:	f002 0320 	and.w	r3, r2, #32
 80120ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80120b2:	2300      	movs	r3, #0
 80120b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80120b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80120bc:	460b      	mov	r3, r1
 80120be:	4313      	orrs	r3, r2
 80120c0:	d055      	beq.n	801216e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80120c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80120ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80120ce:	d033      	beq.n	8012138 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80120d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80120d4:	d82c      	bhi.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80120d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120da:	d02f      	beq.n	801213c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80120dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120e0:	d826      	bhi.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80120e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80120e6:	d02b      	beq.n	8012140 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80120e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80120ec:	d820      	bhi.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80120ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80120f2:	d012      	beq.n	801211a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80120f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80120f8:	d81a      	bhi.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d022      	beq.n	8012144 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80120fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012102:	d115      	bne.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012108:	3308      	adds	r3, #8
 801210a:	2100      	movs	r1, #0
 801210c:	4618      	mov	r0, r3
 801210e:	f001 fcc5 	bl	8013a9c <RCCEx_PLL2_Config>
 8012112:	4603      	mov	r3, r0
 8012114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012118:	e015      	b.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801211a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801211e:	3328      	adds	r3, #40	@ 0x28
 8012120:	2102      	movs	r1, #2
 8012122:	4618      	mov	r0, r3
 8012124:	f001 fd6c 	bl	8013c00 <RCCEx_PLL3_Config>
 8012128:	4603      	mov	r3, r0
 801212a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801212e:	e00a      	b.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012130:	2301      	movs	r3, #1
 8012132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012136:	e006      	b.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012138:	bf00      	nop
 801213a:	e004      	b.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801213c:	bf00      	nop
 801213e:	e002      	b.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012140:	bf00      	nop
 8012142:	e000      	b.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10b      	bne.n	8012166 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801214e:	4b39      	ldr	r3, [pc, #228]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012152:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801215e:	4a35      	ldr	r2, [pc, #212]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012160:	430b      	orrs	r3, r1
 8012162:	6553      	str	r3, [r2, #84]	@ 0x54
 8012164:	e003      	b.n	801216e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801216a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801216e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801217a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801217e:	2300      	movs	r3, #0
 8012180:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012184:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012188:	460b      	mov	r3, r1
 801218a:	4313      	orrs	r3, r2
 801218c:	d058      	beq.n	8012240 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801218e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012192:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012196:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801219a:	d033      	beq.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801219c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80121a0:	d82c      	bhi.n	80121fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80121a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80121a6:	d02f      	beq.n	8012208 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80121a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80121ac:	d826      	bhi.n	80121fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80121ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80121b2:	d02b      	beq.n	801220c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80121b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80121b8:	d820      	bhi.n	80121fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80121ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80121be:	d012      	beq.n	80121e6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80121c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80121c4:	d81a      	bhi.n	80121fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d022      	beq.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80121ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121ce:	d115      	bne.n	80121fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80121d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121d4:	3308      	adds	r3, #8
 80121d6:	2100      	movs	r1, #0
 80121d8:	4618      	mov	r0, r3
 80121da:	f001 fc5f 	bl	8013a9c <RCCEx_PLL2_Config>
 80121de:	4603      	mov	r3, r0
 80121e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80121e4:	e015      	b.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80121e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121ea:	3328      	adds	r3, #40	@ 0x28
 80121ec:	2102      	movs	r1, #2
 80121ee:	4618      	mov	r0, r3
 80121f0:	f001 fd06 	bl	8013c00 <RCCEx_PLL3_Config>
 80121f4:	4603      	mov	r3, r0
 80121f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80121fa:	e00a      	b.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80121fc:	2301      	movs	r3, #1
 80121fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012202:	e006      	b.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012204:	bf00      	nop
 8012206:	e004      	b.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012208:	bf00      	nop
 801220a:	e002      	b.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801220c:	bf00      	nop
 801220e:	e000      	b.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012212:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012216:	2b00      	cmp	r3, #0
 8012218:	d10e      	bne.n	8012238 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801221a:	4b06      	ldr	r3, [pc, #24]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801221e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012226:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801222a:	4a02      	ldr	r2, [pc, #8]	@ (8012234 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801222c:	430b      	orrs	r3, r1
 801222e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012230:	e006      	b.n	8012240 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012232:	bf00      	nop
 8012234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801223c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012248:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801224c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012250:	2300      	movs	r3, #0
 8012252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012256:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801225a:	460b      	mov	r3, r1
 801225c:	4313      	orrs	r3, r2
 801225e:	d055      	beq.n	801230c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012264:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012268:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801226c:	d033      	beq.n	80122d6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801226e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012272:	d82c      	bhi.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012278:	d02f      	beq.n	80122da <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801227a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801227e:	d826      	bhi.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012280:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012284:	d02b      	beq.n	80122de <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012286:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801228a:	d820      	bhi.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801228c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012290:	d012      	beq.n	80122b8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012296:	d81a      	bhi.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012298:	2b00      	cmp	r3, #0
 801229a:	d022      	beq.n	80122e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801229c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80122a0:	d115      	bne.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80122a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122a6:	3308      	adds	r3, #8
 80122a8:	2100      	movs	r1, #0
 80122aa:	4618      	mov	r0, r3
 80122ac:	f001 fbf6 	bl	8013a9c <RCCEx_PLL2_Config>
 80122b0:	4603      	mov	r3, r0
 80122b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80122b6:	e015      	b.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80122b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122bc:	3328      	adds	r3, #40	@ 0x28
 80122be:	2102      	movs	r1, #2
 80122c0:	4618      	mov	r0, r3
 80122c2:	f001 fc9d 	bl	8013c00 <RCCEx_PLL3_Config>
 80122c6:	4603      	mov	r3, r0
 80122c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80122cc:	e00a      	b.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80122ce:	2301      	movs	r3, #1
 80122d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122d4:	e006      	b.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80122d6:	bf00      	nop
 80122d8:	e004      	b.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80122da:	bf00      	nop
 80122dc:	e002      	b.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80122de:	bf00      	nop
 80122e0:	e000      	b.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80122e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d10b      	bne.n	8012304 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80122ec:	4ba0      	ldr	r3, [pc, #640]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80122ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80122f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80122fc:	4a9c      	ldr	r2, [pc, #624]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80122fe:	430b      	orrs	r3, r1
 8012300:	6593      	str	r3, [r2, #88]	@ 0x58
 8012302:	e003      	b.n	801230c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801230c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012314:	f002 0308 	and.w	r3, r2, #8
 8012318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801231c:	2300      	movs	r3, #0
 801231e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012322:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012326:	460b      	mov	r3, r1
 8012328:	4313      	orrs	r3, r2
 801232a:	d01e      	beq.n	801236a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801232c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012338:	d10c      	bne.n	8012354 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801233a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801233e:	3328      	adds	r3, #40	@ 0x28
 8012340:	2102      	movs	r1, #2
 8012342:	4618      	mov	r0, r3
 8012344:	f001 fc5c 	bl	8013c00 <RCCEx_PLL3_Config>
 8012348:	4603      	mov	r3, r0
 801234a:	2b00      	cmp	r3, #0
 801234c:	d002      	beq.n	8012354 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801234e:	2301      	movs	r3, #1
 8012350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012354:	4b86      	ldr	r3, [pc, #536]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012358:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801235c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012364:	4a82      	ldr	r2, [pc, #520]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012366:	430b      	orrs	r3, r1
 8012368:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801236a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012372:	f002 0310 	and.w	r3, r2, #16
 8012376:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801237a:	2300      	movs	r3, #0
 801237c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012380:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012384:	460b      	mov	r3, r1
 8012386:	4313      	orrs	r3, r2
 8012388:	d01e      	beq.n	80123c8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801238a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801238e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012396:	d10c      	bne.n	80123b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801239c:	3328      	adds	r3, #40	@ 0x28
 801239e:	2102      	movs	r1, #2
 80123a0:	4618      	mov	r0, r3
 80123a2:	f001 fc2d 	bl	8013c00 <RCCEx_PLL3_Config>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80123ac:	2301      	movs	r3, #1
 80123ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80123b2:	4b6f      	ldr	r3, [pc, #444]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80123b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80123ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80123c2:	4a6b      	ldr	r2, [pc, #428]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80123c4:	430b      	orrs	r3, r1
 80123c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80123c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80123d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80123d6:	2300      	movs	r3, #0
 80123d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80123da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80123de:	460b      	mov	r3, r1
 80123e0:	4313      	orrs	r3, r2
 80123e2:	d03e      	beq.n	8012462 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80123e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80123ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80123f0:	d022      	beq.n	8012438 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80123f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80123f6:	d81b      	bhi.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d003      	beq.n	8012404 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80123fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012400:	d00b      	beq.n	801241a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012402:	e015      	b.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012408:	3308      	adds	r3, #8
 801240a:	2100      	movs	r1, #0
 801240c:	4618      	mov	r0, r3
 801240e:	f001 fb45 	bl	8013a9c <RCCEx_PLL2_Config>
 8012412:	4603      	mov	r3, r0
 8012414:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012418:	e00f      	b.n	801243a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801241a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801241e:	3328      	adds	r3, #40	@ 0x28
 8012420:	2102      	movs	r1, #2
 8012422:	4618      	mov	r0, r3
 8012424:	f001 fbec 	bl	8013c00 <RCCEx_PLL3_Config>
 8012428:	4603      	mov	r3, r0
 801242a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801242e:	e004      	b.n	801243a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012430:	2301      	movs	r3, #1
 8012432:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012436:	e000      	b.n	801243a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012438:	bf00      	nop
    }

    if (ret == HAL_OK)
 801243a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801243e:	2b00      	cmp	r3, #0
 8012440:	d10b      	bne.n	801245a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012442:	4b4b      	ldr	r3, [pc, #300]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012446:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801244a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801244e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012452:	4a47      	ldr	r2, [pc, #284]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012454:	430b      	orrs	r3, r1
 8012456:	6593      	str	r3, [r2, #88]	@ 0x58
 8012458:	e003      	b.n	8012462 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801245a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801245e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801246e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012470:	2300      	movs	r3, #0
 8012472:	677b      	str	r3, [r7, #116]	@ 0x74
 8012474:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012478:	460b      	mov	r3, r1
 801247a:	4313      	orrs	r3, r2
 801247c:	d03b      	beq.n	80124f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801247e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012486:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801248a:	d01f      	beq.n	80124cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801248c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012490:	d818      	bhi.n	80124c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012496:	d003      	beq.n	80124a0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012498:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801249c:	d007      	beq.n	80124ae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801249e:	e011      	b.n	80124c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80124a0:	4b33      	ldr	r3, [pc, #204]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80124a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124a4:	4a32      	ldr	r2, [pc, #200]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80124a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80124ac:	e00f      	b.n	80124ce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80124ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124b2:	3328      	adds	r3, #40	@ 0x28
 80124b4:	2101      	movs	r1, #1
 80124b6:	4618      	mov	r0, r3
 80124b8:	f001 fba2 	bl	8013c00 <RCCEx_PLL3_Config>
 80124bc:	4603      	mov	r3, r0
 80124be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80124c2:	e004      	b.n	80124ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124c4:	2301      	movs	r3, #1
 80124c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124ca:	e000      	b.n	80124ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80124cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d10b      	bne.n	80124ee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80124d6:	4b26      	ldr	r3, [pc, #152]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80124d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80124de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80124e6:	4a22      	ldr	r2, [pc, #136]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80124e8:	430b      	orrs	r3, r1
 80124ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80124ec:	e003      	b.n	80124f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80124f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012502:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012504:	2300      	movs	r3, #0
 8012506:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012508:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801250c:	460b      	mov	r3, r1
 801250e:	4313      	orrs	r3, r2
 8012510:	d034      	beq.n	801257c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012518:	2b00      	cmp	r3, #0
 801251a:	d003      	beq.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801251c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012520:	d007      	beq.n	8012532 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012522:	e011      	b.n	8012548 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012524:	4b12      	ldr	r3, [pc, #72]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012528:	4a11      	ldr	r2, [pc, #68]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801252a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801252e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012530:	e00e      	b.n	8012550 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012536:	3308      	adds	r3, #8
 8012538:	2102      	movs	r1, #2
 801253a:	4618      	mov	r0, r3
 801253c:	f001 faae 	bl	8013a9c <RCCEx_PLL2_Config>
 8012540:	4603      	mov	r3, r0
 8012542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012546:	e003      	b.n	8012550 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012548:	2301      	movs	r3, #1
 801254a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801254e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012554:	2b00      	cmp	r3, #0
 8012556:	d10d      	bne.n	8012574 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012558:	4b05      	ldr	r3, [pc, #20]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801255c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012566:	4a02      	ldr	r2, [pc, #8]	@ (8012570 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012568:	430b      	orrs	r3, r1
 801256a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801256c:	e006      	b.n	801257c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801256e:	bf00      	nop
 8012570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801257c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012584:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012588:	663b      	str	r3, [r7, #96]	@ 0x60
 801258a:	2300      	movs	r3, #0
 801258c:	667b      	str	r3, [r7, #100]	@ 0x64
 801258e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012592:	460b      	mov	r3, r1
 8012594:	4313      	orrs	r3, r2
 8012596:	d00c      	beq.n	80125b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801259c:	3328      	adds	r3, #40	@ 0x28
 801259e:	2102      	movs	r1, #2
 80125a0:	4618      	mov	r0, r3
 80125a2:	f001 fb2d 	bl	8013c00 <RCCEx_PLL3_Config>
 80125a6:	4603      	mov	r3, r0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d002      	beq.n	80125b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80125ac:	2301      	movs	r3, #1
 80125ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80125b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80125be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80125c0:	2300      	movs	r3, #0
 80125c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80125c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80125c8:	460b      	mov	r3, r1
 80125ca:	4313      	orrs	r3, r2
 80125cc:	d036      	beq.n	801263c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80125ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80125d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80125d8:	d018      	beq.n	801260c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80125da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80125de:	d811      	bhi.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80125e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80125e4:	d014      	beq.n	8012610 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80125e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80125ea:	d80b      	bhi.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d011      	beq.n	8012614 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80125f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125f4:	d106      	bne.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80125f6:	4bb7      	ldr	r3, [pc, #732]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80125f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125fa:	4ab6      	ldr	r2, [pc, #728]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80125fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8012602:	e008      	b.n	8012616 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012604:	2301      	movs	r3, #1
 8012606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801260a:	e004      	b.n	8012616 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801260c:	bf00      	nop
 801260e:	e002      	b.n	8012616 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012610:	bf00      	nop
 8012612:	e000      	b.n	8012616 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801261a:	2b00      	cmp	r3, #0
 801261c:	d10a      	bne.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801261e:	4bad      	ldr	r3, [pc, #692]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012622:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801262a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801262c:	4aa9      	ldr	r2, [pc, #676]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801262e:	430b      	orrs	r3, r1
 8012630:	6553      	str	r3, [r2, #84]	@ 0x54
 8012632:	e003      	b.n	801263c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801263c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012644:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012648:	653b      	str	r3, [r7, #80]	@ 0x50
 801264a:	2300      	movs	r3, #0
 801264c:	657b      	str	r3, [r7, #84]	@ 0x54
 801264e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012652:	460b      	mov	r3, r1
 8012654:	4313      	orrs	r3, r2
 8012656:	d009      	beq.n	801266c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012658:	4b9e      	ldr	r3, [pc, #632]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801265a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801265c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012666:	4a9b      	ldr	r2, [pc, #620]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012668:	430b      	orrs	r3, r1
 801266a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801266c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012674:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012678:	64bb      	str	r3, [r7, #72]	@ 0x48
 801267a:	2300      	movs	r3, #0
 801267c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801267e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8012682:	460b      	mov	r3, r1
 8012684:	4313      	orrs	r3, r2
 8012686:	d009      	beq.n	801269c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012688:	4b92      	ldr	r3, [pc, #584]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801268a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801268c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012696:	4a8f      	ldr	r2, [pc, #572]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012698:	430b      	orrs	r3, r1
 801269a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801269c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80126a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80126aa:	2300      	movs	r3, #0
 80126ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80126ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80126b2:	460b      	mov	r3, r1
 80126b4:	4313      	orrs	r3, r2
 80126b6:	d00e      	beq.n	80126d6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80126b8:	4b86      	ldr	r3, [pc, #536]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80126ba:	691b      	ldr	r3, [r3, #16]
 80126bc:	4a85      	ldr	r2, [pc, #532]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80126be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80126c2:	6113      	str	r3, [r2, #16]
 80126c4:	4b83      	ldr	r3, [pc, #524]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80126c6:	6919      	ldr	r1, [r3, #16]
 80126c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80126d0:	4a80      	ldr	r2, [pc, #512]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80126d2:	430b      	orrs	r3, r1
 80126d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80126d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80126e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80126e4:	2300      	movs	r3, #0
 80126e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80126ec:	460b      	mov	r3, r1
 80126ee:	4313      	orrs	r3, r2
 80126f0:	d009      	beq.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80126f2:	4b78      	ldr	r3, [pc, #480]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80126f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80126f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80126fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012700:	4a74      	ldr	r2, [pc, #464]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012702:	430b      	orrs	r3, r1
 8012704:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012712:	633b      	str	r3, [r7, #48]	@ 0x30
 8012714:	2300      	movs	r3, #0
 8012716:	637b      	str	r3, [r7, #52]	@ 0x34
 8012718:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801271c:	460b      	mov	r3, r1
 801271e:	4313      	orrs	r3, r2
 8012720:	d00a      	beq.n	8012738 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012722:	4b6c      	ldr	r3, [pc, #432]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012726:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801272a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012732:	4a68      	ldr	r2, [pc, #416]	@ (80128d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012734:	430b      	orrs	r3, r1
 8012736:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012740:	2100      	movs	r1, #0
 8012742:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012744:	f003 0301 	and.w	r3, r3, #1
 8012748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801274a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801274e:	460b      	mov	r3, r1
 8012750:	4313      	orrs	r3, r2
 8012752:	d011      	beq.n	8012778 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012758:	3308      	adds	r3, #8
 801275a:	2100      	movs	r1, #0
 801275c:	4618      	mov	r0, r3
 801275e:	f001 f99d 	bl	8013a9c <RCCEx_PLL2_Config>
 8012762:	4603      	mov	r3, r0
 8012764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801276c:	2b00      	cmp	r3, #0
 801276e:	d003      	beq.n	8012778 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012774:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012780:	2100      	movs	r1, #0
 8012782:	6239      	str	r1, [r7, #32]
 8012784:	f003 0302 	and.w	r3, r3, #2
 8012788:	627b      	str	r3, [r7, #36]	@ 0x24
 801278a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801278e:	460b      	mov	r3, r1
 8012790:	4313      	orrs	r3, r2
 8012792:	d011      	beq.n	80127b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012798:	3308      	adds	r3, #8
 801279a:	2101      	movs	r1, #1
 801279c:	4618      	mov	r0, r3
 801279e:	f001 f97d 	bl	8013a9c <RCCEx_PLL2_Config>
 80127a2:	4603      	mov	r3, r0
 80127a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80127a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d003      	beq.n	80127b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80127b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c0:	2100      	movs	r1, #0
 80127c2:	61b9      	str	r1, [r7, #24]
 80127c4:	f003 0304 	and.w	r3, r3, #4
 80127c8:	61fb      	str	r3, [r7, #28]
 80127ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80127ce:	460b      	mov	r3, r1
 80127d0:	4313      	orrs	r3, r2
 80127d2:	d011      	beq.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80127d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127d8:	3308      	adds	r3, #8
 80127da:	2102      	movs	r1, #2
 80127dc:	4618      	mov	r0, r3
 80127de:	f001 f95d 	bl	8013a9c <RCCEx_PLL2_Config>
 80127e2:	4603      	mov	r3, r0
 80127e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80127e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d003      	beq.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80127f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012800:	2100      	movs	r1, #0
 8012802:	6139      	str	r1, [r7, #16]
 8012804:	f003 0308 	and.w	r3, r3, #8
 8012808:	617b      	str	r3, [r7, #20]
 801280a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801280e:	460b      	mov	r3, r1
 8012810:	4313      	orrs	r3, r2
 8012812:	d011      	beq.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012818:	3328      	adds	r3, #40	@ 0x28
 801281a:	2100      	movs	r1, #0
 801281c:	4618      	mov	r0, r3
 801281e:	f001 f9ef 	bl	8013c00 <RCCEx_PLL3_Config>
 8012822:	4603      	mov	r3, r0
 8012824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801282c:	2b00      	cmp	r3, #0
 801282e:	d003      	beq.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012840:	2100      	movs	r1, #0
 8012842:	60b9      	str	r1, [r7, #8]
 8012844:	f003 0310 	and.w	r3, r3, #16
 8012848:	60fb      	str	r3, [r7, #12]
 801284a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801284e:	460b      	mov	r3, r1
 8012850:	4313      	orrs	r3, r2
 8012852:	d011      	beq.n	8012878 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012858:	3328      	adds	r3, #40	@ 0x28
 801285a:	2101      	movs	r1, #1
 801285c:	4618      	mov	r0, r3
 801285e:	f001 f9cf 	bl	8013c00 <RCCEx_PLL3_Config>
 8012862:	4603      	mov	r3, r0
 8012864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801286c:	2b00      	cmp	r3, #0
 801286e:	d003      	beq.n	8012878 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8012878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012880:	2100      	movs	r1, #0
 8012882:	6039      	str	r1, [r7, #0]
 8012884:	f003 0320 	and.w	r3, r3, #32
 8012888:	607b      	str	r3, [r7, #4]
 801288a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801288e:	460b      	mov	r3, r1
 8012890:	4313      	orrs	r3, r2
 8012892:	d011      	beq.n	80128b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012898:	3328      	adds	r3, #40	@ 0x28
 801289a:	2102      	movs	r1, #2
 801289c:	4618      	mov	r0, r3
 801289e:	f001 f9af 	bl	8013c00 <RCCEx_PLL3_Config>
 80128a2:	4603      	mov	r3, r0
 80128a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80128a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d003      	beq.n	80128b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80128b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80128b8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d101      	bne.n	80128c4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80128c0:	2300      	movs	r3, #0
 80128c2:	e000      	b.n	80128c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80128c4:	2301      	movs	r3, #1
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80128cc:	46bd      	mov	sp, r7
 80128ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80128d2:	bf00      	nop
 80128d4:	58024400 	.word	0x58024400

080128d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b090      	sub	sp, #64	@ 0x40
 80128dc:	af00      	add	r7, sp, #0
 80128de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80128e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80128ea:	430b      	orrs	r3, r1
 80128ec:	f040 8094 	bne.w	8012a18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80128f0:	4b9b      	ldr	r3, [pc, #620]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80128f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128f4:	f003 0307 	and.w	r3, r3, #7
 80128f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80128fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128fc:	2b04      	cmp	r3, #4
 80128fe:	f200 8087 	bhi.w	8012a10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8012902:	a201      	add	r2, pc, #4	@ (adr r2, 8012908 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8012904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012908:	0801291d 	.word	0x0801291d
 801290c:	08012945 	.word	0x08012945
 8012910:	0801296d 	.word	0x0801296d
 8012914:	08012a09 	.word	0x08012a09
 8012918:	08012995 	.word	0x08012995
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801291c:	4b90      	ldr	r3, [pc, #576]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012928:	d108      	bne.n	801293c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801292a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801292e:	4618      	mov	r0, r3
 8012930:	f000 ff62 	bl	80137f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012938:	f000 bc93 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801293c:	2300      	movs	r3, #0
 801293e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012940:	f000 bc8f 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012944:	4b86      	ldr	r3, [pc, #536]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801294c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012950:	d108      	bne.n	8012964 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012952:	f107 0318 	add.w	r3, r7, #24
 8012956:	4618      	mov	r0, r3
 8012958:	f000 fca6 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801295c:	69bb      	ldr	r3, [r7, #24]
 801295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012960:	f000 bc7f 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012964:	2300      	movs	r3, #0
 8012966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012968:	f000 bc7b 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801296c:	4b7c      	ldr	r3, [pc, #496]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012978:	d108      	bne.n	801298c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801297a:	f107 030c 	add.w	r3, r7, #12
 801297e:	4618      	mov	r0, r3
 8012980:	f000 fde6 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012988:	f000 bc6b 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801298c:	2300      	movs	r3, #0
 801298e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012990:	f000 bc67 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012994:	4b72      	ldr	r3, [pc, #456]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012998:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801299c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801299e:	4b70      	ldr	r3, [pc, #448]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f003 0304 	and.w	r3, r3, #4
 80129a6:	2b04      	cmp	r3, #4
 80129a8:	d10c      	bne.n	80129c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80129aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d109      	bne.n	80129c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80129b0:	4b6b      	ldr	r3, [pc, #428]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	08db      	lsrs	r3, r3, #3
 80129b6:	f003 0303 	and.w	r3, r3, #3
 80129ba:	4a6a      	ldr	r2, [pc, #424]	@ (8012b64 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80129bc:	fa22 f303 	lsr.w	r3, r2, r3
 80129c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129c2:	e01f      	b.n	8012a04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80129c4:	4b66      	ldr	r3, [pc, #408]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80129d0:	d106      	bne.n	80129e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80129d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129d8:	d102      	bne.n	80129e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80129da:	4b63      	ldr	r3, [pc, #396]	@ (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80129dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129de:	e011      	b.n	8012a04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80129e0:	4b5f      	ldr	r3, [pc, #380]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80129e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80129ec:	d106      	bne.n	80129fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80129ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80129f4:	d102      	bne.n	80129fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80129f6:	4b5d      	ldr	r3, [pc, #372]	@ (8012b6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80129f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129fa:	e003      	b.n	8012a04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012a00:	f000 bc2f 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012a04:	f000 bc2d 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012a08:	4b59      	ldr	r3, [pc, #356]	@ (8012b70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8012a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a0c:	f000 bc29 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012a10:	2300      	movs	r3, #0
 8012a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a14:	f000 bc25 	b.w	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8012a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a1c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8012a20:	430b      	orrs	r3, r1
 8012a22:	f040 80a7 	bne.w	8012b74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8012a26:	4b4e      	ldr	r3, [pc, #312]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a2a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8012a2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012a36:	d054      	beq.n	8012ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8012a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012a3e:	f200 808b 	bhi.w	8012b58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012a48:	f000 8083 	beq.w	8012b52 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8012a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012a52:	f200 8081 	bhi.w	8012b58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012a5c:	d02f      	beq.n	8012abe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8012a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012a64:	d878      	bhi.n	8012b58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d004      	beq.n	8012a76 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012a72:	d012      	beq.n	8012a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8012a74:	e070      	b.n	8012b58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012a76:	4b3a      	ldr	r3, [pc, #232]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012a82:	d107      	bne.n	8012a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f000 feb5 	bl	80137f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012a92:	e3e6      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012a94:	2300      	movs	r3, #0
 8012a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a98:	e3e3      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012a9a:	4b31      	ldr	r3, [pc, #196]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012aa6:	d107      	bne.n	8012ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012aa8:	f107 0318 	add.w	r3, r7, #24
 8012aac:	4618      	mov	r0, r3
 8012aae:	f000 fbfb 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ab6:	e3d4      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012abc:	e3d1      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012abe:	4b28      	ldr	r3, [pc, #160]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012aca:	d107      	bne.n	8012adc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012acc:	f107 030c 	add.w	r3, r7, #12
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f000 fd3d 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ada:	e3c2      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012adc:	2300      	movs	r3, #0
 8012ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ae0:	e3bf      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ae6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012aea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012aec:	4b1c      	ldr	r3, [pc, #112]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	f003 0304 	and.w	r3, r3, #4
 8012af4:	2b04      	cmp	r3, #4
 8012af6:	d10c      	bne.n	8012b12 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8012af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d109      	bne.n	8012b12 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012afe:	4b18      	ldr	r3, [pc, #96]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	08db      	lsrs	r3, r3, #3
 8012b04:	f003 0303 	and.w	r3, r3, #3
 8012b08:	4a16      	ldr	r2, [pc, #88]	@ (8012b64 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8012b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8012b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b10:	e01e      	b.n	8012b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012b12:	4b13      	ldr	r3, [pc, #76]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b1e:	d106      	bne.n	8012b2e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8012b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b26:	d102      	bne.n	8012b2e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012b28:	4b0f      	ldr	r3, [pc, #60]	@ (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8012b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b2c:	e010      	b.n	8012b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b3a:	d106      	bne.n	8012b4a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8012b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b42:	d102      	bne.n	8012b4a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012b44:	4b09      	ldr	r3, [pc, #36]	@ (8012b6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b48:	e002      	b.n	8012b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012b4e:	e388      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012b50:	e387      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012b52:	4b07      	ldr	r3, [pc, #28]	@ (8012b70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8012b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b56:	e384      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b5c:	e381      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012b5e:	bf00      	nop
 8012b60:	58024400 	.word	0x58024400
 8012b64:	03d09000 	.word	0x03d09000
 8012b68:	003d0900 	.word	0x003d0900
 8012b6c:	016e3600 	.word	0x016e3600
 8012b70:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8012b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b78:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8012b7c:	430b      	orrs	r3, r1
 8012b7e:	f040 809c 	bne.w	8012cba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8012b82:	4b9e      	ldr	r3, [pc, #632]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b86:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8012b8a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012b92:	d054      	beq.n	8012c3e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8012b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012b9a:	f200 808b 	bhi.w	8012cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ba0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012ba4:	f000 8083 	beq.w	8012cae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8012ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012baa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012bae:	f200 8081 	bhi.w	8012cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8012bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012bb8:	d02f      	beq.n	8012c1a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8012bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012bc0:	d878      	bhi.n	8012cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8012bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d004      	beq.n	8012bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8012bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012bce:	d012      	beq.n	8012bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8012bd0:	e070      	b.n	8012cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012bd2:	4b8a      	ldr	r3, [pc, #552]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012bda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012bde:	d107      	bne.n	8012bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012be4:	4618      	mov	r0, r3
 8012be6:	f000 fe07 	bl	80137f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012bee:	e338      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012bf4:	e335      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012bf6:	4b81      	ldr	r3, [pc, #516]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012c02:	d107      	bne.n	8012c14 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c04:	f107 0318 	add.w	r3, r7, #24
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f000 fb4d 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c12:	e326      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c14:	2300      	movs	r3, #0
 8012c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c18:	e323      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012c1a:	4b78      	ldr	r3, [pc, #480]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c26:	d107      	bne.n	8012c38 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c28:	f107 030c 	add.w	r3, r7, #12
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f000 fc8f 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c36:	e314      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c3c:	e311      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012c3e:	4b6f      	ldr	r3, [pc, #444]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012c46:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012c48:	4b6c      	ldr	r3, [pc, #432]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f003 0304 	and.w	r3, r3, #4
 8012c50:	2b04      	cmp	r3, #4
 8012c52:	d10c      	bne.n	8012c6e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8012c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d109      	bne.n	8012c6e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012c5a:	4b68      	ldr	r3, [pc, #416]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	08db      	lsrs	r3, r3, #3
 8012c60:	f003 0303 	and.w	r3, r3, #3
 8012c64:	4a66      	ldr	r2, [pc, #408]	@ (8012e00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8012c66:	fa22 f303 	lsr.w	r3, r2, r3
 8012c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012c6c:	e01e      	b.n	8012cac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012c6e:	4b63      	ldr	r3, [pc, #396]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c7a:	d106      	bne.n	8012c8a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8012c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c82:	d102      	bne.n	8012c8a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012c84:	4b5f      	ldr	r3, [pc, #380]	@ (8012e04 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8012c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012c88:	e010      	b.n	8012cac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012c96:	d106      	bne.n	8012ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8012c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c9e:	d102      	bne.n	8012ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012ca0:	4b59      	ldr	r3, [pc, #356]	@ (8012e08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ca4:	e002      	b.n	8012cac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012caa:	e2da      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012cac:	e2d9      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012cae:	4b57      	ldr	r3, [pc, #348]	@ (8012e0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8012cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cb2:	e2d6      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cb8:	e2d3      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8012cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012cbe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8012cc2:	430b      	orrs	r3, r1
 8012cc4:	f040 80a7 	bne.w	8012e16 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8012cc8:	4b4c      	ldr	r3, [pc, #304]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ccc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8012cd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012cd8:	d055      	beq.n	8012d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8012cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012ce0:	f200 8096 	bhi.w	8012e10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ce6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012cea:	f000 8084 	beq.w	8012df6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8012cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012cf4:	f200 808c 	bhi.w	8012e10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012cfe:	d030      	beq.n	8012d62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8012d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012d06:	f200 8083 	bhi.w	8012e10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d004      	beq.n	8012d1a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8012d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d16:	d012      	beq.n	8012d3e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8012d18:	e07a      	b.n	8012e10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012d1a:	4b38      	ldr	r3, [pc, #224]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012d26:	d107      	bne.n	8012d38 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f000 fd63 	bl	80137f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d36:	e294      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d3c:	e291      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012d4a:	d107      	bne.n	8012d5c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012d4c:	f107 0318 	add.w	r3, r7, #24
 8012d50:	4618      	mov	r0, r3
 8012d52:	f000 faa9 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012d56:	69bb      	ldr	r3, [r7, #24]
 8012d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d5a:	e282      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d60:	e27f      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012d62:	4b26      	ldr	r3, [pc, #152]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012d6e:	d107      	bne.n	8012d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012d70:	f107 030c 	add.w	r3, r7, #12
 8012d74:	4618      	mov	r0, r3
 8012d76:	f000 fbeb 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d7e:	e270      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d80:	2300      	movs	r3, #0
 8012d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d84:	e26d      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012d86:	4b1d      	ldr	r3, [pc, #116]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012d8e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012d90:	4b1a      	ldr	r3, [pc, #104]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	f003 0304 	and.w	r3, r3, #4
 8012d98:	2b04      	cmp	r3, #4
 8012d9a:	d10c      	bne.n	8012db6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8012d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d109      	bne.n	8012db6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012da2:	4b16      	ldr	r3, [pc, #88]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	08db      	lsrs	r3, r3, #3
 8012da8:	f003 0303 	and.w	r3, r3, #3
 8012dac:	4a14      	ldr	r2, [pc, #80]	@ (8012e00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8012dae:	fa22 f303 	lsr.w	r3, r2, r3
 8012db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012db4:	e01e      	b.n	8012df4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012db6:	4b11      	ldr	r3, [pc, #68]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012dc2:	d106      	bne.n	8012dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8012dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012dca:	d102      	bne.n	8012dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8012e04 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8012dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012dd0:	e010      	b.n	8012df4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012dda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012dde:	d106      	bne.n	8012dee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8012de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012de6:	d102      	bne.n	8012dee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012de8:	4b07      	ldr	r3, [pc, #28]	@ (8012e08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012dec:	e002      	b.n	8012df4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012dee:	2300      	movs	r3, #0
 8012df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012df2:	e236      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012df4:	e235      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012df6:	4b05      	ldr	r3, [pc, #20]	@ (8012e0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8012df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012dfa:	e232      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012dfc:	58024400 	.word	0x58024400
 8012e00:	03d09000 	.word	0x03d09000
 8012e04:	003d0900 	.word	0x003d0900
 8012e08:	016e3600 	.word	0x016e3600
 8012e0c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8012e10:	2300      	movs	r3, #0
 8012e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e14:	e225      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8012e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e1a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8012e1e:	430b      	orrs	r3, r1
 8012e20:	f040 8085 	bne.w	8012f2e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8012e24:	4b9c      	ldr	r3, [pc, #624]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e28:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8012e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8012e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012e34:	d06b      	beq.n	8012f0e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8012e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012e3c:	d874      	bhi.n	8012f28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012e44:	d056      	beq.n	8012ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8012e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012e4c:	d86c      	bhi.n	8012f28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012e54:	d03b      	beq.n	8012ece <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8012e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012e5c:	d864      	bhi.n	8012f28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e64:	d021      	beq.n	8012eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8012e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e6c:	d85c      	bhi.n	8012f28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d004      	beq.n	8012e7e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8012e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e7a:	d004      	beq.n	8012e86 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8012e7c:	e054      	b.n	8012f28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8012e7e:	f7fe fb5f 	bl	8011540 <HAL_RCC_GetPCLK1Freq>
 8012e82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012e84:	e1ed      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012e86:	4b84      	ldr	r3, [pc, #528]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012e92:	d107      	bne.n	8012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e94:	f107 0318 	add.w	r3, r7, #24
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f000 fa05 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012e9e:	69fb      	ldr	r3, [r7, #28]
 8012ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ea2:	e1de      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ea8:	e1db      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012eb6:	d107      	bne.n	8012ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012eb8:	f107 030c 	add.w	r3, r7, #12
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f000 fb47 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ec6:	e1cc      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ecc:	e1c9      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012ece:	4b72      	ldr	r3, [pc, #456]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f003 0304 	and.w	r3, r3, #4
 8012ed6:	2b04      	cmp	r3, #4
 8012ed8:	d109      	bne.n	8012eee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012eda:	4b6f      	ldr	r3, [pc, #444]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	08db      	lsrs	r3, r3, #3
 8012ee0:	f003 0303 	and.w	r3, r3, #3
 8012ee4:	4a6d      	ldr	r2, [pc, #436]	@ (801309c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8012ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8012eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012eec:	e1b9      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ef2:	e1b6      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012ef4:	4b68      	ldr	r3, [pc, #416]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012f00:	d102      	bne.n	8012f08 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8012f02:	4b67      	ldr	r3, [pc, #412]	@ (80130a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8012f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f06:	e1ac      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f0c:	e1a9      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012f0e:	4b62      	ldr	r3, [pc, #392]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f1a:	d102      	bne.n	8012f22 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8012f1c:	4b61      	ldr	r3, [pc, #388]	@ (80130a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8012f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f20:	e19f      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f22:	2300      	movs	r3, #0
 8012f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f26:	e19c      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f2c:	e199      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8012f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f32:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8012f36:	430b      	orrs	r3, r1
 8012f38:	d173      	bne.n	8013022 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8012f3a:	4b57      	ldr	r3, [pc, #348]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012f42:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f4a:	d02f      	beq.n	8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8012f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f52:	d863      	bhi.n	801301c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8012f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d004      	beq.n	8012f64 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8012f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f60:	d012      	beq.n	8012f88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8012f62:	e05b      	b.n	801301c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012f64:	4b4c      	ldr	r3, [pc, #304]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012f70:	d107      	bne.n	8012f82 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f72:	f107 0318 	add.w	r3, r7, #24
 8012f76:	4618      	mov	r0, r3
 8012f78:	f000 f996 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012f7c:	69bb      	ldr	r3, [r7, #24]
 8012f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f80:	e16f      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f82:	2300      	movs	r3, #0
 8012f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f86:	e16c      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012f88:	4b43      	ldr	r3, [pc, #268]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012f94:	d107      	bne.n	8012fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012f96:	f107 030c 	add.w	r3, r7, #12
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f000 fad8 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012fa4:	e15d      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012faa:	e15a      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012fac:	4b3a      	ldr	r3, [pc, #232]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012fb4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012fb6:	4b38      	ldr	r3, [pc, #224]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	f003 0304 	and.w	r3, r3, #4
 8012fbe:	2b04      	cmp	r3, #4
 8012fc0:	d10c      	bne.n	8012fdc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8012fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d109      	bne.n	8012fdc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012fc8:	4b33      	ldr	r3, [pc, #204]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	08db      	lsrs	r3, r3, #3
 8012fce:	f003 0303 	and.w	r3, r3, #3
 8012fd2:	4a32      	ldr	r2, [pc, #200]	@ (801309c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8012fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8012fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012fda:	e01e      	b.n	801301a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012fe8:	d106      	bne.n	8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8012fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ff0:	d102      	bne.n	8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80130a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8012ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ff6:	e010      	b.n	801301a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012ff8:	4b27      	ldr	r3, [pc, #156]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013004:	d106      	bne.n	8013014 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801300c:	d102      	bne.n	8013014 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801300e:	4b25      	ldr	r3, [pc, #148]	@ (80130a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013012:	e002      	b.n	801301a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013014:	2300      	movs	r3, #0
 8013016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013018:	e123      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801301a:	e122      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801301c:	2300      	movs	r3, #0
 801301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013020:	e11f      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013026:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801302a:	430b      	orrs	r3, r1
 801302c:	d13c      	bne.n	80130a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801302e:	4b1a      	ldr	r3, [pc, #104]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013036:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801303a:	2b00      	cmp	r3, #0
 801303c:	d004      	beq.n	8013048 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013044:	d012      	beq.n	801306c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013046:	e023      	b.n	8013090 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013048:	4b13      	ldr	r3, [pc, #76]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013054:	d107      	bne.n	8013066 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801305a:	4618      	mov	r0, r3
 801305c:	f000 fbcc 	bl	80137f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013064:	e0fd      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013066:	2300      	movs	r3, #0
 8013068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801306a:	e0fa      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801306c:	4b0a      	ldr	r3, [pc, #40]	@ (8013098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013078:	d107      	bne.n	801308a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801307a:	f107 0318 	add.w	r3, r7, #24
 801307e:	4618      	mov	r0, r3
 8013080:	f000 f912 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013084:	6a3b      	ldr	r3, [r7, #32]
 8013086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013088:	e0eb      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801308a:	2300      	movs	r3, #0
 801308c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801308e:	e0e8      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013090:	2300      	movs	r3, #0
 8013092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013094:	e0e5      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013096:	bf00      	nop
 8013098:	58024400 	.word	0x58024400
 801309c:	03d09000 	.word	0x03d09000
 80130a0:	003d0900 	.word	0x003d0900
 80130a4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80130a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80130ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80130b0:	430b      	orrs	r3, r1
 80130b2:	f040 8085 	bne.w	80131c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80130b6:	4b6d      	ldr	r3, [pc, #436]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80130b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80130be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80130c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80130c6:	d06b      	beq.n	80131a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80130c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80130ce:	d874      	bhi.n	80131ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80130d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80130d6:	d056      	beq.n	8013186 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80130d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80130de:	d86c      	bhi.n	80131ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80130e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80130e6:	d03b      	beq.n	8013160 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80130e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80130ee:	d864      	bhi.n	80131ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80130f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80130f6:	d021      	beq.n	801313c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80130f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80130fe:	d85c      	bhi.n	80131ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013102:	2b00      	cmp	r3, #0
 8013104:	d004      	beq.n	8013110 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801310c:	d004      	beq.n	8013118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801310e:	e054      	b.n	80131ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013110:	f000 f8b4 	bl	801327c <HAL_RCCEx_GetD3PCLK1Freq>
 8013114:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013116:	e0a4      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013118:	4b54      	ldr	r3, [pc, #336]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013124:	d107      	bne.n	8013136 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013126:	f107 0318 	add.w	r3, r7, #24
 801312a:	4618      	mov	r0, r3
 801312c:	f000 f8bc 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013134:	e095      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013136:	2300      	movs	r3, #0
 8013138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801313a:	e092      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801313c:	4b4b      	ldr	r3, [pc, #300]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013148:	d107      	bne.n	801315a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801314a:	f107 030c 	add.w	r3, r7, #12
 801314e:	4618      	mov	r0, r3
 8013150:	f000 f9fe 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013158:	e083      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801315a:	2300      	movs	r3, #0
 801315c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801315e:	e080      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013160:	4b42      	ldr	r3, [pc, #264]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f003 0304 	and.w	r3, r3, #4
 8013168:	2b04      	cmp	r3, #4
 801316a:	d109      	bne.n	8013180 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801316c:	4b3f      	ldr	r3, [pc, #252]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	08db      	lsrs	r3, r3, #3
 8013172:	f003 0303 	and.w	r3, r3, #3
 8013176:	4a3e      	ldr	r2, [pc, #248]	@ (8013270 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013178:	fa22 f303 	lsr.w	r3, r2, r3
 801317c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801317e:	e070      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013180:	2300      	movs	r3, #0
 8013182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013184:	e06d      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013186:	4b39      	ldr	r3, [pc, #228]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801318e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013192:	d102      	bne.n	801319a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013194:	4b37      	ldr	r3, [pc, #220]	@ (8013274 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013198:	e063      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801319a:	2300      	movs	r3, #0
 801319c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801319e:	e060      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80131a0:	4b32      	ldr	r3, [pc, #200]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80131a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80131ac:	d102      	bne.n	80131b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80131ae:	4b32      	ldr	r3, [pc, #200]	@ (8013278 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80131b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80131b2:	e056      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80131b4:	2300      	movs	r3, #0
 80131b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131b8:	e053      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80131ba:	2300      	movs	r3, #0
 80131bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131be:	e050      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80131c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131c4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80131c8:	430b      	orrs	r3, r1
 80131ca:	d148      	bne.n	801325e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80131cc:	4b27      	ldr	r3, [pc, #156]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80131ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80131d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80131d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80131dc:	d02a      	beq.n	8013234 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80131de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80131e4:	d838      	bhi.n	8013258 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80131e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d004      	beq.n	80131f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80131ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80131f2:	d00d      	beq.n	8013210 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80131f4:	e030      	b.n	8013258 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80131f6:	4b1d      	ldr	r3, [pc, #116]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80131fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013202:	d102      	bne.n	801320a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013204:	4b1c      	ldr	r3, [pc, #112]	@ (8013278 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013208:	e02b      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801320e:	e028      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013210:	4b16      	ldr	r3, [pc, #88]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801321c:	d107      	bne.n	801322e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801321e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fae8 	bl	80137f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801322a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801322c:	e019      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801322e:	2300      	movs	r3, #0
 8013230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013232:	e016      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013234:	4b0d      	ldr	r3, [pc, #52]	@ (801326c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801323c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013240:	d107      	bne.n	8013252 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013242:	f107 0318 	add.w	r3, r7, #24
 8013246:	4618      	mov	r0, r3
 8013248:	f000 f82e 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013250:	e007      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013252:	2300      	movs	r3, #0
 8013254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013256:	e004      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013258:	2300      	movs	r3, #0
 801325a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801325c:	e001      	b.n	8013262 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801325e:	2300      	movs	r3, #0
 8013260:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013264:	4618      	mov	r0, r3
 8013266:	3740      	adds	r7, #64	@ 0x40
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}
 801326c:	58024400 	.word	0x58024400
 8013270:	03d09000 	.word	0x03d09000
 8013274:	003d0900 	.word	0x003d0900
 8013278:	016e3600 	.word	0x016e3600

0801327c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013280:	f7fe f92e 	bl	80114e0 <HAL_RCC_GetHCLKFreq>
 8013284:	4602      	mov	r2, r0
 8013286:	4b06      	ldr	r3, [pc, #24]	@ (80132a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013288:	6a1b      	ldr	r3, [r3, #32]
 801328a:	091b      	lsrs	r3, r3, #4
 801328c:	f003 0307 	and.w	r3, r3, #7
 8013290:	4904      	ldr	r1, [pc, #16]	@ (80132a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013292:	5ccb      	ldrb	r3, [r1, r3]
 8013294:	f003 031f 	and.w	r3, r3, #31
 8013298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801329c:	4618      	mov	r0, r3
 801329e:	bd80      	pop	{r7, pc}
 80132a0:	58024400 	.word	0x58024400
 80132a4:	0801e790 	.word	0x0801e790

080132a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80132a8:	b480      	push	{r7}
 80132aa:	b089      	sub	sp, #36	@ 0x24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80132b0:	4ba1      	ldr	r3, [pc, #644]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80132b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132b4:	f003 0303 	and.w	r3, r3, #3
 80132b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80132ba:	4b9f      	ldr	r3, [pc, #636]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80132bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132be:	0b1b      	lsrs	r3, r3, #12
 80132c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80132c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80132c6:	4b9c      	ldr	r3, [pc, #624]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80132c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132ca:	091b      	lsrs	r3, r3, #4
 80132cc:	f003 0301 	and.w	r3, r3, #1
 80132d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80132d2:	4b99      	ldr	r3, [pc, #612]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80132d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132d6:	08db      	lsrs	r3, r3, #3
 80132d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132dc:	693a      	ldr	r2, [r7, #16]
 80132de:	fb02 f303 	mul.w	r3, r2, r3
 80132e2:	ee07 3a90 	vmov	s15, r3
 80132e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	f000 8111 	beq.w	8013518 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	2b02      	cmp	r3, #2
 80132fa:	f000 8083 	beq.w	8013404 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80132fe:	69bb      	ldr	r3, [r7, #24]
 8013300:	2b02      	cmp	r3, #2
 8013302:	f200 80a1 	bhi.w	8013448 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d003      	beq.n	8013314 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	2b01      	cmp	r3, #1
 8013310:	d056      	beq.n	80133c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013312:	e099      	b.n	8013448 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013314:	4b88      	ldr	r3, [pc, #544]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f003 0320 	and.w	r3, r3, #32
 801331c:	2b00      	cmp	r3, #0
 801331e:	d02d      	beq.n	801337c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013320:	4b85      	ldr	r3, [pc, #532]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	08db      	lsrs	r3, r3, #3
 8013326:	f003 0303 	and.w	r3, r3, #3
 801332a:	4a84      	ldr	r2, [pc, #528]	@ (801353c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801332c:	fa22 f303 	lsr.w	r3, r2, r3
 8013330:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	ee07 3a90 	vmov	s15, r3
 8013338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	ee07 3a90 	vmov	s15, r3
 8013342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801334a:	4b7b      	ldr	r3, [pc, #492]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801334c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013352:	ee07 3a90 	vmov	s15, r3
 8013356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801335a:	ed97 6a03 	vldr	s12, [r7, #12]
 801335e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801336a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013376:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801337a:	e087      	b.n	801348c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	ee07 3a90 	vmov	s15, r3
 8013382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013386:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013544 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801338e:	4b6a      	ldr	r3, [pc, #424]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013396:	ee07 3a90 	vmov	s15, r3
 801339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801339e:	ed97 6a03 	vldr	s12, [r7, #12]
 80133a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80133a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80133b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80133be:	e065      	b.n	801348c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	ee07 3a90 	vmov	s15, r3
 80133c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80133ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133d2:	4b59      	ldr	r3, [pc, #356]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80133d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133da:	ee07 3a90 	vmov	s15, r3
 80133de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80133e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80133e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80133ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80133f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013402:	e043      	b.n	801348c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	ee07 3a90 	vmov	s15, r3
 801340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801340e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801354c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013416:	4b48      	ldr	r3, [pc, #288]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801341e:	ee07 3a90 	vmov	s15, r3
 8013422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013426:	ed97 6a03 	vldr	s12, [r7, #12]
 801342a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801342e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801343a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013446:	e021      	b.n	801348c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	ee07 3a90 	vmov	s15, r3
 801344e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013452:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801345a:	4b37      	ldr	r3, [pc, #220]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801345e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013462:	ee07 3a90 	vmov	s15, r3
 8013466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801346a:	ed97 6a03 	vldr	s12, [r7, #12]
 801346e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801347a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801347e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801348a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801348c:	4b2a      	ldr	r3, [pc, #168]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013490:	0a5b      	lsrs	r3, r3, #9
 8013492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013496:	ee07 3a90 	vmov	s15, r3
 801349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801349e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80134aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134b2:	ee17 2a90 	vmov	r2, s15
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80134ba:	4b1f      	ldr	r3, [pc, #124]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80134bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134be:	0c1b      	lsrs	r3, r3, #16
 80134c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134c4:	ee07 3a90 	vmov	s15, r3
 80134c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80134d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134e0:	ee17 2a90 	vmov	r2, s15
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80134e8:	4b13      	ldr	r3, [pc, #76]	@ (8013538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80134ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134ec:	0e1b      	lsrs	r3, r3, #24
 80134ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134f2:	ee07 3a90 	vmov	s15, r3
 80134f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013502:	edd7 6a07 	vldr	s13, [r7, #28]
 8013506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801350a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801350e:	ee17 2a90 	vmov	r2, s15
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013516:	e008      	b.n	801352a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2200      	movs	r2, #0
 801351c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2200      	movs	r2, #0
 8013522:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	609a      	str	r2, [r3, #8]
}
 801352a:	bf00      	nop
 801352c:	3724      	adds	r7, #36	@ 0x24
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop
 8013538:	58024400 	.word	0x58024400
 801353c:	03d09000 	.word	0x03d09000
 8013540:	46000000 	.word	0x46000000
 8013544:	4c742400 	.word	0x4c742400
 8013548:	4a742400 	.word	0x4a742400
 801354c:	4bb71b00 	.word	0x4bb71b00

08013550 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013550:	b480      	push	{r7}
 8013552:	b089      	sub	sp, #36	@ 0x24
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013558:	4ba1      	ldr	r3, [pc, #644]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801355c:	f003 0303 	and.w	r3, r3, #3
 8013560:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013562:	4b9f      	ldr	r3, [pc, #636]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013566:	0d1b      	lsrs	r3, r3, #20
 8013568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801356c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801356e:	4b9c      	ldr	r3, [pc, #624]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013572:	0a1b      	lsrs	r3, r3, #8
 8013574:	f003 0301 	and.w	r3, r3, #1
 8013578:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801357a:	4b99      	ldr	r3, [pc, #612]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801357e:	08db      	lsrs	r3, r3, #3
 8013580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013584:	693a      	ldr	r2, [r7, #16]
 8013586:	fb02 f303 	mul.w	r3, r2, r3
 801358a:	ee07 3a90 	vmov	s15, r3
 801358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013592:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	2b00      	cmp	r3, #0
 801359a:	f000 8111 	beq.w	80137c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801359e:	69bb      	ldr	r3, [r7, #24]
 80135a0:	2b02      	cmp	r3, #2
 80135a2:	f000 8083 	beq.w	80136ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80135a6:	69bb      	ldr	r3, [r7, #24]
 80135a8:	2b02      	cmp	r3, #2
 80135aa:	f200 80a1 	bhi.w	80136f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80135ae:	69bb      	ldr	r3, [r7, #24]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d003      	beq.n	80135bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80135b4:	69bb      	ldr	r3, [r7, #24]
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d056      	beq.n	8013668 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80135ba:	e099      	b.n	80136f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80135bc:	4b88      	ldr	r3, [pc, #544]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f003 0320 	and.w	r3, r3, #32
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d02d      	beq.n	8013624 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80135c8:	4b85      	ldr	r3, [pc, #532]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	08db      	lsrs	r3, r3, #3
 80135ce:	f003 0303 	and.w	r3, r3, #3
 80135d2:	4a84      	ldr	r2, [pc, #528]	@ (80137e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80135d4:	fa22 f303 	lsr.w	r3, r2, r3
 80135d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	ee07 3a90 	vmov	s15, r3
 80135e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	ee07 3a90 	vmov	s15, r3
 80135ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80135f2:	4b7b      	ldr	r3, [pc, #492]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80135f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135fa:	ee07 3a90 	vmov	s15, r3
 80135fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013602:	ed97 6a03 	vldr	s12, [r7, #12]
 8013606:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80137e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801360a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801360e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801361a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801361e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013622:	e087      	b.n	8013734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	ee07 3a90 	vmov	s15, r3
 801362a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801362e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80137ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013636:	4b6a      	ldr	r3, [pc, #424]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801363a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801363e:	ee07 3a90 	vmov	s15, r3
 8013642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013646:	ed97 6a03 	vldr	s12, [r7, #12]
 801364a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80137e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801364e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801365a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013666:	e065      	b.n	8013734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	ee07 3a90 	vmov	s15, r3
 801366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013672:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80137f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801367a:	4b59      	ldr	r3, [pc, #356]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013682:	ee07 3a90 	vmov	s15, r3
 8013686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801368a:	ed97 6a03 	vldr	s12, [r7, #12]
 801368e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80137e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801369a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801369e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80136aa:	e043      	b.n	8013734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	ee07 3a90 	vmov	s15, r3
 80136b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80137f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80136ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136be:	4b48      	ldr	r3, [pc, #288]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80136c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136c6:	ee07 3a90 	vmov	s15, r3
 80136ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80136ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80136d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80137e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80136d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80136da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80136de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80136e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80136ee:	e021      	b.n	8013734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	ee07 3a90 	vmov	s15, r3
 80136f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80137f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80136fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013702:	4b37      	ldr	r3, [pc, #220]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801370a:	ee07 3a90 	vmov	s15, r3
 801370e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013712:	ed97 6a03 	vldr	s12, [r7, #12]
 8013716:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80137e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801371a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801371e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801372a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801372e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013732:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013734:	4b2a      	ldr	r3, [pc, #168]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013738:	0a5b      	lsrs	r3, r3, #9
 801373a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801373e:	ee07 3a90 	vmov	s15, r3
 8013742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801374a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801374e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801375a:	ee17 2a90 	vmov	r2, s15
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8013762:	4b1f      	ldr	r3, [pc, #124]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013766:	0c1b      	lsrs	r3, r3, #16
 8013768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801376c:	ee07 3a90 	vmov	s15, r3
 8013770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013778:	ee37 7a87 	vadd.f32	s14, s15, s14
 801377c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013788:	ee17 2a90 	vmov	r2, s15
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8013790:	4b13      	ldr	r3, [pc, #76]	@ (80137e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013794:	0e1b      	lsrs	r3, r3, #24
 8013796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801379a:	ee07 3a90 	vmov	s15, r3
 801379e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80137a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80137aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80137ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80137b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137b6:	ee17 2a90 	vmov	r2, s15
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80137be:	e008      	b.n	80137d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2200      	movs	r2, #0
 80137c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2200      	movs	r2, #0
 80137ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2200      	movs	r2, #0
 80137d0:	609a      	str	r2, [r3, #8]
}
 80137d2:	bf00      	nop
 80137d4:	3724      	adds	r7, #36	@ 0x24
 80137d6:	46bd      	mov	sp, r7
 80137d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137dc:	4770      	bx	lr
 80137de:	bf00      	nop
 80137e0:	58024400 	.word	0x58024400
 80137e4:	03d09000 	.word	0x03d09000
 80137e8:	46000000 	.word	0x46000000
 80137ec:	4c742400 	.word	0x4c742400
 80137f0:	4a742400 	.word	0x4a742400
 80137f4:	4bb71b00 	.word	0x4bb71b00

080137f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80137f8:	b480      	push	{r7}
 80137fa:	b089      	sub	sp, #36	@ 0x24
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013800:	4ba0      	ldr	r3, [pc, #640]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013804:	f003 0303 	and.w	r3, r3, #3
 8013808:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801380a:	4b9e      	ldr	r3, [pc, #632]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801380e:	091b      	lsrs	r3, r3, #4
 8013810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013814:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013816:	4b9b      	ldr	r3, [pc, #620]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801381a:	f003 0301 	and.w	r3, r3, #1
 801381e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013820:	4b98      	ldr	r3, [pc, #608]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013824:	08db      	lsrs	r3, r3, #3
 8013826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801382a:	693a      	ldr	r2, [r7, #16]
 801382c:	fb02 f303 	mul.w	r3, r2, r3
 8013830:	ee07 3a90 	vmov	s15, r3
 8013834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013838:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	2b00      	cmp	r3, #0
 8013840:	f000 8111 	beq.w	8013a66 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	2b02      	cmp	r3, #2
 8013848:	f000 8083 	beq.w	8013952 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	2b02      	cmp	r3, #2
 8013850:	f200 80a1 	bhi.w	8013996 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d003      	beq.n	8013862 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	2b01      	cmp	r3, #1
 801385e:	d056      	beq.n	801390e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8013860:	e099      	b.n	8013996 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013862:	4b88      	ldr	r3, [pc, #544]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f003 0320 	and.w	r3, r3, #32
 801386a:	2b00      	cmp	r3, #0
 801386c:	d02d      	beq.n	80138ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801386e:	4b85      	ldr	r3, [pc, #532]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	08db      	lsrs	r3, r3, #3
 8013874:	f003 0303 	and.w	r3, r3, #3
 8013878:	4a83      	ldr	r2, [pc, #524]	@ (8013a88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801387a:	fa22 f303 	lsr.w	r3, r2, r3
 801387e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	ee07 3a90 	vmov	s15, r3
 8013886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	ee07 3a90 	vmov	s15, r3
 8013890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013898:	4b7a      	ldr	r3, [pc, #488]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138a0:	ee07 3a90 	vmov	s15, r3
 80138a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80138a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80138ac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8013a8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80138b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80138b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80138b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80138bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80138c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80138c8:	e087      	b.n	80139da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	ee07 3a90 	vmov	s15, r3
 80138d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138d4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8013a90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80138d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80138dc:	4b69      	ldr	r3, [pc, #420]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80138de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138e4:	ee07 3a90 	vmov	s15, r3
 80138e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80138ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80138f0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8013a8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80138f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80138f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80138fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013908:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801390c:	e065      	b.n	80139da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	ee07 3a90 	vmov	s15, r3
 8013914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013918:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8013a94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801391c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013920:	4b58      	ldr	r3, [pc, #352]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013928:	ee07 3a90 	vmov	s15, r3
 801392c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013930:	ed97 6a03 	vldr	s12, [r7, #12]
 8013934:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8013a8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801393c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013940:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013948:	ee67 7a27 	vmul.f32	s15, s14, s15
 801394c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013950:	e043      	b.n	80139da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	ee07 3a90 	vmov	s15, r3
 8013958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801395c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8013a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8013960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013964:	4b47      	ldr	r3, [pc, #284]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801396c:	ee07 3a90 	vmov	s15, r3
 8013970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013974:	ed97 6a03 	vldr	s12, [r7, #12]
 8013978:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8013a8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801397c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013984:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801398c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013990:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013994:	e021      	b.n	80139da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	ee07 3a90 	vmov	s15, r3
 801399c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139a0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8013a90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80139a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139a8:	4b36      	ldr	r3, [pc, #216]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80139aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139b0:	ee07 3a90 	vmov	s15, r3
 80139b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80139b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80139bc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8013a8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80139c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80139c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80139c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80139cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80139d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80139da:	4b2a      	ldr	r3, [pc, #168]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80139dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139de:	0a5b      	lsrs	r3, r3, #9
 80139e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139e4:	ee07 3a90 	vmov	s15, r3
 80139e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80139f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80139f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80139f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80139fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a00:	ee17 2a90 	vmov	r2, s15
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8013a08:	4b1e      	ldr	r3, [pc, #120]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a0c:	0c1b      	lsrs	r3, r3, #16
 8013a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a12:	ee07 3a90 	vmov	s15, r3
 8013a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8013a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a2e:	ee17 2a90 	vmov	r2, s15
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8013a36:	4b13      	ldr	r3, [pc, #76]	@ (8013a84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a3a:	0e1b      	lsrs	r3, r3, #24
 8013a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a40:	ee07 3a90 	vmov	s15, r3
 8013a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013a50:	edd7 6a07 	vldr	s13, [r7, #28]
 8013a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a5c:	ee17 2a90 	vmov	r2, s15
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8013a64:	e008      	b.n	8013a78 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	2200      	movs	r2, #0
 8013a76:	609a      	str	r2, [r3, #8]
}
 8013a78:	bf00      	nop
 8013a7a:	3724      	adds	r7, #36	@ 0x24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a82:	4770      	bx	lr
 8013a84:	58024400 	.word	0x58024400
 8013a88:	03d09000 	.word	0x03d09000
 8013a8c:	46000000 	.word	0x46000000
 8013a90:	4c742400 	.word	0x4c742400
 8013a94:	4a742400 	.word	0x4a742400
 8013a98:	4bb71b00 	.word	0x4bb71b00

08013a9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013aaa:	4b53      	ldr	r3, [pc, #332]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aae:	f003 0303 	and.w	r3, r3, #3
 8013ab2:	2b03      	cmp	r3, #3
 8013ab4:	d101      	bne.n	8013aba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e099      	b.n	8013bee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013aba:	4b4f      	ldr	r3, [pc, #316]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	4a4e      	ldr	r2, [pc, #312]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013ac0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013ac6:	f7f4 ffd7 	bl	8008a78 <HAL_GetTick>
 8013aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013acc:	e008      	b.n	8013ae0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013ace:	f7f4 ffd3 	bl	8008a78 <HAL_GetTick>
 8013ad2:	4602      	mov	r2, r0
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	1ad3      	subs	r3, r2, r3
 8013ad8:	2b02      	cmp	r3, #2
 8013ada:	d901      	bls.n	8013ae0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013adc:	2303      	movs	r3, #3
 8013ade:	e086      	b.n	8013bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013ae0:	4b45      	ldr	r3, [pc, #276]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d1f0      	bne.n	8013ace <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013aec:	4b42      	ldr	r3, [pc, #264]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013af0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	031b      	lsls	r3, r3, #12
 8013afa:	493f      	ldr	r1, [pc, #252]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013afc:	4313      	orrs	r3, r2
 8013afe:	628b      	str	r3, [r1, #40]	@ 0x28
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	3b01      	subs	r3, #1
 8013b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	689b      	ldr	r3, [r3, #8]
 8013b0e:	3b01      	subs	r3, #1
 8013b10:	025b      	lsls	r3, r3, #9
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	431a      	orrs	r2, r3
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	68db      	ldr	r3, [r3, #12]
 8013b1a:	3b01      	subs	r3, #1
 8013b1c:	041b      	lsls	r3, r3, #16
 8013b1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013b22:	431a      	orrs	r2, r3
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	691b      	ldr	r3, [r3, #16]
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	061b      	lsls	r3, r3, #24
 8013b2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013b30:	4931      	ldr	r1, [pc, #196]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b32:	4313      	orrs	r3, r2
 8013b34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8013b36:	4b30      	ldr	r3, [pc, #192]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	695b      	ldr	r3, [r3, #20]
 8013b42:	492d      	ldr	r1, [pc, #180]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b44:	4313      	orrs	r3, r2
 8013b46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8013b48:	4b2b      	ldr	r3, [pc, #172]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b4c:	f023 0220 	bic.w	r2, r3, #32
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	699b      	ldr	r3, [r3, #24]
 8013b54:	4928      	ldr	r1, [pc, #160]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b56:	4313      	orrs	r3, r2
 8013b58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8013b5a:	4b27      	ldr	r3, [pc, #156]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b5e:	4a26      	ldr	r2, [pc, #152]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b60:	f023 0310 	bic.w	r3, r3, #16
 8013b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8013b66:	4b24      	ldr	r3, [pc, #144]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013b6a:	4b24      	ldr	r3, [pc, #144]	@ (8013bfc <RCCEx_PLL2_Config+0x160>)
 8013b6c:	4013      	ands	r3, r2
 8013b6e:	687a      	ldr	r2, [r7, #4]
 8013b70:	69d2      	ldr	r2, [r2, #28]
 8013b72:	00d2      	lsls	r2, r2, #3
 8013b74:	4920      	ldr	r1, [pc, #128]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b76:	4313      	orrs	r3, r2
 8013b78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8013b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b80:	f043 0310 	orr.w	r3, r3, #16
 8013b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d106      	bne.n	8013b9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8013b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b90:	4a19      	ldr	r2, [pc, #100]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013b92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013b98:	e00f      	b.n	8013bba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d106      	bne.n	8013bae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013ba0:	4b15      	ldr	r3, [pc, #84]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ba4:	4a14      	ldr	r2, [pc, #80]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013baa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013bac:	e005      	b.n	8013bba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013bae:	4b12      	ldr	r3, [pc, #72]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb2:	4a11      	ldr	r2, [pc, #68]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013bb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013bba:	4b0f      	ldr	r3, [pc, #60]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013bc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013bc6:	f7f4 ff57 	bl	8008a78 <HAL_GetTick>
 8013bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013bcc:	e008      	b.n	8013be0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013bce:	f7f4 ff53 	bl	8008a78 <HAL_GetTick>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	1ad3      	subs	r3, r2, r3
 8013bd8:	2b02      	cmp	r3, #2
 8013bda:	d901      	bls.n	8013be0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013bdc:	2303      	movs	r3, #3
 8013bde:	e006      	b.n	8013bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013be0:	4b05      	ldr	r3, [pc, #20]	@ (8013bf8 <RCCEx_PLL2_Config+0x15c>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d0f0      	beq.n	8013bce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3710      	adds	r7, #16
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	bf00      	nop
 8013bf8:	58024400 	.word	0x58024400
 8013bfc:	ffff0007 	.word	0xffff0007

08013c00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013c0e:	4b53      	ldr	r3, [pc, #332]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c12:	f003 0303 	and.w	r3, r3, #3
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	d101      	bne.n	8013c1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	e099      	b.n	8013d52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8013c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	4a4e      	ldr	r2, [pc, #312]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013c2a:	f7f4 ff25 	bl	8008a78 <HAL_GetTick>
 8013c2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013c30:	e008      	b.n	8013c44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013c32:	f7f4 ff21 	bl	8008a78 <HAL_GetTick>
 8013c36:	4602      	mov	r2, r0
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	1ad3      	subs	r3, r2, r3
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	d901      	bls.n	8013c44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013c40:	2303      	movs	r3, #3
 8013c42:	e086      	b.n	8013d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013c44:	4b45      	ldr	r3, [pc, #276]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d1f0      	bne.n	8013c32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8013c50:	4b42      	ldr	r3, [pc, #264]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	051b      	lsls	r3, r3, #20
 8013c5e:	493f      	ldr	r1, [pc, #252]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013c60:	4313      	orrs	r3, r2
 8013c62:	628b      	str	r3, [r1, #40]	@ 0x28
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	3b01      	subs	r3, #1
 8013c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	689b      	ldr	r3, [r3, #8]
 8013c72:	3b01      	subs	r3, #1
 8013c74:	025b      	lsls	r3, r3, #9
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	431a      	orrs	r2, r3
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	68db      	ldr	r3, [r3, #12]
 8013c7e:	3b01      	subs	r3, #1
 8013c80:	041b      	lsls	r3, r3, #16
 8013c82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013c86:	431a      	orrs	r2, r3
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	691b      	ldr	r3, [r3, #16]
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	061b      	lsls	r3, r3, #24
 8013c90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013c94:	4931      	ldr	r1, [pc, #196]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013c96:	4313      	orrs	r3, r2
 8013c98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013c9a:	4b30      	ldr	r3, [pc, #192]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	695b      	ldr	r3, [r3, #20]
 8013ca6:	492d      	ldr	r1, [pc, #180]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013ca8:	4313      	orrs	r3, r2
 8013caa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013cac:	4b2b      	ldr	r3, [pc, #172]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	699b      	ldr	r3, [r3, #24]
 8013cb8:	4928      	ldr	r1, [pc, #160]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013cbe:	4b27      	ldr	r3, [pc, #156]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cc2:	4a26      	ldr	r2, [pc, #152]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013cca:	4b24      	ldr	r3, [pc, #144]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013cce:	4b24      	ldr	r3, [pc, #144]	@ (8013d60 <RCCEx_PLL3_Config+0x160>)
 8013cd0:	4013      	ands	r3, r2
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	69d2      	ldr	r2, [r2, #28]
 8013cd6:	00d2      	lsls	r2, r2, #3
 8013cd8:	4920      	ldr	r1, [pc, #128]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013cda:	4313      	orrs	r3, r2
 8013cdc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013cde:	4b1f      	ldr	r3, [pc, #124]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d106      	bne.n	8013cfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cf4:	4a19      	ldr	r2, [pc, #100]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013cf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8013cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013cfc:	e00f      	b.n	8013d1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d106      	bne.n	8013d12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013d04:	4b15      	ldr	r3, [pc, #84]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d08:	4a14      	ldr	r2, [pc, #80]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013d0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013d10:	e005      	b.n	8013d1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013d12:	4b12      	ldr	r3, [pc, #72]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d16:	4a11      	ldr	r2, [pc, #68]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4a0e      	ldr	r2, [pc, #56]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013d2a:	f7f4 fea5 	bl	8008a78 <HAL_GetTick>
 8013d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013d30:	e008      	b.n	8013d44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013d32:	f7f4 fea1 	bl	8008a78 <HAL_GetTick>
 8013d36:	4602      	mov	r2, r0
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	2b02      	cmp	r3, #2
 8013d3e:	d901      	bls.n	8013d44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013d40:	2303      	movs	r3, #3
 8013d42:	e006      	b.n	8013d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013d44:	4b05      	ldr	r3, [pc, #20]	@ (8013d5c <RCCEx_PLL3_Config+0x15c>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d0f0      	beq.n	8013d32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3710      	adds	r7, #16
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	58024400 	.word	0x58024400
 8013d60:	ffff0007 	.word	0xffff0007

08013d64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d101      	bne.n	8013d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013d72:	2301      	movs	r3, #1
 8013d74:	e10f      	b.n	8013f96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a87      	ldr	r2, [pc, #540]	@ (8013fa0 <HAL_SPI_Init+0x23c>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d00f      	beq.n	8013da6 <HAL_SPI_Init+0x42>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4a86      	ldr	r2, [pc, #536]	@ (8013fa4 <HAL_SPI_Init+0x240>)
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d00a      	beq.n	8013da6 <HAL_SPI_Init+0x42>
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4a84      	ldr	r2, [pc, #528]	@ (8013fa8 <HAL_SPI_Init+0x244>)
 8013d96:	4293      	cmp	r3, r2
 8013d98:	d005      	beq.n	8013da6 <HAL_SPI_Init+0x42>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	2b0f      	cmp	r3, #15
 8013da0:	d901      	bls.n	8013da6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8013da2:	2301      	movs	r3, #1
 8013da4:	e0f7      	b.n	8013f96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f001 ff76 	bl	8015c98 <SPI_GetPacketSize>
 8013dac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	4a7b      	ldr	r2, [pc, #492]	@ (8013fa0 <HAL_SPI_Init+0x23c>)
 8013db4:	4293      	cmp	r3, r2
 8013db6:	d00c      	beq.n	8013dd2 <HAL_SPI_Init+0x6e>
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	4a79      	ldr	r2, [pc, #484]	@ (8013fa4 <HAL_SPI_Init+0x240>)
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d007      	beq.n	8013dd2 <HAL_SPI_Init+0x6e>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	4a78      	ldr	r2, [pc, #480]	@ (8013fa8 <HAL_SPI_Init+0x244>)
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	d002      	beq.n	8013dd2 <HAL_SPI_Init+0x6e>
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2b08      	cmp	r3, #8
 8013dd0:	d811      	bhi.n	8013df6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013dd6:	4a72      	ldr	r2, [pc, #456]	@ (8013fa0 <HAL_SPI_Init+0x23c>)
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	d009      	beq.n	8013df0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	4a70      	ldr	r2, [pc, #448]	@ (8013fa4 <HAL_SPI_Init+0x240>)
 8013de2:	4293      	cmp	r3, r2
 8013de4:	d004      	beq.n	8013df0 <HAL_SPI_Init+0x8c>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	4a6f      	ldr	r2, [pc, #444]	@ (8013fa8 <HAL_SPI_Init+0x244>)
 8013dec:	4293      	cmp	r3, r2
 8013dee:	d104      	bne.n	8013dfa <HAL_SPI_Init+0x96>
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2b10      	cmp	r3, #16
 8013df4:	d901      	bls.n	8013dfa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8013df6:	2301      	movs	r3, #1
 8013df8:	e0cd      	b.n	8013f96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d106      	bne.n	8013e14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f7f3 fe28 	bl	8007a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2202      	movs	r2, #2
 8013e18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	f022 0201 	bic.w	r2, r2, #1
 8013e2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8013e36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	699b      	ldr	r3, [r3, #24]
 8013e3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013e40:	d119      	bne.n	8013e76 <HAL_SPI_Init+0x112>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013e4a:	d103      	bne.n	8013e54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d008      	beq.n	8013e66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d10c      	bne.n	8013e76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013e60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013e64:	d107      	bne.n	8013e76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013e74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d00f      	beq.n	8013ea2 <HAL_SPI_Init+0x13e>
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	68db      	ldr	r3, [r3, #12]
 8013e86:	2b06      	cmp	r3, #6
 8013e88:	d90b      	bls.n	8013ea2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	430a      	orrs	r2, r1
 8013e9e:	601a      	str	r2, [r3, #0]
 8013ea0:	e007      	b.n	8013eb2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013eb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	69da      	ldr	r2, [r3, #28]
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013eba:	431a      	orrs	r2, r3
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	431a      	orrs	r2, r3
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ec4:	ea42 0103 	orr.w	r1, r2, r3
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	68da      	ldr	r2, [r3, #12]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	430a      	orrs	r2, r1
 8013ed2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013edc:	431a      	orrs	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ee2:	431a      	orrs	r2, r3
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	699b      	ldr	r3, [r3, #24]
 8013ee8:	431a      	orrs	r2, r3
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	691b      	ldr	r3, [r3, #16]
 8013eee:	431a      	orrs	r2, r3
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	695b      	ldr	r3, [r3, #20]
 8013ef4:	431a      	orrs	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6a1b      	ldr	r3, [r3, #32]
 8013efa:	431a      	orrs	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	431a      	orrs	r2, r3
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013f06:	431a      	orrs	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	689b      	ldr	r3, [r3, #8]
 8013f0c:	431a      	orrs	r2, r3
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013f12:	ea42 0103 	orr.w	r1, r2, r3
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	430a      	orrs	r2, r1
 8013f20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d113      	bne.n	8013f52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	689b      	ldr	r3, [r3, #8]
 8013f30:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013f3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	689b      	ldr	r3, [r3, #8]
 8013f44:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013f50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	f022 0201 	bic.w	r2, r2, #1
 8013f60:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	685b      	ldr	r3, [r3, #4]
 8013f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d00a      	beq.n	8013f84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	430a      	orrs	r2, r1
 8013f82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2200      	movs	r2, #0
 8013f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2201      	movs	r2, #1
 8013f90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8013f94:	2300      	movs	r3, #0
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3710      	adds	r7, #16
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	40013000 	.word	0x40013000
 8013fa4:	40003800 	.word	0x40003800
 8013fa8:	40003c00 	.word	0x40003c00

08013fac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b088      	sub	sp, #32
 8013fb0:	af02      	add	r7, sp, #8
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	603b      	str	r3, [r7, #0]
 8013fb8:	4613      	mov	r3, r2
 8013fba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	3320      	adds	r3, #32
 8013fc2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013fc4:	f7f4 fd58 	bl	8008a78 <HAL_GetTick>
 8013fc8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013fd0:	b2db      	uxtb	r3, r3
 8013fd2:	2b01      	cmp	r3, #1
 8013fd4:	d001      	beq.n	8013fda <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8013fd6:	2302      	movs	r3, #2
 8013fd8:	e1d1      	b.n	801437e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d002      	beq.n	8013fe6 <HAL_SPI_Transmit+0x3a>
 8013fe0:	88fb      	ldrh	r3, [r7, #6]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d101      	bne.n	8013fea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e1c9      	b.n	801437e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013ff0:	2b01      	cmp	r3, #1
 8013ff2:	d101      	bne.n	8013ff8 <HAL_SPI_Transmit+0x4c>
 8013ff4:	2302      	movs	r3, #2
 8013ff6:	e1c2      	b.n	801437e <HAL_SPI_Transmit+0x3d2>
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2201      	movs	r2, #1
 8013ffc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2203      	movs	r2, #3
 8014004:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2200      	movs	r2, #0
 801400c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	68ba      	ldr	r2, [r7, #8]
 8014014:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	88fa      	ldrh	r2, [r7, #6]
 801401a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	88fa      	ldrh	r2, [r7, #6]
 8014022:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2200      	movs	r2, #0
 801402a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2200      	movs	r2, #0
 8014030:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	2200      	movs	r2, #0
 8014038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	2200      	movs	r2, #0
 8014040:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	2200      	movs	r2, #0
 8014046:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	689b      	ldr	r3, [r3, #8]
 801404c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014050:	d108      	bne.n	8014064 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014060:	601a      	str	r2, [r3, #0]
 8014062:	e009      	b.n	8014078 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	68db      	ldr	r3, [r3, #12]
 801406a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014076:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	685a      	ldr	r2, [r3, #4]
 801407e:	4b96      	ldr	r3, [pc, #600]	@ (80142d8 <HAL_SPI_Transmit+0x32c>)
 8014080:	4013      	ands	r3, r2
 8014082:	88f9      	ldrh	r1, [r7, #6]
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	6812      	ldr	r2, [r2, #0]
 8014088:	430b      	orrs	r3, r1
 801408a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	f042 0201 	orr.w	r2, r2, #1
 801409a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80140a4:	d107      	bne.n	80140b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	681a      	ldr	r2, [r3, #0]
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80140b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	2b0f      	cmp	r3, #15
 80140bc:	d947      	bls.n	801414e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80140be:	e03f      	b.n	8014140 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	695b      	ldr	r3, [r3, #20]
 80140c6:	f003 0302 	and.w	r3, r3, #2
 80140ca:	2b02      	cmp	r3, #2
 80140cc:	d114      	bne.n	80140f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	6812      	ldr	r2, [r2, #0]
 80140d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80140de:	1d1a      	adds	r2, r3, #4
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	3b01      	subs	r3, #1
 80140ee:	b29a      	uxth	r2, r3
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80140f6:	e023      	b.n	8014140 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80140f8:	f7f4 fcbe 	bl	8008a78 <HAL_GetTick>
 80140fc:	4602      	mov	r2, r0
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	1ad3      	subs	r3, r2, r3
 8014102:	683a      	ldr	r2, [r7, #0]
 8014104:	429a      	cmp	r2, r3
 8014106:	d803      	bhi.n	8014110 <HAL_SPI_Transmit+0x164>
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801410e:	d102      	bne.n	8014116 <HAL_SPI_Transmit+0x16a>
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d114      	bne.n	8014140 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014116:	68f8      	ldr	r0, [r7, #12]
 8014118:	f001 fcf0 	bl	8015afc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014122:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	2201      	movs	r2, #1
 8014130:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	2200      	movs	r2, #0
 8014138:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801413c:	2303      	movs	r3, #3
 801413e:	e11e      	b.n	801437e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014146:	b29b      	uxth	r3, r3
 8014148:	2b00      	cmp	r3, #0
 801414a:	d1b9      	bne.n	80140c0 <HAL_SPI_Transmit+0x114>
 801414c:	e0f1      	b.n	8014332 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	68db      	ldr	r3, [r3, #12]
 8014152:	2b07      	cmp	r3, #7
 8014154:	f240 80e6 	bls.w	8014324 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014158:	e05d      	b.n	8014216 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	695b      	ldr	r3, [r3, #20]
 8014160:	f003 0302 	and.w	r3, r3, #2
 8014164:	2b02      	cmp	r3, #2
 8014166:	d132      	bne.n	80141ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801416e:	b29b      	uxth	r3, r3
 8014170:	2b01      	cmp	r3, #1
 8014172:	d918      	bls.n	80141a6 <HAL_SPI_Transmit+0x1fa>
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014178:	2b00      	cmp	r3, #0
 801417a:	d014      	beq.n	80141a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	6812      	ldr	r2, [r2, #0]
 8014186:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801418c:	1d1a      	adds	r2, r3, #4
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014198:	b29b      	uxth	r3, r3
 801419a:	3b02      	subs	r3, #2
 801419c:	b29a      	uxth	r2, r3
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80141a4:	e037      	b.n	8014216 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80141aa:	881a      	ldrh	r2, [r3, #0]
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80141b4:	1c9a      	adds	r2, r3, #2
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80141c0:	b29b      	uxth	r3, r3
 80141c2:	3b01      	subs	r3, #1
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80141cc:	e023      	b.n	8014216 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80141ce:	f7f4 fc53 	bl	8008a78 <HAL_GetTick>
 80141d2:	4602      	mov	r2, r0
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	1ad3      	subs	r3, r2, r3
 80141d8:	683a      	ldr	r2, [r7, #0]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d803      	bhi.n	80141e6 <HAL_SPI_Transmit+0x23a>
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141e4:	d102      	bne.n	80141ec <HAL_SPI_Transmit+0x240>
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d114      	bne.n	8014216 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80141ec:	68f8      	ldr	r0, [r7, #12]
 80141ee:	f001 fc85 	bl	8015afc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80141f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	2201      	movs	r2, #1
 8014206:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	2200      	movs	r2, #0
 801420e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014212:	2303      	movs	r3, #3
 8014214:	e0b3      	b.n	801437e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801421c:	b29b      	uxth	r3, r3
 801421e:	2b00      	cmp	r3, #0
 8014220:	d19b      	bne.n	801415a <HAL_SPI_Transmit+0x1ae>
 8014222:	e086      	b.n	8014332 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	695b      	ldr	r3, [r3, #20]
 801422a:	f003 0302 	and.w	r3, r3, #2
 801422e:	2b02      	cmp	r3, #2
 8014230:	d154      	bne.n	80142dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014238:	b29b      	uxth	r3, r3
 801423a:	2b03      	cmp	r3, #3
 801423c:	d918      	bls.n	8014270 <HAL_SPI_Transmit+0x2c4>
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014242:	2b40      	cmp	r3, #64	@ 0x40
 8014244:	d914      	bls.n	8014270 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	6812      	ldr	r2, [r2, #0]
 8014250:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014256:	1d1a      	adds	r2, r3, #4
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014262:	b29b      	uxth	r3, r3
 8014264:	3b04      	subs	r3, #4
 8014266:	b29a      	uxth	r2, r3
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801426e:	e059      	b.n	8014324 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014276:	b29b      	uxth	r3, r3
 8014278:	2b01      	cmp	r3, #1
 801427a:	d917      	bls.n	80142ac <HAL_SPI_Transmit+0x300>
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014280:	2b00      	cmp	r3, #0
 8014282:	d013      	beq.n	80142ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014288:	881a      	ldrh	r2, [r3, #0]
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014292:	1c9a      	adds	r2, r3, #2
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801429e:	b29b      	uxth	r3, r3
 80142a0:	3b02      	subs	r3, #2
 80142a2:	b29a      	uxth	r2, r3
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80142aa:	e03b      	b.n	8014324 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	3320      	adds	r3, #32
 80142b6:	7812      	ldrb	r2, [r2, #0]
 80142b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80142be:	1c5a      	adds	r2, r3, #1
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	3b01      	subs	r3, #1
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80142d6:	e025      	b.n	8014324 <HAL_SPI_Transmit+0x378>
 80142d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80142dc:	f7f4 fbcc 	bl	8008a78 <HAL_GetTick>
 80142e0:	4602      	mov	r2, r0
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	683a      	ldr	r2, [r7, #0]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d803      	bhi.n	80142f4 <HAL_SPI_Transmit+0x348>
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142f2:	d102      	bne.n	80142fa <HAL_SPI_Transmit+0x34e>
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d114      	bne.n	8014324 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80142fa:	68f8      	ldr	r0, [r7, #12]
 80142fc:	f001 fbfe 	bl	8015afc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014306:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	2201      	movs	r2, #1
 8014314:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2200      	movs	r2, #0
 801431c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014320:	2303      	movs	r3, #3
 8014322:	e02c      	b.n	801437e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801432a:	b29b      	uxth	r3, r3
 801432c:	2b00      	cmp	r3, #0
 801432e:	f47f af79 	bne.w	8014224 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	2200      	movs	r2, #0
 801433a:	2108      	movs	r1, #8
 801433c:	68f8      	ldr	r0, [r7, #12]
 801433e:	f001 fc7d 	bl	8015c3c <SPI_WaitOnFlagUntilTimeout>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	d007      	beq.n	8014358 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801434e:	f043 0220 	orr.w	r2, r3, #32
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014358:	68f8      	ldr	r0, [r7, #12]
 801435a:	f001 fbcf 	bl	8015afc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	2201      	movs	r2, #1
 8014362:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	2200      	movs	r2, #0
 801436a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014374:	2b00      	cmp	r3, #0
 8014376:	d001      	beq.n	801437c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014378:	2301      	movs	r3, #1
 801437a:	e000      	b.n	801437e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801437c:	2300      	movs	r3, #0
  }
}
 801437e:	4618      	mov	r0, r3
 8014380:	3718      	adds	r7, #24
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}
 8014386:	bf00      	nop

08014388 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b088      	sub	sp, #32
 801438c:	af00      	add	r7, sp, #0
 801438e:	60f8      	str	r0, [r7, #12]
 8014390:	60b9      	str	r1, [r7, #8]
 8014392:	603b      	str	r3, [r7, #0]
 8014394:	4613      	mov	r3, r2
 8014396:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801439c:	095b      	lsrs	r3, r3, #5
 801439e:	b29b      	uxth	r3, r3
 80143a0:	3301      	adds	r3, #1
 80143a2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	3330      	adds	r3, #48	@ 0x30
 80143aa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80143ac:	f7f4 fb64 	bl	8008a78 <HAL_GetTick>
 80143b0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80143b8:	b2db      	uxtb	r3, r3
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d001      	beq.n	80143c2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80143be:	2302      	movs	r3, #2
 80143c0:	e250      	b.n	8014864 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d002      	beq.n	80143ce <HAL_SPI_Receive+0x46>
 80143c8:	88fb      	ldrh	r3, [r7, #6]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d101      	bne.n	80143d2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80143ce:	2301      	movs	r3, #1
 80143d0:	e248      	b.n	8014864 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80143d8:	2b01      	cmp	r3, #1
 80143da:	d101      	bne.n	80143e0 <HAL_SPI_Receive+0x58>
 80143dc:	2302      	movs	r3, #2
 80143de:	e241      	b.n	8014864 <HAL_SPI_Receive+0x4dc>
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	2201      	movs	r2, #1
 80143e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2204      	movs	r2, #4
 80143ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2200      	movs	r2, #0
 80143f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	68ba      	ldr	r2, [r7, #8]
 80143fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	88fa      	ldrh	r2, [r7, #6]
 8014402:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	88fa      	ldrh	r2, [r7, #6]
 801440a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	2200      	movs	r2, #0
 8014412:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	2200      	movs	r2, #0
 8014418:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	2200      	movs	r2, #0
 8014420:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2200      	movs	r2, #0
 8014428:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	2200      	movs	r2, #0
 801442e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	689b      	ldr	r3, [r3, #8]
 8014434:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014438:	d108      	bne.n	801444c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	681a      	ldr	r2, [r3, #0]
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014448:	601a      	str	r2, [r3, #0]
 801444a:	e009      	b.n	8014460 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	68db      	ldr	r3, [r3, #12]
 8014452:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801445e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	685a      	ldr	r2, [r3, #4]
 8014466:	4b95      	ldr	r3, [pc, #596]	@ (80146bc <HAL_SPI_Receive+0x334>)
 8014468:	4013      	ands	r3, r2
 801446a:	88f9      	ldrh	r1, [r7, #6]
 801446c:	68fa      	ldr	r2, [r7, #12]
 801446e:	6812      	ldr	r2, [r2, #0]
 8014470:	430b      	orrs	r3, r1
 8014472:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	681a      	ldr	r2, [r3, #0]
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f042 0201 	orr.w	r2, r2, #1
 8014482:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	685b      	ldr	r3, [r3, #4]
 8014488:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801448c:	d107      	bne.n	801449e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801449c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	2b0f      	cmp	r3, #15
 80144a4:	d96c      	bls.n	8014580 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80144a6:	e064      	b.n	8014572 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	695b      	ldr	r3, [r3, #20]
 80144ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	695b      	ldr	r3, [r3, #20]
 80144b6:	f003 0301 	and.w	r3, r3, #1
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	d114      	bne.n	80144e8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	681a      	ldr	r2, [r3, #0]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80144c8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144ce:	1d1a      	adds	r2, r3, #4
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80144da:	b29b      	uxth	r3, r3
 80144dc:	3b01      	subs	r3, #1
 80144de:	b29a      	uxth	r2, r3
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80144e6:	e044      	b.n	8014572 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	8bfa      	ldrh	r2, [r7, #30]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d919      	bls.n	801452a <HAL_SPI_Receive+0x1a2>
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d014      	beq.n	801452a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	681a      	ldr	r2, [r3, #0]
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014508:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801450a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014510:	1d1a      	adds	r2, r3, #4
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801451c:	b29b      	uxth	r3, r3
 801451e:	3b01      	subs	r3, #1
 8014520:	b29a      	uxth	r2, r3
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014528:	e023      	b.n	8014572 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801452a:	f7f4 faa5 	bl	8008a78 <HAL_GetTick>
 801452e:	4602      	mov	r2, r0
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	1ad3      	subs	r3, r2, r3
 8014534:	683a      	ldr	r2, [r7, #0]
 8014536:	429a      	cmp	r2, r3
 8014538:	d803      	bhi.n	8014542 <HAL_SPI_Receive+0x1ba>
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014540:	d102      	bne.n	8014548 <HAL_SPI_Receive+0x1c0>
 8014542:	683b      	ldr	r3, [r7, #0]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d114      	bne.n	8014572 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014548:	68f8      	ldr	r0, [r7, #12]
 801454a:	f001 fad7 	bl	8015afc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014554:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2201      	movs	r2, #1
 8014562:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2200      	movs	r2, #0
 801456a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801456e:	2303      	movs	r3, #3
 8014570:	e178      	b.n	8014864 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014578:	b29b      	uxth	r3, r3
 801457a:	2b00      	cmp	r3, #0
 801457c:	d194      	bne.n	80144a8 <HAL_SPI_Receive+0x120>
 801457e:	e15e      	b.n	801483e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	68db      	ldr	r3, [r3, #12]
 8014584:	2b07      	cmp	r3, #7
 8014586:	f240 8153 	bls.w	8014830 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801458a:	e08f      	b.n	80146ac <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	695b      	ldr	r3, [r3, #20]
 8014592:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	695b      	ldr	r3, [r3, #20]
 801459a:	f003 0301 	and.w	r3, r3, #1
 801459e:	2b01      	cmp	r3, #1
 80145a0:	d114      	bne.n	80145cc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80145a6:	69ba      	ldr	r2, [r7, #24]
 80145a8:	8812      	ldrh	r2, [r2, #0]
 80145aa:	b292      	uxth	r2, r2
 80145ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80145b2:	1c9a      	adds	r2, r3, #2
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80145be:	b29b      	uxth	r3, r3
 80145c0:	3b01      	subs	r3, #1
 80145c2:	b29a      	uxth	r2, r3
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80145ca:	e06f      	b.n	80146ac <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80145d2:	b29b      	uxth	r3, r3
 80145d4:	8bfa      	ldrh	r2, [r7, #30]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d924      	bls.n	8014624 <HAL_SPI_Receive+0x29c>
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d01f      	beq.n	8014624 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80145e8:	69ba      	ldr	r2, [r7, #24]
 80145ea:	8812      	ldrh	r2, [r2, #0]
 80145ec:	b292      	uxth	r2, r2
 80145ee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80145f4:	1c9a      	adds	r2, r3, #2
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80145fe:	69ba      	ldr	r2, [r7, #24]
 8014600:	8812      	ldrh	r2, [r2, #0]
 8014602:	b292      	uxth	r2, r2
 8014604:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801460a:	1c9a      	adds	r2, r3, #2
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014616:	b29b      	uxth	r3, r3
 8014618:	3b02      	subs	r3, #2
 801461a:	b29a      	uxth	r2, r3
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014622:	e043      	b.n	80146ac <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801462a:	b29b      	uxth	r3, r3
 801462c:	2b01      	cmp	r3, #1
 801462e:	d119      	bne.n	8014664 <HAL_SPI_Receive+0x2dc>
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014636:	2b00      	cmp	r3, #0
 8014638:	d014      	beq.n	8014664 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801463e:	69ba      	ldr	r2, [r7, #24]
 8014640:	8812      	ldrh	r2, [r2, #0]
 8014642:	b292      	uxth	r2, r2
 8014644:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801464a:	1c9a      	adds	r2, r3, #2
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014656:	b29b      	uxth	r3, r3
 8014658:	3b01      	subs	r3, #1
 801465a:	b29a      	uxth	r2, r3
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014662:	e023      	b.n	80146ac <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014664:	f7f4 fa08 	bl	8008a78 <HAL_GetTick>
 8014668:	4602      	mov	r2, r0
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	1ad3      	subs	r3, r2, r3
 801466e:	683a      	ldr	r2, [r7, #0]
 8014670:	429a      	cmp	r2, r3
 8014672:	d803      	bhi.n	801467c <HAL_SPI_Receive+0x2f4>
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467a:	d102      	bne.n	8014682 <HAL_SPI_Receive+0x2fa>
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d114      	bne.n	80146ac <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014682:	68f8      	ldr	r0, [r7, #12]
 8014684:	f001 fa3a 	bl	8015afc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801468e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2201      	movs	r2, #1
 801469c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	2200      	movs	r2, #0
 80146a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80146a8:	2303      	movs	r3, #3
 80146aa:	e0db      	b.n	8014864 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80146b2:	b29b      	uxth	r3, r3
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	f47f af69 	bne.w	801458c <HAL_SPI_Receive+0x204>
 80146ba:	e0c0      	b.n	801483e <HAL_SPI_Receive+0x4b6>
 80146bc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	695b      	ldr	r3, [r3, #20]
 80146c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	695b      	ldr	r3, [r3, #20]
 80146ce:	f003 0301 	and.w	r3, r3, #1
 80146d2:	2b01      	cmp	r3, #1
 80146d4:	d117      	bne.n	8014706 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80146e2:	7812      	ldrb	r2, [r2, #0]
 80146e4:	b2d2      	uxtb	r2, r2
 80146e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80146ec:	1c5a      	adds	r2, r3, #1
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80146f8:	b29b      	uxth	r3, r3
 80146fa:	3b01      	subs	r3, #1
 80146fc:	b29a      	uxth	r2, r3
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014704:	e094      	b.n	8014830 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801470c:	b29b      	uxth	r3, r3
 801470e:	8bfa      	ldrh	r2, [r7, #30]
 8014710:	429a      	cmp	r2, r3
 8014712:	d946      	bls.n	80147a2 <HAL_SPI_Receive+0x41a>
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801471a:	2b00      	cmp	r3, #0
 801471c:	d041      	beq.n	80147a2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801472a:	7812      	ldrb	r2, [r2, #0]
 801472c:	b2d2      	uxtb	r2, r2
 801472e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014734:	1c5a      	adds	r2, r3, #1
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014746:	7812      	ldrb	r2, [r2, #0]
 8014748:	b2d2      	uxtb	r2, r2
 801474a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014750:	1c5a      	adds	r2, r3, #1
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014762:	7812      	ldrb	r2, [r2, #0]
 8014764:	b2d2      	uxtb	r2, r2
 8014766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801476c:	1c5a      	adds	r2, r3, #1
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801477e:	7812      	ldrb	r2, [r2, #0]
 8014780:	b2d2      	uxtb	r2, r2
 8014782:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014788:	1c5a      	adds	r2, r3, #1
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014794:	b29b      	uxth	r3, r3
 8014796:	3b04      	subs	r3, #4
 8014798:	b29a      	uxth	r2, r3
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80147a0:	e046      	b.n	8014830 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	2b03      	cmp	r3, #3
 80147ac:	d81c      	bhi.n	80147e8 <HAL_SPI_Receive+0x460>
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d017      	beq.n	80147e8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147c4:	7812      	ldrb	r2, [r2, #0]
 80147c6:	b2d2      	uxtb	r2, r2
 80147c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147ce:	1c5a      	adds	r2, r3, #1
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147da:	b29b      	uxth	r3, r3
 80147dc:	3b01      	subs	r3, #1
 80147de:	b29a      	uxth	r2, r3
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80147e6:	e023      	b.n	8014830 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80147e8:	f7f4 f946 	bl	8008a78 <HAL_GetTick>
 80147ec:	4602      	mov	r2, r0
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	1ad3      	subs	r3, r2, r3
 80147f2:	683a      	ldr	r2, [r7, #0]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d803      	bhi.n	8014800 <HAL_SPI_Receive+0x478>
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147fe:	d102      	bne.n	8014806 <HAL_SPI_Receive+0x47e>
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d114      	bne.n	8014830 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014806:	68f8      	ldr	r0, [r7, #12]
 8014808:	f001 f978 	bl	8015afc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014812:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2201      	movs	r2, #1
 8014820:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2200      	movs	r2, #0
 8014828:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801482c:	2303      	movs	r3, #3
 801482e:	e019      	b.n	8014864 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014836:	b29b      	uxth	r3, r3
 8014838:	2b00      	cmp	r3, #0
 801483a:	f47f af41 	bne.w	80146c0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801483e:	68f8      	ldr	r0, [r7, #12]
 8014840:	f001 f95c 	bl	8015afc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2201      	movs	r2, #1
 8014848:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2200      	movs	r2, #0
 8014850:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801485a:	2b00      	cmp	r3, #0
 801485c:	d001      	beq.n	8014862 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801485e:	2301      	movs	r3, #1
 8014860:	e000      	b.n	8014864 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8014862:	2300      	movs	r3, #0
  }
}
 8014864:	4618      	mov	r0, r3
 8014866:	3720      	adds	r7, #32
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b08e      	sub	sp, #56	@ 0x38
 8014870:	af02      	add	r7, sp, #8
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	607a      	str	r2, [r7, #4]
 8014878:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	3320      	adds	r3, #32
 8014880:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	3330      	adds	r3, #48	@ 0x30
 8014888:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801488e:	095b      	lsrs	r3, r3, #5
 8014890:	b29b      	uxth	r3, r3
 8014892:	3301      	adds	r3, #1
 8014894:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014896:	f7f4 f8ef 	bl	8008a78 <HAL_GetTick>
 801489a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 801489c:	887b      	ldrh	r3, [r7, #2]
 801489e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80148a0:	887b      	ldrh	r3, [r7, #2]
 80148a2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	d001      	beq.n	80148b4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80148b0:	2302      	movs	r3, #2
 80148b2:	e310      	b.n	8014ed6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d005      	beq.n	80148c6 <HAL_SPI_TransmitReceive+0x5a>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d002      	beq.n	80148c6 <HAL_SPI_TransmitReceive+0x5a>
 80148c0:	887b      	ldrh	r3, [r7, #2]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d101      	bne.n	80148ca <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80148c6:	2301      	movs	r3, #1
 80148c8:	e305      	b.n	8014ed6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d101      	bne.n	80148d8 <HAL_SPI_TransmitReceive+0x6c>
 80148d4:	2302      	movs	r3, #2
 80148d6:	e2fe      	b.n	8014ed6 <HAL_SPI_TransmitReceive+0x66a>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2201      	movs	r2, #1
 80148dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2205      	movs	r2, #5
 80148e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	2200      	movs	r2, #0
 80148ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	887a      	ldrh	r2, [r7, #2]
 80148fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	887a      	ldrh	r2, [r7, #2]
 8014902:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	68ba      	ldr	r2, [r7, #8]
 801490a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	887a      	ldrh	r2, [r7, #2]
 8014910:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	887a      	ldrh	r2, [r7, #2]
 8014918:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2200      	movs	r2, #0
 8014920:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2200      	movs	r2, #0
 8014926:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	68da      	ldr	r2, [r3, #12]
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8014936:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	4a70      	ldr	r2, [pc, #448]	@ (8014b00 <HAL_SPI_TransmitReceive+0x294>)
 801493e:	4293      	cmp	r3, r2
 8014940:	d009      	beq.n	8014956 <HAL_SPI_TransmitReceive+0xea>
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	4a6f      	ldr	r2, [pc, #444]	@ (8014b04 <HAL_SPI_TransmitReceive+0x298>)
 8014948:	4293      	cmp	r3, r2
 801494a:	d004      	beq.n	8014956 <HAL_SPI_TransmitReceive+0xea>
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	4a6d      	ldr	r2, [pc, #436]	@ (8014b08 <HAL_SPI_TransmitReceive+0x29c>)
 8014952:	4293      	cmp	r3, r2
 8014954:	d102      	bne.n	801495c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8014956:	2310      	movs	r3, #16
 8014958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801495a:	e001      	b.n	8014960 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 801495c:	2308      	movs	r3, #8
 801495e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	685a      	ldr	r2, [r3, #4]
 8014966:	4b69      	ldr	r3, [pc, #420]	@ (8014b0c <HAL_SPI_TransmitReceive+0x2a0>)
 8014968:	4013      	ands	r3, r2
 801496a:	8879      	ldrh	r1, [r7, #2]
 801496c:	68fa      	ldr	r2, [r7, #12]
 801496e:	6812      	ldr	r2, [r2, #0]
 8014970:	430b      	orrs	r3, r1
 8014972:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	f042 0201 	orr.w	r2, r2, #1
 8014982:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801498c:	d107      	bne.n	801499e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801499c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	68db      	ldr	r3, [r3, #12]
 80149a2:	2b0f      	cmp	r3, #15
 80149a4:	f240 80a2 	bls.w	8014aec <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80149a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149aa:	089b      	lsrs	r3, r3, #2
 80149ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80149ae:	e094      	b.n	8014ada <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	695b      	ldr	r3, [r3, #20]
 80149b6:	f003 0302 	and.w	r3, r3, #2
 80149ba:	2b02      	cmp	r3, #2
 80149bc:	d120      	bne.n	8014a00 <HAL_SPI_TransmitReceive+0x194>
 80149be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d01d      	beq.n	8014a00 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80149c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80149c6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80149c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149ca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d217      	bcs.n	8014a00 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	6812      	ldr	r2, [r2, #0]
 80149da:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149e0:	1d1a      	adds	r2, r3, #4
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149ec:	b29b      	uxth	r3, r3
 80149ee:	3b01      	subs	r3, #1
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	695b      	ldr	r3, [r3, #20]
 8014a06:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014a08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d065      	beq.n	8014ada <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	695b      	ldr	r3, [r3, #20]
 8014a14:	f003 0301 	and.w	r3, r3, #1
 8014a18:	2b01      	cmp	r3, #1
 8014a1a:	d118      	bne.n	8014a4e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014a26:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a2c:	1d1a      	adds	r2, r3, #4
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	3b01      	subs	r3, #1
 8014a3c:	b29a      	uxth	r2, r3
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014a4c:	e045      	b.n	8014ada <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014a4e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014a50:	8bfb      	ldrh	r3, [r7, #30]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d21d      	bcs.n	8014a92 <HAL_SPI_TransmitReceive+0x226>
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d018      	beq.n	8014a92 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014a6a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a70:	1d1a      	adds	r2, r3, #4
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	3b01      	subs	r3, #1
 8014a80:	b29a      	uxth	r2, r3
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014a90:	e023      	b.n	8014ada <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014a92:	f7f3 fff1 	bl	8008a78 <HAL_GetTick>
 8014a96:	4602      	mov	r2, r0
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	1ad3      	subs	r3, r2, r3
 8014a9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d803      	bhi.n	8014aaa <HAL_SPI_TransmitReceive+0x23e>
 8014aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aa8:	d102      	bne.n	8014ab0 <HAL_SPI_TransmitReceive+0x244>
 8014aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d114      	bne.n	8014ada <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014ab0:	68f8      	ldr	r0, [r7, #12]
 8014ab2:	f001 f823 	bl	8015afc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014abc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2201      	movs	r2, #1
 8014aca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014ad6:	2303      	movs	r3, #3
 8014ad8:	e1fd      	b.n	8014ed6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014ada:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	f47f af67 	bne.w	80149b0 <HAL_SPI_TransmitReceive+0x144>
 8014ae2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f47f af63 	bne.w	80149b0 <HAL_SPI_TransmitReceive+0x144>
 8014aea:	e1ce      	b.n	8014e8a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	2b07      	cmp	r3, #7
 8014af2:	f240 81c2 	bls.w	8014e7a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8014af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014af8:	085b      	lsrs	r3, r3, #1
 8014afa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014afc:	e0c9      	b.n	8014c92 <HAL_SPI_TransmitReceive+0x426>
 8014afe:	bf00      	nop
 8014b00:	40013000 	.word	0x40013000
 8014b04:	40003800 	.word	0x40003800
 8014b08:	40003c00 	.word	0x40003c00
 8014b0c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	695b      	ldr	r3, [r3, #20]
 8014b16:	f003 0302 	and.w	r3, r3, #2
 8014b1a:	2b02      	cmp	r3, #2
 8014b1c:	d11f      	bne.n	8014b5e <HAL_SPI_TransmitReceive+0x2f2>
 8014b1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d01c      	beq.n	8014b5e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014b24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014b26:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b2a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d216      	bcs.n	8014b5e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014b34:	881a      	ldrh	r2, [r3, #0]
 8014b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b38:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014b3e:	1c9a      	adds	r2, r3, #2
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	3b01      	subs	r3, #1
 8014b4e:	b29a      	uxth	r2, r3
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014b5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	695b      	ldr	r3, [r3, #20]
 8014b64:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014b66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	f000 8092 	beq.w	8014c92 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	695b      	ldr	r3, [r3, #20]
 8014b74:	f003 0301 	and.w	r3, r3, #1
 8014b78:	2b01      	cmp	r3, #1
 8014b7a:	d118      	bne.n	8014bae <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b80:	6a3a      	ldr	r2, [r7, #32]
 8014b82:	8812      	ldrh	r2, [r2, #0]
 8014b84:	b292      	uxth	r2, r2
 8014b86:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b8c:	1c9a      	adds	r2, r3, #2
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b98:	b29b      	uxth	r3, r3
 8014b9a:	3b01      	subs	r3, #1
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014baa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014bac:	e071      	b.n	8014c92 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014bae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014bb0:	8bfb      	ldrh	r3, [r7, #30]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d228      	bcs.n	8014c08 <HAL_SPI_TransmitReceive+0x39c>
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d023      	beq.n	8014c08 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bc4:	6a3a      	ldr	r2, [r7, #32]
 8014bc6:	8812      	ldrh	r2, [r2, #0]
 8014bc8:	b292      	uxth	r2, r2
 8014bca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bd0:	1c9a      	adds	r2, r3, #2
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bda:	6a3a      	ldr	r2, [r7, #32]
 8014bdc:	8812      	ldrh	r2, [r2, #0]
 8014bde:	b292      	uxth	r2, r2
 8014be0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014be6:	1c9a      	adds	r2, r3, #2
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	3b02      	subs	r3, #2
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c04:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014c06:	e044      	b.n	8014c92 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014c08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d11d      	bne.n	8014c4a <HAL_SPI_TransmitReceive+0x3de>
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d018      	beq.n	8014c4a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c1c:	6a3a      	ldr	r2, [r7, #32]
 8014c1e:	8812      	ldrh	r2, [r2, #0]
 8014c20:	b292      	uxth	r2, r2
 8014c22:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c28:	1c9a      	adds	r2, r3, #2
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	3b01      	subs	r3, #1
 8014c38:	b29a      	uxth	r2, r3
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c46:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014c48:	e023      	b.n	8014c92 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c4a:	f7f3 ff15 	bl	8008a78 <HAL_GetTick>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	1ad3      	subs	r3, r2, r3
 8014c54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d803      	bhi.n	8014c62 <HAL_SPI_TransmitReceive+0x3f6>
 8014c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c60:	d102      	bne.n	8014c68 <HAL_SPI_TransmitReceive+0x3fc>
 8014c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d114      	bne.n	8014c92 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014c68:	68f8      	ldr	r0, [r7, #12]
 8014c6a:	f000 ff47 	bl	8015afc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	2201      	movs	r2, #1
 8014c82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	2200      	movs	r2, #0
 8014c8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014c8e:	2303      	movs	r3, #3
 8014c90:	e121      	b.n	8014ed6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014c92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	f47f af3b 	bne.w	8014b10 <HAL_SPI_TransmitReceive+0x2a4>
 8014c9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	f47f af37 	bne.w	8014b10 <HAL_SPI_TransmitReceive+0x2a4>
 8014ca2:	e0f2      	b.n	8014e8a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	695b      	ldr	r3, [r3, #20]
 8014caa:	f003 0302 	and.w	r3, r3, #2
 8014cae:	2b02      	cmp	r3, #2
 8014cb0:	d121      	bne.n	8014cf6 <HAL_SPI_TransmitReceive+0x48a>
 8014cb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d01e      	beq.n	8014cf6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014cb8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014cba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cbe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d218      	bcs.n	8014cf6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	3320      	adds	r3, #32
 8014cce:	7812      	ldrb	r2, [r2, #0]
 8014cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cd6:	1c5a      	adds	r2, r3, #1
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	3b01      	subs	r3, #1
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cf4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	695b      	ldr	r3, [r3, #20]
 8014cfc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014cfe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	f000 80ba 	beq.w	8014e7a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	695b      	ldr	r3, [r3, #20]
 8014d0c:	f003 0301 	and.w	r3, r3, #1
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d11b      	bne.n	8014d4c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d20:	7812      	ldrb	r2, [r2, #0]
 8014d22:	b2d2      	uxtb	r2, r2
 8014d24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d2a:	1c5a      	adds	r2, r3, #1
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	3b01      	subs	r3, #1
 8014d3a:	b29a      	uxth	r2, r3
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d48:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014d4a:	e096      	b.n	8014e7a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014d4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014d4e:	8bfb      	ldrh	r3, [r7, #30]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d24a      	bcs.n	8014dea <HAL_SPI_TransmitReceive+0x57e>
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d045      	beq.n	8014dea <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d6a:	7812      	ldrb	r2, [r2, #0]
 8014d6c:	b2d2      	uxtb	r2, r2
 8014d6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d74:	1c5a      	adds	r2, r3, #1
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d86:	7812      	ldrb	r2, [r2, #0]
 8014d88:	b2d2      	uxtb	r2, r2
 8014d8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d90:	1c5a      	adds	r2, r3, #1
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014da2:	7812      	ldrb	r2, [r2, #0]
 8014da4:	b2d2      	uxtb	r2, r2
 8014da6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dac:	1c5a      	adds	r2, r3, #1
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dbe:	7812      	ldrb	r2, [r2, #0]
 8014dc0:	b2d2      	uxtb	r2, r2
 8014dc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dc8:	1c5a      	adds	r2, r3, #1
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	3b04      	subs	r3, #4
 8014dd8:	b29a      	uxth	r2, r3
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014de6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014de8:	e047      	b.n	8014e7a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8014dea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014dec:	2b03      	cmp	r3, #3
 8014dee:	d820      	bhi.n	8014e32 <HAL_SPI_TransmitReceive+0x5c6>
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d01b      	beq.n	8014e32 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e06:	7812      	ldrb	r2, [r2, #0]
 8014e08:	b2d2      	uxtb	r2, r2
 8014e0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e10:	1c5a      	adds	r2, r3, #1
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e1c:	b29b      	uxth	r3, r3
 8014e1e:	3b01      	subs	r3, #1
 8014e20:	b29a      	uxth	r2, r3
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e2e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014e30:	e023      	b.n	8014e7a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014e32:	f7f3 fe21 	bl	8008a78 <HAL_GetTick>
 8014e36:	4602      	mov	r2, r0
 8014e38:	69bb      	ldr	r3, [r7, #24]
 8014e3a:	1ad3      	subs	r3, r2, r3
 8014e3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d803      	bhi.n	8014e4a <HAL_SPI_TransmitReceive+0x5de>
 8014e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e48:	d102      	bne.n	8014e50 <HAL_SPI_TransmitReceive+0x5e4>
 8014e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d114      	bne.n	8014e7a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014e50:	68f8      	ldr	r0, [r7, #12]
 8014e52:	f000 fe53 	bl	8015afc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	2201      	movs	r2, #1
 8014e6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2200      	movs	r2, #0
 8014e72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014e76:	2303      	movs	r3, #3
 8014e78:	e02d      	b.n	8014ed6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014e7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	f47f af11 	bne.w	8014ca4 <HAL_SPI_TransmitReceive+0x438>
 8014e82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f47f af0d 	bne.w	8014ca4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014e8a:	69bb      	ldr	r3, [r7, #24]
 8014e8c:	9300      	str	r3, [sp, #0]
 8014e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e90:	2200      	movs	r2, #0
 8014e92:	2108      	movs	r1, #8
 8014e94:	68f8      	ldr	r0, [r7, #12]
 8014e96:	f000 fed1 	bl	8015c3c <SPI_WaitOnFlagUntilTimeout>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d007      	beq.n	8014eb0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ea6:	f043 0220 	orr.w	r2, r3, #32
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014eb0:	68f8      	ldr	r0, [r7, #12]
 8014eb2:	f000 fe23 	bl	8015afc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2201      	movs	r2, #1
 8014eba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d001      	beq.n	8014ed4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	e000      	b.n	8014ed6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8014ed4:	2300      	movs	r3, #0
  }
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3730      	adds	r7, #48	@ 0x30
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop

08014ee0 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b085      	sub	sp, #20
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	4613      	mov	r3, r2
 8014eec:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d002      	beq.n	8014efa <HAL_SPI_Transmit_IT+0x1a>
 8014ef4:	88fb      	ldrh	r3, [r7, #6]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d101      	bne.n	8014efe <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8014efa:	2301      	movs	r3, #1
 8014efc:	e08b      	b.n	8015016 <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014f04:	b2db      	uxtb	r3, r3
 8014f06:	2b01      	cmp	r3, #1
 8014f08:	d001      	beq.n	8014f0e <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8014f0a:	2302      	movs	r3, #2
 8014f0c:	e083      	b.n	8015016 <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d101      	bne.n	8014f1c <HAL_SPI_Transmit_IT+0x3c>
 8014f18:	2302      	movs	r3, #2
 8014f1a:	e07c      	b.n	8015016 <HAL_SPI_Transmit_IT+0x136>
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2201      	movs	r2, #1
 8014f20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2203      	movs	r2, #3
 8014f28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	68ba      	ldr	r2, [r7, #8]
 8014f38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	88fa      	ldrh	r2, [r7, #6]
 8014f3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	88fa      	ldrh	r2, [r7, #6]
 8014f46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2200      	movs	r2, #0
 8014f54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2200      	movs	r2, #0
 8014f64:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	68db      	ldr	r3, [r3, #12]
 8014f6a:	2b0f      	cmp	r3, #15
 8014f6c:	d903      	bls.n	8014f76 <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	4a2c      	ldr	r2, [pc, #176]	@ (8015024 <HAL_SPI_Transmit_IT+0x144>)
 8014f72:	675a      	str	r2, [r3, #116]	@ 0x74
 8014f74:	e00a      	b.n	8014f8c <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	2b07      	cmp	r3, #7
 8014f7c:	d903      	bls.n	8014f86 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	4a29      	ldr	r2, [pc, #164]	@ (8015028 <HAL_SPI_Transmit_IT+0x148>)
 8014f82:	675a      	str	r2, [r3, #116]	@ 0x74
 8014f84:	e002      	b.n	8014f8c <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	4a28      	ldr	r2, [pc, #160]	@ (801502c <HAL_SPI_Transmit_IT+0x14c>)
 8014f8a:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	689b      	ldr	r3, [r3, #8]
 8014f90:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014f94:	d108      	bne.n	8014fa8 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014fa4:	601a      	str	r2, [r3, #0]
 8014fa6:	e009      	b.n	8014fbc <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	68db      	ldr	r3, [r3, #12]
 8014fae:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014fba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	685a      	ldr	r2, [r3, #4]
 8014fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8015030 <HAL_SPI_Transmit_IT+0x150>)
 8014fc4:	4013      	ands	r3, r2
 8014fc6:	88f9      	ldrh	r1, [r7, #6]
 8014fc8:	68fa      	ldr	r2, [r7, #12]
 8014fca:	6812      	ldr	r2, [r2, #0]
 8014fcc:	430b      	orrs	r3, r1
 8014fce:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	681a      	ldr	r2, [r3, #0]
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	f042 0201 	orr.w	r2, r2, #1
 8014fde:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	6919      	ldr	r1, [r3, #16]
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	f240 732a 	movw	r3, #1834	@ 0x72a
 8014ff6:	430b      	orrs	r3, r1
 8014ff8:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015002:	d107      	bne.n	8015014 <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	681a      	ldr	r2, [r3, #0]
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015012:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015014:	2300      	movs	r3, #0
}
 8015016:	4618      	mov	r0, r3
 8015018:	3714      	adds	r7, #20
 801501a:	46bd      	mov	sp, r7
 801501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015020:	4770      	bx	lr
 8015022:	bf00      	nop
 8015024:	08015aa3 	.word	0x08015aa3
 8015028:	08015a45 	.word	0x08015a45
 801502c:	080159eb 	.word	0x080159eb
 8015030:	ffff0000 	.word	0xffff0000

08015034 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8015034:	b480      	push	{r7}
 8015036:	b085      	sub	sp, #20
 8015038:	af00      	add	r7, sp, #0
 801503a:	60f8      	str	r0, [r7, #12]
 801503c:	60b9      	str	r1, [r7, #8]
 801503e:	4613      	mov	r3, r2
 8015040:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015048:	b2db      	uxtb	r3, r3
 801504a:	2b01      	cmp	r3, #1
 801504c:	d001      	beq.n	8015052 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 801504e:	2302      	movs	r3, #2
 8015050:	e08b      	b.n	801516a <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d002      	beq.n	801505e <HAL_SPI_Receive_IT+0x2a>
 8015058:	88fb      	ldrh	r3, [r7, #6]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d101      	bne.n	8015062 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 801505e:	2301      	movs	r3, #1
 8015060:	e083      	b.n	801516a <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015068:	2b01      	cmp	r3, #1
 801506a:	d101      	bne.n	8015070 <HAL_SPI_Receive_IT+0x3c>
 801506c:	2302      	movs	r3, #2
 801506e:	e07c      	b.n	801516a <HAL_SPI_Receive_IT+0x136>
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2201      	movs	r2, #1
 8015074:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	2204      	movs	r2, #4
 801507c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	2200      	movs	r2, #0
 8015084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	68ba      	ldr	r2, [r7, #8]
 801508c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	88fa      	ldrh	r2, [r7, #6]
 8015092:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	88fa      	ldrh	r2, [r7, #6]
 801509a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	2200      	movs	r2, #0
 80150a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2200      	movs	r2, #0
 80150a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	2200      	movs	r2, #0
 80150b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	2200      	movs	r2, #0
 80150b8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	2b0f      	cmp	r3, #15
 80150c0:	d903      	bls.n	80150ca <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	4a2c      	ldr	r2, [pc, #176]	@ (8015178 <HAL_SPI_Receive_IT+0x144>)
 80150c6:	671a      	str	r2, [r3, #112]	@ 0x70
 80150c8:	e00a      	b.n	80150e0 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	68db      	ldr	r3, [r3, #12]
 80150ce:	2b07      	cmp	r3, #7
 80150d0:	d903      	bls.n	80150da <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	4a29      	ldr	r2, [pc, #164]	@ (801517c <HAL_SPI_Receive_IT+0x148>)
 80150d6:	671a      	str	r2, [r3, #112]	@ 0x70
 80150d8:	e002      	b.n	80150e0 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	4a28      	ldr	r2, [pc, #160]	@ (8015180 <HAL_SPI_Receive_IT+0x14c>)
 80150de:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	689b      	ldr	r3, [r3, #8]
 80150e4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80150e8:	d108      	bne.n	80150fc <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80150f8:	601a      	str	r2, [r3, #0]
 80150fa:	e009      	b.n	8015110 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	68db      	ldr	r3, [r3, #12]
 8015102:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801510e:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	685a      	ldr	r2, [r3, #4]
 8015116:	4b1b      	ldr	r3, [pc, #108]	@ (8015184 <HAL_SPI_Receive_IT+0x150>)
 8015118:	4013      	ands	r3, r2
 801511a:	88f9      	ldrh	r1, [r7, #6]
 801511c:	68fa      	ldr	r2, [r7, #12]
 801511e:	6812      	ldr	r2, [r2, #0]
 8015120:	430b      	orrs	r3, r1
 8015122:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	f042 0201 	orr.w	r2, r2, #1
 8015132:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	2200      	movs	r2, #0
 8015138:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	6919      	ldr	r1, [r3, #16]
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	681a      	ldr	r2, [r3, #0]
 8015146:	f240 7349 	movw	r3, #1865	@ 0x749
 801514a:	430b      	orrs	r3, r1
 801514c:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015156:	d107      	bne.n	8015168 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	681a      	ldr	r2, [r3, #0]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015166:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015168:	2300      	movs	r3, #0
}
 801516a:	4618      	mov	r0, r3
 801516c:	3714      	adds	r7, #20
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr
 8015176:	bf00      	nop
 8015178:	08015993 	.word	0x08015993
 801517c:	08015933 	.word	0x08015933
 8015180:	080158d5 	.word	0x080158d5
 8015184:	ffff0000 	.word	0xffff0000

08015188 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b084      	sub	sp, #16
 801518c:	af00      	add	r7, sp, #0
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	60b9      	str	r1, [r7, #8]
 8015192:	4613      	mov	r3, r2
 8015194:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801519c:	b2db      	uxtb	r3, r3
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d001      	beq.n	80151a6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80151a2:	2302      	movs	r3, #2
 80151a4:	e126      	b.n	80153f4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d002      	beq.n	80151b2 <HAL_SPI_Transmit_DMA+0x2a>
 80151ac:	88fb      	ldrh	r3, [r7, #6]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d101      	bne.n	80151b6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80151b2:	2301      	movs	r3, #1
 80151b4:	e11e      	b.n	80153f4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80151bc:	2b01      	cmp	r3, #1
 80151be:	d101      	bne.n	80151c4 <HAL_SPI_Transmit_DMA+0x3c>
 80151c0:	2302      	movs	r3, #2
 80151c2:	e117      	b.n	80153f4 <HAL_SPI_Transmit_DMA+0x26c>
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	2201      	movs	r2, #1
 80151c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2203      	movs	r2, #3
 80151d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	2200      	movs	r2, #0
 80151d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	68ba      	ldr	r2, [r7, #8]
 80151e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	88fa      	ldrh	r2, [r7, #6]
 80151e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	88fa      	ldrh	r2, [r7, #6]
 80151ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	2200      	movs	r2, #0
 80151f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2200      	movs	r2, #0
 80151fc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2200      	movs	r2, #0
 8015202:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2200      	movs	r2, #0
 8015208:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2200      	movs	r2, #0
 8015210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	689b      	ldr	r3, [r3, #8]
 8015218:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801521c:	d108      	bne.n	8015230 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801522c:	601a      	str	r2, [r3, #0]
 801522e:	e009      	b.n	8015244 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	68db      	ldr	r3, [r3, #12]
 8015236:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015242:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	68db      	ldr	r3, [r3, #12]
 8015248:	2b0f      	cmp	r3, #15
 801524a:	d905      	bls.n	8015258 <HAL_SPI_Transmit_DMA+0xd0>
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015250:	699b      	ldr	r3, [r3, #24]
 8015252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015256:	d10f      	bne.n	8015278 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801525c:	2b07      	cmp	r3, #7
 801525e:	d911      	bls.n	8015284 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015264:	699b      	ldr	r3, [r3, #24]
 8015266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801526a:	d00b      	beq.n	8015284 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015270:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015276:	d005      	beq.n	8015284 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2200      	movs	r2, #0
 801527c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015280:	2301      	movs	r3, #1
 8015282:	e0b7      	b.n	80153f4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	68db      	ldr	r3, [r3, #12]
 8015288:	2b07      	cmp	r3, #7
 801528a:	d820      	bhi.n	80152ce <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015290:	699b      	ldr	r3, [r3, #24]
 8015292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015296:	d109      	bne.n	80152ac <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801529e:	b29b      	uxth	r3, r3
 80152a0:	3301      	adds	r3, #1
 80152a2:	105b      	asrs	r3, r3, #1
 80152a4:	b29a      	uxth	r2, r3
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152b0:	699b      	ldr	r3, [r3, #24]
 80152b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80152b6:	d11e      	bne.n	80152f6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80152be:	b29b      	uxth	r3, r3
 80152c0:	3303      	adds	r3, #3
 80152c2:	109b      	asrs	r3, r3, #2
 80152c4:	b29a      	uxth	r2, r3
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80152cc:	e013      	b.n	80152f6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	68db      	ldr	r3, [r3, #12]
 80152d2:	2b0f      	cmp	r3, #15
 80152d4:	d80f      	bhi.n	80152f6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152da:	699b      	ldr	r3, [r3, #24]
 80152dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80152e0:	d109      	bne.n	80152f6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80152e8:	b29b      	uxth	r3, r3
 80152ea:	3301      	adds	r3, #1
 80152ec:	105b      	asrs	r3, r3, #1
 80152ee:	b29a      	uxth	r2, r3
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152fa:	4a40      	ldr	r2, [pc, #256]	@ (80153fc <HAL_SPI_Transmit_DMA+0x274>)
 80152fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015302:	4a3f      	ldr	r2, [pc, #252]	@ (8015400 <HAL_SPI_Transmit_DMA+0x278>)
 8015304:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801530a:	4a3e      	ldr	r2, [pc, #248]	@ (8015404 <HAL_SPI_Transmit_DMA+0x27c>)
 801530c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015312:	2200      	movs	r2, #0
 8015314:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	689a      	ldr	r2, [r3, #8]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015324:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801532e:	4619      	mov	r1, r3
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	3320      	adds	r3, #32
 8015336:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801533e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015340:	f7f6 f828 	bl	800b394 <HAL_DMA_Start_IT>
 8015344:	4603      	mov	r3, r0
 8015346:	2b00      	cmp	r3, #0
 8015348:	d011      	beq.n	801536e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015350:	f043 0210 	orr.w	r2, r3, #16
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	2201      	movs	r2, #1
 801535e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	2200      	movs	r2, #0
 8015366:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 801536a:	2301      	movs	r3, #1
 801536c:	e042      	b.n	80153f4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015372:	69db      	ldr	r3, [r3, #28]
 8015374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015378:	d108      	bne.n	801538c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	6859      	ldr	r1, [r3, #4]
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	4b20      	ldr	r3, [pc, #128]	@ (8015408 <HAL_SPI_Transmit_DMA+0x280>)
 8015386:	400b      	ands	r3, r1
 8015388:	6053      	str	r3, [r2, #4]
 801538a:	e009      	b.n	80153a0 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	685a      	ldr	r2, [r3, #4]
 8015392:	4b1d      	ldr	r3, [pc, #116]	@ (8015408 <HAL_SPI_Transmit_DMA+0x280>)
 8015394:	4013      	ands	r3, r2
 8015396:	88f9      	ldrh	r1, [r7, #6]
 8015398:	68fa      	ldr	r2, [r7, #12]
 801539a:	6812      	ldr	r2, [r2, #0]
 801539c:	430b      	orrs	r3, r1
 801539e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	689a      	ldr	r2, [r3, #8]
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80153ae:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	691a      	ldr	r2, [r3, #16]
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80153be:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	f042 0201 	orr.w	r2, r2, #1
 80153ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80153d8:	d107      	bne.n	80153ea <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	681a      	ldr	r2, [r3, #0]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80153e8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	2200      	movs	r2, #0
 80153ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80153f2:	2300      	movs	r3, #0
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3710      	adds	r7, #16
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	0801583f 	.word	0x0801583f
 8015400:	080157f9 	.word	0x080157f9
 8015404:	0801585b 	.word	0x0801585b
 8015408:	ffff0000 	.word	0xffff0000

0801540c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b08a      	sub	sp, #40	@ 0x28
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	691b      	ldr	r3, [r3, #16]
 801541a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	695b      	ldr	r3, [r3, #20]
 8015422:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015424:	6a3a      	ldr	r2, [r7, #32]
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	4013      	ands	r3, r2
 801542a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	689b      	ldr	r3, [r3, #8]
 8015432:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015434:	2300      	movs	r3, #0
 8015436:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801543e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	3330      	adds	r3, #48	@ 0x30
 8015446:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801544e:	2b00      	cmp	r3, #0
 8015450:	d010      	beq.n	8015474 <HAL_SPI_IRQHandler+0x68>
 8015452:	6a3b      	ldr	r3, [r7, #32]
 8015454:	f003 0308 	and.w	r3, r3, #8
 8015458:	2b00      	cmp	r3, #0
 801545a:	d00b      	beq.n	8015474 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	699a      	ldr	r2, [r3, #24]
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801546a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f000 f9b9 	bl	80157e4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015472:	e192      	b.n	801579a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015474:	69bb      	ldr	r3, [r7, #24]
 8015476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801547a:	2b00      	cmp	r3, #0
 801547c:	d113      	bne.n	80154a6 <HAL_SPI_IRQHandler+0x9a>
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	f003 0320 	and.w	r3, r3, #32
 8015484:	2b00      	cmp	r3, #0
 8015486:	d10e      	bne.n	80154a6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801548e:	2b00      	cmp	r3, #0
 8015490:	d009      	beq.n	80154a6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	4798      	blx	r3
    hspi->RxISR(hspi);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801549e:	6878      	ldr	r0, [r7, #4]
 80154a0:	4798      	blx	r3
    handled = 1UL;
 80154a2:	2301      	movs	r3, #1
 80154a4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d10f      	bne.n	80154d0 <HAL_SPI_IRQHandler+0xc4>
 80154b0:	69bb      	ldr	r3, [r7, #24]
 80154b2:	f003 0301 	and.w	r3, r3, #1
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00a      	beq.n	80154d0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80154ba:	69bb      	ldr	r3, [r7, #24]
 80154bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d105      	bne.n	80154d0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	4798      	blx	r3
    handled = 1UL;
 80154cc:	2301      	movs	r3, #1
 80154ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80154d0:	69bb      	ldr	r3, [r7, #24]
 80154d2:	f003 0320 	and.w	r3, r3, #32
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d10f      	bne.n	80154fa <HAL_SPI_IRQHandler+0xee>
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	f003 0302 	and.w	r3, r3, #2
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d00a      	beq.n	80154fa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80154e4:	69bb      	ldr	r3, [r7, #24]
 80154e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d105      	bne.n	80154fa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	4798      	blx	r3
    handled = 1UL;
 80154f6:	2301      	movs	r3, #1
 80154f8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80154fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f040 8147 	bne.w	8015790 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015502:	69bb      	ldr	r3, [r7, #24]
 8015504:	f003 0308 	and.w	r3, r3, #8
 8015508:	2b00      	cmp	r3, #0
 801550a:	f000 808b 	beq.w	8015624 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	699a      	ldr	r2, [r3, #24]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	f042 0208 	orr.w	r2, r2, #8
 801551c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	699a      	ldr	r2, [r3, #24]
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	f042 0210 	orr.w	r2, r2, #16
 801552c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	699a      	ldr	r2, [r3, #24]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801553c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	691a      	ldr	r2, [r3, #16]
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	f022 0208 	bic.w	r2, r2, #8
 801554c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	689b      	ldr	r3, [r3, #8]
 8015554:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015558:	2b00      	cmp	r3, #0
 801555a:	d13d      	bne.n	80155d8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801555c:	e036      	b.n	80155cc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	68db      	ldr	r3, [r3, #12]
 8015562:	2b0f      	cmp	r3, #15
 8015564:	d90b      	bls.n	801557e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681a      	ldr	r2, [r3, #0]
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801556e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015570:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015576:	1d1a      	adds	r2, r3, #4
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	665a      	str	r2, [r3, #100]	@ 0x64
 801557c:	e01d      	b.n	80155ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	68db      	ldr	r3, [r3, #12]
 8015582:	2b07      	cmp	r3, #7
 8015584:	d90b      	bls.n	801559e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801558a:	68fa      	ldr	r2, [r7, #12]
 801558c:	8812      	ldrh	r2, [r2, #0]
 801558e:	b292      	uxth	r2, r2
 8015590:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015596:	1c9a      	adds	r2, r3, #2
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	665a      	str	r2, [r3, #100]	@ 0x64
 801559c:	e00d      	b.n	80155ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155aa:	7812      	ldrb	r2, [r2, #0]
 80155ac:	b2d2      	uxtb	r2, r2
 80155ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155b4:	1c5a      	adds	r2, r3, #1
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	3b01      	subs	r3, #1
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155d2:	b29b      	uxth	r3, r3
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d1c2      	bne.n	801555e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f000 fa8f 	bl	8015afc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2201      	movs	r2, #1
 80155e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d003      	beq.n	80155f8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f000 f8ed 	bl	80157d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80155f6:	e0d0      	b.n	801579a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80155f8:	7cfb      	ldrb	r3, [r7, #19]
 80155fa:	2b05      	cmp	r3, #5
 80155fc:	d103      	bne.n	8015606 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f000 f8d2 	bl	80157a8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015604:	e0c6      	b.n	8015794 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015606:	7cfb      	ldrb	r3, [r7, #19]
 8015608:	2b04      	cmp	r3, #4
 801560a:	d103      	bne.n	8015614 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f7f1 fa37 	bl	8006a80 <HAL_SPI_RxCpltCallback>
    return;
 8015612:	e0bf      	b.n	8015794 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015614:	7cfb      	ldrb	r3, [r7, #19]
 8015616:	2b03      	cmp	r3, #3
 8015618:	f040 80bc 	bne.w	8015794 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f7f1 f9ef 	bl	8006a00 <HAL_SPI_TxCpltCallback>
    return;
 8015622:	e0b7      	b.n	8015794 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015624:	69bb      	ldr	r3, [r7, #24]
 8015626:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801562a:	2b00      	cmp	r3, #0
 801562c:	f000 80b5 	beq.w	801579a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015630:	69bb      	ldr	r3, [r7, #24]
 8015632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015636:	2b00      	cmp	r3, #0
 8015638:	d00f      	beq.n	801565a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015640:	f043 0204 	orr.w	r2, r3, #4
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	699a      	ldr	r2, [r3, #24]
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015658:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801565a:	69bb      	ldr	r3, [r7, #24]
 801565c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015660:	2b00      	cmp	r3, #0
 8015662:	d00f      	beq.n	8015684 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801566a:	f043 0201 	orr.w	r2, r3, #1
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	699a      	ldr	r2, [r3, #24]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015682:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015684:	69bb      	ldr	r3, [r7, #24]
 8015686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801568a:	2b00      	cmp	r3, #0
 801568c:	d00f      	beq.n	80156ae <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015694:	f043 0208 	orr.w	r2, r3, #8
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	699a      	ldr	r2, [r3, #24]
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80156ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80156ae:	69bb      	ldr	r3, [r7, #24]
 80156b0:	f003 0320 	and.w	r3, r3, #32
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d00f      	beq.n	80156d8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	699a      	ldr	r2, [r3, #24]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f042 0220 	orr.w	r2, r2, #32
 80156d6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d05a      	beq.n	8015798 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	f022 0201 	bic.w	r2, r2, #1
 80156f0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	6919      	ldr	r1, [r3, #16]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681a      	ldr	r2, [r3, #0]
 80156fc:	4b28      	ldr	r3, [pc, #160]	@ (80157a0 <HAL_SPI_IRQHandler+0x394>)
 80156fe:	400b      	ands	r3, r1
 8015700:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015708:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801570c:	d138      	bne.n	8015780 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	689a      	ldr	r2, [r3, #8]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801571c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015722:	2b00      	cmp	r3, #0
 8015724:	d013      	beq.n	801574e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801572a:	4a1e      	ldr	r2, [pc, #120]	@ (80157a4 <HAL_SPI_IRQHandler+0x398>)
 801572c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015732:	4618      	mov	r0, r3
 8015734:	f7f6 fbb6 	bl	800bea4 <HAL_DMA_Abort_IT>
 8015738:	4603      	mov	r3, r0
 801573a:	2b00      	cmp	r3, #0
 801573c:	d007      	beq.n	801574e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015744:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015752:	2b00      	cmp	r3, #0
 8015754:	d020      	beq.n	8015798 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801575a:	4a12      	ldr	r2, [pc, #72]	@ (80157a4 <HAL_SPI_IRQHandler+0x398>)
 801575c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015762:	4618      	mov	r0, r3
 8015764:	f7f6 fb9e 	bl	800bea4 <HAL_DMA_Abort_IT>
 8015768:	4603      	mov	r3, r0
 801576a:	2b00      	cmp	r3, #0
 801576c:	d014      	beq.n	8015798 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015774:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801577e:	e00b      	b.n	8015798 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2201      	movs	r2, #1
 8015784:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f000 f821 	bl	80157d0 <HAL_SPI_ErrorCallback>
    return;
 801578e:	e003      	b.n	8015798 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015790:	bf00      	nop
 8015792:	e002      	b.n	801579a <HAL_SPI_IRQHandler+0x38e>
    return;
 8015794:	bf00      	nop
 8015796:	e000      	b.n	801579a <HAL_SPI_IRQHandler+0x38e>
    return;
 8015798:	bf00      	nop
  }
}
 801579a:	3728      	adds	r7, #40	@ 0x28
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	fffffc94 	.word	0xfffffc94
 80157a4:	080158a1 	.word	0x080158a1

080157a8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80157a8:	b480      	push	{r7}
 80157aa:	b083      	sub	sp, #12
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80157b0:	bf00      	nop
 80157b2:	370c      	adds	r7, #12
 80157b4:	46bd      	mov	sp, r7
 80157b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ba:	4770      	bx	lr

080157bc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80157bc:	b480      	push	{r7}
 80157be:	b083      	sub	sp, #12
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80157c4:	bf00      	nop
 80157c6:	370c      	adds	r7, #12
 80157c8:	46bd      	mov	sp, r7
 80157ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ce:	4770      	bx	lr

080157d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80157d0:	b480      	push	{r7}
 80157d2:	b083      	sub	sp, #12
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80157d8:	bf00      	nop
 80157da:	370c      	adds	r7, #12
 80157dc:	46bd      	mov	sp, r7
 80157de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e2:	4770      	bx	lr

080157e4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80157e4:	b480      	push	{r7}
 80157e6:	b083      	sub	sp, #12
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80157ec:	bf00      	nop
 80157ee:	370c      	adds	r7, #12
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b084      	sub	sp, #16
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015804:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801580c:	b2db      	uxtb	r3, r3
 801580e:	2b07      	cmp	r3, #7
 8015810:	d011      	beq.n	8015836 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015816:	69db      	ldr	r3, [r3, #28]
 8015818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801581c:	d103      	bne.n	8015826 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 801581e:	68f8      	ldr	r0, [r7, #12]
 8015820:	f7f1 f8ee 	bl	8006a00 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015824:	e007      	b.n	8015836 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	691a      	ldr	r2, [r3, #16]
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	f042 0208 	orr.w	r2, r2, #8
 8015834:	611a      	str	r2, [r3, #16]
}
 8015836:	bf00      	nop
 8015838:	3710      	adds	r7, #16
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}

0801583e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801583e:	b580      	push	{r7, lr}
 8015840:	b084      	sub	sp, #16
 8015842:	af00      	add	r7, sp, #0
 8015844:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801584a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801584c:	68f8      	ldr	r0, [r7, #12]
 801584e:	f7ff ffb5 	bl	80157bc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015852:	bf00      	nop
 8015854:	3710      	adds	r7, #16
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801585a:	b580      	push	{r7, lr}
 801585c:	b084      	sub	sp, #16
 801585e:	af00      	add	r7, sp, #0
 8015860:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015866:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7f7 fc99 	bl	800d1a0 <HAL_DMA_GetError>
 801586e:	4603      	mov	r3, r0
 8015870:	2b02      	cmp	r3, #2
 8015872:	d011      	beq.n	8015898 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8015874:	68f8      	ldr	r0, [r7, #12]
 8015876:	f000 f941 	bl	8015afc <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015880:	f043 0210 	orr.w	r2, r3, #16
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	2201      	movs	r2, #1
 801588e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8015892:	68f8      	ldr	r0, [r7, #12]
 8015894:	f7ff ff9c 	bl	80157d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015898:	bf00      	nop
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b084      	sub	sp, #16
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2200      	movs	r2, #0
 80158b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2200      	movs	r2, #0
 80158ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	2201      	movs	r2, #1
 80158c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80158c6:	68f8      	ldr	r0, [r7, #12]
 80158c8:	f7ff ff82 	bl	80157d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80158cc:	bf00      	nop
 80158ce:	3710      	adds	r7, #16
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}

080158d4 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80158d4:	b480      	push	{r7}
 80158d6:	b083      	sub	sp, #12
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158e8:	7812      	ldrb	r2, [r2, #0]
 80158ea:	b2d2      	uxtb	r2, r2
 80158ec:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158f2:	1c5a      	adds	r2, r3, #1
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158fe:	b29b      	uxth	r3, r3
 8015900:	3b01      	subs	r3, #1
 8015902:	b29a      	uxth	r2, r3
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015910:	b29b      	uxth	r3, r3
 8015912:	2b00      	cmp	r3, #0
 8015914:	d107      	bne.n	8015926 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	691a      	ldr	r2, [r3, #16]
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	f022 0201 	bic.w	r2, r2, #1
 8015924:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015926:	bf00      	nop
 8015928:	370c      	adds	r7, #12
 801592a:	46bd      	mov	sp, r7
 801592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015930:	4770      	bx	lr

08015932 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8015932:	b480      	push	{r7}
 8015934:	b085      	sub	sp, #20
 8015936:	af00      	add	r7, sp, #0
 8015938:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	3330      	adds	r3, #48	@ 0x30
 8015940:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015946:	68fa      	ldr	r2, [r7, #12]
 8015948:	8812      	ldrh	r2, [r2, #0]
 801594a:	b292      	uxth	r2, r2
 801594c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015952:	1c9a      	adds	r2, r3, #2
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801595e:	b29b      	uxth	r3, r3
 8015960:	3b01      	subs	r3, #1
 8015962:	b29a      	uxth	r2, r3
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015970:	b29b      	uxth	r3, r3
 8015972:	2b00      	cmp	r3, #0
 8015974:	d107      	bne.n	8015986 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	691a      	ldr	r2, [r3, #16]
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	f022 0201 	bic.w	r2, r2, #1
 8015984:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015986:	bf00      	nop
 8015988:	3714      	adds	r7, #20
 801598a:	46bd      	mov	sp, r7
 801598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015990:	4770      	bx	lr

08015992 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8015992:	b480      	push	{r7}
 8015994:	b083      	sub	sp, #12
 8015996:	af00      	add	r7, sp, #0
 8015998:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80159a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80159a4:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80159aa:	1d1a      	adds	r2, r3, #4
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80159b6:	b29b      	uxth	r3, r3
 80159b8:	3b01      	subs	r3, #1
 80159ba:	b29a      	uxth	r2, r3
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d107      	bne.n	80159de <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	691a      	ldr	r2, [r3, #16]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	f022 0201 	bic.w	r2, r2, #1
 80159dc:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80159de:	bf00      	nop
 80159e0:	370c      	adds	r7, #12
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr

080159ea <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80159ea:	b480      	push	{r7}
 80159ec:	b083      	sub	sp, #12
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	3320      	adds	r3, #32
 80159fc:	7812      	ldrb	r2, [r2, #0]
 80159fe:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015a04:	1c5a      	adds	r2, r3, #1
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a10:	b29b      	uxth	r3, r3
 8015a12:	3b01      	subs	r3, #1
 8015a14:	b29a      	uxth	r2, r3
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d107      	bne.n	8015a38 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	691a      	ldr	r2, [r3, #16]
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	f022 0202 	bic.w	r2, r2, #2
 8015a36:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015a38:	bf00      	nop
 8015a3a:	370c      	adds	r7, #12
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr

08015a44 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8015a44:	b480      	push	{r7}
 8015a46:	b085      	sub	sp, #20
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	3320      	adds	r3, #32
 8015a52:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015a58:	881a      	ldrh	r2, [r3, #0]
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015a62:	1c9a      	adds	r2, r3, #2
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a6e:	b29b      	uxth	r3, r3
 8015a70:	3b01      	subs	r3, #1
 8015a72:	b29a      	uxth	r2, r3
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d107      	bne.n	8015a96 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	691a      	ldr	r2, [r3, #16]
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f022 0202 	bic.w	r2, r2, #2
 8015a94:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015a96:	bf00      	nop
 8015a98:	3714      	adds	r7, #20
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa0:	4770      	bx	lr

08015aa2 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8015aa2:	b480      	push	{r7}
 8015aa4:	b083      	sub	sp, #12
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	6812      	ldr	r2, [r2, #0]
 8015ab4:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015aba:	1d1a      	adds	r2, r3, #4
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015ac6:	b29b      	uxth	r3, r3
 8015ac8:	3b01      	subs	r3, #1
 8015aca:	b29a      	uxth	r2, r3
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d107      	bne.n	8015aee <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	691a      	ldr	r2, [r3, #16]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	f022 0202 	bic.w	r2, r2, #2
 8015aec:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015aee:	bf00      	nop
 8015af0:	370c      	adds	r7, #12
 8015af2:	46bd      	mov	sp, r7
 8015af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af8:	4770      	bx	lr
	...

08015afc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8015afc:	b480      	push	{r7}
 8015afe:	b085      	sub	sp, #20
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	695b      	ldr	r3, [r3, #20]
 8015b0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	699a      	ldr	r2, [r3, #24]
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	f042 0208 	orr.w	r2, r2, #8
 8015b1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	699a      	ldr	r2, [r3, #24]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	f042 0210 	orr.w	r2, r2, #16
 8015b2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	681a      	ldr	r2, [r3, #0]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	f022 0201 	bic.w	r2, r2, #1
 8015b3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	6919      	ldr	r1, [r3, #16]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	4b3c      	ldr	r3, [pc, #240]	@ (8015c38 <SPI_CloseTransfer+0x13c>)
 8015b48:	400b      	ands	r3, r1
 8015b4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	689a      	ldr	r2, [r3, #8]
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015b5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015b62:	b2db      	uxtb	r3, r3
 8015b64:	2b04      	cmp	r3, #4
 8015b66:	d014      	beq.n	8015b92 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	f003 0320 	and.w	r3, r3, #32
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d00f      	beq.n	8015b92 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	699a      	ldr	r2, [r3, #24]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	f042 0220 	orr.w	r2, r2, #32
 8015b90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	2b03      	cmp	r3, #3
 8015b9c:	d014      	beq.n	8015bc8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d00f      	beq.n	8015bc8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bae:	f043 0204 	orr.w	r2, r3, #4
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	699a      	ldr	r2, [r3, #24]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015bc6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d00f      	beq.n	8015bf2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bd8:	f043 0201 	orr.w	r2, r3, #1
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	699a      	ldr	r2, [r3, #24]
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015bf0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d00f      	beq.n	8015c1c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c02:	f043 0208 	orr.w	r2, r3, #8
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	699a      	ldr	r2, [r3, #24]
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015c1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2200      	movs	r2, #0
 8015c20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2200      	movs	r2, #0
 8015c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8015c2c:	bf00      	nop
 8015c2e:	3714      	adds	r7, #20
 8015c30:	46bd      	mov	sp, r7
 8015c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c36:	4770      	bx	lr
 8015c38:	fffffc90 	.word	0xfffffc90

08015c3c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	60f8      	str	r0, [r7, #12]
 8015c44:	60b9      	str	r1, [r7, #8]
 8015c46:	603b      	str	r3, [r7, #0]
 8015c48:	4613      	mov	r3, r2
 8015c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015c4c:	e010      	b.n	8015c70 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015c4e:	f7f2 ff13 	bl	8008a78 <HAL_GetTick>
 8015c52:	4602      	mov	r2, r0
 8015c54:	69bb      	ldr	r3, [r7, #24]
 8015c56:	1ad3      	subs	r3, r2, r3
 8015c58:	683a      	ldr	r2, [r7, #0]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d803      	bhi.n	8015c66 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c64:	d102      	bne.n	8015c6c <SPI_WaitOnFlagUntilTimeout+0x30>
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d101      	bne.n	8015c70 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8015c6c:	2303      	movs	r3, #3
 8015c6e:	e00f      	b.n	8015c90 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	695a      	ldr	r2, [r3, #20]
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	4013      	ands	r3, r2
 8015c7a:	68ba      	ldr	r2, [r7, #8]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	bf0c      	ite	eq
 8015c80:	2301      	moveq	r3, #1
 8015c82:	2300      	movne	r3, #0
 8015c84:	b2db      	uxtb	r3, r3
 8015c86:	461a      	mov	r2, r3
 8015c88:	79fb      	ldrb	r3, [r7, #7]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d0df      	beq.n	8015c4e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8015c8e:	2300      	movs	r3, #0
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3710      	adds	r7, #16
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}

08015c98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b085      	sub	sp, #20
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ca4:	095b      	lsrs	r3, r3, #5
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	68db      	ldr	r3, [r3, #12]
 8015cae:	3301      	adds	r3, #1
 8015cb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	3307      	adds	r3, #7
 8015cb6:	08db      	lsrs	r3, r3, #3
 8015cb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	68fa      	ldr	r2, [r7, #12]
 8015cbe:	fb02 f303 	mul.w	r3, r2, r3
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3714      	adds	r7, #20
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ccc:	4770      	bx	lr

08015cce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015cce:	b580      	push	{r7, lr}
 8015cd0:	b082      	sub	sp, #8
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d101      	bne.n	8015ce0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015cdc:	2301      	movs	r3, #1
 8015cde:	e049      	b.n	8015d74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015ce6:	b2db      	uxtb	r3, r3
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d106      	bne.n	8015cfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f7f2 fc81 	bl	80085fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2202      	movs	r2, #2
 8015cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	3304      	adds	r3, #4
 8015d0a:	4619      	mov	r1, r3
 8015d0c:	4610      	mov	r0, r2
 8015d0e:	f000 ffdb 	bl	8016cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2201      	movs	r2, #1
 8015d16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2201      	movs	r2, #1
 8015d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2201      	movs	r2, #1
 8015d26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	2201      	movs	r2, #1
 8015d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2201      	movs	r2, #1
 8015d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2201      	movs	r2, #1
 8015d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2201      	movs	r2, #1
 8015d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2201      	movs	r2, #1
 8015d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2201      	movs	r2, #1
 8015d5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2201      	movs	r2, #1
 8015d66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015d72:	2300      	movs	r3, #0
}
 8015d74:	4618      	mov	r0, r3
 8015d76:	3708      	adds	r7, #8
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd80      	pop	{r7, pc}

08015d7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015d7c:	b480      	push	{r7}
 8015d7e:	b085      	sub	sp, #20
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	d001      	beq.n	8015d94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015d90:	2301      	movs	r3, #1
 8015d92:	e056      	b.n	8015e42 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2202      	movs	r2, #2
 8015d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	4a2b      	ldr	r2, [pc, #172]	@ (8015e50 <HAL_TIM_Base_Start+0xd4>)
 8015da2:	4293      	cmp	r3, r2
 8015da4:	d02c      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015dae:	d027      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	4a27      	ldr	r2, [pc, #156]	@ (8015e54 <HAL_TIM_Base_Start+0xd8>)
 8015db6:	4293      	cmp	r3, r2
 8015db8:	d022      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	4a26      	ldr	r2, [pc, #152]	@ (8015e58 <HAL_TIM_Base_Start+0xdc>)
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	d01d      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	4a24      	ldr	r2, [pc, #144]	@ (8015e5c <HAL_TIM_Base_Start+0xe0>)
 8015dca:	4293      	cmp	r3, r2
 8015dcc:	d018      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	4a23      	ldr	r2, [pc, #140]	@ (8015e60 <HAL_TIM_Base_Start+0xe4>)
 8015dd4:	4293      	cmp	r3, r2
 8015dd6:	d013      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	4a21      	ldr	r2, [pc, #132]	@ (8015e64 <HAL_TIM_Base_Start+0xe8>)
 8015dde:	4293      	cmp	r3, r2
 8015de0:	d00e      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	4a20      	ldr	r2, [pc, #128]	@ (8015e68 <HAL_TIM_Base_Start+0xec>)
 8015de8:	4293      	cmp	r3, r2
 8015dea:	d009      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	4a1e      	ldr	r2, [pc, #120]	@ (8015e6c <HAL_TIM_Base_Start+0xf0>)
 8015df2:	4293      	cmp	r3, r2
 8015df4:	d004      	beq.n	8015e00 <HAL_TIM_Base_Start+0x84>
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8015e70 <HAL_TIM_Base_Start+0xf4>)
 8015dfc:	4293      	cmp	r3, r2
 8015dfe:	d115      	bne.n	8015e2c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	689a      	ldr	r2, [r3, #8]
 8015e06:	4b1b      	ldr	r3, [pc, #108]	@ (8015e74 <HAL_TIM_Base_Start+0xf8>)
 8015e08:	4013      	ands	r3, r2
 8015e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	2b06      	cmp	r3, #6
 8015e10:	d015      	beq.n	8015e3e <HAL_TIM_Base_Start+0xc2>
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015e18:	d011      	beq.n	8015e3e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	681a      	ldr	r2, [r3, #0]
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	f042 0201 	orr.w	r2, r2, #1
 8015e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e2a:	e008      	b.n	8015e3e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	681a      	ldr	r2, [r3, #0]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	f042 0201 	orr.w	r2, r2, #1
 8015e3a:	601a      	str	r2, [r3, #0]
 8015e3c:	e000      	b.n	8015e40 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015e40:	2300      	movs	r3, #0
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3714      	adds	r7, #20
 8015e46:	46bd      	mov	sp, r7
 8015e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop
 8015e50:	40010000 	.word	0x40010000
 8015e54:	40000400 	.word	0x40000400
 8015e58:	40000800 	.word	0x40000800
 8015e5c:	40000c00 	.word	0x40000c00
 8015e60:	40010400 	.word	0x40010400
 8015e64:	40001800 	.word	0x40001800
 8015e68:	40014000 	.word	0x40014000
 8015e6c:	4000e000 	.word	0x4000e000
 8015e70:	4000e400 	.word	0x4000e400
 8015e74:	00010007 	.word	0x00010007

08015e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015e78:	b480      	push	{r7}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015e86:	b2db      	uxtb	r3, r3
 8015e88:	2b01      	cmp	r3, #1
 8015e8a:	d001      	beq.n	8015e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	e05e      	b.n	8015f4e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2202      	movs	r2, #2
 8015e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	68da      	ldr	r2, [r3, #12]
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	f042 0201 	orr.w	r2, r2, #1
 8015ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	4a2b      	ldr	r2, [pc, #172]	@ (8015f5c <HAL_TIM_Base_Start_IT+0xe4>)
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	d02c      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015eba:	d027      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	4a27      	ldr	r2, [pc, #156]	@ (8015f60 <HAL_TIM_Base_Start_IT+0xe8>)
 8015ec2:	4293      	cmp	r3, r2
 8015ec4:	d022      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	4a26      	ldr	r2, [pc, #152]	@ (8015f64 <HAL_TIM_Base_Start_IT+0xec>)
 8015ecc:	4293      	cmp	r3, r2
 8015ece:	d01d      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	4a24      	ldr	r2, [pc, #144]	@ (8015f68 <HAL_TIM_Base_Start_IT+0xf0>)
 8015ed6:	4293      	cmp	r3, r2
 8015ed8:	d018      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	4a23      	ldr	r2, [pc, #140]	@ (8015f6c <HAL_TIM_Base_Start_IT+0xf4>)
 8015ee0:	4293      	cmp	r3, r2
 8015ee2:	d013      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	4a21      	ldr	r2, [pc, #132]	@ (8015f70 <HAL_TIM_Base_Start_IT+0xf8>)
 8015eea:	4293      	cmp	r3, r2
 8015eec:	d00e      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	4a20      	ldr	r2, [pc, #128]	@ (8015f74 <HAL_TIM_Base_Start_IT+0xfc>)
 8015ef4:	4293      	cmp	r3, r2
 8015ef6:	d009      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	4a1e      	ldr	r2, [pc, #120]	@ (8015f78 <HAL_TIM_Base_Start_IT+0x100>)
 8015efe:	4293      	cmp	r3, r2
 8015f00:	d004      	beq.n	8015f0c <HAL_TIM_Base_Start_IT+0x94>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	4a1d      	ldr	r2, [pc, #116]	@ (8015f7c <HAL_TIM_Base_Start_IT+0x104>)
 8015f08:	4293      	cmp	r3, r2
 8015f0a:	d115      	bne.n	8015f38 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	689a      	ldr	r2, [r3, #8]
 8015f12:	4b1b      	ldr	r3, [pc, #108]	@ (8015f80 <HAL_TIM_Base_Start_IT+0x108>)
 8015f14:	4013      	ands	r3, r2
 8015f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	2b06      	cmp	r3, #6
 8015f1c:	d015      	beq.n	8015f4a <HAL_TIM_Base_Start_IT+0xd2>
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f24:	d011      	beq.n	8015f4a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	f042 0201 	orr.w	r2, r2, #1
 8015f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f36:	e008      	b.n	8015f4a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f042 0201 	orr.w	r2, r2, #1
 8015f46:	601a      	str	r2, [r3, #0]
 8015f48:	e000      	b.n	8015f4c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015f4c:	2300      	movs	r3, #0
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3714      	adds	r7, #20
 8015f52:	46bd      	mov	sp, r7
 8015f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop
 8015f5c:	40010000 	.word	0x40010000
 8015f60:	40000400 	.word	0x40000400
 8015f64:	40000800 	.word	0x40000800
 8015f68:	40000c00 	.word	0x40000c00
 8015f6c:	40010400 	.word	0x40010400
 8015f70:	40001800 	.word	0x40001800
 8015f74:	40014000 	.word	0x40014000
 8015f78:	4000e000 	.word	0x4000e000
 8015f7c:	4000e400 	.word	0x4000e400
 8015f80:	00010007 	.word	0x00010007

08015f84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8015f84:	b480      	push	{r7}
 8015f86:	b083      	sub	sp, #12
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	68da      	ldr	r2, [r3, #12]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	f022 0201 	bic.w	r2, r2, #1
 8015f9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	6a1a      	ldr	r2, [r3, #32]
 8015fa2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015fa6:	4013      	ands	r3, r2
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d10f      	bne.n	8015fcc <HAL_TIM_Base_Stop_IT+0x48>
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	6a1a      	ldr	r2, [r3, #32]
 8015fb2:	f240 4344 	movw	r3, #1092	@ 0x444
 8015fb6:	4013      	ands	r3, r2
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d107      	bne.n	8015fcc <HAL_TIM_Base_Stop_IT+0x48>
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	681a      	ldr	r2, [r3, #0]
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	f022 0201 	bic.w	r2, r2, #1
 8015fca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2201      	movs	r2, #1
 8015fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8015fd4:	2300      	movs	r3, #0
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	370c      	adds	r7, #12
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe0:	4770      	bx	lr

08015fe2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8015fe2:	b580      	push	{r7, lr}
 8015fe4:	b082      	sub	sp, #8
 8015fe6:	af00      	add	r7, sp, #0
 8015fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d101      	bne.n	8015ff4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	e049      	b.n	8016088 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d106      	bne.n	801600e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2200      	movs	r2, #0
 8016004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f7f2 fb19 	bl	8008640 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	2202      	movs	r2, #2
 8016012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681a      	ldr	r2, [r3, #0]
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	3304      	adds	r3, #4
 801601e:	4619      	mov	r1, r3
 8016020:	4610      	mov	r0, r2
 8016022:	f000 fe51 	bl	8016cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2201      	movs	r2, #1
 801602a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2201      	movs	r2, #1
 8016032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2201      	movs	r2, #1
 801603a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2201      	movs	r2, #1
 8016042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	2201      	movs	r2, #1
 801604a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2201      	movs	r2, #1
 8016052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2201      	movs	r2, #1
 801605a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	2201      	movs	r2, #1
 8016062:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2201      	movs	r2, #1
 801606a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	2201      	movs	r2, #1
 8016072:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2201      	movs	r2, #1
 801607a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2201      	movs	r2, #1
 8016082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016086:	2300      	movs	r3, #0
}
 8016088:	4618      	mov	r0, r3
 801608a:	3708      	adds	r7, #8
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d101      	bne.n	80160a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801609e:	2301      	movs	r3, #1
 80160a0:	e049      	b.n	8016136 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d106      	bne.n	80160bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2200      	movs	r2, #0
 80160b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7f2 fa16 	bl	80084e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2202      	movs	r2, #2
 80160c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681a      	ldr	r2, [r3, #0]
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	3304      	adds	r3, #4
 80160cc:	4619      	mov	r1, r3
 80160ce:	4610      	mov	r0, r2
 80160d0:	f000 fdfa 	bl	8016cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	2201      	movs	r2, #1
 80160d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2201      	movs	r2, #1
 80160e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2201      	movs	r2, #1
 80160e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2201      	movs	r2, #1
 80160f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2201      	movs	r2, #1
 80160f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2201      	movs	r2, #1
 8016100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2201      	movs	r2, #1
 8016108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2201      	movs	r2, #1
 8016110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2201      	movs	r2, #1
 8016118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2201      	movs	r2, #1
 8016120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2201      	movs	r2, #1
 8016128:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2201      	movs	r2, #1
 8016130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016134:	2300      	movs	r3, #0
}
 8016136:	4618      	mov	r0, r3
 8016138:	3708      	adds	r7, #8
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}
	...

08016140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d109      	bne.n	8016164 <HAL_TIM_PWM_Start+0x24>
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8016156:	b2db      	uxtb	r3, r3
 8016158:	2b01      	cmp	r3, #1
 801615a:	bf14      	ite	ne
 801615c:	2301      	movne	r3, #1
 801615e:	2300      	moveq	r3, #0
 8016160:	b2db      	uxtb	r3, r3
 8016162:	e03c      	b.n	80161de <HAL_TIM_PWM_Start+0x9e>
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	2b04      	cmp	r3, #4
 8016168:	d109      	bne.n	801617e <HAL_TIM_PWM_Start+0x3e>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8016170:	b2db      	uxtb	r3, r3
 8016172:	2b01      	cmp	r3, #1
 8016174:	bf14      	ite	ne
 8016176:	2301      	movne	r3, #1
 8016178:	2300      	moveq	r3, #0
 801617a:	b2db      	uxtb	r3, r3
 801617c:	e02f      	b.n	80161de <HAL_TIM_PWM_Start+0x9e>
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	2b08      	cmp	r3, #8
 8016182:	d109      	bne.n	8016198 <HAL_TIM_PWM_Start+0x58>
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801618a:	b2db      	uxtb	r3, r3
 801618c:	2b01      	cmp	r3, #1
 801618e:	bf14      	ite	ne
 8016190:	2301      	movne	r3, #1
 8016192:	2300      	moveq	r3, #0
 8016194:	b2db      	uxtb	r3, r3
 8016196:	e022      	b.n	80161de <HAL_TIM_PWM_Start+0x9e>
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	2b0c      	cmp	r3, #12
 801619c:	d109      	bne.n	80161b2 <HAL_TIM_PWM_Start+0x72>
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80161a4:	b2db      	uxtb	r3, r3
 80161a6:	2b01      	cmp	r3, #1
 80161a8:	bf14      	ite	ne
 80161aa:	2301      	movne	r3, #1
 80161ac:	2300      	moveq	r3, #0
 80161ae:	b2db      	uxtb	r3, r3
 80161b0:	e015      	b.n	80161de <HAL_TIM_PWM_Start+0x9e>
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	2b10      	cmp	r3, #16
 80161b6:	d109      	bne.n	80161cc <HAL_TIM_PWM_Start+0x8c>
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80161be:	b2db      	uxtb	r3, r3
 80161c0:	2b01      	cmp	r3, #1
 80161c2:	bf14      	ite	ne
 80161c4:	2301      	movne	r3, #1
 80161c6:	2300      	moveq	r3, #0
 80161c8:	b2db      	uxtb	r3, r3
 80161ca:	e008      	b.n	80161de <HAL_TIM_PWM_Start+0x9e>
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	bf14      	ite	ne
 80161d8:	2301      	movne	r3, #1
 80161da:	2300      	moveq	r3, #0
 80161dc:	b2db      	uxtb	r3, r3
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d001      	beq.n	80161e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80161e2:	2301      	movs	r3, #1
 80161e4:	e0ab      	b.n	801633e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d104      	bne.n	80161f6 <HAL_TIM_PWM_Start+0xb6>
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2202      	movs	r2, #2
 80161f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80161f4:	e023      	b.n	801623e <HAL_TIM_PWM_Start+0xfe>
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	2b04      	cmp	r3, #4
 80161fa:	d104      	bne.n	8016206 <HAL_TIM_PWM_Start+0xc6>
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2202      	movs	r2, #2
 8016200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016204:	e01b      	b.n	801623e <HAL_TIM_PWM_Start+0xfe>
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	2b08      	cmp	r3, #8
 801620a:	d104      	bne.n	8016216 <HAL_TIM_PWM_Start+0xd6>
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2202      	movs	r2, #2
 8016210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016214:	e013      	b.n	801623e <HAL_TIM_PWM_Start+0xfe>
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	2b0c      	cmp	r3, #12
 801621a:	d104      	bne.n	8016226 <HAL_TIM_PWM_Start+0xe6>
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	2202      	movs	r2, #2
 8016220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016224:	e00b      	b.n	801623e <HAL_TIM_PWM_Start+0xfe>
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	2b10      	cmp	r3, #16
 801622a:	d104      	bne.n	8016236 <HAL_TIM_PWM_Start+0xf6>
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	2202      	movs	r2, #2
 8016230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016234:	e003      	b.n	801623e <HAL_TIM_PWM_Start+0xfe>
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	2202      	movs	r2, #2
 801623a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	2201      	movs	r2, #1
 8016244:	6839      	ldr	r1, [r7, #0]
 8016246:	4618      	mov	r0, r3
 8016248:	f001 fa94 	bl	8017774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	4a3d      	ldr	r2, [pc, #244]	@ (8016348 <HAL_TIM_PWM_Start+0x208>)
 8016252:	4293      	cmp	r3, r2
 8016254:	d013      	beq.n	801627e <HAL_TIM_PWM_Start+0x13e>
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	4a3c      	ldr	r2, [pc, #240]	@ (801634c <HAL_TIM_PWM_Start+0x20c>)
 801625c:	4293      	cmp	r3, r2
 801625e:	d00e      	beq.n	801627e <HAL_TIM_PWM_Start+0x13e>
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	4a3a      	ldr	r2, [pc, #232]	@ (8016350 <HAL_TIM_PWM_Start+0x210>)
 8016266:	4293      	cmp	r3, r2
 8016268:	d009      	beq.n	801627e <HAL_TIM_PWM_Start+0x13e>
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	4a39      	ldr	r2, [pc, #228]	@ (8016354 <HAL_TIM_PWM_Start+0x214>)
 8016270:	4293      	cmp	r3, r2
 8016272:	d004      	beq.n	801627e <HAL_TIM_PWM_Start+0x13e>
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	4a37      	ldr	r2, [pc, #220]	@ (8016358 <HAL_TIM_PWM_Start+0x218>)
 801627a:	4293      	cmp	r3, r2
 801627c:	d101      	bne.n	8016282 <HAL_TIM_PWM_Start+0x142>
 801627e:	2301      	movs	r3, #1
 8016280:	e000      	b.n	8016284 <HAL_TIM_PWM_Start+0x144>
 8016282:	2300      	movs	r3, #0
 8016284:	2b00      	cmp	r3, #0
 8016286:	d007      	beq.n	8016298 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016296:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	4a2a      	ldr	r2, [pc, #168]	@ (8016348 <HAL_TIM_PWM_Start+0x208>)
 801629e:	4293      	cmp	r3, r2
 80162a0:	d02c      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80162aa:	d027      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	4a2a      	ldr	r2, [pc, #168]	@ (801635c <HAL_TIM_PWM_Start+0x21c>)
 80162b2:	4293      	cmp	r3, r2
 80162b4:	d022      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	4a29      	ldr	r2, [pc, #164]	@ (8016360 <HAL_TIM_PWM_Start+0x220>)
 80162bc:	4293      	cmp	r3, r2
 80162be:	d01d      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	4a27      	ldr	r2, [pc, #156]	@ (8016364 <HAL_TIM_PWM_Start+0x224>)
 80162c6:	4293      	cmp	r3, r2
 80162c8:	d018      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	4a1f      	ldr	r2, [pc, #124]	@ (801634c <HAL_TIM_PWM_Start+0x20c>)
 80162d0:	4293      	cmp	r3, r2
 80162d2:	d013      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	4a23      	ldr	r2, [pc, #140]	@ (8016368 <HAL_TIM_PWM_Start+0x228>)
 80162da:	4293      	cmp	r3, r2
 80162dc:	d00e      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	4a1b      	ldr	r2, [pc, #108]	@ (8016350 <HAL_TIM_PWM_Start+0x210>)
 80162e4:	4293      	cmp	r3, r2
 80162e6:	d009      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	4a1f      	ldr	r2, [pc, #124]	@ (801636c <HAL_TIM_PWM_Start+0x22c>)
 80162ee:	4293      	cmp	r3, r2
 80162f0:	d004      	beq.n	80162fc <HAL_TIM_PWM_Start+0x1bc>
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4a1e      	ldr	r2, [pc, #120]	@ (8016370 <HAL_TIM_PWM_Start+0x230>)
 80162f8:	4293      	cmp	r3, r2
 80162fa:	d115      	bne.n	8016328 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	689a      	ldr	r2, [r3, #8]
 8016302:	4b1c      	ldr	r3, [pc, #112]	@ (8016374 <HAL_TIM_PWM_Start+0x234>)
 8016304:	4013      	ands	r3, r2
 8016306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	2b06      	cmp	r3, #6
 801630c:	d015      	beq.n	801633a <HAL_TIM_PWM_Start+0x1fa>
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016314:	d011      	beq.n	801633a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	681a      	ldr	r2, [r3, #0]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	f042 0201 	orr.w	r2, r2, #1
 8016324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016326:	e008      	b.n	801633a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	f042 0201 	orr.w	r2, r2, #1
 8016336:	601a      	str	r2, [r3, #0]
 8016338:	e000      	b.n	801633c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801633a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801633c:	2300      	movs	r3, #0
}
 801633e:	4618      	mov	r0, r3
 8016340:	3710      	adds	r7, #16
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	40010000 	.word	0x40010000
 801634c:	40010400 	.word	0x40010400
 8016350:	40014000 	.word	0x40014000
 8016354:	40014400 	.word	0x40014400
 8016358:	40014800 	.word	0x40014800
 801635c:	40000400 	.word	0x40000400
 8016360:	40000800 	.word	0x40000800
 8016364:	40000c00 	.word	0x40000c00
 8016368:	40001800 	.word	0x40001800
 801636c:	4000e000 	.word	0x4000e000
 8016370:	4000e400 	.word	0x4000e400
 8016374:	00010007 	.word	0x00010007

08016378 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b082      	sub	sp, #8
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d101      	bne.n	801638a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8016386:	2301      	movs	r3, #1
 8016388:	e049      	b.n	801641e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016390:	b2db      	uxtb	r3, r3
 8016392:	2b00      	cmp	r3, #0
 8016394:	d106      	bne.n	80163a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	2200      	movs	r2, #0
 801639a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f7f2 f8dc 	bl	800855c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2202      	movs	r2, #2
 80163a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	681a      	ldr	r2, [r3, #0]
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	3304      	adds	r3, #4
 80163b4:	4619      	mov	r1, r3
 80163b6:	4610      	mov	r0, r2
 80163b8:	f000 fc86 	bl	8016cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2201      	movs	r2, #1
 80163c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2201      	movs	r2, #1
 80163c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2201      	movs	r2, #1
 80163d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2201      	movs	r2, #1
 80163d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2201      	movs	r2, #1
 80163e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2201      	movs	r2, #1
 80163e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2201      	movs	r2, #1
 80163f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2201      	movs	r2, #1
 80163f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2201      	movs	r2, #1
 8016400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	2201      	movs	r2, #1
 8016408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2201      	movs	r2, #1
 8016410:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2201      	movs	r2, #1
 8016418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801641c:	2300      	movs	r3, #0
}
 801641e:	4618      	mov	r0, r3
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}

08016426 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016426:	b580      	push	{r7, lr}
 8016428:	b084      	sub	sp, #16
 801642a:	af00      	add	r7, sp, #0
 801642c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	68db      	ldr	r3, [r3, #12]
 8016434:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	691b      	ldr	r3, [r3, #16]
 801643c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801643e:	68bb      	ldr	r3, [r7, #8]
 8016440:	f003 0302 	and.w	r3, r3, #2
 8016444:	2b00      	cmp	r3, #0
 8016446:	d020      	beq.n	801648a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	f003 0302 	and.w	r3, r3, #2
 801644e:	2b00      	cmp	r3, #0
 8016450:	d01b      	beq.n	801648a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	f06f 0202 	mvn.w	r2, #2
 801645a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2201      	movs	r2, #1
 8016460:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	699b      	ldr	r3, [r3, #24]
 8016468:	f003 0303 	and.w	r3, r3, #3
 801646c:	2b00      	cmp	r3, #0
 801646e:	d003      	beq.n	8016478 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f000 fc0b 	bl	8016c8c <HAL_TIM_IC_CaptureCallback>
 8016476:	e005      	b.n	8016484 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016478:	6878      	ldr	r0, [r7, #4]
 801647a:	f000 fbfd 	bl	8016c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f000 fc0e 	bl	8016ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2200      	movs	r2, #0
 8016488:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	f003 0304 	and.w	r3, r3, #4
 8016490:	2b00      	cmp	r3, #0
 8016492:	d020      	beq.n	80164d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	f003 0304 	and.w	r3, r3, #4
 801649a:	2b00      	cmp	r3, #0
 801649c:	d01b      	beq.n	80164d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	f06f 0204 	mvn.w	r2, #4
 80164a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2202      	movs	r2, #2
 80164ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	699b      	ldr	r3, [r3, #24]
 80164b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d003      	beq.n	80164c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f000 fbe5 	bl	8016c8c <HAL_TIM_IC_CaptureCallback>
 80164c2:	e005      	b.n	80164d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f000 fbd7 	bl	8016c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f000 fbe8 	bl	8016ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2200      	movs	r2, #0
 80164d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	f003 0308 	and.w	r3, r3, #8
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d020      	beq.n	8016522 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	f003 0308 	and.w	r3, r3, #8
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d01b      	beq.n	8016522 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	f06f 0208 	mvn.w	r2, #8
 80164f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2204      	movs	r2, #4
 80164f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	69db      	ldr	r3, [r3, #28]
 8016500:	f003 0303 	and.w	r3, r3, #3
 8016504:	2b00      	cmp	r3, #0
 8016506:	d003      	beq.n	8016510 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f000 fbbf 	bl	8016c8c <HAL_TIM_IC_CaptureCallback>
 801650e:	e005      	b.n	801651c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f000 fbb1 	bl	8016c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f000 fbc2 	bl	8016ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2200      	movs	r2, #0
 8016520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	f003 0310 	and.w	r3, r3, #16
 8016528:	2b00      	cmp	r3, #0
 801652a:	d020      	beq.n	801656e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	f003 0310 	and.w	r3, r3, #16
 8016532:	2b00      	cmp	r3, #0
 8016534:	d01b      	beq.n	801656e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	f06f 0210 	mvn.w	r2, #16
 801653e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2208      	movs	r2, #8
 8016544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	69db      	ldr	r3, [r3, #28]
 801654c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016550:	2b00      	cmp	r3, #0
 8016552:	d003      	beq.n	801655c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f000 fb99 	bl	8016c8c <HAL_TIM_IC_CaptureCallback>
 801655a:	e005      	b.n	8016568 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f000 fb8b 	bl	8016c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f000 fb9c 	bl	8016ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2200      	movs	r2, #0
 801656c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801656e:	68bb      	ldr	r3, [r7, #8]
 8016570:	f003 0301 	and.w	r3, r3, #1
 8016574:	2b00      	cmp	r3, #0
 8016576:	d00c      	beq.n	8016592 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	f003 0301 	and.w	r3, r3, #1
 801657e:	2b00      	cmp	r3, #0
 8016580:	d007      	beq.n	8016592 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f06f 0201 	mvn.w	r2, #1
 801658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f7ef fa2d 	bl	80059ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016598:	2b00      	cmp	r3, #0
 801659a:	d104      	bne.n	80165a6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d00c      	beq.n	80165c0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d007      	beq.n	80165c0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80165b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f001 fa32 	bl	8017a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00c      	beq.n	80165e4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d007      	beq.n	80165e4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80165dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f001 fa2a 	bl	8017a38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00c      	beq.n	8016608 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d007      	beq.n	8016608 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f000 fb56 	bl	8016cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	f003 0320 	and.w	r3, r3, #32
 801660e:	2b00      	cmp	r3, #0
 8016610:	d00c      	beq.n	801662c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	f003 0320 	and.w	r3, r3, #32
 8016618:	2b00      	cmp	r3, #0
 801661a:	d007      	beq.n	801662c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f06f 0220 	mvn.w	r2, #32
 8016624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f001 f9f2 	bl	8017a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801662c:	bf00      	nop
 801662e:	3710      	adds	r7, #16
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}

08016634 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b086      	sub	sp, #24
 8016638:	af00      	add	r7, sp, #0
 801663a:	60f8      	str	r0, [r7, #12]
 801663c:	60b9      	str	r1, [r7, #8]
 801663e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016640:	2300      	movs	r3, #0
 8016642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801664a:	2b01      	cmp	r3, #1
 801664c:	d101      	bne.n	8016652 <HAL_TIM_OC_ConfigChannel+0x1e>
 801664e:	2302      	movs	r3, #2
 8016650:	e066      	b.n	8016720 <HAL_TIM_OC_ConfigChannel+0xec>
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	2201      	movs	r2, #1
 8016656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2b14      	cmp	r3, #20
 801665e:	d857      	bhi.n	8016710 <HAL_TIM_OC_ConfigChannel+0xdc>
 8016660:	a201      	add	r2, pc, #4	@ (adr r2, 8016668 <HAL_TIM_OC_ConfigChannel+0x34>)
 8016662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016666:	bf00      	nop
 8016668:	080166bd 	.word	0x080166bd
 801666c:	08016711 	.word	0x08016711
 8016670:	08016711 	.word	0x08016711
 8016674:	08016711 	.word	0x08016711
 8016678:	080166cb 	.word	0x080166cb
 801667c:	08016711 	.word	0x08016711
 8016680:	08016711 	.word	0x08016711
 8016684:	08016711 	.word	0x08016711
 8016688:	080166d9 	.word	0x080166d9
 801668c:	08016711 	.word	0x08016711
 8016690:	08016711 	.word	0x08016711
 8016694:	08016711 	.word	0x08016711
 8016698:	080166e7 	.word	0x080166e7
 801669c:	08016711 	.word	0x08016711
 80166a0:	08016711 	.word	0x08016711
 80166a4:	08016711 	.word	0x08016711
 80166a8:	080166f5 	.word	0x080166f5
 80166ac:	08016711 	.word	0x08016711
 80166b0:	08016711 	.word	0x08016711
 80166b4:	08016711 	.word	0x08016711
 80166b8:	08016703 	.word	0x08016703
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	68b9      	ldr	r1, [r7, #8]
 80166c2:	4618      	mov	r0, r3
 80166c4:	f000 fbac 	bl	8016e20 <TIM_OC1_SetConfig>
      break;
 80166c8:	e025      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	68b9      	ldr	r1, [r7, #8]
 80166d0:	4618      	mov	r0, r3
 80166d2:	f000 fc35 	bl	8016f40 <TIM_OC2_SetConfig>
      break;
 80166d6:	e01e      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	68b9      	ldr	r1, [r7, #8]
 80166de:	4618      	mov	r0, r3
 80166e0:	f000 fcb8 	bl	8017054 <TIM_OC3_SetConfig>
      break;
 80166e4:	e017      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	68b9      	ldr	r1, [r7, #8]
 80166ec:	4618      	mov	r0, r3
 80166ee:	f000 fd39 	bl	8017164 <TIM_OC4_SetConfig>
      break;
 80166f2:	e010      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	68b9      	ldr	r1, [r7, #8]
 80166fa:	4618      	mov	r0, r3
 80166fc:	f000 fd9c 	bl	8017238 <TIM_OC5_SetConfig>
      break;
 8016700:	e009      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	68b9      	ldr	r1, [r7, #8]
 8016708:	4618      	mov	r0, r3
 801670a:	f000 fdf9 	bl	8017300 <TIM_OC6_SetConfig>
      break;
 801670e:	e002      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8016710:	2301      	movs	r3, #1
 8016712:	75fb      	strb	r3, [r7, #23]
      break;
 8016714:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2200      	movs	r2, #0
 801671a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801671e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016720:	4618      	mov	r0, r3
 8016722:	3718      	adds	r7, #24
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b086      	sub	sp, #24
 801672c:	af00      	add	r7, sp, #0
 801672e:	60f8      	str	r0, [r7, #12]
 8016730:	60b9      	str	r1, [r7, #8]
 8016732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016734:	2300      	movs	r3, #0
 8016736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801673e:	2b01      	cmp	r3, #1
 8016740:	d101      	bne.n	8016746 <HAL_TIM_IC_ConfigChannel+0x1e>
 8016742:	2302      	movs	r3, #2
 8016744:	e088      	b.n	8016858 <HAL_TIM_IC_ConfigChannel+0x130>
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	2201      	movs	r2, #1
 801674a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d11b      	bne.n	801678c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016764:	f000 fe32 	bl	80173cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	699a      	ldr	r2, [r3, #24]
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	f022 020c 	bic.w	r2, r2, #12
 8016776:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	6999      	ldr	r1, [r3, #24]
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	689a      	ldr	r2, [r3, #8]
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	430a      	orrs	r2, r1
 8016788:	619a      	str	r2, [r3, #24]
 801678a:	e060      	b.n	801684e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2b04      	cmp	r3, #4
 8016790:	d11c      	bne.n	80167cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80167a2:	f000 fec2 	bl	801752a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	699a      	ldr	r2, [r3, #24]
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80167b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	6999      	ldr	r1, [r3, #24]
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	689b      	ldr	r3, [r3, #8]
 80167c0:	021a      	lsls	r2, r3, #8
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	430a      	orrs	r2, r1
 80167c8:	619a      	str	r2, [r3, #24]
 80167ca:	e040      	b.n	801684e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2b08      	cmp	r3, #8
 80167d0:	d11b      	bne.n	801680a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80167e2:	f000 ff0f 	bl	8017604 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	69da      	ldr	r2, [r3, #28]
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	f022 020c 	bic.w	r2, r2, #12
 80167f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	69d9      	ldr	r1, [r3, #28]
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	689a      	ldr	r2, [r3, #8]
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	430a      	orrs	r2, r1
 8016806:	61da      	str	r2, [r3, #28]
 8016808:	e021      	b.n	801684e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	2b0c      	cmp	r3, #12
 801680e:	d11c      	bne.n	801684a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801681c:	68bb      	ldr	r3, [r7, #8]
 801681e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016820:	f000 ff2c 	bl	801767c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	69da      	ldr	r2, [r3, #28]
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016832:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	69d9      	ldr	r1, [r3, #28]
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	689b      	ldr	r3, [r3, #8]
 801683e:	021a      	lsls	r2, r3, #8
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	430a      	orrs	r2, r1
 8016846:	61da      	str	r2, [r3, #28]
 8016848:	e001      	b.n	801684e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801684a:	2301      	movs	r3, #1
 801684c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	2200      	movs	r2, #0
 8016852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016856:	7dfb      	ldrb	r3, [r7, #23]
}
 8016858:	4618      	mov	r0, r3
 801685a:	3718      	adds	r7, #24
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b086      	sub	sp, #24
 8016864:	af00      	add	r7, sp, #0
 8016866:	60f8      	str	r0, [r7, #12]
 8016868:	60b9      	str	r1, [r7, #8]
 801686a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801686c:	2300      	movs	r3, #0
 801686e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016876:	2b01      	cmp	r3, #1
 8016878:	d101      	bne.n	801687e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801687a:	2302      	movs	r3, #2
 801687c:	e0ff      	b.n	8016a7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2201      	movs	r2, #1
 8016882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2b14      	cmp	r3, #20
 801688a:	f200 80f0 	bhi.w	8016a6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801688e:	a201      	add	r2, pc, #4	@ (adr r2, 8016894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016894:	080168e9 	.word	0x080168e9
 8016898:	08016a6f 	.word	0x08016a6f
 801689c:	08016a6f 	.word	0x08016a6f
 80168a0:	08016a6f 	.word	0x08016a6f
 80168a4:	08016929 	.word	0x08016929
 80168a8:	08016a6f 	.word	0x08016a6f
 80168ac:	08016a6f 	.word	0x08016a6f
 80168b0:	08016a6f 	.word	0x08016a6f
 80168b4:	0801696b 	.word	0x0801696b
 80168b8:	08016a6f 	.word	0x08016a6f
 80168bc:	08016a6f 	.word	0x08016a6f
 80168c0:	08016a6f 	.word	0x08016a6f
 80168c4:	080169ab 	.word	0x080169ab
 80168c8:	08016a6f 	.word	0x08016a6f
 80168cc:	08016a6f 	.word	0x08016a6f
 80168d0:	08016a6f 	.word	0x08016a6f
 80168d4:	080169ed 	.word	0x080169ed
 80168d8:	08016a6f 	.word	0x08016a6f
 80168dc:	08016a6f 	.word	0x08016a6f
 80168e0:	08016a6f 	.word	0x08016a6f
 80168e4:	08016a2d 	.word	0x08016a2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	68b9      	ldr	r1, [r7, #8]
 80168ee:	4618      	mov	r0, r3
 80168f0:	f000 fa96 	bl	8016e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	699a      	ldr	r2, [r3, #24]
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	f042 0208 	orr.w	r2, r2, #8
 8016902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	699a      	ldr	r2, [r3, #24]
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	f022 0204 	bic.w	r2, r2, #4
 8016912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	6999      	ldr	r1, [r3, #24]
 801691a:	68bb      	ldr	r3, [r7, #8]
 801691c:	691a      	ldr	r2, [r3, #16]
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	430a      	orrs	r2, r1
 8016924:	619a      	str	r2, [r3, #24]
      break;
 8016926:	e0a5      	b.n	8016a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	68b9      	ldr	r1, [r7, #8]
 801692e:	4618      	mov	r0, r3
 8016930:	f000 fb06 	bl	8016f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	699a      	ldr	r2, [r3, #24]
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	699a      	ldr	r2, [r3, #24]
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	6999      	ldr	r1, [r3, #24]
 801695a:	68bb      	ldr	r3, [r7, #8]
 801695c:	691b      	ldr	r3, [r3, #16]
 801695e:	021a      	lsls	r2, r3, #8
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	430a      	orrs	r2, r1
 8016966:	619a      	str	r2, [r3, #24]
      break;
 8016968:	e084      	b.n	8016a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	68b9      	ldr	r1, [r7, #8]
 8016970:	4618      	mov	r0, r3
 8016972:	f000 fb6f 	bl	8017054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	69da      	ldr	r2, [r3, #28]
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	f042 0208 	orr.w	r2, r2, #8
 8016984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	69da      	ldr	r2, [r3, #28]
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	f022 0204 	bic.w	r2, r2, #4
 8016994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	69d9      	ldr	r1, [r3, #28]
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	691a      	ldr	r2, [r3, #16]
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	430a      	orrs	r2, r1
 80169a6:	61da      	str	r2, [r3, #28]
      break;
 80169a8:	e064      	b.n	8016a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	68b9      	ldr	r1, [r7, #8]
 80169b0:	4618      	mov	r0, r3
 80169b2:	f000 fbd7 	bl	8017164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	69da      	ldr	r2, [r3, #28]
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80169c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	69da      	ldr	r2, [r3, #28]
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80169d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	69d9      	ldr	r1, [r3, #28]
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	691b      	ldr	r3, [r3, #16]
 80169e0:	021a      	lsls	r2, r3, #8
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	430a      	orrs	r2, r1
 80169e8:	61da      	str	r2, [r3, #28]
      break;
 80169ea:	e043      	b.n	8016a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	68b9      	ldr	r1, [r7, #8]
 80169f2:	4618      	mov	r0, r3
 80169f4:	f000 fc20 	bl	8017238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	f042 0208 	orr.w	r2, r2, #8
 8016a06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f022 0204 	bic.w	r2, r2, #4
 8016a16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	691a      	ldr	r2, [r3, #16]
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	430a      	orrs	r2, r1
 8016a28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016a2a:	e023      	b.n	8016a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	68b9      	ldr	r1, [r7, #8]
 8016a32:	4618      	mov	r0, r3
 8016a34:	f000 fc64 	bl	8017300 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016a46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016a56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	691b      	ldr	r3, [r3, #16]
 8016a62:	021a      	lsls	r2, r3, #8
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	430a      	orrs	r2, r1
 8016a6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016a6c:	e002      	b.n	8016a74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016a6e:	2301      	movs	r3, #1
 8016a70:	75fb      	strb	r3, [r7, #23]
      break;
 8016a72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	2200      	movs	r2, #0
 8016a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3718      	adds	r7, #24
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
 8016a86:	bf00      	nop

08016a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b084      	sub	sp, #16
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016a92:	2300      	movs	r3, #0
 8016a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016a9c:	2b01      	cmp	r3, #1
 8016a9e:	d101      	bne.n	8016aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8016aa0:	2302      	movs	r3, #2
 8016aa2:	e0dc      	b.n	8016c5e <HAL_TIM_ConfigClockSource+0x1d6>
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2201      	movs	r2, #1
 8016aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2202      	movs	r2, #2
 8016ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	689b      	ldr	r3, [r3, #8]
 8016aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016abc:	68ba      	ldr	r2, [r7, #8]
 8016abe:	4b6a      	ldr	r3, [pc, #424]	@ (8016c68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016ac0:	4013      	ands	r3, r2
 8016ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	68ba      	ldr	r2, [r7, #8]
 8016ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	4a64      	ldr	r2, [pc, #400]	@ (8016c6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8016ada:	4293      	cmp	r3, r2
 8016adc:	f000 80a9 	beq.w	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016ae0:	4a62      	ldr	r2, [pc, #392]	@ (8016c6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8016ae2:	4293      	cmp	r3, r2
 8016ae4:	f200 80ae 	bhi.w	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016ae8:	4a61      	ldr	r2, [pc, #388]	@ (8016c70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016aea:	4293      	cmp	r3, r2
 8016aec:	f000 80a1 	beq.w	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016af0:	4a5f      	ldr	r2, [pc, #380]	@ (8016c70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016af2:	4293      	cmp	r3, r2
 8016af4:	f200 80a6 	bhi.w	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016af8:	4a5e      	ldr	r2, [pc, #376]	@ (8016c74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016afa:	4293      	cmp	r3, r2
 8016afc:	f000 8099 	beq.w	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b00:	4a5c      	ldr	r2, [pc, #368]	@ (8016c74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016b02:	4293      	cmp	r3, r2
 8016b04:	f200 809e 	bhi.w	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016b0c:	f000 8091 	beq.w	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016b14:	f200 8096 	bhi.w	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016b1c:	f000 8089 	beq.w	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016b24:	f200 808e 	bhi.w	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016b2c:	d03e      	beq.n	8016bac <HAL_TIM_ConfigClockSource+0x124>
 8016b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016b32:	f200 8087 	bhi.w	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016b3a:	f000 8086 	beq.w	8016c4a <HAL_TIM_ConfigClockSource+0x1c2>
 8016b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016b42:	d87f      	bhi.n	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b44:	2b70      	cmp	r3, #112	@ 0x70
 8016b46:	d01a      	beq.n	8016b7e <HAL_TIM_ConfigClockSource+0xf6>
 8016b48:	2b70      	cmp	r3, #112	@ 0x70
 8016b4a:	d87b      	bhi.n	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b4c:	2b60      	cmp	r3, #96	@ 0x60
 8016b4e:	d050      	beq.n	8016bf2 <HAL_TIM_ConfigClockSource+0x16a>
 8016b50:	2b60      	cmp	r3, #96	@ 0x60
 8016b52:	d877      	bhi.n	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b54:	2b50      	cmp	r3, #80	@ 0x50
 8016b56:	d03c      	beq.n	8016bd2 <HAL_TIM_ConfigClockSource+0x14a>
 8016b58:	2b50      	cmp	r3, #80	@ 0x50
 8016b5a:	d873      	bhi.n	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b5c:	2b40      	cmp	r3, #64	@ 0x40
 8016b5e:	d058      	beq.n	8016c12 <HAL_TIM_ConfigClockSource+0x18a>
 8016b60:	2b40      	cmp	r3, #64	@ 0x40
 8016b62:	d86f      	bhi.n	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b64:	2b30      	cmp	r3, #48	@ 0x30
 8016b66:	d064      	beq.n	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b68:	2b30      	cmp	r3, #48	@ 0x30
 8016b6a:	d86b      	bhi.n	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b6c:	2b20      	cmp	r3, #32
 8016b6e:	d060      	beq.n	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b70:	2b20      	cmp	r3, #32
 8016b72:	d867      	bhi.n	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d05c      	beq.n	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b78:	2b10      	cmp	r3, #16
 8016b7a:	d05a      	beq.n	8016c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b7c:	e062      	b.n	8016c44 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016b8e:	f000 fdd1 	bl	8017734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	689b      	ldr	r3, [r3, #8]
 8016b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	68ba      	ldr	r2, [r7, #8]
 8016ba8:	609a      	str	r2, [r3, #8]
      break;
 8016baa:	e04f      	b.n	8016c4c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016bb0:	683b      	ldr	r3, [r7, #0]
 8016bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016bbc:	f000 fdba 	bl	8017734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	689a      	ldr	r2, [r3, #8]
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016bce:	609a      	str	r2, [r3, #8]
      break;
 8016bd0:	e03c      	b.n	8016c4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016bde:	461a      	mov	r2, r3
 8016be0:	f000 fc74 	bl	80174cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	2150      	movs	r1, #80	@ 0x50
 8016bea:	4618      	mov	r0, r3
 8016bec:	f000 fd84 	bl	80176f8 <TIM_ITRx_SetConfig>
      break;
 8016bf0:	e02c      	b.n	8016c4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016bfe:	461a      	mov	r2, r3
 8016c00:	f000 fcd0 	bl	80175a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	2160      	movs	r1, #96	@ 0x60
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f000 fd74 	bl	80176f8 <TIM_ITRx_SetConfig>
      break;
 8016c10:	e01c      	b.n	8016c4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016c1e:	461a      	mov	r2, r3
 8016c20:	f000 fc54 	bl	80174cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	2140      	movs	r1, #64	@ 0x40
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f000 fd64 	bl	80176f8 <TIM_ITRx_SetConfig>
      break;
 8016c30:	e00c      	b.n	8016c4c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681a      	ldr	r2, [r3, #0]
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	4619      	mov	r1, r3
 8016c3c:	4610      	mov	r0, r2
 8016c3e:	f000 fd5b 	bl	80176f8 <TIM_ITRx_SetConfig>
      break;
 8016c42:	e003      	b.n	8016c4c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016c44:	2301      	movs	r3, #1
 8016c46:	73fb      	strb	r3, [r7, #15]
      break;
 8016c48:	e000      	b.n	8016c4c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8016c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	2201      	movs	r2, #1
 8016c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	2200      	movs	r2, #0
 8016c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3710      	adds	r7, #16
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}
 8016c66:	bf00      	nop
 8016c68:	ffceff88 	.word	0xffceff88
 8016c6c:	00100040 	.word	0x00100040
 8016c70:	00100030 	.word	0x00100030
 8016c74:	00100020 	.word	0x00100020

08016c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016c78:	b480      	push	{r7}
 8016c7a:	b083      	sub	sp, #12
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016c80:	bf00      	nop
 8016c82:	370c      	adds	r7, #12
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	b083      	sub	sp, #12
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016c94:	bf00      	nop
 8016c96:	370c      	adds	r7, #12
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9e:	4770      	bx	lr

08016ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b083      	sub	sp, #12
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016ca8:	bf00      	nop
 8016caa:	370c      	adds	r7, #12
 8016cac:	46bd      	mov	sp, r7
 8016cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb2:	4770      	bx	lr

08016cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016cb4:	b480      	push	{r7}
 8016cb6:	b083      	sub	sp, #12
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016cbc:	bf00      	nop
 8016cbe:	370c      	adds	r7, #12
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr

08016cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016cc8:	b480      	push	{r7}
 8016cca:	b085      	sub	sp, #20
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	4a47      	ldr	r2, [pc, #284]	@ (8016df8 <TIM_Base_SetConfig+0x130>)
 8016cdc:	4293      	cmp	r3, r2
 8016cde:	d013      	beq.n	8016d08 <TIM_Base_SetConfig+0x40>
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016ce6:	d00f      	beq.n	8016d08 <TIM_Base_SetConfig+0x40>
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	4a44      	ldr	r2, [pc, #272]	@ (8016dfc <TIM_Base_SetConfig+0x134>)
 8016cec:	4293      	cmp	r3, r2
 8016cee:	d00b      	beq.n	8016d08 <TIM_Base_SetConfig+0x40>
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	4a43      	ldr	r2, [pc, #268]	@ (8016e00 <TIM_Base_SetConfig+0x138>)
 8016cf4:	4293      	cmp	r3, r2
 8016cf6:	d007      	beq.n	8016d08 <TIM_Base_SetConfig+0x40>
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	4a42      	ldr	r2, [pc, #264]	@ (8016e04 <TIM_Base_SetConfig+0x13c>)
 8016cfc:	4293      	cmp	r3, r2
 8016cfe:	d003      	beq.n	8016d08 <TIM_Base_SetConfig+0x40>
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	4a41      	ldr	r2, [pc, #260]	@ (8016e08 <TIM_Base_SetConfig+0x140>)
 8016d04:	4293      	cmp	r3, r2
 8016d06:	d108      	bne.n	8016d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016d10:	683b      	ldr	r3, [r7, #0]
 8016d12:	685b      	ldr	r3, [r3, #4]
 8016d14:	68fa      	ldr	r2, [r7, #12]
 8016d16:	4313      	orrs	r3, r2
 8016d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	4a36      	ldr	r2, [pc, #216]	@ (8016df8 <TIM_Base_SetConfig+0x130>)
 8016d1e:	4293      	cmp	r3, r2
 8016d20:	d027      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016d28:	d023      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	4a33      	ldr	r2, [pc, #204]	@ (8016dfc <TIM_Base_SetConfig+0x134>)
 8016d2e:	4293      	cmp	r3, r2
 8016d30:	d01f      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	4a32      	ldr	r2, [pc, #200]	@ (8016e00 <TIM_Base_SetConfig+0x138>)
 8016d36:	4293      	cmp	r3, r2
 8016d38:	d01b      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	4a31      	ldr	r2, [pc, #196]	@ (8016e04 <TIM_Base_SetConfig+0x13c>)
 8016d3e:	4293      	cmp	r3, r2
 8016d40:	d017      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	4a30      	ldr	r2, [pc, #192]	@ (8016e08 <TIM_Base_SetConfig+0x140>)
 8016d46:	4293      	cmp	r3, r2
 8016d48:	d013      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8016e0c <TIM_Base_SetConfig+0x144>)
 8016d4e:	4293      	cmp	r3, r2
 8016d50:	d00f      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	4a2e      	ldr	r2, [pc, #184]	@ (8016e10 <TIM_Base_SetConfig+0x148>)
 8016d56:	4293      	cmp	r3, r2
 8016d58:	d00b      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8016e14 <TIM_Base_SetConfig+0x14c>)
 8016d5e:	4293      	cmp	r3, r2
 8016d60:	d007      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	4a2c      	ldr	r2, [pc, #176]	@ (8016e18 <TIM_Base_SetConfig+0x150>)
 8016d66:	4293      	cmp	r3, r2
 8016d68:	d003      	beq.n	8016d72 <TIM_Base_SetConfig+0xaa>
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8016e1c <TIM_Base_SetConfig+0x154>)
 8016d6e:	4293      	cmp	r3, r2
 8016d70:	d108      	bne.n	8016d84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	68db      	ldr	r3, [r3, #12]
 8016d7e:	68fa      	ldr	r2, [r7, #12]
 8016d80:	4313      	orrs	r3, r2
 8016d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	695b      	ldr	r3, [r3, #20]
 8016d8e:	4313      	orrs	r3, r2
 8016d90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	689a      	ldr	r2, [r3, #8]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	4a14      	ldr	r2, [pc, #80]	@ (8016df8 <TIM_Base_SetConfig+0x130>)
 8016da6:	4293      	cmp	r3, r2
 8016da8:	d00f      	beq.n	8016dca <TIM_Base_SetConfig+0x102>
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	4a16      	ldr	r2, [pc, #88]	@ (8016e08 <TIM_Base_SetConfig+0x140>)
 8016dae:	4293      	cmp	r3, r2
 8016db0:	d00b      	beq.n	8016dca <TIM_Base_SetConfig+0x102>
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	4a15      	ldr	r2, [pc, #84]	@ (8016e0c <TIM_Base_SetConfig+0x144>)
 8016db6:	4293      	cmp	r3, r2
 8016db8:	d007      	beq.n	8016dca <TIM_Base_SetConfig+0x102>
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	4a14      	ldr	r2, [pc, #80]	@ (8016e10 <TIM_Base_SetConfig+0x148>)
 8016dbe:	4293      	cmp	r3, r2
 8016dc0:	d003      	beq.n	8016dca <TIM_Base_SetConfig+0x102>
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	4a13      	ldr	r2, [pc, #76]	@ (8016e14 <TIM_Base_SetConfig+0x14c>)
 8016dc6:	4293      	cmp	r3, r2
 8016dc8:	d103      	bne.n	8016dd2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	691a      	ldr	r2, [r3, #16]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	f043 0204 	orr.w	r2, r3, #4
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2201      	movs	r2, #1
 8016de2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	68fa      	ldr	r2, [r7, #12]
 8016de8:	601a      	str	r2, [r3, #0]
}
 8016dea:	bf00      	nop
 8016dec:	3714      	adds	r7, #20
 8016dee:	46bd      	mov	sp, r7
 8016df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df4:	4770      	bx	lr
 8016df6:	bf00      	nop
 8016df8:	40010000 	.word	0x40010000
 8016dfc:	40000400 	.word	0x40000400
 8016e00:	40000800 	.word	0x40000800
 8016e04:	40000c00 	.word	0x40000c00
 8016e08:	40010400 	.word	0x40010400
 8016e0c:	40014000 	.word	0x40014000
 8016e10:	40014400 	.word	0x40014400
 8016e14:	40014800 	.word	0x40014800
 8016e18:	4000e000 	.word	0x4000e000
 8016e1c:	4000e400 	.word	0x4000e400

08016e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e20:	b480      	push	{r7}
 8016e22:	b087      	sub	sp, #28
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	6a1b      	ldr	r3, [r3, #32]
 8016e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6a1b      	ldr	r3, [r3, #32]
 8016e34:	f023 0201 	bic.w	r2, r3, #1
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	699b      	ldr	r3, [r3, #24]
 8016e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016e48:	68fa      	ldr	r2, [r7, #12]
 8016e4a:	4b37      	ldr	r3, [pc, #220]	@ (8016f28 <TIM_OC1_SetConfig+0x108>)
 8016e4c:	4013      	ands	r3, r2
 8016e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	f023 0303 	bic.w	r3, r3, #3
 8016e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	68fa      	ldr	r2, [r7, #12]
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016e62:	697b      	ldr	r3, [r7, #20]
 8016e64:	f023 0302 	bic.w	r3, r3, #2
 8016e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	689b      	ldr	r3, [r3, #8]
 8016e6e:	697a      	ldr	r2, [r7, #20]
 8016e70:	4313      	orrs	r3, r2
 8016e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	4a2d      	ldr	r2, [pc, #180]	@ (8016f2c <TIM_OC1_SetConfig+0x10c>)
 8016e78:	4293      	cmp	r3, r2
 8016e7a:	d00f      	beq.n	8016e9c <TIM_OC1_SetConfig+0x7c>
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8016f30 <TIM_OC1_SetConfig+0x110>)
 8016e80:	4293      	cmp	r3, r2
 8016e82:	d00b      	beq.n	8016e9c <TIM_OC1_SetConfig+0x7c>
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	4a2b      	ldr	r2, [pc, #172]	@ (8016f34 <TIM_OC1_SetConfig+0x114>)
 8016e88:	4293      	cmp	r3, r2
 8016e8a:	d007      	beq.n	8016e9c <TIM_OC1_SetConfig+0x7c>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8016f38 <TIM_OC1_SetConfig+0x118>)
 8016e90:	4293      	cmp	r3, r2
 8016e92:	d003      	beq.n	8016e9c <TIM_OC1_SetConfig+0x7c>
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	4a29      	ldr	r2, [pc, #164]	@ (8016f3c <TIM_OC1_SetConfig+0x11c>)
 8016e98:	4293      	cmp	r3, r2
 8016e9a:	d10c      	bne.n	8016eb6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	f023 0308 	bic.w	r3, r3, #8
 8016ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016ea4:	683b      	ldr	r3, [r7, #0]
 8016ea6:	68db      	ldr	r3, [r3, #12]
 8016ea8:	697a      	ldr	r2, [r7, #20]
 8016eaa:	4313      	orrs	r3, r2
 8016eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	f023 0304 	bic.w	r3, r3, #4
 8016eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8016f2c <TIM_OC1_SetConfig+0x10c>)
 8016eba:	4293      	cmp	r3, r2
 8016ebc:	d00f      	beq.n	8016ede <TIM_OC1_SetConfig+0xbe>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8016f30 <TIM_OC1_SetConfig+0x110>)
 8016ec2:	4293      	cmp	r3, r2
 8016ec4:	d00b      	beq.n	8016ede <TIM_OC1_SetConfig+0xbe>
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8016f34 <TIM_OC1_SetConfig+0x114>)
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	d007      	beq.n	8016ede <TIM_OC1_SetConfig+0xbe>
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4a19      	ldr	r2, [pc, #100]	@ (8016f38 <TIM_OC1_SetConfig+0x118>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	d003      	beq.n	8016ede <TIM_OC1_SetConfig+0xbe>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	4a18      	ldr	r2, [pc, #96]	@ (8016f3c <TIM_OC1_SetConfig+0x11c>)
 8016eda:	4293      	cmp	r3, r2
 8016edc:	d111      	bne.n	8016f02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	695b      	ldr	r3, [r3, #20]
 8016ef2:	693a      	ldr	r2, [r7, #16]
 8016ef4:	4313      	orrs	r3, r2
 8016ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	699b      	ldr	r3, [r3, #24]
 8016efc:	693a      	ldr	r2, [r7, #16]
 8016efe:	4313      	orrs	r3, r2
 8016f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	693a      	ldr	r2, [r7, #16]
 8016f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	68fa      	ldr	r2, [r7, #12]
 8016f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	685a      	ldr	r2, [r3, #4]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	697a      	ldr	r2, [r7, #20]
 8016f1a:	621a      	str	r2, [r3, #32]
}
 8016f1c:	bf00      	nop
 8016f1e:	371c      	adds	r7, #28
 8016f20:	46bd      	mov	sp, r7
 8016f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f26:	4770      	bx	lr
 8016f28:	fffeff8f 	.word	0xfffeff8f
 8016f2c:	40010000 	.word	0x40010000
 8016f30:	40010400 	.word	0x40010400
 8016f34:	40014000 	.word	0x40014000
 8016f38:	40014400 	.word	0x40014400
 8016f3c:	40014800 	.word	0x40014800

08016f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016f40:	b480      	push	{r7}
 8016f42:	b087      	sub	sp, #28
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
 8016f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	6a1b      	ldr	r3, [r3, #32]
 8016f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	6a1b      	ldr	r3, [r3, #32]
 8016f54:	f023 0210 	bic.w	r2, r3, #16
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	699b      	ldr	r3, [r3, #24]
 8016f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016f68:	68fa      	ldr	r2, [r7, #12]
 8016f6a:	4b34      	ldr	r3, [pc, #208]	@ (801703c <TIM_OC2_SetConfig+0xfc>)
 8016f6c:	4013      	ands	r3, r2
 8016f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016f78:	683b      	ldr	r3, [r7, #0]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	021b      	lsls	r3, r3, #8
 8016f7e:	68fa      	ldr	r2, [r7, #12]
 8016f80:	4313      	orrs	r3, r2
 8016f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	f023 0320 	bic.w	r3, r3, #32
 8016f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	689b      	ldr	r3, [r3, #8]
 8016f90:	011b      	lsls	r3, r3, #4
 8016f92:	697a      	ldr	r2, [r7, #20]
 8016f94:	4313      	orrs	r3, r2
 8016f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	4a29      	ldr	r2, [pc, #164]	@ (8017040 <TIM_OC2_SetConfig+0x100>)
 8016f9c:	4293      	cmp	r3, r2
 8016f9e:	d003      	beq.n	8016fa8 <TIM_OC2_SetConfig+0x68>
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	4a28      	ldr	r2, [pc, #160]	@ (8017044 <TIM_OC2_SetConfig+0x104>)
 8016fa4:	4293      	cmp	r3, r2
 8016fa6:	d10d      	bne.n	8016fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016fa8:	697b      	ldr	r3, [r7, #20]
 8016faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	011b      	lsls	r3, r3, #4
 8016fb6:	697a      	ldr	r2, [r7, #20]
 8016fb8:	4313      	orrs	r3, r2
 8016fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016fbc:	697b      	ldr	r3, [r7, #20]
 8016fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8017040 <TIM_OC2_SetConfig+0x100>)
 8016fc8:	4293      	cmp	r3, r2
 8016fca:	d00f      	beq.n	8016fec <TIM_OC2_SetConfig+0xac>
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	4a1d      	ldr	r2, [pc, #116]	@ (8017044 <TIM_OC2_SetConfig+0x104>)
 8016fd0:	4293      	cmp	r3, r2
 8016fd2:	d00b      	beq.n	8016fec <TIM_OC2_SetConfig+0xac>
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8017048 <TIM_OC2_SetConfig+0x108>)
 8016fd8:	4293      	cmp	r3, r2
 8016fda:	d007      	beq.n	8016fec <TIM_OC2_SetConfig+0xac>
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	4a1b      	ldr	r2, [pc, #108]	@ (801704c <TIM_OC2_SetConfig+0x10c>)
 8016fe0:	4293      	cmp	r3, r2
 8016fe2:	d003      	beq.n	8016fec <TIM_OC2_SetConfig+0xac>
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8017050 <TIM_OC2_SetConfig+0x110>)
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d113      	bne.n	8017014 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016ffc:	683b      	ldr	r3, [r7, #0]
 8016ffe:	695b      	ldr	r3, [r3, #20]
 8017000:	009b      	lsls	r3, r3, #2
 8017002:	693a      	ldr	r2, [r7, #16]
 8017004:	4313      	orrs	r3, r2
 8017006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	699b      	ldr	r3, [r3, #24]
 801700c:	009b      	lsls	r3, r3, #2
 801700e:	693a      	ldr	r2, [r7, #16]
 8017010:	4313      	orrs	r3, r2
 8017012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	693a      	ldr	r2, [r7, #16]
 8017018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	685a      	ldr	r2, [r3, #4]
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	697a      	ldr	r2, [r7, #20]
 801702c:	621a      	str	r2, [r3, #32]
}
 801702e:	bf00      	nop
 8017030:	371c      	adds	r7, #28
 8017032:	46bd      	mov	sp, r7
 8017034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017038:	4770      	bx	lr
 801703a:	bf00      	nop
 801703c:	feff8fff 	.word	0xfeff8fff
 8017040:	40010000 	.word	0x40010000
 8017044:	40010400 	.word	0x40010400
 8017048:	40014000 	.word	0x40014000
 801704c:	40014400 	.word	0x40014400
 8017050:	40014800 	.word	0x40014800

08017054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017054:	b480      	push	{r7}
 8017056:	b087      	sub	sp, #28
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
 801705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	6a1b      	ldr	r3, [r3, #32]
 8017062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	6a1b      	ldr	r3, [r3, #32]
 8017068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	685b      	ldr	r3, [r3, #4]
 8017074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	69db      	ldr	r3, [r3, #28]
 801707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801707c:	68fa      	ldr	r2, [r7, #12]
 801707e:	4b33      	ldr	r3, [pc, #204]	@ (801714c <TIM_OC3_SetConfig+0xf8>)
 8017080:	4013      	ands	r3, r2
 8017082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	f023 0303 	bic.w	r3, r3, #3
 801708a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	68fa      	ldr	r2, [r7, #12]
 8017092:	4313      	orrs	r3, r2
 8017094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801709c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	689b      	ldr	r3, [r3, #8]
 80170a2:	021b      	lsls	r3, r3, #8
 80170a4:	697a      	ldr	r2, [r7, #20]
 80170a6:	4313      	orrs	r3, r2
 80170a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	4a28      	ldr	r2, [pc, #160]	@ (8017150 <TIM_OC3_SetConfig+0xfc>)
 80170ae:	4293      	cmp	r3, r2
 80170b0:	d003      	beq.n	80170ba <TIM_OC3_SetConfig+0x66>
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	4a27      	ldr	r2, [pc, #156]	@ (8017154 <TIM_OC3_SetConfig+0x100>)
 80170b6:	4293      	cmp	r3, r2
 80170b8:	d10d      	bne.n	80170d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80170ba:	697b      	ldr	r3, [r7, #20]
 80170bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80170c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	68db      	ldr	r3, [r3, #12]
 80170c6:	021b      	lsls	r3, r3, #8
 80170c8:	697a      	ldr	r2, [r7, #20]
 80170ca:	4313      	orrs	r3, r2
 80170cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80170d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	4a1d      	ldr	r2, [pc, #116]	@ (8017150 <TIM_OC3_SetConfig+0xfc>)
 80170da:	4293      	cmp	r3, r2
 80170dc:	d00f      	beq.n	80170fe <TIM_OC3_SetConfig+0xaa>
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	4a1c      	ldr	r2, [pc, #112]	@ (8017154 <TIM_OC3_SetConfig+0x100>)
 80170e2:	4293      	cmp	r3, r2
 80170e4:	d00b      	beq.n	80170fe <TIM_OC3_SetConfig+0xaa>
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	4a1b      	ldr	r2, [pc, #108]	@ (8017158 <TIM_OC3_SetConfig+0x104>)
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d007      	beq.n	80170fe <TIM_OC3_SetConfig+0xaa>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	4a1a      	ldr	r2, [pc, #104]	@ (801715c <TIM_OC3_SetConfig+0x108>)
 80170f2:	4293      	cmp	r3, r2
 80170f4:	d003      	beq.n	80170fe <TIM_OC3_SetConfig+0xaa>
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	4a19      	ldr	r2, [pc, #100]	@ (8017160 <TIM_OC3_SetConfig+0x10c>)
 80170fa:	4293      	cmp	r3, r2
 80170fc:	d113      	bne.n	8017126 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80170fe:	693b      	ldr	r3, [r7, #16]
 8017100:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801710c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	695b      	ldr	r3, [r3, #20]
 8017112:	011b      	lsls	r3, r3, #4
 8017114:	693a      	ldr	r2, [r7, #16]
 8017116:	4313      	orrs	r3, r2
 8017118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	699b      	ldr	r3, [r3, #24]
 801711e:	011b      	lsls	r3, r3, #4
 8017120:	693a      	ldr	r2, [r7, #16]
 8017122:	4313      	orrs	r3, r2
 8017124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	693a      	ldr	r2, [r7, #16]
 801712a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	68fa      	ldr	r2, [r7, #12]
 8017130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017132:	683b      	ldr	r3, [r7, #0]
 8017134:	685a      	ldr	r2, [r3, #4]
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	697a      	ldr	r2, [r7, #20]
 801713e:	621a      	str	r2, [r3, #32]
}
 8017140:	bf00      	nop
 8017142:	371c      	adds	r7, #28
 8017144:	46bd      	mov	sp, r7
 8017146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714a:	4770      	bx	lr
 801714c:	fffeff8f 	.word	0xfffeff8f
 8017150:	40010000 	.word	0x40010000
 8017154:	40010400 	.word	0x40010400
 8017158:	40014000 	.word	0x40014000
 801715c:	40014400 	.word	0x40014400
 8017160:	40014800 	.word	0x40014800

08017164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017164:	b480      	push	{r7}
 8017166:	b087      	sub	sp, #28
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
 801716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	6a1b      	ldr	r3, [r3, #32]
 8017172:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	6a1b      	ldr	r3, [r3, #32]
 8017178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	685b      	ldr	r3, [r3, #4]
 8017184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	69db      	ldr	r3, [r3, #28]
 801718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801718c:	68fa      	ldr	r2, [r7, #12]
 801718e:	4b24      	ldr	r3, [pc, #144]	@ (8017220 <TIM_OC4_SetConfig+0xbc>)
 8017190:	4013      	ands	r3, r2
 8017192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801719a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801719c:	683b      	ldr	r3, [r7, #0]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	021b      	lsls	r3, r3, #8
 80171a2:	68fa      	ldr	r2, [r7, #12]
 80171a4:	4313      	orrs	r3, r2
 80171a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80171ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80171b0:	683b      	ldr	r3, [r7, #0]
 80171b2:	689b      	ldr	r3, [r3, #8]
 80171b4:	031b      	lsls	r3, r3, #12
 80171b6:	693a      	ldr	r2, [r7, #16]
 80171b8:	4313      	orrs	r3, r2
 80171ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	4a19      	ldr	r2, [pc, #100]	@ (8017224 <TIM_OC4_SetConfig+0xc0>)
 80171c0:	4293      	cmp	r3, r2
 80171c2:	d00f      	beq.n	80171e4 <TIM_OC4_SetConfig+0x80>
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	4a18      	ldr	r2, [pc, #96]	@ (8017228 <TIM_OC4_SetConfig+0xc4>)
 80171c8:	4293      	cmp	r3, r2
 80171ca:	d00b      	beq.n	80171e4 <TIM_OC4_SetConfig+0x80>
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	4a17      	ldr	r2, [pc, #92]	@ (801722c <TIM_OC4_SetConfig+0xc8>)
 80171d0:	4293      	cmp	r3, r2
 80171d2:	d007      	beq.n	80171e4 <TIM_OC4_SetConfig+0x80>
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	4a16      	ldr	r2, [pc, #88]	@ (8017230 <TIM_OC4_SetConfig+0xcc>)
 80171d8:	4293      	cmp	r3, r2
 80171da:	d003      	beq.n	80171e4 <TIM_OC4_SetConfig+0x80>
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	4a15      	ldr	r2, [pc, #84]	@ (8017234 <TIM_OC4_SetConfig+0xd0>)
 80171e0:	4293      	cmp	r3, r2
 80171e2:	d109      	bne.n	80171f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80171e4:	697b      	ldr	r3, [r7, #20]
 80171e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80171ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	695b      	ldr	r3, [r3, #20]
 80171f0:	019b      	lsls	r3, r3, #6
 80171f2:	697a      	ldr	r2, [r7, #20]
 80171f4:	4313      	orrs	r3, r2
 80171f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	697a      	ldr	r2, [r7, #20]
 80171fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	68fa      	ldr	r2, [r7, #12]
 8017202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	685a      	ldr	r2, [r3, #4]
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	693a      	ldr	r2, [r7, #16]
 8017210:	621a      	str	r2, [r3, #32]
}
 8017212:	bf00      	nop
 8017214:	371c      	adds	r7, #28
 8017216:	46bd      	mov	sp, r7
 8017218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721c:	4770      	bx	lr
 801721e:	bf00      	nop
 8017220:	feff8fff 	.word	0xfeff8fff
 8017224:	40010000 	.word	0x40010000
 8017228:	40010400 	.word	0x40010400
 801722c:	40014000 	.word	0x40014000
 8017230:	40014400 	.word	0x40014400
 8017234:	40014800 	.word	0x40014800

08017238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017238:	b480      	push	{r7}
 801723a:	b087      	sub	sp, #28
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
 8017240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	6a1b      	ldr	r3, [r3, #32]
 8017246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6a1b      	ldr	r3, [r3, #32]
 801724c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	685b      	ldr	r3, [r3, #4]
 8017258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017260:	68fa      	ldr	r2, [r7, #12]
 8017262:	4b21      	ldr	r3, [pc, #132]	@ (80172e8 <TIM_OC5_SetConfig+0xb0>)
 8017264:	4013      	ands	r3, r2
 8017266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	68fa      	ldr	r2, [r7, #12]
 801726e:	4313      	orrs	r3, r2
 8017270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8017272:	693b      	ldr	r3, [r7, #16]
 8017274:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8017278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	689b      	ldr	r3, [r3, #8]
 801727e:	041b      	lsls	r3, r3, #16
 8017280:	693a      	ldr	r2, [r7, #16]
 8017282:	4313      	orrs	r3, r2
 8017284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	4a18      	ldr	r2, [pc, #96]	@ (80172ec <TIM_OC5_SetConfig+0xb4>)
 801728a:	4293      	cmp	r3, r2
 801728c:	d00f      	beq.n	80172ae <TIM_OC5_SetConfig+0x76>
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	4a17      	ldr	r2, [pc, #92]	@ (80172f0 <TIM_OC5_SetConfig+0xb8>)
 8017292:	4293      	cmp	r3, r2
 8017294:	d00b      	beq.n	80172ae <TIM_OC5_SetConfig+0x76>
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	4a16      	ldr	r2, [pc, #88]	@ (80172f4 <TIM_OC5_SetConfig+0xbc>)
 801729a:	4293      	cmp	r3, r2
 801729c:	d007      	beq.n	80172ae <TIM_OC5_SetConfig+0x76>
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	4a15      	ldr	r2, [pc, #84]	@ (80172f8 <TIM_OC5_SetConfig+0xc0>)
 80172a2:	4293      	cmp	r3, r2
 80172a4:	d003      	beq.n	80172ae <TIM_OC5_SetConfig+0x76>
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	4a14      	ldr	r2, [pc, #80]	@ (80172fc <TIM_OC5_SetConfig+0xc4>)
 80172aa:	4293      	cmp	r3, r2
 80172ac:	d109      	bne.n	80172c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80172b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	695b      	ldr	r3, [r3, #20]
 80172ba:	021b      	lsls	r3, r3, #8
 80172bc:	697a      	ldr	r2, [r7, #20]
 80172be:	4313      	orrs	r3, r2
 80172c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	697a      	ldr	r2, [r7, #20]
 80172c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	68fa      	ldr	r2, [r7, #12]
 80172cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	685a      	ldr	r2, [r3, #4]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	693a      	ldr	r2, [r7, #16]
 80172da:	621a      	str	r2, [r3, #32]
}
 80172dc:	bf00      	nop
 80172de:	371c      	adds	r7, #28
 80172e0:	46bd      	mov	sp, r7
 80172e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e6:	4770      	bx	lr
 80172e8:	fffeff8f 	.word	0xfffeff8f
 80172ec:	40010000 	.word	0x40010000
 80172f0:	40010400 	.word	0x40010400
 80172f4:	40014000 	.word	0x40014000
 80172f8:	40014400 	.word	0x40014400
 80172fc:	40014800 	.word	0x40014800

08017300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017300:	b480      	push	{r7}
 8017302:	b087      	sub	sp, #28
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
 8017308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	6a1b      	ldr	r3, [r3, #32]
 801730e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	6a1b      	ldr	r3, [r3, #32]
 8017314:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017328:	68fa      	ldr	r2, [r7, #12]
 801732a:	4b22      	ldr	r3, [pc, #136]	@ (80173b4 <TIM_OC6_SetConfig+0xb4>)
 801732c:	4013      	ands	r3, r2
 801732e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017330:	683b      	ldr	r3, [r7, #0]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	021b      	lsls	r3, r3, #8
 8017336:	68fa      	ldr	r2, [r7, #12]
 8017338:	4313      	orrs	r3, r2
 801733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801733c:	693b      	ldr	r3, [r7, #16]
 801733e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	689b      	ldr	r3, [r3, #8]
 8017348:	051b      	lsls	r3, r3, #20
 801734a:	693a      	ldr	r2, [r7, #16]
 801734c:	4313      	orrs	r3, r2
 801734e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	4a19      	ldr	r2, [pc, #100]	@ (80173b8 <TIM_OC6_SetConfig+0xb8>)
 8017354:	4293      	cmp	r3, r2
 8017356:	d00f      	beq.n	8017378 <TIM_OC6_SetConfig+0x78>
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	4a18      	ldr	r2, [pc, #96]	@ (80173bc <TIM_OC6_SetConfig+0xbc>)
 801735c:	4293      	cmp	r3, r2
 801735e:	d00b      	beq.n	8017378 <TIM_OC6_SetConfig+0x78>
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	4a17      	ldr	r2, [pc, #92]	@ (80173c0 <TIM_OC6_SetConfig+0xc0>)
 8017364:	4293      	cmp	r3, r2
 8017366:	d007      	beq.n	8017378 <TIM_OC6_SetConfig+0x78>
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	4a16      	ldr	r2, [pc, #88]	@ (80173c4 <TIM_OC6_SetConfig+0xc4>)
 801736c:	4293      	cmp	r3, r2
 801736e:	d003      	beq.n	8017378 <TIM_OC6_SetConfig+0x78>
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	4a15      	ldr	r2, [pc, #84]	@ (80173c8 <TIM_OC6_SetConfig+0xc8>)
 8017374:	4293      	cmp	r3, r2
 8017376:	d109      	bne.n	801738c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017378:	697b      	ldr	r3, [r7, #20]
 801737a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801737e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	695b      	ldr	r3, [r3, #20]
 8017384:	029b      	lsls	r3, r3, #10
 8017386:	697a      	ldr	r2, [r7, #20]
 8017388:	4313      	orrs	r3, r2
 801738a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	697a      	ldr	r2, [r7, #20]
 8017390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	68fa      	ldr	r2, [r7, #12]
 8017396:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017398:	683b      	ldr	r3, [r7, #0]
 801739a:	685a      	ldr	r2, [r3, #4]
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	693a      	ldr	r2, [r7, #16]
 80173a4:	621a      	str	r2, [r3, #32]
}
 80173a6:	bf00      	nop
 80173a8:	371c      	adds	r7, #28
 80173aa:	46bd      	mov	sp, r7
 80173ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop
 80173b4:	feff8fff 	.word	0xfeff8fff
 80173b8:	40010000 	.word	0x40010000
 80173bc:	40010400 	.word	0x40010400
 80173c0:	40014000 	.word	0x40014000
 80173c4:	40014400 	.word	0x40014400
 80173c8:	40014800 	.word	0x40014800

080173cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80173cc:	b480      	push	{r7}
 80173ce:	b087      	sub	sp, #28
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	607a      	str	r2, [r7, #4]
 80173d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	6a1b      	ldr	r3, [r3, #32]
 80173de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	6a1b      	ldr	r3, [r3, #32]
 80173e4:	f023 0201 	bic.w	r2, r3, #1
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	699b      	ldr	r3, [r3, #24]
 80173f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	4a2c      	ldr	r2, [pc, #176]	@ (80174a8 <TIM_TI1_SetConfig+0xdc>)
 80173f6:	4293      	cmp	r3, r2
 80173f8:	d023      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017400:	d01f      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	4a29      	ldr	r2, [pc, #164]	@ (80174ac <TIM_TI1_SetConfig+0xe0>)
 8017406:	4293      	cmp	r3, r2
 8017408:	d01b      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	4a28      	ldr	r2, [pc, #160]	@ (80174b0 <TIM_TI1_SetConfig+0xe4>)
 801740e:	4293      	cmp	r3, r2
 8017410:	d017      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	4a27      	ldr	r2, [pc, #156]	@ (80174b4 <TIM_TI1_SetConfig+0xe8>)
 8017416:	4293      	cmp	r3, r2
 8017418:	d013      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	4a26      	ldr	r2, [pc, #152]	@ (80174b8 <TIM_TI1_SetConfig+0xec>)
 801741e:	4293      	cmp	r3, r2
 8017420:	d00f      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	4a25      	ldr	r2, [pc, #148]	@ (80174bc <TIM_TI1_SetConfig+0xf0>)
 8017426:	4293      	cmp	r3, r2
 8017428:	d00b      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	4a24      	ldr	r2, [pc, #144]	@ (80174c0 <TIM_TI1_SetConfig+0xf4>)
 801742e:	4293      	cmp	r3, r2
 8017430:	d007      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	4a23      	ldr	r2, [pc, #140]	@ (80174c4 <TIM_TI1_SetConfig+0xf8>)
 8017436:	4293      	cmp	r3, r2
 8017438:	d003      	beq.n	8017442 <TIM_TI1_SetConfig+0x76>
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	4a22      	ldr	r2, [pc, #136]	@ (80174c8 <TIM_TI1_SetConfig+0xfc>)
 801743e:	4293      	cmp	r3, r2
 8017440:	d101      	bne.n	8017446 <TIM_TI1_SetConfig+0x7a>
 8017442:	2301      	movs	r3, #1
 8017444:	e000      	b.n	8017448 <TIM_TI1_SetConfig+0x7c>
 8017446:	2300      	movs	r3, #0
 8017448:	2b00      	cmp	r3, #0
 801744a:	d008      	beq.n	801745e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801744c:	697b      	ldr	r3, [r7, #20]
 801744e:	f023 0303 	bic.w	r3, r3, #3
 8017452:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8017454:	697a      	ldr	r2, [r7, #20]
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	4313      	orrs	r3, r2
 801745a:	617b      	str	r3, [r7, #20]
 801745c:	e003      	b.n	8017466 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801745e:	697b      	ldr	r3, [r7, #20]
 8017460:	f043 0301 	orr.w	r3, r3, #1
 8017464:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017466:	697b      	ldr	r3, [r7, #20]
 8017468:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801746c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	011b      	lsls	r3, r3, #4
 8017472:	b2db      	uxtb	r3, r3
 8017474:	697a      	ldr	r2, [r7, #20]
 8017476:	4313      	orrs	r3, r2
 8017478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801747a:	693b      	ldr	r3, [r7, #16]
 801747c:	f023 030a 	bic.w	r3, r3, #10
 8017480:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	f003 030a 	and.w	r3, r3, #10
 8017488:	693a      	ldr	r2, [r7, #16]
 801748a:	4313      	orrs	r3, r2
 801748c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	697a      	ldr	r2, [r7, #20]
 8017492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	693a      	ldr	r2, [r7, #16]
 8017498:	621a      	str	r2, [r3, #32]
}
 801749a:	bf00      	nop
 801749c:	371c      	adds	r7, #28
 801749e:	46bd      	mov	sp, r7
 80174a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a4:	4770      	bx	lr
 80174a6:	bf00      	nop
 80174a8:	40010000 	.word	0x40010000
 80174ac:	40000400 	.word	0x40000400
 80174b0:	40000800 	.word	0x40000800
 80174b4:	40000c00 	.word	0x40000c00
 80174b8:	40010400 	.word	0x40010400
 80174bc:	40001800 	.word	0x40001800
 80174c0:	40014000 	.word	0x40014000
 80174c4:	4000e000 	.word	0x4000e000
 80174c8:	4000e400 	.word	0x4000e400

080174cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80174cc:	b480      	push	{r7}
 80174ce:	b087      	sub	sp, #28
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	60f8      	str	r0, [r7, #12]
 80174d4:	60b9      	str	r1, [r7, #8]
 80174d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	6a1b      	ldr	r3, [r3, #32]
 80174dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	6a1b      	ldr	r3, [r3, #32]
 80174e2:	f023 0201 	bic.w	r2, r3, #1
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	699b      	ldr	r3, [r3, #24]
 80174ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80174f0:	693b      	ldr	r3, [r7, #16]
 80174f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80174f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	011b      	lsls	r3, r3, #4
 80174fc:	693a      	ldr	r2, [r7, #16]
 80174fe:	4313      	orrs	r3, r2
 8017500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017502:	697b      	ldr	r3, [r7, #20]
 8017504:	f023 030a 	bic.w	r3, r3, #10
 8017508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801750a:	697a      	ldr	r2, [r7, #20]
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	4313      	orrs	r3, r2
 8017510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	693a      	ldr	r2, [r7, #16]
 8017516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	697a      	ldr	r2, [r7, #20]
 801751c:	621a      	str	r2, [r3, #32]
}
 801751e:	bf00      	nop
 8017520:	371c      	adds	r7, #28
 8017522:	46bd      	mov	sp, r7
 8017524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017528:	4770      	bx	lr

0801752a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801752a:	b480      	push	{r7}
 801752c:	b087      	sub	sp, #28
 801752e:	af00      	add	r7, sp, #0
 8017530:	60f8      	str	r0, [r7, #12]
 8017532:	60b9      	str	r1, [r7, #8]
 8017534:	607a      	str	r2, [r7, #4]
 8017536:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	6a1b      	ldr	r3, [r3, #32]
 801753c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	6a1b      	ldr	r3, [r3, #32]
 8017542:	f023 0210 	bic.w	r2, r3, #16
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	699b      	ldr	r3, [r3, #24]
 801754e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	021b      	lsls	r3, r3, #8
 801755c:	693a      	ldr	r2, [r7, #16]
 801755e:	4313      	orrs	r3, r2
 8017560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	031b      	lsls	r3, r3, #12
 801756e:	b29b      	uxth	r3, r3
 8017570:	693a      	ldr	r2, [r7, #16]
 8017572:	4313      	orrs	r3, r2
 8017574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801757c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	011b      	lsls	r3, r3, #4
 8017582:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8017586:	697a      	ldr	r2, [r7, #20]
 8017588:	4313      	orrs	r3, r2
 801758a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	693a      	ldr	r2, [r7, #16]
 8017590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	697a      	ldr	r2, [r7, #20]
 8017596:	621a      	str	r2, [r3, #32]
}
 8017598:	bf00      	nop
 801759a:	371c      	adds	r7, #28
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr

080175a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80175a4:	b480      	push	{r7}
 80175a6:	b087      	sub	sp, #28
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	60f8      	str	r0, [r7, #12]
 80175ac:	60b9      	str	r1, [r7, #8]
 80175ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	6a1b      	ldr	r3, [r3, #32]
 80175b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	6a1b      	ldr	r3, [r3, #32]
 80175ba:	f023 0210 	bic.w	r2, r3, #16
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	699b      	ldr	r3, [r3, #24]
 80175c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80175c8:	693b      	ldr	r3, [r7, #16]
 80175ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80175ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	031b      	lsls	r3, r3, #12
 80175d4:	693a      	ldr	r2, [r7, #16]
 80175d6:	4313      	orrs	r3, r2
 80175d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80175e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80175e2:	68bb      	ldr	r3, [r7, #8]
 80175e4:	011b      	lsls	r3, r3, #4
 80175e6:	697a      	ldr	r2, [r7, #20]
 80175e8:	4313      	orrs	r3, r2
 80175ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	693a      	ldr	r2, [r7, #16]
 80175f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	697a      	ldr	r2, [r7, #20]
 80175f6:	621a      	str	r2, [r3, #32]
}
 80175f8:	bf00      	nop
 80175fa:	371c      	adds	r7, #28
 80175fc:	46bd      	mov	sp, r7
 80175fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017602:	4770      	bx	lr

08017604 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017604:	b480      	push	{r7}
 8017606:	b087      	sub	sp, #28
 8017608:	af00      	add	r7, sp, #0
 801760a:	60f8      	str	r0, [r7, #12]
 801760c:	60b9      	str	r1, [r7, #8]
 801760e:	607a      	str	r2, [r7, #4]
 8017610:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	6a1b      	ldr	r3, [r3, #32]
 8017616:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	6a1b      	ldr	r3, [r3, #32]
 801761c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	69db      	ldr	r3, [r3, #28]
 8017628:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801762a:	693b      	ldr	r3, [r7, #16]
 801762c:	f023 0303 	bic.w	r3, r3, #3
 8017630:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017632:	693a      	ldr	r2, [r7, #16]
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	4313      	orrs	r3, r2
 8017638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017640:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	011b      	lsls	r3, r3, #4
 8017646:	b2db      	uxtb	r3, r3
 8017648:	693a      	ldr	r2, [r7, #16]
 801764a:	4313      	orrs	r3, r2
 801764c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017654:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017656:	68bb      	ldr	r3, [r7, #8]
 8017658:	021b      	lsls	r3, r3, #8
 801765a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801765e:	697a      	ldr	r2, [r7, #20]
 8017660:	4313      	orrs	r3, r2
 8017662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	693a      	ldr	r2, [r7, #16]
 8017668:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	697a      	ldr	r2, [r7, #20]
 801766e:	621a      	str	r2, [r3, #32]
}
 8017670:	bf00      	nop
 8017672:	371c      	adds	r7, #28
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr

0801767c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801767c:	b480      	push	{r7}
 801767e:	b087      	sub	sp, #28
 8017680:	af00      	add	r7, sp, #0
 8017682:	60f8      	str	r0, [r7, #12]
 8017684:	60b9      	str	r1, [r7, #8]
 8017686:	607a      	str	r2, [r7, #4]
 8017688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	6a1b      	ldr	r3, [r3, #32]
 801768e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	6a1b      	ldr	r3, [r3, #32]
 8017694:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	69db      	ldr	r3, [r3, #28]
 80176a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80176a2:	693b      	ldr	r3, [r7, #16]
 80176a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80176a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	021b      	lsls	r3, r3, #8
 80176ae:	693a      	ldr	r2, [r7, #16]
 80176b0:	4313      	orrs	r3, r2
 80176b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80176b4:	693b      	ldr	r3, [r7, #16]
 80176b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80176ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	031b      	lsls	r3, r3, #12
 80176c0:	b29b      	uxth	r3, r3
 80176c2:	693a      	ldr	r2, [r7, #16]
 80176c4:	4313      	orrs	r3, r2
 80176c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80176c8:	697b      	ldr	r3, [r7, #20]
 80176ca:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80176ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	031b      	lsls	r3, r3, #12
 80176d4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80176d8:	697a      	ldr	r2, [r7, #20]
 80176da:	4313      	orrs	r3, r2
 80176dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	693a      	ldr	r2, [r7, #16]
 80176e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	697a      	ldr	r2, [r7, #20]
 80176e8:	621a      	str	r2, [r3, #32]
}
 80176ea:	bf00      	nop
 80176ec:	371c      	adds	r7, #28
 80176ee:	46bd      	mov	sp, r7
 80176f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f4:	4770      	bx	lr
	...

080176f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80176f8:	b480      	push	{r7}
 80176fa:	b085      	sub	sp, #20
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	689b      	ldr	r3, [r3, #8]
 8017706:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017708:	68fa      	ldr	r2, [r7, #12]
 801770a:	4b09      	ldr	r3, [pc, #36]	@ (8017730 <TIM_ITRx_SetConfig+0x38>)
 801770c:	4013      	ands	r3, r2
 801770e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017710:	683a      	ldr	r2, [r7, #0]
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	4313      	orrs	r3, r2
 8017716:	f043 0307 	orr.w	r3, r3, #7
 801771a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	68fa      	ldr	r2, [r7, #12]
 8017720:	609a      	str	r2, [r3, #8]
}
 8017722:	bf00      	nop
 8017724:	3714      	adds	r7, #20
 8017726:	46bd      	mov	sp, r7
 8017728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772c:	4770      	bx	lr
 801772e:	bf00      	nop
 8017730:	ffcfff8f 	.word	0xffcfff8f

08017734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017734:	b480      	push	{r7}
 8017736:	b087      	sub	sp, #28
 8017738:	af00      	add	r7, sp, #0
 801773a:	60f8      	str	r0, [r7, #12]
 801773c:	60b9      	str	r1, [r7, #8]
 801773e:	607a      	str	r2, [r7, #4]
 8017740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	689b      	ldr	r3, [r3, #8]
 8017746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017748:	697b      	ldr	r3, [r7, #20]
 801774a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801774e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017750:	683b      	ldr	r3, [r7, #0]
 8017752:	021a      	lsls	r2, r3, #8
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	431a      	orrs	r2, r3
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	4313      	orrs	r3, r2
 801775c:	697a      	ldr	r2, [r7, #20]
 801775e:	4313      	orrs	r3, r2
 8017760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	697a      	ldr	r2, [r7, #20]
 8017766:	609a      	str	r2, [r3, #8]
}
 8017768:	bf00      	nop
 801776a:	371c      	adds	r7, #28
 801776c:	46bd      	mov	sp, r7
 801776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017772:	4770      	bx	lr

08017774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017774:	b480      	push	{r7}
 8017776:	b087      	sub	sp, #28
 8017778:	af00      	add	r7, sp, #0
 801777a:	60f8      	str	r0, [r7, #12]
 801777c:	60b9      	str	r1, [r7, #8]
 801777e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	f003 031f 	and.w	r3, r3, #31
 8017786:	2201      	movs	r2, #1
 8017788:	fa02 f303 	lsl.w	r3, r2, r3
 801778c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	6a1a      	ldr	r2, [r3, #32]
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	43db      	mvns	r3, r3
 8017796:	401a      	ands	r2, r3
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	6a1a      	ldr	r2, [r3, #32]
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	f003 031f 	and.w	r3, r3, #31
 80177a6:	6879      	ldr	r1, [r7, #4]
 80177a8:	fa01 f303 	lsl.w	r3, r1, r3
 80177ac:	431a      	orrs	r2, r3
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	621a      	str	r2, [r3, #32]
}
 80177b2:	bf00      	nop
 80177b4:	371c      	adds	r7, #28
 80177b6:	46bd      	mov	sp, r7
 80177b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177bc:	4770      	bx	lr
	...

080177c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80177c0:	b480      	push	{r7}
 80177c2:	b085      	sub	sp, #20
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80177d0:	2b01      	cmp	r3, #1
 80177d2:	d101      	bne.n	80177d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80177d4:	2302      	movs	r3, #2
 80177d6:	e077      	b.n	80178c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2201      	movs	r2, #1
 80177dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	2202      	movs	r2, #2
 80177e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	685b      	ldr	r3, [r3, #4]
 80177ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	689b      	ldr	r3, [r3, #8]
 80177f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	4a35      	ldr	r2, [pc, #212]	@ (80178d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80177fe:	4293      	cmp	r3, r2
 8017800:	d004      	beq.n	801780c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	4a34      	ldr	r2, [pc, #208]	@ (80178d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017808:	4293      	cmp	r3, r2
 801780a:	d108      	bne.n	801781e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017812:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	685b      	ldr	r3, [r3, #4]
 8017818:	68fa      	ldr	r2, [r7, #12]
 801781a:	4313      	orrs	r3, r2
 801781c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017824:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017826:	683b      	ldr	r3, [r7, #0]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	68fa      	ldr	r2, [r7, #12]
 801782c:	4313      	orrs	r3, r2
 801782e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	68fa      	ldr	r2, [r7, #12]
 8017836:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	4a25      	ldr	r2, [pc, #148]	@ (80178d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801783e:	4293      	cmp	r3, r2
 8017840:	d02c      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801784a:	d027      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	4a22      	ldr	r2, [pc, #136]	@ (80178dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017852:	4293      	cmp	r3, r2
 8017854:	d022      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	4a21      	ldr	r2, [pc, #132]	@ (80178e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801785c:	4293      	cmp	r3, r2
 801785e:	d01d      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	4a1f      	ldr	r2, [pc, #124]	@ (80178e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017866:	4293      	cmp	r3, r2
 8017868:	d018      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4a1a      	ldr	r2, [pc, #104]	@ (80178d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017870:	4293      	cmp	r3, r2
 8017872:	d013      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	4a1b      	ldr	r2, [pc, #108]	@ (80178e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801787a:	4293      	cmp	r3, r2
 801787c:	d00e      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	4a1a      	ldr	r2, [pc, #104]	@ (80178ec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017884:	4293      	cmp	r3, r2
 8017886:	d009      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	4a18      	ldr	r2, [pc, #96]	@ (80178f0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801788e:	4293      	cmp	r3, r2
 8017890:	d004      	beq.n	801789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	4a17      	ldr	r2, [pc, #92]	@ (80178f4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017898:	4293      	cmp	r3, r2
 801789a:	d10c      	bne.n	80178b6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80178a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	689b      	ldr	r3, [r3, #8]
 80178a8:	68ba      	ldr	r2, [r7, #8]
 80178aa:	4313      	orrs	r3, r2
 80178ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	68ba      	ldr	r2, [r7, #8]
 80178b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	2201      	movs	r2, #1
 80178ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2200      	movs	r2, #0
 80178c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80178c6:	2300      	movs	r3, #0
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3714      	adds	r7, #20
 80178cc:	46bd      	mov	sp, r7
 80178ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d2:	4770      	bx	lr
 80178d4:	40010000 	.word	0x40010000
 80178d8:	40010400 	.word	0x40010400
 80178dc:	40000400 	.word	0x40000400
 80178e0:	40000800 	.word	0x40000800
 80178e4:	40000c00 	.word	0x40000c00
 80178e8:	40001800 	.word	0x40001800
 80178ec:	40014000 	.word	0x40014000
 80178f0:	4000e000 	.word	0x4000e000
 80178f4:	4000e400 	.word	0x4000e400

080178f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80178f8:	b480      	push	{r7}
 80178fa:	b085      	sub	sp, #20
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
 8017900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017902:	2300      	movs	r3, #0
 8017904:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801790c:	2b01      	cmp	r3, #1
 801790e:	d101      	bne.n	8017914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017910:	2302      	movs	r3, #2
 8017912:	e073      	b.n	80179fc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2201      	movs	r2, #1
 8017918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	68db      	ldr	r3, [r3, #12]
 8017926:	4313      	orrs	r3, r2
 8017928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	689b      	ldr	r3, [r3, #8]
 8017934:	4313      	orrs	r3, r2
 8017936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	685b      	ldr	r3, [r3, #4]
 8017942:	4313      	orrs	r3, r2
 8017944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	4313      	orrs	r3, r2
 8017952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	691b      	ldr	r3, [r3, #16]
 801795e:	4313      	orrs	r3, r2
 8017960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	695b      	ldr	r3, [r3, #20]
 801796c:	4313      	orrs	r3, r2
 801796e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801797a:	4313      	orrs	r3, r2
 801797c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017984:	683b      	ldr	r3, [r7, #0]
 8017986:	699b      	ldr	r3, [r3, #24]
 8017988:	041b      	lsls	r3, r3, #16
 801798a:	4313      	orrs	r3, r2
 801798c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	69db      	ldr	r3, [r3, #28]
 8017998:	4313      	orrs	r3, r2
 801799a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	4a19      	ldr	r2, [pc, #100]	@ (8017a08 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80179a2:	4293      	cmp	r3, r2
 80179a4:	d004      	beq.n	80179b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	4a18      	ldr	r2, [pc, #96]	@ (8017a0c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80179ac:	4293      	cmp	r3, r2
 80179ae:	d11c      	bne.n	80179ea <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80179b6:	683b      	ldr	r3, [r7, #0]
 80179b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179ba:	051b      	lsls	r3, r3, #20
 80179bc:	4313      	orrs	r3, r2
 80179be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	6a1b      	ldr	r3, [r3, #32]
 80179ca:	4313      	orrs	r3, r2
 80179cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80179d4:	683b      	ldr	r3, [r7, #0]
 80179d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179d8:	4313      	orrs	r3, r2
 80179da:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80179e2:	683b      	ldr	r3, [r7, #0]
 80179e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179e6:	4313      	orrs	r3, r2
 80179e8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	68fa      	ldr	r2, [r7, #12]
 80179f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2200      	movs	r2, #0
 80179f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80179fa:	2300      	movs	r3, #0
}
 80179fc:	4618      	mov	r0, r3
 80179fe:	3714      	adds	r7, #20
 8017a00:	46bd      	mov	sp, r7
 8017a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a06:	4770      	bx	lr
 8017a08:	40010000 	.word	0x40010000
 8017a0c:	40010400 	.word	0x40010400

08017a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017a10:	b480      	push	{r7}
 8017a12:	b083      	sub	sp, #12
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017a18:	bf00      	nop
 8017a1a:	370c      	adds	r7, #12
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a22:	4770      	bx	lr

08017a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017a24:	b480      	push	{r7}
 8017a26:	b083      	sub	sp, #12
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017a2c:	bf00      	nop
 8017a2e:	370c      	adds	r7, #12
 8017a30:	46bd      	mov	sp, r7
 8017a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a36:	4770      	bx	lr

08017a38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017a38:	b480      	push	{r7}
 8017a3a:	b083      	sub	sp, #12
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017a40:	bf00      	nop
 8017a42:	370c      	adds	r7, #12
 8017a44:	46bd      	mov	sp, r7
 8017a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4a:	4770      	bx	lr

08017a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d101      	bne.n	8017a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	e042      	b.n	8017ae4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d106      	bne.n	8017a76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017a70:	6878      	ldr	r0, [r7, #4]
 8017a72:	f7f0 fedf 	bl	8008834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	2224      	movs	r2, #36	@ 0x24
 8017a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	681a      	ldr	r2, [r3, #0]
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f022 0201 	bic.w	r2, r2, #1
 8017a8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d002      	beq.n	8017a9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017a96:	6878      	ldr	r0, [r7, #4]
 8017a98:	f001 fbf8 	bl	801928c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f000 fd89 	bl	80185b4 <UART_SetConfig>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	2b01      	cmp	r3, #1
 8017aa6:	d101      	bne.n	8017aac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	e01b      	b.n	8017ae4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	685a      	ldr	r2, [r3, #4]
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	689a      	ldr	r2, [r3, #8]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	681a      	ldr	r2, [r3, #0]
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	f042 0201 	orr.w	r2, r2, #1
 8017ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f001 fc77 	bl	80193d0 <UART_CheckIdleState>
 8017ae2:	4603      	mov	r3, r0
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	3708      	adds	r7, #8
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	bd80      	pop	{r7, pc}

08017aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b08a      	sub	sp, #40	@ 0x28
 8017af0:	af02      	add	r7, sp, #8
 8017af2:	60f8      	str	r0, [r7, #12]
 8017af4:	60b9      	str	r1, [r7, #8]
 8017af6:	603b      	str	r3, [r7, #0]
 8017af8:	4613      	mov	r3, r2
 8017afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b02:	2b20      	cmp	r3, #32
 8017b04:	d17b      	bne.n	8017bfe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017b06:	68bb      	ldr	r3, [r7, #8]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d002      	beq.n	8017b12 <HAL_UART_Transmit+0x26>
 8017b0c:	88fb      	ldrh	r3, [r7, #6]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d101      	bne.n	8017b16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017b12:	2301      	movs	r3, #1
 8017b14:	e074      	b.n	8017c00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	2200      	movs	r2, #0
 8017b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	2221      	movs	r2, #33	@ 0x21
 8017b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017b26:	f7f0 ffa7 	bl	8008a78 <HAL_GetTick>
 8017b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	88fa      	ldrh	r2, [r7, #6]
 8017b30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	88fa      	ldrh	r2, [r7, #6]
 8017b38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	689b      	ldr	r3, [r3, #8]
 8017b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017b44:	d108      	bne.n	8017b58 <HAL_UART_Transmit+0x6c>
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	691b      	ldr	r3, [r3, #16]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d104      	bne.n	8017b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017b52:	68bb      	ldr	r3, [r7, #8]
 8017b54:	61bb      	str	r3, [r7, #24]
 8017b56:	e003      	b.n	8017b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017b60:	e030      	b.n	8017bc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	9300      	str	r3, [sp, #0]
 8017b66:	697b      	ldr	r3, [r7, #20]
 8017b68:	2200      	movs	r2, #0
 8017b6a:	2180      	movs	r1, #128	@ 0x80
 8017b6c:	68f8      	ldr	r0, [r7, #12]
 8017b6e:	f001 fcd9 	bl	8019524 <UART_WaitOnFlagUntilTimeout>
 8017b72:	4603      	mov	r3, r0
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d005      	beq.n	8017b84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	2220      	movs	r2, #32
 8017b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017b80:	2303      	movs	r3, #3
 8017b82:	e03d      	b.n	8017c00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017b84:	69fb      	ldr	r3, [r7, #28]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d10b      	bne.n	8017ba2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017b8a:	69bb      	ldr	r3, [r7, #24]
 8017b8c:	881b      	ldrh	r3, [r3, #0]
 8017b8e:	461a      	mov	r2, r3
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017b98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017b9a:	69bb      	ldr	r3, [r7, #24]
 8017b9c:	3302      	adds	r3, #2
 8017b9e:	61bb      	str	r3, [r7, #24]
 8017ba0:	e007      	b.n	8017bb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017ba2:	69fb      	ldr	r3, [r7, #28]
 8017ba4:	781a      	ldrb	r2, [r3, #0]
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017bac:	69fb      	ldr	r3, [r7, #28]
 8017bae:	3301      	adds	r3, #1
 8017bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017bb8:	b29b      	uxth	r3, r3
 8017bba:	3b01      	subs	r3, #1
 8017bbc:	b29a      	uxth	r2, r3
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017bca:	b29b      	uxth	r3, r3
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d1c8      	bne.n	8017b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	9300      	str	r3, [sp, #0]
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	2140      	movs	r1, #64	@ 0x40
 8017bda:	68f8      	ldr	r0, [r7, #12]
 8017bdc:	f001 fca2 	bl	8019524 <UART_WaitOnFlagUntilTimeout>
 8017be0:	4603      	mov	r3, r0
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d005      	beq.n	8017bf2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	2220      	movs	r2, #32
 8017bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017bee:	2303      	movs	r3, #3
 8017bf0:	e006      	b.n	8017c00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	2220      	movs	r2, #32
 8017bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	e000      	b.n	8017c00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017bfe:	2302      	movs	r3, #2
  }
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	3720      	adds	r7, #32
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}

08017c08 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017c08:	b480      	push	{r7}
 8017c0a:	b091      	sub	sp, #68	@ 0x44
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	60f8      	str	r0, [r7, #12]
 8017c10:	60b9      	str	r1, [r7, #8]
 8017c12:	4613      	mov	r3, r2
 8017c14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017c1c:	2b20      	cmp	r3, #32
 8017c1e:	d178      	bne.n	8017d12 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017c20:	68bb      	ldr	r3, [r7, #8]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d002      	beq.n	8017c2c <HAL_UART_Transmit_IT+0x24>
 8017c26:	88fb      	ldrh	r3, [r7, #6]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d101      	bne.n	8017c30 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8017c2c:	2301      	movs	r3, #1
 8017c2e:	e071      	b.n	8017d14 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	68ba      	ldr	r2, [r7, #8]
 8017c34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	88fa      	ldrh	r2, [r7, #6]
 8017c3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	88fa      	ldrh	r2, [r7, #6]
 8017c42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	2200      	movs	r2, #0
 8017c4a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	2200      	movs	r2, #0
 8017c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	2221      	movs	r2, #33	@ 0x21
 8017c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017c64:	d12a      	bne.n	8017cbc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	689b      	ldr	r3, [r3, #8]
 8017c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017c6e:	d107      	bne.n	8017c80 <HAL_UART_Transmit_IT+0x78>
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	691b      	ldr	r3, [r3, #16]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d103      	bne.n	8017c80 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	4a29      	ldr	r2, [pc, #164]	@ (8017d20 <HAL_UART_Transmit_IT+0x118>)
 8017c7c:	679a      	str	r2, [r3, #120]	@ 0x78
 8017c7e:	e002      	b.n	8017c86 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	4a28      	ldr	r2, [pc, #160]	@ (8017d24 <HAL_UART_Transmit_IT+0x11c>)
 8017c84:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	3308      	adds	r3, #8
 8017c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c90:	e853 3f00 	ldrex	r3, [r3]
 8017c94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	3308      	adds	r3, #8
 8017ca4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017ca6:	637a      	str	r2, [r7, #52]	@ 0x34
 8017ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017cae:	e841 2300 	strex	r3, r2, [r1]
 8017cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8017cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d1e5      	bne.n	8017c86 <HAL_UART_Transmit_IT+0x7e>
 8017cba:	e028      	b.n	8017d0e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	689b      	ldr	r3, [r3, #8]
 8017cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017cc4:	d107      	bne.n	8017cd6 <HAL_UART_Transmit_IT+0xce>
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	691b      	ldr	r3, [r3, #16]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d103      	bne.n	8017cd6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	4a15      	ldr	r2, [pc, #84]	@ (8017d28 <HAL_UART_Transmit_IT+0x120>)
 8017cd2:	679a      	str	r2, [r3, #120]	@ 0x78
 8017cd4:	e002      	b.n	8017cdc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	4a14      	ldr	r2, [pc, #80]	@ (8017d2c <HAL_UART_Transmit_IT+0x124>)
 8017cda:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	e853 3f00 	ldrex	r3, [r3]
 8017ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017cfa:	623b      	str	r3, [r7, #32]
 8017cfc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cfe:	69f9      	ldr	r1, [r7, #28]
 8017d00:	6a3a      	ldr	r2, [r7, #32]
 8017d02:	e841 2300 	strex	r3, r2, [r1]
 8017d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8017d08:	69bb      	ldr	r3, [r7, #24]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d1e6      	bne.n	8017cdc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	e000      	b.n	8017d14 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8017d12:	2302      	movs	r3, #2
  }
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3744      	adds	r7, #68	@ 0x44
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1e:	4770      	bx	lr
 8017d20:	08019b8f 	.word	0x08019b8f
 8017d24:	08019aaf 	.word	0x08019aaf
 8017d28:	080199ed 	.word	0x080199ed
 8017d2c:	08019935 	.word	0x08019935

08017d30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b08a      	sub	sp, #40	@ 0x28
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	60f8      	str	r0, [r7, #12]
 8017d38:	60b9      	str	r1, [r7, #8]
 8017d3a:	4613      	mov	r3, r2
 8017d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017d44:	2b20      	cmp	r3, #32
 8017d46:	d137      	bne.n	8017db8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d002      	beq.n	8017d54 <HAL_UART_Receive_IT+0x24>
 8017d4e:	88fb      	ldrh	r3, [r7, #6]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d101      	bne.n	8017d58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8017d54:	2301      	movs	r3, #1
 8017d56:	e030      	b.n	8017dba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	4a18      	ldr	r2, [pc, #96]	@ (8017dc4 <HAL_UART_Receive_IT+0x94>)
 8017d64:	4293      	cmp	r3, r2
 8017d66:	d01f      	beq.n	8017da8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d018      	beq.n	8017da8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	e853 3f00 	ldrex	r3, [r3]
 8017d82:	613b      	str	r3, [r7, #16]
   return(result);
 8017d84:	693b      	ldr	r3, [r7, #16]
 8017d86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	461a      	mov	r2, r3
 8017d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d94:	623b      	str	r3, [r7, #32]
 8017d96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d98:	69f9      	ldr	r1, [r7, #28]
 8017d9a:	6a3a      	ldr	r2, [r7, #32]
 8017d9c:	e841 2300 	strex	r3, r2, [r1]
 8017da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8017da2:	69bb      	ldr	r3, [r7, #24]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d1e6      	bne.n	8017d76 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017da8:	88fb      	ldrh	r3, [r7, #6]
 8017daa:	461a      	mov	r2, r3
 8017dac:	68b9      	ldr	r1, [r7, #8]
 8017dae:	68f8      	ldr	r0, [r7, #12]
 8017db0:	f001 fc26 	bl	8019600 <UART_Start_Receive_IT>
 8017db4:	4603      	mov	r3, r0
 8017db6:	e000      	b.n	8017dba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017db8:	2302      	movs	r3, #2
  }
}
 8017dba:	4618      	mov	r0, r3
 8017dbc:	3728      	adds	r7, #40	@ 0x28
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	bd80      	pop	{r7, pc}
 8017dc2:	bf00      	nop
 8017dc4:	58000c00 	.word	0x58000c00

08017dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b0ba      	sub	sp, #232	@ 0xe8
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	69db      	ldr	r3, [r3, #28]
 8017dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	689b      	ldr	r3, [r3, #8]
 8017dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017dee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017df2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8017df6:	4013      	ands	r3, r2
 8017df8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8017dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d11b      	bne.n	8017e3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017e08:	f003 0320 	and.w	r3, r3, #32
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d015      	beq.n	8017e3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017e14:	f003 0320 	and.w	r3, r3, #32
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d105      	bne.n	8017e28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d009      	beq.n	8017e3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f000 8393 	beq.w	8018558 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	4798      	blx	r3
      }
      return;
 8017e3a:	e38d      	b.n	8018558 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	f000 8123 	beq.w	801808c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017e46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8018080 <HAL_UART_IRQHandler+0x2b8>)
 8017e4c:	4013      	ands	r3, r2
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d106      	bne.n	8017e60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017e56:	4b8b      	ldr	r3, [pc, #556]	@ (8018084 <HAL_UART_IRQHandler+0x2bc>)
 8017e58:	4013      	ands	r3, r2
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	f000 8116 	beq.w	801808c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017e64:	f003 0301 	and.w	r3, r3, #1
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d011      	beq.n	8017e90 <HAL_UART_IRQHandler+0xc8>
 8017e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d00b      	beq.n	8017e90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	2201      	movs	r2, #1
 8017e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e86:	f043 0201 	orr.w	r2, r3, #1
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017e94:	f003 0302 	and.w	r3, r3, #2
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d011      	beq.n	8017ec0 <HAL_UART_IRQHandler+0xf8>
 8017e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ea0:	f003 0301 	and.w	r3, r3, #1
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d00b      	beq.n	8017ec0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	2202      	movs	r2, #2
 8017eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017eb6:	f043 0204 	orr.w	r2, r3, #4
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ec4:	f003 0304 	and.w	r3, r3, #4
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d011      	beq.n	8017ef0 <HAL_UART_IRQHandler+0x128>
 8017ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ed0:	f003 0301 	and.w	r3, r3, #1
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d00b      	beq.n	8017ef0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	2204      	movs	r2, #4
 8017ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ee6:	f043 0202 	orr.w	r2, r3, #2
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ef4:	f003 0308 	and.w	r3, r3, #8
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d017      	beq.n	8017f2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f00:	f003 0320 	and.w	r3, r3, #32
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d105      	bne.n	8017f14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017f08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8018080 <HAL_UART_IRQHandler+0x2b8>)
 8017f0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d00b      	beq.n	8017f2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	2208      	movs	r2, #8
 8017f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f22:	f043 0208 	orr.w	r2, r3, #8
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d012      	beq.n	8017f5e <HAL_UART_IRQHandler+0x196>
 8017f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d00c      	beq.n	8017f5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f54:	f043 0220 	orr.w	r2, r3, #32
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	f000 82f9 	beq.w	801855c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f6e:	f003 0320 	and.w	r3, r3, #32
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d013      	beq.n	8017f9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f7a:	f003 0320 	and.w	r3, r3, #32
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d105      	bne.n	8017f8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d007      	beq.n	8017f9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d003      	beq.n	8017f9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f9a:	6878      	ldr	r0, [r7, #4]
 8017f9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	689b      	ldr	r3, [r3, #8]
 8017fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017fb2:	2b40      	cmp	r3, #64	@ 0x40
 8017fb4:	d005      	beq.n	8017fc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017fba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d054      	beq.n	801806c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f001 fc3e 	bl	8019844 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	689b      	ldr	r3, [r3, #8]
 8017fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017fd2:	2b40      	cmp	r3, #64	@ 0x40
 8017fd4:	d146      	bne.n	8018064 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	3308      	adds	r3, #8
 8017fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017fe4:	e853 3f00 	ldrex	r3, [r3]
 8017fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8017fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	3308      	adds	r3, #8
 8017ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8018002:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8018006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801800a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801800e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8018012:	e841 2300 	strex	r3, r2, [r1]
 8018016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801801a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801801e:	2b00      	cmp	r3, #0
 8018020:	d1d9      	bne.n	8017fd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018028:	2b00      	cmp	r3, #0
 801802a:	d017      	beq.n	801805c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018032:	4a15      	ldr	r2, [pc, #84]	@ (8018088 <HAL_UART_IRQHandler+0x2c0>)
 8018034:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801803c:	4618      	mov	r0, r3
 801803e:	f7f3 ff31 	bl	800bea4 <HAL_DMA_Abort_IT>
 8018042:	4603      	mov	r3, r0
 8018044:	2b00      	cmp	r3, #0
 8018046:	d019      	beq.n	801807c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801804e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018050:	687a      	ldr	r2, [r7, #4]
 8018052:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8018056:	4610      	mov	r0, r2
 8018058:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801805a:	e00f      	b.n	801807c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801805c:	6878      	ldr	r0, [r7, #4]
 801805e:	f000 fa93 	bl	8018588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018062:	e00b      	b.n	801807c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018064:	6878      	ldr	r0, [r7, #4]
 8018066:	f000 fa8f 	bl	8018588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801806a:	e007      	b.n	801807c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f000 fa8b 	bl	8018588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	2200      	movs	r2, #0
 8018076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801807a:	e26f      	b.n	801855c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801807c:	bf00      	nop
    return;
 801807e:	e26d      	b.n	801855c <HAL_UART_IRQHandler+0x794>
 8018080:	10000001 	.word	0x10000001
 8018084:	04000120 	.word	0x04000120
 8018088:	08019911 	.word	0x08019911

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018090:	2b01      	cmp	r3, #1
 8018092:	f040 8203 	bne.w	801849c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8018096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801809a:	f003 0310 	and.w	r3, r3, #16
 801809e:	2b00      	cmp	r3, #0
 80180a0:	f000 81fc 	beq.w	801849c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80180a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80180a8:	f003 0310 	and.w	r3, r3, #16
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	f000 81f5 	beq.w	801849c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	2210      	movs	r2, #16
 80180b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	689b      	ldr	r3, [r3, #8]
 80180c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80180c4:	2b40      	cmp	r3, #64	@ 0x40
 80180c6:	f040 816d 	bne.w	80183a4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	4aa4      	ldr	r2, [pc, #656]	@ (8018364 <HAL_UART_IRQHandler+0x59c>)
 80180d4:	4293      	cmp	r3, r2
 80180d6:	d068      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4aa1      	ldr	r2, [pc, #644]	@ (8018368 <HAL_UART_IRQHandler+0x5a0>)
 80180e2:	4293      	cmp	r3, r2
 80180e4:	d061      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	4a9f      	ldr	r2, [pc, #636]	@ (801836c <HAL_UART_IRQHandler+0x5a4>)
 80180f0:	4293      	cmp	r3, r2
 80180f2:	d05a      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	4a9c      	ldr	r2, [pc, #624]	@ (8018370 <HAL_UART_IRQHandler+0x5a8>)
 80180fe:	4293      	cmp	r3, r2
 8018100:	d053      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	4a9a      	ldr	r2, [pc, #616]	@ (8018374 <HAL_UART_IRQHandler+0x5ac>)
 801810c:	4293      	cmp	r3, r2
 801810e:	d04c      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	4a97      	ldr	r2, [pc, #604]	@ (8018378 <HAL_UART_IRQHandler+0x5b0>)
 801811a:	4293      	cmp	r3, r2
 801811c:	d045      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	4a95      	ldr	r2, [pc, #596]	@ (801837c <HAL_UART_IRQHandler+0x5b4>)
 8018128:	4293      	cmp	r3, r2
 801812a:	d03e      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	4a92      	ldr	r2, [pc, #584]	@ (8018380 <HAL_UART_IRQHandler+0x5b8>)
 8018136:	4293      	cmp	r3, r2
 8018138:	d037      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	4a90      	ldr	r2, [pc, #576]	@ (8018384 <HAL_UART_IRQHandler+0x5bc>)
 8018144:	4293      	cmp	r3, r2
 8018146:	d030      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	4a8d      	ldr	r2, [pc, #564]	@ (8018388 <HAL_UART_IRQHandler+0x5c0>)
 8018152:	4293      	cmp	r3, r2
 8018154:	d029      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	4a8b      	ldr	r2, [pc, #556]	@ (801838c <HAL_UART_IRQHandler+0x5c4>)
 8018160:	4293      	cmp	r3, r2
 8018162:	d022      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	4a88      	ldr	r2, [pc, #544]	@ (8018390 <HAL_UART_IRQHandler+0x5c8>)
 801816e:	4293      	cmp	r3, r2
 8018170:	d01b      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4a86      	ldr	r2, [pc, #536]	@ (8018394 <HAL_UART_IRQHandler+0x5cc>)
 801817c:	4293      	cmp	r3, r2
 801817e:	d014      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4a83      	ldr	r2, [pc, #524]	@ (8018398 <HAL_UART_IRQHandler+0x5d0>)
 801818a:	4293      	cmp	r3, r2
 801818c:	d00d      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	4a81      	ldr	r2, [pc, #516]	@ (801839c <HAL_UART_IRQHandler+0x5d4>)
 8018198:	4293      	cmp	r3, r2
 801819a:	d006      	beq.n	80181aa <HAL_UART_IRQHandler+0x3e2>
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	4a7e      	ldr	r2, [pc, #504]	@ (80183a0 <HAL_UART_IRQHandler+0x5d8>)
 80181a6:	4293      	cmp	r3, r2
 80181a8:	d106      	bne.n	80181b8 <HAL_UART_IRQHandler+0x3f0>
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	e005      	b.n	80181c4 <HAL_UART_IRQHandler+0x3fc>
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	685b      	ldr	r3, [r3, #4]
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80181c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	f000 80ad 	beq.w	801832c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80181d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80181dc:	429a      	cmp	r2, r3
 80181de:	f080 80a5 	bcs.w	801832c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80181e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181f2:	69db      	ldr	r3, [r3, #28]
 80181f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80181f8:	f000 8087 	beq.w	801830a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018204:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018208:	e853 3f00 	ldrex	r3, [r3]
 801820c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018210:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	461a      	mov	r2, r3
 8018222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801822a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801822e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8018232:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8018236:	e841 2300 	strex	r3, r2, [r1]
 801823a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801823e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018242:	2b00      	cmp	r3, #0
 8018244:	d1da      	bne.n	80181fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	3308      	adds	r3, #8
 801824c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801824e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018250:	e853 3f00 	ldrex	r3, [r3]
 8018254:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8018256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018258:	f023 0301 	bic.w	r3, r3, #1
 801825c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	3308      	adds	r3, #8
 8018266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801826a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801826e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018270:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8018272:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8018276:	e841 2300 	strex	r3, r2, [r1]
 801827a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801827c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801827e:	2b00      	cmp	r3, #0
 8018280:	d1e1      	bne.n	8018246 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	3308      	adds	r3, #8
 8018288:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801828a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801828c:	e853 3f00 	ldrex	r3, [r3]
 8018290:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8018292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	3308      	adds	r3, #8
 80182a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80182a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80182a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80182ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80182ae:	e841 2300 	strex	r3, r2, [r1]
 80182b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80182b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d1e3      	bne.n	8018282 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	2220      	movs	r2, #32
 80182be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2200      	movs	r2, #0
 80182c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80182d0:	e853 3f00 	ldrex	r3, [r3]
 80182d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80182d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80182d8:	f023 0310 	bic.w	r3, r3, #16
 80182dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	461a      	mov	r2, r3
 80182e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80182ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80182ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80182f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80182f2:	e841 2300 	strex	r3, r2, [r1]
 80182f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80182f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d1e4      	bne.n	80182c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018304:	4618      	mov	r0, r3
 8018306:	f7f3 faaf 	bl	800b868 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	2202      	movs	r2, #2
 801830e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801831c:	b29b      	uxth	r3, r3
 801831e:	1ad3      	subs	r3, r2, r3
 8018320:	b29b      	uxth	r3, r3
 8018322:	4619      	mov	r1, r3
 8018324:	6878      	ldr	r0, [r7, #4]
 8018326:	f000 f939 	bl	801859c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801832a:	e119      	b.n	8018560 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018336:	429a      	cmp	r2, r3
 8018338:	f040 8112 	bne.w	8018560 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018342:	69db      	ldr	r3, [r3, #28]
 8018344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018348:	f040 810a 	bne.w	8018560 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2202      	movs	r2, #2
 8018350:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018358:	4619      	mov	r1, r3
 801835a:	6878      	ldr	r0, [r7, #4]
 801835c:	f000 f91e 	bl	801859c <HAL_UARTEx_RxEventCallback>
      return;
 8018360:	e0fe      	b.n	8018560 <HAL_UART_IRQHandler+0x798>
 8018362:	bf00      	nop
 8018364:	40020010 	.word	0x40020010
 8018368:	40020028 	.word	0x40020028
 801836c:	40020040 	.word	0x40020040
 8018370:	40020058 	.word	0x40020058
 8018374:	40020070 	.word	0x40020070
 8018378:	40020088 	.word	0x40020088
 801837c:	400200a0 	.word	0x400200a0
 8018380:	400200b8 	.word	0x400200b8
 8018384:	40020410 	.word	0x40020410
 8018388:	40020428 	.word	0x40020428
 801838c:	40020440 	.word	0x40020440
 8018390:	40020458 	.word	0x40020458
 8018394:	40020470 	.word	0x40020470
 8018398:	40020488 	.word	0x40020488
 801839c:	400204a0 	.word	0x400204a0
 80183a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	1ad3      	subs	r3, r2, r3
 80183b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80183be:	b29b      	uxth	r3, r3
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	f000 80cf 	beq.w	8018564 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80183c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	f000 80ca 	beq.w	8018564 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183d8:	e853 3f00 	ldrex	r3, [r3]
 80183dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80183de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80183e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	461a      	mov	r2, r3
 80183ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80183f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80183f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80183f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80183fa:	e841 2300 	strex	r3, r2, [r1]
 80183fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018402:	2b00      	cmp	r3, #0
 8018404:	d1e4      	bne.n	80183d0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	3308      	adds	r3, #8
 801840c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018410:	e853 3f00 	ldrex	r3, [r3]
 8018414:	623b      	str	r3, [r7, #32]
   return(result);
 8018416:	6a3a      	ldr	r2, [r7, #32]
 8018418:	4b55      	ldr	r3, [pc, #340]	@ (8018570 <HAL_UART_IRQHandler+0x7a8>)
 801841a:	4013      	ands	r3, r2
 801841c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	3308      	adds	r3, #8
 8018426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801842a:	633a      	str	r2, [r7, #48]	@ 0x30
 801842c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801842e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018432:	e841 2300 	strex	r3, r2, [r1]
 8018436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801843a:	2b00      	cmp	r3, #0
 801843c:	d1e3      	bne.n	8018406 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	2220      	movs	r2, #32
 8018442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	2200      	movs	r2, #0
 801844a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2200      	movs	r2, #0
 8018450:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018458:	693b      	ldr	r3, [r7, #16]
 801845a:	e853 3f00 	ldrex	r3, [r3]
 801845e:	60fb      	str	r3, [r7, #12]
   return(result);
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	f023 0310 	bic.w	r3, r3, #16
 8018466:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	461a      	mov	r2, r3
 8018470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018474:	61fb      	str	r3, [r7, #28]
 8018476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018478:	69b9      	ldr	r1, [r7, #24]
 801847a:	69fa      	ldr	r2, [r7, #28]
 801847c:	e841 2300 	strex	r3, r2, [r1]
 8018480:	617b      	str	r3, [r7, #20]
   return(result);
 8018482:	697b      	ldr	r3, [r7, #20]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d1e4      	bne.n	8018452 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	2202      	movs	r2, #2
 801848c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801848e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018492:	4619      	mov	r1, r3
 8018494:	6878      	ldr	r0, [r7, #4]
 8018496:	f000 f881 	bl	801859c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801849a:	e063      	b.n	8018564 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801849c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80184a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d00e      	beq.n	80184c6 <HAL_UART_IRQHandler+0x6fe>
 80184a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80184ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d008      	beq.n	80184c6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80184bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80184be:	6878      	ldr	r0, [r7, #4]
 80184c0:	f002 f926 	bl	801a710 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80184c4:	e051      	b.n	801856a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80184c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80184ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d014      	beq.n	80184fc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80184d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80184d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d105      	bne.n	80184ea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80184de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80184e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d008      	beq.n	80184fc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d03a      	beq.n	8018568 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	4798      	blx	r3
    }
    return;
 80184fa:	e035      	b.n	8018568 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80184fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018504:	2b00      	cmp	r3, #0
 8018506:	d009      	beq.n	801851c <HAL_UART_IRQHandler+0x754>
 8018508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801850c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018510:	2b00      	cmp	r3, #0
 8018512:	d003      	beq.n	801851c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8018514:	6878      	ldr	r0, [r7, #4]
 8018516:	f001 fbaf 	bl	8019c78 <UART_EndTransmit_IT>
    return;
 801851a:	e026      	b.n	801856a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801851c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018524:	2b00      	cmp	r3, #0
 8018526:	d009      	beq.n	801853c <HAL_UART_IRQHandler+0x774>
 8018528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801852c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018530:	2b00      	cmp	r3, #0
 8018532:	d003      	beq.n	801853c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8018534:	6878      	ldr	r0, [r7, #4]
 8018536:	f002 f8ff 	bl	801a738 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801853a:	e016      	b.n	801856a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801853c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018540:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018544:	2b00      	cmp	r3, #0
 8018546:	d010      	beq.n	801856a <HAL_UART_IRQHandler+0x7a2>
 8018548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801854c:	2b00      	cmp	r3, #0
 801854e:	da0c      	bge.n	801856a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018550:	6878      	ldr	r0, [r7, #4]
 8018552:	f002 f8e7 	bl	801a724 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018556:	e008      	b.n	801856a <HAL_UART_IRQHandler+0x7a2>
      return;
 8018558:	bf00      	nop
 801855a:	e006      	b.n	801856a <HAL_UART_IRQHandler+0x7a2>
    return;
 801855c:	bf00      	nop
 801855e:	e004      	b.n	801856a <HAL_UART_IRQHandler+0x7a2>
      return;
 8018560:	bf00      	nop
 8018562:	e002      	b.n	801856a <HAL_UART_IRQHandler+0x7a2>
      return;
 8018564:	bf00      	nop
 8018566:	e000      	b.n	801856a <HAL_UART_IRQHandler+0x7a2>
    return;
 8018568:	bf00      	nop
  }
}
 801856a:	37e8      	adds	r7, #232	@ 0xe8
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}
 8018570:	effffffe 	.word	0xeffffffe

08018574 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018574:	b480      	push	{r7}
 8018576:	b083      	sub	sp, #12
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801857c:	bf00      	nop
 801857e:	370c      	adds	r7, #12
 8018580:	46bd      	mov	sp, r7
 8018582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018586:	4770      	bx	lr

08018588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018588:	b480      	push	{r7}
 801858a:	b083      	sub	sp, #12
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018590:	bf00      	nop
 8018592:	370c      	adds	r7, #12
 8018594:	46bd      	mov	sp, r7
 8018596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801859a:	4770      	bx	lr

0801859c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801859c:	b480      	push	{r7}
 801859e:	b083      	sub	sp, #12
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
 80185a4:	460b      	mov	r3, r1
 80185a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80185a8:	bf00      	nop
 80185aa:	370c      	adds	r7, #12
 80185ac:	46bd      	mov	sp, r7
 80185ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b2:	4770      	bx	lr

080185b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80185b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80185b8:	b092      	sub	sp, #72	@ 0x48
 80185ba:	af00      	add	r7, sp, #0
 80185bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80185be:	2300      	movs	r3, #0
 80185c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	689a      	ldr	r2, [r3, #8]
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	691b      	ldr	r3, [r3, #16]
 80185cc:	431a      	orrs	r2, r3
 80185ce:	697b      	ldr	r3, [r7, #20]
 80185d0:	695b      	ldr	r3, [r3, #20]
 80185d2:	431a      	orrs	r2, r3
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	69db      	ldr	r3, [r3, #28]
 80185d8:	4313      	orrs	r3, r2
 80185da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80185dc:	697b      	ldr	r3, [r7, #20]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	681a      	ldr	r2, [r3, #0]
 80185e2:	4bbe      	ldr	r3, [pc, #760]	@ (80188dc <UART_SetConfig+0x328>)
 80185e4:	4013      	ands	r3, r2
 80185e6:	697a      	ldr	r2, [r7, #20]
 80185e8:	6812      	ldr	r2, [r2, #0]
 80185ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80185ec:	430b      	orrs	r3, r1
 80185ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80185f0:	697b      	ldr	r3, [r7, #20]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	685b      	ldr	r3, [r3, #4]
 80185f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	68da      	ldr	r2, [r3, #12]
 80185fe:	697b      	ldr	r3, [r7, #20]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	430a      	orrs	r2, r1
 8018604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018606:	697b      	ldr	r3, [r7, #20]
 8018608:	699b      	ldr	r3, [r3, #24]
 801860a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	4ab3      	ldr	r2, [pc, #716]	@ (80188e0 <UART_SetConfig+0x32c>)
 8018612:	4293      	cmp	r3, r2
 8018614:	d004      	beq.n	8018620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	6a1b      	ldr	r3, [r3, #32]
 801861a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801861c:	4313      	orrs	r3, r2
 801861e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018620:	697b      	ldr	r3, [r7, #20]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	689a      	ldr	r2, [r3, #8]
 8018626:	4baf      	ldr	r3, [pc, #700]	@ (80188e4 <UART_SetConfig+0x330>)
 8018628:	4013      	ands	r3, r2
 801862a:	697a      	ldr	r2, [r7, #20]
 801862c:	6812      	ldr	r2, [r2, #0]
 801862e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018630:	430b      	orrs	r3, r1
 8018632:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801863a:	f023 010f 	bic.w	r1, r3, #15
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	430a      	orrs	r2, r1
 8018648:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	4aa6      	ldr	r2, [pc, #664]	@ (80188e8 <UART_SetConfig+0x334>)
 8018650:	4293      	cmp	r3, r2
 8018652:	d177      	bne.n	8018744 <UART_SetConfig+0x190>
 8018654:	4ba5      	ldr	r3, [pc, #660]	@ (80188ec <UART_SetConfig+0x338>)
 8018656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801865c:	2b28      	cmp	r3, #40	@ 0x28
 801865e:	d86d      	bhi.n	801873c <UART_SetConfig+0x188>
 8018660:	a201      	add	r2, pc, #4	@ (adr r2, 8018668 <UART_SetConfig+0xb4>)
 8018662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018666:	bf00      	nop
 8018668:	0801870d 	.word	0x0801870d
 801866c:	0801873d 	.word	0x0801873d
 8018670:	0801873d 	.word	0x0801873d
 8018674:	0801873d 	.word	0x0801873d
 8018678:	0801873d 	.word	0x0801873d
 801867c:	0801873d 	.word	0x0801873d
 8018680:	0801873d 	.word	0x0801873d
 8018684:	0801873d 	.word	0x0801873d
 8018688:	08018715 	.word	0x08018715
 801868c:	0801873d 	.word	0x0801873d
 8018690:	0801873d 	.word	0x0801873d
 8018694:	0801873d 	.word	0x0801873d
 8018698:	0801873d 	.word	0x0801873d
 801869c:	0801873d 	.word	0x0801873d
 80186a0:	0801873d 	.word	0x0801873d
 80186a4:	0801873d 	.word	0x0801873d
 80186a8:	0801871d 	.word	0x0801871d
 80186ac:	0801873d 	.word	0x0801873d
 80186b0:	0801873d 	.word	0x0801873d
 80186b4:	0801873d 	.word	0x0801873d
 80186b8:	0801873d 	.word	0x0801873d
 80186bc:	0801873d 	.word	0x0801873d
 80186c0:	0801873d 	.word	0x0801873d
 80186c4:	0801873d 	.word	0x0801873d
 80186c8:	08018725 	.word	0x08018725
 80186cc:	0801873d 	.word	0x0801873d
 80186d0:	0801873d 	.word	0x0801873d
 80186d4:	0801873d 	.word	0x0801873d
 80186d8:	0801873d 	.word	0x0801873d
 80186dc:	0801873d 	.word	0x0801873d
 80186e0:	0801873d 	.word	0x0801873d
 80186e4:	0801873d 	.word	0x0801873d
 80186e8:	0801872d 	.word	0x0801872d
 80186ec:	0801873d 	.word	0x0801873d
 80186f0:	0801873d 	.word	0x0801873d
 80186f4:	0801873d 	.word	0x0801873d
 80186f8:	0801873d 	.word	0x0801873d
 80186fc:	0801873d 	.word	0x0801873d
 8018700:	0801873d 	.word	0x0801873d
 8018704:	0801873d 	.word	0x0801873d
 8018708:	08018735 	.word	0x08018735
 801870c:	2301      	movs	r3, #1
 801870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018712:	e326      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018714:	2304      	movs	r3, #4
 8018716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801871a:	e322      	b.n	8018d62 <UART_SetConfig+0x7ae>
 801871c:	2308      	movs	r3, #8
 801871e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018722:	e31e      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018724:	2310      	movs	r3, #16
 8018726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801872a:	e31a      	b.n	8018d62 <UART_SetConfig+0x7ae>
 801872c:	2320      	movs	r3, #32
 801872e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018732:	e316      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018734:	2340      	movs	r3, #64	@ 0x40
 8018736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801873a:	e312      	b.n	8018d62 <UART_SetConfig+0x7ae>
 801873c:	2380      	movs	r3, #128	@ 0x80
 801873e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018742:	e30e      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	4a69      	ldr	r2, [pc, #420]	@ (80188f0 <UART_SetConfig+0x33c>)
 801874a:	4293      	cmp	r3, r2
 801874c:	d130      	bne.n	80187b0 <UART_SetConfig+0x1fc>
 801874e:	4b67      	ldr	r3, [pc, #412]	@ (80188ec <UART_SetConfig+0x338>)
 8018750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018752:	f003 0307 	and.w	r3, r3, #7
 8018756:	2b05      	cmp	r3, #5
 8018758:	d826      	bhi.n	80187a8 <UART_SetConfig+0x1f4>
 801875a:	a201      	add	r2, pc, #4	@ (adr r2, 8018760 <UART_SetConfig+0x1ac>)
 801875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018760:	08018779 	.word	0x08018779
 8018764:	08018781 	.word	0x08018781
 8018768:	08018789 	.word	0x08018789
 801876c:	08018791 	.word	0x08018791
 8018770:	08018799 	.word	0x08018799
 8018774:	080187a1 	.word	0x080187a1
 8018778:	2300      	movs	r3, #0
 801877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801877e:	e2f0      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018780:	2304      	movs	r3, #4
 8018782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018786:	e2ec      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018788:	2308      	movs	r3, #8
 801878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801878e:	e2e8      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018790:	2310      	movs	r3, #16
 8018792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018796:	e2e4      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018798:	2320      	movs	r3, #32
 801879a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801879e:	e2e0      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80187a0:	2340      	movs	r3, #64	@ 0x40
 80187a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187a6:	e2dc      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80187a8:	2380      	movs	r3, #128	@ 0x80
 80187aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ae:	e2d8      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80187b0:	697b      	ldr	r3, [r7, #20]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	4a4f      	ldr	r2, [pc, #316]	@ (80188f4 <UART_SetConfig+0x340>)
 80187b6:	4293      	cmp	r3, r2
 80187b8:	d130      	bne.n	801881c <UART_SetConfig+0x268>
 80187ba:	4b4c      	ldr	r3, [pc, #304]	@ (80188ec <UART_SetConfig+0x338>)
 80187bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187be:	f003 0307 	and.w	r3, r3, #7
 80187c2:	2b05      	cmp	r3, #5
 80187c4:	d826      	bhi.n	8018814 <UART_SetConfig+0x260>
 80187c6:	a201      	add	r2, pc, #4	@ (adr r2, 80187cc <UART_SetConfig+0x218>)
 80187c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187cc:	080187e5 	.word	0x080187e5
 80187d0:	080187ed 	.word	0x080187ed
 80187d4:	080187f5 	.word	0x080187f5
 80187d8:	080187fd 	.word	0x080187fd
 80187dc:	08018805 	.word	0x08018805
 80187e0:	0801880d 	.word	0x0801880d
 80187e4:	2300      	movs	r3, #0
 80187e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ea:	e2ba      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80187ec:	2304      	movs	r3, #4
 80187ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187f2:	e2b6      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80187f4:	2308      	movs	r3, #8
 80187f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187fa:	e2b2      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80187fc:	2310      	movs	r3, #16
 80187fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018802:	e2ae      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018804:	2320      	movs	r3, #32
 8018806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801880a:	e2aa      	b.n	8018d62 <UART_SetConfig+0x7ae>
 801880c:	2340      	movs	r3, #64	@ 0x40
 801880e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018812:	e2a6      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018814:	2380      	movs	r3, #128	@ 0x80
 8018816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801881a:	e2a2      	b.n	8018d62 <UART_SetConfig+0x7ae>
 801881c:	697b      	ldr	r3, [r7, #20]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	4a35      	ldr	r2, [pc, #212]	@ (80188f8 <UART_SetConfig+0x344>)
 8018822:	4293      	cmp	r3, r2
 8018824:	d130      	bne.n	8018888 <UART_SetConfig+0x2d4>
 8018826:	4b31      	ldr	r3, [pc, #196]	@ (80188ec <UART_SetConfig+0x338>)
 8018828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801882a:	f003 0307 	and.w	r3, r3, #7
 801882e:	2b05      	cmp	r3, #5
 8018830:	d826      	bhi.n	8018880 <UART_SetConfig+0x2cc>
 8018832:	a201      	add	r2, pc, #4	@ (adr r2, 8018838 <UART_SetConfig+0x284>)
 8018834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018838:	08018851 	.word	0x08018851
 801883c:	08018859 	.word	0x08018859
 8018840:	08018861 	.word	0x08018861
 8018844:	08018869 	.word	0x08018869
 8018848:	08018871 	.word	0x08018871
 801884c:	08018879 	.word	0x08018879
 8018850:	2300      	movs	r3, #0
 8018852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018856:	e284      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018858:	2304      	movs	r3, #4
 801885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801885e:	e280      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018860:	2308      	movs	r3, #8
 8018862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018866:	e27c      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018868:	2310      	movs	r3, #16
 801886a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801886e:	e278      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018870:	2320      	movs	r3, #32
 8018872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018876:	e274      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018878:	2340      	movs	r3, #64	@ 0x40
 801887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801887e:	e270      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018880:	2380      	movs	r3, #128	@ 0x80
 8018882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018886:	e26c      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	4a1b      	ldr	r2, [pc, #108]	@ (80188fc <UART_SetConfig+0x348>)
 801888e:	4293      	cmp	r3, r2
 8018890:	d142      	bne.n	8018918 <UART_SetConfig+0x364>
 8018892:	4b16      	ldr	r3, [pc, #88]	@ (80188ec <UART_SetConfig+0x338>)
 8018894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018896:	f003 0307 	and.w	r3, r3, #7
 801889a:	2b05      	cmp	r3, #5
 801889c:	d838      	bhi.n	8018910 <UART_SetConfig+0x35c>
 801889e:	a201      	add	r2, pc, #4	@ (adr r2, 80188a4 <UART_SetConfig+0x2f0>)
 80188a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188a4:	080188bd 	.word	0x080188bd
 80188a8:	080188c5 	.word	0x080188c5
 80188ac:	080188cd 	.word	0x080188cd
 80188b0:	080188d5 	.word	0x080188d5
 80188b4:	08018901 	.word	0x08018901
 80188b8:	08018909 	.word	0x08018909
 80188bc:	2300      	movs	r3, #0
 80188be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188c2:	e24e      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80188c4:	2304      	movs	r3, #4
 80188c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ca:	e24a      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80188cc:	2308      	movs	r3, #8
 80188ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188d2:	e246      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80188d4:	2310      	movs	r3, #16
 80188d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188da:	e242      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80188dc:	cfff69f3 	.word	0xcfff69f3
 80188e0:	58000c00 	.word	0x58000c00
 80188e4:	11fff4ff 	.word	0x11fff4ff
 80188e8:	40011000 	.word	0x40011000
 80188ec:	58024400 	.word	0x58024400
 80188f0:	40004400 	.word	0x40004400
 80188f4:	40004800 	.word	0x40004800
 80188f8:	40004c00 	.word	0x40004c00
 80188fc:	40005000 	.word	0x40005000
 8018900:	2320      	movs	r3, #32
 8018902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018906:	e22c      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018908:	2340      	movs	r3, #64	@ 0x40
 801890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801890e:	e228      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018910:	2380      	movs	r3, #128	@ 0x80
 8018912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018916:	e224      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018918:	697b      	ldr	r3, [r7, #20]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	4ab1      	ldr	r2, [pc, #708]	@ (8018be4 <UART_SetConfig+0x630>)
 801891e:	4293      	cmp	r3, r2
 8018920:	d176      	bne.n	8018a10 <UART_SetConfig+0x45c>
 8018922:	4bb1      	ldr	r3, [pc, #708]	@ (8018be8 <UART_SetConfig+0x634>)
 8018924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018926:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801892a:	2b28      	cmp	r3, #40	@ 0x28
 801892c:	d86c      	bhi.n	8018a08 <UART_SetConfig+0x454>
 801892e:	a201      	add	r2, pc, #4	@ (adr r2, 8018934 <UART_SetConfig+0x380>)
 8018930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018934:	080189d9 	.word	0x080189d9
 8018938:	08018a09 	.word	0x08018a09
 801893c:	08018a09 	.word	0x08018a09
 8018940:	08018a09 	.word	0x08018a09
 8018944:	08018a09 	.word	0x08018a09
 8018948:	08018a09 	.word	0x08018a09
 801894c:	08018a09 	.word	0x08018a09
 8018950:	08018a09 	.word	0x08018a09
 8018954:	080189e1 	.word	0x080189e1
 8018958:	08018a09 	.word	0x08018a09
 801895c:	08018a09 	.word	0x08018a09
 8018960:	08018a09 	.word	0x08018a09
 8018964:	08018a09 	.word	0x08018a09
 8018968:	08018a09 	.word	0x08018a09
 801896c:	08018a09 	.word	0x08018a09
 8018970:	08018a09 	.word	0x08018a09
 8018974:	080189e9 	.word	0x080189e9
 8018978:	08018a09 	.word	0x08018a09
 801897c:	08018a09 	.word	0x08018a09
 8018980:	08018a09 	.word	0x08018a09
 8018984:	08018a09 	.word	0x08018a09
 8018988:	08018a09 	.word	0x08018a09
 801898c:	08018a09 	.word	0x08018a09
 8018990:	08018a09 	.word	0x08018a09
 8018994:	080189f1 	.word	0x080189f1
 8018998:	08018a09 	.word	0x08018a09
 801899c:	08018a09 	.word	0x08018a09
 80189a0:	08018a09 	.word	0x08018a09
 80189a4:	08018a09 	.word	0x08018a09
 80189a8:	08018a09 	.word	0x08018a09
 80189ac:	08018a09 	.word	0x08018a09
 80189b0:	08018a09 	.word	0x08018a09
 80189b4:	080189f9 	.word	0x080189f9
 80189b8:	08018a09 	.word	0x08018a09
 80189bc:	08018a09 	.word	0x08018a09
 80189c0:	08018a09 	.word	0x08018a09
 80189c4:	08018a09 	.word	0x08018a09
 80189c8:	08018a09 	.word	0x08018a09
 80189cc:	08018a09 	.word	0x08018a09
 80189d0:	08018a09 	.word	0x08018a09
 80189d4:	08018a01 	.word	0x08018a01
 80189d8:	2301      	movs	r3, #1
 80189da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189de:	e1c0      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80189e0:	2304      	movs	r3, #4
 80189e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189e6:	e1bc      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80189e8:	2308      	movs	r3, #8
 80189ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ee:	e1b8      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80189f0:	2310      	movs	r3, #16
 80189f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189f6:	e1b4      	b.n	8018d62 <UART_SetConfig+0x7ae>
 80189f8:	2320      	movs	r3, #32
 80189fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189fe:	e1b0      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a00:	2340      	movs	r3, #64	@ 0x40
 8018a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a06:	e1ac      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a08:	2380      	movs	r3, #128	@ 0x80
 8018a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a0e:	e1a8      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	4a75      	ldr	r2, [pc, #468]	@ (8018bec <UART_SetConfig+0x638>)
 8018a16:	4293      	cmp	r3, r2
 8018a18:	d130      	bne.n	8018a7c <UART_SetConfig+0x4c8>
 8018a1a:	4b73      	ldr	r3, [pc, #460]	@ (8018be8 <UART_SetConfig+0x634>)
 8018a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a1e:	f003 0307 	and.w	r3, r3, #7
 8018a22:	2b05      	cmp	r3, #5
 8018a24:	d826      	bhi.n	8018a74 <UART_SetConfig+0x4c0>
 8018a26:	a201      	add	r2, pc, #4	@ (adr r2, 8018a2c <UART_SetConfig+0x478>)
 8018a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a2c:	08018a45 	.word	0x08018a45
 8018a30:	08018a4d 	.word	0x08018a4d
 8018a34:	08018a55 	.word	0x08018a55
 8018a38:	08018a5d 	.word	0x08018a5d
 8018a3c:	08018a65 	.word	0x08018a65
 8018a40:	08018a6d 	.word	0x08018a6d
 8018a44:	2300      	movs	r3, #0
 8018a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a4a:	e18a      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a4c:	2304      	movs	r3, #4
 8018a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a52:	e186      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a54:	2308      	movs	r3, #8
 8018a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a5a:	e182      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a5c:	2310      	movs	r3, #16
 8018a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a62:	e17e      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a64:	2320      	movs	r3, #32
 8018a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a6a:	e17a      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a6c:	2340      	movs	r3, #64	@ 0x40
 8018a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a72:	e176      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a74:	2380      	movs	r3, #128	@ 0x80
 8018a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a7a:	e172      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	4a5b      	ldr	r2, [pc, #364]	@ (8018bf0 <UART_SetConfig+0x63c>)
 8018a82:	4293      	cmp	r3, r2
 8018a84:	d130      	bne.n	8018ae8 <UART_SetConfig+0x534>
 8018a86:	4b58      	ldr	r3, [pc, #352]	@ (8018be8 <UART_SetConfig+0x634>)
 8018a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a8a:	f003 0307 	and.w	r3, r3, #7
 8018a8e:	2b05      	cmp	r3, #5
 8018a90:	d826      	bhi.n	8018ae0 <UART_SetConfig+0x52c>
 8018a92:	a201      	add	r2, pc, #4	@ (adr r2, 8018a98 <UART_SetConfig+0x4e4>)
 8018a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a98:	08018ab1 	.word	0x08018ab1
 8018a9c:	08018ab9 	.word	0x08018ab9
 8018aa0:	08018ac1 	.word	0x08018ac1
 8018aa4:	08018ac9 	.word	0x08018ac9
 8018aa8:	08018ad1 	.word	0x08018ad1
 8018aac:	08018ad9 	.word	0x08018ad9
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ab6:	e154      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ab8:	2304      	movs	r3, #4
 8018aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018abe:	e150      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ac0:	2308      	movs	r3, #8
 8018ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ac6:	e14c      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ac8:	2310      	movs	r3, #16
 8018aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ace:	e148      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ad0:	2320      	movs	r3, #32
 8018ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ad6:	e144      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ad8:	2340      	movs	r3, #64	@ 0x40
 8018ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ade:	e140      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ae0:	2380      	movs	r3, #128	@ 0x80
 8018ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ae6:	e13c      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	4a41      	ldr	r2, [pc, #260]	@ (8018bf4 <UART_SetConfig+0x640>)
 8018aee:	4293      	cmp	r3, r2
 8018af0:	f040 8082 	bne.w	8018bf8 <UART_SetConfig+0x644>
 8018af4:	4b3c      	ldr	r3, [pc, #240]	@ (8018be8 <UART_SetConfig+0x634>)
 8018af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018afc:	2b28      	cmp	r3, #40	@ 0x28
 8018afe:	d86d      	bhi.n	8018bdc <UART_SetConfig+0x628>
 8018b00:	a201      	add	r2, pc, #4	@ (adr r2, 8018b08 <UART_SetConfig+0x554>)
 8018b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b06:	bf00      	nop
 8018b08:	08018bad 	.word	0x08018bad
 8018b0c:	08018bdd 	.word	0x08018bdd
 8018b10:	08018bdd 	.word	0x08018bdd
 8018b14:	08018bdd 	.word	0x08018bdd
 8018b18:	08018bdd 	.word	0x08018bdd
 8018b1c:	08018bdd 	.word	0x08018bdd
 8018b20:	08018bdd 	.word	0x08018bdd
 8018b24:	08018bdd 	.word	0x08018bdd
 8018b28:	08018bb5 	.word	0x08018bb5
 8018b2c:	08018bdd 	.word	0x08018bdd
 8018b30:	08018bdd 	.word	0x08018bdd
 8018b34:	08018bdd 	.word	0x08018bdd
 8018b38:	08018bdd 	.word	0x08018bdd
 8018b3c:	08018bdd 	.word	0x08018bdd
 8018b40:	08018bdd 	.word	0x08018bdd
 8018b44:	08018bdd 	.word	0x08018bdd
 8018b48:	08018bbd 	.word	0x08018bbd
 8018b4c:	08018bdd 	.word	0x08018bdd
 8018b50:	08018bdd 	.word	0x08018bdd
 8018b54:	08018bdd 	.word	0x08018bdd
 8018b58:	08018bdd 	.word	0x08018bdd
 8018b5c:	08018bdd 	.word	0x08018bdd
 8018b60:	08018bdd 	.word	0x08018bdd
 8018b64:	08018bdd 	.word	0x08018bdd
 8018b68:	08018bc5 	.word	0x08018bc5
 8018b6c:	08018bdd 	.word	0x08018bdd
 8018b70:	08018bdd 	.word	0x08018bdd
 8018b74:	08018bdd 	.word	0x08018bdd
 8018b78:	08018bdd 	.word	0x08018bdd
 8018b7c:	08018bdd 	.word	0x08018bdd
 8018b80:	08018bdd 	.word	0x08018bdd
 8018b84:	08018bdd 	.word	0x08018bdd
 8018b88:	08018bcd 	.word	0x08018bcd
 8018b8c:	08018bdd 	.word	0x08018bdd
 8018b90:	08018bdd 	.word	0x08018bdd
 8018b94:	08018bdd 	.word	0x08018bdd
 8018b98:	08018bdd 	.word	0x08018bdd
 8018b9c:	08018bdd 	.word	0x08018bdd
 8018ba0:	08018bdd 	.word	0x08018bdd
 8018ba4:	08018bdd 	.word	0x08018bdd
 8018ba8:	08018bd5 	.word	0x08018bd5
 8018bac:	2301      	movs	r3, #1
 8018bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bb2:	e0d6      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018bb4:	2304      	movs	r3, #4
 8018bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bba:	e0d2      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018bbc:	2308      	movs	r3, #8
 8018bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bc2:	e0ce      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018bc4:	2310      	movs	r3, #16
 8018bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bca:	e0ca      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018bcc:	2320      	movs	r3, #32
 8018bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bd2:	e0c6      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018bd4:	2340      	movs	r3, #64	@ 0x40
 8018bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bda:	e0c2      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018bdc:	2380      	movs	r3, #128	@ 0x80
 8018bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018be2:	e0be      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018be4:	40011400 	.word	0x40011400
 8018be8:	58024400 	.word	0x58024400
 8018bec:	40007800 	.word	0x40007800
 8018bf0:	40007c00 	.word	0x40007c00
 8018bf4:	40011800 	.word	0x40011800
 8018bf8:	697b      	ldr	r3, [r7, #20]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	4aad      	ldr	r2, [pc, #692]	@ (8018eb4 <UART_SetConfig+0x900>)
 8018bfe:	4293      	cmp	r3, r2
 8018c00:	d176      	bne.n	8018cf0 <UART_SetConfig+0x73c>
 8018c02:	4bad      	ldr	r3, [pc, #692]	@ (8018eb8 <UART_SetConfig+0x904>)
 8018c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018c0a:	2b28      	cmp	r3, #40	@ 0x28
 8018c0c:	d86c      	bhi.n	8018ce8 <UART_SetConfig+0x734>
 8018c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8018c14 <UART_SetConfig+0x660>)
 8018c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c14:	08018cb9 	.word	0x08018cb9
 8018c18:	08018ce9 	.word	0x08018ce9
 8018c1c:	08018ce9 	.word	0x08018ce9
 8018c20:	08018ce9 	.word	0x08018ce9
 8018c24:	08018ce9 	.word	0x08018ce9
 8018c28:	08018ce9 	.word	0x08018ce9
 8018c2c:	08018ce9 	.word	0x08018ce9
 8018c30:	08018ce9 	.word	0x08018ce9
 8018c34:	08018cc1 	.word	0x08018cc1
 8018c38:	08018ce9 	.word	0x08018ce9
 8018c3c:	08018ce9 	.word	0x08018ce9
 8018c40:	08018ce9 	.word	0x08018ce9
 8018c44:	08018ce9 	.word	0x08018ce9
 8018c48:	08018ce9 	.word	0x08018ce9
 8018c4c:	08018ce9 	.word	0x08018ce9
 8018c50:	08018ce9 	.word	0x08018ce9
 8018c54:	08018cc9 	.word	0x08018cc9
 8018c58:	08018ce9 	.word	0x08018ce9
 8018c5c:	08018ce9 	.word	0x08018ce9
 8018c60:	08018ce9 	.word	0x08018ce9
 8018c64:	08018ce9 	.word	0x08018ce9
 8018c68:	08018ce9 	.word	0x08018ce9
 8018c6c:	08018ce9 	.word	0x08018ce9
 8018c70:	08018ce9 	.word	0x08018ce9
 8018c74:	08018cd1 	.word	0x08018cd1
 8018c78:	08018ce9 	.word	0x08018ce9
 8018c7c:	08018ce9 	.word	0x08018ce9
 8018c80:	08018ce9 	.word	0x08018ce9
 8018c84:	08018ce9 	.word	0x08018ce9
 8018c88:	08018ce9 	.word	0x08018ce9
 8018c8c:	08018ce9 	.word	0x08018ce9
 8018c90:	08018ce9 	.word	0x08018ce9
 8018c94:	08018cd9 	.word	0x08018cd9
 8018c98:	08018ce9 	.word	0x08018ce9
 8018c9c:	08018ce9 	.word	0x08018ce9
 8018ca0:	08018ce9 	.word	0x08018ce9
 8018ca4:	08018ce9 	.word	0x08018ce9
 8018ca8:	08018ce9 	.word	0x08018ce9
 8018cac:	08018ce9 	.word	0x08018ce9
 8018cb0:	08018ce9 	.word	0x08018ce9
 8018cb4:	08018ce1 	.word	0x08018ce1
 8018cb8:	2301      	movs	r3, #1
 8018cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cbe:	e050      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018cc0:	2304      	movs	r3, #4
 8018cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cc6:	e04c      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018cc8:	2308      	movs	r3, #8
 8018cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cce:	e048      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018cd0:	2310      	movs	r3, #16
 8018cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cd6:	e044      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018cd8:	2320      	movs	r3, #32
 8018cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cde:	e040      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ce0:	2340      	movs	r3, #64	@ 0x40
 8018ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ce6:	e03c      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018ce8:	2380      	movs	r3, #128	@ 0x80
 8018cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cee:	e038      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	4a71      	ldr	r2, [pc, #452]	@ (8018ebc <UART_SetConfig+0x908>)
 8018cf6:	4293      	cmp	r3, r2
 8018cf8:	d130      	bne.n	8018d5c <UART_SetConfig+0x7a8>
 8018cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8018eb8 <UART_SetConfig+0x904>)
 8018cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018cfe:	f003 0307 	and.w	r3, r3, #7
 8018d02:	2b05      	cmp	r3, #5
 8018d04:	d826      	bhi.n	8018d54 <UART_SetConfig+0x7a0>
 8018d06:	a201      	add	r2, pc, #4	@ (adr r2, 8018d0c <UART_SetConfig+0x758>)
 8018d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d0c:	08018d25 	.word	0x08018d25
 8018d10:	08018d2d 	.word	0x08018d2d
 8018d14:	08018d35 	.word	0x08018d35
 8018d18:	08018d3d 	.word	0x08018d3d
 8018d1c:	08018d45 	.word	0x08018d45
 8018d20:	08018d4d 	.word	0x08018d4d
 8018d24:	2302      	movs	r3, #2
 8018d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d2a:	e01a      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018d2c:	2304      	movs	r3, #4
 8018d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d32:	e016      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018d34:	2308      	movs	r3, #8
 8018d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d3a:	e012      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018d3c:	2310      	movs	r3, #16
 8018d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d42:	e00e      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018d44:	2320      	movs	r3, #32
 8018d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d4a:	e00a      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018d4c:	2340      	movs	r3, #64	@ 0x40
 8018d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d52:	e006      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018d54:	2380      	movs	r3, #128	@ 0x80
 8018d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d5a:	e002      	b.n	8018d62 <UART_SetConfig+0x7ae>
 8018d5c:	2380      	movs	r3, #128	@ 0x80
 8018d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	4a55      	ldr	r2, [pc, #340]	@ (8018ebc <UART_SetConfig+0x908>)
 8018d68:	4293      	cmp	r3, r2
 8018d6a:	f040 80f8 	bne.w	8018f5e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018d6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018d72:	2b20      	cmp	r3, #32
 8018d74:	dc46      	bgt.n	8018e04 <UART_SetConfig+0x850>
 8018d76:	2b02      	cmp	r3, #2
 8018d78:	db75      	blt.n	8018e66 <UART_SetConfig+0x8b2>
 8018d7a:	3b02      	subs	r3, #2
 8018d7c:	2b1e      	cmp	r3, #30
 8018d7e:	d872      	bhi.n	8018e66 <UART_SetConfig+0x8b2>
 8018d80:	a201      	add	r2, pc, #4	@ (adr r2, 8018d88 <UART_SetConfig+0x7d4>)
 8018d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d86:	bf00      	nop
 8018d88:	08018e0b 	.word	0x08018e0b
 8018d8c:	08018e67 	.word	0x08018e67
 8018d90:	08018e13 	.word	0x08018e13
 8018d94:	08018e67 	.word	0x08018e67
 8018d98:	08018e67 	.word	0x08018e67
 8018d9c:	08018e67 	.word	0x08018e67
 8018da0:	08018e23 	.word	0x08018e23
 8018da4:	08018e67 	.word	0x08018e67
 8018da8:	08018e67 	.word	0x08018e67
 8018dac:	08018e67 	.word	0x08018e67
 8018db0:	08018e67 	.word	0x08018e67
 8018db4:	08018e67 	.word	0x08018e67
 8018db8:	08018e67 	.word	0x08018e67
 8018dbc:	08018e67 	.word	0x08018e67
 8018dc0:	08018e33 	.word	0x08018e33
 8018dc4:	08018e67 	.word	0x08018e67
 8018dc8:	08018e67 	.word	0x08018e67
 8018dcc:	08018e67 	.word	0x08018e67
 8018dd0:	08018e67 	.word	0x08018e67
 8018dd4:	08018e67 	.word	0x08018e67
 8018dd8:	08018e67 	.word	0x08018e67
 8018ddc:	08018e67 	.word	0x08018e67
 8018de0:	08018e67 	.word	0x08018e67
 8018de4:	08018e67 	.word	0x08018e67
 8018de8:	08018e67 	.word	0x08018e67
 8018dec:	08018e67 	.word	0x08018e67
 8018df0:	08018e67 	.word	0x08018e67
 8018df4:	08018e67 	.word	0x08018e67
 8018df8:	08018e67 	.word	0x08018e67
 8018dfc:	08018e67 	.word	0x08018e67
 8018e00:	08018e59 	.word	0x08018e59
 8018e04:	2b40      	cmp	r3, #64	@ 0x40
 8018e06:	d02a      	beq.n	8018e5e <UART_SetConfig+0x8aa>
 8018e08:	e02d      	b.n	8018e66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018e0a:	f7fa fa37 	bl	801327c <HAL_RCCEx_GetD3PCLK1Freq>
 8018e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018e10:	e02f      	b.n	8018e72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7fa fa46 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e20:	e027      	b.n	8018e72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018e22:	f107 0318 	add.w	r3, r7, #24
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7fa fb92 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018e2c:	69fb      	ldr	r3, [r7, #28]
 8018e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e30:	e01f      	b.n	8018e72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018e32:	4b21      	ldr	r3, [pc, #132]	@ (8018eb8 <UART_SetConfig+0x904>)
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	f003 0320 	and.w	r3, r3, #32
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d009      	beq.n	8018e52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8018eb8 <UART_SetConfig+0x904>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	08db      	lsrs	r3, r3, #3
 8018e44:	f003 0303 	and.w	r3, r3, #3
 8018e48:	4a1d      	ldr	r2, [pc, #116]	@ (8018ec0 <UART_SetConfig+0x90c>)
 8018e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8018e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018e50:	e00f      	b.n	8018e72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018e52:	4b1b      	ldr	r3, [pc, #108]	@ (8018ec0 <UART_SetConfig+0x90c>)
 8018e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e56:	e00c      	b.n	8018e72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018e58:	4b1a      	ldr	r3, [pc, #104]	@ (8018ec4 <UART_SetConfig+0x910>)
 8018e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e5c:	e009      	b.n	8018e72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018e64:	e005      	b.n	8018e72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8018e66:	2300      	movs	r3, #0
 8018e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018e6a:	2301      	movs	r3, #1
 8018e6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	f000 81ee 	beq.w	8019256 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e7e:	4a12      	ldr	r2, [pc, #72]	@ (8018ec8 <UART_SetConfig+0x914>)
 8018e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e84:	461a      	mov	r2, r3
 8018e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e8c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018e8e:	697b      	ldr	r3, [r7, #20]
 8018e90:	685a      	ldr	r2, [r3, #4]
 8018e92:	4613      	mov	r3, r2
 8018e94:	005b      	lsls	r3, r3, #1
 8018e96:	4413      	add	r3, r2
 8018e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e9a:	429a      	cmp	r2, r3
 8018e9c:	d305      	bcc.n	8018eaa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018e9e:	697b      	ldr	r3, [r7, #20]
 8018ea0:	685b      	ldr	r3, [r3, #4]
 8018ea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018ea6:	429a      	cmp	r2, r3
 8018ea8:	d910      	bls.n	8018ecc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8018eaa:	2301      	movs	r3, #1
 8018eac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018eb0:	e1d1      	b.n	8019256 <UART_SetConfig+0xca2>
 8018eb2:	bf00      	nop
 8018eb4:	40011c00 	.word	0x40011c00
 8018eb8:	58024400 	.word	0x58024400
 8018ebc:	58000c00 	.word	0x58000c00
 8018ec0:	03d09000 	.word	0x03d09000
 8018ec4:	003d0900 	.word	0x003d0900
 8018ec8:	0801e7a8 	.word	0x0801e7a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ece:	2200      	movs	r2, #0
 8018ed0:	60bb      	str	r3, [r7, #8]
 8018ed2:	60fa      	str	r2, [r7, #12]
 8018ed4:	697b      	ldr	r3, [r7, #20]
 8018ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ed8:	4ac0      	ldr	r2, [pc, #768]	@ (80191dc <UART_SetConfig+0xc28>)
 8018eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	603b      	str	r3, [r7, #0]
 8018ee4:	607a      	str	r2, [r7, #4]
 8018ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018eea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018eee:	f7e7 fa5f 	bl	80003b0 <__aeabi_uldivmod>
 8018ef2:	4602      	mov	r2, r0
 8018ef4:	460b      	mov	r3, r1
 8018ef6:	4610      	mov	r0, r2
 8018ef8:	4619      	mov	r1, r3
 8018efa:	f04f 0200 	mov.w	r2, #0
 8018efe:	f04f 0300 	mov.w	r3, #0
 8018f02:	020b      	lsls	r3, r1, #8
 8018f04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018f08:	0202      	lsls	r2, r0, #8
 8018f0a:	6979      	ldr	r1, [r7, #20]
 8018f0c:	6849      	ldr	r1, [r1, #4]
 8018f0e:	0849      	lsrs	r1, r1, #1
 8018f10:	2000      	movs	r0, #0
 8018f12:	460c      	mov	r4, r1
 8018f14:	4605      	mov	r5, r0
 8018f16:	eb12 0804 	adds.w	r8, r2, r4
 8018f1a:	eb43 0905 	adc.w	r9, r3, r5
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	685b      	ldr	r3, [r3, #4]
 8018f22:	2200      	movs	r2, #0
 8018f24:	469a      	mov	sl, r3
 8018f26:	4693      	mov	fp, r2
 8018f28:	4652      	mov	r2, sl
 8018f2a:	465b      	mov	r3, fp
 8018f2c:	4640      	mov	r0, r8
 8018f2e:	4649      	mov	r1, r9
 8018f30:	f7e7 fa3e 	bl	80003b0 <__aeabi_uldivmod>
 8018f34:	4602      	mov	r2, r0
 8018f36:	460b      	mov	r3, r1
 8018f38:	4613      	mov	r3, r2
 8018f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018f42:	d308      	bcc.n	8018f56 <UART_SetConfig+0x9a2>
 8018f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018f4a:	d204      	bcs.n	8018f56 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8018f4c:	697b      	ldr	r3, [r7, #20]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018f52:	60da      	str	r2, [r3, #12]
 8018f54:	e17f      	b.n	8019256 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8018f56:	2301      	movs	r3, #1
 8018f58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018f5c:	e17b      	b.n	8019256 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018f5e:	697b      	ldr	r3, [r7, #20]
 8018f60:	69db      	ldr	r3, [r3, #28]
 8018f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018f66:	f040 80bd 	bne.w	80190e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8018f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018f6e:	2b20      	cmp	r3, #32
 8018f70:	dc48      	bgt.n	8019004 <UART_SetConfig+0xa50>
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	db7b      	blt.n	801906e <UART_SetConfig+0xaba>
 8018f76:	2b20      	cmp	r3, #32
 8018f78:	d879      	bhi.n	801906e <UART_SetConfig+0xaba>
 8018f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8018f80 <UART_SetConfig+0x9cc>)
 8018f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f80:	0801900b 	.word	0x0801900b
 8018f84:	08019013 	.word	0x08019013
 8018f88:	0801906f 	.word	0x0801906f
 8018f8c:	0801906f 	.word	0x0801906f
 8018f90:	0801901b 	.word	0x0801901b
 8018f94:	0801906f 	.word	0x0801906f
 8018f98:	0801906f 	.word	0x0801906f
 8018f9c:	0801906f 	.word	0x0801906f
 8018fa0:	0801902b 	.word	0x0801902b
 8018fa4:	0801906f 	.word	0x0801906f
 8018fa8:	0801906f 	.word	0x0801906f
 8018fac:	0801906f 	.word	0x0801906f
 8018fb0:	0801906f 	.word	0x0801906f
 8018fb4:	0801906f 	.word	0x0801906f
 8018fb8:	0801906f 	.word	0x0801906f
 8018fbc:	0801906f 	.word	0x0801906f
 8018fc0:	0801903b 	.word	0x0801903b
 8018fc4:	0801906f 	.word	0x0801906f
 8018fc8:	0801906f 	.word	0x0801906f
 8018fcc:	0801906f 	.word	0x0801906f
 8018fd0:	0801906f 	.word	0x0801906f
 8018fd4:	0801906f 	.word	0x0801906f
 8018fd8:	0801906f 	.word	0x0801906f
 8018fdc:	0801906f 	.word	0x0801906f
 8018fe0:	0801906f 	.word	0x0801906f
 8018fe4:	0801906f 	.word	0x0801906f
 8018fe8:	0801906f 	.word	0x0801906f
 8018fec:	0801906f 	.word	0x0801906f
 8018ff0:	0801906f 	.word	0x0801906f
 8018ff4:	0801906f 	.word	0x0801906f
 8018ff8:	0801906f 	.word	0x0801906f
 8018ffc:	0801906f 	.word	0x0801906f
 8019000:	08019061 	.word	0x08019061
 8019004:	2b40      	cmp	r3, #64	@ 0x40
 8019006:	d02e      	beq.n	8019066 <UART_SetConfig+0xab2>
 8019008:	e031      	b.n	801906e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801900a:	f7f8 fa99 	bl	8011540 <HAL_RCC_GetPCLK1Freq>
 801900e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019010:	e033      	b.n	801907a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019012:	f7f8 faab 	bl	801156c <HAL_RCC_GetPCLK2Freq>
 8019016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019018:	e02f      	b.n	801907a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801901a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801901e:	4618      	mov	r0, r3
 8019020:	f7fa f942 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019028:	e027      	b.n	801907a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801902a:	f107 0318 	add.w	r3, r7, #24
 801902e:	4618      	mov	r0, r3
 8019030:	f7fa fa8e 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019034:	69fb      	ldr	r3, [r7, #28]
 8019036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019038:	e01f      	b.n	801907a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801903a:	4b69      	ldr	r3, [pc, #420]	@ (80191e0 <UART_SetConfig+0xc2c>)
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	f003 0320 	and.w	r3, r3, #32
 8019042:	2b00      	cmp	r3, #0
 8019044:	d009      	beq.n	801905a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019046:	4b66      	ldr	r3, [pc, #408]	@ (80191e0 <UART_SetConfig+0xc2c>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	08db      	lsrs	r3, r3, #3
 801904c:	f003 0303 	and.w	r3, r3, #3
 8019050:	4a64      	ldr	r2, [pc, #400]	@ (80191e4 <UART_SetConfig+0xc30>)
 8019052:	fa22 f303 	lsr.w	r3, r2, r3
 8019056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019058:	e00f      	b.n	801907a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801905a:	4b62      	ldr	r3, [pc, #392]	@ (80191e4 <UART_SetConfig+0xc30>)
 801905c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801905e:	e00c      	b.n	801907a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019060:	4b61      	ldr	r3, [pc, #388]	@ (80191e8 <UART_SetConfig+0xc34>)
 8019062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019064:	e009      	b.n	801907a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801906a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801906c:	e005      	b.n	801907a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801906e:	2300      	movs	r3, #0
 8019070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019072:	2301      	movs	r3, #1
 8019074:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801907a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801907c:	2b00      	cmp	r3, #0
 801907e:	f000 80ea 	beq.w	8019256 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019082:	697b      	ldr	r3, [r7, #20]
 8019084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019086:	4a55      	ldr	r2, [pc, #340]	@ (80191dc <UART_SetConfig+0xc28>)
 8019088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801908c:	461a      	mov	r2, r3
 801908e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019090:	fbb3 f3f2 	udiv	r3, r3, r2
 8019094:	005a      	lsls	r2, r3, #1
 8019096:	697b      	ldr	r3, [r7, #20]
 8019098:	685b      	ldr	r3, [r3, #4]
 801909a:	085b      	lsrs	r3, r3, #1
 801909c:	441a      	add	r2, r3
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	685b      	ldr	r3, [r3, #4]
 80190a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80190a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80190a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190aa:	2b0f      	cmp	r3, #15
 80190ac:	d916      	bls.n	80190dc <UART_SetConfig+0xb28>
 80190ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80190b4:	d212      	bcs.n	80190dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80190b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190b8:	b29b      	uxth	r3, r3
 80190ba:	f023 030f 	bic.w	r3, r3, #15
 80190be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80190c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190c2:	085b      	lsrs	r3, r3, #1
 80190c4:	b29b      	uxth	r3, r3
 80190c6:	f003 0307 	and.w	r3, r3, #7
 80190ca:	b29a      	uxth	r2, r3
 80190cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80190ce:	4313      	orrs	r3, r2
 80190d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80190d8:	60da      	str	r2, [r3, #12]
 80190da:	e0bc      	b.n	8019256 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80190dc:	2301      	movs	r3, #1
 80190de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80190e2:	e0b8      	b.n	8019256 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80190e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80190e8:	2b20      	cmp	r3, #32
 80190ea:	dc4b      	bgt.n	8019184 <UART_SetConfig+0xbd0>
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	f2c0 8087 	blt.w	8019200 <UART_SetConfig+0xc4c>
 80190f2:	2b20      	cmp	r3, #32
 80190f4:	f200 8084 	bhi.w	8019200 <UART_SetConfig+0xc4c>
 80190f8:	a201      	add	r2, pc, #4	@ (adr r2, 8019100 <UART_SetConfig+0xb4c>)
 80190fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190fe:	bf00      	nop
 8019100:	0801918b 	.word	0x0801918b
 8019104:	08019193 	.word	0x08019193
 8019108:	08019201 	.word	0x08019201
 801910c:	08019201 	.word	0x08019201
 8019110:	0801919b 	.word	0x0801919b
 8019114:	08019201 	.word	0x08019201
 8019118:	08019201 	.word	0x08019201
 801911c:	08019201 	.word	0x08019201
 8019120:	080191ab 	.word	0x080191ab
 8019124:	08019201 	.word	0x08019201
 8019128:	08019201 	.word	0x08019201
 801912c:	08019201 	.word	0x08019201
 8019130:	08019201 	.word	0x08019201
 8019134:	08019201 	.word	0x08019201
 8019138:	08019201 	.word	0x08019201
 801913c:	08019201 	.word	0x08019201
 8019140:	080191bb 	.word	0x080191bb
 8019144:	08019201 	.word	0x08019201
 8019148:	08019201 	.word	0x08019201
 801914c:	08019201 	.word	0x08019201
 8019150:	08019201 	.word	0x08019201
 8019154:	08019201 	.word	0x08019201
 8019158:	08019201 	.word	0x08019201
 801915c:	08019201 	.word	0x08019201
 8019160:	08019201 	.word	0x08019201
 8019164:	08019201 	.word	0x08019201
 8019168:	08019201 	.word	0x08019201
 801916c:	08019201 	.word	0x08019201
 8019170:	08019201 	.word	0x08019201
 8019174:	08019201 	.word	0x08019201
 8019178:	08019201 	.word	0x08019201
 801917c:	08019201 	.word	0x08019201
 8019180:	080191f3 	.word	0x080191f3
 8019184:	2b40      	cmp	r3, #64	@ 0x40
 8019186:	d037      	beq.n	80191f8 <UART_SetConfig+0xc44>
 8019188:	e03a      	b.n	8019200 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801918a:	f7f8 f9d9 	bl	8011540 <HAL_RCC_GetPCLK1Freq>
 801918e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019190:	e03c      	b.n	801920c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019192:	f7f8 f9eb 	bl	801156c <HAL_RCC_GetPCLK2Freq>
 8019196:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019198:	e038      	b.n	801920c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801919a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801919e:	4618      	mov	r0, r3
 80191a0:	f7fa f882 	bl	80132a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80191a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191a8:	e030      	b.n	801920c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80191aa:	f107 0318 	add.w	r3, r7, #24
 80191ae:	4618      	mov	r0, r3
 80191b0:	f7fa f9ce 	bl	8013550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80191b4:	69fb      	ldr	r3, [r7, #28]
 80191b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191b8:	e028      	b.n	801920c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80191ba:	4b09      	ldr	r3, [pc, #36]	@ (80191e0 <UART_SetConfig+0xc2c>)
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	f003 0320 	and.w	r3, r3, #32
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d012      	beq.n	80191ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80191c6:	4b06      	ldr	r3, [pc, #24]	@ (80191e0 <UART_SetConfig+0xc2c>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	08db      	lsrs	r3, r3, #3
 80191cc:	f003 0303 	and.w	r3, r3, #3
 80191d0:	4a04      	ldr	r2, [pc, #16]	@ (80191e4 <UART_SetConfig+0xc30>)
 80191d2:	fa22 f303 	lsr.w	r3, r2, r3
 80191d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80191d8:	e018      	b.n	801920c <UART_SetConfig+0xc58>
 80191da:	bf00      	nop
 80191dc:	0801e7a8 	.word	0x0801e7a8
 80191e0:	58024400 	.word	0x58024400
 80191e4:	03d09000 	.word	0x03d09000
 80191e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80191ec:	4b24      	ldr	r3, [pc, #144]	@ (8019280 <UART_SetConfig+0xccc>)
 80191ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191f0:	e00c      	b.n	801920c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80191f2:	4b24      	ldr	r3, [pc, #144]	@ (8019284 <UART_SetConfig+0xcd0>)
 80191f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191f6:	e009      	b.n	801920c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80191f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80191fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191fe:	e005      	b.n	801920c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019200:	2300      	movs	r3, #0
 8019202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019204:	2301      	movs	r3, #1
 8019206:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801920a:	bf00      	nop
    }

    if (pclk != 0U)
 801920c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801920e:	2b00      	cmp	r3, #0
 8019210:	d021      	beq.n	8019256 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019212:	697b      	ldr	r3, [r7, #20]
 8019214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019216:	4a1c      	ldr	r2, [pc, #112]	@ (8019288 <UART_SetConfig+0xcd4>)
 8019218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801921c:	461a      	mov	r2, r3
 801921e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019220:	fbb3 f2f2 	udiv	r2, r3, r2
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	685b      	ldr	r3, [r3, #4]
 8019228:	085b      	lsrs	r3, r3, #1
 801922a:	441a      	add	r2, r3
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	685b      	ldr	r3, [r3, #4]
 8019230:	fbb2 f3f3 	udiv	r3, r2, r3
 8019234:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019238:	2b0f      	cmp	r3, #15
 801923a:	d909      	bls.n	8019250 <UART_SetConfig+0xc9c>
 801923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801923e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019242:	d205      	bcs.n	8019250 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019246:	b29a      	uxth	r2, r3
 8019248:	697b      	ldr	r3, [r7, #20]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	60da      	str	r2, [r3, #12]
 801924e:	e002      	b.n	8019256 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019250:	2301      	movs	r3, #1
 8019252:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019256:	697b      	ldr	r3, [r7, #20]
 8019258:	2201      	movs	r2, #1
 801925a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801925e:	697b      	ldr	r3, [r7, #20]
 8019260:	2201      	movs	r2, #1
 8019262:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019266:	697b      	ldr	r3, [r7, #20]
 8019268:	2200      	movs	r2, #0
 801926a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801926c:	697b      	ldr	r3, [r7, #20]
 801926e:	2200      	movs	r2, #0
 8019270:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8019272:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8019276:	4618      	mov	r0, r3
 8019278:	3748      	adds	r7, #72	@ 0x48
 801927a:	46bd      	mov	sp, r7
 801927c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019280:	03d09000 	.word	0x03d09000
 8019284:	003d0900 	.word	0x003d0900
 8019288:	0801e7a8 	.word	0x0801e7a8

0801928c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801928c:	b480      	push	{r7}
 801928e:	b083      	sub	sp, #12
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019298:	f003 0308 	and.w	r3, r3, #8
 801929c:	2b00      	cmp	r3, #0
 801929e:	d00a      	beq.n	80192b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	685b      	ldr	r3, [r3, #4]
 80192a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	430a      	orrs	r2, r1
 80192b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192ba:	f003 0301 	and.w	r3, r3, #1
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d00a      	beq.n	80192d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	685b      	ldr	r3, [r3, #4]
 80192c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	430a      	orrs	r2, r1
 80192d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192dc:	f003 0302 	and.w	r3, r3, #2
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d00a      	beq.n	80192fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	685b      	ldr	r3, [r3, #4]
 80192ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	430a      	orrs	r2, r1
 80192f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192fe:	f003 0304 	and.w	r3, r3, #4
 8019302:	2b00      	cmp	r3, #0
 8019304:	d00a      	beq.n	801931c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	685b      	ldr	r3, [r3, #4]
 801930c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	430a      	orrs	r2, r1
 801931a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019320:	f003 0310 	and.w	r3, r3, #16
 8019324:	2b00      	cmp	r3, #0
 8019326:	d00a      	beq.n	801933e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	689b      	ldr	r3, [r3, #8]
 801932e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	430a      	orrs	r2, r1
 801933c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019342:	f003 0320 	and.w	r3, r3, #32
 8019346:	2b00      	cmp	r3, #0
 8019348:	d00a      	beq.n	8019360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	689b      	ldr	r3, [r3, #8]
 8019350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	430a      	orrs	r2, r1
 801935e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019368:	2b00      	cmp	r3, #0
 801936a:	d01a      	beq.n	80193a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	685b      	ldr	r3, [r3, #4]
 8019372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	430a      	orrs	r2, r1
 8019380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801938a:	d10a      	bne.n	80193a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	430a      	orrs	r2, r1
 80193a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d00a      	beq.n	80193c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	430a      	orrs	r2, r1
 80193c2:	605a      	str	r2, [r3, #4]
  }
}
 80193c4:	bf00      	nop
 80193c6:	370c      	adds	r7, #12
 80193c8:	46bd      	mov	sp, r7
 80193ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ce:	4770      	bx	lr

080193d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b098      	sub	sp, #96	@ 0x60
 80193d4:	af02      	add	r7, sp, #8
 80193d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	2200      	movs	r2, #0
 80193dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80193e0:	f7ef fb4a 	bl	8008a78 <HAL_GetTick>
 80193e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	f003 0308 	and.w	r3, r3, #8
 80193f0:	2b08      	cmp	r3, #8
 80193f2:	d12f      	bne.n	8019454 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80193f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80193f8:	9300      	str	r3, [sp, #0]
 80193fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193fc:	2200      	movs	r2, #0
 80193fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8019402:	6878      	ldr	r0, [r7, #4]
 8019404:	f000 f88e 	bl	8019524 <UART_WaitOnFlagUntilTimeout>
 8019408:	4603      	mov	r3, r0
 801940a:	2b00      	cmp	r3, #0
 801940c:	d022      	beq.n	8019454 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019416:	e853 3f00 	ldrex	r3, [r3]
 801941a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801941c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801941e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019422:	653b      	str	r3, [r7, #80]	@ 0x50
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	461a      	mov	r2, r3
 801942a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801942c:	647b      	str	r3, [r7, #68]	@ 0x44
 801942e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019434:	e841 2300 	strex	r3, r2, [r1]
 8019438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801943a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801943c:	2b00      	cmp	r3, #0
 801943e:	d1e6      	bne.n	801940e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	2220      	movs	r2, #32
 8019444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2200      	movs	r2, #0
 801944c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019450:	2303      	movs	r3, #3
 8019452:	e063      	b.n	801951c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	f003 0304 	and.w	r3, r3, #4
 801945e:	2b04      	cmp	r3, #4
 8019460:	d149      	bne.n	80194f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019462:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019466:	9300      	str	r3, [sp, #0]
 8019468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801946a:	2200      	movs	r2, #0
 801946c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019470:	6878      	ldr	r0, [r7, #4]
 8019472:	f000 f857 	bl	8019524 <UART_WaitOnFlagUntilTimeout>
 8019476:	4603      	mov	r3, r0
 8019478:	2b00      	cmp	r3, #0
 801947a:	d03c      	beq.n	80194f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019484:	e853 3f00 	ldrex	r3, [r3]
 8019488:	623b      	str	r3, [r7, #32]
   return(result);
 801948a:	6a3b      	ldr	r3, [r7, #32]
 801948c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	461a      	mov	r2, r3
 8019498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801949a:	633b      	str	r3, [r7, #48]	@ 0x30
 801949c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801949e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80194a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80194a2:	e841 2300 	strex	r3, r2, [r1]
 80194a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80194a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d1e6      	bne.n	801947c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	3308      	adds	r3, #8
 80194b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194b6:	693b      	ldr	r3, [r7, #16]
 80194b8:	e853 3f00 	ldrex	r3, [r3]
 80194bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	f023 0301 	bic.w	r3, r3, #1
 80194c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	3308      	adds	r3, #8
 80194cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80194ce:	61fa      	str	r2, [r7, #28]
 80194d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194d2:	69b9      	ldr	r1, [r7, #24]
 80194d4:	69fa      	ldr	r2, [r7, #28]
 80194d6:	e841 2300 	strex	r3, r2, [r1]
 80194da:	617b      	str	r3, [r7, #20]
   return(result);
 80194dc:	697b      	ldr	r3, [r7, #20]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d1e5      	bne.n	80194ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	2220      	movs	r2, #32
 80194e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	2200      	movs	r2, #0
 80194ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80194f2:	2303      	movs	r3, #3
 80194f4:	e012      	b.n	801951c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	2220      	movs	r2, #32
 80194fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2220      	movs	r2, #32
 8019502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	2200      	movs	r2, #0
 801950a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2200      	movs	r2, #0
 8019510:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2200      	movs	r2, #0
 8019516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801951a:	2300      	movs	r3, #0
}
 801951c:	4618      	mov	r0, r3
 801951e:	3758      	adds	r7, #88	@ 0x58
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}

08019524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b084      	sub	sp, #16
 8019528:	af00      	add	r7, sp, #0
 801952a:	60f8      	str	r0, [r7, #12]
 801952c:	60b9      	str	r1, [r7, #8]
 801952e:	603b      	str	r3, [r7, #0]
 8019530:	4613      	mov	r3, r2
 8019532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019534:	e04f      	b.n	80195d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019536:	69bb      	ldr	r3, [r7, #24]
 8019538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801953c:	d04b      	beq.n	80195d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801953e:	f7ef fa9b 	bl	8008a78 <HAL_GetTick>
 8019542:	4602      	mov	r2, r0
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	1ad3      	subs	r3, r2, r3
 8019548:	69ba      	ldr	r2, [r7, #24]
 801954a:	429a      	cmp	r2, r3
 801954c:	d302      	bcc.n	8019554 <UART_WaitOnFlagUntilTimeout+0x30>
 801954e:	69bb      	ldr	r3, [r7, #24]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d101      	bne.n	8019558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8019554:	2303      	movs	r3, #3
 8019556:	e04e      	b.n	80195f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	f003 0304 	and.w	r3, r3, #4
 8019562:	2b00      	cmp	r3, #0
 8019564:	d037      	beq.n	80195d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8019566:	68bb      	ldr	r3, [r7, #8]
 8019568:	2b80      	cmp	r3, #128	@ 0x80
 801956a:	d034      	beq.n	80195d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801956c:	68bb      	ldr	r3, [r7, #8]
 801956e:	2b40      	cmp	r3, #64	@ 0x40
 8019570:	d031      	beq.n	80195d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	69db      	ldr	r3, [r3, #28]
 8019578:	f003 0308 	and.w	r3, r3, #8
 801957c:	2b08      	cmp	r3, #8
 801957e:	d110      	bne.n	80195a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	2208      	movs	r2, #8
 8019586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019588:	68f8      	ldr	r0, [r7, #12]
 801958a:	f000 f95b 	bl	8019844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	2208      	movs	r2, #8
 8019592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	2200      	movs	r2, #0
 801959a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801959e:	2301      	movs	r3, #1
 80195a0:	e029      	b.n	80195f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	69db      	ldr	r3, [r3, #28]
 80195a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80195ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80195b0:	d111      	bne.n	80195d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80195ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80195bc:	68f8      	ldr	r0, [r7, #12]
 80195be:	f000 f941 	bl	8019844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	2220      	movs	r2, #32
 80195c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	2200      	movs	r2, #0
 80195ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80195d2:	2303      	movs	r3, #3
 80195d4:	e00f      	b.n	80195f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	69da      	ldr	r2, [r3, #28]
 80195dc:	68bb      	ldr	r3, [r7, #8]
 80195de:	4013      	ands	r3, r2
 80195e0:	68ba      	ldr	r2, [r7, #8]
 80195e2:	429a      	cmp	r2, r3
 80195e4:	bf0c      	ite	eq
 80195e6:	2301      	moveq	r3, #1
 80195e8:	2300      	movne	r3, #0
 80195ea:	b2db      	uxtb	r3, r3
 80195ec:	461a      	mov	r2, r3
 80195ee:	79fb      	ldrb	r3, [r7, #7]
 80195f0:	429a      	cmp	r2, r3
 80195f2:	d0a0      	beq.n	8019536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80195f4:	2300      	movs	r3, #0
}
 80195f6:	4618      	mov	r0, r3
 80195f8:	3710      	adds	r7, #16
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}
	...

08019600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019600:	b480      	push	{r7}
 8019602:	b0a3      	sub	sp, #140	@ 0x8c
 8019604:	af00      	add	r7, sp, #0
 8019606:	60f8      	str	r0, [r7, #12]
 8019608:	60b9      	str	r1, [r7, #8]
 801960a:	4613      	mov	r3, r2
 801960c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	68ba      	ldr	r2, [r7, #8]
 8019612:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	88fa      	ldrh	r2, [r7, #6]
 8019618:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	88fa      	ldrh	r2, [r7, #6]
 8019620:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	2200      	movs	r2, #0
 8019628:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	689b      	ldr	r3, [r3, #8]
 801962e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019632:	d10e      	bne.n	8019652 <UART_Start_Receive_IT+0x52>
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	691b      	ldr	r3, [r3, #16]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d105      	bne.n	8019648 <UART_Start_Receive_IT+0x48>
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019642:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019646:	e02d      	b.n	80196a4 <UART_Start_Receive_IT+0xa4>
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	22ff      	movs	r2, #255	@ 0xff
 801964c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019650:	e028      	b.n	80196a4 <UART_Start_Receive_IT+0xa4>
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	689b      	ldr	r3, [r3, #8]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d10d      	bne.n	8019676 <UART_Start_Receive_IT+0x76>
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	691b      	ldr	r3, [r3, #16]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d104      	bne.n	801966c <UART_Start_Receive_IT+0x6c>
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	22ff      	movs	r2, #255	@ 0xff
 8019666:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801966a:	e01b      	b.n	80196a4 <UART_Start_Receive_IT+0xa4>
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	227f      	movs	r2, #127	@ 0x7f
 8019670:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019674:	e016      	b.n	80196a4 <UART_Start_Receive_IT+0xa4>
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	689b      	ldr	r3, [r3, #8]
 801967a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801967e:	d10d      	bne.n	801969c <UART_Start_Receive_IT+0x9c>
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	691b      	ldr	r3, [r3, #16]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d104      	bne.n	8019692 <UART_Start_Receive_IT+0x92>
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	227f      	movs	r2, #127	@ 0x7f
 801968c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019690:	e008      	b.n	80196a4 <UART_Start_Receive_IT+0xa4>
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	223f      	movs	r2, #63	@ 0x3f
 8019696:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801969a:	e003      	b.n	80196a4 <UART_Start_Receive_IT+0xa4>
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	2200      	movs	r2, #0
 80196a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	2200      	movs	r2, #0
 80196a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	2222      	movs	r2, #34	@ 0x22
 80196b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	3308      	adds	r3, #8
 80196ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80196be:	e853 3f00 	ldrex	r3, [r3]
 80196c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80196c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80196c6:	f043 0301 	orr.w	r3, r3, #1
 80196ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	3308      	adds	r3, #8
 80196d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80196d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80196da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80196de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80196e0:	e841 2300 	strex	r3, r2, [r1]
 80196e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80196e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d1e3      	bne.n	80196b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80196f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80196f4:	d14f      	bne.n	8019796 <UART_Start_Receive_IT+0x196>
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80196fc:	88fa      	ldrh	r2, [r7, #6]
 80196fe:	429a      	cmp	r2, r3
 8019700:	d349      	bcc.n	8019796 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	689b      	ldr	r3, [r3, #8]
 8019706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801970a:	d107      	bne.n	801971c <UART_Start_Receive_IT+0x11c>
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	691b      	ldr	r3, [r3, #16]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d103      	bne.n	801971c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	4a47      	ldr	r2, [pc, #284]	@ (8019834 <UART_Start_Receive_IT+0x234>)
 8019718:	675a      	str	r2, [r3, #116]	@ 0x74
 801971a:	e002      	b.n	8019722 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	4a46      	ldr	r2, [pc, #280]	@ (8019838 <UART_Start_Receive_IT+0x238>)
 8019720:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	691b      	ldr	r3, [r3, #16]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d01a      	beq.n	8019760 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019732:	e853 3f00 	ldrex	r3, [r3]
 8019736:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801973a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801973e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	461a      	mov	r2, r3
 8019748:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801974c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801974e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019750:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019752:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019754:	e841 2300 	strex	r3, r2, [r1]
 8019758:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801975a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801975c:	2b00      	cmp	r3, #0
 801975e:	d1e4      	bne.n	801972a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	3308      	adds	r3, #8
 8019766:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801976a:	e853 3f00 	ldrex	r3, [r3]
 801976e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019776:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	3308      	adds	r3, #8
 801977e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019780:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019782:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019784:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019788:	e841 2300 	strex	r3, r2, [r1]
 801978c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801978e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019790:	2b00      	cmp	r3, #0
 8019792:	d1e5      	bne.n	8019760 <UART_Start_Receive_IT+0x160>
 8019794:	e046      	b.n	8019824 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	689b      	ldr	r3, [r3, #8]
 801979a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801979e:	d107      	bne.n	80197b0 <UART_Start_Receive_IT+0x1b0>
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	691b      	ldr	r3, [r3, #16]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d103      	bne.n	80197b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	4a24      	ldr	r2, [pc, #144]	@ (801983c <UART_Start_Receive_IT+0x23c>)
 80197ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80197ae:	e002      	b.n	80197b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	4a23      	ldr	r2, [pc, #140]	@ (8019840 <UART_Start_Receive_IT+0x240>)
 80197b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	691b      	ldr	r3, [r3, #16]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d019      	beq.n	80197f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197c6:	e853 3f00 	ldrex	r3, [r3]
 80197ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80197cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197ce:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80197d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	461a      	mov	r2, r3
 80197da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80197dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80197de:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80197e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80197e4:	e841 2300 	strex	r3, r2, [r1]
 80197e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80197ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d1e6      	bne.n	80197be <UART_Start_Receive_IT+0x1be>
 80197f0:	e018      	b.n	8019824 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197f8:	697b      	ldr	r3, [r7, #20]
 80197fa:	e853 3f00 	ldrex	r3, [r3]
 80197fe:	613b      	str	r3, [r7, #16]
   return(result);
 8019800:	693b      	ldr	r3, [r7, #16]
 8019802:	f043 0320 	orr.w	r3, r3, #32
 8019806:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	461a      	mov	r2, r3
 801980e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019810:	623b      	str	r3, [r7, #32]
 8019812:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019814:	69f9      	ldr	r1, [r7, #28]
 8019816:	6a3a      	ldr	r2, [r7, #32]
 8019818:	e841 2300 	strex	r3, r2, [r1]
 801981c:	61bb      	str	r3, [r7, #24]
   return(result);
 801981e:	69bb      	ldr	r3, [r7, #24]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d1e6      	bne.n	80197f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019824:	2300      	movs	r3, #0
}
 8019826:	4618      	mov	r0, r3
 8019828:	378c      	adds	r7, #140	@ 0x8c
 801982a:	46bd      	mov	sp, r7
 801982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019830:	4770      	bx	lr
 8019832:	bf00      	nop
 8019834:	0801a3a5 	.word	0x0801a3a5
 8019838:	0801a041 	.word	0x0801a041
 801983c:	08019e89 	.word	0x08019e89
 8019840:	08019cd1 	.word	0x08019cd1

08019844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019844:	b480      	push	{r7}
 8019846:	b095      	sub	sp, #84	@ 0x54
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019854:	e853 3f00 	ldrex	r3, [r3]
 8019858:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801985c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019860:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	461a      	mov	r2, r3
 8019868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801986a:	643b      	str	r3, [r7, #64]	@ 0x40
 801986c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801986e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019870:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019872:	e841 2300 	strex	r3, r2, [r1]
 8019876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801987a:	2b00      	cmp	r3, #0
 801987c:	d1e6      	bne.n	801984c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	3308      	adds	r3, #8
 8019884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019886:	6a3b      	ldr	r3, [r7, #32]
 8019888:	e853 3f00 	ldrex	r3, [r3]
 801988c:	61fb      	str	r3, [r7, #28]
   return(result);
 801988e:	69fa      	ldr	r2, [r7, #28]
 8019890:	4b1e      	ldr	r3, [pc, #120]	@ (801990c <UART_EndRxTransfer+0xc8>)
 8019892:	4013      	ands	r3, r2
 8019894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	3308      	adds	r3, #8
 801989c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801989e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80198a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80198a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80198a6:	e841 2300 	strex	r3, r2, [r1]
 80198aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80198ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d1e5      	bne.n	801987e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198b6:	2b01      	cmp	r3, #1
 80198b8:	d118      	bne.n	80198ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	e853 3f00 	ldrex	r3, [r3]
 80198c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80198c8:	68bb      	ldr	r3, [r7, #8]
 80198ca:	f023 0310 	bic.w	r3, r3, #16
 80198ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	461a      	mov	r2, r3
 80198d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80198d8:	61bb      	str	r3, [r7, #24]
 80198da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198dc:	6979      	ldr	r1, [r7, #20]
 80198de:	69ba      	ldr	r2, [r7, #24]
 80198e0:	e841 2300 	strex	r3, r2, [r1]
 80198e4:	613b      	str	r3, [r7, #16]
   return(result);
 80198e6:	693b      	ldr	r3, [r7, #16]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d1e6      	bne.n	80198ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	2220      	movs	r2, #32
 80198f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	2200      	movs	r2, #0
 80198f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	2200      	movs	r2, #0
 80198fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019900:	bf00      	nop
 8019902:	3754      	adds	r7, #84	@ 0x54
 8019904:	46bd      	mov	sp, r7
 8019906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801990a:	4770      	bx	lr
 801990c:	effffffe 	.word	0xeffffffe

08019910 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b084      	sub	sp, #16
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801991c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	2200      	movs	r2, #0
 8019922:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019926:	68f8      	ldr	r0, [r7, #12]
 8019928:	f7fe fe2e 	bl	8018588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801992c:	bf00      	nop
 801992e:	3710      	adds	r7, #16
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}

08019934 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019934:	b480      	push	{r7}
 8019936:	b08f      	sub	sp, #60	@ 0x3c
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019942:	2b21      	cmp	r3, #33	@ 0x21
 8019944:	d14c      	bne.n	80199e0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801994c:	b29b      	uxth	r3, r3
 801994e:	2b00      	cmp	r3, #0
 8019950:	d132      	bne.n	80199b8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019958:	6a3b      	ldr	r3, [r7, #32]
 801995a:	e853 3f00 	ldrex	r3, [r3]
 801995e:	61fb      	str	r3, [r7, #28]
   return(result);
 8019960:	69fb      	ldr	r3, [r7, #28]
 8019962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019966:	637b      	str	r3, [r7, #52]	@ 0x34
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	461a      	mov	r2, r3
 801996e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019972:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019974:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019978:	e841 2300 	strex	r3, r2, [r1]
 801997c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019980:	2b00      	cmp	r3, #0
 8019982:	d1e6      	bne.n	8019952 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	e853 3f00 	ldrex	r3, [r3]
 8019990:	60bb      	str	r3, [r7, #8]
   return(result);
 8019992:	68bb      	ldr	r3, [r7, #8]
 8019994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019998:	633b      	str	r3, [r7, #48]	@ 0x30
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	461a      	mov	r2, r3
 80199a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199a2:	61bb      	str	r3, [r7, #24]
 80199a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80199a6:	6979      	ldr	r1, [r7, #20]
 80199a8:	69ba      	ldr	r2, [r7, #24]
 80199aa:	e841 2300 	strex	r3, r2, [r1]
 80199ae:	613b      	str	r3, [r7, #16]
   return(result);
 80199b0:	693b      	ldr	r3, [r7, #16]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d1e6      	bne.n	8019984 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80199b6:	e013      	b.n	80199e0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80199bc:	781a      	ldrb	r2, [r3, #0]
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80199c8:	1c5a      	adds	r2, r3, #1
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80199d4:	b29b      	uxth	r3, r3
 80199d6:	3b01      	subs	r3, #1
 80199d8:	b29a      	uxth	r2, r3
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80199e0:	bf00      	nop
 80199e2:	373c      	adds	r7, #60	@ 0x3c
 80199e4:	46bd      	mov	sp, r7
 80199e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ea:	4770      	bx	lr

080199ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80199ec:	b480      	push	{r7}
 80199ee:	b091      	sub	sp, #68	@ 0x44
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80199fa:	2b21      	cmp	r3, #33	@ 0x21
 80199fc:	d151      	bne.n	8019aa2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a04:	b29b      	uxth	r3, r3
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d132      	bne.n	8019a70 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a12:	e853 3f00 	ldrex	r3, [r3]
 8019a16:	623b      	str	r3, [r7, #32]
   return(result);
 8019a18:	6a3b      	ldr	r3, [r7, #32]
 8019a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	461a      	mov	r2, r3
 8019a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8019a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019a30:	e841 2300 	strex	r3, r2, [r1]
 8019a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d1e6      	bne.n	8019a0a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a42:	693b      	ldr	r3, [r7, #16]
 8019a44:	e853 3f00 	ldrex	r3, [r3]
 8019a48:	60fb      	str	r3, [r7, #12]
   return(result);
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	461a      	mov	r2, r3
 8019a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a5a:	61fb      	str	r3, [r7, #28]
 8019a5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a5e:	69b9      	ldr	r1, [r7, #24]
 8019a60:	69fa      	ldr	r2, [r7, #28]
 8019a62:	e841 2300 	strex	r3, r2, [r1]
 8019a66:	617b      	str	r3, [r7, #20]
   return(result);
 8019a68:	697b      	ldr	r3, [r7, #20]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d1e6      	bne.n	8019a3c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019a6e:	e018      	b.n	8019aa2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a78:	881b      	ldrh	r3, [r3, #0]
 8019a7a:	461a      	mov	r2, r3
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019a84:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a8a:	1c9a      	adds	r2, r3, #2
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a96:	b29b      	uxth	r3, r3
 8019a98:	3b01      	subs	r3, #1
 8019a9a:	b29a      	uxth	r2, r3
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019aa2:	bf00      	nop
 8019aa4:	3744      	adds	r7, #68	@ 0x44
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aac:	4770      	bx	lr

08019aae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019aae:	b480      	push	{r7}
 8019ab0:	b091      	sub	sp, #68	@ 0x44
 8019ab2:	af00      	add	r7, sp, #0
 8019ab4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019abc:	2b21      	cmp	r3, #33	@ 0x21
 8019abe:	d160      	bne.n	8019b82 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019ac6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019ac8:	e057      	b.n	8019b7a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ad0:	b29b      	uxth	r3, r3
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d133      	bne.n	8019b3e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	3308      	adds	r3, #8
 8019adc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ae0:	e853 3f00 	ldrex	r3, [r3]
 8019ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8019ae6:	6a3b      	ldr	r3, [r7, #32]
 8019ae8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	3308      	adds	r3, #8
 8019af4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019af6:	633a      	str	r2, [r7, #48]	@ 0x30
 8019af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019afe:	e841 2300 	strex	r3, r2, [r1]
 8019b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d1e5      	bne.n	8019ad6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b10:	693b      	ldr	r3, [r7, #16]
 8019b12:	e853 3f00 	ldrex	r3, [r3]
 8019b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	461a      	mov	r2, r3
 8019b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b28:	61fb      	str	r3, [r7, #28]
 8019b2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b2c:	69b9      	ldr	r1, [r7, #24]
 8019b2e:	69fa      	ldr	r2, [r7, #28]
 8019b30:	e841 2300 	strex	r3, r2, [r1]
 8019b34:	617b      	str	r3, [r7, #20]
   return(result);
 8019b36:	697b      	ldr	r3, [r7, #20]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d1e6      	bne.n	8019b0a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019b3c:	e021      	b.n	8019b82 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	69db      	ldr	r3, [r3, #28]
 8019b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d013      	beq.n	8019b74 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b50:	781a      	ldrb	r2, [r3, #0]
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b5c:	1c5a      	adds	r2, r3, #1
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b68:	b29b      	uxth	r3, r3
 8019b6a:	3b01      	subs	r3, #1
 8019b6c:	b29a      	uxth	r2, r3
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019b74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b76:	3b01      	subs	r3, #1
 8019b78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019b7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d1a4      	bne.n	8019aca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019b80:	e7ff      	b.n	8019b82 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019b82:	bf00      	nop
 8019b84:	3744      	adds	r7, #68	@ 0x44
 8019b86:	46bd      	mov	sp, r7
 8019b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b8c:	4770      	bx	lr

08019b8e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019b8e:	b480      	push	{r7}
 8019b90:	b091      	sub	sp, #68	@ 0x44
 8019b92:	af00      	add	r7, sp, #0
 8019b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019b9c:	2b21      	cmp	r3, #33	@ 0x21
 8019b9e:	d165      	bne.n	8019c6c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019ba6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019ba8:	e05c      	b.n	8019c64 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019bb0:	b29b      	uxth	r3, r3
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d133      	bne.n	8019c1e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	3308      	adds	r3, #8
 8019bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bbe:	6a3b      	ldr	r3, [r7, #32]
 8019bc0:	e853 3f00 	ldrex	r3, [r3]
 8019bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8019bc6:	69fb      	ldr	r3, [r7, #28]
 8019bc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	3308      	adds	r3, #8
 8019bd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019bde:	e841 2300 	strex	r3, r2, [r1]
 8019be2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d1e5      	bne.n	8019bb6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	e853 3f00 	ldrex	r3, [r3]
 8019bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	461a      	mov	r2, r3
 8019c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c08:	61bb      	str	r3, [r7, #24]
 8019c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c0c:	6979      	ldr	r1, [r7, #20]
 8019c0e:	69ba      	ldr	r2, [r7, #24]
 8019c10:	e841 2300 	strex	r3, r2, [r1]
 8019c14:	613b      	str	r3, [r7, #16]
   return(result);
 8019c16:	693b      	ldr	r3, [r7, #16]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d1e6      	bne.n	8019bea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019c1c:	e026      	b.n	8019c6c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	69db      	ldr	r3, [r3, #28]
 8019c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d018      	beq.n	8019c5e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c30:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c34:	881b      	ldrh	r3, [r3, #0]
 8019c36:	461a      	mov	r2, r3
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019c40:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c46:	1c9a      	adds	r2, r3, #2
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019c52:	b29b      	uxth	r3, r3
 8019c54:	3b01      	subs	r3, #1
 8019c56:	b29a      	uxth	r2, r3
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019c5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019c60:	3b01      	subs	r3, #1
 8019c62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019c64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d19f      	bne.n	8019baa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019c6a:	e7ff      	b.n	8019c6c <UART_TxISR_16BIT_FIFOEN+0xde>
 8019c6c:	bf00      	nop
 8019c6e:	3744      	adds	r7, #68	@ 0x44
 8019c70:	46bd      	mov	sp, r7
 8019c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c76:	4770      	bx	lr

08019c78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b088      	sub	sp, #32
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	e853 3f00 	ldrex	r3, [r3]
 8019c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019c94:	61fb      	str	r3, [r7, #28]
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	69fb      	ldr	r3, [r7, #28]
 8019c9e:	61bb      	str	r3, [r7, #24]
 8019ca0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ca2:	6979      	ldr	r1, [r7, #20]
 8019ca4:	69ba      	ldr	r2, [r7, #24]
 8019ca6:	e841 2300 	strex	r3, r2, [r1]
 8019caa:	613b      	str	r3, [r7, #16]
   return(result);
 8019cac:	693b      	ldr	r3, [r7, #16]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d1e6      	bne.n	8019c80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	2220      	movs	r2, #32
 8019cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	2200      	movs	r2, #0
 8019cbe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019cc0:	6878      	ldr	r0, [r7, #4]
 8019cc2:	f7fe fc57 	bl	8018574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019cc6:	bf00      	nop
 8019cc8:	3720      	adds	r7, #32
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	bd80      	pop	{r7, pc}
	...

08019cd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b09c      	sub	sp, #112	@ 0x70
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019cde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019ce8:	2b22      	cmp	r3, #34	@ 0x22
 8019cea:	f040 80be 	bne.w	8019e6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019cf4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019cf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8019cfc:	b2d9      	uxtb	r1, r3
 8019cfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019d02:	b2da      	uxtb	r2, r3
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019d08:	400a      	ands	r2, r1
 8019d0a:	b2d2      	uxtb	r2, r2
 8019d0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019d12:	1c5a      	adds	r2, r3, #1
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019d1e:	b29b      	uxth	r3, r3
 8019d20:	3b01      	subs	r3, #1
 8019d22:	b29a      	uxth	r2, r3
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019d30:	b29b      	uxth	r3, r3
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	f040 80a1 	bne.w	8019e7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d40:	e853 3f00 	ldrex	r3, [r3]
 8019d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8019d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	461a      	mov	r2, r3
 8019d54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019d56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019d58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019d5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019d5e:	e841 2300 	strex	r3, r2, [r1]
 8019d62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8019d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d1e6      	bne.n	8019d38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	3308      	adds	r3, #8
 8019d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d74:	e853 3f00 	ldrex	r3, [r3]
 8019d78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d7c:	f023 0301 	bic.w	r3, r3, #1
 8019d80:	667b      	str	r3, [r7, #100]	@ 0x64
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	3308      	adds	r3, #8
 8019d88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8019d8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8019d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019d92:	e841 2300 	strex	r3, r2, [r1]
 8019d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d1e5      	bne.n	8019d6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	2220      	movs	r2, #32
 8019da2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	2200      	movs	r2, #0
 8019daa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	2200      	movs	r2, #0
 8019db0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	4a33      	ldr	r2, [pc, #204]	@ (8019e84 <UART_RxISR_8BIT+0x1b4>)
 8019db8:	4293      	cmp	r3, r2
 8019dba:	d01f      	beq.n	8019dfc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	685b      	ldr	r3, [r3, #4]
 8019dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d018      	beq.n	8019dfc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dd2:	e853 3f00 	ldrex	r3, [r3]
 8019dd6:	623b      	str	r3, [r7, #32]
   return(result);
 8019dd8:	6a3b      	ldr	r3, [r7, #32]
 8019dda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019dde:	663b      	str	r3, [r7, #96]	@ 0x60
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	461a      	mov	r2, r3
 8019de6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8019dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019df0:	e841 2300 	strex	r3, r2, [r1]
 8019df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d1e6      	bne.n	8019dca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e00:	2b01      	cmp	r3, #1
 8019e02:	d12e      	bne.n	8019e62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2200      	movs	r2, #0
 8019e08:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e10:	693b      	ldr	r3, [r7, #16]
 8019e12:	e853 3f00 	ldrex	r3, [r3]
 8019e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	f023 0310 	bic.w	r3, r3, #16
 8019e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	461a      	mov	r2, r3
 8019e26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019e28:	61fb      	str	r3, [r7, #28]
 8019e2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e2c:	69b9      	ldr	r1, [r7, #24]
 8019e2e:	69fa      	ldr	r2, [r7, #28]
 8019e30:	e841 2300 	strex	r3, r2, [r1]
 8019e34:	617b      	str	r3, [r7, #20]
   return(result);
 8019e36:	697b      	ldr	r3, [r7, #20]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d1e6      	bne.n	8019e0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	69db      	ldr	r3, [r3, #28]
 8019e42:	f003 0310 	and.w	r3, r3, #16
 8019e46:	2b10      	cmp	r3, #16
 8019e48:	d103      	bne.n	8019e52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	2210      	movs	r2, #16
 8019e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019e58:	4619      	mov	r1, r3
 8019e5a:	6878      	ldr	r0, [r7, #4]
 8019e5c:	f7fe fb9e 	bl	801859c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019e60:	e00b      	b.n	8019e7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019e62:	6878      	ldr	r0, [r7, #4]
 8019e64:	f7eb fffe 	bl	8005e64 <HAL_UART_RxCpltCallback>
}
 8019e68:	e007      	b.n	8019e7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	699a      	ldr	r2, [r3, #24]
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	f042 0208 	orr.w	r2, r2, #8
 8019e78:	619a      	str	r2, [r3, #24]
}
 8019e7a:	bf00      	nop
 8019e7c:	3770      	adds	r7, #112	@ 0x70
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	bd80      	pop	{r7, pc}
 8019e82:	bf00      	nop
 8019e84:	58000c00 	.word	0x58000c00

08019e88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b09c      	sub	sp, #112	@ 0x70
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019e96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019ea0:	2b22      	cmp	r3, #34	@ 0x22
 8019ea2:	f040 80be 	bne.w	801a022 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019eac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8019eb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019eba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019ebe:	4013      	ands	r3, r2
 8019ec0:	b29a      	uxth	r2, r3
 8019ec2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ec4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019eca:	1c9a      	adds	r2, r3, #2
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ed6:	b29b      	uxth	r3, r3
 8019ed8:	3b01      	subs	r3, #1
 8019eda:	b29a      	uxth	r2, r3
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ee8:	b29b      	uxth	r3, r3
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f040 80a1 	bne.w	801a032 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ef8:	e853 3f00 	ldrex	r3, [r3]
 8019efc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019f04:	667b      	str	r3, [r7, #100]	@ 0x64
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	461a      	mov	r2, r3
 8019f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019f0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8019f10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019f14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019f16:	e841 2300 	strex	r3, r2, [r1]
 8019f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d1e6      	bne.n	8019ef0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	3308      	adds	r3, #8
 8019f28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f2c:	e853 3f00 	ldrex	r3, [r3]
 8019f30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f34:	f023 0301 	bic.w	r3, r3, #1
 8019f38:	663b      	str	r3, [r7, #96]	@ 0x60
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	3308      	adds	r3, #8
 8019f40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019f42:	643a      	str	r2, [r7, #64]	@ 0x40
 8019f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019f48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019f4a:	e841 2300 	strex	r3, r2, [r1]
 8019f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d1e5      	bne.n	8019f22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	2220      	movs	r2, #32
 8019f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	2200      	movs	r2, #0
 8019f62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	2200      	movs	r2, #0
 8019f68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	4a33      	ldr	r2, [pc, #204]	@ (801a03c <UART_RxISR_16BIT+0x1b4>)
 8019f70:	4293      	cmp	r3, r2
 8019f72:	d01f      	beq.n	8019fb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	685b      	ldr	r3, [r3, #4]
 8019f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d018      	beq.n	8019fb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f88:	6a3b      	ldr	r3, [r7, #32]
 8019f8a:	e853 3f00 	ldrex	r3, [r3]
 8019f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8019f90:	69fb      	ldr	r3, [r7, #28]
 8019f92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	461a      	mov	r2, r3
 8019f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019fa2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019fa8:	e841 2300 	strex	r3, r2, [r1]
 8019fac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d1e6      	bne.n	8019f82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019fb8:	2b01      	cmp	r3, #1
 8019fba:	d12e      	bne.n	801a01a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	e853 3f00 	ldrex	r3, [r3]
 8019fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8019fd0:	68bb      	ldr	r3, [r7, #8]
 8019fd2:	f023 0310 	bic.w	r3, r3, #16
 8019fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	461a      	mov	r2, r3
 8019fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019fe0:	61bb      	str	r3, [r7, #24]
 8019fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fe4:	6979      	ldr	r1, [r7, #20]
 8019fe6:	69ba      	ldr	r2, [r7, #24]
 8019fe8:	e841 2300 	strex	r3, r2, [r1]
 8019fec:	613b      	str	r3, [r7, #16]
   return(result);
 8019fee:	693b      	ldr	r3, [r7, #16]
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d1e6      	bne.n	8019fc2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	69db      	ldr	r3, [r3, #28]
 8019ffa:	f003 0310 	and.w	r3, r3, #16
 8019ffe:	2b10      	cmp	r3, #16
 801a000:	d103      	bne.n	801a00a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	2210      	movs	r2, #16
 801a008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a010:	4619      	mov	r1, r3
 801a012:	6878      	ldr	r0, [r7, #4]
 801a014:	f7fe fac2 	bl	801859c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a018:	e00b      	b.n	801a032 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f7eb ff22 	bl	8005e64 <HAL_UART_RxCpltCallback>
}
 801a020:	e007      	b.n	801a032 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	699a      	ldr	r2, [r3, #24]
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	f042 0208 	orr.w	r2, r2, #8
 801a030:	619a      	str	r2, [r3, #24]
}
 801a032:	bf00      	nop
 801a034:	3770      	adds	r7, #112	@ 0x70
 801a036:	46bd      	mov	sp, r7
 801a038:	bd80      	pop	{r7, pc}
 801a03a:	bf00      	nop
 801a03c:	58000c00 	.word	0x58000c00

0801a040 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b0ac      	sub	sp, #176	@ 0xb0
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a04e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	69db      	ldr	r3, [r3, #28]
 801a058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	689b      	ldr	r3, [r3, #8]
 801a06c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a076:	2b22      	cmp	r3, #34	@ 0x22
 801a078:	f040 8181 	bne.w	801a37e <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a082:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a086:	e124      	b.n	801a2d2 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a08e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a092:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a096:	b2d9      	uxtb	r1, r3
 801a098:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a09c:	b2da      	uxtb	r2, r3
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0a2:	400a      	ands	r2, r1
 801a0a4:	b2d2      	uxtb	r2, r2
 801a0a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0ac:	1c5a      	adds	r2, r3, #1
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	3b01      	subs	r3, #1
 801a0bc:	b29a      	uxth	r2, r3
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	69db      	ldr	r3, [r3, #28]
 801a0ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a0ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a0d2:	f003 0307 	and.w	r3, r3, #7
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d053      	beq.n	801a182 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a0da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a0de:	f003 0301 	and.w	r3, r3, #1
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d011      	beq.n	801a10a <UART_RxISR_8BIT_FIFOEN+0xca>
 801a0e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a0ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d00b      	beq.n	801a10a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	2201      	movs	r2, #1
 801a0f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a100:	f043 0201 	orr.w	r2, r3, #1
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a10e:	f003 0302 	and.w	r3, r3, #2
 801a112:	2b00      	cmp	r3, #0
 801a114:	d011      	beq.n	801a13a <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a11a:	f003 0301 	and.w	r3, r3, #1
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d00b      	beq.n	801a13a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	2202      	movs	r2, #2
 801a128:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a130:	f043 0204 	orr.w	r2, r3, #4
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a13e:	f003 0304 	and.w	r3, r3, #4
 801a142:	2b00      	cmp	r3, #0
 801a144:	d011      	beq.n	801a16a <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a14a:	f003 0301 	and.w	r3, r3, #1
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d00b      	beq.n	801a16a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	2204      	movs	r2, #4
 801a158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a160:	f043 0202 	orr.w	r2, r3, #2
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a170:	2b00      	cmp	r3, #0
 801a172:	d006      	beq.n	801a182 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a174:	6878      	ldr	r0, [r7, #4]
 801a176:	f7fe fa07 	bl	8018588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	2200      	movs	r2, #0
 801a17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a188:	b29b      	uxth	r3, r3
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	f040 80a1 	bne.w	801a2d2 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a198:	e853 3f00 	ldrex	r3, [r3]
 801a19c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a19e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a1a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a1a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	461a      	mov	r2, r3
 801a1ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a1b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a1b4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a1b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a1ba:	e841 2300 	strex	r3, r2, [r1]
 801a1be:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a1c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d1e4      	bne.n	801a190 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	3308      	adds	r3, #8
 801a1cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a1d0:	e853 3f00 	ldrex	r3, [r3]
 801a1d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a1d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1d8:	4b6f      	ldr	r3, [pc, #444]	@ (801a398 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a1da:	4013      	ands	r3, r2
 801a1dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	3308      	adds	r3, #8
 801a1e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a1ea:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a1ec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1ee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a1f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a1f2:	e841 2300 	strex	r3, r2, [r1]
 801a1f6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a1f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d1e3      	bne.n	801a1c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	2220      	movs	r2, #32
 801a202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2200      	movs	r2, #0
 801a20a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	2200      	movs	r2, #0
 801a210:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	4a61      	ldr	r2, [pc, #388]	@ (801a39c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a218:	4293      	cmp	r3, r2
 801a21a:	d021      	beq.n	801a260 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	685b      	ldr	r3, [r3, #4]
 801a222:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a226:	2b00      	cmp	r3, #0
 801a228:	d01a      	beq.n	801a260 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a232:	e853 3f00 	ldrex	r3, [r3]
 801a236:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a23a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a23e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	461a      	mov	r2, r3
 801a248:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a24c:	657b      	str	r3, [r7, #84]	@ 0x54
 801a24e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a250:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a252:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a254:	e841 2300 	strex	r3, r2, [r1]
 801a258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d1e4      	bne.n	801a22a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a264:	2b01      	cmp	r3, #1
 801a266:	d130      	bne.n	801a2ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	2200      	movs	r2, #0
 801a26c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a276:	e853 3f00 	ldrex	r3, [r3]
 801a27a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a27e:	f023 0310 	bic.w	r3, r3, #16
 801a282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	461a      	mov	r2, r3
 801a28c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a290:	643b      	str	r3, [r7, #64]	@ 0x40
 801a292:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a298:	e841 2300 	strex	r3, r2, [r1]
 801a29c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d1e4      	bne.n	801a26e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	69db      	ldr	r3, [r3, #28]
 801a2aa:	f003 0310 	and.w	r3, r3, #16
 801a2ae:	2b10      	cmp	r3, #16
 801a2b0:	d103      	bne.n	801a2ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	2210      	movs	r2, #16
 801a2b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a2c0:	4619      	mov	r1, r3
 801a2c2:	6878      	ldr	r0, [r7, #4]
 801a2c4:	f7fe f96a 	bl	801859c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a2c8:	e00e      	b.n	801a2e8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f7eb fdca 	bl	8005e64 <HAL_UART_RxCpltCallback>
        break;
 801a2d0:	e00a      	b.n	801a2e8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a2d2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d006      	beq.n	801a2e8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a2da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a2de:	f003 0320 	and.w	r3, r3, #32
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	f47f aed0 	bne.w	801a088 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a2ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a2f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d049      	beq.n	801a38e <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a300:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a304:	429a      	cmp	r2, r3
 801a306:	d242      	bcs.n	801a38e <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	3308      	adds	r3, #8
 801a30e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a310:	6a3b      	ldr	r3, [r7, #32]
 801a312:	e853 3f00 	ldrex	r3, [r3]
 801a316:	61fb      	str	r3, [r7, #28]
   return(result);
 801a318:	69fb      	ldr	r3, [r7, #28]
 801a31a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a31e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	3308      	adds	r3, #8
 801a328:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a32c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a32e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a334:	e841 2300 	strex	r3, r2, [r1]
 801a338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d1e3      	bne.n	801a308 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	4a17      	ldr	r2, [pc, #92]	@ (801a3a0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a344:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	e853 3f00 	ldrex	r3, [r3]
 801a352:	60bb      	str	r3, [r7, #8]
   return(result);
 801a354:	68bb      	ldr	r3, [r7, #8]
 801a356:	f043 0320 	orr.w	r3, r3, #32
 801a35a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	461a      	mov	r2, r3
 801a364:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a368:	61bb      	str	r3, [r7, #24]
 801a36a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a36c:	6979      	ldr	r1, [r7, #20]
 801a36e:	69ba      	ldr	r2, [r7, #24]
 801a370:	e841 2300 	strex	r3, r2, [r1]
 801a374:	613b      	str	r3, [r7, #16]
   return(result);
 801a376:	693b      	ldr	r3, [r7, #16]
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d1e4      	bne.n	801a346 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a37c:	e007      	b.n	801a38e <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	699a      	ldr	r2, [r3, #24]
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	f042 0208 	orr.w	r2, r2, #8
 801a38c:	619a      	str	r2, [r3, #24]
}
 801a38e:	bf00      	nop
 801a390:	37b0      	adds	r7, #176	@ 0xb0
 801a392:	46bd      	mov	sp, r7
 801a394:	bd80      	pop	{r7, pc}
 801a396:	bf00      	nop
 801a398:	effffffe 	.word	0xeffffffe
 801a39c:	58000c00 	.word	0x58000c00
 801a3a0:	08019cd1 	.word	0x08019cd1

0801a3a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b0ae      	sub	sp, #184	@ 0xb8
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a3b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	69db      	ldr	r3, [r3, #28]
 801a3bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	689b      	ldr	r3, [r3, #8]
 801a3d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a3da:	2b22      	cmp	r3, #34	@ 0x22
 801a3dc:	f040 8185 	bne.w	801a6ea <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a3e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a3ea:	e128      	b.n	801a63e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a3fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a3fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a402:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a406:	4013      	ands	r3, r2
 801a408:	b29a      	uxth	r2, r3
 801a40a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a40e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a414:	1c9a      	adds	r2, r3, #2
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a420:	b29b      	uxth	r3, r3
 801a422:	3b01      	subs	r3, #1
 801a424:	b29a      	uxth	r2, r3
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	69db      	ldr	r3, [r3, #28]
 801a432:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a43a:	f003 0307 	and.w	r3, r3, #7
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d053      	beq.n	801a4ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a446:	f003 0301 	and.w	r3, r3, #1
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d011      	beq.n	801a472 <UART_RxISR_16BIT_FIFOEN+0xce>
 801a44e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a456:	2b00      	cmp	r3, #0
 801a458:	d00b      	beq.n	801a472 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	2201      	movs	r2, #1
 801a460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a468:	f043 0201 	orr.w	r2, r3, #1
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a476:	f003 0302 	and.w	r3, r3, #2
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d011      	beq.n	801a4a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a47e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a482:	f003 0301 	and.w	r3, r3, #1
 801a486:	2b00      	cmp	r3, #0
 801a488:	d00b      	beq.n	801a4a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2202      	movs	r2, #2
 801a490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a498:	f043 0204 	orr.w	r2, r3, #4
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a4a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a4a6:	f003 0304 	and.w	r3, r3, #4
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d011      	beq.n	801a4d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a4ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a4b2:	f003 0301 	and.w	r3, r3, #1
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d00b      	beq.n	801a4d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	2204      	movs	r2, #4
 801a4c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a4c8:	f043 0202 	orr.w	r2, r3, #2
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d006      	beq.n	801a4ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a4dc:	6878      	ldr	r0, [r7, #4]
 801a4de:	f7fe f853 	bl	8018588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a4f0:	b29b      	uxth	r3, r3
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	f040 80a3 	bne.w	801a63e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a4fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a500:	e853 3f00 	ldrex	r3, [r3]
 801a504:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a50c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	461a      	mov	r2, r3
 801a516:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a51a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a51e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a520:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a522:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a526:	e841 2300 	strex	r3, r2, [r1]
 801a52a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a52c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d1e2      	bne.n	801a4f8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	3308      	adds	r3, #8
 801a538:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a53a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a53c:	e853 3f00 	ldrex	r3, [r3]
 801a540:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a542:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a544:	4b6f      	ldr	r3, [pc, #444]	@ (801a704 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a546:	4013      	ands	r3, r2
 801a548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	3308      	adds	r3, #8
 801a552:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a556:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a558:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a55a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a55c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a55e:	e841 2300 	strex	r3, r2, [r1]
 801a562:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a566:	2b00      	cmp	r3, #0
 801a568:	d1e3      	bne.n	801a532 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2220      	movs	r2, #32
 801a56e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	2200      	movs	r2, #0
 801a576:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	2200      	movs	r2, #0
 801a57c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	4a61      	ldr	r2, [pc, #388]	@ (801a708 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a584:	4293      	cmp	r3, r2
 801a586:	d021      	beq.n	801a5cc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	685b      	ldr	r3, [r3, #4]
 801a58e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a592:	2b00      	cmp	r3, #0
 801a594:	d01a      	beq.n	801a5cc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a59c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a59e:	e853 3f00 	ldrex	r3, [r3]
 801a5a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a5a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a5a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a5aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	461a      	mov	r2, r3
 801a5b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a5b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a5ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a5be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a5c0:	e841 2300 	strex	r3, r2, [r1]
 801a5c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a5c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d1e4      	bne.n	801a596 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5d0:	2b01      	cmp	r3, #1
 801a5d2:	d130      	bne.n	801a636 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a5e2:	e853 3f00 	ldrex	r3, [r3]
 801a5e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5ea:	f023 0310 	bic.w	r3, r3, #16
 801a5ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	461a      	mov	r2, r3
 801a5f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a5fc:	647b      	str	r3, [r7, #68]	@ 0x44
 801a5fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a604:	e841 2300 	strex	r3, r2, [r1]
 801a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d1e4      	bne.n	801a5da <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	69db      	ldr	r3, [r3, #28]
 801a616:	f003 0310 	and.w	r3, r3, #16
 801a61a:	2b10      	cmp	r3, #16
 801a61c:	d103      	bne.n	801a626 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	2210      	movs	r2, #16
 801a624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a62c:	4619      	mov	r1, r3
 801a62e:	6878      	ldr	r0, [r7, #4]
 801a630:	f7fd ffb4 	bl	801859c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a634:	e00e      	b.n	801a654 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801a636:	6878      	ldr	r0, [r7, #4]
 801a638:	f7eb fc14 	bl	8005e64 <HAL_UART_RxCpltCallback>
        break;
 801a63c:	e00a      	b.n	801a654 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a63e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a642:	2b00      	cmp	r3, #0
 801a644:	d006      	beq.n	801a654 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801a646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a64a:	f003 0320 	and.w	r3, r3, #32
 801a64e:	2b00      	cmp	r3, #0
 801a650:	f47f aecc 	bne.w	801a3ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a65a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a65e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a662:	2b00      	cmp	r3, #0
 801a664:	d049      	beq.n	801a6fa <UART_RxISR_16BIT_FIFOEN+0x356>
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a66c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a670:	429a      	cmp	r2, r3
 801a672:	d242      	bcs.n	801a6fa <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	3308      	adds	r3, #8
 801a67a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a67e:	e853 3f00 	ldrex	r3, [r3]
 801a682:	623b      	str	r3, [r7, #32]
   return(result);
 801a684:	6a3b      	ldr	r3, [r7, #32]
 801a686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a68a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	3308      	adds	r3, #8
 801a694:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a698:	633a      	str	r2, [r7, #48]	@ 0x30
 801a69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a69c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a69e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a6a0:	e841 2300 	strex	r3, r2, [r1]
 801a6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d1e3      	bne.n	801a674 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	4a17      	ldr	r2, [pc, #92]	@ (801a70c <UART_RxISR_16BIT_FIFOEN+0x368>)
 801a6b0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6b8:	693b      	ldr	r3, [r7, #16]
 801a6ba:	e853 3f00 	ldrex	r3, [r3]
 801a6be:	60fb      	str	r3, [r7, #12]
   return(result);
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	f043 0320 	orr.w	r3, r3, #32
 801a6c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a6d4:	61fb      	str	r3, [r7, #28]
 801a6d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6d8:	69b9      	ldr	r1, [r7, #24]
 801a6da:	69fa      	ldr	r2, [r7, #28]
 801a6dc:	e841 2300 	strex	r3, r2, [r1]
 801a6e0:	617b      	str	r3, [r7, #20]
   return(result);
 801a6e2:	697b      	ldr	r3, [r7, #20]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d1e4      	bne.n	801a6b2 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a6e8:	e007      	b.n	801a6fa <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	699a      	ldr	r2, [r3, #24]
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	f042 0208 	orr.w	r2, r2, #8
 801a6f8:	619a      	str	r2, [r3, #24]
}
 801a6fa:	bf00      	nop
 801a6fc:	37b8      	adds	r7, #184	@ 0xb8
 801a6fe:	46bd      	mov	sp, r7
 801a700:	bd80      	pop	{r7, pc}
 801a702:	bf00      	nop
 801a704:	effffffe 	.word	0xeffffffe
 801a708:	58000c00 	.word	0x58000c00
 801a70c:	08019e89 	.word	0x08019e89

0801a710 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a710:	b480      	push	{r7}
 801a712:	b083      	sub	sp, #12
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a718:	bf00      	nop
 801a71a:	370c      	adds	r7, #12
 801a71c:	46bd      	mov	sp, r7
 801a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a722:	4770      	bx	lr

0801a724 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a724:	b480      	push	{r7}
 801a726:	b083      	sub	sp, #12
 801a728:	af00      	add	r7, sp, #0
 801a72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a72c:	bf00      	nop
 801a72e:	370c      	adds	r7, #12
 801a730:	46bd      	mov	sp, r7
 801a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a736:	4770      	bx	lr

0801a738 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a738:	b480      	push	{r7}
 801a73a:	b083      	sub	sp, #12
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a740:	bf00      	nop
 801a742:	370c      	adds	r7, #12
 801a744:	46bd      	mov	sp, r7
 801a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a74a:	4770      	bx	lr

0801a74c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a74c:	b480      	push	{r7}
 801a74e:	b085      	sub	sp, #20
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a75a:	2b01      	cmp	r3, #1
 801a75c:	d101      	bne.n	801a762 <HAL_UARTEx_DisableFifoMode+0x16>
 801a75e:	2302      	movs	r3, #2
 801a760:	e027      	b.n	801a7b2 <HAL_UARTEx_DisableFifoMode+0x66>
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	2201      	movs	r2, #1
 801a766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	2224      	movs	r2, #36	@ 0x24
 801a76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	681a      	ldr	r2, [r3, #0]
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	f022 0201 	bic.w	r2, r2, #1
 801a788:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a78a:	68fb      	ldr	r3, [r7, #12]
 801a78c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a790:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	2200      	movs	r2, #0
 801a796:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	68fa      	ldr	r2, [r7, #12]
 801a79e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	2220      	movs	r2, #32
 801a7a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a7b0:	2300      	movs	r3, #0
}
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	3714      	adds	r7, #20
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7bc:	4770      	bx	lr

0801a7be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a7be:	b580      	push	{r7, lr}
 801a7c0:	b084      	sub	sp, #16
 801a7c2:	af00      	add	r7, sp, #0
 801a7c4:	6078      	str	r0, [r7, #4]
 801a7c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a7ce:	2b01      	cmp	r3, #1
 801a7d0:	d101      	bne.n	801a7d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a7d2:	2302      	movs	r3, #2
 801a7d4:	e02d      	b.n	801a832 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	2201      	movs	r2, #1
 801a7da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	2224      	movs	r2, #36	@ 0x24
 801a7e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	681a      	ldr	r2, [r3, #0]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	f022 0201 	bic.w	r2, r2, #1
 801a7fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	689b      	ldr	r3, [r3, #8]
 801a804:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	683a      	ldr	r2, [r7, #0]
 801a80e:	430a      	orrs	r2, r1
 801a810:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a812:	6878      	ldr	r0, [r7, #4]
 801a814:	f000 f850 	bl	801a8b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	68fa      	ldr	r2, [r7, #12]
 801a81e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	2220      	movs	r2, #32
 801a824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	2200      	movs	r2, #0
 801a82c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a830:	2300      	movs	r3, #0
}
 801a832:	4618      	mov	r0, r3
 801a834:	3710      	adds	r7, #16
 801a836:	46bd      	mov	sp, r7
 801a838:	bd80      	pop	{r7, pc}

0801a83a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a83a:	b580      	push	{r7, lr}
 801a83c:	b084      	sub	sp, #16
 801a83e:	af00      	add	r7, sp, #0
 801a840:	6078      	str	r0, [r7, #4]
 801a842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a84a:	2b01      	cmp	r3, #1
 801a84c:	d101      	bne.n	801a852 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a84e:	2302      	movs	r3, #2
 801a850:	e02d      	b.n	801a8ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	2201      	movs	r2, #1
 801a856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	2224      	movs	r2, #36	@ 0x24
 801a85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	681a      	ldr	r2, [r3, #0]
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	f022 0201 	bic.w	r2, r2, #1
 801a878:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	689b      	ldr	r3, [r3, #8]
 801a880:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	683a      	ldr	r2, [r7, #0]
 801a88a:	430a      	orrs	r2, r1
 801a88c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a88e:	6878      	ldr	r0, [r7, #4]
 801a890:	f000 f812 	bl	801a8b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	68fa      	ldr	r2, [r7, #12]
 801a89a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	2220      	movs	r2, #32
 801a8a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2200      	movs	r2, #0
 801a8a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a8ac:	2300      	movs	r3, #0
}
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	3710      	adds	r7, #16
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}
	...

0801a8b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a8b8:	b480      	push	{r7}
 801a8ba:	b085      	sub	sp, #20
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d108      	bne.n	801a8da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2201      	movs	r2, #1
 801a8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	2201      	movs	r2, #1
 801a8d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a8d8:	e031      	b.n	801a93e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a8da:	2310      	movs	r3, #16
 801a8dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a8de:	2310      	movs	r3, #16
 801a8e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	689b      	ldr	r3, [r3, #8]
 801a8e8:	0e5b      	lsrs	r3, r3, #25
 801a8ea:	b2db      	uxtb	r3, r3
 801a8ec:	f003 0307 	and.w	r3, r3, #7
 801a8f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	689b      	ldr	r3, [r3, #8]
 801a8f8:	0f5b      	lsrs	r3, r3, #29
 801a8fa:	b2db      	uxtb	r3, r3
 801a8fc:	f003 0307 	and.w	r3, r3, #7
 801a900:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a902:	7bbb      	ldrb	r3, [r7, #14]
 801a904:	7b3a      	ldrb	r2, [r7, #12]
 801a906:	4911      	ldr	r1, [pc, #68]	@ (801a94c <UARTEx_SetNbDataToProcess+0x94>)
 801a908:	5c8a      	ldrb	r2, [r1, r2]
 801a90a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a90e:	7b3a      	ldrb	r2, [r7, #12]
 801a910:	490f      	ldr	r1, [pc, #60]	@ (801a950 <UARTEx_SetNbDataToProcess+0x98>)
 801a912:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a914:	fb93 f3f2 	sdiv	r3, r3, r2
 801a918:	b29a      	uxth	r2, r3
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a920:	7bfb      	ldrb	r3, [r7, #15]
 801a922:	7b7a      	ldrb	r2, [r7, #13]
 801a924:	4909      	ldr	r1, [pc, #36]	@ (801a94c <UARTEx_SetNbDataToProcess+0x94>)
 801a926:	5c8a      	ldrb	r2, [r1, r2]
 801a928:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a92c:	7b7a      	ldrb	r2, [r7, #13]
 801a92e:	4908      	ldr	r1, [pc, #32]	@ (801a950 <UARTEx_SetNbDataToProcess+0x98>)
 801a930:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a932:	fb93 f3f2 	sdiv	r3, r3, r2
 801a936:	b29a      	uxth	r2, r3
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a93e:	bf00      	nop
 801a940:	3714      	adds	r7, #20
 801a942:	46bd      	mov	sp, r7
 801a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a948:	4770      	bx	lr
 801a94a:	bf00      	nop
 801a94c:	0801e7c0 	.word	0x0801e7c0
 801a950:	0801e7c8 	.word	0x0801e7c8

0801a954 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a954:	b580      	push	{r7, lr}
 801a956:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801a958:	4904      	ldr	r1, [pc, #16]	@ (801a96c <MX_FATFS_Init+0x18>)
 801a95a:	4805      	ldr	r0, [pc, #20]	@ (801a970 <MX_FATFS_Init+0x1c>)
 801a95c:	f003 f8d8 	bl	801db10 <FATFS_LinkDriver>
 801a960:	4603      	mov	r3, r0
 801a962:	461a      	mov	r2, r3
 801a964:	4b03      	ldr	r3, [pc, #12]	@ (801a974 <MX_FATFS_Init+0x20>)
 801a966:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a968:	bf00      	nop
 801a96a:	bd80      	pop	{r7, pc}
 801a96c:	240005e4 	.word	0x240005e4
 801a970:	24000014 	.word	0x24000014
 801a974:	240005e0 	.word	0x240005e0

0801a978 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a978:	b480      	push	{r7}
 801a97a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a97c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a97e:	4618      	mov	r0, r3
 801a980:	46bd      	mov	sp, r7
 801a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a986:	4770      	bx	lr

0801a988 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b082      	sub	sp, #8
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	4603      	mov	r3, r0
 801a990:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801a992:	79fb      	ldrb	r3, [r7, #7]
 801a994:	4618      	mov	r0, r3
 801a996:	f7e9 fb75 	bl	8004084 <SD_disk_initialize>
 801a99a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801a99c:	4618      	mov	r0, r3
 801a99e:	3708      	adds	r7, #8
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}

0801a9a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b082      	sub	sp, #8
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801a9ae:	79fb      	ldrb	r3, [r7, #7]
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	f7e9 fc53 	bl	800425c <SD_disk_status>
 801a9b6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	3708      	adds	r7, #8
 801a9bc:	46bd      	mov	sp, r7
 801a9be:	bd80      	pop	{r7, pc}

0801a9c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b084      	sub	sp, #16
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	60b9      	str	r1, [r7, #8]
 801a9c8:	607a      	str	r2, [r7, #4]
 801a9ca:	603b      	str	r3, [r7, #0]
 801a9cc:	4603      	mov	r3, r0
 801a9ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801a9d0:	7bf8      	ldrb	r0, [r7, #15]
 801a9d2:	683b      	ldr	r3, [r7, #0]
 801a9d4:	687a      	ldr	r2, [r7, #4]
 801a9d6:	68b9      	ldr	r1, [r7, #8]
 801a9d8:	f7e9 fc56 	bl	8004288 <SD_disk_read>
 801a9dc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801a9de:	4618      	mov	r0, r3
 801a9e0:	3710      	adds	r7, #16
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}

0801a9e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801a9e6:	b580      	push	{r7, lr}
 801a9e8:	b084      	sub	sp, #16
 801a9ea:	af00      	add	r7, sp, #0
 801a9ec:	60b9      	str	r1, [r7, #8]
 801a9ee:	607a      	str	r2, [r7, #4]
 801a9f0:	603b      	str	r3, [r7, #0]
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801a9f6:	7bf8      	ldrb	r0, [r7, #15]
 801a9f8:	683b      	ldr	r3, [r7, #0]
 801a9fa:	687a      	ldr	r2, [r7, #4]
 801a9fc:	68b9      	ldr	r1, [r7, #8]
 801a9fe:	f7e9 fcad 	bl	800435c <SD_disk_write>
 801aa02:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801aa04:	4618      	mov	r0, r3
 801aa06:	3710      	adds	r7, #16
 801aa08:	46bd      	mov	sp, r7
 801aa0a:	bd80      	pop	{r7, pc}

0801aa0c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b082      	sub	sp, #8
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	4603      	mov	r3, r0
 801aa14:	603a      	str	r2, [r7, #0]
 801aa16:	71fb      	strb	r3, [r7, #7]
 801aa18:	460b      	mov	r3, r1
 801aa1a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801aa1c:	79b9      	ldrb	r1, [r7, #6]
 801aa1e:	79fb      	ldrb	r3, [r7, #7]
 801aa20:	683a      	ldr	r2, [r7, #0]
 801aa22:	4618      	mov	r0, r3
 801aa24:	f7e9 fd1e 	bl	8004464 <SD_disk_ioctl>
 801aa28:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	3708      	adds	r7, #8
 801aa2e:	46bd      	mov	sp, r7
 801aa30:	bd80      	pop	{r7, pc}
	...

0801aa34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b084      	sub	sp, #16
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	4603      	mov	r3, r0
 801aa3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801aa3e:	79fb      	ldrb	r3, [r7, #7]
 801aa40:	4a08      	ldr	r2, [pc, #32]	@ (801aa64 <disk_status+0x30>)
 801aa42:	009b      	lsls	r3, r3, #2
 801aa44:	4413      	add	r3, r2
 801aa46:	685b      	ldr	r3, [r3, #4]
 801aa48:	685b      	ldr	r3, [r3, #4]
 801aa4a:	79fa      	ldrb	r2, [r7, #7]
 801aa4c:	4905      	ldr	r1, [pc, #20]	@ (801aa64 <disk_status+0x30>)
 801aa4e:	440a      	add	r2, r1
 801aa50:	7a12      	ldrb	r2, [r2, #8]
 801aa52:	4610      	mov	r0, r2
 801aa54:	4798      	blx	r3
 801aa56:	4603      	mov	r3, r0
 801aa58:	73fb      	strb	r3, [r7, #15]
  return stat;
 801aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	3710      	adds	r7, #16
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}
 801aa64:	24000800 	.word	0x24000800

0801aa68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b084      	sub	sp, #16
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	4603      	mov	r3, r0
 801aa70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801aa72:	2300      	movs	r3, #0
 801aa74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801aa76:	79fb      	ldrb	r3, [r7, #7]
 801aa78:	4a0e      	ldr	r2, [pc, #56]	@ (801aab4 <disk_initialize+0x4c>)
 801aa7a:	5cd3      	ldrb	r3, [r2, r3]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d114      	bne.n	801aaaa <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801aa80:	79fb      	ldrb	r3, [r7, #7]
 801aa82:	4a0c      	ldr	r2, [pc, #48]	@ (801aab4 <disk_initialize+0x4c>)
 801aa84:	009b      	lsls	r3, r3, #2
 801aa86:	4413      	add	r3, r2
 801aa88:	685b      	ldr	r3, [r3, #4]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	79fa      	ldrb	r2, [r7, #7]
 801aa8e:	4909      	ldr	r1, [pc, #36]	@ (801aab4 <disk_initialize+0x4c>)
 801aa90:	440a      	add	r2, r1
 801aa92:	7a12      	ldrb	r2, [r2, #8]
 801aa94:	4610      	mov	r0, r2
 801aa96:	4798      	blx	r3
 801aa98:	4603      	mov	r3, r0
 801aa9a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801aa9c:	7bfb      	ldrb	r3, [r7, #15]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d103      	bne.n	801aaaa <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801aaa2:	79fb      	ldrb	r3, [r7, #7]
 801aaa4:	4a03      	ldr	r2, [pc, #12]	@ (801aab4 <disk_initialize+0x4c>)
 801aaa6:	2101      	movs	r1, #1
 801aaa8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 801aaac:	4618      	mov	r0, r3
 801aaae:	3710      	adds	r7, #16
 801aab0:	46bd      	mov	sp, r7
 801aab2:	bd80      	pop	{r7, pc}
 801aab4:	24000800 	.word	0x24000800

0801aab8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801aab8:	b590      	push	{r4, r7, lr}
 801aaba:	b087      	sub	sp, #28
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	60b9      	str	r1, [r7, #8]
 801aac0:	607a      	str	r2, [r7, #4]
 801aac2:	603b      	str	r3, [r7, #0]
 801aac4:	4603      	mov	r3, r0
 801aac6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801aac8:	7bfb      	ldrb	r3, [r7, #15]
 801aaca:	4a0a      	ldr	r2, [pc, #40]	@ (801aaf4 <disk_read+0x3c>)
 801aacc:	009b      	lsls	r3, r3, #2
 801aace:	4413      	add	r3, r2
 801aad0:	685b      	ldr	r3, [r3, #4]
 801aad2:	689c      	ldr	r4, [r3, #8]
 801aad4:	7bfb      	ldrb	r3, [r7, #15]
 801aad6:	4a07      	ldr	r2, [pc, #28]	@ (801aaf4 <disk_read+0x3c>)
 801aad8:	4413      	add	r3, r2
 801aada:	7a18      	ldrb	r0, [r3, #8]
 801aadc:	683b      	ldr	r3, [r7, #0]
 801aade:	687a      	ldr	r2, [r7, #4]
 801aae0:	68b9      	ldr	r1, [r7, #8]
 801aae2:	47a0      	blx	r4
 801aae4:	4603      	mov	r3, r0
 801aae6:	75fb      	strb	r3, [r7, #23]
  return res;
 801aae8:	7dfb      	ldrb	r3, [r7, #23]
}
 801aaea:	4618      	mov	r0, r3
 801aaec:	371c      	adds	r7, #28
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	bd90      	pop	{r4, r7, pc}
 801aaf2:	bf00      	nop
 801aaf4:	24000800 	.word	0x24000800

0801aaf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801aaf8:	b590      	push	{r4, r7, lr}
 801aafa:	b087      	sub	sp, #28
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	60b9      	str	r1, [r7, #8]
 801ab00:	607a      	str	r2, [r7, #4]
 801ab02:	603b      	str	r3, [r7, #0]
 801ab04:	4603      	mov	r3, r0
 801ab06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801ab08:	7bfb      	ldrb	r3, [r7, #15]
 801ab0a:	4a0a      	ldr	r2, [pc, #40]	@ (801ab34 <disk_write+0x3c>)
 801ab0c:	009b      	lsls	r3, r3, #2
 801ab0e:	4413      	add	r3, r2
 801ab10:	685b      	ldr	r3, [r3, #4]
 801ab12:	68dc      	ldr	r4, [r3, #12]
 801ab14:	7bfb      	ldrb	r3, [r7, #15]
 801ab16:	4a07      	ldr	r2, [pc, #28]	@ (801ab34 <disk_write+0x3c>)
 801ab18:	4413      	add	r3, r2
 801ab1a:	7a18      	ldrb	r0, [r3, #8]
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	687a      	ldr	r2, [r7, #4]
 801ab20:	68b9      	ldr	r1, [r7, #8]
 801ab22:	47a0      	blx	r4
 801ab24:	4603      	mov	r3, r0
 801ab26:	75fb      	strb	r3, [r7, #23]
  return res;
 801ab28:	7dfb      	ldrb	r3, [r7, #23]
}
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	371c      	adds	r7, #28
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd90      	pop	{r4, r7, pc}
 801ab32:	bf00      	nop
 801ab34:	24000800 	.word	0x24000800

0801ab38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b084      	sub	sp, #16
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	4603      	mov	r3, r0
 801ab40:	603a      	str	r2, [r7, #0]
 801ab42:	71fb      	strb	r3, [r7, #7]
 801ab44:	460b      	mov	r3, r1
 801ab46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801ab48:	79fb      	ldrb	r3, [r7, #7]
 801ab4a:	4a09      	ldr	r2, [pc, #36]	@ (801ab70 <disk_ioctl+0x38>)
 801ab4c:	009b      	lsls	r3, r3, #2
 801ab4e:	4413      	add	r3, r2
 801ab50:	685b      	ldr	r3, [r3, #4]
 801ab52:	691b      	ldr	r3, [r3, #16]
 801ab54:	79fa      	ldrb	r2, [r7, #7]
 801ab56:	4906      	ldr	r1, [pc, #24]	@ (801ab70 <disk_ioctl+0x38>)
 801ab58:	440a      	add	r2, r1
 801ab5a:	7a10      	ldrb	r0, [r2, #8]
 801ab5c:	79b9      	ldrb	r1, [r7, #6]
 801ab5e:	683a      	ldr	r2, [r7, #0]
 801ab60:	4798      	blx	r3
 801ab62:	4603      	mov	r3, r0
 801ab64:	73fb      	strb	r3, [r7, #15]
  return res;
 801ab66:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab68:	4618      	mov	r0, r3
 801ab6a:	3710      	adds	r7, #16
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bd80      	pop	{r7, pc}
 801ab70:	24000800 	.word	0x24000800

0801ab74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801ab74:	b480      	push	{r7}
 801ab76:	b085      	sub	sp, #20
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	3301      	adds	r3, #1
 801ab80:	781b      	ldrb	r3, [r3, #0]
 801ab82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801ab84:	89fb      	ldrh	r3, [r7, #14]
 801ab86:	021b      	lsls	r3, r3, #8
 801ab88:	b21a      	sxth	r2, r3
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	781b      	ldrb	r3, [r3, #0]
 801ab8e:	b21b      	sxth	r3, r3
 801ab90:	4313      	orrs	r3, r2
 801ab92:	b21b      	sxth	r3, r3
 801ab94:	81fb      	strh	r3, [r7, #14]
	return rv;
 801ab96:	89fb      	ldrh	r3, [r7, #14]
}
 801ab98:	4618      	mov	r0, r3
 801ab9a:	3714      	adds	r7, #20
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba2:	4770      	bx	lr

0801aba4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801aba4:	b480      	push	{r7}
 801aba6:	b085      	sub	sp, #20
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	3303      	adds	r3, #3
 801abb0:	781b      	ldrb	r3, [r3, #0]
 801abb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	021b      	lsls	r3, r3, #8
 801abb8:	687a      	ldr	r2, [r7, #4]
 801abba:	3202      	adds	r2, #2
 801abbc:	7812      	ldrb	r2, [r2, #0]
 801abbe:	4313      	orrs	r3, r2
 801abc0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	021b      	lsls	r3, r3, #8
 801abc6:	687a      	ldr	r2, [r7, #4]
 801abc8:	3201      	adds	r2, #1
 801abca:	7812      	ldrb	r2, [r2, #0]
 801abcc:	4313      	orrs	r3, r2
 801abce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	021b      	lsls	r3, r3, #8
 801abd4:	687a      	ldr	r2, [r7, #4]
 801abd6:	7812      	ldrb	r2, [r2, #0]
 801abd8:	4313      	orrs	r3, r2
 801abda:	60fb      	str	r3, [r7, #12]
	return rv;
 801abdc:	68fb      	ldr	r3, [r7, #12]
}
 801abde:	4618      	mov	r0, r3
 801abe0:	3714      	adds	r7, #20
 801abe2:	46bd      	mov	sp, r7
 801abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe8:	4770      	bx	lr

0801abea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801abea:	b480      	push	{r7}
 801abec:	b083      	sub	sp, #12
 801abee:	af00      	add	r7, sp, #0
 801abf0:	6078      	str	r0, [r7, #4]
 801abf2:	460b      	mov	r3, r1
 801abf4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	1c5a      	adds	r2, r3, #1
 801abfa:	607a      	str	r2, [r7, #4]
 801abfc:	887a      	ldrh	r2, [r7, #2]
 801abfe:	b2d2      	uxtb	r2, r2
 801ac00:	701a      	strb	r2, [r3, #0]
 801ac02:	887b      	ldrh	r3, [r7, #2]
 801ac04:	0a1b      	lsrs	r3, r3, #8
 801ac06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	1c5a      	adds	r2, r3, #1
 801ac0c:	607a      	str	r2, [r7, #4]
 801ac0e:	887a      	ldrh	r2, [r7, #2]
 801ac10:	b2d2      	uxtb	r2, r2
 801ac12:	701a      	strb	r2, [r3, #0]
}
 801ac14:	bf00      	nop
 801ac16:	370c      	adds	r7, #12
 801ac18:	46bd      	mov	sp, r7
 801ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac1e:	4770      	bx	lr

0801ac20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801ac20:	b480      	push	{r7}
 801ac22:	b083      	sub	sp, #12
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
 801ac28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	1c5a      	adds	r2, r3, #1
 801ac2e:	607a      	str	r2, [r7, #4]
 801ac30:	683a      	ldr	r2, [r7, #0]
 801ac32:	b2d2      	uxtb	r2, r2
 801ac34:	701a      	strb	r2, [r3, #0]
 801ac36:	683b      	ldr	r3, [r7, #0]
 801ac38:	0a1b      	lsrs	r3, r3, #8
 801ac3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	1c5a      	adds	r2, r3, #1
 801ac40:	607a      	str	r2, [r7, #4]
 801ac42:	683a      	ldr	r2, [r7, #0]
 801ac44:	b2d2      	uxtb	r2, r2
 801ac46:	701a      	strb	r2, [r3, #0]
 801ac48:	683b      	ldr	r3, [r7, #0]
 801ac4a:	0a1b      	lsrs	r3, r3, #8
 801ac4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	1c5a      	adds	r2, r3, #1
 801ac52:	607a      	str	r2, [r7, #4]
 801ac54:	683a      	ldr	r2, [r7, #0]
 801ac56:	b2d2      	uxtb	r2, r2
 801ac58:	701a      	strb	r2, [r3, #0]
 801ac5a:	683b      	ldr	r3, [r7, #0]
 801ac5c:	0a1b      	lsrs	r3, r3, #8
 801ac5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	1c5a      	adds	r2, r3, #1
 801ac64:	607a      	str	r2, [r7, #4]
 801ac66:	683a      	ldr	r2, [r7, #0]
 801ac68:	b2d2      	uxtb	r2, r2
 801ac6a:	701a      	strb	r2, [r3, #0]
}
 801ac6c:	bf00      	nop
 801ac6e:	370c      	adds	r7, #12
 801ac70:	46bd      	mov	sp, r7
 801ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac76:	4770      	bx	lr

0801ac78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801ac78:	b480      	push	{r7}
 801ac7a:	b087      	sub	sp, #28
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	60f8      	str	r0, [r7, #12]
 801ac80:	60b9      	str	r1, [r7, #8]
 801ac82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d00d      	beq.n	801acae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801ac92:	693a      	ldr	r2, [r7, #16]
 801ac94:	1c53      	adds	r3, r2, #1
 801ac96:	613b      	str	r3, [r7, #16]
 801ac98:	697b      	ldr	r3, [r7, #20]
 801ac9a:	1c59      	adds	r1, r3, #1
 801ac9c:	6179      	str	r1, [r7, #20]
 801ac9e:	7812      	ldrb	r2, [r2, #0]
 801aca0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	3b01      	subs	r3, #1
 801aca6:	607b      	str	r3, [r7, #4]
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d1f1      	bne.n	801ac92 <mem_cpy+0x1a>
	}
}
 801acae:	bf00      	nop
 801acb0:	371c      	adds	r7, #28
 801acb2:	46bd      	mov	sp, r7
 801acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acb8:	4770      	bx	lr

0801acba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801acba:	b480      	push	{r7}
 801acbc:	b087      	sub	sp, #28
 801acbe:	af00      	add	r7, sp, #0
 801acc0:	60f8      	str	r0, [r7, #12]
 801acc2:	60b9      	str	r1, [r7, #8]
 801acc4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801acca:	697b      	ldr	r3, [r7, #20]
 801accc:	1c5a      	adds	r2, r3, #1
 801acce:	617a      	str	r2, [r7, #20]
 801acd0:	68ba      	ldr	r2, [r7, #8]
 801acd2:	b2d2      	uxtb	r2, r2
 801acd4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	3b01      	subs	r3, #1
 801acda:	607b      	str	r3, [r7, #4]
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d1f3      	bne.n	801acca <mem_set+0x10>
}
 801ace2:	bf00      	nop
 801ace4:	bf00      	nop
 801ace6:	371c      	adds	r7, #28
 801ace8:	46bd      	mov	sp, r7
 801acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acee:	4770      	bx	lr

0801acf0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801acf0:	b480      	push	{r7}
 801acf2:	b089      	sub	sp, #36	@ 0x24
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	60f8      	str	r0, [r7, #12]
 801acf8:	60b9      	str	r1, [r7, #8]
 801acfa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	61fb      	str	r3, [r7, #28]
 801ad00:	68bb      	ldr	r3, [r7, #8]
 801ad02:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801ad04:	2300      	movs	r3, #0
 801ad06:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801ad08:	69fb      	ldr	r3, [r7, #28]
 801ad0a:	1c5a      	adds	r2, r3, #1
 801ad0c:	61fa      	str	r2, [r7, #28]
 801ad0e:	781b      	ldrb	r3, [r3, #0]
 801ad10:	4619      	mov	r1, r3
 801ad12:	69bb      	ldr	r3, [r7, #24]
 801ad14:	1c5a      	adds	r2, r3, #1
 801ad16:	61ba      	str	r2, [r7, #24]
 801ad18:	781b      	ldrb	r3, [r3, #0]
 801ad1a:	1acb      	subs	r3, r1, r3
 801ad1c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	3b01      	subs	r3, #1
 801ad22:	607b      	str	r3, [r7, #4]
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d002      	beq.n	801ad30 <mem_cmp+0x40>
 801ad2a:	697b      	ldr	r3, [r7, #20]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d0eb      	beq.n	801ad08 <mem_cmp+0x18>

	return r;
 801ad30:	697b      	ldr	r3, [r7, #20]
}
 801ad32:	4618      	mov	r0, r3
 801ad34:	3724      	adds	r7, #36	@ 0x24
 801ad36:	46bd      	mov	sp, r7
 801ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad3c:	4770      	bx	lr

0801ad3e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801ad3e:	b480      	push	{r7}
 801ad40:	b083      	sub	sp, #12
 801ad42:	af00      	add	r7, sp, #0
 801ad44:	6078      	str	r0, [r7, #4]
 801ad46:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801ad48:	e002      	b.n	801ad50 <chk_chr+0x12>
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	3301      	adds	r3, #1
 801ad4e:	607b      	str	r3, [r7, #4]
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	781b      	ldrb	r3, [r3, #0]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d005      	beq.n	801ad64 <chk_chr+0x26>
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	781b      	ldrb	r3, [r3, #0]
 801ad5c:	461a      	mov	r2, r3
 801ad5e:	683b      	ldr	r3, [r7, #0]
 801ad60:	4293      	cmp	r3, r2
 801ad62:	d1f2      	bne.n	801ad4a <chk_chr+0xc>
	return *str;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	781b      	ldrb	r3, [r3, #0]
}
 801ad68:	4618      	mov	r0, r3
 801ad6a:	370c      	adds	r7, #12
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad72:	4770      	bx	lr

0801ad74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ad74:	b480      	push	{r7}
 801ad76:	b085      	sub	sp, #20
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
 801ad7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ad7e:	2300      	movs	r3, #0
 801ad80:	60bb      	str	r3, [r7, #8]
 801ad82:	68bb      	ldr	r3, [r7, #8]
 801ad84:	60fb      	str	r3, [r7, #12]
 801ad86:	e029      	b.n	801addc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801ad88:	4a27      	ldr	r2, [pc, #156]	@ (801ae28 <chk_lock+0xb4>)
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	011b      	lsls	r3, r3, #4
 801ad8e:	4413      	add	r3, r2
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d01d      	beq.n	801add2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ad96:	4a24      	ldr	r2, [pc, #144]	@ (801ae28 <chk_lock+0xb4>)
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	011b      	lsls	r3, r3, #4
 801ad9c:	4413      	add	r3, r2
 801ad9e:	681a      	ldr	r2, [r3, #0]
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	429a      	cmp	r2, r3
 801ada6:	d116      	bne.n	801add6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801ada8:	4a1f      	ldr	r2, [pc, #124]	@ (801ae28 <chk_lock+0xb4>)
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	011b      	lsls	r3, r3, #4
 801adae:	4413      	add	r3, r2
 801adb0:	3304      	adds	r3, #4
 801adb2:	681a      	ldr	r2, [r3, #0]
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801adb8:	429a      	cmp	r2, r3
 801adba:	d10c      	bne.n	801add6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801adbc:	4a1a      	ldr	r2, [pc, #104]	@ (801ae28 <chk_lock+0xb4>)
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	011b      	lsls	r3, r3, #4
 801adc2:	4413      	add	r3, r2
 801adc4:	3308      	adds	r3, #8
 801adc6:	681a      	ldr	r2, [r3, #0]
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801adcc:	429a      	cmp	r2, r3
 801adce:	d102      	bne.n	801add6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801add0:	e007      	b.n	801ade2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801add2:	2301      	movs	r3, #1
 801add4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	3301      	adds	r3, #1
 801adda:	60fb      	str	r3, [r7, #12]
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d0d2      	beq.n	801ad88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	2b01      	cmp	r3, #1
 801ade6:	d109      	bne.n	801adfc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801ade8:	68bb      	ldr	r3, [r7, #8]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d102      	bne.n	801adf4 <chk_lock+0x80>
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	2b02      	cmp	r3, #2
 801adf2:	d101      	bne.n	801adf8 <chk_lock+0x84>
 801adf4:	2300      	movs	r3, #0
 801adf6:	e010      	b.n	801ae1a <chk_lock+0xa6>
 801adf8:	2312      	movs	r3, #18
 801adfa:	e00e      	b.n	801ae1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801adfc:	683b      	ldr	r3, [r7, #0]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d108      	bne.n	801ae14 <chk_lock+0xa0>
 801ae02:	4a09      	ldr	r2, [pc, #36]	@ (801ae28 <chk_lock+0xb4>)
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	011b      	lsls	r3, r3, #4
 801ae08:	4413      	add	r3, r2
 801ae0a:	330c      	adds	r3, #12
 801ae0c:	881b      	ldrh	r3, [r3, #0]
 801ae0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ae12:	d101      	bne.n	801ae18 <chk_lock+0xa4>
 801ae14:	2310      	movs	r3, #16
 801ae16:	e000      	b.n	801ae1a <chk_lock+0xa6>
 801ae18:	2300      	movs	r3, #0
}
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	3714      	adds	r7, #20
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae24:	4770      	bx	lr
 801ae26:	bf00      	nop
 801ae28:	240005f0 	.word	0x240005f0

0801ae2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801ae2c:	b480      	push	{r7}
 801ae2e:	b083      	sub	sp, #12
 801ae30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801ae32:	2300      	movs	r3, #0
 801ae34:	607b      	str	r3, [r7, #4]
 801ae36:	e002      	b.n	801ae3e <enq_lock+0x12>
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	3301      	adds	r3, #1
 801ae3c:	607b      	str	r3, [r7, #4]
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d106      	bne.n	801ae52 <enq_lock+0x26>
 801ae44:	4a09      	ldr	r2, [pc, #36]	@ (801ae6c <enq_lock+0x40>)
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	011b      	lsls	r3, r3, #4
 801ae4a:	4413      	add	r3, r2
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d1f2      	bne.n	801ae38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	2b01      	cmp	r3, #1
 801ae56:	bf14      	ite	ne
 801ae58:	2301      	movne	r3, #1
 801ae5a:	2300      	moveq	r3, #0
 801ae5c:	b2db      	uxtb	r3, r3
}
 801ae5e:	4618      	mov	r0, r3
 801ae60:	370c      	adds	r7, #12
 801ae62:	46bd      	mov	sp, r7
 801ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae68:	4770      	bx	lr
 801ae6a:	bf00      	nop
 801ae6c:	240005f0 	.word	0x240005f0

0801ae70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ae70:	b480      	push	{r7}
 801ae72:	b085      	sub	sp, #20
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]
 801ae78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ae7a:	2300      	movs	r3, #0
 801ae7c:	60fb      	str	r3, [r7, #12]
 801ae7e:	e01f      	b.n	801aec0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801ae80:	4a41      	ldr	r2, [pc, #260]	@ (801af88 <inc_lock+0x118>)
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	011b      	lsls	r3, r3, #4
 801ae86:	4413      	add	r3, r2
 801ae88:	681a      	ldr	r2, [r3, #0]
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	429a      	cmp	r2, r3
 801ae90:	d113      	bne.n	801aeba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801ae92:	4a3d      	ldr	r2, [pc, #244]	@ (801af88 <inc_lock+0x118>)
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	011b      	lsls	r3, r3, #4
 801ae98:	4413      	add	r3, r2
 801ae9a:	3304      	adds	r3, #4
 801ae9c:	681a      	ldr	r2, [r3, #0]
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801aea2:	429a      	cmp	r2, r3
 801aea4:	d109      	bne.n	801aeba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801aea6:	4a38      	ldr	r2, [pc, #224]	@ (801af88 <inc_lock+0x118>)
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	011b      	lsls	r3, r3, #4
 801aeac:	4413      	add	r3, r2
 801aeae:	3308      	adds	r3, #8
 801aeb0:	681a      	ldr	r2, [r3, #0]
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801aeb6:	429a      	cmp	r2, r3
 801aeb8:	d006      	beq.n	801aec8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801aeba:	68fb      	ldr	r3, [r7, #12]
 801aebc:	3301      	adds	r3, #1
 801aebe:	60fb      	str	r3, [r7, #12]
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d0dc      	beq.n	801ae80 <inc_lock+0x10>
 801aec6:	e000      	b.n	801aeca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801aec8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	2b01      	cmp	r3, #1
 801aece:	d132      	bne.n	801af36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aed0:	2300      	movs	r3, #0
 801aed2:	60fb      	str	r3, [r7, #12]
 801aed4:	e002      	b.n	801aedc <inc_lock+0x6c>
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	3301      	adds	r3, #1
 801aeda:	60fb      	str	r3, [r7, #12]
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d106      	bne.n	801aef0 <inc_lock+0x80>
 801aee2:	4a29      	ldr	r2, [pc, #164]	@ (801af88 <inc_lock+0x118>)
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	011b      	lsls	r3, r3, #4
 801aee8:	4413      	add	r3, r2
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d1f2      	bne.n	801aed6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	2b01      	cmp	r3, #1
 801aef4:	d101      	bne.n	801aefa <inc_lock+0x8a>
 801aef6:	2300      	movs	r3, #0
 801aef8:	e040      	b.n	801af7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	681a      	ldr	r2, [r3, #0]
 801aefe:	4922      	ldr	r1, [pc, #136]	@ (801af88 <inc_lock+0x118>)
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	011b      	lsls	r3, r3, #4
 801af04:	440b      	add	r3, r1
 801af06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	689a      	ldr	r2, [r3, #8]
 801af0c:	491e      	ldr	r1, [pc, #120]	@ (801af88 <inc_lock+0x118>)
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	011b      	lsls	r3, r3, #4
 801af12:	440b      	add	r3, r1
 801af14:	3304      	adds	r3, #4
 801af16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	695a      	ldr	r2, [r3, #20]
 801af1c:	491a      	ldr	r1, [pc, #104]	@ (801af88 <inc_lock+0x118>)
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	011b      	lsls	r3, r3, #4
 801af22:	440b      	add	r3, r1
 801af24:	3308      	adds	r3, #8
 801af26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801af28:	4a17      	ldr	r2, [pc, #92]	@ (801af88 <inc_lock+0x118>)
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	011b      	lsls	r3, r3, #4
 801af2e:	4413      	add	r3, r2
 801af30:	330c      	adds	r3, #12
 801af32:	2200      	movs	r2, #0
 801af34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d009      	beq.n	801af50 <inc_lock+0xe0>
 801af3c:	4a12      	ldr	r2, [pc, #72]	@ (801af88 <inc_lock+0x118>)
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	011b      	lsls	r3, r3, #4
 801af42:	4413      	add	r3, r2
 801af44:	330c      	adds	r3, #12
 801af46:	881b      	ldrh	r3, [r3, #0]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d001      	beq.n	801af50 <inc_lock+0xe0>
 801af4c:	2300      	movs	r3, #0
 801af4e:	e015      	b.n	801af7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801af50:	683b      	ldr	r3, [r7, #0]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d108      	bne.n	801af68 <inc_lock+0xf8>
 801af56:	4a0c      	ldr	r2, [pc, #48]	@ (801af88 <inc_lock+0x118>)
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	011b      	lsls	r3, r3, #4
 801af5c:	4413      	add	r3, r2
 801af5e:	330c      	adds	r3, #12
 801af60:	881b      	ldrh	r3, [r3, #0]
 801af62:	3301      	adds	r3, #1
 801af64:	b29a      	uxth	r2, r3
 801af66:	e001      	b.n	801af6c <inc_lock+0xfc>
 801af68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801af6c:	4906      	ldr	r1, [pc, #24]	@ (801af88 <inc_lock+0x118>)
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	011b      	lsls	r3, r3, #4
 801af72:	440b      	add	r3, r1
 801af74:	330c      	adds	r3, #12
 801af76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	3301      	adds	r3, #1
}
 801af7c:	4618      	mov	r0, r3
 801af7e:	3714      	adds	r7, #20
 801af80:	46bd      	mov	sp, r7
 801af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af86:	4770      	bx	lr
 801af88:	240005f0 	.word	0x240005f0

0801af8c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801af8c:	b480      	push	{r7}
 801af8e:	b085      	sub	sp, #20
 801af90:	af00      	add	r7, sp, #0
 801af92:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	3b01      	subs	r3, #1
 801af98:	607b      	str	r3, [r7, #4]
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d125      	bne.n	801afec <dec_lock+0x60>
		n = Files[i].ctr;
 801afa0:	4a17      	ldr	r2, [pc, #92]	@ (801b000 <dec_lock+0x74>)
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	011b      	lsls	r3, r3, #4
 801afa6:	4413      	add	r3, r2
 801afa8:	330c      	adds	r3, #12
 801afaa:	881b      	ldrh	r3, [r3, #0]
 801afac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801afae:	89fb      	ldrh	r3, [r7, #14]
 801afb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801afb4:	d101      	bne.n	801afba <dec_lock+0x2e>
 801afb6:	2300      	movs	r3, #0
 801afb8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801afba:	89fb      	ldrh	r3, [r7, #14]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d002      	beq.n	801afc6 <dec_lock+0x3a>
 801afc0:	89fb      	ldrh	r3, [r7, #14]
 801afc2:	3b01      	subs	r3, #1
 801afc4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801afc6:	4a0e      	ldr	r2, [pc, #56]	@ (801b000 <dec_lock+0x74>)
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	011b      	lsls	r3, r3, #4
 801afcc:	4413      	add	r3, r2
 801afce:	330c      	adds	r3, #12
 801afd0:	89fa      	ldrh	r2, [r7, #14]
 801afd2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801afd4:	89fb      	ldrh	r3, [r7, #14]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d105      	bne.n	801afe6 <dec_lock+0x5a>
 801afda:	4a09      	ldr	r2, [pc, #36]	@ (801b000 <dec_lock+0x74>)
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	011b      	lsls	r3, r3, #4
 801afe0:	4413      	add	r3, r2
 801afe2:	2200      	movs	r2, #0
 801afe4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801afe6:	2300      	movs	r3, #0
 801afe8:	737b      	strb	r3, [r7, #13]
 801afea:	e001      	b.n	801aff0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801afec:	2302      	movs	r3, #2
 801afee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801aff0:	7b7b      	ldrb	r3, [r7, #13]
}
 801aff2:	4618      	mov	r0, r3
 801aff4:	3714      	adds	r7, #20
 801aff6:	46bd      	mov	sp, r7
 801aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801affc:	4770      	bx	lr
 801affe:	bf00      	nop
 801b000:	240005f0 	.word	0x240005f0

0801b004 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b004:	b480      	push	{r7}
 801b006:	b085      	sub	sp, #20
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b00c:	2300      	movs	r3, #0
 801b00e:	60fb      	str	r3, [r7, #12]
 801b010:	e010      	b.n	801b034 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b012:	4a0d      	ldr	r2, [pc, #52]	@ (801b048 <clear_lock+0x44>)
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	011b      	lsls	r3, r3, #4
 801b018:	4413      	add	r3, r2
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	687a      	ldr	r2, [r7, #4]
 801b01e:	429a      	cmp	r2, r3
 801b020:	d105      	bne.n	801b02e <clear_lock+0x2a>
 801b022:	4a09      	ldr	r2, [pc, #36]	@ (801b048 <clear_lock+0x44>)
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	011b      	lsls	r3, r3, #4
 801b028:	4413      	add	r3, r2
 801b02a:	2200      	movs	r2, #0
 801b02c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	3301      	adds	r3, #1
 801b032:	60fb      	str	r3, [r7, #12]
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d0eb      	beq.n	801b012 <clear_lock+0xe>
	}
}
 801b03a:	bf00      	nop
 801b03c:	bf00      	nop
 801b03e:	3714      	adds	r7, #20
 801b040:	46bd      	mov	sp, r7
 801b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b046:	4770      	bx	lr
 801b048:	240005f0 	.word	0x240005f0

0801b04c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b086      	sub	sp, #24
 801b050:	af00      	add	r7, sp, #0
 801b052:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b054:	2300      	movs	r3, #0
 801b056:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	78db      	ldrb	r3, [r3, #3]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d034      	beq.n	801b0ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b064:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	7858      	ldrb	r0, [r3, #1]
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b070:	2301      	movs	r3, #1
 801b072:	697a      	ldr	r2, [r7, #20]
 801b074:	f7ff fd40 	bl	801aaf8 <disk_write>
 801b078:	4603      	mov	r3, r0
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d002      	beq.n	801b084 <sync_window+0x38>
			res = FR_DISK_ERR;
 801b07e:	2301      	movs	r3, #1
 801b080:	73fb      	strb	r3, [r7, #15]
 801b082:	e022      	b.n	801b0ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	2200      	movs	r2, #0
 801b088:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b08e:	697a      	ldr	r2, [r7, #20]
 801b090:	1ad2      	subs	r2, r2, r3
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	6a1b      	ldr	r3, [r3, #32]
 801b096:	429a      	cmp	r2, r3
 801b098:	d217      	bcs.n	801b0ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	789b      	ldrb	r3, [r3, #2]
 801b09e:	613b      	str	r3, [r7, #16]
 801b0a0:	e010      	b.n	801b0c4 <sync_window+0x78>
					wsect += fs->fsize;
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	6a1b      	ldr	r3, [r3, #32]
 801b0a6:	697a      	ldr	r2, [r7, #20]
 801b0a8:	4413      	add	r3, r2
 801b0aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	7858      	ldrb	r0, [r3, #1]
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b0b6:	2301      	movs	r3, #1
 801b0b8:	697a      	ldr	r2, [r7, #20]
 801b0ba:	f7ff fd1d 	bl	801aaf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b0be:	693b      	ldr	r3, [r7, #16]
 801b0c0:	3b01      	subs	r3, #1
 801b0c2:	613b      	str	r3, [r7, #16]
 801b0c4:	693b      	ldr	r3, [r7, #16]
 801b0c6:	2b01      	cmp	r3, #1
 801b0c8:	d8eb      	bhi.n	801b0a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	3718      	adds	r7, #24
 801b0d0:	46bd      	mov	sp, r7
 801b0d2:	bd80      	pop	{r7, pc}

0801b0d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b0d4:	b580      	push	{r7, lr}
 801b0d6:	b084      	sub	sp, #16
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	6078      	str	r0, [r7, #4]
 801b0dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b0de:	2300      	movs	r3, #0
 801b0e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b0e6:	683a      	ldr	r2, [r7, #0]
 801b0e8:	429a      	cmp	r2, r3
 801b0ea:	d01b      	beq.n	801b124 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b0ec:	6878      	ldr	r0, [r7, #4]
 801b0ee:	f7ff ffad 	bl	801b04c <sync_window>
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b0f6:	7bfb      	ldrb	r3, [r7, #15]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d113      	bne.n	801b124 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	7858      	ldrb	r0, [r3, #1]
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b106:	2301      	movs	r3, #1
 801b108:	683a      	ldr	r2, [r7, #0]
 801b10a:	f7ff fcd5 	bl	801aab8 <disk_read>
 801b10e:	4603      	mov	r3, r0
 801b110:	2b00      	cmp	r3, #0
 801b112:	d004      	beq.n	801b11e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b114:	f04f 33ff 	mov.w	r3, #4294967295
 801b118:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b11a:	2301      	movs	r3, #1
 801b11c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	683a      	ldr	r2, [r7, #0]
 801b122:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b124:	7bfb      	ldrb	r3, [r7, #15]
}
 801b126:	4618      	mov	r0, r3
 801b128:	3710      	adds	r7, #16
 801b12a:	46bd      	mov	sp, r7
 801b12c:	bd80      	pop	{r7, pc}
	...

0801b130 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b130:	b580      	push	{r7, lr}
 801b132:	b084      	sub	sp, #16
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b138:	6878      	ldr	r0, [r7, #4]
 801b13a:	f7ff ff87 	bl	801b04c <sync_window>
 801b13e:	4603      	mov	r3, r0
 801b140:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b142:	7bfb      	ldrb	r3, [r7, #15]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d159      	bne.n	801b1fc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	781b      	ldrb	r3, [r3, #0]
 801b14c:	2b03      	cmp	r3, #3
 801b14e:	d149      	bne.n	801b1e4 <sync_fs+0xb4>
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	791b      	ldrb	r3, [r3, #4]
 801b154:	2b01      	cmp	r3, #1
 801b156:	d145      	bne.n	801b1e4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	899b      	ldrh	r3, [r3, #12]
 801b162:	461a      	mov	r2, r3
 801b164:	2100      	movs	r1, #0
 801b166:	f7ff fda8 	bl	801acba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	3338      	adds	r3, #56	@ 0x38
 801b16e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b172:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b176:	4618      	mov	r0, r3
 801b178:	f7ff fd37 	bl	801abea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	3338      	adds	r3, #56	@ 0x38
 801b180:	4921      	ldr	r1, [pc, #132]	@ (801b208 <sync_fs+0xd8>)
 801b182:	4618      	mov	r0, r3
 801b184:	f7ff fd4c 	bl	801ac20 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	3338      	adds	r3, #56	@ 0x38
 801b18c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b190:	491e      	ldr	r1, [pc, #120]	@ (801b20c <sync_fs+0xdc>)
 801b192:	4618      	mov	r0, r3
 801b194:	f7ff fd44 	bl	801ac20 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	3338      	adds	r3, #56	@ 0x38
 801b19c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	699b      	ldr	r3, [r3, #24]
 801b1a4:	4619      	mov	r1, r3
 801b1a6:	4610      	mov	r0, r2
 801b1a8:	f7ff fd3a 	bl	801ac20 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	3338      	adds	r3, #56	@ 0x38
 801b1b0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	695b      	ldr	r3, [r3, #20]
 801b1b8:	4619      	mov	r1, r3
 801b1ba:	4610      	mov	r0, r2
 801b1bc:	f7ff fd30 	bl	801ac20 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b1c4:	1c5a      	adds	r2, r3, #1
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	7858      	ldrb	r0, [r3, #1]
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b1d8:	2301      	movs	r3, #1
 801b1da:	f7ff fc8d 	bl	801aaf8 <disk_write>
			fs->fsi_flag = 0;
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	785b      	ldrb	r3, [r3, #1]
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	2100      	movs	r1, #0
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7ff fca3 	bl	801ab38 <disk_ioctl>
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d001      	beq.n	801b1fc <sync_fs+0xcc>
 801b1f8:	2301      	movs	r3, #1
 801b1fa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1fe:	4618      	mov	r0, r3
 801b200:	3710      	adds	r7, #16
 801b202:	46bd      	mov	sp, r7
 801b204:	bd80      	pop	{r7, pc}
 801b206:	bf00      	nop
 801b208:	41615252 	.word	0x41615252
 801b20c:	61417272 	.word	0x61417272

0801b210 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b210:	b480      	push	{r7}
 801b212:	b083      	sub	sp, #12
 801b214:	af00      	add	r7, sp, #0
 801b216:	6078      	str	r0, [r7, #4]
 801b218:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b21a:	683b      	ldr	r3, [r7, #0]
 801b21c:	3b02      	subs	r3, #2
 801b21e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	69db      	ldr	r3, [r3, #28]
 801b224:	3b02      	subs	r3, #2
 801b226:	683a      	ldr	r2, [r7, #0]
 801b228:	429a      	cmp	r2, r3
 801b22a:	d301      	bcc.n	801b230 <clust2sect+0x20>
 801b22c:	2300      	movs	r3, #0
 801b22e:	e008      	b.n	801b242 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	895b      	ldrh	r3, [r3, #10]
 801b234:	461a      	mov	r2, r3
 801b236:	683b      	ldr	r3, [r7, #0]
 801b238:	fb03 f202 	mul.w	r2, r3, r2
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b240:	4413      	add	r3, r2
}
 801b242:	4618      	mov	r0, r3
 801b244:	370c      	adds	r7, #12
 801b246:	46bd      	mov	sp, r7
 801b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24c:	4770      	bx	lr

0801b24e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b24e:	b580      	push	{r7, lr}
 801b250:	b086      	sub	sp, #24
 801b252:	af00      	add	r7, sp, #0
 801b254:	6078      	str	r0, [r7, #4]
 801b256:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b25e:	683b      	ldr	r3, [r7, #0]
 801b260:	2b01      	cmp	r3, #1
 801b262:	d904      	bls.n	801b26e <get_fat+0x20>
 801b264:	693b      	ldr	r3, [r7, #16]
 801b266:	69db      	ldr	r3, [r3, #28]
 801b268:	683a      	ldr	r2, [r7, #0]
 801b26a:	429a      	cmp	r2, r3
 801b26c:	d302      	bcc.n	801b274 <get_fat+0x26>
		val = 1;	/* Internal error */
 801b26e:	2301      	movs	r3, #1
 801b270:	617b      	str	r3, [r7, #20]
 801b272:	e0ba      	b.n	801b3ea <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b274:	f04f 33ff 	mov.w	r3, #4294967295
 801b278:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b27a:	693b      	ldr	r3, [r7, #16]
 801b27c:	781b      	ldrb	r3, [r3, #0]
 801b27e:	2b03      	cmp	r3, #3
 801b280:	f000 8082 	beq.w	801b388 <get_fat+0x13a>
 801b284:	2b03      	cmp	r3, #3
 801b286:	f300 80a6 	bgt.w	801b3d6 <get_fat+0x188>
 801b28a:	2b01      	cmp	r3, #1
 801b28c:	d002      	beq.n	801b294 <get_fat+0x46>
 801b28e:	2b02      	cmp	r3, #2
 801b290:	d055      	beq.n	801b33e <get_fat+0xf0>
 801b292:	e0a0      	b.n	801b3d6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b294:	683b      	ldr	r3, [r7, #0]
 801b296:	60fb      	str	r3, [r7, #12]
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	085b      	lsrs	r3, r3, #1
 801b29c:	68fa      	ldr	r2, [r7, #12]
 801b29e:	4413      	add	r3, r2
 801b2a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b2a2:	693b      	ldr	r3, [r7, #16]
 801b2a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b2a6:	693b      	ldr	r3, [r7, #16]
 801b2a8:	899b      	ldrh	r3, [r3, #12]
 801b2aa:	4619      	mov	r1, r3
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2b2:	4413      	add	r3, r2
 801b2b4:	4619      	mov	r1, r3
 801b2b6:	6938      	ldr	r0, [r7, #16]
 801b2b8:	f7ff ff0c 	bl	801b0d4 <move_window>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	f040 808c 	bne.w	801b3dc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	1c5a      	adds	r2, r3, #1
 801b2c8:	60fa      	str	r2, [r7, #12]
 801b2ca:	693a      	ldr	r2, [r7, #16]
 801b2cc:	8992      	ldrh	r2, [r2, #12]
 801b2ce:	fbb3 f1f2 	udiv	r1, r3, r2
 801b2d2:	fb01 f202 	mul.w	r2, r1, r2
 801b2d6:	1a9b      	subs	r3, r3, r2
 801b2d8:	693a      	ldr	r2, [r7, #16]
 801b2da:	4413      	add	r3, r2
 801b2dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b2e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b2e2:	693b      	ldr	r3, [r7, #16]
 801b2e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b2e6:	693b      	ldr	r3, [r7, #16]
 801b2e8:	899b      	ldrh	r3, [r3, #12]
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2f2:	4413      	add	r3, r2
 801b2f4:	4619      	mov	r1, r3
 801b2f6:	6938      	ldr	r0, [r7, #16]
 801b2f8:	f7ff feec 	bl	801b0d4 <move_window>
 801b2fc:	4603      	mov	r3, r0
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d16e      	bne.n	801b3e0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b302:	693b      	ldr	r3, [r7, #16]
 801b304:	899b      	ldrh	r3, [r3, #12]
 801b306:	461a      	mov	r2, r3
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	fbb3 f1f2 	udiv	r1, r3, r2
 801b30e:	fb01 f202 	mul.w	r2, r1, r2
 801b312:	1a9b      	subs	r3, r3, r2
 801b314:	693a      	ldr	r2, [r7, #16]
 801b316:	4413      	add	r3, r2
 801b318:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b31c:	021b      	lsls	r3, r3, #8
 801b31e:	68ba      	ldr	r2, [r7, #8]
 801b320:	4313      	orrs	r3, r2
 801b322:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b324:	683b      	ldr	r3, [r7, #0]
 801b326:	f003 0301 	and.w	r3, r3, #1
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d002      	beq.n	801b334 <get_fat+0xe6>
 801b32e:	68bb      	ldr	r3, [r7, #8]
 801b330:	091b      	lsrs	r3, r3, #4
 801b332:	e002      	b.n	801b33a <get_fat+0xec>
 801b334:	68bb      	ldr	r3, [r7, #8]
 801b336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b33a:	617b      	str	r3, [r7, #20]
			break;
 801b33c:	e055      	b.n	801b3ea <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b33e:	693b      	ldr	r3, [r7, #16]
 801b340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b342:	693b      	ldr	r3, [r7, #16]
 801b344:	899b      	ldrh	r3, [r3, #12]
 801b346:	085b      	lsrs	r3, r3, #1
 801b348:	b29b      	uxth	r3, r3
 801b34a:	4619      	mov	r1, r3
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b352:	4413      	add	r3, r2
 801b354:	4619      	mov	r1, r3
 801b356:	6938      	ldr	r0, [r7, #16]
 801b358:	f7ff febc 	bl	801b0d4 <move_window>
 801b35c:	4603      	mov	r3, r0
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d140      	bne.n	801b3e4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b362:	693b      	ldr	r3, [r7, #16]
 801b364:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b368:	683b      	ldr	r3, [r7, #0]
 801b36a:	005b      	lsls	r3, r3, #1
 801b36c:	693a      	ldr	r2, [r7, #16]
 801b36e:	8992      	ldrh	r2, [r2, #12]
 801b370:	fbb3 f0f2 	udiv	r0, r3, r2
 801b374:	fb00 f202 	mul.w	r2, r0, r2
 801b378:	1a9b      	subs	r3, r3, r2
 801b37a:	440b      	add	r3, r1
 801b37c:	4618      	mov	r0, r3
 801b37e:	f7ff fbf9 	bl	801ab74 <ld_word>
 801b382:	4603      	mov	r3, r0
 801b384:	617b      	str	r3, [r7, #20]
			break;
 801b386:	e030      	b.n	801b3ea <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b388:	693b      	ldr	r3, [r7, #16]
 801b38a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b38c:	693b      	ldr	r3, [r7, #16]
 801b38e:	899b      	ldrh	r3, [r3, #12]
 801b390:	089b      	lsrs	r3, r3, #2
 801b392:	b29b      	uxth	r3, r3
 801b394:	4619      	mov	r1, r3
 801b396:	683b      	ldr	r3, [r7, #0]
 801b398:	fbb3 f3f1 	udiv	r3, r3, r1
 801b39c:	4413      	add	r3, r2
 801b39e:	4619      	mov	r1, r3
 801b3a0:	6938      	ldr	r0, [r7, #16]
 801b3a2:	f7ff fe97 	bl	801b0d4 <move_window>
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d11d      	bne.n	801b3e8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b3ac:	693b      	ldr	r3, [r7, #16]
 801b3ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b3b2:	683b      	ldr	r3, [r7, #0]
 801b3b4:	009b      	lsls	r3, r3, #2
 801b3b6:	693a      	ldr	r2, [r7, #16]
 801b3b8:	8992      	ldrh	r2, [r2, #12]
 801b3ba:	fbb3 f0f2 	udiv	r0, r3, r2
 801b3be:	fb00 f202 	mul.w	r2, r0, r2
 801b3c2:	1a9b      	subs	r3, r3, r2
 801b3c4:	440b      	add	r3, r1
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	f7ff fbec 	bl	801aba4 <ld_dword>
 801b3cc:	4603      	mov	r3, r0
 801b3ce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b3d2:	617b      	str	r3, [r7, #20]
			break;
 801b3d4:	e009      	b.n	801b3ea <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b3d6:	2301      	movs	r3, #1
 801b3d8:	617b      	str	r3, [r7, #20]
 801b3da:	e006      	b.n	801b3ea <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b3dc:	bf00      	nop
 801b3de:	e004      	b.n	801b3ea <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b3e0:	bf00      	nop
 801b3e2:	e002      	b.n	801b3ea <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b3e4:	bf00      	nop
 801b3e6:	e000      	b.n	801b3ea <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b3e8:	bf00      	nop
		}
	}

	return val;
 801b3ea:	697b      	ldr	r3, [r7, #20]
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3718      	adds	r7, #24
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}

0801b3f4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b3f4:	b590      	push	{r4, r7, lr}
 801b3f6:	b089      	sub	sp, #36	@ 0x24
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	60f8      	str	r0, [r7, #12]
 801b3fc:	60b9      	str	r1, [r7, #8]
 801b3fe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b400:	2302      	movs	r3, #2
 801b402:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b404:	68bb      	ldr	r3, [r7, #8]
 801b406:	2b01      	cmp	r3, #1
 801b408:	f240 8109 	bls.w	801b61e <put_fat+0x22a>
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	69db      	ldr	r3, [r3, #28]
 801b410:	68ba      	ldr	r2, [r7, #8]
 801b412:	429a      	cmp	r2, r3
 801b414:	f080 8103 	bcs.w	801b61e <put_fat+0x22a>
		switch (fs->fs_type) {
 801b418:	68fb      	ldr	r3, [r7, #12]
 801b41a:	781b      	ldrb	r3, [r3, #0]
 801b41c:	2b03      	cmp	r3, #3
 801b41e:	f000 80b6 	beq.w	801b58e <put_fat+0x19a>
 801b422:	2b03      	cmp	r3, #3
 801b424:	f300 80fb 	bgt.w	801b61e <put_fat+0x22a>
 801b428:	2b01      	cmp	r3, #1
 801b42a:	d003      	beq.n	801b434 <put_fat+0x40>
 801b42c:	2b02      	cmp	r3, #2
 801b42e:	f000 8083 	beq.w	801b538 <put_fat+0x144>
 801b432:	e0f4      	b.n	801b61e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b434:	68bb      	ldr	r3, [r7, #8]
 801b436:	61bb      	str	r3, [r7, #24]
 801b438:	69bb      	ldr	r3, [r7, #24]
 801b43a:	085b      	lsrs	r3, r3, #1
 801b43c:	69ba      	ldr	r2, [r7, #24]
 801b43e:	4413      	add	r3, r2
 801b440:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	899b      	ldrh	r3, [r3, #12]
 801b44a:	4619      	mov	r1, r3
 801b44c:	69bb      	ldr	r3, [r7, #24]
 801b44e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b452:	4413      	add	r3, r2
 801b454:	4619      	mov	r1, r3
 801b456:	68f8      	ldr	r0, [r7, #12]
 801b458:	f7ff fe3c 	bl	801b0d4 <move_window>
 801b45c:	4603      	mov	r3, r0
 801b45e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b460:	7ffb      	ldrb	r3, [r7, #31]
 801b462:	2b00      	cmp	r3, #0
 801b464:	f040 80d4 	bne.w	801b610 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b46e:	69bb      	ldr	r3, [r7, #24]
 801b470:	1c5a      	adds	r2, r3, #1
 801b472:	61ba      	str	r2, [r7, #24]
 801b474:	68fa      	ldr	r2, [r7, #12]
 801b476:	8992      	ldrh	r2, [r2, #12]
 801b478:	fbb3 f0f2 	udiv	r0, r3, r2
 801b47c:	fb00 f202 	mul.w	r2, r0, r2
 801b480:	1a9b      	subs	r3, r3, r2
 801b482:	440b      	add	r3, r1
 801b484:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b486:	68bb      	ldr	r3, [r7, #8]
 801b488:	f003 0301 	and.w	r3, r3, #1
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d00d      	beq.n	801b4ac <put_fat+0xb8>
 801b490:	697b      	ldr	r3, [r7, #20]
 801b492:	781b      	ldrb	r3, [r3, #0]
 801b494:	b25b      	sxtb	r3, r3
 801b496:	f003 030f 	and.w	r3, r3, #15
 801b49a:	b25a      	sxtb	r2, r3
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	b2db      	uxtb	r3, r3
 801b4a0:	011b      	lsls	r3, r3, #4
 801b4a2:	b25b      	sxtb	r3, r3
 801b4a4:	4313      	orrs	r3, r2
 801b4a6:	b25b      	sxtb	r3, r3
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	e001      	b.n	801b4b0 <put_fat+0xbc>
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	697a      	ldr	r2, [r7, #20]
 801b4b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	2201      	movs	r2, #1
 801b4b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	899b      	ldrh	r3, [r3, #12]
 801b4c2:	4619      	mov	r1, r3
 801b4c4:	69bb      	ldr	r3, [r7, #24]
 801b4c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4ca:	4413      	add	r3, r2
 801b4cc:	4619      	mov	r1, r3
 801b4ce:	68f8      	ldr	r0, [r7, #12]
 801b4d0:	f7ff fe00 	bl	801b0d4 <move_window>
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b4d8:	7ffb      	ldrb	r3, [r7, #31]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	f040 809a 	bne.w	801b614 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b4e0:	68fb      	ldr	r3, [r7, #12]
 801b4e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	899b      	ldrh	r3, [r3, #12]
 801b4ea:	461a      	mov	r2, r3
 801b4ec:	69bb      	ldr	r3, [r7, #24]
 801b4ee:	fbb3 f0f2 	udiv	r0, r3, r2
 801b4f2:	fb00 f202 	mul.w	r2, r0, r2
 801b4f6:	1a9b      	subs	r3, r3, r2
 801b4f8:	440b      	add	r3, r1
 801b4fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b4fc:	68bb      	ldr	r3, [r7, #8]
 801b4fe:	f003 0301 	and.w	r3, r3, #1
 801b502:	2b00      	cmp	r3, #0
 801b504:	d003      	beq.n	801b50e <put_fat+0x11a>
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	091b      	lsrs	r3, r3, #4
 801b50a:	b2db      	uxtb	r3, r3
 801b50c:	e00e      	b.n	801b52c <put_fat+0x138>
 801b50e:	697b      	ldr	r3, [r7, #20]
 801b510:	781b      	ldrb	r3, [r3, #0]
 801b512:	b25b      	sxtb	r3, r3
 801b514:	f023 030f 	bic.w	r3, r3, #15
 801b518:	b25a      	sxtb	r2, r3
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	0a1b      	lsrs	r3, r3, #8
 801b51e:	b25b      	sxtb	r3, r3
 801b520:	f003 030f 	and.w	r3, r3, #15
 801b524:	b25b      	sxtb	r3, r3
 801b526:	4313      	orrs	r3, r2
 801b528:	b25b      	sxtb	r3, r3
 801b52a:	b2db      	uxtb	r3, r3
 801b52c:	697a      	ldr	r2, [r7, #20]
 801b52e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	2201      	movs	r2, #1
 801b534:	70da      	strb	r2, [r3, #3]
			break;
 801b536:	e072      	b.n	801b61e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	899b      	ldrh	r3, [r3, #12]
 801b540:	085b      	lsrs	r3, r3, #1
 801b542:	b29b      	uxth	r3, r3
 801b544:	4619      	mov	r1, r3
 801b546:	68bb      	ldr	r3, [r7, #8]
 801b548:	fbb3 f3f1 	udiv	r3, r3, r1
 801b54c:	4413      	add	r3, r2
 801b54e:	4619      	mov	r1, r3
 801b550:	68f8      	ldr	r0, [r7, #12]
 801b552:	f7ff fdbf 	bl	801b0d4 <move_window>
 801b556:	4603      	mov	r3, r0
 801b558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b55a:	7ffb      	ldrb	r3, [r7, #31]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d15b      	bne.n	801b618 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	005b      	lsls	r3, r3, #1
 801b56a:	68fa      	ldr	r2, [r7, #12]
 801b56c:	8992      	ldrh	r2, [r2, #12]
 801b56e:	fbb3 f0f2 	udiv	r0, r3, r2
 801b572:	fb00 f202 	mul.w	r2, r0, r2
 801b576:	1a9b      	subs	r3, r3, r2
 801b578:	440b      	add	r3, r1
 801b57a:	687a      	ldr	r2, [r7, #4]
 801b57c:	b292      	uxth	r2, r2
 801b57e:	4611      	mov	r1, r2
 801b580:	4618      	mov	r0, r3
 801b582:	f7ff fb32 	bl	801abea <st_word>
			fs->wflag = 1;
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	2201      	movs	r2, #1
 801b58a:	70da      	strb	r2, [r3, #3]
			break;
 801b58c:	e047      	b.n	801b61e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	899b      	ldrh	r3, [r3, #12]
 801b596:	089b      	lsrs	r3, r3, #2
 801b598:	b29b      	uxth	r3, r3
 801b59a:	4619      	mov	r1, r3
 801b59c:	68bb      	ldr	r3, [r7, #8]
 801b59e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b5a2:	4413      	add	r3, r2
 801b5a4:	4619      	mov	r1, r3
 801b5a6:	68f8      	ldr	r0, [r7, #12]
 801b5a8:	f7ff fd94 	bl	801b0d4 <move_window>
 801b5ac:	4603      	mov	r3, r0
 801b5ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b5b0:	7ffb      	ldrb	r3, [r7, #31]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d132      	bne.n	801b61c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b5c2:	68bb      	ldr	r3, [r7, #8]
 801b5c4:	009b      	lsls	r3, r3, #2
 801b5c6:	68fa      	ldr	r2, [r7, #12]
 801b5c8:	8992      	ldrh	r2, [r2, #12]
 801b5ca:	fbb3 f0f2 	udiv	r0, r3, r2
 801b5ce:	fb00 f202 	mul.w	r2, r0, r2
 801b5d2:	1a9b      	subs	r3, r3, r2
 801b5d4:	440b      	add	r3, r1
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	f7ff fae4 	bl	801aba4 <ld_dword>
 801b5dc:	4603      	mov	r3, r0
 801b5de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b5e2:	4323      	orrs	r3, r4
 801b5e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b5ec:	68bb      	ldr	r3, [r7, #8]
 801b5ee:	009b      	lsls	r3, r3, #2
 801b5f0:	68fa      	ldr	r2, [r7, #12]
 801b5f2:	8992      	ldrh	r2, [r2, #12]
 801b5f4:	fbb3 f0f2 	udiv	r0, r3, r2
 801b5f8:	fb00 f202 	mul.w	r2, r0, r2
 801b5fc:	1a9b      	subs	r3, r3, r2
 801b5fe:	440b      	add	r3, r1
 801b600:	6879      	ldr	r1, [r7, #4]
 801b602:	4618      	mov	r0, r3
 801b604:	f7ff fb0c 	bl	801ac20 <st_dword>
			fs->wflag = 1;
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	2201      	movs	r2, #1
 801b60c:	70da      	strb	r2, [r3, #3]
			break;
 801b60e:	e006      	b.n	801b61e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b610:	bf00      	nop
 801b612:	e004      	b.n	801b61e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b614:	bf00      	nop
 801b616:	e002      	b.n	801b61e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b618:	bf00      	nop
 801b61a:	e000      	b.n	801b61e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b61c:	bf00      	nop
		}
	}
	return res;
 801b61e:	7ffb      	ldrb	r3, [r7, #31]
}
 801b620:	4618      	mov	r0, r3
 801b622:	3724      	adds	r7, #36	@ 0x24
 801b624:	46bd      	mov	sp, r7
 801b626:	bd90      	pop	{r4, r7, pc}

0801b628 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b088      	sub	sp, #32
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	60f8      	str	r0, [r7, #12]
 801b630:	60b9      	str	r1, [r7, #8]
 801b632:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b634:	2300      	movs	r3, #0
 801b636:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b63e:	68bb      	ldr	r3, [r7, #8]
 801b640:	2b01      	cmp	r3, #1
 801b642:	d904      	bls.n	801b64e <remove_chain+0x26>
 801b644:	69bb      	ldr	r3, [r7, #24]
 801b646:	69db      	ldr	r3, [r3, #28]
 801b648:	68ba      	ldr	r2, [r7, #8]
 801b64a:	429a      	cmp	r2, r3
 801b64c:	d301      	bcc.n	801b652 <remove_chain+0x2a>
 801b64e:	2302      	movs	r3, #2
 801b650:	e04b      	b.n	801b6ea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d00c      	beq.n	801b672 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b658:	f04f 32ff 	mov.w	r2, #4294967295
 801b65c:	6879      	ldr	r1, [r7, #4]
 801b65e:	69b8      	ldr	r0, [r7, #24]
 801b660:	f7ff fec8 	bl	801b3f4 <put_fat>
 801b664:	4603      	mov	r3, r0
 801b666:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b668:	7ffb      	ldrb	r3, [r7, #31]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d001      	beq.n	801b672 <remove_chain+0x4a>
 801b66e:	7ffb      	ldrb	r3, [r7, #31]
 801b670:	e03b      	b.n	801b6ea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b672:	68b9      	ldr	r1, [r7, #8]
 801b674:	68f8      	ldr	r0, [r7, #12]
 801b676:	f7ff fdea 	bl	801b24e <get_fat>
 801b67a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d031      	beq.n	801b6e6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b682:	697b      	ldr	r3, [r7, #20]
 801b684:	2b01      	cmp	r3, #1
 801b686:	d101      	bne.n	801b68c <remove_chain+0x64>
 801b688:	2302      	movs	r3, #2
 801b68a:	e02e      	b.n	801b6ea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b68c:	697b      	ldr	r3, [r7, #20]
 801b68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b692:	d101      	bne.n	801b698 <remove_chain+0x70>
 801b694:	2301      	movs	r3, #1
 801b696:	e028      	b.n	801b6ea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b698:	2200      	movs	r2, #0
 801b69a:	68b9      	ldr	r1, [r7, #8]
 801b69c:	69b8      	ldr	r0, [r7, #24]
 801b69e:	f7ff fea9 	bl	801b3f4 <put_fat>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b6a6:	7ffb      	ldrb	r3, [r7, #31]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d001      	beq.n	801b6b0 <remove_chain+0x88>
 801b6ac:	7ffb      	ldrb	r3, [r7, #31]
 801b6ae:	e01c      	b.n	801b6ea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b6b0:	69bb      	ldr	r3, [r7, #24]
 801b6b2:	699a      	ldr	r2, [r3, #24]
 801b6b4:	69bb      	ldr	r3, [r7, #24]
 801b6b6:	69db      	ldr	r3, [r3, #28]
 801b6b8:	3b02      	subs	r3, #2
 801b6ba:	429a      	cmp	r2, r3
 801b6bc:	d20b      	bcs.n	801b6d6 <remove_chain+0xae>
			fs->free_clst++;
 801b6be:	69bb      	ldr	r3, [r7, #24]
 801b6c0:	699b      	ldr	r3, [r3, #24]
 801b6c2:	1c5a      	adds	r2, r3, #1
 801b6c4:	69bb      	ldr	r3, [r7, #24]
 801b6c6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b6c8:	69bb      	ldr	r3, [r7, #24]
 801b6ca:	791b      	ldrb	r3, [r3, #4]
 801b6cc:	f043 0301 	orr.w	r3, r3, #1
 801b6d0:	b2da      	uxtb	r2, r3
 801b6d2:	69bb      	ldr	r3, [r7, #24]
 801b6d4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b6d6:	697b      	ldr	r3, [r7, #20]
 801b6d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b6da:	69bb      	ldr	r3, [r7, #24]
 801b6dc:	69db      	ldr	r3, [r3, #28]
 801b6de:	68ba      	ldr	r2, [r7, #8]
 801b6e0:	429a      	cmp	r2, r3
 801b6e2:	d3c6      	bcc.n	801b672 <remove_chain+0x4a>
 801b6e4:	e000      	b.n	801b6e8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b6e6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b6e8:	2300      	movs	r3, #0
}
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	3720      	adds	r7, #32
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd80      	pop	{r7, pc}

0801b6f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b6f2:	b580      	push	{r7, lr}
 801b6f4:	b088      	sub	sp, #32
 801b6f6:	af00      	add	r7, sp, #0
 801b6f8:	6078      	str	r0, [r7, #4]
 801b6fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b702:	683b      	ldr	r3, [r7, #0]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d10d      	bne.n	801b724 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b708:	693b      	ldr	r3, [r7, #16]
 801b70a:	695b      	ldr	r3, [r3, #20]
 801b70c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b70e:	69bb      	ldr	r3, [r7, #24]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d004      	beq.n	801b71e <create_chain+0x2c>
 801b714:	693b      	ldr	r3, [r7, #16]
 801b716:	69db      	ldr	r3, [r3, #28]
 801b718:	69ba      	ldr	r2, [r7, #24]
 801b71a:	429a      	cmp	r2, r3
 801b71c:	d31b      	bcc.n	801b756 <create_chain+0x64>
 801b71e:	2301      	movs	r3, #1
 801b720:	61bb      	str	r3, [r7, #24]
 801b722:	e018      	b.n	801b756 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b724:	6839      	ldr	r1, [r7, #0]
 801b726:	6878      	ldr	r0, [r7, #4]
 801b728:	f7ff fd91 	bl	801b24e <get_fat>
 801b72c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	2b01      	cmp	r3, #1
 801b732:	d801      	bhi.n	801b738 <create_chain+0x46>
 801b734:	2301      	movs	r3, #1
 801b736:	e070      	b.n	801b81a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b73e:	d101      	bne.n	801b744 <create_chain+0x52>
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	e06a      	b.n	801b81a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b744:	693b      	ldr	r3, [r7, #16]
 801b746:	69db      	ldr	r3, [r3, #28]
 801b748:	68fa      	ldr	r2, [r7, #12]
 801b74a:	429a      	cmp	r2, r3
 801b74c:	d201      	bcs.n	801b752 <create_chain+0x60>
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	e063      	b.n	801b81a <create_chain+0x128>
		scl = clst;
 801b752:	683b      	ldr	r3, [r7, #0]
 801b754:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b756:	69bb      	ldr	r3, [r7, #24]
 801b758:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b75a:	69fb      	ldr	r3, [r7, #28]
 801b75c:	3301      	adds	r3, #1
 801b75e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b760:	693b      	ldr	r3, [r7, #16]
 801b762:	69db      	ldr	r3, [r3, #28]
 801b764:	69fa      	ldr	r2, [r7, #28]
 801b766:	429a      	cmp	r2, r3
 801b768:	d307      	bcc.n	801b77a <create_chain+0x88>
				ncl = 2;
 801b76a:	2302      	movs	r3, #2
 801b76c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b76e:	69fa      	ldr	r2, [r7, #28]
 801b770:	69bb      	ldr	r3, [r7, #24]
 801b772:	429a      	cmp	r2, r3
 801b774:	d901      	bls.n	801b77a <create_chain+0x88>
 801b776:	2300      	movs	r3, #0
 801b778:	e04f      	b.n	801b81a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b77a:	69f9      	ldr	r1, [r7, #28]
 801b77c:	6878      	ldr	r0, [r7, #4]
 801b77e:	f7ff fd66 	bl	801b24e <get_fat>
 801b782:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	2b00      	cmp	r3, #0
 801b788:	d00e      	beq.n	801b7a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	2b01      	cmp	r3, #1
 801b78e:	d003      	beq.n	801b798 <create_chain+0xa6>
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b796:	d101      	bne.n	801b79c <create_chain+0xaa>
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	e03e      	b.n	801b81a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b79c:	69fa      	ldr	r2, [r7, #28]
 801b79e:	69bb      	ldr	r3, [r7, #24]
 801b7a0:	429a      	cmp	r2, r3
 801b7a2:	d1da      	bne.n	801b75a <create_chain+0x68>
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	e038      	b.n	801b81a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b7a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b7aa:	f04f 32ff 	mov.w	r2, #4294967295
 801b7ae:	69f9      	ldr	r1, [r7, #28]
 801b7b0:	6938      	ldr	r0, [r7, #16]
 801b7b2:	f7ff fe1f 	bl	801b3f4 <put_fat>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b7ba:	7dfb      	ldrb	r3, [r7, #23]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d109      	bne.n	801b7d4 <create_chain+0xe2>
 801b7c0:	683b      	ldr	r3, [r7, #0]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d006      	beq.n	801b7d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b7c6:	69fa      	ldr	r2, [r7, #28]
 801b7c8:	6839      	ldr	r1, [r7, #0]
 801b7ca:	6938      	ldr	r0, [r7, #16]
 801b7cc:	f7ff fe12 	bl	801b3f4 <put_fat>
 801b7d0:	4603      	mov	r3, r0
 801b7d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b7d4:	7dfb      	ldrb	r3, [r7, #23]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d116      	bne.n	801b808 <create_chain+0x116>
		fs->last_clst = ncl;
 801b7da:	693b      	ldr	r3, [r7, #16]
 801b7dc:	69fa      	ldr	r2, [r7, #28]
 801b7de:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b7e0:	693b      	ldr	r3, [r7, #16]
 801b7e2:	699a      	ldr	r2, [r3, #24]
 801b7e4:	693b      	ldr	r3, [r7, #16]
 801b7e6:	69db      	ldr	r3, [r3, #28]
 801b7e8:	3b02      	subs	r3, #2
 801b7ea:	429a      	cmp	r2, r3
 801b7ec:	d804      	bhi.n	801b7f8 <create_chain+0x106>
 801b7ee:	693b      	ldr	r3, [r7, #16]
 801b7f0:	699b      	ldr	r3, [r3, #24]
 801b7f2:	1e5a      	subs	r2, r3, #1
 801b7f4:	693b      	ldr	r3, [r7, #16]
 801b7f6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b7f8:	693b      	ldr	r3, [r7, #16]
 801b7fa:	791b      	ldrb	r3, [r3, #4]
 801b7fc:	f043 0301 	orr.w	r3, r3, #1
 801b800:	b2da      	uxtb	r2, r3
 801b802:	693b      	ldr	r3, [r7, #16]
 801b804:	711a      	strb	r2, [r3, #4]
 801b806:	e007      	b.n	801b818 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b808:	7dfb      	ldrb	r3, [r7, #23]
 801b80a:	2b01      	cmp	r3, #1
 801b80c:	d102      	bne.n	801b814 <create_chain+0x122>
 801b80e:	f04f 33ff 	mov.w	r3, #4294967295
 801b812:	e000      	b.n	801b816 <create_chain+0x124>
 801b814:	2301      	movs	r3, #1
 801b816:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b818:	69fb      	ldr	r3, [r7, #28]
}
 801b81a:	4618      	mov	r0, r3
 801b81c:	3720      	adds	r7, #32
 801b81e:	46bd      	mov	sp, r7
 801b820:	bd80      	pop	{r7, pc}

0801b822 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b822:	b480      	push	{r7}
 801b824:	b087      	sub	sp, #28
 801b826:	af00      	add	r7, sp, #0
 801b828:	6078      	str	r0, [r7, #4]
 801b82a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b836:	3304      	adds	r3, #4
 801b838:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	899b      	ldrh	r3, [r3, #12]
 801b83e:	461a      	mov	r2, r3
 801b840:	683b      	ldr	r3, [r7, #0]
 801b842:	fbb3 f3f2 	udiv	r3, r3, r2
 801b846:	68fa      	ldr	r2, [r7, #12]
 801b848:	8952      	ldrh	r2, [r2, #10]
 801b84a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b84e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b850:	693b      	ldr	r3, [r7, #16]
 801b852:	1d1a      	adds	r2, r3, #4
 801b854:	613a      	str	r2, [r7, #16]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b85a:	68bb      	ldr	r3, [r7, #8]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d101      	bne.n	801b864 <clmt_clust+0x42>
 801b860:	2300      	movs	r3, #0
 801b862:	e010      	b.n	801b886 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b864:	697a      	ldr	r2, [r7, #20]
 801b866:	68bb      	ldr	r3, [r7, #8]
 801b868:	429a      	cmp	r2, r3
 801b86a:	d307      	bcc.n	801b87c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b86c:	697a      	ldr	r2, [r7, #20]
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	1ad3      	subs	r3, r2, r3
 801b872:	617b      	str	r3, [r7, #20]
 801b874:	693b      	ldr	r3, [r7, #16]
 801b876:	3304      	adds	r3, #4
 801b878:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b87a:	e7e9      	b.n	801b850 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b87c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b87e:	693b      	ldr	r3, [r7, #16]
 801b880:	681a      	ldr	r2, [r3, #0]
 801b882:	697b      	ldr	r3, [r7, #20]
 801b884:	4413      	add	r3, r2
}
 801b886:	4618      	mov	r0, r3
 801b888:	371c      	adds	r7, #28
 801b88a:	46bd      	mov	sp, r7
 801b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b890:	4770      	bx	lr

0801b892 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b892:	b580      	push	{r7, lr}
 801b894:	b086      	sub	sp, #24
 801b896:	af00      	add	r7, sp, #0
 801b898:	6078      	str	r0, [r7, #4]
 801b89a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b8a2:	683b      	ldr	r3, [r7, #0]
 801b8a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b8a8:	d204      	bcs.n	801b8b4 <dir_sdi+0x22>
 801b8aa:	683b      	ldr	r3, [r7, #0]
 801b8ac:	f003 031f 	and.w	r3, r3, #31
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d001      	beq.n	801b8b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b8b4:	2302      	movs	r3, #2
 801b8b6:	e071      	b.n	801b99c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	683a      	ldr	r2, [r7, #0]
 801b8bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	689b      	ldr	r3, [r3, #8]
 801b8c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b8c4:	697b      	ldr	r3, [r7, #20]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d106      	bne.n	801b8d8 <dir_sdi+0x46>
 801b8ca:	693b      	ldr	r3, [r7, #16]
 801b8cc:	781b      	ldrb	r3, [r3, #0]
 801b8ce:	2b02      	cmp	r3, #2
 801b8d0:	d902      	bls.n	801b8d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b8d2:	693b      	ldr	r3, [r7, #16]
 801b8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b8d8:	697b      	ldr	r3, [r7, #20]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d10c      	bne.n	801b8f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b8de:	683b      	ldr	r3, [r7, #0]
 801b8e0:	095b      	lsrs	r3, r3, #5
 801b8e2:	693a      	ldr	r2, [r7, #16]
 801b8e4:	8912      	ldrh	r2, [r2, #8]
 801b8e6:	4293      	cmp	r3, r2
 801b8e8:	d301      	bcc.n	801b8ee <dir_sdi+0x5c>
 801b8ea:	2302      	movs	r3, #2
 801b8ec:	e056      	b.n	801b99c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801b8ee:	693b      	ldr	r3, [r7, #16]
 801b8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	61da      	str	r2, [r3, #28]
 801b8f6:	e02d      	b.n	801b954 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b8f8:	693b      	ldr	r3, [r7, #16]
 801b8fa:	895b      	ldrh	r3, [r3, #10]
 801b8fc:	461a      	mov	r2, r3
 801b8fe:	693b      	ldr	r3, [r7, #16]
 801b900:	899b      	ldrh	r3, [r3, #12]
 801b902:	fb02 f303 	mul.w	r3, r2, r3
 801b906:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b908:	e019      	b.n	801b93e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	6979      	ldr	r1, [r7, #20]
 801b90e:	4618      	mov	r0, r3
 801b910:	f7ff fc9d 	bl	801b24e <get_fat>
 801b914:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b916:	697b      	ldr	r3, [r7, #20]
 801b918:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b91c:	d101      	bne.n	801b922 <dir_sdi+0x90>
 801b91e:	2301      	movs	r3, #1
 801b920:	e03c      	b.n	801b99c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b922:	697b      	ldr	r3, [r7, #20]
 801b924:	2b01      	cmp	r3, #1
 801b926:	d904      	bls.n	801b932 <dir_sdi+0xa0>
 801b928:	693b      	ldr	r3, [r7, #16]
 801b92a:	69db      	ldr	r3, [r3, #28]
 801b92c:	697a      	ldr	r2, [r7, #20]
 801b92e:	429a      	cmp	r2, r3
 801b930:	d301      	bcc.n	801b936 <dir_sdi+0xa4>
 801b932:	2302      	movs	r3, #2
 801b934:	e032      	b.n	801b99c <dir_sdi+0x10a>
			ofs -= csz;
 801b936:	683a      	ldr	r2, [r7, #0]
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	1ad3      	subs	r3, r2, r3
 801b93c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b93e:	683a      	ldr	r2, [r7, #0]
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	429a      	cmp	r2, r3
 801b944:	d2e1      	bcs.n	801b90a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801b946:	6979      	ldr	r1, [r7, #20]
 801b948:	6938      	ldr	r0, [r7, #16]
 801b94a:	f7ff fc61 	bl	801b210 <clust2sect>
 801b94e:	4602      	mov	r2, r0
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	697a      	ldr	r2, [r7, #20]
 801b958:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	69db      	ldr	r3, [r3, #28]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d101      	bne.n	801b966 <dir_sdi+0xd4>
 801b962:	2302      	movs	r3, #2
 801b964:	e01a      	b.n	801b99c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	69da      	ldr	r2, [r3, #28]
 801b96a:	693b      	ldr	r3, [r7, #16]
 801b96c:	899b      	ldrh	r3, [r3, #12]
 801b96e:	4619      	mov	r1, r3
 801b970:	683b      	ldr	r3, [r7, #0]
 801b972:	fbb3 f3f1 	udiv	r3, r3, r1
 801b976:	441a      	add	r2, r3
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b97c:	693b      	ldr	r3, [r7, #16]
 801b97e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b982:	693b      	ldr	r3, [r7, #16]
 801b984:	899b      	ldrh	r3, [r3, #12]
 801b986:	461a      	mov	r2, r3
 801b988:	683b      	ldr	r3, [r7, #0]
 801b98a:	fbb3 f0f2 	udiv	r0, r3, r2
 801b98e:	fb00 f202 	mul.w	r2, r0, r2
 801b992:	1a9b      	subs	r3, r3, r2
 801b994:	18ca      	adds	r2, r1, r3
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b99a:	2300      	movs	r3, #0
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	3718      	adds	r7, #24
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bd80      	pop	{r7, pc}

0801b9a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b9a4:	b580      	push	{r7, lr}
 801b9a6:	b086      	sub	sp, #24
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	6078      	str	r0, [r7, #4]
 801b9ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	695b      	ldr	r3, [r3, #20]
 801b9b8:	3320      	adds	r3, #32
 801b9ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	69db      	ldr	r3, [r3, #28]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d003      	beq.n	801b9cc <dir_next+0x28>
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b9ca:	d301      	bcc.n	801b9d0 <dir_next+0x2c>
 801b9cc:	2304      	movs	r3, #4
 801b9ce:	e0bb      	b.n	801bb48 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	899b      	ldrh	r3, [r3, #12]
 801b9d4:	461a      	mov	r2, r3
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	fbb3 f1f2 	udiv	r1, r3, r2
 801b9dc:	fb01 f202 	mul.w	r2, r1, r2
 801b9e0:	1a9b      	subs	r3, r3, r2
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	f040 809d 	bne.w	801bb22 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	69db      	ldr	r3, [r3, #28]
 801b9ec:	1c5a      	adds	r2, r3, #1
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	699b      	ldr	r3, [r3, #24]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d10b      	bne.n	801ba12 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b9fa:	68bb      	ldr	r3, [r7, #8]
 801b9fc:	095b      	lsrs	r3, r3, #5
 801b9fe:	68fa      	ldr	r2, [r7, #12]
 801ba00:	8912      	ldrh	r2, [r2, #8]
 801ba02:	4293      	cmp	r3, r2
 801ba04:	f0c0 808d 	bcc.w	801bb22 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	2200      	movs	r2, #0
 801ba0c:	61da      	str	r2, [r3, #28]
 801ba0e:	2304      	movs	r3, #4
 801ba10:	e09a      	b.n	801bb48 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	899b      	ldrh	r3, [r3, #12]
 801ba16:	461a      	mov	r2, r3
 801ba18:	68bb      	ldr	r3, [r7, #8]
 801ba1a:	fbb3 f3f2 	udiv	r3, r3, r2
 801ba1e:	68fa      	ldr	r2, [r7, #12]
 801ba20:	8952      	ldrh	r2, [r2, #10]
 801ba22:	3a01      	subs	r2, #1
 801ba24:	4013      	ands	r3, r2
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d17b      	bne.n	801bb22 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801ba2a:	687a      	ldr	r2, [r7, #4]
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	699b      	ldr	r3, [r3, #24]
 801ba30:	4619      	mov	r1, r3
 801ba32:	4610      	mov	r0, r2
 801ba34:	f7ff fc0b 	bl	801b24e <get_fat>
 801ba38:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	2b01      	cmp	r3, #1
 801ba3e:	d801      	bhi.n	801ba44 <dir_next+0xa0>
 801ba40:	2302      	movs	r3, #2
 801ba42:	e081      	b.n	801bb48 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801ba44:	697b      	ldr	r3, [r7, #20]
 801ba46:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba4a:	d101      	bne.n	801ba50 <dir_next+0xac>
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	e07b      	b.n	801bb48 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	69db      	ldr	r3, [r3, #28]
 801ba54:	697a      	ldr	r2, [r7, #20]
 801ba56:	429a      	cmp	r2, r3
 801ba58:	d359      	bcc.n	801bb0e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801ba5a:	683b      	ldr	r3, [r7, #0]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d104      	bne.n	801ba6a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	2200      	movs	r2, #0
 801ba64:	61da      	str	r2, [r3, #28]
 801ba66:	2304      	movs	r3, #4
 801ba68:	e06e      	b.n	801bb48 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801ba6a:	687a      	ldr	r2, [r7, #4]
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	699b      	ldr	r3, [r3, #24]
 801ba70:	4619      	mov	r1, r3
 801ba72:	4610      	mov	r0, r2
 801ba74:	f7ff fe3d 	bl	801b6f2 <create_chain>
 801ba78:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801ba7a:	697b      	ldr	r3, [r7, #20]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d101      	bne.n	801ba84 <dir_next+0xe0>
 801ba80:	2307      	movs	r3, #7
 801ba82:	e061      	b.n	801bb48 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801ba84:	697b      	ldr	r3, [r7, #20]
 801ba86:	2b01      	cmp	r3, #1
 801ba88:	d101      	bne.n	801ba8e <dir_next+0xea>
 801ba8a:	2302      	movs	r3, #2
 801ba8c:	e05c      	b.n	801bb48 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba94:	d101      	bne.n	801ba9a <dir_next+0xf6>
 801ba96:	2301      	movs	r3, #1
 801ba98:	e056      	b.n	801bb48 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801ba9a:	68f8      	ldr	r0, [r7, #12]
 801ba9c:	f7ff fad6 	bl	801b04c <sync_window>
 801baa0:	4603      	mov	r3, r0
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d001      	beq.n	801baaa <dir_next+0x106>
 801baa6:	2301      	movs	r3, #1
 801baa8:	e04e      	b.n	801bb48 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	899b      	ldrh	r3, [r3, #12]
 801bab4:	461a      	mov	r2, r3
 801bab6:	2100      	movs	r1, #0
 801bab8:	f7ff f8ff 	bl	801acba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801babc:	2300      	movs	r3, #0
 801babe:	613b      	str	r3, [r7, #16]
 801bac0:	6979      	ldr	r1, [r7, #20]
 801bac2:	68f8      	ldr	r0, [r7, #12]
 801bac4:	f7ff fba4 	bl	801b210 <clust2sect>
 801bac8:	4602      	mov	r2, r0
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	635a      	str	r2, [r3, #52]	@ 0x34
 801bace:	e012      	b.n	801baf6 <dir_next+0x152>
						fs->wflag = 1;
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	2201      	movs	r2, #1
 801bad4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bad6:	68f8      	ldr	r0, [r7, #12]
 801bad8:	f7ff fab8 	bl	801b04c <sync_window>
 801badc:	4603      	mov	r3, r0
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d001      	beq.n	801bae6 <dir_next+0x142>
 801bae2:	2301      	movs	r3, #1
 801bae4:	e030      	b.n	801bb48 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bae6:	693b      	ldr	r3, [r7, #16]
 801bae8:	3301      	adds	r3, #1
 801baea:	613b      	str	r3, [r7, #16]
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801baf0:	1c5a      	adds	r2, r3, #1
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	635a      	str	r2, [r3, #52]	@ 0x34
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	895b      	ldrh	r3, [r3, #10]
 801bafa:	461a      	mov	r2, r3
 801bafc:	693b      	ldr	r3, [r7, #16]
 801bafe:	4293      	cmp	r3, r2
 801bb00:	d3e6      	bcc.n	801bad0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bb06:	693b      	ldr	r3, [r7, #16]
 801bb08:	1ad2      	subs	r2, r2, r3
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	697a      	ldr	r2, [r7, #20]
 801bb12:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bb14:	6979      	ldr	r1, [r7, #20]
 801bb16:	68f8      	ldr	r0, [r7, #12]
 801bb18:	f7ff fb7a 	bl	801b210 <clust2sect>
 801bb1c:	4602      	mov	r2, r0
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	68ba      	ldr	r2, [r7, #8]
 801bb26:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	899b      	ldrh	r3, [r3, #12]
 801bb32:	461a      	mov	r2, r3
 801bb34:	68bb      	ldr	r3, [r7, #8]
 801bb36:	fbb3 f0f2 	udiv	r0, r3, r2
 801bb3a:	fb00 f202 	mul.w	r2, r0, r2
 801bb3e:	1a9b      	subs	r3, r3, r2
 801bb40:	18ca      	adds	r2, r1, r3
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bb46:	2300      	movs	r3, #0
}
 801bb48:	4618      	mov	r0, r3
 801bb4a:	3718      	adds	r7, #24
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}

0801bb50 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b086      	sub	sp, #24
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	6078      	str	r0, [r7, #4]
 801bb58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bb60:	2100      	movs	r1, #0
 801bb62:	6878      	ldr	r0, [r7, #4]
 801bb64:	f7ff fe95 	bl	801b892 <dir_sdi>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bb6c:	7dfb      	ldrb	r3, [r7, #23]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d12b      	bne.n	801bbca <dir_alloc+0x7a>
		n = 0;
 801bb72:	2300      	movs	r3, #0
 801bb74:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	69db      	ldr	r3, [r3, #28]
 801bb7a:	4619      	mov	r1, r3
 801bb7c:	68f8      	ldr	r0, [r7, #12]
 801bb7e:	f7ff faa9 	bl	801b0d4 <move_window>
 801bb82:	4603      	mov	r3, r0
 801bb84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bb86:	7dfb      	ldrb	r3, [r7, #23]
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d11d      	bne.n	801bbc8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	6a1b      	ldr	r3, [r3, #32]
 801bb90:	781b      	ldrb	r3, [r3, #0]
 801bb92:	2be5      	cmp	r3, #229	@ 0xe5
 801bb94:	d004      	beq.n	801bba0 <dir_alloc+0x50>
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	6a1b      	ldr	r3, [r3, #32]
 801bb9a:	781b      	ldrb	r3, [r3, #0]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d107      	bne.n	801bbb0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	3301      	adds	r3, #1
 801bba4:	613b      	str	r3, [r7, #16]
 801bba6:	693a      	ldr	r2, [r7, #16]
 801bba8:	683b      	ldr	r3, [r7, #0]
 801bbaa:	429a      	cmp	r2, r3
 801bbac:	d102      	bne.n	801bbb4 <dir_alloc+0x64>
 801bbae:	e00c      	b.n	801bbca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801bbb4:	2101      	movs	r1, #1
 801bbb6:	6878      	ldr	r0, [r7, #4]
 801bbb8:	f7ff fef4 	bl	801b9a4 <dir_next>
 801bbbc:	4603      	mov	r3, r0
 801bbbe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801bbc0:	7dfb      	ldrb	r3, [r7, #23]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d0d7      	beq.n	801bb76 <dir_alloc+0x26>
 801bbc6:	e000      	b.n	801bbca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801bbc8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801bbca:	7dfb      	ldrb	r3, [r7, #23]
 801bbcc:	2b04      	cmp	r3, #4
 801bbce:	d101      	bne.n	801bbd4 <dir_alloc+0x84>
 801bbd0:	2307      	movs	r3, #7
 801bbd2:	75fb      	strb	r3, [r7, #23]
	return res;
 801bbd4:	7dfb      	ldrb	r3, [r7, #23]
}
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	3718      	adds	r7, #24
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	bd80      	pop	{r7, pc}

0801bbde <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801bbde:	b580      	push	{r7, lr}
 801bbe0:	b084      	sub	sp, #16
 801bbe2:	af00      	add	r7, sp, #0
 801bbe4:	6078      	str	r0, [r7, #4]
 801bbe6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801bbe8:	683b      	ldr	r3, [r7, #0]
 801bbea:	331a      	adds	r3, #26
 801bbec:	4618      	mov	r0, r3
 801bbee:	f7fe ffc1 	bl	801ab74 <ld_word>
 801bbf2:	4603      	mov	r3, r0
 801bbf4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	781b      	ldrb	r3, [r3, #0]
 801bbfa:	2b03      	cmp	r3, #3
 801bbfc:	d109      	bne.n	801bc12 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	3314      	adds	r3, #20
 801bc02:	4618      	mov	r0, r3
 801bc04:	f7fe ffb6 	bl	801ab74 <ld_word>
 801bc08:	4603      	mov	r3, r0
 801bc0a:	041b      	lsls	r3, r3, #16
 801bc0c:	68fa      	ldr	r2, [r7, #12]
 801bc0e:	4313      	orrs	r3, r2
 801bc10:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801bc12:	68fb      	ldr	r3, [r7, #12]
}
 801bc14:	4618      	mov	r0, r3
 801bc16:	3710      	adds	r7, #16
 801bc18:	46bd      	mov	sp, r7
 801bc1a:	bd80      	pop	{r7, pc}

0801bc1c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b084      	sub	sp, #16
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	60f8      	str	r0, [r7, #12]
 801bc24:	60b9      	str	r1, [r7, #8]
 801bc26:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801bc28:	68bb      	ldr	r3, [r7, #8]
 801bc2a:	331a      	adds	r3, #26
 801bc2c:	687a      	ldr	r2, [r7, #4]
 801bc2e:	b292      	uxth	r2, r2
 801bc30:	4611      	mov	r1, r2
 801bc32:	4618      	mov	r0, r3
 801bc34:	f7fe ffd9 	bl	801abea <st_word>
	if (fs->fs_type == FS_FAT32) {
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	781b      	ldrb	r3, [r3, #0]
 801bc3c:	2b03      	cmp	r3, #3
 801bc3e:	d109      	bne.n	801bc54 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801bc40:	68bb      	ldr	r3, [r7, #8]
 801bc42:	f103 0214 	add.w	r2, r3, #20
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	0c1b      	lsrs	r3, r3, #16
 801bc4a:	b29b      	uxth	r3, r3
 801bc4c:	4619      	mov	r1, r3
 801bc4e:	4610      	mov	r0, r2
 801bc50:	f7fe ffcb 	bl	801abea <st_word>
	}
}
 801bc54:	bf00      	nop
 801bc56:	3710      	adds	r7, #16
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	bd80      	pop	{r7, pc}

0801bc5c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801bc5c:	b590      	push	{r4, r7, lr}
 801bc5e:	b087      	sub	sp, #28
 801bc60:	af00      	add	r7, sp, #0
 801bc62:	6078      	str	r0, [r7, #4]
 801bc64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801bc66:	683b      	ldr	r3, [r7, #0]
 801bc68:	331a      	adds	r3, #26
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	f7fe ff82 	bl	801ab74 <ld_word>
 801bc70:	4603      	mov	r3, r0
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d001      	beq.n	801bc7a <cmp_lfn+0x1e>
 801bc76:	2300      	movs	r3, #0
 801bc78:	e059      	b.n	801bd2e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801bc7a:	683b      	ldr	r3, [r7, #0]
 801bc7c:	781b      	ldrb	r3, [r3, #0]
 801bc7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bc82:	1e5a      	subs	r2, r3, #1
 801bc84:	4613      	mov	r3, r2
 801bc86:	005b      	lsls	r3, r3, #1
 801bc88:	4413      	add	r3, r2
 801bc8a:	009b      	lsls	r3, r3, #2
 801bc8c:	4413      	add	r3, r2
 801bc8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bc90:	2301      	movs	r3, #1
 801bc92:	81fb      	strh	r3, [r7, #14]
 801bc94:	2300      	movs	r3, #0
 801bc96:	613b      	str	r3, [r7, #16]
 801bc98:	e033      	b.n	801bd02 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bc9a:	4a27      	ldr	r2, [pc, #156]	@ (801bd38 <cmp_lfn+0xdc>)
 801bc9c:	693b      	ldr	r3, [r7, #16]
 801bc9e:	4413      	add	r3, r2
 801bca0:	781b      	ldrb	r3, [r3, #0]
 801bca2:	461a      	mov	r2, r3
 801bca4:	683b      	ldr	r3, [r7, #0]
 801bca6:	4413      	add	r3, r2
 801bca8:	4618      	mov	r0, r3
 801bcaa:	f7fe ff63 	bl	801ab74 <ld_word>
 801bcae:	4603      	mov	r3, r0
 801bcb0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bcb2:	89fb      	ldrh	r3, [r7, #14]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d01a      	beq.n	801bcee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801bcb8:	697b      	ldr	r3, [r7, #20]
 801bcba:	2bfe      	cmp	r3, #254	@ 0xfe
 801bcbc:	d812      	bhi.n	801bce4 <cmp_lfn+0x88>
 801bcbe:	89bb      	ldrh	r3, [r7, #12]
 801bcc0:	4618      	mov	r0, r3
 801bcc2:	f001 ff71 	bl	801dba8 <ff_wtoupper>
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	461c      	mov	r4, r3
 801bcca:	697b      	ldr	r3, [r7, #20]
 801bccc:	1c5a      	adds	r2, r3, #1
 801bcce:	617a      	str	r2, [r7, #20]
 801bcd0:	005b      	lsls	r3, r3, #1
 801bcd2:	687a      	ldr	r2, [r7, #4]
 801bcd4:	4413      	add	r3, r2
 801bcd6:	881b      	ldrh	r3, [r3, #0]
 801bcd8:	4618      	mov	r0, r3
 801bcda:	f001 ff65 	bl	801dba8 <ff_wtoupper>
 801bcde:	4603      	mov	r3, r0
 801bce0:	429c      	cmp	r4, r3
 801bce2:	d001      	beq.n	801bce8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801bce4:	2300      	movs	r3, #0
 801bce6:	e022      	b.n	801bd2e <cmp_lfn+0xd2>
			}
			wc = uc;
 801bce8:	89bb      	ldrh	r3, [r7, #12]
 801bcea:	81fb      	strh	r3, [r7, #14]
 801bcec:	e006      	b.n	801bcfc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bcee:	89bb      	ldrh	r3, [r7, #12]
 801bcf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bcf4:	4293      	cmp	r3, r2
 801bcf6:	d001      	beq.n	801bcfc <cmp_lfn+0xa0>
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	e018      	b.n	801bd2e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bcfc:	693b      	ldr	r3, [r7, #16]
 801bcfe:	3301      	adds	r3, #1
 801bd00:	613b      	str	r3, [r7, #16]
 801bd02:	693b      	ldr	r3, [r7, #16]
 801bd04:	2b0c      	cmp	r3, #12
 801bd06:	d9c8      	bls.n	801bc9a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801bd08:	683b      	ldr	r3, [r7, #0]
 801bd0a:	781b      	ldrb	r3, [r3, #0]
 801bd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d00b      	beq.n	801bd2c <cmp_lfn+0xd0>
 801bd14:	89fb      	ldrh	r3, [r7, #14]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d008      	beq.n	801bd2c <cmp_lfn+0xd0>
 801bd1a:	697b      	ldr	r3, [r7, #20]
 801bd1c:	005b      	lsls	r3, r3, #1
 801bd1e:	687a      	ldr	r2, [r7, #4]
 801bd20:	4413      	add	r3, r2
 801bd22:	881b      	ldrh	r3, [r3, #0]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d001      	beq.n	801bd2c <cmp_lfn+0xd0>
 801bd28:	2300      	movs	r3, #0
 801bd2a:	e000      	b.n	801bd2e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801bd2c:	2301      	movs	r3, #1
}
 801bd2e:	4618      	mov	r0, r3
 801bd30:	371c      	adds	r7, #28
 801bd32:	46bd      	mov	sp, r7
 801bd34:	bd90      	pop	{r4, r7, pc}
 801bd36:	bf00      	nop
 801bd38:	0801e850 	.word	0x0801e850

0801bd3c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801bd3c:	b580      	push	{r7, lr}
 801bd3e:	b086      	sub	sp, #24
 801bd40:	af00      	add	r7, sp, #0
 801bd42:	6078      	str	r0, [r7, #4]
 801bd44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	331a      	adds	r3, #26
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	f7fe ff12 	bl	801ab74 <ld_word>
 801bd50:	4603      	mov	r3, r0
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d001      	beq.n	801bd5a <pick_lfn+0x1e>
 801bd56:	2300      	movs	r3, #0
 801bd58:	e04d      	b.n	801bdf6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	781b      	ldrb	r3, [r3, #0]
 801bd5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bd62:	1e5a      	subs	r2, r3, #1
 801bd64:	4613      	mov	r3, r2
 801bd66:	005b      	lsls	r3, r3, #1
 801bd68:	4413      	add	r3, r2
 801bd6a:	009b      	lsls	r3, r3, #2
 801bd6c:	4413      	add	r3, r2
 801bd6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bd70:	2301      	movs	r3, #1
 801bd72:	81fb      	strh	r3, [r7, #14]
 801bd74:	2300      	movs	r3, #0
 801bd76:	613b      	str	r3, [r7, #16]
 801bd78:	e028      	b.n	801bdcc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bd7a:	4a21      	ldr	r2, [pc, #132]	@ (801be00 <pick_lfn+0xc4>)
 801bd7c:	693b      	ldr	r3, [r7, #16]
 801bd7e:	4413      	add	r3, r2
 801bd80:	781b      	ldrb	r3, [r3, #0]
 801bd82:	461a      	mov	r2, r3
 801bd84:	683b      	ldr	r3, [r7, #0]
 801bd86:	4413      	add	r3, r2
 801bd88:	4618      	mov	r0, r3
 801bd8a:	f7fe fef3 	bl	801ab74 <ld_word>
 801bd8e:	4603      	mov	r3, r0
 801bd90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bd92:	89fb      	ldrh	r3, [r7, #14]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d00f      	beq.n	801bdb8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801bd98:	697b      	ldr	r3, [r7, #20]
 801bd9a:	2bfe      	cmp	r3, #254	@ 0xfe
 801bd9c:	d901      	bls.n	801bda2 <pick_lfn+0x66>
 801bd9e:	2300      	movs	r3, #0
 801bda0:	e029      	b.n	801bdf6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801bda2:	89bb      	ldrh	r3, [r7, #12]
 801bda4:	81fb      	strh	r3, [r7, #14]
 801bda6:	697b      	ldr	r3, [r7, #20]
 801bda8:	1c5a      	adds	r2, r3, #1
 801bdaa:	617a      	str	r2, [r7, #20]
 801bdac:	005b      	lsls	r3, r3, #1
 801bdae:	687a      	ldr	r2, [r7, #4]
 801bdb0:	4413      	add	r3, r2
 801bdb2:	89fa      	ldrh	r2, [r7, #14]
 801bdb4:	801a      	strh	r2, [r3, #0]
 801bdb6:	e006      	b.n	801bdc6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bdb8:	89bb      	ldrh	r3, [r7, #12]
 801bdba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bdbe:	4293      	cmp	r3, r2
 801bdc0:	d001      	beq.n	801bdc6 <pick_lfn+0x8a>
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	e017      	b.n	801bdf6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bdc6:	693b      	ldr	r3, [r7, #16]
 801bdc8:	3301      	adds	r3, #1
 801bdca:	613b      	str	r3, [r7, #16]
 801bdcc:	693b      	ldr	r3, [r7, #16]
 801bdce:	2b0c      	cmp	r3, #12
 801bdd0:	d9d3      	bls.n	801bd7a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801bdd2:	683b      	ldr	r3, [r7, #0]
 801bdd4:	781b      	ldrb	r3, [r3, #0]
 801bdd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d00a      	beq.n	801bdf4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801bdde:	697b      	ldr	r3, [r7, #20]
 801bde0:	2bfe      	cmp	r3, #254	@ 0xfe
 801bde2:	d901      	bls.n	801bde8 <pick_lfn+0xac>
 801bde4:	2300      	movs	r3, #0
 801bde6:	e006      	b.n	801bdf6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801bde8:	697b      	ldr	r3, [r7, #20]
 801bdea:	005b      	lsls	r3, r3, #1
 801bdec:	687a      	ldr	r2, [r7, #4]
 801bdee:	4413      	add	r3, r2
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801bdf4:	2301      	movs	r3, #1
}
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	3718      	adds	r7, #24
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd80      	pop	{r7, pc}
 801bdfe:	bf00      	nop
 801be00:	0801e850 	.word	0x0801e850

0801be04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b088      	sub	sp, #32
 801be08:	af00      	add	r7, sp, #0
 801be0a:	60f8      	str	r0, [r7, #12]
 801be0c:	60b9      	str	r1, [r7, #8]
 801be0e:	4611      	mov	r1, r2
 801be10:	461a      	mov	r2, r3
 801be12:	460b      	mov	r3, r1
 801be14:	71fb      	strb	r3, [r7, #7]
 801be16:	4613      	mov	r3, r2
 801be18:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801be1a:	68bb      	ldr	r3, [r7, #8]
 801be1c:	330d      	adds	r3, #13
 801be1e:	79ba      	ldrb	r2, [r7, #6]
 801be20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801be22:	68bb      	ldr	r3, [r7, #8]
 801be24:	330b      	adds	r3, #11
 801be26:	220f      	movs	r2, #15
 801be28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801be2a:	68bb      	ldr	r3, [r7, #8]
 801be2c:	330c      	adds	r3, #12
 801be2e:	2200      	movs	r2, #0
 801be30:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801be32:	68bb      	ldr	r3, [r7, #8]
 801be34:	331a      	adds	r3, #26
 801be36:	2100      	movs	r1, #0
 801be38:	4618      	mov	r0, r3
 801be3a:	f7fe fed6 	bl	801abea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801be3e:	79fb      	ldrb	r3, [r7, #7]
 801be40:	1e5a      	subs	r2, r3, #1
 801be42:	4613      	mov	r3, r2
 801be44:	005b      	lsls	r3, r3, #1
 801be46:	4413      	add	r3, r2
 801be48:	009b      	lsls	r3, r3, #2
 801be4a:	4413      	add	r3, r2
 801be4c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801be4e:	2300      	movs	r3, #0
 801be50:	82fb      	strh	r3, [r7, #22]
 801be52:	2300      	movs	r3, #0
 801be54:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801be56:	8afb      	ldrh	r3, [r7, #22]
 801be58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801be5c:	4293      	cmp	r3, r2
 801be5e:	d007      	beq.n	801be70 <put_lfn+0x6c>
 801be60:	69fb      	ldr	r3, [r7, #28]
 801be62:	1c5a      	adds	r2, r3, #1
 801be64:	61fa      	str	r2, [r7, #28]
 801be66:	005b      	lsls	r3, r3, #1
 801be68:	68fa      	ldr	r2, [r7, #12]
 801be6a:	4413      	add	r3, r2
 801be6c:	881b      	ldrh	r3, [r3, #0]
 801be6e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801be70:	4a17      	ldr	r2, [pc, #92]	@ (801bed0 <put_lfn+0xcc>)
 801be72:	69bb      	ldr	r3, [r7, #24]
 801be74:	4413      	add	r3, r2
 801be76:	781b      	ldrb	r3, [r3, #0]
 801be78:	461a      	mov	r2, r3
 801be7a:	68bb      	ldr	r3, [r7, #8]
 801be7c:	4413      	add	r3, r2
 801be7e:	8afa      	ldrh	r2, [r7, #22]
 801be80:	4611      	mov	r1, r2
 801be82:	4618      	mov	r0, r3
 801be84:	f7fe feb1 	bl	801abea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801be88:	8afb      	ldrh	r3, [r7, #22]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d102      	bne.n	801be94 <put_lfn+0x90>
 801be8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801be92:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801be94:	69bb      	ldr	r3, [r7, #24]
 801be96:	3301      	adds	r3, #1
 801be98:	61bb      	str	r3, [r7, #24]
 801be9a:	69bb      	ldr	r3, [r7, #24]
 801be9c:	2b0c      	cmp	r3, #12
 801be9e:	d9da      	bls.n	801be56 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801bea0:	8afb      	ldrh	r3, [r7, #22]
 801bea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bea6:	4293      	cmp	r3, r2
 801bea8:	d006      	beq.n	801beb8 <put_lfn+0xb4>
 801beaa:	69fb      	ldr	r3, [r7, #28]
 801beac:	005b      	lsls	r3, r3, #1
 801beae:	68fa      	ldr	r2, [r7, #12]
 801beb0:	4413      	add	r3, r2
 801beb2:	881b      	ldrh	r3, [r3, #0]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d103      	bne.n	801bec0 <put_lfn+0xbc>
 801beb8:	79fb      	ldrb	r3, [r7, #7]
 801beba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bebe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801bec0:	68bb      	ldr	r3, [r7, #8]
 801bec2:	79fa      	ldrb	r2, [r7, #7]
 801bec4:	701a      	strb	r2, [r3, #0]
}
 801bec6:	bf00      	nop
 801bec8:	3720      	adds	r7, #32
 801beca:	46bd      	mov	sp, r7
 801becc:	bd80      	pop	{r7, pc}
 801bece:	bf00      	nop
 801bed0:	0801e850 	.word	0x0801e850

0801bed4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b08c      	sub	sp, #48	@ 0x30
 801bed8:	af00      	add	r7, sp, #0
 801beda:	60f8      	str	r0, [r7, #12]
 801bedc:	60b9      	str	r1, [r7, #8]
 801bede:	607a      	str	r2, [r7, #4]
 801bee0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801bee2:	220b      	movs	r2, #11
 801bee4:	68b9      	ldr	r1, [r7, #8]
 801bee6:	68f8      	ldr	r0, [r7, #12]
 801bee8:	f7fe fec6 	bl	801ac78 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801beec:	683b      	ldr	r3, [r7, #0]
 801beee:	2b05      	cmp	r3, #5
 801bef0:	d929      	bls.n	801bf46 <gen_numname+0x72>
		sr = seq;
 801bef2:	683b      	ldr	r3, [r7, #0]
 801bef4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801bef6:	e020      	b.n	801bf3a <gen_numname+0x66>
			wc = *lfn++;
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	1c9a      	adds	r2, r3, #2
 801befc:	607a      	str	r2, [r7, #4]
 801befe:	881b      	ldrh	r3, [r3, #0]
 801bf00:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801bf02:	2300      	movs	r3, #0
 801bf04:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bf06:	e015      	b.n	801bf34 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	005a      	lsls	r2, r3, #1
 801bf0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bf0e:	f003 0301 	and.w	r3, r3, #1
 801bf12:	4413      	add	r3, r2
 801bf14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801bf16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bf18:	085b      	lsrs	r3, r3, #1
 801bf1a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801bf1c:	69fb      	ldr	r3, [r7, #28]
 801bf1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d003      	beq.n	801bf2e <gen_numname+0x5a>
 801bf26:	69fa      	ldr	r2, [r7, #28]
 801bf28:	4b30      	ldr	r3, [pc, #192]	@ (801bfec <gen_numname+0x118>)
 801bf2a:	4053      	eors	r3, r2
 801bf2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801bf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf30:	3301      	adds	r3, #1
 801bf32:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf36:	2b0f      	cmp	r3, #15
 801bf38:	d9e6      	bls.n	801bf08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	881b      	ldrh	r3, [r3, #0]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d1da      	bne.n	801bef8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801bf42:	69fb      	ldr	r3, [r7, #28]
 801bf44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801bf46:	2307      	movs	r3, #7
 801bf48:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	b2db      	uxtb	r3, r3
 801bf4e:	f003 030f 	and.w	r3, r3, #15
 801bf52:	b2db      	uxtb	r3, r3
 801bf54:	3330      	adds	r3, #48	@ 0x30
 801bf56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801bf5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf5e:	2b39      	cmp	r3, #57	@ 0x39
 801bf60:	d904      	bls.n	801bf6c <gen_numname+0x98>
 801bf62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf66:	3307      	adds	r3, #7
 801bf68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801bf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf6e:	1e5a      	subs	r2, r3, #1
 801bf70:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bf72:	3330      	adds	r3, #48	@ 0x30
 801bf74:	443b      	add	r3, r7
 801bf76:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801bf7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801bf7e:	683b      	ldr	r3, [r7, #0]
 801bf80:	091b      	lsrs	r3, r3, #4
 801bf82:	603b      	str	r3, [r7, #0]
	} while (seq);
 801bf84:	683b      	ldr	r3, [r7, #0]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d1df      	bne.n	801bf4a <gen_numname+0x76>
	ns[i] = '~';
 801bf8a:	f107 0214 	add.w	r2, r7, #20
 801bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf90:	4413      	add	r3, r2
 801bf92:	227e      	movs	r2, #126	@ 0x7e
 801bf94:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801bf96:	2300      	movs	r3, #0
 801bf98:	627b      	str	r3, [r7, #36]	@ 0x24
 801bf9a:	e002      	b.n	801bfa2 <gen_numname+0xce>
 801bf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf9e:	3301      	adds	r3, #1
 801bfa0:	627b      	str	r3, [r7, #36]	@ 0x24
 801bfa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfa6:	429a      	cmp	r2, r3
 801bfa8:	d205      	bcs.n	801bfb6 <gen_numname+0xe2>
 801bfaa:	68fa      	ldr	r2, [r7, #12]
 801bfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfae:	4413      	add	r3, r2
 801bfb0:	781b      	ldrb	r3, [r3, #0]
 801bfb2:	2b20      	cmp	r3, #32
 801bfb4:	d1f2      	bne.n	801bf9c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801bfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfb8:	2b07      	cmp	r3, #7
 801bfba:	d807      	bhi.n	801bfcc <gen_numname+0xf8>
 801bfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfbe:	1c5a      	adds	r2, r3, #1
 801bfc0:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bfc2:	3330      	adds	r3, #48	@ 0x30
 801bfc4:	443b      	add	r3, r7
 801bfc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801bfca:	e000      	b.n	801bfce <gen_numname+0xfa>
 801bfcc:	2120      	movs	r1, #32
 801bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfd0:	1c5a      	adds	r2, r3, #1
 801bfd2:	627a      	str	r2, [r7, #36]	@ 0x24
 801bfd4:	68fa      	ldr	r2, [r7, #12]
 801bfd6:	4413      	add	r3, r2
 801bfd8:	460a      	mov	r2, r1
 801bfda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801bfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfde:	2b07      	cmp	r3, #7
 801bfe0:	d9e9      	bls.n	801bfb6 <gen_numname+0xe2>
}
 801bfe2:	bf00      	nop
 801bfe4:	bf00      	nop
 801bfe6:	3730      	adds	r7, #48	@ 0x30
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	bd80      	pop	{r7, pc}
 801bfec:	00011021 	.word	0x00011021

0801bff0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801bff0:	b480      	push	{r7}
 801bff2:	b085      	sub	sp, #20
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801bff8:	2300      	movs	r3, #0
 801bffa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801bffc:	230b      	movs	r3, #11
 801bffe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c000:	7bfb      	ldrb	r3, [r7, #15]
 801c002:	b2da      	uxtb	r2, r3
 801c004:	0852      	lsrs	r2, r2, #1
 801c006:	01db      	lsls	r3, r3, #7
 801c008:	4313      	orrs	r3, r2
 801c00a:	b2da      	uxtb	r2, r3
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	1c59      	adds	r1, r3, #1
 801c010:	6079      	str	r1, [r7, #4]
 801c012:	781b      	ldrb	r3, [r3, #0]
 801c014:	4413      	add	r3, r2
 801c016:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	3b01      	subs	r3, #1
 801c01c:	60bb      	str	r3, [r7, #8]
 801c01e:	68bb      	ldr	r3, [r7, #8]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d1ed      	bne.n	801c000 <sum_sfn+0x10>
	return sum;
 801c024:	7bfb      	ldrb	r3, [r7, #15]
}
 801c026:	4618      	mov	r0, r3
 801c028:	3714      	adds	r7, #20
 801c02a:	46bd      	mov	sp, r7
 801c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c030:	4770      	bx	lr

0801c032 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c032:	b580      	push	{r7, lr}
 801c034:	b086      	sub	sp, #24
 801c036:	af00      	add	r7, sp, #0
 801c038:	6078      	str	r0, [r7, #4]
 801c03a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c03c:	2304      	movs	r3, #4
 801c03e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c046:	23ff      	movs	r3, #255	@ 0xff
 801c048:	757b      	strb	r3, [r7, #21]
 801c04a:	23ff      	movs	r3, #255	@ 0xff
 801c04c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c04e:	e081      	b.n	801c154 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	69db      	ldr	r3, [r3, #28]
 801c054:	4619      	mov	r1, r3
 801c056:	6938      	ldr	r0, [r7, #16]
 801c058:	f7ff f83c 	bl	801b0d4 <move_window>
 801c05c:	4603      	mov	r3, r0
 801c05e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c060:	7dfb      	ldrb	r3, [r7, #23]
 801c062:	2b00      	cmp	r3, #0
 801c064:	d17c      	bne.n	801c160 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	6a1b      	ldr	r3, [r3, #32]
 801c06a:	781b      	ldrb	r3, [r3, #0]
 801c06c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c06e:	7dbb      	ldrb	r3, [r7, #22]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d102      	bne.n	801c07a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c074:	2304      	movs	r3, #4
 801c076:	75fb      	strb	r3, [r7, #23]
 801c078:	e077      	b.n	801c16a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	6a1b      	ldr	r3, [r3, #32]
 801c07e:	330b      	adds	r3, #11
 801c080:	781b      	ldrb	r3, [r3, #0]
 801c082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c086:	73fb      	strb	r3, [r7, #15]
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	7bfa      	ldrb	r2, [r7, #15]
 801c08c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c08e:	7dbb      	ldrb	r3, [r7, #22]
 801c090:	2be5      	cmp	r3, #229	@ 0xe5
 801c092:	d00e      	beq.n	801c0b2 <dir_read+0x80>
 801c094:	7dbb      	ldrb	r3, [r7, #22]
 801c096:	2b2e      	cmp	r3, #46	@ 0x2e
 801c098:	d00b      	beq.n	801c0b2 <dir_read+0x80>
 801c09a:	7bfb      	ldrb	r3, [r7, #15]
 801c09c:	f023 0320 	bic.w	r3, r3, #32
 801c0a0:	2b08      	cmp	r3, #8
 801c0a2:	bf0c      	ite	eq
 801c0a4:	2301      	moveq	r3, #1
 801c0a6:	2300      	movne	r3, #0
 801c0a8:	b2db      	uxtb	r3, r3
 801c0aa:	461a      	mov	r2, r3
 801c0ac:	683b      	ldr	r3, [r7, #0]
 801c0ae:	4293      	cmp	r3, r2
 801c0b0:	d002      	beq.n	801c0b8 <dir_read+0x86>
				ord = 0xFF;
 801c0b2:	23ff      	movs	r3, #255	@ 0xff
 801c0b4:	757b      	strb	r3, [r7, #21]
 801c0b6:	e044      	b.n	801c142 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c0b8:	7bfb      	ldrb	r3, [r7, #15]
 801c0ba:	2b0f      	cmp	r3, #15
 801c0bc:	d12f      	bne.n	801c11e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c0be:	7dbb      	ldrb	r3, [r7, #22]
 801c0c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d00d      	beq.n	801c0e4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	6a1b      	ldr	r3, [r3, #32]
 801c0cc:	7b5b      	ldrb	r3, [r3, #13]
 801c0ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c0d0:	7dbb      	ldrb	r3, [r7, #22]
 801c0d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c0d6:	75bb      	strb	r3, [r7, #22]
 801c0d8:	7dbb      	ldrb	r3, [r7, #22]
 801c0da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	695a      	ldr	r2, [r3, #20]
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c0e4:	7dba      	ldrb	r2, [r7, #22]
 801c0e6:	7d7b      	ldrb	r3, [r7, #21]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d115      	bne.n	801c118 <dir_read+0xe6>
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	6a1b      	ldr	r3, [r3, #32]
 801c0f0:	330d      	adds	r3, #13
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	7d3a      	ldrb	r2, [r7, #20]
 801c0f6:	429a      	cmp	r2, r3
 801c0f8:	d10e      	bne.n	801c118 <dir_read+0xe6>
 801c0fa:	693b      	ldr	r3, [r7, #16]
 801c0fc:	691a      	ldr	r2, [r3, #16]
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	6a1b      	ldr	r3, [r3, #32]
 801c102:	4619      	mov	r1, r3
 801c104:	4610      	mov	r0, r2
 801c106:	f7ff fe19 	bl	801bd3c <pick_lfn>
 801c10a:	4603      	mov	r3, r0
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d003      	beq.n	801c118 <dir_read+0xe6>
 801c110:	7d7b      	ldrb	r3, [r7, #21]
 801c112:	3b01      	subs	r3, #1
 801c114:	b2db      	uxtb	r3, r3
 801c116:	e000      	b.n	801c11a <dir_read+0xe8>
 801c118:	23ff      	movs	r3, #255	@ 0xff
 801c11a:	757b      	strb	r3, [r7, #21]
 801c11c:	e011      	b.n	801c142 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c11e:	7d7b      	ldrb	r3, [r7, #21]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d109      	bne.n	801c138 <dir_read+0x106>
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	6a1b      	ldr	r3, [r3, #32]
 801c128:	4618      	mov	r0, r3
 801c12a:	f7ff ff61 	bl	801bff0 <sum_sfn>
 801c12e:	4603      	mov	r3, r0
 801c130:	461a      	mov	r2, r3
 801c132:	7d3b      	ldrb	r3, [r7, #20]
 801c134:	4293      	cmp	r3, r2
 801c136:	d015      	beq.n	801c164 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	f04f 32ff 	mov.w	r2, #4294967295
 801c13e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c140:	e010      	b.n	801c164 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c142:	2100      	movs	r1, #0
 801c144:	6878      	ldr	r0, [r7, #4]
 801c146:	f7ff fc2d 	bl	801b9a4 <dir_next>
 801c14a:	4603      	mov	r3, r0
 801c14c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c14e:	7dfb      	ldrb	r3, [r7, #23]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d109      	bne.n	801c168 <dir_read+0x136>
	while (dp->sect) {
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	69db      	ldr	r3, [r3, #28]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	f47f af79 	bne.w	801c050 <dir_read+0x1e>
 801c15e:	e004      	b.n	801c16a <dir_read+0x138>
		if (res != FR_OK) break;
 801c160:	bf00      	nop
 801c162:	e002      	b.n	801c16a <dir_read+0x138>
					break;
 801c164:	bf00      	nop
 801c166:	e000      	b.n	801c16a <dir_read+0x138>
		if (res != FR_OK) break;
 801c168:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c16a:	7dfb      	ldrb	r3, [r7, #23]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d002      	beq.n	801c176 <dir_read+0x144>
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	2200      	movs	r2, #0
 801c174:	61da      	str	r2, [r3, #28]
	return res;
 801c176:	7dfb      	ldrb	r3, [r7, #23]
}
 801c178:	4618      	mov	r0, r3
 801c17a:	3718      	adds	r7, #24
 801c17c:	46bd      	mov	sp, r7
 801c17e:	bd80      	pop	{r7, pc}

0801c180 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b086      	sub	sp, #24
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c18e:	2100      	movs	r1, #0
 801c190:	6878      	ldr	r0, [r7, #4]
 801c192:	f7ff fb7e 	bl	801b892 <dir_sdi>
 801c196:	4603      	mov	r3, r0
 801c198:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c19a:	7dfb      	ldrb	r3, [r7, #23]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d001      	beq.n	801c1a4 <dir_find+0x24>
 801c1a0:	7dfb      	ldrb	r3, [r7, #23]
 801c1a2:	e0a9      	b.n	801c2f8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c1a4:	23ff      	movs	r3, #255	@ 0xff
 801c1a6:	753b      	strb	r3, [r7, #20]
 801c1a8:	7d3b      	ldrb	r3, [r7, #20]
 801c1aa:	757b      	strb	r3, [r7, #21]
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	f04f 32ff 	mov.w	r2, #4294967295
 801c1b2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	69db      	ldr	r3, [r3, #28]
 801c1b8:	4619      	mov	r1, r3
 801c1ba:	6938      	ldr	r0, [r7, #16]
 801c1bc:	f7fe ff8a 	bl	801b0d4 <move_window>
 801c1c0:	4603      	mov	r3, r0
 801c1c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c1c4:	7dfb      	ldrb	r3, [r7, #23]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	f040 8090 	bne.w	801c2ec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	6a1b      	ldr	r3, [r3, #32]
 801c1d0:	781b      	ldrb	r3, [r3, #0]
 801c1d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c1d4:	7dbb      	ldrb	r3, [r7, #22]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d102      	bne.n	801c1e0 <dir_find+0x60>
 801c1da:	2304      	movs	r3, #4
 801c1dc:	75fb      	strb	r3, [r7, #23]
 801c1de:	e08a      	b.n	801c2f6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	6a1b      	ldr	r3, [r3, #32]
 801c1e4:	330b      	adds	r3, #11
 801c1e6:	781b      	ldrb	r3, [r3, #0]
 801c1e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c1ec:	73fb      	strb	r3, [r7, #15]
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	7bfa      	ldrb	r2, [r7, #15]
 801c1f2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c1f4:	7dbb      	ldrb	r3, [r7, #22]
 801c1f6:	2be5      	cmp	r3, #229	@ 0xe5
 801c1f8:	d007      	beq.n	801c20a <dir_find+0x8a>
 801c1fa:	7bfb      	ldrb	r3, [r7, #15]
 801c1fc:	f003 0308 	and.w	r3, r3, #8
 801c200:	2b00      	cmp	r3, #0
 801c202:	d009      	beq.n	801c218 <dir_find+0x98>
 801c204:	7bfb      	ldrb	r3, [r7, #15]
 801c206:	2b0f      	cmp	r3, #15
 801c208:	d006      	beq.n	801c218 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c20a:	23ff      	movs	r3, #255	@ 0xff
 801c20c:	757b      	strb	r3, [r7, #21]
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	f04f 32ff 	mov.w	r2, #4294967295
 801c214:	631a      	str	r2, [r3, #48]	@ 0x30
 801c216:	e05e      	b.n	801c2d6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c218:	7bfb      	ldrb	r3, [r7, #15]
 801c21a:	2b0f      	cmp	r3, #15
 801c21c:	d136      	bne.n	801c28c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d154      	bne.n	801c2d6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c22c:	7dbb      	ldrb	r3, [r7, #22]
 801c22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c232:	2b00      	cmp	r3, #0
 801c234:	d00d      	beq.n	801c252 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	6a1b      	ldr	r3, [r3, #32]
 801c23a:	7b5b      	ldrb	r3, [r3, #13]
 801c23c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c23e:	7dbb      	ldrb	r3, [r7, #22]
 801c240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c244:	75bb      	strb	r3, [r7, #22]
 801c246:	7dbb      	ldrb	r3, [r7, #22]
 801c248:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	695a      	ldr	r2, [r3, #20]
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c252:	7dba      	ldrb	r2, [r7, #22]
 801c254:	7d7b      	ldrb	r3, [r7, #21]
 801c256:	429a      	cmp	r2, r3
 801c258:	d115      	bne.n	801c286 <dir_find+0x106>
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	6a1b      	ldr	r3, [r3, #32]
 801c25e:	330d      	adds	r3, #13
 801c260:	781b      	ldrb	r3, [r3, #0]
 801c262:	7d3a      	ldrb	r2, [r7, #20]
 801c264:	429a      	cmp	r2, r3
 801c266:	d10e      	bne.n	801c286 <dir_find+0x106>
 801c268:	693b      	ldr	r3, [r7, #16]
 801c26a:	691a      	ldr	r2, [r3, #16]
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	6a1b      	ldr	r3, [r3, #32]
 801c270:	4619      	mov	r1, r3
 801c272:	4610      	mov	r0, r2
 801c274:	f7ff fcf2 	bl	801bc5c <cmp_lfn>
 801c278:	4603      	mov	r3, r0
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d003      	beq.n	801c286 <dir_find+0x106>
 801c27e:	7d7b      	ldrb	r3, [r7, #21]
 801c280:	3b01      	subs	r3, #1
 801c282:	b2db      	uxtb	r3, r3
 801c284:	e000      	b.n	801c288 <dir_find+0x108>
 801c286:	23ff      	movs	r3, #255	@ 0xff
 801c288:	757b      	strb	r3, [r7, #21]
 801c28a:	e024      	b.n	801c2d6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c28c:	7d7b      	ldrb	r3, [r7, #21]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d109      	bne.n	801c2a6 <dir_find+0x126>
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	6a1b      	ldr	r3, [r3, #32]
 801c296:	4618      	mov	r0, r3
 801c298:	f7ff feaa 	bl	801bff0 <sum_sfn>
 801c29c:	4603      	mov	r3, r0
 801c29e:	461a      	mov	r2, r3
 801c2a0:	7d3b      	ldrb	r3, [r7, #20]
 801c2a2:	4293      	cmp	r3, r2
 801c2a4:	d024      	beq.n	801c2f0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c2ac:	f003 0301 	and.w	r3, r3, #1
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d10a      	bne.n	801c2ca <dir_find+0x14a>
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	6a18      	ldr	r0, [r3, #32]
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	3324      	adds	r3, #36	@ 0x24
 801c2bc:	220b      	movs	r2, #11
 801c2be:	4619      	mov	r1, r3
 801c2c0:	f7fe fd16 	bl	801acf0 <mem_cmp>
 801c2c4:	4603      	mov	r3, r0
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d014      	beq.n	801c2f4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c2ca:	23ff      	movs	r3, #255	@ 0xff
 801c2cc:	757b      	strb	r3, [r7, #21]
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	f04f 32ff 	mov.w	r2, #4294967295
 801c2d4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c2d6:	2100      	movs	r1, #0
 801c2d8:	6878      	ldr	r0, [r7, #4]
 801c2da:	f7ff fb63 	bl	801b9a4 <dir_next>
 801c2de:	4603      	mov	r3, r0
 801c2e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c2e2:	7dfb      	ldrb	r3, [r7, #23]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	f43f af65 	beq.w	801c1b4 <dir_find+0x34>
 801c2ea:	e004      	b.n	801c2f6 <dir_find+0x176>
		if (res != FR_OK) break;
 801c2ec:	bf00      	nop
 801c2ee:	e002      	b.n	801c2f6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c2f0:	bf00      	nop
 801c2f2:	e000      	b.n	801c2f6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c2f4:	bf00      	nop

	return res;
 801c2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	3718      	adds	r7, #24
 801c2fc:	46bd      	mov	sp, r7
 801c2fe:	bd80      	pop	{r7, pc}

0801c300 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b08c      	sub	sp, #48	@ 0x30
 801c304:	af00      	add	r7, sp, #0
 801c306:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c314:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d001      	beq.n	801c320 <dir_register+0x20>
 801c31c:	2306      	movs	r3, #6
 801c31e:	e0e0      	b.n	801c4e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c320:	2300      	movs	r3, #0
 801c322:	627b      	str	r3, [r7, #36]	@ 0x24
 801c324:	e002      	b.n	801c32c <dir_register+0x2c>
 801c326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c328:	3301      	adds	r3, #1
 801c32a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c32c:	69fb      	ldr	r3, [r7, #28]
 801c32e:	691a      	ldr	r2, [r3, #16]
 801c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c332:	005b      	lsls	r3, r3, #1
 801c334:	4413      	add	r3, r2
 801c336:	881b      	ldrh	r3, [r3, #0]
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d1f4      	bne.n	801c326 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c342:	f107 030c 	add.w	r3, r7, #12
 801c346:	220c      	movs	r2, #12
 801c348:	4618      	mov	r0, r3
 801c34a:	f7fe fc95 	bl	801ac78 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c34e:	7dfb      	ldrb	r3, [r7, #23]
 801c350:	f003 0301 	and.w	r3, r3, #1
 801c354:	2b00      	cmp	r3, #0
 801c356:	d032      	beq.n	801c3be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	2240      	movs	r2, #64	@ 0x40
 801c35c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c360:	2301      	movs	r3, #1
 801c362:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c364:	e016      	b.n	801c394 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c36c:	69fb      	ldr	r3, [r7, #28]
 801c36e:	691a      	ldr	r2, [r3, #16]
 801c370:	f107 010c 	add.w	r1, r7, #12
 801c374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c376:	f7ff fdad 	bl	801bed4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c37a:	6878      	ldr	r0, [r7, #4]
 801c37c:	f7ff ff00 	bl	801c180 <dir_find>
 801c380:	4603      	mov	r3, r0
 801c382:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c386:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d106      	bne.n	801c39c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c390:	3301      	adds	r3, #1
 801c392:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c396:	2b63      	cmp	r3, #99	@ 0x63
 801c398:	d9e5      	bls.n	801c366 <dir_register+0x66>
 801c39a:	e000      	b.n	801c39e <dir_register+0x9e>
			if (res != FR_OK) break;
 801c39c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3a0:	2b64      	cmp	r3, #100	@ 0x64
 801c3a2:	d101      	bne.n	801c3a8 <dir_register+0xa8>
 801c3a4:	2307      	movs	r3, #7
 801c3a6:	e09c      	b.n	801c4e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c3a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3ac:	2b04      	cmp	r3, #4
 801c3ae:	d002      	beq.n	801c3b6 <dir_register+0xb6>
 801c3b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3b4:	e095      	b.n	801c4e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c3b6:	7dfa      	ldrb	r2, [r7, #23]
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c3be:	7dfb      	ldrb	r3, [r7, #23]
 801c3c0:	f003 0302 	and.w	r3, r3, #2
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d007      	beq.n	801c3d8 <dir_register+0xd8>
 801c3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ca:	330c      	adds	r3, #12
 801c3cc:	4a47      	ldr	r2, [pc, #284]	@ (801c4ec <dir_register+0x1ec>)
 801c3ce:	fba2 2303 	umull	r2, r3, r2, r3
 801c3d2:	089b      	lsrs	r3, r3, #2
 801c3d4:	3301      	adds	r3, #1
 801c3d6:	e000      	b.n	801c3da <dir_register+0xda>
 801c3d8:	2301      	movs	r3, #1
 801c3da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c3dc:	6a39      	ldr	r1, [r7, #32]
 801c3de:	6878      	ldr	r0, [r7, #4]
 801c3e0:	f7ff fbb6 	bl	801bb50 <dir_alloc>
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c3ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d148      	bne.n	801c484 <dir_register+0x184>
 801c3f2:	6a3b      	ldr	r3, [r7, #32]
 801c3f4:	3b01      	subs	r3, #1
 801c3f6:	623b      	str	r3, [r7, #32]
 801c3f8:	6a3b      	ldr	r3, [r7, #32]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d042      	beq.n	801c484 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	695a      	ldr	r2, [r3, #20]
 801c402:	6a3b      	ldr	r3, [r7, #32]
 801c404:	015b      	lsls	r3, r3, #5
 801c406:	1ad3      	subs	r3, r2, r3
 801c408:	4619      	mov	r1, r3
 801c40a:	6878      	ldr	r0, [r7, #4]
 801c40c:	f7ff fa41 	bl	801b892 <dir_sdi>
 801c410:	4603      	mov	r3, r0
 801c412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d132      	bne.n	801c484 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	3324      	adds	r3, #36	@ 0x24
 801c422:	4618      	mov	r0, r3
 801c424:	f7ff fde4 	bl	801bff0 <sum_sfn>
 801c428:	4603      	mov	r3, r0
 801c42a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	69db      	ldr	r3, [r3, #28]
 801c430:	4619      	mov	r1, r3
 801c432:	69f8      	ldr	r0, [r7, #28]
 801c434:	f7fe fe4e 	bl	801b0d4 <move_window>
 801c438:	4603      	mov	r3, r0
 801c43a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c43e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c442:	2b00      	cmp	r3, #0
 801c444:	d11d      	bne.n	801c482 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c446:	69fb      	ldr	r3, [r7, #28]
 801c448:	6918      	ldr	r0, [r3, #16]
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	6a19      	ldr	r1, [r3, #32]
 801c44e:	6a3b      	ldr	r3, [r7, #32]
 801c450:	b2da      	uxtb	r2, r3
 801c452:	7efb      	ldrb	r3, [r7, #27]
 801c454:	f7ff fcd6 	bl	801be04 <put_lfn>
				fs->wflag = 1;
 801c458:	69fb      	ldr	r3, [r7, #28]
 801c45a:	2201      	movs	r2, #1
 801c45c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c45e:	2100      	movs	r1, #0
 801c460:	6878      	ldr	r0, [r7, #4]
 801c462:	f7ff fa9f 	bl	801b9a4 <dir_next>
 801c466:	4603      	mov	r3, r0
 801c468:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c46c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c470:	2b00      	cmp	r3, #0
 801c472:	d107      	bne.n	801c484 <dir_register+0x184>
 801c474:	6a3b      	ldr	r3, [r7, #32]
 801c476:	3b01      	subs	r3, #1
 801c478:	623b      	str	r3, [r7, #32]
 801c47a:	6a3b      	ldr	r3, [r7, #32]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d1d5      	bne.n	801c42c <dir_register+0x12c>
 801c480:	e000      	b.n	801c484 <dir_register+0x184>
				if (res != FR_OK) break;
 801c482:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d128      	bne.n	801c4de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	69db      	ldr	r3, [r3, #28]
 801c490:	4619      	mov	r1, r3
 801c492:	69f8      	ldr	r0, [r7, #28]
 801c494:	f7fe fe1e 	bl	801b0d4 <move_window>
 801c498:	4603      	mov	r3, r0
 801c49a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c49e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d11b      	bne.n	801c4de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	6a1b      	ldr	r3, [r3, #32]
 801c4aa:	2220      	movs	r2, #32
 801c4ac:	2100      	movs	r1, #0
 801c4ae:	4618      	mov	r0, r3
 801c4b0:	f7fe fc03 	bl	801acba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	6a18      	ldr	r0, [r3, #32]
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	3324      	adds	r3, #36	@ 0x24
 801c4bc:	220b      	movs	r2, #11
 801c4be:	4619      	mov	r1, r3
 801c4c0:	f7fe fbda 	bl	801ac78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	6a1b      	ldr	r3, [r3, #32]
 801c4ce:	330c      	adds	r3, #12
 801c4d0:	f002 0218 	and.w	r2, r2, #24
 801c4d4:	b2d2      	uxtb	r2, r2
 801c4d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c4d8:	69fb      	ldr	r3, [r7, #28]
 801c4da:	2201      	movs	r2, #1
 801c4dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c4de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	3730      	adds	r7, #48	@ 0x30
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	bd80      	pop	{r7, pc}
 801c4ea:	bf00      	nop
 801c4ec:	4ec4ec4f 	.word	0x4ec4ec4f

0801c4f0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b086      	sub	sp, #24
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	695b      	ldr	r3, [r3, #20]
 801c502:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c50c:	d007      	beq.n	801c51e <dir_remove+0x2e>
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c512:	4619      	mov	r1, r3
 801c514:	6878      	ldr	r0, [r7, #4]
 801c516:	f7ff f9bc 	bl	801b892 <dir_sdi>
 801c51a:	4603      	mov	r3, r0
 801c51c:	e000      	b.n	801c520 <dir_remove+0x30>
 801c51e:	2300      	movs	r3, #0
 801c520:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c522:	7dfb      	ldrb	r3, [r7, #23]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d128      	bne.n	801c57a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	69db      	ldr	r3, [r3, #28]
 801c52c:	4619      	mov	r1, r3
 801c52e:	6938      	ldr	r0, [r7, #16]
 801c530:	f7fe fdd0 	bl	801b0d4 <move_window>
 801c534:	4603      	mov	r3, r0
 801c536:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c538:	7dfb      	ldrb	r3, [r7, #23]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d115      	bne.n	801c56a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	6a1b      	ldr	r3, [r3, #32]
 801c542:	22e5      	movs	r2, #229	@ 0xe5
 801c544:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c546:	693b      	ldr	r3, [r7, #16]
 801c548:	2201      	movs	r2, #1
 801c54a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	695b      	ldr	r3, [r3, #20]
 801c550:	68fa      	ldr	r2, [r7, #12]
 801c552:	429a      	cmp	r2, r3
 801c554:	d90b      	bls.n	801c56e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c556:	2100      	movs	r1, #0
 801c558:	6878      	ldr	r0, [r7, #4]
 801c55a:	f7ff fa23 	bl	801b9a4 <dir_next>
 801c55e:	4603      	mov	r3, r0
 801c560:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c562:	7dfb      	ldrb	r3, [r7, #23]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d0df      	beq.n	801c528 <dir_remove+0x38>
 801c568:	e002      	b.n	801c570 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c56a:	bf00      	nop
 801c56c:	e000      	b.n	801c570 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c56e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c570:	7dfb      	ldrb	r3, [r7, #23]
 801c572:	2b04      	cmp	r3, #4
 801c574:	d101      	bne.n	801c57a <dir_remove+0x8a>
 801c576:	2302      	movs	r3, #2
 801c578:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c57a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c57c:	4618      	mov	r0, r3
 801c57e:	3718      	adds	r7, #24
 801c580:	46bd      	mov	sp, r7
 801c582:	bd80      	pop	{r7, pc}

0801c584 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	b08a      	sub	sp, #40	@ 0x28
 801c588:	af00      	add	r7, sp, #0
 801c58a:	6078      	str	r0, [r7, #4]
 801c58c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c58e:	683b      	ldr	r3, [r7, #0]
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	613b      	str	r3, [r7, #16]
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	691b      	ldr	r3, [r3, #16]
 801c59a:	60fb      	str	r3, [r7, #12]
 801c59c:	2300      	movs	r3, #0
 801c59e:	617b      	str	r3, [r7, #20]
 801c5a0:	697b      	ldr	r3, [r7, #20]
 801c5a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c5a4:	69bb      	ldr	r3, [r7, #24]
 801c5a6:	1c5a      	adds	r2, r3, #1
 801c5a8:	61ba      	str	r2, [r7, #24]
 801c5aa:	693a      	ldr	r2, [r7, #16]
 801c5ac:	4413      	add	r3, r2
 801c5ae:	781b      	ldrb	r3, [r3, #0]
 801c5b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c5b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5b4:	2b1f      	cmp	r3, #31
 801c5b6:	d940      	bls.n	801c63a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c5b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5ba:	2b2f      	cmp	r3, #47	@ 0x2f
 801c5bc:	d006      	beq.n	801c5cc <create_name+0x48>
 801c5be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5c0:	2b5c      	cmp	r3, #92	@ 0x5c
 801c5c2:	d110      	bne.n	801c5e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c5c4:	e002      	b.n	801c5cc <create_name+0x48>
 801c5c6:	69bb      	ldr	r3, [r7, #24]
 801c5c8:	3301      	adds	r3, #1
 801c5ca:	61bb      	str	r3, [r7, #24]
 801c5cc:	693a      	ldr	r2, [r7, #16]
 801c5ce:	69bb      	ldr	r3, [r7, #24]
 801c5d0:	4413      	add	r3, r2
 801c5d2:	781b      	ldrb	r3, [r3, #0]
 801c5d4:	2b2f      	cmp	r3, #47	@ 0x2f
 801c5d6:	d0f6      	beq.n	801c5c6 <create_name+0x42>
 801c5d8:	693a      	ldr	r2, [r7, #16]
 801c5da:	69bb      	ldr	r3, [r7, #24]
 801c5dc:	4413      	add	r3, r2
 801c5de:	781b      	ldrb	r3, [r3, #0]
 801c5e0:	2b5c      	cmp	r3, #92	@ 0x5c
 801c5e2:	d0f0      	beq.n	801c5c6 <create_name+0x42>
			break;
 801c5e4:	e02a      	b.n	801c63c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c5e6:	697b      	ldr	r3, [r7, #20]
 801c5e8:	2bfe      	cmp	r3, #254	@ 0xfe
 801c5ea:	d901      	bls.n	801c5f0 <create_name+0x6c>
 801c5ec:	2306      	movs	r3, #6
 801c5ee:	e17d      	b.n	801c8ec <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c5f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5f2:	b2db      	uxtb	r3, r3
 801c5f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c5f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5f8:	2101      	movs	r1, #1
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f001 fa98 	bl	801db30 <ff_convert>
 801c600:	4603      	mov	r3, r0
 801c602:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c604:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c606:	2b00      	cmp	r3, #0
 801c608:	d101      	bne.n	801c60e <create_name+0x8a>
 801c60a:	2306      	movs	r3, #6
 801c60c:	e16e      	b.n	801c8ec <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c60e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c610:	2b7f      	cmp	r3, #127	@ 0x7f
 801c612:	d809      	bhi.n	801c628 <create_name+0xa4>
 801c614:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c616:	4619      	mov	r1, r3
 801c618:	488d      	ldr	r0, [pc, #564]	@ (801c850 <create_name+0x2cc>)
 801c61a:	f7fe fb90 	bl	801ad3e <chk_chr>
 801c61e:	4603      	mov	r3, r0
 801c620:	2b00      	cmp	r3, #0
 801c622:	d001      	beq.n	801c628 <create_name+0xa4>
 801c624:	2306      	movs	r3, #6
 801c626:	e161      	b.n	801c8ec <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c628:	697b      	ldr	r3, [r7, #20]
 801c62a:	1c5a      	adds	r2, r3, #1
 801c62c:	617a      	str	r2, [r7, #20]
 801c62e:	005b      	lsls	r3, r3, #1
 801c630:	68fa      	ldr	r2, [r7, #12]
 801c632:	4413      	add	r3, r2
 801c634:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c636:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c638:	e7b4      	b.n	801c5a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c63a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c63c:	693a      	ldr	r2, [r7, #16]
 801c63e:	69bb      	ldr	r3, [r7, #24]
 801c640:	441a      	add	r2, r3
 801c642:	683b      	ldr	r3, [r7, #0]
 801c644:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c646:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c648:	2b1f      	cmp	r3, #31
 801c64a:	d801      	bhi.n	801c650 <create_name+0xcc>
 801c64c:	2304      	movs	r3, #4
 801c64e:	e000      	b.n	801c652 <create_name+0xce>
 801c650:	2300      	movs	r3, #0
 801c652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c656:	e011      	b.n	801c67c <create_name+0xf8>
		w = lfn[di - 1];
 801c658:	697a      	ldr	r2, [r7, #20]
 801c65a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c65e:	4413      	add	r3, r2
 801c660:	005b      	lsls	r3, r3, #1
 801c662:	68fa      	ldr	r2, [r7, #12]
 801c664:	4413      	add	r3, r2
 801c666:	881b      	ldrh	r3, [r3, #0]
 801c668:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c66a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c66c:	2b20      	cmp	r3, #32
 801c66e:	d002      	beq.n	801c676 <create_name+0xf2>
 801c670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c672:	2b2e      	cmp	r3, #46	@ 0x2e
 801c674:	d106      	bne.n	801c684 <create_name+0x100>
		di--;
 801c676:	697b      	ldr	r3, [r7, #20]
 801c678:	3b01      	subs	r3, #1
 801c67a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c67c:	697b      	ldr	r3, [r7, #20]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d1ea      	bne.n	801c658 <create_name+0xd4>
 801c682:	e000      	b.n	801c686 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c684:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c686:	697b      	ldr	r3, [r7, #20]
 801c688:	005b      	lsls	r3, r3, #1
 801c68a:	68fa      	ldr	r2, [r7, #12]
 801c68c:	4413      	add	r3, r2
 801c68e:	2200      	movs	r2, #0
 801c690:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c692:	697b      	ldr	r3, [r7, #20]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d101      	bne.n	801c69c <create_name+0x118>
 801c698:	2306      	movs	r3, #6
 801c69a:	e127      	b.n	801c8ec <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	3324      	adds	r3, #36	@ 0x24
 801c6a0:	220b      	movs	r2, #11
 801c6a2:	2120      	movs	r1, #32
 801c6a4:	4618      	mov	r0, r3
 801c6a6:	f7fe fb08 	bl	801acba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c6aa:	2300      	movs	r3, #0
 801c6ac:	61bb      	str	r3, [r7, #24]
 801c6ae:	e002      	b.n	801c6b6 <create_name+0x132>
 801c6b0:	69bb      	ldr	r3, [r7, #24]
 801c6b2:	3301      	adds	r3, #1
 801c6b4:	61bb      	str	r3, [r7, #24]
 801c6b6:	69bb      	ldr	r3, [r7, #24]
 801c6b8:	005b      	lsls	r3, r3, #1
 801c6ba:	68fa      	ldr	r2, [r7, #12]
 801c6bc:	4413      	add	r3, r2
 801c6be:	881b      	ldrh	r3, [r3, #0]
 801c6c0:	2b20      	cmp	r3, #32
 801c6c2:	d0f5      	beq.n	801c6b0 <create_name+0x12c>
 801c6c4:	69bb      	ldr	r3, [r7, #24]
 801c6c6:	005b      	lsls	r3, r3, #1
 801c6c8:	68fa      	ldr	r2, [r7, #12]
 801c6ca:	4413      	add	r3, r2
 801c6cc:	881b      	ldrh	r3, [r3, #0]
 801c6ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801c6d0:	d0ee      	beq.n	801c6b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c6d2:	69bb      	ldr	r3, [r7, #24]
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d009      	beq.n	801c6ec <create_name+0x168>
 801c6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c6dc:	f043 0303 	orr.w	r3, r3, #3
 801c6e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c6e4:	e002      	b.n	801c6ec <create_name+0x168>
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	3b01      	subs	r3, #1
 801c6ea:	617b      	str	r3, [r7, #20]
 801c6ec:	697b      	ldr	r3, [r7, #20]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d009      	beq.n	801c706 <create_name+0x182>
 801c6f2:	697a      	ldr	r2, [r7, #20]
 801c6f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c6f8:	4413      	add	r3, r2
 801c6fa:	005b      	lsls	r3, r3, #1
 801c6fc:	68fa      	ldr	r2, [r7, #12]
 801c6fe:	4413      	add	r3, r2
 801c700:	881b      	ldrh	r3, [r3, #0]
 801c702:	2b2e      	cmp	r3, #46	@ 0x2e
 801c704:	d1ef      	bne.n	801c6e6 <create_name+0x162>

	i = b = 0; ni = 8;
 801c706:	2300      	movs	r3, #0
 801c708:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c70c:	2300      	movs	r3, #0
 801c70e:	623b      	str	r3, [r7, #32]
 801c710:	2308      	movs	r3, #8
 801c712:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c714:	69bb      	ldr	r3, [r7, #24]
 801c716:	1c5a      	adds	r2, r3, #1
 801c718:	61ba      	str	r2, [r7, #24]
 801c71a:	005b      	lsls	r3, r3, #1
 801c71c:	68fa      	ldr	r2, [r7, #12]
 801c71e:	4413      	add	r3, r2
 801c720:	881b      	ldrh	r3, [r3, #0]
 801c722:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c726:	2b00      	cmp	r3, #0
 801c728:	f000 8090 	beq.w	801c84c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c72c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c72e:	2b20      	cmp	r3, #32
 801c730:	d006      	beq.n	801c740 <create_name+0x1bc>
 801c732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c734:	2b2e      	cmp	r3, #46	@ 0x2e
 801c736:	d10a      	bne.n	801c74e <create_name+0x1ca>
 801c738:	69ba      	ldr	r2, [r7, #24]
 801c73a:	697b      	ldr	r3, [r7, #20]
 801c73c:	429a      	cmp	r2, r3
 801c73e:	d006      	beq.n	801c74e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c744:	f043 0303 	orr.w	r3, r3, #3
 801c748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c74c:	e07d      	b.n	801c84a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c74e:	6a3a      	ldr	r2, [r7, #32]
 801c750:	69fb      	ldr	r3, [r7, #28]
 801c752:	429a      	cmp	r2, r3
 801c754:	d203      	bcs.n	801c75e <create_name+0x1da>
 801c756:	69ba      	ldr	r2, [r7, #24]
 801c758:	697b      	ldr	r3, [r7, #20]
 801c75a:	429a      	cmp	r2, r3
 801c75c:	d123      	bne.n	801c7a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c75e:	69fb      	ldr	r3, [r7, #28]
 801c760:	2b0b      	cmp	r3, #11
 801c762:	d106      	bne.n	801c772 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c768:	f043 0303 	orr.w	r3, r3, #3
 801c76c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c770:	e075      	b.n	801c85e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c772:	69ba      	ldr	r2, [r7, #24]
 801c774:	697b      	ldr	r3, [r7, #20]
 801c776:	429a      	cmp	r2, r3
 801c778:	d005      	beq.n	801c786 <create_name+0x202>
 801c77a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c77e:	f043 0303 	orr.w	r3, r3, #3
 801c782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c786:	69ba      	ldr	r2, [r7, #24]
 801c788:	697b      	ldr	r3, [r7, #20]
 801c78a:	429a      	cmp	r2, r3
 801c78c:	d866      	bhi.n	801c85c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c78e:	697b      	ldr	r3, [r7, #20]
 801c790:	61bb      	str	r3, [r7, #24]
 801c792:	2308      	movs	r3, #8
 801c794:	623b      	str	r3, [r7, #32]
 801c796:	230b      	movs	r3, #11
 801c798:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c79a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c79e:	009b      	lsls	r3, r3, #2
 801c7a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c7a4:	e051      	b.n	801c84a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c7a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7a8:	2b7f      	cmp	r3, #127	@ 0x7f
 801c7aa:	d914      	bls.n	801c7d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c7ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7ae:	2100      	movs	r1, #0
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	f001 f9bd 	bl	801db30 <ff_convert>
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c7ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d004      	beq.n	801c7ca <create_name+0x246>
 801c7c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7c2:	3b80      	subs	r3, #128	@ 0x80
 801c7c4:	4a23      	ldr	r2, [pc, #140]	@ (801c854 <create_name+0x2d0>)
 801c7c6:	5cd3      	ldrb	r3, [r2, r3]
 801c7c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c7ce:	f043 0302 	orr.w	r3, r3, #2
 801c7d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c7d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d007      	beq.n	801c7ec <create_name+0x268>
 801c7dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7de:	4619      	mov	r1, r3
 801c7e0:	481d      	ldr	r0, [pc, #116]	@ (801c858 <create_name+0x2d4>)
 801c7e2:	f7fe faac 	bl	801ad3e <chk_chr>
 801c7e6:	4603      	mov	r3, r0
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d008      	beq.n	801c7fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c7ec:	235f      	movs	r3, #95	@ 0x5f
 801c7ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c7f4:	f043 0303 	orr.w	r3, r3, #3
 801c7f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c7fc:	e01b      	b.n	801c836 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c7fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c800:	2b40      	cmp	r3, #64	@ 0x40
 801c802:	d909      	bls.n	801c818 <create_name+0x294>
 801c804:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c806:	2b5a      	cmp	r3, #90	@ 0x5a
 801c808:	d806      	bhi.n	801c818 <create_name+0x294>
					b |= 2;
 801c80a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c80e:	f043 0302 	orr.w	r3, r3, #2
 801c812:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c816:	e00e      	b.n	801c836 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c818:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c81a:	2b60      	cmp	r3, #96	@ 0x60
 801c81c:	d90b      	bls.n	801c836 <create_name+0x2b2>
 801c81e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c820:	2b7a      	cmp	r3, #122	@ 0x7a
 801c822:	d808      	bhi.n	801c836 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c824:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c828:	f043 0301 	orr.w	r3, r3, #1
 801c82c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c830:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c832:	3b20      	subs	r3, #32
 801c834:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c836:	6a3b      	ldr	r3, [r7, #32]
 801c838:	1c5a      	adds	r2, r3, #1
 801c83a:	623a      	str	r2, [r7, #32]
 801c83c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c83e:	b2d1      	uxtb	r1, r2
 801c840:	687a      	ldr	r2, [r7, #4]
 801c842:	4413      	add	r3, r2
 801c844:	460a      	mov	r2, r1
 801c846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c84a:	e763      	b.n	801c714 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c84c:	bf00      	nop
 801c84e:	e006      	b.n	801c85e <create_name+0x2da>
 801c850:	0801e744 	.word	0x0801e744
 801c854:	0801e7d0 	.word	0x0801e7d0
 801c858:	0801e750 	.word	0x0801e750
			if (si > di) break;			/* No extension */
 801c85c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c864:	2be5      	cmp	r3, #229	@ 0xe5
 801c866:	d103      	bne.n	801c870 <create_name+0x2ec>
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	2205      	movs	r2, #5
 801c86c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c870:	69fb      	ldr	r3, [r7, #28]
 801c872:	2b08      	cmp	r3, #8
 801c874:	d104      	bne.n	801c880 <create_name+0x2fc>
 801c876:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c87a:	009b      	lsls	r3, r3, #2
 801c87c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c880:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c884:	f003 030c 	and.w	r3, r3, #12
 801c888:	2b0c      	cmp	r3, #12
 801c88a:	d005      	beq.n	801c898 <create_name+0x314>
 801c88c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c890:	f003 0303 	and.w	r3, r3, #3
 801c894:	2b03      	cmp	r3, #3
 801c896:	d105      	bne.n	801c8a4 <create_name+0x320>
 801c898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c89c:	f043 0302 	orr.w	r3, r3, #2
 801c8a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8a8:	f003 0302 	and.w	r3, r3, #2
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d117      	bne.n	801c8e0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c8b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c8b4:	f003 0303 	and.w	r3, r3, #3
 801c8b8:	2b01      	cmp	r3, #1
 801c8ba:	d105      	bne.n	801c8c8 <create_name+0x344>
 801c8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8c0:	f043 0310 	orr.w	r3, r3, #16
 801c8c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c8cc:	f003 030c 	and.w	r3, r3, #12
 801c8d0:	2b04      	cmp	r3, #4
 801c8d2:	d105      	bne.n	801c8e0 <create_name+0x35c>
 801c8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8d8:	f043 0308 	orr.w	r3, r3, #8
 801c8dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c8e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801c8ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	3728      	adds	r7, #40	@ 0x28
 801c8f0:	46bd      	mov	sp, r7
 801c8f2:	bd80      	pop	{r7, pc}

0801c8f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c8f4:	b580      	push	{r7, lr}
 801c8f6:	b086      	sub	sp, #24
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	6078      	str	r0, [r7, #4]
 801c8fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c902:	693b      	ldr	r3, [r7, #16]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c908:	e002      	b.n	801c910 <follow_path+0x1c>
 801c90a:	683b      	ldr	r3, [r7, #0]
 801c90c:	3301      	adds	r3, #1
 801c90e:	603b      	str	r3, [r7, #0]
 801c910:	683b      	ldr	r3, [r7, #0]
 801c912:	781b      	ldrb	r3, [r3, #0]
 801c914:	2b2f      	cmp	r3, #47	@ 0x2f
 801c916:	d0f8      	beq.n	801c90a <follow_path+0x16>
 801c918:	683b      	ldr	r3, [r7, #0]
 801c91a:	781b      	ldrb	r3, [r3, #0]
 801c91c:	2b5c      	cmp	r3, #92	@ 0x5c
 801c91e:	d0f4      	beq.n	801c90a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c920:	693b      	ldr	r3, [r7, #16]
 801c922:	2200      	movs	r2, #0
 801c924:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c926:	683b      	ldr	r3, [r7, #0]
 801c928:	781b      	ldrb	r3, [r3, #0]
 801c92a:	2b1f      	cmp	r3, #31
 801c92c:	d80a      	bhi.n	801c944 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	2280      	movs	r2, #128	@ 0x80
 801c932:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c936:	2100      	movs	r1, #0
 801c938:	6878      	ldr	r0, [r7, #4]
 801c93a:	f7fe ffaa 	bl	801b892 <dir_sdi>
 801c93e:	4603      	mov	r3, r0
 801c940:	75fb      	strb	r3, [r7, #23]
 801c942:	e048      	b.n	801c9d6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c944:	463b      	mov	r3, r7
 801c946:	4619      	mov	r1, r3
 801c948:	6878      	ldr	r0, [r7, #4]
 801c94a:	f7ff fe1b 	bl	801c584 <create_name>
 801c94e:	4603      	mov	r3, r0
 801c950:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c952:	7dfb      	ldrb	r3, [r7, #23]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d139      	bne.n	801c9cc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c958:	6878      	ldr	r0, [r7, #4]
 801c95a:	f7ff fc11 	bl	801c180 <dir_find>
 801c95e:	4603      	mov	r3, r0
 801c960:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c968:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c96a:	7dfb      	ldrb	r3, [r7, #23]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d00a      	beq.n	801c986 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c970:	7dfb      	ldrb	r3, [r7, #23]
 801c972:	2b04      	cmp	r3, #4
 801c974:	d12c      	bne.n	801c9d0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c976:	7afb      	ldrb	r3, [r7, #11]
 801c978:	f003 0304 	and.w	r3, r3, #4
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d127      	bne.n	801c9d0 <follow_path+0xdc>
 801c980:	2305      	movs	r3, #5
 801c982:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c984:	e024      	b.n	801c9d0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c986:	7afb      	ldrb	r3, [r7, #11]
 801c988:	f003 0304 	and.w	r3, r3, #4
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d121      	bne.n	801c9d4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c990:	693b      	ldr	r3, [r7, #16]
 801c992:	799b      	ldrb	r3, [r3, #6]
 801c994:	f003 0310 	and.w	r3, r3, #16
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d102      	bne.n	801c9a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c99c:	2305      	movs	r3, #5
 801c99e:	75fb      	strb	r3, [r7, #23]
 801c9a0:	e019      	b.n	801c9d6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	695b      	ldr	r3, [r3, #20]
 801c9ac:	68fa      	ldr	r2, [r7, #12]
 801c9ae:	8992      	ldrh	r2, [r2, #12]
 801c9b0:	fbb3 f0f2 	udiv	r0, r3, r2
 801c9b4:	fb00 f202 	mul.w	r2, r0, r2
 801c9b8:	1a9b      	subs	r3, r3, r2
 801c9ba:	440b      	add	r3, r1
 801c9bc:	4619      	mov	r1, r3
 801c9be:	68f8      	ldr	r0, [r7, #12]
 801c9c0:	f7ff f90d 	bl	801bbde <ld_clust>
 801c9c4:	4602      	mov	r2, r0
 801c9c6:	693b      	ldr	r3, [r7, #16]
 801c9c8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c9ca:	e7bb      	b.n	801c944 <follow_path+0x50>
			if (res != FR_OK) break;
 801c9cc:	bf00      	nop
 801c9ce:	e002      	b.n	801c9d6 <follow_path+0xe2>
				break;
 801c9d0:	bf00      	nop
 801c9d2:	e000      	b.n	801c9d6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c9d4:	bf00      	nop
			}
		}
	}

	return res;
 801c9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9d8:	4618      	mov	r0, r3
 801c9da:	3718      	adds	r7, #24
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	bd80      	pop	{r7, pc}

0801c9e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c9e0:	b480      	push	{r7}
 801c9e2:	b087      	sub	sp, #28
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c9e8:	f04f 33ff 	mov.w	r3, #4294967295
 801c9ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d031      	beq.n	801ca5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	617b      	str	r3, [r7, #20]
 801c9fc:	e002      	b.n	801ca04 <get_ldnumber+0x24>
 801c9fe:	697b      	ldr	r3, [r7, #20]
 801ca00:	3301      	adds	r3, #1
 801ca02:	617b      	str	r3, [r7, #20]
 801ca04:	697b      	ldr	r3, [r7, #20]
 801ca06:	781b      	ldrb	r3, [r3, #0]
 801ca08:	2b1f      	cmp	r3, #31
 801ca0a:	d903      	bls.n	801ca14 <get_ldnumber+0x34>
 801ca0c:	697b      	ldr	r3, [r7, #20]
 801ca0e:	781b      	ldrb	r3, [r3, #0]
 801ca10:	2b3a      	cmp	r3, #58	@ 0x3a
 801ca12:	d1f4      	bne.n	801c9fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ca14:	697b      	ldr	r3, [r7, #20]
 801ca16:	781b      	ldrb	r3, [r3, #0]
 801ca18:	2b3a      	cmp	r3, #58	@ 0x3a
 801ca1a:	d11c      	bne.n	801ca56 <get_ldnumber+0x76>
			tp = *path;
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	1c5a      	adds	r2, r3, #1
 801ca26:	60fa      	str	r2, [r7, #12]
 801ca28:	781b      	ldrb	r3, [r3, #0]
 801ca2a:	3b30      	subs	r3, #48	@ 0x30
 801ca2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ca2e:	68bb      	ldr	r3, [r7, #8]
 801ca30:	2b09      	cmp	r3, #9
 801ca32:	d80e      	bhi.n	801ca52 <get_ldnumber+0x72>
 801ca34:	68fa      	ldr	r2, [r7, #12]
 801ca36:	697b      	ldr	r3, [r7, #20]
 801ca38:	429a      	cmp	r2, r3
 801ca3a:	d10a      	bne.n	801ca52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ca3c:	68bb      	ldr	r3, [r7, #8]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d107      	bne.n	801ca52 <get_ldnumber+0x72>
					vol = (int)i;
 801ca42:	68bb      	ldr	r3, [r7, #8]
 801ca44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ca46:	697b      	ldr	r3, [r7, #20]
 801ca48:	3301      	adds	r3, #1
 801ca4a:	617b      	str	r3, [r7, #20]
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	697a      	ldr	r2, [r7, #20]
 801ca50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ca52:	693b      	ldr	r3, [r7, #16]
 801ca54:	e002      	b.n	801ca5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801ca56:	2300      	movs	r3, #0
 801ca58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ca5a:	693b      	ldr	r3, [r7, #16]
}
 801ca5c:	4618      	mov	r0, r3
 801ca5e:	371c      	adds	r7, #28
 801ca60:	46bd      	mov	sp, r7
 801ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca66:	4770      	bx	lr

0801ca68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ca68:	b580      	push	{r7, lr}
 801ca6a:	b082      	sub	sp, #8
 801ca6c:	af00      	add	r7, sp, #0
 801ca6e:	6078      	str	r0, [r7, #4]
 801ca70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	2200      	movs	r2, #0
 801ca76:	70da      	strb	r2, [r3, #3]
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	f04f 32ff 	mov.w	r2, #4294967295
 801ca7e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ca80:	6839      	ldr	r1, [r7, #0]
 801ca82:	6878      	ldr	r0, [r7, #4]
 801ca84:	f7fe fb26 	bl	801b0d4 <move_window>
 801ca88:	4603      	mov	r3, r0
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d001      	beq.n	801ca92 <check_fs+0x2a>
 801ca8e:	2304      	movs	r3, #4
 801ca90:	e038      	b.n	801cb04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	3338      	adds	r3, #56	@ 0x38
 801ca96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	f7fe f86a 	bl	801ab74 <ld_word>
 801caa0:	4603      	mov	r3, r0
 801caa2:	461a      	mov	r2, r3
 801caa4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801caa8:	429a      	cmp	r2, r3
 801caaa:	d001      	beq.n	801cab0 <check_fs+0x48>
 801caac:	2303      	movs	r3, #3
 801caae:	e029      	b.n	801cb04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cab6:	2be9      	cmp	r3, #233	@ 0xe9
 801cab8:	d009      	beq.n	801cace <check_fs+0x66>
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cac0:	2beb      	cmp	r3, #235	@ 0xeb
 801cac2:	d11e      	bne.n	801cb02 <check_fs+0x9a>
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801caca:	2b90      	cmp	r3, #144	@ 0x90
 801cacc:	d119      	bne.n	801cb02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	3338      	adds	r3, #56	@ 0x38
 801cad2:	3336      	adds	r3, #54	@ 0x36
 801cad4:	4618      	mov	r0, r3
 801cad6:	f7fe f865 	bl	801aba4 <ld_dword>
 801cada:	4603      	mov	r3, r0
 801cadc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cae0:	4a0a      	ldr	r2, [pc, #40]	@ (801cb0c <check_fs+0xa4>)
 801cae2:	4293      	cmp	r3, r2
 801cae4:	d101      	bne.n	801caea <check_fs+0x82>
 801cae6:	2300      	movs	r3, #0
 801cae8:	e00c      	b.n	801cb04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	3338      	adds	r3, #56	@ 0x38
 801caee:	3352      	adds	r3, #82	@ 0x52
 801caf0:	4618      	mov	r0, r3
 801caf2:	f7fe f857 	bl	801aba4 <ld_dword>
 801caf6:	4603      	mov	r3, r0
 801caf8:	4a05      	ldr	r2, [pc, #20]	@ (801cb10 <check_fs+0xa8>)
 801cafa:	4293      	cmp	r3, r2
 801cafc:	d101      	bne.n	801cb02 <check_fs+0x9a>
 801cafe:	2300      	movs	r3, #0
 801cb00:	e000      	b.n	801cb04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cb02:	2302      	movs	r3, #2
}
 801cb04:	4618      	mov	r0, r3
 801cb06:	3708      	adds	r7, #8
 801cb08:	46bd      	mov	sp, r7
 801cb0a:	bd80      	pop	{r7, pc}
 801cb0c:	00544146 	.word	0x00544146
 801cb10:	33544146 	.word	0x33544146

0801cb14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cb14:	b580      	push	{r7, lr}
 801cb16:	b096      	sub	sp, #88	@ 0x58
 801cb18:	af00      	add	r7, sp, #0
 801cb1a:	60f8      	str	r0, [r7, #12]
 801cb1c:	60b9      	str	r1, [r7, #8]
 801cb1e:	4613      	mov	r3, r2
 801cb20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cb22:	68bb      	ldr	r3, [r7, #8]
 801cb24:	2200      	movs	r2, #0
 801cb26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cb28:	68f8      	ldr	r0, [r7, #12]
 801cb2a:	f7ff ff59 	bl	801c9e0 <get_ldnumber>
 801cb2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cb30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	da01      	bge.n	801cb3a <find_volume+0x26>
 801cb36:	230b      	movs	r3, #11
 801cb38:	e265      	b.n	801d006 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cb3a:	4a9f      	ldr	r2, [pc, #636]	@ (801cdb8 <find_volume+0x2a4>)
 801cb3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cb42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d101      	bne.n	801cb4e <find_volume+0x3a>
 801cb4a:	230c      	movs	r3, #12
 801cb4c:	e25b      	b.n	801d006 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cb4e:	68bb      	ldr	r3, [r7, #8]
 801cb50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cb52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cb54:	79fb      	ldrb	r3, [r7, #7]
 801cb56:	f023 0301 	bic.w	r3, r3, #1
 801cb5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb5e:	781b      	ldrb	r3, [r3, #0]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d01a      	beq.n	801cb9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb66:	785b      	ldrb	r3, [r3, #1]
 801cb68:	4618      	mov	r0, r3
 801cb6a:	f7fd ff63 	bl	801aa34 <disk_status>
 801cb6e:	4603      	mov	r3, r0
 801cb70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cb74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cb78:	f003 0301 	and.w	r3, r3, #1
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d10c      	bne.n	801cb9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cb80:	79fb      	ldrb	r3, [r7, #7]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d007      	beq.n	801cb96 <find_volume+0x82>
 801cb86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cb8a:	f003 0304 	and.w	r3, r3, #4
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d001      	beq.n	801cb96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cb92:	230a      	movs	r3, #10
 801cb94:	e237      	b.n	801d006 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cb96:	2300      	movs	r3, #0
 801cb98:	e235      	b.n	801d006 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb9c:	2200      	movs	r2, #0
 801cb9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cba2:	b2da      	uxtb	r2, r3
 801cba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cba6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801cba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbaa:	785b      	ldrb	r3, [r3, #1]
 801cbac:	4618      	mov	r0, r3
 801cbae:	f7fd ff5b 	bl	801aa68 <disk_initialize>
 801cbb2:	4603      	mov	r3, r0
 801cbb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801cbb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cbbc:	f003 0301 	and.w	r3, r3, #1
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d001      	beq.n	801cbc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801cbc4:	2303      	movs	r3, #3
 801cbc6:	e21e      	b.n	801d006 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801cbc8:	79fb      	ldrb	r3, [r7, #7]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d007      	beq.n	801cbde <find_volume+0xca>
 801cbce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cbd2:	f003 0304 	and.w	r3, r3, #4
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d001      	beq.n	801cbde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801cbda:	230a      	movs	r3, #10
 801cbdc:	e213      	b.n	801d006 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801cbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbe0:	7858      	ldrb	r0, [r3, #1]
 801cbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbe4:	330c      	adds	r3, #12
 801cbe6:	461a      	mov	r2, r3
 801cbe8:	2102      	movs	r1, #2
 801cbea:	f7fd ffa5 	bl	801ab38 <disk_ioctl>
 801cbee:	4603      	mov	r3, r0
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d001      	beq.n	801cbf8 <find_volume+0xe4>
 801cbf4:	2301      	movs	r3, #1
 801cbf6:	e206      	b.n	801d006 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801cbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbfa:	899b      	ldrh	r3, [r3, #12]
 801cbfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cc00:	d80d      	bhi.n	801cc1e <find_volume+0x10a>
 801cc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc04:	899b      	ldrh	r3, [r3, #12]
 801cc06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cc0a:	d308      	bcc.n	801cc1e <find_volume+0x10a>
 801cc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc0e:	899b      	ldrh	r3, [r3, #12]
 801cc10:	461a      	mov	r2, r3
 801cc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc14:	899b      	ldrh	r3, [r3, #12]
 801cc16:	3b01      	subs	r3, #1
 801cc18:	4013      	ands	r3, r2
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d001      	beq.n	801cc22 <find_volume+0x10e>
 801cc1e:	2301      	movs	r3, #1
 801cc20:	e1f1      	b.n	801d006 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801cc22:	2300      	movs	r3, #0
 801cc24:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801cc26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cc28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cc2a:	f7ff ff1d 	bl	801ca68 <check_fs>
 801cc2e:	4603      	mov	r3, r0
 801cc30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801cc34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cc38:	2b02      	cmp	r3, #2
 801cc3a:	d149      	bne.n	801ccd0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cc3c:	2300      	movs	r3, #0
 801cc3e:	643b      	str	r3, [r7, #64]	@ 0x40
 801cc40:	e01e      	b.n	801cc80 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801cc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc44:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801cc48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc4a:	011b      	lsls	r3, r3, #4
 801cc4c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801cc50:	4413      	add	r3, r2
 801cc52:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc56:	3304      	adds	r3, #4
 801cc58:	781b      	ldrb	r3, [r3, #0]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d006      	beq.n	801cc6c <find_volume+0x158>
 801cc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc60:	3308      	adds	r3, #8
 801cc62:	4618      	mov	r0, r3
 801cc64:	f7fd ff9e 	bl	801aba4 <ld_dword>
 801cc68:	4602      	mov	r2, r0
 801cc6a:	e000      	b.n	801cc6e <find_volume+0x15a>
 801cc6c:	2200      	movs	r2, #0
 801cc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc70:	009b      	lsls	r3, r3, #2
 801cc72:	3358      	adds	r3, #88	@ 0x58
 801cc74:	443b      	add	r3, r7
 801cc76:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cc7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc7c:	3301      	adds	r3, #1
 801cc7e:	643b      	str	r3, [r7, #64]	@ 0x40
 801cc80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc82:	2b03      	cmp	r3, #3
 801cc84:	d9dd      	bls.n	801cc42 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801cc86:	2300      	movs	r3, #0
 801cc88:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801cc8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d002      	beq.n	801cc96 <find_volume+0x182>
 801cc90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc92:	3b01      	subs	r3, #1
 801cc94:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801cc96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc98:	009b      	lsls	r3, r3, #2
 801cc9a:	3358      	adds	r3, #88	@ 0x58
 801cc9c:	443b      	add	r3, r7
 801cc9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801cca2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801cca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d005      	beq.n	801ccb6 <find_volume+0x1a2>
 801ccaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801ccac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801ccae:	f7ff fedb 	bl	801ca68 <check_fs>
 801ccb2:	4603      	mov	r3, r0
 801ccb4:	e000      	b.n	801ccb8 <find_volume+0x1a4>
 801ccb6:	2303      	movs	r3, #3
 801ccb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801ccbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ccc0:	2b01      	cmp	r3, #1
 801ccc2:	d905      	bls.n	801ccd0 <find_volume+0x1bc>
 801ccc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ccc6:	3301      	adds	r3, #1
 801ccc8:	643b      	str	r3, [r7, #64]	@ 0x40
 801ccca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cccc:	2b03      	cmp	r3, #3
 801ccce:	d9e2      	bls.n	801cc96 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801ccd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ccd4:	2b04      	cmp	r3, #4
 801ccd6:	d101      	bne.n	801ccdc <find_volume+0x1c8>
 801ccd8:	2301      	movs	r3, #1
 801ccda:	e194      	b.n	801d006 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801ccdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cce0:	2b01      	cmp	r3, #1
 801cce2:	d901      	bls.n	801cce8 <find_volume+0x1d4>
 801cce4:	230d      	movs	r3, #13
 801cce6:	e18e      	b.n	801d006 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801cce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccea:	3338      	adds	r3, #56	@ 0x38
 801ccec:	330b      	adds	r3, #11
 801ccee:	4618      	mov	r0, r3
 801ccf0:	f7fd ff40 	bl	801ab74 <ld_word>
 801ccf4:	4603      	mov	r3, r0
 801ccf6:	461a      	mov	r2, r3
 801ccf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccfa:	899b      	ldrh	r3, [r3, #12]
 801ccfc:	429a      	cmp	r2, r3
 801ccfe:	d001      	beq.n	801cd04 <find_volume+0x1f0>
 801cd00:	230d      	movs	r3, #13
 801cd02:	e180      	b.n	801d006 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801cd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd06:	3338      	adds	r3, #56	@ 0x38
 801cd08:	3316      	adds	r3, #22
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	f7fd ff32 	bl	801ab74 <ld_word>
 801cd10:	4603      	mov	r3, r0
 801cd12:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801cd14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d106      	bne.n	801cd28 <find_volume+0x214>
 801cd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd1c:	3338      	adds	r3, #56	@ 0x38
 801cd1e:	3324      	adds	r3, #36	@ 0x24
 801cd20:	4618      	mov	r0, r3
 801cd22:	f7fd ff3f 	bl	801aba4 <ld_dword>
 801cd26:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cd2c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801cd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd30:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801cd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd3a:	789b      	ldrb	r3, [r3, #2]
 801cd3c:	2b01      	cmp	r3, #1
 801cd3e:	d005      	beq.n	801cd4c <find_volume+0x238>
 801cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd42:	789b      	ldrb	r3, [r3, #2]
 801cd44:	2b02      	cmp	r3, #2
 801cd46:	d001      	beq.n	801cd4c <find_volume+0x238>
 801cd48:	230d      	movs	r3, #13
 801cd4a:	e15c      	b.n	801d006 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801cd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd4e:	789b      	ldrb	r3, [r3, #2]
 801cd50:	461a      	mov	r2, r3
 801cd52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cd54:	fb02 f303 	mul.w	r3, r2, r3
 801cd58:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801cd60:	461a      	mov	r2, r3
 801cd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801cd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd68:	895b      	ldrh	r3, [r3, #10]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d008      	beq.n	801cd80 <find_volume+0x26c>
 801cd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd70:	895b      	ldrh	r3, [r3, #10]
 801cd72:	461a      	mov	r2, r3
 801cd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd76:	895b      	ldrh	r3, [r3, #10]
 801cd78:	3b01      	subs	r3, #1
 801cd7a:	4013      	ands	r3, r2
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d001      	beq.n	801cd84 <find_volume+0x270>
 801cd80:	230d      	movs	r3, #13
 801cd82:	e140      	b.n	801d006 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801cd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd86:	3338      	adds	r3, #56	@ 0x38
 801cd88:	3311      	adds	r3, #17
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	f7fd fef2 	bl	801ab74 <ld_word>
 801cd90:	4603      	mov	r3, r0
 801cd92:	461a      	mov	r2, r3
 801cd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801cd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd9a:	891b      	ldrh	r3, [r3, #8]
 801cd9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cd9e:	8992      	ldrh	r2, [r2, #12]
 801cda0:	0952      	lsrs	r2, r2, #5
 801cda2:	b292      	uxth	r2, r2
 801cda4:	fbb3 f1f2 	udiv	r1, r3, r2
 801cda8:	fb01 f202 	mul.w	r2, r1, r2
 801cdac:	1a9b      	subs	r3, r3, r2
 801cdae:	b29b      	uxth	r3, r3
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d003      	beq.n	801cdbc <find_volume+0x2a8>
 801cdb4:	230d      	movs	r3, #13
 801cdb6:	e126      	b.n	801d006 <find_volume+0x4f2>
 801cdb8:	240005e8 	.word	0x240005e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801cdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdbe:	3338      	adds	r3, #56	@ 0x38
 801cdc0:	3313      	adds	r3, #19
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f7fd fed6 	bl	801ab74 <ld_word>
 801cdc8:	4603      	mov	r3, r0
 801cdca:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801cdcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d106      	bne.n	801cde0 <find_volume+0x2cc>
 801cdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdd4:	3338      	adds	r3, #56	@ 0x38
 801cdd6:	3320      	adds	r3, #32
 801cdd8:	4618      	mov	r0, r3
 801cdda:	f7fd fee3 	bl	801aba4 <ld_dword>
 801cdde:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801cde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cde2:	3338      	adds	r3, #56	@ 0x38
 801cde4:	330e      	adds	r3, #14
 801cde6:	4618      	mov	r0, r3
 801cde8:	f7fd fec4 	bl	801ab74 <ld_word>
 801cdec:	4603      	mov	r3, r0
 801cdee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801cdf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d101      	bne.n	801cdfa <find_volume+0x2e6>
 801cdf6:	230d      	movs	r3, #13
 801cdf8:	e105      	b.n	801d006 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801cdfa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cdfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cdfe:	4413      	add	r3, r2
 801ce00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce02:	8911      	ldrh	r1, [r2, #8]
 801ce04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce06:	8992      	ldrh	r2, [r2, #12]
 801ce08:	0952      	lsrs	r2, r2, #5
 801ce0a:	b292      	uxth	r2, r2
 801ce0c:	fbb1 f2f2 	udiv	r2, r1, r2
 801ce10:	b292      	uxth	r2, r2
 801ce12:	4413      	add	r3, r2
 801ce14:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801ce16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ce18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce1a:	429a      	cmp	r2, r3
 801ce1c:	d201      	bcs.n	801ce22 <find_volume+0x30e>
 801ce1e:	230d      	movs	r3, #13
 801ce20:	e0f1      	b.n	801d006 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801ce22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ce24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce26:	1ad3      	subs	r3, r2, r3
 801ce28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce2a:	8952      	ldrh	r2, [r2, #10]
 801ce2c:	fbb3 f3f2 	udiv	r3, r3, r2
 801ce30:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801ce32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d101      	bne.n	801ce3c <find_volume+0x328>
 801ce38:	230d      	movs	r3, #13
 801ce3a:	e0e4      	b.n	801d006 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801ce3c:	2303      	movs	r3, #3
 801ce3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801ce42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce44:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801ce48:	4293      	cmp	r3, r2
 801ce4a:	d802      	bhi.n	801ce52 <find_volume+0x33e>
 801ce4c:	2302      	movs	r3, #2
 801ce4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce54:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801ce58:	4293      	cmp	r3, r2
 801ce5a:	d802      	bhi.n	801ce62 <find_volume+0x34e>
 801ce5c:	2301      	movs	r3, #1
 801ce5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801ce62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce64:	1c9a      	adds	r2, r3, #2
 801ce66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce68:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801ce6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ce6e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801ce70:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ce72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ce74:	441a      	add	r2, r3
 801ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce78:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801ce7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ce7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce7e:	441a      	add	r2, r3
 801ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce82:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801ce84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ce88:	2b03      	cmp	r3, #3
 801ce8a:	d11e      	bne.n	801ceca <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801ce8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce8e:	3338      	adds	r3, #56	@ 0x38
 801ce90:	332a      	adds	r3, #42	@ 0x2a
 801ce92:	4618      	mov	r0, r3
 801ce94:	f7fd fe6e 	bl	801ab74 <ld_word>
 801ce98:	4603      	mov	r3, r0
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d001      	beq.n	801cea2 <find_volume+0x38e>
 801ce9e:	230d      	movs	r3, #13
 801cea0:	e0b1      	b.n	801d006 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801cea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cea4:	891b      	ldrh	r3, [r3, #8]
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d001      	beq.n	801ceae <find_volume+0x39a>
 801ceaa:	230d      	movs	r3, #13
 801ceac:	e0ab      	b.n	801d006 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801ceae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceb0:	3338      	adds	r3, #56	@ 0x38
 801ceb2:	332c      	adds	r3, #44	@ 0x2c
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f7fd fe75 	bl	801aba4 <ld_dword>
 801ceba:	4602      	mov	r2, r0
 801cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cebe:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801cec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cec2:	69db      	ldr	r3, [r3, #28]
 801cec4:	009b      	lsls	r3, r3, #2
 801cec6:	647b      	str	r3, [r7, #68]	@ 0x44
 801cec8:	e01f      	b.n	801cf0a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801ceca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cecc:	891b      	ldrh	r3, [r3, #8]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d101      	bne.n	801ced6 <find_volume+0x3c2>
 801ced2:	230d      	movs	r3, #13
 801ced4:	e097      	b.n	801d006 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801ced6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ced8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ceda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cedc:	441a      	add	r2, r3
 801cede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cee0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801cee2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cee6:	2b02      	cmp	r3, #2
 801cee8:	d103      	bne.n	801cef2 <find_volume+0x3de>
 801ceea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceec:	69db      	ldr	r3, [r3, #28]
 801ceee:	005b      	lsls	r3, r3, #1
 801cef0:	e00a      	b.n	801cf08 <find_volume+0x3f4>
 801cef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cef4:	69da      	ldr	r2, [r3, #28]
 801cef6:	4613      	mov	r3, r2
 801cef8:	005b      	lsls	r3, r3, #1
 801cefa:	4413      	add	r3, r2
 801cefc:	085a      	lsrs	r2, r3, #1
 801cefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf00:	69db      	ldr	r3, [r3, #28]
 801cf02:	f003 0301 	and.w	r3, r3, #1
 801cf06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801cf08:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801cf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf0c:	6a1a      	ldr	r2, [r3, #32]
 801cf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf10:	899b      	ldrh	r3, [r3, #12]
 801cf12:	4619      	mov	r1, r3
 801cf14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf16:	440b      	add	r3, r1
 801cf18:	3b01      	subs	r3, #1
 801cf1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cf1c:	8989      	ldrh	r1, [r1, #12]
 801cf1e:	fbb3 f3f1 	udiv	r3, r3, r1
 801cf22:	429a      	cmp	r2, r3
 801cf24:	d201      	bcs.n	801cf2a <find_volume+0x416>
 801cf26:	230d      	movs	r3, #13
 801cf28:	e06d      	b.n	801d006 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801cf2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf2c:	f04f 32ff 	mov.w	r2, #4294967295
 801cf30:	619a      	str	r2, [r3, #24]
 801cf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf34:	699a      	ldr	r2, [r3, #24]
 801cf36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801cf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf3c:	2280      	movs	r2, #128	@ 0x80
 801cf3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801cf40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cf44:	2b03      	cmp	r3, #3
 801cf46:	d149      	bne.n	801cfdc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801cf48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf4a:	3338      	adds	r3, #56	@ 0x38
 801cf4c:	3330      	adds	r3, #48	@ 0x30
 801cf4e:	4618      	mov	r0, r3
 801cf50:	f7fd fe10 	bl	801ab74 <ld_word>
 801cf54:	4603      	mov	r3, r0
 801cf56:	2b01      	cmp	r3, #1
 801cf58:	d140      	bne.n	801cfdc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801cf5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cf5c:	3301      	adds	r3, #1
 801cf5e:	4619      	mov	r1, r3
 801cf60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cf62:	f7fe f8b7 	bl	801b0d4 <move_window>
 801cf66:	4603      	mov	r3, r0
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	d137      	bne.n	801cfdc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801cf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf6e:	2200      	movs	r2, #0
 801cf70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801cf72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf74:	3338      	adds	r3, #56	@ 0x38
 801cf76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cf7a:	4618      	mov	r0, r3
 801cf7c:	f7fd fdfa 	bl	801ab74 <ld_word>
 801cf80:	4603      	mov	r3, r0
 801cf82:	461a      	mov	r2, r3
 801cf84:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cf88:	429a      	cmp	r2, r3
 801cf8a:	d127      	bne.n	801cfdc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801cf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf8e:	3338      	adds	r3, #56	@ 0x38
 801cf90:	4618      	mov	r0, r3
 801cf92:	f7fd fe07 	bl	801aba4 <ld_dword>
 801cf96:	4603      	mov	r3, r0
 801cf98:	4a1d      	ldr	r2, [pc, #116]	@ (801d010 <find_volume+0x4fc>)
 801cf9a:	4293      	cmp	r3, r2
 801cf9c:	d11e      	bne.n	801cfdc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801cf9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfa0:	3338      	adds	r3, #56	@ 0x38
 801cfa2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	f7fd fdfc 	bl	801aba4 <ld_dword>
 801cfac:	4603      	mov	r3, r0
 801cfae:	4a19      	ldr	r2, [pc, #100]	@ (801d014 <find_volume+0x500>)
 801cfb0:	4293      	cmp	r3, r2
 801cfb2:	d113      	bne.n	801cfdc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	3338      	adds	r3, #56	@ 0x38
 801cfb8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	f7fd fdf1 	bl	801aba4 <ld_dword>
 801cfc2:	4602      	mov	r2, r0
 801cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfc6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801cfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfca:	3338      	adds	r3, #56	@ 0x38
 801cfcc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f7fd fde7 	bl	801aba4 <ld_dword>
 801cfd6:	4602      	mov	r2, r0
 801cfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfda:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801cfdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfde:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801cfe2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801cfe4:	4b0c      	ldr	r3, [pc, #48]	@ (801d018 <find_volume+0x504>)
 801cfe6:	881b      	ldrh	r3, [r3, #0]
 801cfe8:	3301      	adds	r3, #1
 801cfea:	b29a      	uxth	r2, r3
 801cfec:	4b0a      	ldr	r3, [pc, #40]	@ (801d018 <find_volume+0x504>)
 801cfee:	801a      	strh	r2, [r3, #0]
 801cff0:	4b09      	ldr	r3, [pc, #36]	@ (801d018 <find_volume+0x504>)
 801cff2:	881a      	ldrh	r2, [r3, #0]
 801cff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cff6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801cff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cffa:	4a08      	ldr	r2, [pc, #32]	@ (801d01c <find_volume+0x508>)
 801cffc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801cffe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d000:	f7fe f800 	bl	801b004 <clear_lock>
#endif
	return FR_OK;
 801d004:	2300      	movs	r3, #0
}
 801d006:	4618      	mov	r0, r3
 801d008:	3758      	adds	r7, #88	@ 0x58
 801d00a:	46bd      	mov	sp, r7
 801d00c:	bd80      	pop	{r7, pc}
 801d00e:	bf00      	nop
 801d010:	41615252 	.word	0x41615252
 801d014:	61417272 	.word	0x61417272
 801d018:	240005ec 	.word	0x240005ec
 801d01c:	24000600 	.word	0x24000600

0801d020 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d020:	b580      	push	{r7, lr}
 801d022:	b084      	sub	sp, #16
 801d024:	af00      	add	r7, sp, #0
 801d026:	6078      	str	r0, [r7, #4]
 801d028:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d02a:	2309      	movs	r3, #9
 801d02c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	2b00      	cmp	r3, #0
 801d032:	d01c      	beq.n	801d06e <validate+0x4e>
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d018      	beq.n	801d06e <validate+0x4e>
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	781b      	ldrb	r3, [r3, #0]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d013      	beq.n	801d06e <validate+0x4e>
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	889a      	ldrh	r2, [r3, #4]
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	88db      	ldrh	r3, [r3, #6]
 801d050:	429a      	cmp	r2, r3
 801d052:	d10c      	bne.n	801d06e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	785b      	ldrb	r3, [r3, #1]
 801d05a:	4618      	mov	r0, r3
 801d05c:	f7fd fcea 	bl	801aa34 <disk_status>
 801d060:	4603      	mov	r3, r0
 801d062:	f003 0301 	and.w	r3, r3, #1
 801d066:	2b00      	cmp	r3, #0
 801d068:	d101      	bne.n	801d06e <validate+0x4e>
			res = FR_OK;
 801d06a:	2300      	movs	r3, #0
 801d06c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d06e:	7bfb      	ldrb	r3, [r7, #15]
 801d070:	2b00      	cmp	r3, #0
 801d072:	d102      	bne.n	801d07a <validate+0x5a>
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	e000      	b.n	801d07c <validate+0x5c>
 801d07a:	2300      	movs	r3, #0
 801d07c:	683a      	ldr	r2, [r7, #0]
 801d07e:	6013      	str	r3, [r2, #0]
	return res;
 801d080:	7bfb      	ldrb	r3, [r7, #15]
}
 801d082:	4618      	mov	r0, r3
 801d084:	3710      	adds	r7, #16
 801d086:	46bd      	mov	sp, r7
 801d088:	bd80      	pop	{r7, pc}
	...

0801d08c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d08c:	b580      	push	{r7, lr}
 801d08e:	b088      	sub	sp, #32
 801d090:	af00      	add	r7, sp, #0
 801d092:	60f8      	str	r0, [r7, #12]
 801d094:	60b9      	str	r1, [r7, #8]
 801d096:	4613      	mov	r3, r2
 801d098:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d09a:	68bb      	ldr	r3, [r7, #8]
 801d09c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d09e:	f107 0310 	add.w	r3, r7, #16
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f7ff fc9c 	bl	801c9e0 <get_ldnumber>
 801d0a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d0aa:	69fb      	ldr	r3, [r7, #28]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	da01      	bge.n	801d0b4 <f_mount+0x28>
 801d0b0:	230b      	movs	r3, #11
 801d0b2:	e02b      	b.n	801d10c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d0b4:	4a17      	ldr	r2, [pc, #92]	@ (801d114 <f_mount+0x88>)
 801d0b6:	69fb      	ldr	r3, [r7, #28]
 801d0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d0bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d0be:	69bb      	ldr	r3, [r7, #24]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d005      	beq.n	801d0d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d0c4:	69b8      	ldr	r0, [r7, #24]
 801d0c6:	f7fd ff9d 	bl	801b004 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d0ca:	69bb      	ldr	r3, [r7, #24]
 801d0cc:	2200      	movs	r2, #0
 801d0ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d002      	beq.n	801d0dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d0d6:	68fb      	ldr	r3, [r7, #12]
 801d0d8:	2200      	movs	r2, #0
 801d0da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d0dc:	68fa      	ldr	r2, [r7, #12]
 801d0de:	490d      	ldr	r1, [pc, #52]	@ (801d114 <f_mount+0x88>)
 801d0e0:	69fb      	ldr	r3, [r7, #28]
 801d0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d002      	beq.n	801d0f2 <f_mount+0x66>
 801d0ec:	79fb      	ldrb	r3, [r7, #7]
 801d0ee:	2b01      	cmp	r3, #1
 801d0f0:	d001      	beq.n	801d0f6 <f_mount+0x6a>
 801d0f2:	2300      	movs	r3, #0
 801d0f4:	e00a      	b.n	801d10c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d0f6:	f107 010c 	add.w	r1, r7, #12
 801d0fa:	f107 0308 	add.w	r3, r7, #8
 801d0fe:	2200      	movs	r2, #0
 801d100:	4618      	mov	r0, r3
 801d102:	f7ff fd07 	bl	801cb14 <find_volume>
 801d106:	4603      	mov	r3, r0
 801d108:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d10a:	7dfb      	ldrb	r3, [r7, #23]
}
 801d10c:	4618      	mov	r0, r3
 801d10e:	3720      	adds	r7, #32
 801d110:	46bd      	mov	sp, r7
 801d112:	bd80      	pop	{r7, pc}
 801d114:	240005e8 	.word	0x240005e8

0801d118 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	b09a      	sub	sp, #104	@ 0x68
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	60f8      	str	r0, [r7, #12]
 801d120:	60b9      	str	r1, [r7, #8]
 801d122:	4613      	mov	r3, r2
 801d124:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d126:	68fb      	ldr	r3, [r7, #12]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d101      	bne.n	801d130 <f_open+0x18>
 801d12c:	2309      	movs	r3, #9
 801d12e:	e1b7      	b.n	801d4a0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d130:	79fb      	ldrb	r3, [r7, #7]
 801d132:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d136:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d138:	79fa      	ldrb	r2, [r7, #7]
 801d13a:	f107 0114 	add.w	r1, r7, #20
 801d13e:	f107 0308 	add.w	r3, r7, #8
 801d142:	4618      	mov	r0, r3
 801d144:	f7ff fce6 	bl	801cb14 <find_volume>
 801d148:	4603      	mov	r3, r0
 801d14a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d14e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d152:	2b00      	cmp	r3, #0
 801d154:	f040 819b 	bne.w	801d48e <f_open+0x376>
		dj.obj.fs = fs;
 801d158:	697b      	ldr	r3, [r7, #20]
 801d15a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d15c:	68ba      	ldr	r2, [r7, #8]
 801d15e:	f107 0318 	add.w	r3, r7, #24
 801d162:	4611      	mov	r1, r2
 801d164:	4618      	mov	r0, r3
 801d166:	f7ff fbc5 	bl	801c8f4 <follow_path>
 801d16a:	4603      	mov	r3, r0
 801d16c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d170:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d174:	2b00      	cmp	r3, #0
 801d176:	d118      	bne.n	801d1aa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d178:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d17c:	b25b      	sxtb	r3, r3
 801d17e:	2b00      	cmp	r3, #0
 801d180:	da03      	bge.n	801d18a <f_open+0x72>
				res = FR_INVALID_NAME;
 801d182:	2306      	movs	r3, #6
 801d184:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d188:	e00f      	b.n	801d1aa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d18a:	79fb      	ldrb	r3, [r7, #7]
 801d18c:	2b01      	cmp	r3, #1
 801d18e:	bf8c      	ite	hi
 801d190:	2301      	movhi	r3, #1
 801d192:	2300      	movls	r3, #0
 801d194:	b2db      	uxtb	r3, r3
 801d196:	461a      	mov	r2, r3
 801d198:	f107 0318 	add.w	r3, r7, #24
 801d19c:	4611      	mov	r1, r2
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f7fd fde8 	bl	801ad74 <chk_lock>
 801d1a4:	4603      	mov	r3, r0
 801d1a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d1aa:	79fb      	ldrb	r3, [r7, #7]
 801d1ac:	f003 031c 	and.w	r3, r3, #28
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d07f      	beq.n	801d2b4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d1b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d017      	beq.n	801d1ec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d1bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d1c0:	2b04      	cmp	r3, #4
 801d1c2:	d10e      	bne.n	801d1e2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d1c4:	f7fd fe32 	bl	801ae2c <enq_lock>
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d006      	beq.n	801d1dc <f_open+0xc4>
 801d1ce:	f107 0318 	add.w	r3, r7, #24
 801d1d2:	4618      	mov	r0, r3
 801d1d4:	f7ff f894 	bl	801c300 <dir_register>
 801d1d8:	4603      	mov	r3, r0
 801d1da:	e000      	b.n	801d1de <f_open+0xc6>
 801d1dc:	2312      	movs	r3, #18
 801d1de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d1e2:	79fb      	ldrb	r3, [r7, #7]
 801d1e4:	f043 0308 	orr.w	r3, r3, #8
 801d1e8:	71fb      	strb	r3, [r7, #7]
 801d1ea:	e010      	b.n	801d20e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d1ec:	7fbb      	ldrb	r3, [r7, #30]
 801d1ee:	f003 0311 	and.w	r3, r3, #17
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d003      	beq.n	801d1fe <f_open+0xe6>
					res = FR_DENIED;
 801d1f6:	2307      	movs	r3, #7
 801d1f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d1fc:	e007      	b.n	801d20e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d1fe:	79fb      	ldrb	r3, [r7, #7]
 801d200:	f003 0304 	and.w	r3, r3, #4
 801d204:	2b00      	cmp	r3, #0
 801d206:	d002      	beq.n	801d20e <f_open+0xf6>
 801d208:	2308      	movs	r3, #8
 801d20a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d20e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d212:	2b00      	cmp	r3, #0
 801d214:	d168      	bne.n	801d2e8 <f_open+0x1d0>
 801d216:	79fb      	ldrb	r3, [r7, #7]
 801d218:	f003 0308 	and.w	r3, r3, #8
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d063      	beq.n	801d2e8 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d220:	f7fd fbaa 	bl	801a978 <get_fattime>
 801d224:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d228:	330e      	adds	r3, #14
 801d22a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d22c:	4618      	mov	r0, r3
 801d22e:	f7fd fcf7 	bl	801ac20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d234:	3316      	adds	r3, #22
 801d236:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d238:	4618      	mov	r0, r3
 801d23a:	f7fd fcf1 	bl	801ac20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d240:	330b      	adds	r3, #11
 801d242:	2220      	movs	r2, #32
 801d244:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d246:	697b      	ldr	r3, [r7, #20]
 801d248:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d24a:	4611      	mov	r1, r2
 801d24c:	4618      	mov	r0, r3
 801d24e:	f7fe fcc6 	bl	801bbde <ld_clust>
 801d252:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d254:	697b      	ldr	r3, [r7, #20]
 801d256:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d258:	2200      	movs	r2, #0
 801d25a:	4618      	mov	r0, r3
 801d25c:	f7fe fcde 	bl	801bc1c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d262:	331c      	adds	r3, #28
 801d264:	2100      	movs	r1, #0
 801d266:	4618      	mov	r0, r3
 801d268:	f7fd fcda 	bl	801ac20 <st_dword>
					fs->wflag = 1;
 801d26c:	697b      	ldr	r3, [r7, #20]
 801d26e:	2201      	movs	r2, #1
 801d270:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d274:	2b00      	cmp	r3, #0
 801d276:	d037      	beq.n	801d2e8 <f_open+0x1d0>
						dw = fs->winsect;
 801d278:	697b      	ldr	r3, [r7, #20]
 801d27a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d27c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d27e:	f107 0318 	add.w	r3, r7, #24
 801d282:	2200      	movs	r2, #0
 801d284:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d286:	4618      	mov	r0, r3
 801d288:	f7fe f9ce 	bl	801b628 <remove_chain>
 801d28c:	4603      	mov	r3, r0
 801d28e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d292:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d296:	2b00      	cmp	r3, #0
 801d298:	d126      	bne.n	801d2e8 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d29a:	697b      	ldr	r3, [r7, #20]
 801d29c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d29e:	4618      	mov	r0, r3
 801d2a0:	f7fd ff18 	bl	801b0d4 <move_window>
 801d2a4:	4603      	mov	r3, r0
 801d2a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d2aa:	697b      	ldr	r3, [r7, #20]
 801d2ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d2ae:	3a01      	subs	r2, #1
 801d2b0:	615a      	str	r2, [r3, #20]
 801d2b2:	e019      	b.n	801d2e8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d2b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d115      	bne.n	801d2e8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d2bc:	7fbb      	ldrb	r3, [r7, #30]
 801d2be:	f003 0310 	and.w	r3, r3, #16
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d003      	beq.n	801d2ce <f_open+0x1b6>
					res = FR_NO_FILE;
 801d2c6:	2304      	movs	r3, #4
 801d2c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d2cc:	e00c      	b.n	801d2e8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d2ce:	79fb      	ldrb	r3, [r7, #7]
 801d2d0:	f003 0302 	and.w	r3, r3, #2
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d007      	beq.n	801d2e8 <f_open+0x1d0>
 801d2d8:	7fbb      	ldrb	r3, [r7, #30]
 801d2da:	f003 0301 	and.w	r3, r3, #1
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d002      	beq.n	801d2e8 <f_open+0x1d0>
						res = FR_DENIED;
 801d2e2:	2307      	movs	r3, #7
 801d2e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d2e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d126      	bne.n	801d33e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d2f0:	79fb      	ldrb	r3, [r7, #7]
 801d2f2:	f003 0308 	and.w	r3, r3, #8
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	d003      	beq.n	801d302 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d2fa:	79fb      	ldrb	r3, [r7, #7]
 801d2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d300:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d302:	697b      	ldr	r3, [r7, #20]
 801d304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d30a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d310:	79fb      	ldrb	r3, [r7, #7]
 801d312:	2b01      	cmp	r3, #1
 801d314:	bf8c      	ite	hi
 801d316:	2301      	movhi	r3, #1
 801d318:	2300      	movls	r3, #0
 801d31a:	b2db      	uxtb	r3, r3
 801d31c:	461a      	mov	r2, r3
 801d31e:	f107 0318 	add.w	r3, r7, #24
 801d322:	4611      	mov	r1, r2
 801d324:	4618      	mov	r0, r3
 801d326:	f7fd fda3 	bl	801ae70 <inc_lock>
 801d32a:	4602      	mov	r2, r0
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	691b      	ldr	r3, [r3, #16]
 801d334:	2b00      	cmp	r3, #0
 801d336:	d102      	bne.n	801d33e <f_open+0x226>
 801d338:	2302      	movs	r3, #2
 801d33a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d33e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d342:	2b00      	cmp	r3, #0
 801d344:	f040 80a3 	bne.w	801d48e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d348:	697b      	ldr	r3, [r7, #20]
 801d34a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d34c:	4611      	mov	r1, r2
 801d34e:	4618      	mov	r0, r3
 801d350:	f7fe fc45 	bl	801bbde <ld_clust>
 801d354:	4602      	mov	r2, r0
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d35c:	331c      	adds	r3, #28
 801d35e:	4618      	mov	r0, r3
 801d360:	f7fd fc20 	bl	801aba4 <ld_dword>
 801d364:	4602      	mov	r2, r0
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	2200      	movs	r2, #0
 801d36e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d370:	697a      	ldr	r2, [r7, #20]
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d376:	697b      	ldr	r3, [r7, #20]
 801d378:	88da      	ldrh	r2, [r3, #6]
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	79fa      	ldrb	r2, [r7, #7]
 801d382:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	2200      	movs	r2, #0
 801d388:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d38a:	68fb      	ldr	r3, [r7, #12]
 801d38c:	2200      	movs	r2, #0
 801d38e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	2200      	movs	r2, #0
 801d394:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	3330      	adds	r3, #48	@ 0x30
 801d39a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d39e:	2100      	movs	r1, #0
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	f7fd fc8a 	bl	801acba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d3a6:	79fb      	ldrb	r3, [r7, #7]
 801d3a8:	f003 0320 	and.w	r3, r3, #32
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d06e      	beq.n	801d48e <f_open+0x376>
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	68db      	ldr	r3, [r3, #12]
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d06a      	beq.n	801d48e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	68da      	ldr	r2, [r3, #12]
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d3c0:	697b      	ldr	r3, [r7, #20]
 801d3c2:	895b      	ldrh	r3, [r3, #10]
 801d3c4:	461a      	mov	r2, r3
 801d3c6:	697b      	ldr	r3, [r7, #20]
 801d3c8:	899b      	ldrh	r3, [r3, #12]
 801d3ca:	fb02 f303 	mul.w	r3, r2, r3
 801d3ce:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	689b      	ldr	r3, [r3, #8]
 801d3d4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	68db      	ldr	r3, [r3, #12]
 801d3da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d3dc:	e016      	b.n	801d40c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	f7fd ff33 	bl	801b24e <get_fat>
 801d3e8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d3ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d3ec:	2b01      	cmp	r3, #1
 801d3ee:	d802      	bhi.n	801d3f6 <f_open+0x2de>
 801d3f0:	2302      	movs	r3, #2
 801d3f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d3f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3fc:	d102      	bne.n	801d404 <f_open+0x2ec>
 801d3fe:	2301      	movs	r3, #1
 801d400:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d404:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d408:	1ad3      	subs	r3, r2, r3
 801d40a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d40c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d410:	2b00      	cmp	r3, #0
 801d412:	d103      	bne.n	801d41c <f_open+0x304>
 801d414:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d418:	429a      	cmp	r2, r3
 801d41a:	d8e0      	bhi.n	801d3de <f_open+0x2c6>
				}
				fp->clust = clst;
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d420:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d422:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d426:	2b00      	cmp	r3, #0
 801d428:	d131      	bne.n	801d48e <f_open+0x376>
 801d42a:	697b      	ldr	r3, [r7, #20]
 801d42c:	899b      	ldrh	r3, [r3, #12]
 801d42e:	461a      	mov	r2, r3
 801d430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d432:	fbb3 f1f2 	udiv	r1, r3, r2
 801d436:	fb01 f202 	mul.w	r2, r1, r2
 801d43a:	1a9b      	subs	r3, r3, r2
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d026      	beq.n	801d48e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d440:	697b      	ldr	r3, [r7, #20]
 801d442:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d444:	4618      	mov	r0, r3
 801d446:	f7fd fee3 	bl	801b210 <clust2sect>
 801d44a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d44c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d103      	bne.n	801d45a <f_open+0x342>
						res = FR_INT_ERR;
 801d452:	2302      	movs	r3, #2
 801d454:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d458:	e019      	b.n	801d48e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d45a:	697b      	ldr	r3, [r7, #20]
 801d45c:	899b      	ldrh	r3, [r3, #12]
 801d45e:	461a      	mov	r2, r3
 801d460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d462:	fbb3 f2f2 	udiv	r2, r3, r2
 801d466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d468:	441a      	add	r2, r3
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d46e:	697b      	ldr	r3, [r7, #20]
 801d470:	7858      	ldrb	r0, [r3, #1]
 801d472:	68fb      	ldr	r3, [r7, #12]
 801d474:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	6a1a      	ldr	r2, [r3, #32]
 801d47c:	2301      	movs	r3, #1
 801d47e:	f7fd fb1b 	bl	801aab8 <disk_read>
 801d482:	4603      	mov	r3, r0
 801d484:	2b00      	cmp	r3, #0
 801d486:	d002      	beq.n	801d48e <f_open+0x376>
 801d488:	2301      	movs	r3, #1
 801d48a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d48e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d492:	2b00      	cmp	r3, #0
 801d494:	d002      	beq.n	801d49c <f_open+0x384>
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	2200      	movs	r2, #0
 801d49a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d49c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	3768      	adds	r7, #104	@ 0x68
 801d4a4:	46bd      	mov	sp, r7
 801d4a6:	bd80      	pop	{r7, pc}

0801d4a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d4a8:	b580      	push	{r7, lr}
 801d4aa:	b08c      	sub	sp, #48	@ 0x30
 801d4ac:	af00      	add	r7, sp, #0
 801d4ae:	60f8      	str	r0, [r7, #12]
 801d4b0:	60b9      	str	r1, [r7, #8]
 801d4b2:	607a      	str	r2, [r7, #4]
 801d4b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d4b6:	68bb      	ldr	r3, [r7, #8]
 801d4b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d4ba:	683b      	ldr	r3, [r7, #0]
 801d4bc:	2200      	movs	r2, #0
 801d4be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	f107 0210 	add.w	r2, r7, #16
 801d4c6:	4611      	mov	r1, r2
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7ff fda9 	bl	801d020 <validate>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d4d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d107      	bne.n	801d4ec <f_write+0x44>
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	7d5b      	ldrb	r3, [r3, #21]
 801d4e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d4e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d002      	beq.n	801d4f2 <f_write+0x4a>
 801d4ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d4f0:	e16a      	b.n	801d7c8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	7d1b      	ldrb	r3, [r3, #20]
 801d4f6:	f003 0302 	and.w	r3, r3, #2
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d101      	bne.n	801d502 <f_write+0x5a>
 801d4fe:	2307      	movs	r3, #7
 801d500:	e162      	b.n	801d7c8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	699a      	ldr	r2, [r3, #24]
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	441a      	add	r2, r3
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	699b      	ldr	r3, [r3, #24]
 801d50e:	429a      	cmp	r2, r3
 801d510:	f080 814c 	bcs.w	801d7ac <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d514:	68fb      	ldr	r3, [r7, #12]
 801d516:	699b      	ldr	r3, [r3, #24]
 801d518:	43db      	mvns	r3, r3
 801d51a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d51c:	e146      	b.n	801d7ac <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	699b      	ldr	r3, [r3, #24]
 801d522:	693a      	ldr	r2, [r7, #16]
 801d524:	8992      	ldrh	r2, [r2, #12]
 801d526:	fbb3 f1f2 	udiv	r1, r3, r2
 801d52a:	fb01 f202 	mul.w	r2, r1, r2
 801d52e:	1a9b      	subs	r3, r3, r2
 801d530:	2b00      	cmp	r3, #0
 801d532:	f040 80f1 	bne.w	801d718 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	699b      	ldr	r3, [r3, #24]
 801d53a:	693a      	ldr	r2, [r7, #16]
 801d53c:	8992      	ldrh	r2, [r2, #12]
 801d53e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d542:	693a      	ldr	r2, [r7, #16]
 801d544:	8952      	ldrh	r2, [r2, #10]
 801d546:	3a01      	subs	r2, #1
 801d548:	4013      	ands	r3, r2
 801d54a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d54c:	69bb      	ldr	r3, [r7, #24]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d143      	bne.n	801d5da <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	699b      	ldr	r3, [r3, #24]
 801d556:	2b00      	cmp	r3, #0
 801d558:	d10c      	bne.n	801d574 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d55a:	68fb      	ldr	r3, [r7, #12]
 801d55c:	689b      	ldr	r3, [r3, #8]
 801d55e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d562:	2b00      	cmp	r3, #0
 801d564:	d11a      	bne.n	801d59c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d566:	68fb      	ldr	r3, [r7, #12]
 801d568:	2100      	movs	r1, #0
 801d56a:	4618      	mov	r0, r3
 801d56c:	f7fe f8c1 	bl	801b6f2 <create_chain>
 801d570:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d572:	e013      	b.n	801d59c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d007      	beq.n	801d58c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	699b      	ldr	r3, [r3, #24]
 801d580:	4619      	mov	r1, r3
 801d582:	68f8      	ldr	r0, [r7, #12]
 801d584:	f7fe f94d 	bl	801b822 <clmt_clust>
 801d588:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d58a:	e007      	b.n	801d59c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d58c:	68fa      	ldr	r2, [r7, #12]
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	69db      	ldr	r3, [r3, #28]
 801d592:	4619      	mov	r1, r3
 801d594:	4610      	mov	r0, r2
 801d596:	f7fe f8ac 	bl	801b6f2 <create_chain>
 801d59a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	f000 8109 	beq.w	801d7b6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5a6:	2b01      	cmp	r3, #1
 801d5a8:	d104      	bne.n	801d5b4 <f_write+0x10c>
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	2202      	movs	r2, #2
 801d5ae:	755a      	strb	r2, [r3, #21]
 801d5b0:	2302      	movs	r3, #2
 801d5b2:	e109      	b.n	801d7c8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d5ba:	d104      	bne.n	801d5c6 <f_write+0x11e>
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	2201      	movs	r2, #1
 801d5c0:	755a      	strb	r2, [r3, #21]
 801d5c2:	2301      	movs	r3, #1
 801d5c4:	e100      	b.n	801d7c8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d5ca:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	689b      	ldr	r3, [r3, #8]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d102      	bne.n	801d5da <f_write+0x132>
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d5d8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	7d1b      	ldrb	r3, [r3, #20]
 801d5de:	b25b      	sxtb	r3, r3
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	da18      	bge.n	801d616 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d5e4:	693b      	ldr	r3, [r7, #16]
 801d5e6:	7858      	ldrb	r0, [r3, #1]
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	6a1a      	ldr	r2, [r3, #32]
 801d5f2:	2301      	movs	r3, #1
 801d5f4:	f7fd fa80 	bl	801aaf8 <disk_write>
 801d5f8:	4603      	mov	r3, r0
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d004      	beq.n	801d608 <f_write+0x160>
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	2201      	movs	r2, #1
 801d602:	755a      	strb	r2, [r3, #21]
 801d604:	2301      	movs	r3, #1
 801d606:	e0df      	b.n	801d7c8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d608:	68fb      	ldr	r3, [r7, #12]
 801d60a:	7d1b      	ldrb	r3, [r3, #20]
 801d60c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d610:	b2da      	uxtb	r2, r3
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d616:	693a      	ldr	r2, [r7, #16]
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	69db      	ldr	r3, [r3, #28]
 801d61c:	4619      	mov	r1, r3
 801d61e:	4610      	mov	r0, r2
 801d620:	f7fd fdf6 	bl	801b210 <clust2sect>
 801d624:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d626:	697b      	ldr	r3, [r7, #20]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d104      	bne.n	801d636 <f_write+0x18e>
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	2202      	movs	r2, #2
 801d630:	755a      	strb	r2, [r3, #21]
 801d632:	2302      	movs	r3, #2
 801d634:	e0c8      	b.n	801d7c8 <f_write+0x320>
			sect += csect;
 801d636:	697a      	ldr	r2, [r7, #20]
 801d638:	69bb      	ldr	r3, [r7, #24]
 801d63a:	4413      	add	r3, r2
 801d63c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d63e:	693b      	ldr	r3, [r7, #16]
 801d640:	899b      	ldrh	r3, [r3, #12]
 801d642:	461a      	mov	r2, r3
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	fbb3 f3f2 	udiv	r3, r3, r2
 801d64a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d64c:	6a3b      	ldr	r3, [r7, #32]
 801d64e:	2b00      	cmp	r3, #0
 801d650:	d043      	beq.n	801d6da <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d652:	69ba      	ldr	r2, [r7, #24]
 801d654:	6a3b      	ldr	r3, [r7, #32]
 801d656:	4413      	add	r3, r2
 801d658:	693a      	ldr	r2, [r7, #16]
 801d65a:	8952      	ldrh	r2, [r2, #10]
 801d65c:	4293      	cmp	r3, r2
 801d65e:	d905      	bls.n	801d66c <f_write+0x1c4>
					cc = fs->csize - csect;
 801d660:	693b      	ldr	r3, [r7, #16]
 801d662:	895b      	ldrh	r3, [r3, #10]
 801d664:	461a      	mov	r2, r3
 801d666:	69bb      	ldr	r3, [r7, #24]
 801d668:	1ad3      	subs	r3, r2, r3
 801d66a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d66c:	693b      	ldr	r3, [r7, #16]
 801d66e:	7858      	ldrb	r0, [r3, #1]
 801d670:	6a3b      	ldr	r3, [r7, #32]
 801d672:	697a      	ldr	r2, [r7, #20]
 801d674:	69f9      	ldr	r1, [r7, #28]
 801d676:	f7fd fa3f 	bl	801aaf8 <disk_write>
 801d67a:	4603      	mov	r3, r0
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d004      	beq.n	801d68a <f_write+0x1e2>
 801d680:	68fb      	ldr	r3, [r7, #12]
 801d682:	2201      	movs	r2, #1
 801d684:	755a      	strb	r2, [r3, #21]
 801d686:	2301      	movs	r3, #1
 801d688:	e09e      	b.n	801d7c8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	6a1a      	ldr	r2, [r3, #32]
 801d68e:	697b      	ldr	r3, [r7, #20]
 801d690:	1ad3      	subs	r3, r2, r3
 801d692:	6a3a      	ldr	r2, [r7, #32]
 801d694:	429a      	cmp	r2, r3
 801d696:	d918      	bls.n	801d6ca <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	6a1a      	ldr	r2, [r3, #32]
 801d6a2:	697b      	ldr	r3, [r7, #20]
 801d6a4:	1ad3      	subs	r3, r2, r3
 801d6a6:	693a      	ldr	r2, [r7, #16]
 801d6a8:	8992      	ldrh	r2, [r2, #12]
 801d6aa:	fb02 f303 	mul.w	r3, r2, r3
 801d6ae:	69fa      	ldr	r2, [r7, #28]
 801d6b0:	18d1      	adds	r1, r2, r3
 801d6b2:	693b      	ldr	r3, [r7, #16]
 801d6b4:	899b      	ldrh	r3, [r3, #12]
 801d6b6:	461a      	mov	r2, r3
 801d6b8:	f7fd fade 	bl	801ac78 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d6bc:	68fb      	ldr	r3, [r7, #12]
 801d6be:	7d1b      	ldrb	r3, [r3, #20]
 801d6c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d6c4:	b2da      	uxtb	r2, r3
 801d6c6:	68fb      	ldr	r3, [r7, #12]
 801d6c8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d6ca:	693b      	ldr	r3, [r7, #16]
 801d6cc:	899b      	ldrh	r3, [r3, #12]
 801d6ce:	461a      	mov	r2, r3
 801d6d0:	6a3b      	ldr	r3, [r7, #32]
 801d6d2:	fb02 f303 	mul.w	r3, r2, r3
 801d6d6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d6d8:	e04b      	b.n	801d772 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	6a1b      	ldr	r3, [r3, #32]
 801d6de:	697a      	ldr	r2, [r7, #20]
 801d6e0:	429a      	cmp	r2, r3
 801d6e2:	d016      	beq.n	801d712 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	699a      	ldr	r2, [r3, #24]
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d6ec:	429a      	cmp	r2, r3
 801d6ee:	d210      	bcs.n	801d712 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d6f0:	693b      	ldr	r3, [r7, #16]
 801d6f2:	7858      	ldrb	r0, [r3, #1]
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d6fa:	2301      	movs	r3, #1
 801d6fc:	697a      	ldr	r2, [r7, #20]
 801d6fe:	f7fd f9db 	bl	801aab8 <disk_read>
 801d702:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d704:	2b00      	cmp	r3, #0
 801d706:	d004      	beq.n	801d712 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	2201      	movs	r2, #1
 801d70c:	755a      	strb	r2, [r3, #21]
 801d70e:	2301      	movs	r3, #1
 801d710:	e05a      	b.n	801d7c8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	697a      	ldr	r2, [r7, #20]
 801d716:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d718:	693b      	ldr	r3, [r7, #16]
 801d71a:	899b      	ldrh	r3, [r3, #12]
 801d71c:	4618      	mov	r0, r3
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	699b      	ldr	r3, [r3, #24]
 801d722:	693a      	ldr	r2, [r7, #16]
 801d724:	8992      	ldrh	r2, [r2, #12]
 801d726:	fbb3 f1f2 	udiv	r1, r3, r2
 801d72a:	fb01 f202 	mul.w	r2, r1, r2
 801d72e:	1a9b      	subs	r3, r3, r2
 801d730:	1ac3      	subs	r3, r0, r3
 801d732:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	429a      	cmp	r2, r3
 801d73a:	d901      	bls.n	801d740 <f_write+0x298>
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	699b      	ldr	r3, [r3, #24]
 801d74a:	693a      	ldr	r2, [r7, #16]
 801d74c:	8992      	ldrh	r2, [r2, #12]
 801d74e:	fbb3 f0f2 	udiv	r0, r3, r2
 801d752:	fb00 f202 	mul.w	r2, r0, r2
 801d756:	1a9b      	subs	r3, r3, r2
 801d758:	440b      	add	r3, r1
 801d75a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d75c:	69f9      	ldr	r1, [r7, #28]
 801d75e:	4618      	mov	r0, r3
 801d760:	f7fd fa8a 	bl	801ac78 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	7d1b      	ldrb	r3, [r3, #20]
 801d768:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d76c:	b2da      	uxtb	r2, r3
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d772:	69fa      	ldr	r2, [r7, #28]
 801d774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d776:	4413      	add	r3, r2
 801d778:	61fb      	str	r3, [r7, #28]
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	699a      	ldr	r2, [r3, #24]
 801d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d780:	441a      	add	r2, r3
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	619a      	str	r2, [r3, #24]
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	68da      	ldr	r2, [r3, #12]
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	699b      	ldr	r3, [r3, #24]
 801d78e:	429a      	cmp	r2, r3
 801d790:	bf38      	it	cc
 801d792:	461a      	movcc	r2, r3
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	60da      	str	r2, [r3, #12]
 801d798:	683b      	ldr	r3, [r7, #0]
 801d79a:	681a      	ldr	r2, [r3, #0]
 801d79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d79e:	441a      	add	r2, r3
 801d7a0:	683b      	ldr	r3, [r7, #0]
 801d7a2:	601a      	str	r2, [r3, #0]
 801d7a4:	687a      	ldr	r2, [r7, #4]
 801d7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7a8:	1ad3      	subs	r3, r2, r3
 801d7aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	f47f aeb5 	bne.w	801d51e <f_write+0x76>
 801d7b4:	e000      	b.n	801d7b8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d7b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	7d1b      	ldrb	r3, [r3, #20]
 801d7bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d7c0:	b2da      	uxtb	r2, r3
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d7c6:	2300      	movs	r3, #0
}
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	3730      	adds	r7, #48	@ 0x30
 801d7cc:	46bd      	mov	sp, r7
 801d7ce:	bd80      	pop	{r7, pc}

0801d7d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d7d0:	b580      	push	{r7, lr}
 801d7d2:	b086      	sub	sp, #24
 801d7d4:	af00      	add	r7, sp, #0
 801d7d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	f107 0208 	add.w	r2, r7, #8
 801d7de:	4611      	mov	r1, r2
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	f7ff fc1d 	bl	801d020 <validate>
 801d7e6:	4603      	mov	r3, r0
 801d7e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d7ea:	7dfb      	ldrb	r3, [r7, #23]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d168      	bne.n	801d8c2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	7d1b      	ldrb	r3, [r3, #20]
 801d7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d062      	beq.n	801d8c2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	7d1b      	ldrb	r3, [r3, #20]
 801d800:	b25b      	sxtb	r3, r3
 801d802:	2b00      	cmp	r3, #0
 801d804:	da15      	bge.n	801d832 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d806:	68bb      	ldr	r3, [r7, #8]
 801d808:	7858      	ldrb	r0, [r3, #1]
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	6a1a      	ldr	r2, [r3, #32]
 801d814:	2301      	movs	r3, #1
 801d816:	f7fd f96f 	bl	801aaf8 <disk_write>
 801d81a:	4603      	mov	r3, r0
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d001      	beq.n	801d824 <f_sync+0x54>
 801d820:	2301      	movs	r3, #1
 801d822:	e04f      	b.n	801d8c4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	7d1b      	ldrb	r3, [r3, #20]
 801d828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d82c:	b2da      	uxtb	r2, r3
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d832:	f7fd f8a1 	bl	801a978 <get_fattime>
 801d836:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d838:	68ba      	ldr	r2, [r7, #8]
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d83e:	4619      	mov	r1, r3
 801d840:	4610      	mov	r0, r2
 801d842:	f7fd fc47 	bl	801b0d4 <move_window>
 801d846:	4603      	mov	r3, r0
 801d848:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d84a:	7dfb      	ldrb	r3, [r7, #23]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d138      	bne.n	801d8c2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d854:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d856:	68fb      	ldr	r3, [r7, #12]
 801d858:	330b      	adds	r3, #11
 801d85a:	781a      	ldrb	r2, [r3, #0]
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	330b      	adds	r3, #11
 801d860:	f042 0220 	orr.w	r2, r2, #32
 801d864:	b2d2      	uxtb	r2, r2
 801d866:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	6818      	ldr	r0, [r3, #0]
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	689b      	ldr	r3, [r3, #8]
 801d870:	461a      	mov	r2, r3
 801d872:	68f9      	ldr	r1, [r7, #12]
 801d874:	f7fe f9d2 	bl	801bc1c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	f103 021c 	add.w	r2, r3, #28
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	68db      	ldr	r3, [r3, #12]
 801d882:	4619      	mov	r1, r3
 801d884:	4610      	mov	r0, r2
 801d886:	f7fd f9cb 	bl	801ac20 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	3316      	adds	r3, #22
 801d88e:	6939      	ldr	r1, [r7, #16]
 801d890:	4618      	mov	r0, r3
 801d892:	f7fd f9c5 	bl	801ac20 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	3312      	adds	r3, #18
 801d89a:	2100      	movs	r1, #0
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7fd f9a4 	bl	801abea <st_word>
					fs->wflag = 1;
 801d8a2:	68bb      	ldr	r3, [r7, #8]
 801d8a4:	2201      	movs	r2, #1
 801d8a6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d8a8:	68bb      	ldr	r3, [r7, #8]
 801d8aa:	4618      	mov	r0, r3
 801d8ac:	f7fd fc40 	bl	801b130 <sync_fs>
 801d8b0:	4603      	mov	r3, r0
 801d8b2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	7d1b      	ldrb	r3, [r3, #20]
 801d8b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d8bc:	b2da      	uxtb	r2, r3
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	3718      	adds	r7, #24
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	bd80      	pop	{r7, pc}

0801d8cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d8cc:	b580      	push	{r7, lr}
 801d8ce:	b084      	sub	sp, #16
 801d8d0:	af00      	add	r7, sp, #0
 801d8d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d8d4:	6878      	ldr	r0, [r7, #4]
 801d8d6:	f7ff ff7b 	bl	801d7d0 <f_sync>
 801d8da:	4603      	mov	r3, r0
 801d8dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d8de:	7bfb      	ldrb	r3, [r7, #15]
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	d118      	bne.n	801d916 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	f107 0208 	add.w	r2, r7, #8
 801d8ea:	4611      	mov	r1, r2
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	f7ff fb97 	bl	801d020 <validate>
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d8f6:	7bfb      	ldrb	r3, [r7, #15]
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	d10c      	bne.n	801d916 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	691b      	ldr	r3, [r3, #16]
 801d900:	4618      	mov	r0, r3
 801d902:	f7fd fb43 	bl	801af8c <dec_lock>
 801d906:	4603      	mov	r3, r0
 801d908:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d90a:	7bfb      	ldrb	r3, [r7, #15]
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d102      	bne.n	801d916 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	2200      	movs	r2, #0
 801d914:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d916:	7bfb      	ldrb	r3, [r7, #15]
}
 801d918:	4618      	mov	r0, r3
 801d91a:	3710      	adds	r7, #16
 801d91c:	46bd      	mov	sp, r7
 801d91e:	bd80      	pop	{r7, pc}

0801d920 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d920:	b580      	push	{r7, lr}
 801d922:	b0a0      	sub	sp, #128	@ 0x80
 801d924:	af00      	add	r7, sp, #0
 801d926:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d928:	2300      	movs	r3, #0
 801d92a:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d92c:	f107 010c 	add.w	r1, r7, #12
 801d930:	1d3b      	adds	r3, r7, #4
 801d932:	2202      	movs	r2, #2
 801d934:	4618      	mov	r0, r3
 801d936:	f7ff f8ed 	bl	801cb14 <find_volume>
 801d93a:	4603      	mov	r3, r0
 801d93c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801d944:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d948:	2b00      	cmp	r3, #0
 801d94a:	f040 808e 	bne.w	801da6a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d94e:	687a      	ldr	r2, [r7, #4]
 801d950:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d954:	4611      	mov	r1, r2
 801d956:	4618      	mov	r0, r3
 801d958:	f7fe ffcc 	bl	801c8f4 <follow_path>
 801d95c:	4603      	mov	r3, r0
 801d95e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d962:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d966:	2b00      	cmp	r3, #0
 801d968:	d108      	bne.n	801d97c <f_unlink+0x5c>
 801d96a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d96e:	2102      	movs	r1, #2
 801d970:	4618      	mov	r0, r3
 801d972:	f7fd f9ff 	bl	801ad74 <chk_lock>
 801d976:	4603      	mov	r3, r0
 801d978:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d97c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d980:	2b00      	cmp	r3, #0
 801d982:	d172      	bne.n	801da6a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d984:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801d988:	b25b      	sxtb	r3, r3
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	da03      	bge.n	801d996 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d98e:	2306      	movs	r3, #6
 801d990:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801d994:	e008      	b.n	801d9a8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d996:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d99a:	f003 0301 	and.w	r3, r3, #1
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d002      	beq.n	801d9a8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d9a2:	2307      	movs	r3, #7
 801d9a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801d9a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d134      	bne.n	801da1a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801d9b4:	4611      	mov	r1, r2
 801d9b6:	4618      	mov	r0, r3
 801d9b8:	f7fe f911 	bl	801bbde <ld_clust>
 801d9bc:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d9be:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d9c2:	f003 0310 	and.w	r3, r3, #16
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d027      	beq.n	801da1a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d9ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d9d0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d9d2:	f107 0310 	add.w	r3, r7, #16
 801d9d6:	2100      	movs	r1, #0
 801d9d8:	4618      	mov	r0, r3
 801d9da:	f7fd ff5a 	bl	801b892 <dir_sdi>
 801d9de:	4603      	mov	r3, r0
 801d9e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801d9e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d116      	bne.n	801da1a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d9ec:	f107 0310 	add.w	r3, r7, #16
 801d9f0:	2100      	movs	r1, #0
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	f7fe fb1d 	bl	801c032 <dir_read>
 801d9f8:	4603      	mov	r3, r0
 801d9fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d9fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da02:	2b00      	cmp	r3, #0
 801da04:	d102      	bne.n	801da0c <f_unlink+0xec>
 801da06:	2307      	movs	r3, #7
 801da08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801da0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da10:	2b04      	cmp	r3, #4
 801da12:	d102      	bne.n	801da1a <f_unlink+0xfa>
 801da14:	2300      	movs	r3, #0
 801da16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801da1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d123      	bne.n	801da6a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801da22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801da26:	4618      	mov	r0, r3
 801da28:	f7fe fd62 	bl	801c4f0 <dir_remove>
 801da2c:	4603      	mov	r3, r0
 801da2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801da32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da36:	2b00      	cmp	r3, #0
 801da38:	d10c      	bne.n	801da54 <f_unlink+0x134>
 801da3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d009      	beq.n	801da54 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801da40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801da44:	2200      	movs	r2, #0
 801da46:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801da48:	4618      	mov	r0, r3
 801da4a:	f7fd fded 	bl	801b628 <remove_chain>
 801da4e:	4603      	mov	r3, r0
 801da50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801da54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d106      	bne.n	801da6a <f_unlink+0x14a>
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	4618      	mov	r0, r3
 801da60:	f7fd fb66 	bl	801b130 <sync_fs>
 801da64:	4603      	mov	r3, r0
 801da66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801da6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801da6e:	4618      	mov	r0, r3
 801da70:	3780      	adds	r7, #128	@ 0x80
 801da72:	46bd      	mov	sp, r7
 801da74:	bd80      	pop	{r7, pc}
	...

0801da78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801da78:	b480      	push	{r7}
 801da7a:	b087      	sub	sp, #28
 801da7c:	af00      	add	r7, sp, #0
 801da7e:	60f8      	str	r0, [r7, #12]
 801da80:	60b9      	str	r1, [r7, #8]
 801da82:	4613      	mov	r3, r2
 801da84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801da86:	2301      	movs	r3, #1
 801da88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801da8a:	2300      	movs	r3, #0
 801da8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801da8e:	4b1f      	ldr	r3, [pc, #124]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801da90:	7a5b      	ldrb	r3, [r3, #9]
 801da92:	b2db      	uxtb	r3, r3
 801da94:	2b00      	cmp	r3, #0
 801da96:	d131      	bne.n	801dafc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801da98:	4b1c      	ldr	r3, [pc, #112]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801da9a:	7a5b      	ldrb	r3, [r3, #9]
 801da9c:	b2db      	uxtb	r3, r3
 801da9e:	461a      	mov	r2, r3
 801daa0:	4b1a      	ldr	r3, [pc, #104]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801daa2:	2100      	movs	r1, #0
 801daa4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801daa6:	4b19      	ldr	r3, [pc, #100]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801daa8:	7a5b      	ldrb	r3, [r3, #9]
 801daaa:	b2db      	uxtb	r3, r3
 801daac:	4a17      	ldr	r2, [pc, #92]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801daae:	009b      	lsls	r3, r3, #2
 801dab0:	4413      	add	r3, r2
 801dab2:	68fa      	ldr	r2, [r7, #12]
 801dab4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801dab6:	4b15      	ldr	r3, [pc, #84]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801dab8:	7a5b      	ldrb	r3, [r3, #9]
 801daba:	b2db      	uxtb	r3, r3
 801dabc:	461a      	mov	r2, r3
 801dabe:	4b13      	ldr	r3, [pc, #76]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801dac0:	4413      	add	r3, r2
 801dac2:	79fa      	ldrb	r2, [r7, #7]
 801dac4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801dac6:	4b11      	ldr	r3, [pc, #68]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801dac8:	7a5b      	ldrb	r3, [r3, #9]
 801daca:	b2db      	uxtb	r3, r3
 801dacc:	1c5a      	adds	r2, r3, #1
 801dace:	b2d1      	uxtb	r1, r2
 801dad0:	4a0e      	ldr	r2, [pc, #56]	@ (801db0c <FATFS_LinkDriverEx+0x94>)
 801dad2:	7251      	strb	r1, [r2, #9]
 801dad4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801dad6:	7dbb      	ldrb	r3, [r7, #22]
 801dad8:	3330      	adds	r3, #48	@ 0x30
 801dada:	b2da      	uxtb	r2, r3
 801dadc:	68bb      	ldr	r3, [r7, #8]
 801dade:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801dae0:	68bb      	ldr	r3, [r7, #8]
 801dae2:	3301      	adds	r3, #1
 801dae4:	223a      	movs	r2, #58	@ 0x3a
 801dae6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801dae8:	68bb      	ldr	r3, [r7, #8]
 801daea:	3302      	adds	r3, #2
 801daec:	222f      	movs	r2, #47	@ 0x2f
 801daee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801daf0:	68bb      	ldr	r3, [r7, #8]
 801daf2:	3303      	adds	r3, #3
 801daf4:	2200      	movs	r2, #0
 801daf6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801daf8:	2300      	movs	r3, #0
 801dafa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dafc:	7dfb      	ldrb	r3, [r7, #23]
}
 801dafe:	4618      	mov	r0, r3
 801db00:	371c      	adds	r7, #28
 801db02:	46bd      	mov	sp, r7
 801db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db08:	4770      	bx	lr
 801db0a:	bf00      	nop
 801db0c:	24000800 	.word	0x24000800

0801db10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801db10:	b580      	push	{r7, lr}
 801db12:	b082      	sub	sp, #8
 801db14:	af00      	add	r7, sp, #0
 801db16:	6078      	str	r0, [r7, #4]
 801db18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801db1a:	2200      	movs	r2, #0
 801db1c:	6839      	ldr	r1, [r7, #0]
 801db1e:	6878      	ldr	r0, [r7, #4]
 801db20:	f7ff ffaa 	bl	801da78 <FATFS_LinkDriverEx>
 801db24:	4603      	mov	r3, r0
}
 801db26:	4618      	mov	r0, r3
 801db28:	3708      	adds	r7, #8
 801db2a:	46bd      	mov	sp, r7
 801db2c:	bd80      	pop	{r7, pc}
	...

0801db30 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801db30:	b480      	push	{r7}
 801db32:	b085      	sub	sp, #20
 801db34:	af00      	add	r7, sp, #0
 801db36:	4603      	mov	r3, r0
 801db38:	6039      	str	r1, [r7, #0]
 801db3a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801db3c:	88fb      	ldrh	r3, [r7, #6]
 801db3e:	2b7f      	cmp	r3, #127	@ 0x7f
 801db40:	d802      	bhi.n	801db48 <ff_convert+0x18>
		c = chr;
 801db42:	88fb      	ldrh	r3, [r7, #6]
 801db44:	81fb      	strh	r3, [r7, #14]
 801db46:	e025      	b.n	801db94 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801db48:	683b      	ldr	r3, [r7, #0]
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d00b      	beq.n	801db66 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801db4e:	88fb      	ldrh	r3, [r7, #6]
 801db50:	2bff      	cmp	r3, #255	@ 0xff
 801db52:	d805      	bhi.n	801db60 <ff_convert+0x30>
 801db54:	88fb      	ldrh	r3, [r7, #6]
 801db56:	3b80      	subs	r3, #128	@ 0x80
 801db58:	4a12      	ldr	r2, [pc, #72]	@ (801dba4 <ff_convert+0x74>)
 801db5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801db5e:	e000      	b.n	801db62 <ff_convert+0x32>
 801db60:	2300      	movs	r3, #0
 801db62:	81fb      	strh	r3, [r7, #14]
 801db64:	e016      	b.n	801db94 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801db66:	2300      	movs	r3, #0
 801db68:	81fb      	strh	r3, [r7, #14]
 801db6a:	e009      	b.n	801db80 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801db6c:	89fb      	ldrh	r3, [r7, #14]
 801db6e:	4a0d      	ldr	r2, [pc, #52]	@ (801dba4 <ff_convert+0x74>)
 801db70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801db74:	88fa      	ldrh	r2, [r7, #6]
 801db76:	429a      	cmp	r2, r3
 801db78:	d006      	beq.n	801db88 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801db7a:	89fb      	ldrh	r3, [r7, #14]
 801db7c:	3301      	adds	r3, #1
 801db7e:	81fb      	strh	r3, [r7, #14]
 801db80:	89fb      	ldrh	r3, [r7, #14]
 801db82:	2b7f      	cmp	r3, #127	@ 0x7f
 801db84:	d9f2      	bls.n	801db6c <ff_convert+0x3c>
 801db86:	e000      	b.n	801db8a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801db88:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801db8a:	89fb      	ldrh	r3, [r7, #14]
 801db8c:	3380      	adds	r3, #128	@ 0x80
 801db8e:	b29b      	uxth	r3, r3
 801db90:	b2db      	uxtb	r3, r3
 801db92:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801db94:	89fb      	ldrh	r3, [r7, #14]
}
 801db96:	4618      	mov	r0, r3
 801db98:	3714      	adds	r7, #20
 801db9a:	46bd      	mov	sp, r7
 801db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dba0:	4770      	bx	lr
 801dba2:	bf00      	nop
 801dba4:	0801e860 	.word	0x0801e860

0801dba8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801dba8:	b480      	push	{r7}
 801dbaa:	b087      	sub	sp, #28
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	4603      	mov	r3, r0
 801dbb0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801dbb2:	88fb      	ldrh	r3, [r7, #6]
 801dbb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dbb8:	d201      	bcs.n	801dbbe <ff_wtoupper+0x16>
 801dbba:	4b3e      	ldr	r3, [pc, #248]	@ (801dcb4 <ff_wtoupper+0x10c>)
 801dbbc:	e000      	b.n	801dbc0 <ff_wtoupper+0x18>
 801dbbe:	4b3e      	ldr	r3, [pc, #248]	@ (801dcb8 <ff_wtoupper+0x110>)
 801dbc0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801dbc2:	697b      	ldr	r3, [r7, #20]
 801dbc4:	1c9a      	adds	r2, r3, #2
 801dbc6:	617a      	str	r2, [r7, #20]
 801dbc8:	881b      	ldrh	r3, [r3, #0]
 801dbca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801dbcc:	8a7b      	ldrh	r3, [r7, #18]
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d068      	beq.n	801dca4 <ff_wtoupper+0xfc>
 801dbd2:	88fa      	ldrh	r2, [r7, #6]
 801dbd4:	8a7b      	ldrh	r3, [r7, #18]
 801dbd6:	429a      	cmp	r2, r3
 801dbd8:	d364      	bcc.n	801dca4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801dbda:	697b      	ldr	r3, [r7, #20]
 801dbdc:	1c9a      	adds	r2, r3, #2
 801dbde:	617a      	str	r2, [r7, #20]
 801dbe0:	881b      	ldrh	r3, [r3, #0]
 801dbe2:	823b      	strh	r3, [r7, #16]
 801dbe4:	8a3b      	ldrh	r3, [r7, #16]
 801dbe6:	0a1b      	lsrs	r3, r3, #8
 801dbe8:	81fb      	strh	r3, [r7, #14]
 801dbea:	8a3b      	ldrh	r3, [r7, #16]
 801dbec:	b2db      	uxtb	r3, r3
 801dbee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801dbf0:	88fa      	ldrh	r2, [r7, #6]
 801dbf2:	8a79      	ldrh	r1, [r7, #18]
 801dbf4:	8a3b      	ldrh	r3, [r7, #16]
 801dbf6:	440b      	add	r3, r1
 801dbf8:	429a      	cmp	r2, r3
 801dbfa:	da49      	bge.n	801dc90 <ff_wtoupper+0xe8>
			switch (cmd) {
 801dbfc:	89fb      	ldrh	r3, [r7, #14]
 801dbfe:	2b08      	cmp	r3, #8
 801dc00:	d84f      	bhi.n	801dca2 <ff_wtoupper+0xfa>
 801dc02:	a201      	add	r2, pc, #4	@ (adr r2, 801dc08 <ff_wtoupper+0x60>)
 801dc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc08:	0801dc2d 	.word	0x0801dc2d
 801dc0c:	0801dc3f 	.word	0x0801dc3f
 801dc10:	0801dc55 	.word	0x0801dc55
 801dc14:	0801dc5d 	.word	0x0801dc5d
 801dc18:	0801dc65 	.word	0x0801dc65
 801dc1c:	0801dc6d 	.word	0x0801dc6d
 801dc20:	0801dc75 	.word	0x0801dc75
 801dc24:	0801dc7d 	.word	0x0801dc7d
 801dc28:	0801dc85 	.word	0x0801dc85
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801dc2c:	88fa      	ldrh	r2, [r7, #6]
 801dc2e:	8a7b      	ldrh	r3, [r7, #18]
 801dc30:	1ad3      	subs	r3, r2, r3
 801dc32:	005b      	lsls	r3, r3, #1
 801dc34:	697a      	ldr	r2, [r7, #20]
 801dc36:	4413      	add	r3, r2
 801dc38:	881b      	ldrh	r3, [r3, #0]
 801dc3a:	80fb      	strh	r3, [r7, #6]
 801dc3c:	e027      	b.n	801dc8e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801dc3e:	88fa      	ldrh	r2, [r7, #6]
 801dc40:	8a7b      	ldrh	r3, [r7, #18]
 801dc42:	1ad3      	subs	r3, r2, r3
 801dc44:	b29b      	uxth	r3, r3
 801dc46:	f003 0301 	and.w	r3, r3, #1
 801dc4a:	b29b      	uxth	r3, r3
 801dc4c:	88fa      	ldrh	r2, [r7, #6]
 801dc4e:	1ad3      	subs	r3, r2, r3
 801dc50:	80fb      	strh	r3, [r7, #6]
 801dc52:	e01c      	b.n	801dc8e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801dc54:	88fb      	ldrh	r3, [r7, #6]
 801dc56:	3b10      	subs	r3, #16
 801dc58:	80fb      	strh	r3, [r7, #6]
 801dc5a:	e018      	b.n	801dc8e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801dc5c:	88fb      	ldrh	r3, [r7, #6]
 801dc5e:	3b20      	subs	r3, #32
 801dc60:	80fb      	strh	r3, [r7, #6]
 801dc62:	e014      	b.n	801dc8e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801dc64:	88fb      	ldrh	r3, [r7, #6]
 801dc66:	3b30      	subs	r3, #48	@ 0x30
 801dc68:	80fb      	strh	r3, [r7, #6]
 801dc6a:	e010      	b.n	801dc8e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801dc6c:	88fb      	ldrh	r3, [r7, #6]
 801dc6e:	3b1a      	subs	r3, #26
 801dc70:	80fb      	strh	r3, [r7, #6]
 801dc72:	e00c      	b.n	801dc8e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801dc74:	88fb      	ldrh	r3, [r7, #6]
 801dc76:	3308      	adds	r3, #8
 801dc78:	80fb      	strh	r3, [r7, #6]
 801dc7a:	e008      	b.n	801dc8e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801dc7c:	88fb      	ldrh	r3, [r7, #6]
 801dc7e:	3b50      	subs	r3, #80	@ 0x50
 801dc80:	80fb      	strh	r3, [r7, #6]
 801dc82:	e004      	b.n	801dc8e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801dc84:	88fb      	ldrh	r3, [r7, #6]
 801dc86:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801dc8a:	80fb      	strh	r3, [r7, #6]
 801dc8c:	bf00      	nop
			}
			break;
 801dc8e:	e008      	b.n	801dca2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801dc90:	89fb      	ldrh	r3, [r7, #14]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d195      	bne.n	801dbc2 <ff_wtoupper+0x1a>
 801dc96:	8a3b      	ldrh	r3, [r7, #16]
 801dc98:	005b      	lsls	r3, r3, #1
 801dc9a:	697a      	ldr	r2, [r7, #20]
 801dc9c:	4413      	add	r3, r2
 801dc9e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801dca0:	e78f      	b.n	801dbc2 <ff_wtoupper+0x1a>
			break;
 801dca2:	bf00      	nop
	}

	return chr;
 801dca4:	88fb      	ldrh	r3, [r7, #6]
}
 801dca6:	4618      	mov	r0, r3
 801dca8:	371c      	adds	r7, #28
 801dcaa:	46bd      	mov	sp, r7
 801dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcb0:	4770      	bx	lr
 801dcb2:	bf00      	nop
 801dcb4:	0801e960 	.word	0x0801e960
 801dcb8:	0801eb54 	.word	0x0801eb54

0801dcbc <memset>:
 801dcbc:	4402      	add	r2, r0
 801dcbe:	4603      	mov	r3, r0
 801dcc0:	4293      	cmp	r3, r2
 801dcc2:	d100      	bne.n	801dcc6 <memset+0xa>
 801dcc4:	4770      	bx	lr
 801dcc6:	f803 1b01 	strb.w	r1, [r3], #1
 801dcca:	e7f9      	b.n	801dcc0 <memset+0x4>

0801dccc <__errno>:
 801dccc:	4b01      	ldr	r3, [pc, #4]	@ (801dcd4 <__errno+0x8>)
 801dcce:	6818      	ldr	r0, [r3, #0]
 801dcd0:	4770      	bx	lr
 801dcd2:	bf00      	nop
 801dcd4:	24000028 	.word	0x24000028

0801dcd8 <__libc_init_array>:
 801dcd8:	b570      	push	{r4, r5, r6, lr}
 801dcda:	4d0d      	ldr	r5, [pc, #52]	@ (801dd10 <__libc_init_array+0x38>)
 801dcdc:	4c0d      	ldr	r4, [pc, #52]	@ (801dd14 <__libc_init_array+0x3c>)
 801dcde:	1b64      	subs	r4, r4, r5
 801dce0:	10a4      	asrs	r4, r4, #2
 801dce2:	2600      	movs	r6, #0
 801dce4:	42a6      	cmp	r6, r4
 801dce6:	d109      	bne.n	801dcfc <__libc_init_array+0x24>
 801dce8:	4d0b      	ldr	r5, [pc, #44]	@ (801dd18 <__libc_init_array+0x40>)
 801dcea:	4c0c      	ldr	r4, [pc, #48]	@ (801dd1c <__libc_init_array+0x44>)
 801dcec:	f000 fd0c 	bl	801e708 <_init>
 801dcf0:	1b64      	subs	r4, r4, r5
 801dcf2:	10a4      	asrs	r4, r4, #2
 801dcf4:	2600      	movs	r6, #0
 801dcf6:	42a6      	cmp	r6, r4
 801dcf8:	d105      	bne.n	801dd06 <__libc_init_array+0x2e>
 801dcfa:	bd70      	pop	{r4, r5, r6, pc}
 801dcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 801dd00:	4798      	blx	r3
 801dd02:	3601      	adds	r6, #1
 801dd04:	e7ee      	b.n	801dce4 <__libc_init_array+0xc>
 801dd06:	f855 3b04 	ldr.w	r3, [r5], #4
 801dd0a:	4798      	blx	r3
 801dd0c:	3601      	adds	r6, #1
 801dd0e:	e7f2      	b.n	801dcf6 <__libc_init_array+0x1e>
 801dd10:	08020540 	.word	0x08020540
 801dd14:	08020540 	.word	0x08020540
 801dd18:	08020540 	.word	0x08020540
 801dd1c:	08020544 	.word	0x08020544

0801dd20 <memcpy>:
 801dd20:	440a      	add	r2, r1
 801dd22:	4291      	cmp	r1, r2
 801dd24:	f100 33ff 	add.w	r3, r0, #4294967295
 801dd28:	d100      	bne.n	801dd2c <memcpy+0xc>
 801dd2a:	4770      	bx	lr
 801dd2c:	b510      	push	{r4, lr}
 801dd2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd32:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd36:	4291      	cmp	r1, r2
 801dd38:	d1f9      	bne.n	801dd2e <memcpy+0xe>
 801dd3a:	bd10      	pop	{r4, pc}

0801dd3c <atan2>:
 801dd3c:	f000 bbac 	b.w	801e498 <__ieee754_atan2>

0801dd40 <sqrt>:
 801dd40:	b508      	push	{r3, lr}
 801dd42:	ed2d 8b04 	vpush	{d8-d9}
 801dd46:	eeb0 8b40 	vmov.f64	d8, d0
 801dd4a:	f000 fba1 	bl	801e490 <__ieee754_sqrt>
 801dd4e:	eeb4 8b48 	vcmp.f64	d8, d8
 801dd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd56:	d60c      	bvs.n	801dd72 <sqrt+0x32>
 801dd58:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801dd78 <sqrt+0x38>
 801dd5c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801dd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd64:	d505      	bpl.n	801dd72 <sqrt+0x32>
 801dd66:	f7ff ffb1 	bl	801dccc <__errno>
 801dd6a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801dd6e:	2321      	movs	r3, #33	@ 0x21
 801dd70:	6003      	str	r3, [r0, #0]
 801dd72:	ecbd 8b04 	vpop	{d8-d9}
 801dd76:	bd08      	pop	{r3, pc}
	...

0801dd80 <atan>:
 801dd80:	b538      	push	{r3, r4, r5, lr}
 801dd82:	eeb0 7b40 	vmov.f64	d7, d0
 801dd86:	ee17 5a90 	vmov	r5, s15
 801dd8a:	4b73      	ldr	r3, [pc, #460]	@ (801df58 <atan+0x1d8>)
 801dd8c:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801dd90:	429c      	cmp	r4, r3
 801dd92:	d913      	bls.n	801ddbc <atan+0x3c>
 801dd94:	4b71      	ldr	r3, [pc, #452]	@ (801df5c <atan+0x1dc>)
 801dd96:	429c      	cmp	r4, r3
 801dd98:	d803      	bhi.n	801dda2 <atan+0x22>
 801dd9a:	d107      	bne.n	801ddac <atan+0x2c>
 801dd9c:	ee10 3a10 	vmov	r3, s0
 801dda0:	b123      	cbz	r3, 801ddac <atan+0x2c>
 801dda2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801dda6:	eeb0 0b47 	vmov.f64	d0, d7
 801ddaa:	bd38      	pop	{r3, r4, r5, pc}
 801ddac:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801dee8 <atan+0x168>
 801ddb0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801def0 <atan+0x170>
 801ddb4:	2d00      	cmp	r5, #0
 801ddb6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801ddba:	e7f4      	b.n	801dda6 <atan+0x26>
 801ddbc:	4b68      	ldr	r3, [pc, #416]	@ (801df60 <atan+0x1e0>)
 801ddbe:	429c      	cmp	r4, r3
 801ddc0:	d811      	bhi.n	801dde6 <atan+0x66>
 801ddc2:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801ddc6:	429c      	cmp	r4, r3
 801ddc8:	d80a      	bhi.n	801dde0 <atan+0x60>
 801ddca:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801ddce:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801def8 <atan+0x178>
 801ddd2:	ee30 6b06 	vadd.f64	d6, d0, d6
 801ddd6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801ddda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddde:	dce2      	bgt.n	801dda6 <atan+0x26>
 801dde0:	f04f 33ff 	mov.w	r3, #4294967295
 801dde4:	e013      	b.n	801de0e <atan+0x8e>
 801dde6:	f000 f8c5 	bl	801df74 <fabs>
 801ddea:	4b5e      	ldr	r3, [pc, #376]	@ (801df64 <atan+0x1e4>)
 801ddec:	429c      	cmp	r4, r3
 801ddee:	d84f      	bhi.n	801de90 <atan+0x110>
 801ddf0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801ddf4:	429c      	cmp	r4, r3
 801ddf6:	d841      	bhi.n	801de7c <atan+0xfc>
 801ddf8:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801ddfc:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801de00:	2300      	movs	r3, #0
 801de02:	eea0 5b07 	vfma.f64	d5, d0, d7
 801de06:	ee30 0b07 	vadd.f64	d0, d0, d7
 801de0a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801de0e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801df00 <atan+0x180>
 801de12:	ee27 4b07 	vmul.f64	d4, d7, d7
 801de16:	ee24 5b04 	vmul.f64	d5, d4, d4
 801de1a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801df08 <atan+0x188>
 801de1e:	eea5 3b06 	vfma.f64	d3, d5, d6
 801de22:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801df10 <atan+0x190>
 801de26:	eea3 6b05 	vfma.f64	d6, d3, d5
 801de2a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801df18 <atan+0x198>
 801de2e:	eea6 3b05 	vfma.f64	d3, d6, d5
 801de32:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801df20 <atan+0x1a0>
 801de36:	eea3 6b05 	vfma.f64	d6, d3, d5
 801de3a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801df28 <atan+0x1a8>
 801de3e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801df30 <atan+0x1b0>
 801de42:	eea6 3b05 	vfma.f64	d3, d6, d5
 801de46:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801df38 <atan+0x1b8>
 801de4a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801de4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801df40 <atan+0x1c0>
 801de52:	eea2 6b05 	vfma.f64	d6, d2, d5
 801de56:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801df48 <atan+0x1c8>
 801de5a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801de5e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801df50 <atan+0x1d0>
 801de62:	1c5a      	adds	r2, r3, #1
 801de64:	eea2 6b05 	vfma.f64	d6, d2, d5
 801de68:	ee26 6b05 	vmul.f64	d6, d6, d5
 801de6c:	eea3 6b04 	vfma.f64	d6, d3, d4
 801de70:	ee27 6b06 	vmul.f64	d6, d7, d6
 801de74:	d121      	bne.n	801deba <atan+0x13a>
 801de76:	ee37 7b46 	vsub.f64	d7, d7, d6
 801de7a:	e794      	b.n	801dda6 <atan+0x26>
 801de7c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801de80:	2301      	movs	r3, #1
 801de82:	ee30 5b47 	vsub.f64	d5, d0, d7
 801de86:	ee30 0b07 	vadd.f64	d0, d0, d7
 801de8a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801de8e:	e7be      	b.n	801de0e <atan+0x8e>
 801de90:	4b35      	ldr	r3, [pc, #212]	@ (801df68 <atan+0x1e8>)
 801de92:	429c      	cmp	r4, r3
 801de94:	d20b      	bcs.n	801deae <atan+0x12e>
 801de96:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801de9a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801de9e:	ee30 5b47 	vsub.f64	d5, d0, d7
 801dea2:	eea0 6b07 	vfma.f64	d6, d0, d7
 801dea6:	2302      	movs	r3, #2
 801dea8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801deac:	e7af      	b.n	801de0e <atan+0x8e>
 801deae:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801deb2:	2303      	movs	r3, #3
 801deb4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801deb8:	e7a9      	b.n	801de0e <atan+0x8e>
 801deba:	4a2c      	ldr	r2, [pc, #176]	@ (801df6c <atan+0x1ec>)
 801debc:	492c      	ldr	r1, [pc, #176]	@ (801df70 <atan+0x1f0>)
 801debe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801dec2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801dec6:	ed93 5b00 	vldr	d5, [r3]
 801deca:	ee36 6b45 	vsub.f64	d6, d6, d5
 801dece:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ded2:	ed92 7b00 	vldr	d7, [r2]
 801ded6:	2d00      	cmp	r5, #0
 801ded8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801dedc:	bfb8      	it	lt
 801dede:	eeb1 7b47 	vneglt.f64	d7, d7
 801dee2:	e760      	b.n	801dda6 <atan+0x26>
 801dee4:	f3af 8000 	nop.w
 801dee8:	54442d18 	.word	0x54442d18
 801deec:	bff921fb 	.word	0xbff921fb
 801def0:	54442d18 	.word	0x54442d18
 801def4:	3ff921fb 	.word	0x3ff921fb
 801def8:	8800759c 	.word	0x8800759c
 801defc:	7e37e43c 	.word	0x7e37e43c
 801df00:	e322da11 	.word	0xe322da11
 801df04:	3f90ad3a 	.word	0x3f90ad3a
 801df08:	24760deb 	.word	0x24760deb
 801df0c:	3fa97b4b 	.word	0x3fa97b4b
 801df10:	a0d03d51 	.word	0xa0d03d51
 801df14:	3fb10d66 	.word	0x3fb10d66
 801df18:	c54c206e 	.word	0xc54c206e
 801df1c:	3fb745cd 	.word	0x3fb745cd
 801df20:	920083ff 	.word	0x920083ff
 801df24:	3fc24924 	.word	0x3fc24924
 801df28:	5555550d 	.word	0x5555550d
 801df2c:	3fd55555 	.word	0x3fd55555
 801df30:	52defd9a 	.word	0x52defd9a
 801df34:	bfadde2d 	.word	0xbfadde2d
 801df38:	2c6a6c2f 	.word	0x2c6a6c2f
 801df3c:	bfa2b444 	.word	0xbfa2b444
 801df40:	af749a6d 	.word	0xaf749a6d
 801df44:	bfb3b0f2 	.word	0xbfb3b0f2
 801df48:	fe231671 	.word	0xfe231671
 801df4c:	bfbc71c6 	.word	0xbfbc71c6
 801df50:	9998ebc4 	.word	0x9998ebc4
 801df54:	bfc99999 	.word	0xbfc99999
 801df58:	440fffff 	.word	0x440fffff
 801df5c:	7ff00000 	.word	0x7ff00000
 801df60:	3fdbffff 	.word	0x3fdbffff
 801df64:	3ff2ffff 	.word	0x3ff2ffff
 801df68:	40038000 	.word	0x40038000
 801df6c:	0801ec30 	.word	0x0801ec30
 801df70:	0801ec10 	.word	0x0801ec10

0801df74 <fabs>:
 801df74:	ec51 0b10 	vmov	r0, r1, d0
 801df78:	4602      	mov	r2, r0
 801df7a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801df7e:	ec43 2b10 	vmov	d0, r2, r3
 801df82:	4770      	bx	lr

0801df84 <checkint>:
 801df84:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801df88:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801df8c:	429a      	cmp	r2, r3
 801df8e:	b570      	push	{r4, r5, r6, lr}
 801df90:	dd2a      	ble.n	801dfe8 <checkint+0x64>
 801df92:	f240 4333 	movw	r3, #1075	@ 0x433
 801df96:	429a      	cmp	r2, r3
 801df98:	dc24      	bgt.n	801dfe4 <checkint+0x60>
 801df9a:	1a9b      	subs	r3, r3, r2
 801df9c:	f1a3 0620 	sub.w	r6, r3, #32
 801dfa0:	f04f 32ff 	mov.w	r2, #4294967295
 801dfa4:	fa02 f403 	lsl.w	r4, r2, r3
 801dfa8:	fa02 f606 	lsl.w	r6, r2, r6
 801dfac:	f1c3 0520 	rsb	r5, r3, #32
 801dfb0:	fa22 f505 	lsr.w	r5, r2, r5
 801dfb4:	4334      	orrs	r4, r6
 801dfb6:	432c      	orrs	r4, r5
 801dfb8:	409a      	lsls	r2, r3
 801dfba:	ea20 0202 	bic.w	r2, r0, r2
 801dfbe:	ea21 0404 	bic.w	r4, r1, r4
 801dfc2:	4322      	orrs	r2, r4
 801dfc4:	f1a3 0420 	sub.w	r4, r3, #32
 801dfc8:	f1c3 0220 	rsb	r2, r3, #32
 801dfcc:	d10c      	bne.n	801dfe8 <checkint+0x64>
 801dfce:	40d8      	lsrs	r0, r3
 801dfd0:	fa01 f302 	lsl.w	r3, r1, r2
 801dfd4:	4318      	orrs	r0, r3
 801dfd6:	40e1      	lsrs	r1, r4
 801dfd8:	4308      	orrs	r0, r1
 801dfda:	f000 0001 	and.w	r0, r0, #1
 801dfde:	f1d0 0002 	rsbs	r0, r0, #2
 801dfe2:	bd70      	pop	{r4, r5, r6, pc}
 801dfe4:	2002      	movs	r0, #2
 801dfe6:	e7fc      	b.n	801dfe2 <checkint+0x5e>
 801dfe8:	2000      	movs	r0, #0
 801dfea:	e7fa      	b.n	801dfe2 <checkint+0x5e>
 801dfec:	0000      	movs	r0, r0
	...

0801dff0 <pow>:
 801dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dff4:	ee10 4a90 	vmov	r4, s1
 801dff8:	ed2d 8b0a 	vpush	{d8-d12}
 801dffc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e000:	ee11 aa90 	vmov	sl, s3
 801e004:	f108 32ff 	add.w	r2, r8, #4294967295
 801e008:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e00c:	429a      	cmp	r2, r3
 801e00e:	ee10 5a10 	vmov	r5, s0
 801e012:	ee11 0a10 	vmov	r0, s2
 801e016:	b087      	sub	sp, #28
 801e018:	46c4      	mov	ip, r8
 801e01a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e01e:	d806      	bhi.n	801e02e <pow+0x3e>
 801e020:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e024:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e028:	2b7f      	cmp	r3, #127	@ 0x7f
 801e02a:	f240 8157 	bls.w	801e2dc <pow+0x2ec>
 801e02e:	1802      	adds	r2, r0, r0
 801e030:	eb4a 010a 	adc.w	r1, sl, sl
 801e034:	f06f 0b01 	mvn.w	fp, #1
 801e038:	1e57      	subs	r7, r2, #1
 801e03a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e03e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e042:	45bb      	cmp	fp, r7
 801e044:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e048:	d242      	bcs.n	801e0d0 <pow+0xe0>
 801e04a:	ea52 0301 	orrs.w	r3, r2, r1
 801e04e:	f04f 0300 	mov.w	r3, #0
 801e052:	d10c      	bne.n	801e06e <pow+0x7e>
 801e054:	196d      	adds	r5, r5, r5
 801e056:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e05a:	4164      	adcs	r4, r4
 801e05c:	42ab      	cmp	r3, r5
 801e05e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e062:	41a3      	sbcs	r3, r4
 801e064:	f0c0 808f 	bcc.w	801e186 <pow+0x196>
 801e068:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e06c:	e02b      	b.n	801e0c6 <pow+0xd6>
 801e06e:	4ed4      	ldr	r6, [pc, #848]	@ (801e3c0 <pow+0x3d0>)
 801e070:	42b4      	cmp	r4, r6
 801e072:	bf08      	it	eq
 801e074:	429d      	cmpeq	r5, r3
 801e076:	d109      	bne.n	801e08c <pow+0x9c>
 801e078:	1800      	adds	r0, r0, r0
 801e07a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e07e:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e082:	4283      	cmp	r3, r0
 801e084:	4bcf      	ldr	r3, [pc, #828]	@ (801e3c4 <pow+0x3d4>)
 801e086:	eb73 030a 	sbcs.w	r3, r3, sl
 801e08a:	e7eb      	b.n	801e064 <pow+0x74>
 801e08c:	196d      	adds	r5, r5, r5
 801e08e:	48ce      	ldr	r0, [pc, #824]	@ (801e3c8 <pow+0x3d8>)
 801e090:	4164      	adcs	r4, r4
 801e092:	42ab      	cmp	r3, r5
 801e094:	eb70 0604 	sbcs.w	r6, r0, r4
 801e098:	d375      	bcc.n	801e186 <pow+0x196>
 801e09a:	4281      	cmp	r1, r0
 801e09c:	bf08      	it	eq
 801e09e:	429a      	cmpeq	r2, r3
 801e0a0:	d171      	bne.n	801e186 <pow+0x196>
 801e0a2:	4aca      	ldr	r2, [pc, #808]	@ (801e3cc <pow+0x3dc>)
 801e0a4:	4294      	cmp	r4, r2
 801e0a6:	bf08      	it	eq
 801e0a8:	429d      	cmpeq	r5, r3
 801e0aa:	d0dd      	beq.n	801e068 <pow+0x78>
 801e0ac:	4294      	cmp	r4, r2
 801e0ae:	ea6f 0a0a 	mvn.w	sl, sl
 801e0b2:	bf34      	ite	cc
 801e0b4:	2400      	movcc	r4, #0
 801e0b6:	2401      	movcs	r4, #1
 801e0b8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e0bc:	4554      	cmp	r4, sl
 801e0be:	f040 81dc 	bne.w	801e47a <pow+0x48a>
 801e0c2:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e0c6:	b007      	add	sp, #28
 801e0c8:	ecbd 8b0a 	vpop	{d8-d12}
 801e0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0d0:	196f      	adds	r7, r5, r5
 801e0d2:	eb44 0904 	adc.w	r9, r4, r4
 801e0d6:	1e7a      	subs	r2, r7, #1
 801e0d8:	f169 0300 	sbc.w	r3, r9, #0
 801e0dc:	4593      	cmp	fp, r2
 801e0de:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e0e2:	d225      	bcs.n	801e130 <pow+0x140>
 801e0e4:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e0e8:	2c00      	cmp	r4, #0
 801e0ea:	da13      	bge.n	801e114 <pow+0x124>
 801e0ec:	4651      	mov	r1, sl
 801e0ee:	f7ff ff49 	bl	801df84 <checkint>
 801e0f2:	2801      	cmp	r0, #1
 801e0f4:	d10e      	bne.n	801e114 <pow+0x124>
 801e0f6:	eeb1 0b40 	vneg.f64	d0, d0
 801e0fa:	ea57 0909 	orrs.w	r9, r7, r9
 801e0fe:	d10b      	bne.n	801e118 <pow+0x128>
 801e100:	f1ba 0f00 	cmp.w	sl, #0
 801e104:	dadf      	bge.n	801e0c6 <pow+0xd6>
 801e106:	b007      	add	sp, #28
 801e108:	ecbd 8b0a 	vpop	{d8-d12}
 801e10c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e110:	f000 bab6 	b.w	801e680 <__math_divzero>
 801e114:	2000      	movs	r0, #0
 801e116:	e7f0      	b.n	801e0fa <pow+0x10a>
 801e118:	f1ba 0f00 	cmp.w	sl, #0
 801e11c:	dad3      	bge.n	801e0c6 <pow+0xd6>
 801e11e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e122:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e126:	ed8d 7b00 	vstr	d7, [sp]
 801e12a:	ed9d 0b00 	vldr	d0, [sp]
 801e12e:	e7ca      	b.n	801e0c6 <pow+0xd6>
 801e130:	2c00      	cmp	r4, #0
 801e132:	da2b      	bge.n	801e18c <pow+0x19c>
 801e134:	4651      	mov	r1, sl
 801e136:	f7ff ff25 	bl	801df84 <checkint>
 801e13a:	b930      	cbnz	r0, 801e14a <pow+0x15a>
 801e13c:	b007      	add	sp, #28
 801e13e:	ecbd 8b0a 	vpop	{d8-d12}
 801e142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e146:	f000 bab3 	b.w	801e6b0 <__math_invalid>
 801e14a:	1e41      	subs	r1, r0, #1
 801e14c:	4248      	negs	r0, r1
 801e14e:	4148      	adcs	r0, r1
 801e150:	0480      	lsls	r0, r0, #18
 801e152:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e156:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e15a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e15e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e162:	2b7f      	cmp	r3, #127	@ 0x7f
 801e164:	d92d      	bls.n	801e1c2 <pow+0x1d2>
 801e166:	4b96      	ldr	r3, [pc, #600]	@ (801e3c0 <pow+0x3d0>)
 801e168:	2000      	movs	r0, #0
 801e16a:	429c      	cmp	r4, r3
 801e16c:	bf08      	it	eq
 801e16e:	4285      	cmpeq	r5, r0
 801e170:	f43f af7a 	beq.w	801e068 <pow+0x78>
 801e174:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e178:	428a      	cmp	r2, r1
 801e17a:	d80c      	bhi.n	801e196 <pow+0x1a6>
 801e17c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e180:	42a8      	cmp	r0, r5
 801e182:	41a3      	sbcs	r3, r4
 801e184:	d204      	bcs.n	801e190 <pow+0x1a0>
 801e186:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e18a:	e79c      	b.n	801e0c6 <pow+0xd6>
 801e18c:	2000      	movs	r0, #0
 801e18e:	e7e4      	b.n	801e15a <pow+0x16a>
 801e190:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e194:	e797      	b.n	801e0c6 <pow+0xd6>
 801e196:	2d01      	cmp	r5, #1
 801e198:	eb74 0303 	sbcs.w	r3, r4, r3
 801e19c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e1a0:	bf34      	ite	cc
 801e1a2:	2301      	movcc	r3, #1
 801e1a4:	2300      	movcs	r3, #0
 801e1a6:	4296      	cmp	r6, r2
 801e1a8:	bf8c      	ite	hi
 801e1aa:	2600      	movhi	r6, #0
 801e1ac:	2601      	movls	r6, #1
 801e1ae:	42b3      	cmp	r3, r6
 801e1b0:	f000 809c 	beq.w	801e2ec <pow+0x2fc>
 801e1b4:	b007      	add	sp, #28
 801e1b6:	ecbd 8b0a 	vpop	{d8-d12}
 801e1ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1be:	f000 ba57 	b.w	801e670 <__math_oflow>
 801e1c2:	f1bc 0f00 	cmp.w	ip, #0
 801e1c6:	d10a      	bne.n	801e1de <pow+0x1ee>
 801e1c8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e3b0 <pow+0x3c0>
 801e1cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e1d0:	ec53 2b17 	vmov	r2, r3, d7
 801e1d4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e1d8:	4615      	mov	r5, r2
 801e1da:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e1de:	4a7c      	ldr	r2, [pc, #496]	@ (801e3d0 <pow+0x3e0>)
 801e1e0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e1e4:	4422      	add	r2, r4
 801e1e6:	1513      	asrs	r3, r2, #20
 801e1e8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e1ec:	ee03 3a10 	vmov	s6, r3
 801e1f0:	0d12      	lsrs	r2, r2, #20
 801e1f2:	4b78      	ldr	r3, [pc, #480]	@ (801e3d4 <pow+0x3e4>)
 801e1f4:	0512      	lsls	r2, r2, #20
 801e1f6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e1fa:	1aa7      	subs	r7, r4, r2
 801e1fc:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e200:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e204:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e208:	1e2e      	subs	r6, r5, #0
 801e20a:	ec47 6b14 	vmov	d4, r6, r7
 801e20e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e212:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e216:	ed93 5b00 	vldr	d5, [r3]
 801e21a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e21e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e222:	ed93 5b02 	vldr	d5, [r3, #8]
 801e226:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e22a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e22e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e232:	ed93 5b04 	vldr	d5, [r3, #16]
 801e236:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e23a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e23e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e242:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e246:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e24a:	eeb0 9b40 	vmov.f64	d9, d0
 801e24e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e252:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e256:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e25a:	ed93 5b06 	vldr	d5, [r3, #24]
 801e25e:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e262:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e266:	ed93 4b08 	vldr	d4, [r3, #32]
 801e26a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e26e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e272:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e276:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e27a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e27e:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e282:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e286:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e28a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e28e:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e292:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e296:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e29a:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e29e:	ee16 3a90 	vmov	r3, s13
 801e2a2:	eeb0 5b46 	vmov.f64	d5, d6
 801e2a6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e2aa:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e2ae:	18b2      	adds	r2, r6, r2
 801e2b0:	2a3e      	cmp	r2, #62	@ 0x3e
 801e2b2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e2b6:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e2ba:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e2be:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e2c2:	d91b      	bls.n	801e2fc <pow+0x30c>
 801e2c4:	2a00      	cmp	r2, #0
 801e2c6:	da0b      	bge.n	801e2e0 <pow+0x2f0>
 801e2c8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e2cc:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e2d0:	2800      	cmp	r0, #0
 801e2d2:	f43f aef8 	beq.w	801e0c6 <pow+0xd6>
 801e2d6:	eeb1 0b40 	vneg.f64	d0, d0
 801e2da:	e6f4      	b.n	801e0c6 <pow+0xd6>
 801e2dc:	2000      	movs	r0, #0
 801e2de:	e77e      	b.n	801e1de <pow+0x1ee>
 801e2e0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e2e4:	d909      	bls.n	801e2fa <pow+0x30a>
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	f6bf af64 	bge.w	801e1b4 <pow+0x1c4>
 801e2ec:	b007      	add	sp, #28
 801e2ee:	ecbd 8b0a 	vpop	{d8-d12}
 801e2f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2f6:	f000 b9b3 	b.w	801e660 <__math_uflow>
 801e2fa:	2600      	movs	r6, #0
 801e2fc:	4936      	ldr	r1, [pc, #216]	@ (801e3d8 <pow+0x3e8>)
 801e2fe:	ed91 4b02 	vldr	d4, [r1, #8]
 801e302:	ed91 3b00 	vldr	d3, [r1]
 801e306:	eeb0 7b44 	vmov.f64	d7, d4
 801e30a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e30e:	ee17 5a10 	vmov	r5, s14
 801e312:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e316:	ed91 4b04 	vldr	d4, [r1, #16]
 801e31a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e31e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e322:	ed91 4b06 	vldr	d4, [r1, #24]
 801e326:	18dc      	adds	r4, r3, r3
 801e328:	f104 030f 	add.w	r3, r4, #15
 801e32c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e330:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e334:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e338:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e33c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e340:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e344:	ed91 4b08 	vldr	d4, [r1, #32]
 801e348:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e34c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e350:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e354:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e358:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e35c:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e360:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e364:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e368:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e36c:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e370:	1940      	adds	r0, r0, r5
 801e372:	2700      	movs	r7, #0
 801e374:	eb17 020c 	adds.w	r2, r7, ip
 801e378:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e37c:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e380:	2e00      	cmp	r6, #0
 801e382:	d175      	bne.n	801e470 <pow+0x480>
 801e384:	42bd      	cmp	r5, r7
 801e386:	db29      	blt.n	801e3dc <pow+0x3ec>
 801e388:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e38c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e390:	4610      	mov	r0, r2
 801e392:	ec41 0b10 	vmov	d0, r0, r1
 801e396:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e39a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e3b8 <pow+0x3c8>
 801e39e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e3a2:	b007      	add	sp, #28
 801e3a4:	ecbd 8b0a 	vpop	{d8-d12}
 801e3a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3ac:	f000 b998 	b.w	801e6e0 <__math_check_oflow>
 801e3b0:	00000000 	.word	0x00000000
 801e3b4:	43300000 	.word	0x43300000
 801e3b8:	00000000 	.word	0x00000000
 801e3bc:	7f000000 	.word	0x7f000000
 801e3c0:	3ff00000 	.word	0x3ff00000
 801e3c4:	fff00000 	.word	0xfff00000
 801e3c8:	ffe00000 	.word	0xffe00000
 801e3cc:	7fe00000 	.word	0x7fe00000
 801e3d0:	c0196aab 	.word	0xc0196aab
 801e3d4:	0801ec50 	.word	0x0801ec50
 801e3d8:	0801fcc8 	.word	0x0801fcc8
 801e3dc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e3e0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e3e4:	4610      	mov	r0, r2
 801e3e6:	ec41 0b15 	vmov	d5, r0, r1
 801e3ea:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e3ee:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e3f2:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e3f6:	eeb0 4bc7 	vabs.f64	d4, d7
 801e3fa:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e402:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e480 <pow+0x490>
 801e406:	d52a      	bpl.n	801e45e <pow+0x46e>
 801e408:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e40c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e414:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e418:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e41c:	bf58      	it	pl
 801e41e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e422:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e426:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e42a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e42e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e432:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e436:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e43a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e442:	d104      	bne.n	801e44e <pow+0x45e>
 801e444:	4632      	mov	r2, r6
 801e446:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e44a:	ec43 2b17 	vmov	d7, r2, r3
 801e44e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e452:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e456:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e45a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e45e:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e462:	b007      	add	sp, #28
 801e464:	ecbd 8b0a 	vpop	{d8-d12}
 801e468:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e46c:	f000 b92f 	b.w	801e6ce <__math_check_uflow>
 801e470:	ec43 2b10 	vmov	d0, r2, r3
 801e474:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e478:	e625      	b.n	801e0c6 <pow+0xd6>
 801e47a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e488 <pow+0x498>
 801e47e:	e622      	b.n	801e0c6 <pow+0xd6>
 801e480:	00000000 	.word	0x00000000
 801e484:	00100000 	.word	0x00100000
	...

0801e490 <__ieee754_sqrt>:
 801e490:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e494:	4770      	bx	lr
	...

0801e498 <__ieee754_atan2>:
 801e498:	ee11 1a10 	vmov	r1, s2
 801e49c:	eeb0 7b40 	vmov.f64	d7, d0
 801e4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4a2:	ee11 5a90 	vmov	r5, s3
 801e4a6:	424b      	negs	r3, r1
 801e4a8:	4f59      	ldr	r7, [pc, #356]	@ (801e610 <__ieee754_atan2+0x178>)
 801e4aa:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e4ae:	430b      	orrs	r3, r1
 801e4b0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e4b4:	42bb      	cmp	r3, r7
 801e4b6:	d80d      	bhi.n	801e4d4 <__ieee754_atan2+0x3c>
 801e4b8:	ee10 ca10 	vmov	ip, s0
 801e4bc:	ee17 6a90 	vmov	r6, s15
 801e4c0:	f1cc 0000 	rsb	r0, ip, #0
 801e4c4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e4c8:	ea40 000c 	orr.w	r0, r0, ip
 801e4cc:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e4d0:	42b8      	cmp	r0, r7
 801e4d2:	d904      	bls.n	801e4de <__ieee754_atan2+0x46>
 801e4d4:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e4d8:	eeb0 0b47 	vmov.f64	d0, d7
 801e4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4de:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e4e2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e4e6:	4308      	orrs	r0, r1
 801e4e8:	d103      	bne.n	801e4f2 <__ieee754_atan2+0x5a>
 801e4ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e4ee:	f7ff bc47 	b.w	801dd80 <atan>
 801e4f2:	17ac      	asrs	r4, r5, #30
 801e4f4:	f004 0402 	and.w	r4, r4, #2
 801e4f8:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e4fc:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e500:	d107      	bne.n	801e512 <__ieee754_atan2+0x7a>
 801e502:	2c02      	cmp	r4, #2
 801e504:	d05c      	beq.n	801e5c0 <__ieee754_atan2+0x128>
 801e506:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e5d8 <__ieee754_atan2+0x140>
 801e50a:	2c03      	cmp	r4, #3
 801e50c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e510:	e7e2      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e512:	4311      	orrs	r1, r2
 801e514:	d107      	bne.n	801e526 <__ieee754_atan2+0x8e>
 801e516:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e5e0 <__ieee754_atan2+0x148>
 801e51a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e5e8 <__ieee754_atan2+0x150>
 801e51e:	2e00      	cmp	r6, #0
 801e520:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e524:	e7d8      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e526:	42ba      	cmp	r2, r7
 801e528:	d10f      	bne.n	801e54a <__ieee754_atan2+0xb2>
 801e52a:	4293      	cmp	r3, r2
 801e52c:	f104 34ff 	add.w	r4, r4, #4294967295
 801e530:	d107      	bne.n	801e542 <__ieee754_atan2+0xaa>
 801e532:	2c02      	cmp	r4, #2
 801e534:	d847      	bhi.n	801e5c6 <__ieee754_atan2+0x12e>
 801e536:	4b37      	ldr	r3, [pc, #220]	@ (801e614 <__ieee754_atan2+0x17c>)
 801e538:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e53c:	ed93 7b00 	vldr	d7, [r3]
 801e540:	e7ca      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e542:	2c02      	cmp	r4, #2
 801e544:	d842      	bhi.n	801e5cc <__ieee754_atan2+0x134>
 801e546:	4b34      	ldr	r3, [pc, #208]	@ (801e618 <__ieee754_atan2+0x180>)
 801e548:	e7f6      	b.n	801e538 <__ieee754_atan2+0xa0>
 801e54a:	42bb      	cmp	r3, r7
 801e54c:	d0e3      	beq.n	801e516 <__ieee754_atan2+0x7e>
 801e54e:	1a9b      	subs	r3, r3, r2
 801e550:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e554:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e558:	da1a      	bge.n	801e590 <__ieee754_atan2+0xf8>
 801e55a:	2d00      	cmp	r5, #0
 801e55c:	da01      	bge.n	801e562 <__ieee754_atan2+0xca>
 801e55e:	323c      	adds	r2, #60	@ 0x3c
 801e560:	db19      	blt.n	801e596 <__ieee754_atan2+0xfe>
 801e562:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e566:	f7ff fd05 	bl	801df74 <fabs>
 801e56a:	f7ff fc09 	bl	801dd80 <atan>
 801e56e:	eeb0 7b40 	vmov.f64	d7, d0
 801e572:	2c01      	cmp	r4, #1
 801e574:	d012      	beq.n	801e59c <__ieee754_atan2+0x104>
 801e576:	2c02      	cmp	r4, #2
 801e578:	d019      	beq.n	801e5ae <__ieee754_atan2+0x116>
 801e57a:	2c00      	cmp	r4, #0
 801e57c:	d0ac      	beq.n	801e4d8 <__ieee754_atan2+0x40>
 801e57e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e5f0 <__ieee754_atan2+0x158>
 801e582:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e586:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e5f8 <__ieee754_atan2+0x160>
 801e58a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e58e:	e7a3      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e590:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e5e0 <__ieee754_atan2+0x148>
 801e594:	e7ed      	b.n	801e572 <__ieee754_atan2+0xda>
 801e596:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e600 <__ieee754_atan2+0x168>
 801e59a:	e7ea      	b.n	801e572 <__ieee754_atan2+0xda>
 801e59c:	ee17 1a90 	vmov	r1, s15
 801e5a0:	ec53 2b17 	vmov	r2, r3, d7
 801e5a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e5a8:	ec43 2b17 	vmov	d7, r2, r3
 801e5ac:	e794      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e5ae:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e5f0 <__ieee754_atan2+0x158>
 801e5b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e5b6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e5f8 <__ieee754_atan2+0x160>
 801e5ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e5be:	e78b      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e5c0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e5f8 <__ieee754_atan2+0x160>
 801e5c4:	e788      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e5c6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e608 <__ieee754_atan2+0x170>
 801e5ca:	e785      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e5cc:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e600 <__ieee754_atan2+0x168>
 801e5d0:	e782      	b.n	801e4d8 <__ieee754_atan2+0x40>
 801e5d2:	bf00      	nop
 801e5d4:	f3af 8000 	nop.w
 801e5d8:	54442d18 	.word	0x54442d18
 801e5dc:	c00921fb 	.word	0xc00921fb
 801e5e0:	54442d18 	.word	0x54442d18
 801e5e4:	3ff921fb 	.word	0x3ff921fb
 801e5e8:	54442d18 	.word	0x54442d18
 801e5ec:	bff921fb 	.word	0xbff921fb
 801e5f0:	33145c07 	.word	0x33145c07
 801e5f4:	3ca1a626 	.word	0x3ca1a626
 801e5f8:	54442d18 	.word	0x54442d18
 801e5fc:	400921fb 	.word	0x400921fb
	...
 801e608:	54442d18 	.word	0x54442d18
 801e60c:	3fe921fb 	.word	0x3fe921fb
 801e610:	7ff00000 	.word	0x7ff00000
 801e614:	0801fcb0 	.word	0x0801fcb0
 801e618:	0801fc98 	.word	0x0801fc98

0801e61c <with_errno>:
 801e61c:	b510      	push	{r4, lr}
 801e61e:	ed2d 8b02 	vpush	{d8}
 801e622:	eeb0 8b40 	vmov.f64	d8, d0
 801e626:	4604      	mov	r4, r0
 801e628:	f7ff fb50 	bl	801dccc <__errno>
 801e62c:	eeb0 0b48 	vmov.f64	d0, d8
 801e630:	ecbd 8b02 	vpop	{d8}
 801e634:	6004      	str	r4, [r0, #0]
 801e636:	bd10      	pop	{r4, pc}

0801e638 <xflow>:
 801e638:	b082      	sub	sp, #8
 801e63a:	b158      	cbz	r0, 801e654 <xflow+0x1c>
 801e63c:	eeb1 7b40 	vneg.f64	d7, d0
 801e640:	ed8d 7b00 	vstr	d7, [sp]
 801e644:	ed9d 7b00 	vldr	d7, [sp]
 801e648:	2022      	movs	r0, #34	@ 0x22
 801e64a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e64e:	b002      	add	sp, #8
 801e650:	f7ff bfe4 	b.w	801e61c <with_errno>
 801e654:	eeb0 7b40 	vmov.f64	d7, d0
 801e658:	e7f2      	b.n	801e640 <xflow+0x8>
 801e65a:	0000      	movs	r0, r0
 801e65c:	0000      	movs	r0, r0
	...

0801e660 <__math_uflow>:
 801e660:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e668 <__math_uflow+0x8>
 801e664:	f7ff bfe8 	b.w	801e638 <xflow>
 801e668:	00000000 	.word	0x00000000
 801e66c:	10000000 	.word	0x10000000

0801e670 <__math_oflow>:
 801e670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e678 <__math_oflow+0x8>
 801e674:	f7ff bfe0 	b.w	801e638 <xflow>
 801e678:	00000000 	.word	0x00000000
 801e67c:	70000000 	.word	0x70000000

0801e680 <__math_divzero>:
 801e680:	b082      	sub	sp, #8
 801e682:	2800      	cmp	r0, #0
 801e684:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e688:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e68c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e690:	ed8d 7b00 	vstr	d7, [sp]
 801e694:	ed9d 0b00 	vldr	d0, [sp]
 801e698:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e6a8 <__math_divzero+0x28>
 801e69c:	2022      	movs	r0, #34	@ 0x22
 801e69e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e6a2:	b002      	add	sp, #8
 801e6a4:	f7ff bfba 	b.w	801e61c <with_errno>
	...

0801e6b0 <__math_invalid>:
 801e6b0:	eeb0 7b40 	vmov.f64	d7, d0
 801e6b4:	eeb4 7b47 	vcmp.f64	d7, d7
 801e6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6bc:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e6c0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e6c4:	d602      	bvs.n	801e6cc <__math_invalid+0x1c>
 801e6c6:	2021      	movs	r0, #33	@ 0x21
 801e6c8:	f7ff bfa8 	b.w	801e61c <with_errno>
 801e6cc:	4770      	bx	lr

0801e6ce <__math_check_uflow>:
 801e6ce:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6d6:	d102      	bne.n	801e6de <__math_check_uflow+0x10>
 801e6d8:	2022      	movs	r0, #34	@ 0x22
 801e6da:	f7ff bf9f 	b.w	801e61c <with_errno>
 801e6de:	4770      	bx	lr

0801e6e0 <__math_check_oflow>:
 801e6e0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e700 <__math_check_oflow+0x20>
 801e6e4:	eeb0 7bc0 	vabs.f64	d7, d0
 801e6e8:	eeb4 7b46 	vcmp.f64	d7, d6
 801e6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6f0:	dd02      	ble.n	801e6f8 <__math_check_oflow+0x18>
 801e6f2:	2022      	movs	r0, #34	@ 0x22
 801e6f4:	f7ff bf92 	b.w	801e61c <with_errno>
 801e6f8:	4770      	bx	lr
 801e6fa:	bf00      	nop
 801e6fc:	f3af 8000 	nop.w
 801e700:	ffffffff 	.word	0xffffffff
 801e704:	7fefffff 	.word	0x7fefffff

0801e708 <_init>:
 801e708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e70a:	bf00      	nop
 801e70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e70e:	bc08      	pop	{r3}
 801e710:	469e      	mov	lr, r3
 801e712:	4770      	bx	lr

0801e714 <_fini>:
 801e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e716:	bf00      	nop
 801e718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e71a:	bc08      	pop	{r3}
 801e71c:	469e      	mov	lr, r3
 801e71e:	4770      	bx	lr
