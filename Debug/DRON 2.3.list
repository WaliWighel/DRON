
DRON 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e890  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e20  0801eb60  0801eb60  00024b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020980  08020980  00026980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020988  08020988  00026988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802098c  0802098c  0002698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020990  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020a08  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020a08  000278ac  2**0
                  ALLOC
  9 .IRAM         00004210  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031874  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005eb4  00000000  00000000  0007afb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024b8  00000000  00000000  00080e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c70  00000000  00000000  00083320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003cb45  00000000  00000000  00084f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038a2f  00000000  00000000  000c1ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e3e6  00000000  00000000  000fa504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002688ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a0fc  00000000  00000000  00268930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801eb48 	.word	0x0801eb48

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801eb48 	.word	0x0801eb48

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e f82a 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00d fff4 	bl	800e714 <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000c8 	.word	0x000000c8

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00d ffd1 	bl	800e714 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f8 	.word	0x000000f8
 80007b8:	000000c8 	.word	0x000000c8

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000f4 	.word	0x000000f4

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00d fe72 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00d fe5a 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e f872 	bl	800e948 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e f85c 	bl	800e948 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00d ff21 	bl	800e714 <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	000000a2 	.word	0x000000a2
 80009b0:	000000a4 	.word	0x000000a4
 80009b4:	000000a6 	.word	0x000000a6
 80009b8:	0000009c 	.word	0x0000009c
 80009bc:	0000009e 	.word	0x0000009e
 80009c0:	000000a0 	.word	0x000000a0
 80009c4:	000000a8 	.word	0x000000a8
 80009c8:	000000aa 	.word	0x000000aa
 80009cc:	000000ac 	.word	0x000000ac
 80009d0:	000000ae 	.word	0x000000ae
 80009d4:	000000b0 	.word	0x000000b0

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	000000a0 	.word	0x000000a0
 8000a74:	0000009e 	.word	0x0000009e
 8000a78:	000000cc 	.word	0x000000cc
 8000a7c:	000000ae 	.word	0x000000ae
 8000a80:	000000b0 	.word	0x000000b0
 8000a84:	000000d0 	.word	0x000000d0
 8000a88:	000000d4 	.word	0x000000d4
 8000a8c:	000000e4 	.word	0x000000e4

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000bc 	.word	0x000000bc
 8000d18:	000000c8 	.word	0x000000c8
 8000d1c:	000000a0 	.word	0x000000a0
 8000d20:	0000009e 	.word	0x0000009e
 8000d24:	000000cc 	.word	0x000000cc
 8000d28:	000000ae 	.word	0x000000ae
 8000d2c:	000000b0 	.word	0x000000b0
 8000d30:	000000d0 	.word	0x000000d0
 8000d34:	000000d4 	.word	0x000000d4
 8000d38:	000000d8 	.word	0x000000d8
 8000d3c:	000000aa 	.word	0x000000aa
 8000d40:	000000a4 	.word	0x000000a4
 8000d44:	000000e0 	.word	0x000000e0
 8000d48:	000000a2 	.word	0x000000a2
 8000d4c:	000000dc 	.word	0x000000dc
 8000d50:	000000a6 	.word	0x000000a6
 8000d54:	000000a8 	.word	0x000000a8
 8000d58:	0000009c 	.word	0x0000009c
 8000d5c:	000000b4 	.word	0x000000b4
 8000d60:	000000b8 	.word	0x000000b8
 8000d64:	000000e8 	.word	0x000000e8
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 f9a7 	bl	80090d4 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 f991 	bl	80090d4 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000c0 	.word	0x000000c0
 8000de8:	000000e4 	.word	0x000000e4
 8000dec:	000000c4 	.word	0x000000c4
 8000df0:	000000e8 	.word	0x000000e8

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000f0 	.word	0x000000f0

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fb97 	bl	801668c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fb91 	bl	801668c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fb8b 	bl	801668c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fb85 	bl	801668c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d f9c7 	bl	800e34c <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 f887 	bl	80090d4 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;
extern float Mag_Y, Mag_X, Mag_Z, heading;
//float HMC5883L_Scale = 0.92;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8001090 <HMC5883L_Init+0xb8>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			15 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x70;
 8000fea:	2370      	movs	r3, #112	@ 0x70
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <HMC5883L_Init+0xb8>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fa71 	bl	800e4ec <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xA0;
 800100a:	23a0      	movs	r3, #160	@ 0xa0
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fa61 	bl	800e4ec <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fa51 	bl	800e4ec <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f008 f840 	bl	80090d4 <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f107 030e 	add.w	r3, r7, #14
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	220a      	movs	r2, #10
 800106a:	213c      	movs	r1, #60	@ 0x3c
 800106c:	f00d fb52 	bl	800e714 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	2b48      	cmp	r3, #72	@ 0x48
 8001074:	d002      	beq.n	800107c <HMC5883L_Init+0xa4>
		status = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	e001      	b.n	8001080 <HMC5883L_Init+0xa8>
	}
	else{
		status = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f008 f827 	bl	80090d4 <HAL_Delay>

	return status;
 8001086:	7bbb      	ldrb	r3, [r7, #14]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2400009c 	.word	0x2400009c

08001094 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 800109a:	23b6      	movs	r3, #182	@ 0xb6
 800109c:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HMC5883L_Get_Z_Start+0x40>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2306      	movs	r3, #6
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	463b      	mov	r3, r7
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	213c      	movs	r1, #60	@ 0x3c
 80010b4:	f00d fb2e 	bl	800e714 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 80010b8:	78bb      	ldrb	r3, [r7, #2]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2400009c 	.word	0x2400009c

080010d8 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x28>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	2306      	movs	r3, #6
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	213c      	movs	r1, #60	@ 0x3c
 80010f0:	f00d fcb4 	bl	800ea5c <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2400009c 	.word	0x2400009c
 8001104:	0000006c 	.word	0x0000006c
 8001108:	000041fc 	.word	0x000041fc
 800110c:	00000000 	.word	0x00000000

08001110 <HMC5883L_Get_Z_End_IT>:

void HMC5883L_Get_Z_End_IT(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
//	Mag_Z = (((int16_t)HMC5883L_Data_IT[2]<<8) | HMC5883L_Data_IT[3]) * 2.56;// 2.56 - scale
//	Mag_X = (((int16_t)HMC5883L_Data_IT[0]<<8) | HMC5883L_Data_IT[1]) * 2.56;
//	Mag_Y = (((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5]) * 2.56;
		Mag_X = (((int16_t)HMC5883L_Data_IT[1]<<8) | HMC5883L_Data_IT[0]) * 2.56;//important fake HMC5883L, msb -> lsb
 8001114:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	4a31      	ldr	r2, [pc, #196]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	4313      	orrs	r3, r2
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001128:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 800112c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001130:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001134:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (((int16_t)HMC5883L_Data_IT[3]<<8) | HMC5883L_Data_IT[2]) * 2.56;// 2.56 - scale
 800113a:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 800113c:	78db      	ldrb	r3, [r3, #3]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4a27      	ldr	r2, [pc, #156]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001142:	7892      	ldrb	r2, [r2, #2]
 8001144:	4313      	orrs	r3, r2
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800114e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001156:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HMC5883L_Get_Z_End_IT+0xd8>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Y = (((int16_t)HMC5883L_Data_IT[5]<<8) | HMC5883L_Data_IT[4]) * 2.56;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001168:	7912      	ldrb	r2, [r2, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001174:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001178:	ee27 7b06 	vmul.f64	d7, d7, d6
 800117c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HMC5883L_Get_Z_End_IT+0xdc>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
	heading = (atan2(Mag_X, Mag_Y))*180/M_PI;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HMC5883L_Get_Z_End_IT+0xdc>)
 8001192:	edd3 6a00 	vldr	s13, [r3]
 8001196:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800119a:	eeb0 1b46 	vmov.f64	d1, d6
 800119e:	eeb0 0b47 	vmov.f64	d0, d7
 80011a2:	f01c ffe9 	bl	801e178 <atan2>
 80011a6:	eeb0 7b40 	vmov.f64	d7, d0
 80011aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80011d0 <HMC5883L_Get_Z_End_IT+0xc0>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80011d8 <HMC5883L_Get_Z_End_IT+0xc8>
 80011b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	47ae147b 	.word	0x47ae147b
 80011cc:	40047ae1 	.word	0x40047ae1
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40668000 	.word	0x40668000
 80011d8:	54442d18 	.word	0x54442d18
 80011dc:	400921fb 	.word	0x400921fb
 80011e0:	0000006c 	.word	0x0000006c
 80011e4:	0000005c 	.word	0x0000005c
 80011e8:	00000054 	.word	0x00000054
 80011ec:	00000058 	.word	0x00000058
 80011f0:	00000060 	.word	0x00000060

080011f4 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 80011f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	e014      	b.n	8001238 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 800120e:	f7ff ff41 	bl	8001094 <HMC5883L_Get_Z_Start>
 8001212:	4603      	mov	r3, r0
 8001214:	b21b      	sxth	r3, r3
 8001216:	17da      	asrs	r2, r3, #31
 8001218:	461c      	mov	r4, r3
 800121a:	4615      	mov	r5, r2
 800121c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001220:	eb12 0804 	adds.w	r8, r2, r4
 8001224:	eb43 0905 	adc.w	r9, r3, r5
 8001228:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 800122c:	2064      	movs	r0, #100	@ 0x64
 800122e:	f007 ff51 	bl	80090d4 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b09      	cmp	r3, #9
 800123c:	dde7      	ble.n	800120e <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 800123e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001242:	f04f 020a 	mov.w	r2, #10
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	f7ff f861 	bl	8000310 <__aeabi_ldivmod>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	b213      	sxth	r3, r2
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001260 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 8001268:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <MPU6050_INIT+0x58>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 800126e:	f000 f825 	bl	80012bc <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 8001272:	f000 f88f 	bl	8001394 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 8001276:	2005      	movs	r0, #5
 8001278:	f000 f838 	bl	80012ec <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 800127c:	2008      	movs	r0, #8
 800127e:	f000 f851 	bl	8001324 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 8001282:	2008      	movs	r0, #8
 8001284:	f000 f86a 	bl	800135c <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 8001288:	f000 fc92 	bl	8001bb0 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 800128c:	f000 f89a 	bl	80013c4 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 8001290:	200a      	movs	r0, #10
 8001292:	f007 ff1f 	bl	80090d4 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 8001296:	f000 fc73 	bl	8001b80 <MPU6050_READ_ID>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b68      	cmp	r3, #104	@ 0x68
 80012a2:	d002      	beq.n	80012aa <MPU6050_INIT+0x4a>
		status = 0;//error
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	240000a0 	.word	0x240000a0

080012bc <MPU6050_RESET>:


void MPU6050_RESET(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MPU6050_RESET+0x2c>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	226b      	movs	r2, #107	@ 0x6b
 80012da:	21d0      	movs	r1, #208	@ 0xd0
 80012dc:	f00d f906 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240000a0 	.word	0x240000a0

080012ec <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MPU6050_CONFIG_DLPF+0x34>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 030f 	add.w	r3, r7, #15
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	221a      	movs	r2, #26
 8001310:	21d0      	movs	r1, #208	@ 0xd0
 8001312:	f00d f8eb 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240000a0 	.word	0x240000a0

08001324 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af04      	add	r7, sp, #16
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MPU6050_CONFIG_GYRO+0x34>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	221b      	movs	r2, #27
 8001348:	21d0      	movs	r1, #208	@ 0xd0
 800134a:	f00d f8cf 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	240000a0 	.word	0x240000a0

0800135c <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af04      	add	r7, sp, #16
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MPU6050_CONFIG_ACCEL+0x34>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 030f 	add.w	r3, r7, #15
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	221c      	movs	r2, #28
 8001380:	21d0      	movs	r1, #208	@ 0xd0
 8001382:	f00d f8b3 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240000a0 	.word	0x240000a0

08001394 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	2219      	movs	r2, #25
 80013b2:	21d0      	movs	r1, #208	@ 0xd0
 80013b4:	f00d f89a 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	240000a0 	.word	0x240000a0

080013c4 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	226a      	movs	r2, #106	@ 0x6a
 80013e2:	21d0      	movs	r1, #208	@ 0xd0
 80013e4:	f00d f882 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	240000a0 	.word	0x240000a0

080013f4 <MPU6050_CALIBRATION>:
//}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 1000; i++){ //5 sec
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	e071      	b.n	8001508 <MPU6050_CALIBRATION+0x114>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/MPU6050.Acc.Acc_Scale;
 8001424:	f000 fb28 	bl	8001a78 <MPU6050_GET_ACCEL_FULLVALUE_X>
 8001428:	4603      	mov	r3, r0
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001432:	4b59      	ldr	r3, [pc, #356]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 8001434:	ed93 7a06 	vldr	s14, [r3, #24]
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	edc7 7a07 	vstr	s15, [r7, #28]
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/MPU6050.Acc.Acc_Scale;
 8001448:	f000 fb36 	bl	8001ab8 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800144c:	4603      	mov	r3, r0
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001456:	4b50      	ldr	r3, [pc, #320]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 8001458:	ed93 7a06 	vldr	s14, [r3, #24]
 800145c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001460:	ed97 7a06 	vldr	s14, [r7, #24]
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	edc7 7a06 	vstr	s15, [r7, #24]
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/MPU6050.Acc.Acc_Scale;
 800146c:	f000 fb38 	bl	8001ae0 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 8001470:	4603      	mov	r3, r0
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800147a:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 800147c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001484:	ed97 7a05 	vldr	s14, [r7, #20]
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	edc7 7a05 	vstr	s15, [r7, #20]

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/MPU6050.Gyr.Gyr_Scale;
 8001490:	f000 fb3a 	bl	8001b08 <MPU6050_GET_GYRO_FULLVALUE_X>
 8001494:	4603      	mov	r3, r0
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800149e:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 80014a0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	edc7 7a04 	vstr	s15, [r7, #16]
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/MPU6050.Gyr.Gyr_Scale;
 80014b4:	f000 fb3c 	bl	8001b30 <MPU6050_GET_GYRO_FULLVALUE_Y>
 80014b8:	4603      	mov	r3, r0
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014c2:	4b35      	ldr	r3, [pc, #212]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 80014c4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	edc7 7a03 	vstr	s15, [r7, #12]
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/MPU6050.Gyr.Gyr_Scale;
 80014d8:	f000 fb3e 	bl	8001b58 <MPU6050_GET_GYRO_FULLVALUE_Z>
 80014dc:	4603      	mov	r3, r0
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 80014e8:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	edc7 7a02 	vstr	s15, [r7, #8]
		  HAL_Delay(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f007 fde9 	bl	80090d4 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3301      	adds	r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800150e:	db89      	blt.n	8001424 <MPU6050_CALIBRATION+0x30>
	}
	MPU6050.Acc.acc_x_cal = accelx/1000;
 8001510:	ed97 7a07 	vldr	s14, [r7, #28]
 8001514:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151c:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 800151e:	edc3 7a07 	vstr	s15, [r3, #28]
	MPU6050.Acc.acc_y_cal = accely/1000;
 8001522:	ed97 7a06 	vldr	s14, [r7, #24]
 8001526:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800152a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 8001530:	edc3 7a08 	vstr	s15, [r3, #32]
	MPU6050.Acc.acc_z_cal = accelz/1000;
 8001534:	ed97 7a05 	vldr	s14, [r7, #20]
 8001538:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800153c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001540:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 8001542:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Acc.acc_z_cal = 1 - MPU6050.Acc.acc_z_cal;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 8001548:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800154c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 8001556:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Gyr.gyr_x_cal = gyrox/1000;
 800155a:	ed97 7a04 	vldr	s14, [r7, #16]
 800155e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 8001568:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	MPU6050.Gyr.gyr_y_cal = gyroy/1000;
 800156c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001570:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 800157a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	MPU6050.Gyr.gyr_z_cal = gyroz/1000;
 800157e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001582:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158a:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <MPU6050_CALIBRATION+0x1a4>)
 800158c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	00000000 	.word	0x00000000
 800159c:	447a0000 	.word	0x447a0000

080015a0 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	float ang1 = sqrt((MPU6050.Acc.ax*MPU6050.Acc.ax)+(MPU6050.Acc.az*MPU6050.Acc.az));
 80015a6:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015a8:	ed93 7a00 	vldr	s14, [r3]
 80015ac:	4b40      	ldr	r3, [pc, #256]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b6:	4b3e      	ldr	r3, [pc, #248]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80015bc:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015be:	edd3 7a02 	vldr	s15, [r3, #8]
 80015c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	eeb0 0b47 	vmov.f64	d0, d7
 80015d2:	f01c fdd5 	bl	801e180 <sqrt>
 80015d6:	eeb0 7b40 	vmov.f64	d7, d0
 80015da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015de:	edc7 7a01 	vstr	s15, [r7, #4]
	float ang2 = sqrt((MPU6050.Acc.ay*MPU6050.Acc.ay)+(MPU6050.Acc.az*MPU6050.Acc.az));
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80015e8:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80015f8:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800160a:	eeb0 0b47 	vmov.f64	d0, d7
 800160e:	f01c fdb7 	bl	801e180 <sqrt>
 8001612:	eeb0 7b40 	vmov.f64	d7, d0
 8001616:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800161a:	edc7 7a00 	vstr	s15, [r7]

	MPU6050.Acc.ay_ang = ((-1*(atan(MPU6050.Acc.ax/ang2)))*180)/M_PI;
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001620:	edd3 6a00 	vldr	s13, [r3]
 8001624:	ed97 7a00 	vldr	s14, [r7]
 8001628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800162c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001630:	eeb0 0b47 	vmov.f64	d0, d7
 8001634:	f01c fdc4 	bl	801e1c0 <atan>
 8001638:	eeb0 7b40 	vmov.f64	d7, d0
 800163c:	eeb1 7b47 	vneg.f64	d7, d7
 8001640:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 80016a0 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 8001644:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001648:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 80016a8 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 800164c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001650:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001656:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.Acc.ax_ang = ((atan(MPU6050.Acc.ay/ang1))*180)/M_PI;
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800165c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001660:	ed97 7a01 	vldr	s14, [r7, #4]
 8001664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001668:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800166c:	eeb0 0b47 	vmov.f64	d0, d7
 8001670:	f01c fda6 	bl	801e1c0 <atan>
 8001674:	eeb0 7b40 	vmov.f64	d7, d0
 8001678:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80016a0 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 800167c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001680:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80016a8 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 8001684:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001688:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800168e:	edc3 7a03 	vstr	s15, [r3, #12]
//	axan = -1*(atan(ax/ang2));
//	ayan= atan(ay/ang1);
//
//	*ay_ang = (axan*180)/M_PI;
//	*ax_ang = (ayan*180)/M_PI;
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	f3af 8000 	nop.w
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40668000 	.word	0x40668000
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	400921fb 	.word	0x400921fb
 80016b0:	00000000 	.word	0x00000000

080016b4 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, MPU6050.I2C_Data, 14);
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	230e      	movs	r3, #14
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2301      	movs	r3, #1
 80016c8:	223b      	movs	r2, #59	@ 0x3b
 80016ca:	21d0      	movs	r1, #208	@ 0xd0
 80016cc:	f00d f9c6 	bl	800ea5c <HAL_I2C_Mem_Read_IT>
	MPU6050.MPU6050_IRQ = 1;
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x34>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52


}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	240000a0 	.word	0x240000a0
 80016e4:	00000044 	.word	0x00000044
 80016e8:	00000000 	.word	0x00000000

080016ec <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(void){
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	MPU6050.Acc.ax = (((int16_t)(MPU6050.I2C_Data[0]<<8) | MPU6050.I2C_Data[1])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_x_cal;
 80016f0:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80016fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001702:	4313      	orrs	r3, r2
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800170c:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800170e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001716:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001718:	edd3 7a07 	vldr	s15, [r3, #28]
 800171c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001720:	4b47      	ldr	r3, [pc, #284]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001722:	edc3 7a00 	vstr	s15, [r3]
	MPU6050.Acc.ay = (((int16_t)(MPU6050.I2C_Data[2]<<8) | MPU6050.I2C_Data[3])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_y_cal;
 8001726:	4b46      	ldr	r3, [pc, #280]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001728:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21b      	sxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	4b43      	ldr	r3, [pc, #268]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001734:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001738:	4313      	orrs	r3, r2
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001742:	4b3f      	ldr	r3, [pc, #252]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001744:	edd3 7a06 	vldr	s15, [r3, #24]
 8001748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800174c:	4b3c      	ldr	r3, [pc, #240]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800174e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001756:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001758:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU6050.Acc.az = (((int16_t)(MPU6050.I2C_Data[4]<<8) | MPU6050.I2C_Data[5])/MPU6050.Acc.Acc_Scale) + MPU6050.Acc.acc_z_cal;
 800175c:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800175e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	b21b      	sxth	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800176a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800176e:	4313      	orrs	r3, r2
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001778:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800177a:	edd3 7a06 	vldr	s15, [r3, #24]
 800177e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001782:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001784:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800178e:	edc3 7a02 	vstr	s15, [r3, #8]

	MPU6050.Gyr.gx = (((int16_t)(MPU6050.I2C_Data[8]<<8) | MPU6050.I2C_Data[9])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_x_cal;
 8001792:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001794:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21b      	sxth	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017a0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80017a4:	4313      	orrs	r3, r2
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017b0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017b8:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017ba:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017c4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	MPU6050.Gyr.gy = (((int16_t)(MPU6050.I2C_Data[10]<<8) | MPU6050.I2C_Data[11])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_y_cal;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017ca:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017d6:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 80017da:	4313      	orrs	r3, r2
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017e6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017f0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80017f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017fa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	MPU6050.Gyr.gz = (((int16_t)(MPU6050.I2C_Data[12]<<8) | MPU6050.I2C_Data[13])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_z_cal;
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001800:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21b      	sxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800180c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001810:	4313      	orrs	r3, r2
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800181c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001826:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001830:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	00000000 	.word	0x00000000

08001844 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float megz_ang){
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	ed87 0a00 	vstr	s0, [r7]
	Complementary_getFilter(Complementary_Filter_st, MPU6050.Acc.ax_ang, MPU6050.Acc.ay_ang, megz_ang, MPU6050.Gyr.gx, MPU6050.Gyr.gy, MPU6050.Gyr.gz);
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001852:	edd3 7a03 	vldr	s15, [r3, #12]
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001858:	ed93 7a04 	vldr	s14, [r3, #16]
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 800185e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001864:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 800186a:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 800186e:	eef0 2a65 	vmov.f32	s5, s11
 8001872:	eeb0 2a46 	vmov.f32	s4, s12
 8001876:	eef0 1a66 	vmov.f32	s3, s13
 800187a:	ed97 1a00 	vldr	s2, [r7]
 800187e:	eef0 0a47 	vmov.f32	s1, s14
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f9aa 	bl	8001be0 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	00000000 	.word	0x00000000

08001898 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <MPU6050_GET_ACCEL_YH+0x2c>)
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	2301      	movs	r3, #1
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2301      	movs	r3, #1
 80018b0:	223d      	movs	r2, #61	@ 0x3d
 80018b2:	21d0      	movs	r1, #208	@ 0xd0
 80018b4:	f00c ff2e 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	240000a0 	.word	0x240000a0

080018c8 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MPU6050_GET_ACCEL_YL+0x2c>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2301      	movs	r3, #1
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	223e      	movs	r2, #62	@ 0x3e
 80018e2:	21d0      	movs	r1, #208	@ 0xd0
 80018e4:	f00c ff16 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	240000a0 	.word	0x240000a0

080018f8 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	2301      	movs	r3, #1
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	2301      	movs	r3, #1
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	223f      	movs	r2, #63	@ 0x3f
 8001912:	21d0      	movs	r1, #208	@ 0xd0
 8001914:	f00c fefe 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 8001918:	79fb      	ldrb	r3, [r7, #7]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	240000a0 	.word	0x240000a0

08001928 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MPU6050_GET_ACCEL_ZL+0x2c>)
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	2301      	movs	r3, #1
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	2301      	movs	r3, #1
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2301      	movs	r3, #1
 8001940:	2240      	movs	r2, #64	@ 0x40
 8001942:	21d0      	movs	r1, #208	@ 0xd0
 8001944:	f00c fee6 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 8001948:	79fb      	ldrb	r3, [r7, #7]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	240000a0 	.word	0x240000a0

08001958 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MPU6050_GET_GYRO_XH+0x2c>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2301      	movs	r3, #1
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	2243      	movs	r2, #67	@ 0x43
 8001972:	21d0      	movs	r1, #208	@ 0xd0
 8001974:	f00c fece 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 8001978:	79fb      	ldrb	r3, [r7, #7]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	240000a0 	.word	0x240000a0

08001988 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MPU6050_GET_GYRO_XL+0x2c>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	2301      	movs	r3, #1
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	2244      	movs	r2, #68	@ 0x44
 80019a2:	21d0      	movs	r1, #208	@ 0xd0
 80019a4:	f00c feb6 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	240000a0 	.word	0x240000a0

080019b8 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <MPU6050_GET_GYRO_YH+0x2c>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	2301      	movs	r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	2245      	movs	r2, #69	@ 0x45
 80019d2:	21d0      	movs	r1, #208	@ 0xd0
 80019d4:	f00c fe9e 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	240000a0 	.word	0x240000a0

080019e8 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MPU6050_GET_GYRO_YL+0x2c>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	2301      	movs	r3, #1
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2301      	movs	r3, #1
 8001a00:	2246      	movs	r2, #70	@ 0x46
 8001a02:	21d0      	movs	r1, #208	@ 0xd0
 8001a04:	f00c fe86 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	240000a0 	.word	0x240000a0

08001a18 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <MPU6050_GET_GYRO_ZH+0x2c>)
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	2301      	movs	r3, #1
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2301      	movs	r3, #1
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2247      	movs	r2, #71	@ 0x47
 8001a32:	21d0      	movs	r1, #208	@ 0xd0
 8001a34:	f00c fe6e 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	240000a0 	.word	0x240000a0

08001a48 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <MPU6050_GET_GYRO_ZL+0x2c>)
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2301      	movs	r3, #1
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2248      	movs	r2, #72	@ 0x48
 8001a62:	21d0      	movs	r1, #208	@ 0xd0
 8001a64:	f00c fe56 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	240000a0 	.word	0x240000a0

08001a78 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	2302      	movs	r3, #2
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	223b      	movs	r2, #59	@ 0x3b
 8001a92:	21d0      	movs	r1, #208	@ 0xd0
 8001a94:	f00c fe3e 	bl	800e714 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001a98:	793b      	ldrb	r3, [r7, #4]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	80fb      	strh	r3, [r7, #6]
	return data;
 8001aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	240000a0 	.word	0x240000a0

08001ab8 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001abe:	f7ff feeb 	bl	8001898 <MPU6050_GET_ACCEL_YH>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	b21c      	sxth	r4, r3
 8001ac8:	f7ff fefe 	bl	80018c8 <MPU6050_GET_ACCEL_YL>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4323      	orrs	r3, r4
 8001ad2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}

08001ae0 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001ae6:	f7ff ff07 	bl	80018f8 <MPU6050_GET_ACCEL_ZH>
 8001aea:	4603      	mov	r3, r0
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b21c      	sxth	r4, r3
 8001af0:	f7ff ff1a 	bl	8001928 <MPU6050_GET_ACCEL_ZL>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4323      	orrs	r3, r4
 8001afa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b0e:	f7ff ff23 	bl	8001958 <MPU6050_GET_GYRO_XH>
 8001b12:	4603      	mov	r3, r0
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21c      	sxth	r4, r3
 8001b18:	f7ff ff36 	bl	8001988 <MPU6050_GET_GYRO_XL>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	4323      	orrs	r3, r4
 8001b22:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}

08001b30 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001b36:	f7ff ff3f 	bl	80019b8 <MPU6050_GET_GYRO_YH>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21c      	sxth	r4, r3
 8001b40:	f7ff ff52 	bl	80019e8 <MPU6050_GET_GYRO_YL>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4323      	orrs	r3, r4
 8001b4a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}

08001b58 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001b5e:	f7ff ff5b 	bl	8001a18 <MPU6050_GET_GYRO_ZH>
 8001b62:	4603      	mov	r3, r0
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b21c      	sxth	r4, r3
 8001b68:	f7ff ff6e 	bl	8001a48 <MPU6050_GET_GYRO_ZL>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4323      	orrs	r3, r4
 8001b72:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}

08001b80 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MPU6050_READ_ID+0x2c>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	2275      	movs	r2, #117	@ 0x75
 8001b9a:	21d0      	movs	r1, #208	@ 0xd0
 8001b9c:	f00c fdba 	bl	800e714 <HAL_I2C_Mem_Read>
	return data;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	b25b      	sxtb	r3, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	240000a0 	.word	0x240000a0

08001bb0 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2237      	movs	r2, #55	@ 0x37
 8001bce:	21d0      	movs	r1, #208	@ 0xd0
 8001bd0:	f00c fc8c 	bl	800e4ec <HAL_I2C_Mem_Write>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	240000a0 	.word	0x240000a0

08001be0 <Complementary_getFilter>:
	*VerVel += (VerAcc*looptime);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	61f8      	str	r0, [r7, #28]
 8001be8:	ed87 0a06 	vstr	s0, [r7, #24]
 8001bec:	edc7 0a05 	vstr	s1, [r7, #20]
 8001bf0:	ed87 1a04 	vstr	s2, [r7, #16]
 8001bf4:	edc7 1a03 	vstr	s3, [r7, #12]
 8001bf8:	ed87 2a02 	vstr	s4, [r7, #8]
 8001bfc:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001c00:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c08:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001cc8 <Complementary_getFilter+0xe8>
 8001c0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c10:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <Complementary_getFilter+0xf8>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c2c:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001cd0 <Complementary_getFilter+0xf0>
 8001c30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001c42:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c4a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001cc8 <Complementary_getFilter+0xe8>
 8001c4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c52:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <Complementary_getFilter+0xf8>)
 8001c54:	ed93 7a00 	vldr	s14, [r3]
 8001c58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c6e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001cd0 <Complementary_getFilter+0xf0>
 8001c72:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (((gz_ang*looptime)+Complementary_Filter_st->oz));//todo add magnetomiter?
 8001c84:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <Complementary_getFilter+0xf8>)
 8001c86:	ed93 7a00 	vldr	s14, [r3]
 8001c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	47ae147b 	.word	0x47ae147b
 8001ccc:	3f947ae1 	.word	0x3f947ae1
 8001cd0:	f5c28f5c 	.word	0xf5c28f5c
 8001cd4:	3fef5c28 	.word	0x3fef5c28
 8001cd8:	0801ebcc 	.word	0x0801ebcc

08001cdc <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f007 f9f4 	bl	80090d4 <HAL_Delay>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <nRF24_SendSpi+0x28>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	f012 fc79 	bl	8014604 <HAL_SPI_Transmit>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	240000a4 	.word	0x240000a4

08001d20 <nRF24_SendSpi_IT>:
static void nRF24_SendSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit_IT(hspi_nrf, Data, Length);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <nRF24_SendSpi_IT+0x24>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	b292      	uxth	r2, r2
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f013 fbfe 	bl	8015538 <HAL_SPI_Transmit_IT>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	240000a4 	.word	0x240000a4

08001d48 <nRF24_ReadSpi>:


static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <nRF24_ReadSpi+0x28>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	f012 fe3d 	bl	80149e0 <HAL_SPI_Receive>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	240000a4 	.word	0x240000a4

08001d74 <nRF24_ReadSpi_IT>:
static void nRF24_ReadSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive_IT(hspi_nrf, Data, Length);
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <nRF24_ReadSpi_IT+0x24>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	b292      	uxth	r2, r2
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f013 fc7e 	bl	801568c <HAL_SPI_Receive_IT>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	240000a4 	.word	0x240000a4

08001d9c <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001daa:	2200      	movs	r2, #0
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <nRF24_ReadRegister+0x44>)
 8001db0:	f00c facc 	bl	800e34c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	2101      	movs	r1, #1
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff9b 	bl	8001cf4 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001dbe:	f107 030f 	add.w	r3, r7, #15
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ffbf 	bl	8001d48 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	4804      	ldr	r0, [pc, #16]	@ (8001de0 <nRF24_ReadRegister+0x44>)
 8001dd0:	f00c fabc 	bl	800e34c <HAL_GPIO_WritePin>

	return result;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	58020400 	.word	0x58020400

08001de4 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	4613      	mov	r3, r2
 8001df2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2180      	movs	r1, #128	@ 0x80
 8001dfc:	480a      	ldr	r0, [pc, #40]	@ (8001e28 <nRF24_ReadRegisters+0x44>)
 8001dfe:	f00c faa5 	bl	800e34c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	2101      	movs	r1, #1
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff74 	bl	8001cf4 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e0c:	79bb      	ldrb	r3, [r7, #6]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f7ff ff99 	bl	8001d48 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e16:	2201      	movs	r2, #1
 8001e18:	2180      	movs	r1, #128	@ 0x80
 8001e1a:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <nRF24_ReadRegisters+0x44>)
 8001e1c:	f00c fa96 	bl	800e34c <HAL_GPIO_WritePin>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	58020400 	.word	0x58020400

08001e2c <nRF24_ReadRegisters_IT>:

static void nRF24_ReadRegisters_IT(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e40:	2200      	movs	r2, #0
 8001e42:	2180      	movs	r1, #128	@ 0x80
 8001e44:	480a      	ldr	r0, [pc, #40]	@ (8001e70 <nRF24_ReadRegisters_IT+0x44>)
 8001e46:	f00c fa81 	bl	800e34c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff50 	bl	8001cf4 <nRF24_SendSpi>
	nRF24_ReadSpi_IT(ret, len);
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	4619      	mov	r1, r3
 8001e58:	6838      	ldr	r0, [r7, #0]
 8001e5a:	f7ff ff8b 	bl	8001d74 <nRF24_ReadSpi_IT>

	NRF24.SPI_Rx_Inte = 1;
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <nRF24_ReadRegisters_IT+0x48>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	//NRF24_CSN_HIGH;
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	58020400 	.word	0x58020400
 8001e74:	000000fc 	.word	0x000000fc

08001e78 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f043 0320 	orr.w	r3, r3, #32
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e96:	2200      	movs	r2, #0
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	4809      	ldr	r0, [pc, #36]	@ (8001ec0 <nRF24_WriteRegister+0x48>)
 8001e9c:	f00c fa56 	bl	800e34c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff24 	bl	8001cf4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001eac:	2201      	movs	r2, #1
 8001eae:	2180      	movs	r1, #128	@ 0x80
 8001eb0:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <nRF24_WriteRegister+0x48>)
 8001eb2:	f00c fa4b 	bl	800e34c <HAL_GPIO_WritePin>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	58020400 	.word	0x58020400

08001ec4 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f043 0320 	orr.w	r3, r3, #32
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2180      	movs	r1, #128	@ 0x80
 8001ee2:	480b      	ldr	r0, [pc, #44]	@ (8001f10 <nRF24_WriteRegisters+0x4c>)
 8001ee4:	f00c fa32 	bl	800e34c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	2101      	movs	r1, #1
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff01 	bl	8001cf4 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6838      	ldr	r0, [r7, #0]
 8001ef8:	f7ff fefc 	bl	8001cf4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001efc:	2201      	movs	r2, #1
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	4803      	ldr	r0, [pc, #12]	@ (8001f10 <nRF24_WriteRegisters+0x4c>)
 8001f02:	f00c fa23 	bl	800e34c <HAL_GPIO_WritePin>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	58020400 	.word	0x58020400

08001f14 <nRF24_WriteRegisters_IT>:

static void nRF24_WriteRegisters_IT(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2180      	movs	r1, #128	@ 0x80
 8001f32:	480a      	ldr	r0, [pc, #40]	@ (8001f5c <nRF24_WriteRegisters_IT+0x48>)
 8001f34:	f00c fa0a 	bl	800e34c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fed9 	bl	8001cf4 <nRF24_SendSpi>
	nRF24_SendSpi_IT(val, len);
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	4619      	mov	r1, r3
 8001f46:	6838      	ldr	r0, [r7, #0]
 8001f48:	f7ff feea 	bl	8001d20 <nRF24_SendSpi_IT>

	NRF24.SPI_Tx_Inte = 1;
 8001f4c:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <nRF24_WriteRegisters_IT+0x4c>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	//NRF24_CSN_HIGH;
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	58020400 	.word	0x58020400
 8001f60:	000000fc 	.word	0x000000fc

08001f64 <nRF24_RX_Mode>:



void nRF24_RX_Mode(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <nRF24_RX_Mode+0x60>)
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	uint8_t config = nRF24_ReadConfig();
 8001f72:	f000 f85d 	bl	8002030 <nRF24_ReadConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f7a:	4913      	ldr	r1, [pc, #76]	@ (8001fc8 <nRF24_RX_Mode+0x64>)
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f000 fa06 	bl	800238e <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f853 	bl	8002040 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f9a:	2070      	movs	r0, #112	@ 0x70
 8001f9c:	f000 f8ab 	bl	80020f6 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001fa0:	f000 f8b8 	bl	8002114 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001fa4:	f000 f8d0 	bl	8002148 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2140      	movs	r1, #64	@ 0x40
 8001fac:	4807      	ldr	r0, [pc, #28]	@ (8001fcc <nRF24_RX_Mode+0x68>)
 8001fae:	f00c f9cd 	bl	800e34c <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <nRF24_RX_Mode+0x60>)
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	000000fc 	.word	0x000000fc
 8001fc8:	240000a8 	.word	0x240000a8
 8001fcc:	58020400 	.word	0x58020400

08001fd0 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <nRF24_TX_Mode+0x58>)
 8001fd8:	2205      	movs	r2, #5
 8001fda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24_CE_LOW;
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2140      	movs	r1, #64	@ 0x40
 8001fe2:	4812      	ldr	r0, [pc, #72]	@ (800202c <nRF24_TX_Mode+0x5c>)
 8001fe4:	f00c f9b2 	bl	800e34c <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001fe8:	f000 f822 	bl	8002030 <nRF24_ReadConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f81c 	bl	8002040 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002008:	2070      	movs	r0, #112	@ 0x70
 800200a:	f000 f874 	bl	80020f6 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800200e:	f000 f881 	bl	8002114 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002012:	f000 f899 	bl	8002148 <nRF24_FlushTX>
	//important wait 2ms for next interactionw with NRF24
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8002016:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <nRF24_TX_Mode+0x58>)
 8002018:	2203      	movs	r2, #3
 800201a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	000000fc 	.word	0x000000fc
 800202c:	58020400 	.word	0x58020400

08002030 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff feb1 	bl	8001d9c <nRF24_ReadRegister>
 800203a:	4603      	mov	r3, r0
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}

08002040 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4619      	mov	r1, r3
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff ff12 	bl	8001e78 <nRF24_WriteRegister>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002066:	2006      	movs	r0, #6
 8002068:	f7ff fe98 	bl	8001d9c <nRF24_ReadRegister>
 800206c:	4603      	mov	r3, r0
 800206e:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	f023 0307 	bic.w	r3, r3, #7
 8002076:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	b25a      	sxtb	r2, r3
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002082:	4313      	orrs	r3, r2
 8002084:	b25b      	sxtb	r3, r3
 8002086:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	4619      	mov	r1, r3
 800208c:	2006      	movs	r0, #6
 800208e:	f7ff fef3 	bl	8001e78 <nRF24_WriteRegister>
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80020a4:	2006      	movs	r0, #6
 80020a6:	f7ff fe79 	bl	8001d9c <nRF24_ReadRegister>
 80020aa:	4603      	mov	r3, r0
 80020ac:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80020b4:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d104      	bne.n	80020c6 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	f043 0320 	orr.w	r3, r3, #32
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e006      	b.n	80020d4 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d103      	bne.n	80020d4 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	4619      	mov	r1, r3
 80020d8:	2006      	movs	r0, #6
 80020da:	f7ff fecd 	bl	8001e78 <nRF24_WriteRegister>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80020ea:	2007      	movs	r0, #7
 80020ec:	f7ff fe56 	bl	8001d9c <nRF24_ReadRegister>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4619      	mov	r1, r3
 8002104:	2007      	movs	r0, #7
 8002106:	f7ff feb7 	bl	8001e78 <nRF24_WriteRegister>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800211a:	23e2      	movs	r3, #226	@ 0xe2
 800211c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800211e:	2200      	movs	r2, #0
 8002120:	2180      	movs	r1, #128	@ 0x80
 8002122:	4808      	ldr	r0, [pc, #32]	@ (8002144 <nRF24_FlushRX+0x30>)
 8002124:	f00c f912 	bl	800e34c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fde1 	bl	8001cf4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002132:	2201      	movs	r2, #1
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	4803      	ldr	r0, [pc, #12]	@ (8002144 <nRF24_FlushRX+0x30>)
 8002138:	f00c f908 	bl	800e34c <HAL_GPIO_WritePin>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	58020400 	.word	0x58020400

08002148 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800214e:	23e1      	movs	r3, #225	@ 0xe1
 8002150:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002152:	2200      	movs	r2, #0
 8002154:	2180      	movs	r1, #128	@ 0x80
 8002156:	4808      	ldr	r0, [pc, #32]	@ (8002178 <nRF24_FlushTX+0x30>)
 8002158:	f00c f8f8 	bl	800e34c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800215c:	1dfb      	adds	r3, r7, #7
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fdc7 	bl	8001cf4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002166:	2201      	movs	r2, #1
 8002168:	2180      	movs	r1, #128	@ 0x80
 800216a:	4803      	ldr	r0, [pc, #12]	@ (8002178 <nRF24_FlushTX+0x30>)
 800216c:	f00c f8ee 	bl	800e34c <HAL_GPIO_WritePin>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	58020400 	.word	0x58020400

0800217c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002186:	f7ff ff53 	bl	8002030 <nRF24_ReadConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e003      	b.n	80021a6 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	f023 0308 	bic.w	r3, r3, #8
 80021a4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff49 	bl	8002040 <nRF24_WriteConfig>
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021c0:	f7ff ff36 	bl	8002030 <nRF24_ReadConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d104      	bne.n	80021d8 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e003      	b.n	80021e0 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	f023 0304 	bic.w	r3, r3, #4
 80021de:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff2c 	bl	8002040 <nRF24_WriteConfig>
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	460a      	mov	r2, r1
 80021fa:	71fb      	strb	r3, [r7, #7]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	b25a      	sxtb	r2, r3
 8002206:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	b25b      	sxtb	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b25b      	sxtb	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4619      	mov	r1, r3
 8002218:	2004      	movs	r0, #4
 800221a:	f7ff fe2d 	bl	8001e78 <nRF24_WriteRegister>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	2005      	movs	r0, #5
 800223c:	f7ff fe1c 	bl	8001e78 <nRF24_WriteRegister>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b05      	cmp	r3, #5
 800225c:	d901      	bls.n	8002262 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 800225e:	2305      	movs	r3, #5
 8002260:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	3311      	adds	r3, #17
 8002266:	b2da      	uxtb	r2, r3
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f7ff fe00 	bl	8001e78 <nRF24_WriteRegister>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	460a      	mov	r2, r1
 800228a:	71fb      	strb	r3, [r7, #7]
 800228c:	4613      	mov	r3, r2
 800228e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d901      	bls.n	800229a <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002296:	2305      	movs	r3, #5
 8002298:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800229a:	2002      	movs	r0, #2
 800229c:	f7ff fd7e 	bl	8001d9c <nRF24_ReadRegister>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10a      	bne.n	80022c0 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	2201      	movs	r2, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	b25a      	sxtb	r2, r3
 80022b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	e00b      	b.n	80022d8 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2201      	movs	r2, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	b25a      	sxtb	r2, r3
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	4013      	ands	r3, r2
 80022d4:	b25b      	sxtb	r3, r3
 80022d6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	4619      	mov	r1, r3
 80022dc:	2002      	movs	r0, #2
 80022de:	f7ff fdcb 	bl	8001e78 <nRF24_WriteRegister>
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	460a      	mov	r2, r1
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	4613      	mov	r3, r2
 80022f8:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d901      	bls.n	8002304 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002300:	2305      	movs	r3, #5
 8002302:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002304:	2001      	movs	r0, #1
 8002306:	f7ff fd49 	bl	8001d9c <nRF24_ReadRegister>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d10a      	bne.n	800232a <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2201      	movs	r2, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	b25a      	sxtb	r2, r3
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4313      	orrs	r3, r2
 8002324:	b25b      	sxtb	r3, r3
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e00b      	b.n	8002342 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2201      	movs	r2, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	b25b      	sxtb	r3, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	b25a      	sxtb	r2, r3
 8002338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233c:	4013      	ands	r3, r2
 800233e:	b25b      	sxtb	r3, r3
 8002340:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4619      	mov	r1, r3
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff fd96 	bl	8001e78 <nRF24_WriteRegister>
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d901      	bls.n	8002368 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002364:	2305      	movs	r3, #5
 8002366:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d801      	bhi.n	8002372 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800236e:	2303      	movs	r3, #3
 8002370:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	3b02      	subs	r3, #2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4619      	mov	r1, r3
 8002380:	2003      	movs	r0, #3
 8002382:	f7ff fd79 	bl	8001e78 <nRF24_WriteRegister>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	6039      	str	r1, [r7, #0]
 8002398:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <nRF24_SetRXAddress+0x18>
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d11d      	bne.n	80023e2 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e00d      	b.n	80023c8 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	441a      	add	r2, r3
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	f1c3 0302 	rsb	r3, r3, #2
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	3310      	adds	r3, #16
 80023bc:	443b      	add	r3, r7
 80023be:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	3301      	adds	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d9ee      	bls.n	80023ac <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	330a      	adds	r3, #10
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f107 010c 	add.w	r1, r7, #12
 80023d8:	2203      	movs	r2, #3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fd72 	bl	8001ec4 <nRF24_WriteRegisters>
	{
 80023e0:	e00a      	b.n	80023f8 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	330a      	adds	r3, #10
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	3302      	adds	r3, #2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	4610      	mov	r0, r2
 80023f2:	f7ff fd41 	bl	8001e78 <nRF24_WriteRegister>
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	2203      	movs	r2, #3
 800240e:	4619      	mov	r1, r3
 8002410:	200a      	movs	r0, #10
 8002412:	f7ff fce7 	bl	8001de4 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e00c      	b.n	8002436 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	f1c3 0302 	rsb	r3, r3, #2
 8002424:	3210      	adds	r2, #16
 8002426:	443a      	add	r2, r7
 8002428:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800242c:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <nRF24_SetTXAddress+0x88>)
 800242e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	3301      	adds	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d9ef      	bls.n	800241c <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e00d      	b.n	800245e <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	441a      	add	r2, r3
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f1c3 0302 	rsb	r3, r3, #2
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	3310      	adds	r3, #16
 8002452:	443b      	add	r3, r7
 8002454:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d9ee      	bls.n	8002442 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	2203      	movs	r2, #3
 800246a:	4619      	mov	r1, r3
 800246c:	200a      	movs	r0, #10
 800246e:	f7ff fd29 	bl	8001ec4 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	2203      	movs	r2, #3
 8002478:	4619      	mov	r1, r3
 800247a:	2010      	movs	r0, #16
 800247c:	f7ff fd22 	bl	8001ec4 <nRF24_WriteRegisters>

}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	240000a8 	.word	0x240000a8

0800248c <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002492:	f7ff fe28 	bl	80020e6 <nRF24_ReadStatus>
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80024a0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fe26 	bl	80020f6 <nRF24_WriteStatus>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024bc:	f7ff fdb8 	bl	8002030 <nRF24_ReadConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e003      	b.n	80024dc <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024da:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fdae 	bl	8002040 <nRF24_WriteConfig>
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024f6:	f7ff fd9b 	bl	8002030 <nRF24_ReadConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	f043 0320 	orr.w	r3, r3, #32
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e003      	b.n	8002516 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	f023 0320 	bic.w	r3, r3, #32
 8002514:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fd91 	bl	8002040 <nRF24_WriteConfig>
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002530:	f7ff fd7e 	bl	8002030 <nRF24_ReadConfig>
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	f043 0310 	orr.w	r3, r3, #16
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e003      	b.n	8002550 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	f023 0310 	bic.w	r3, r3, #16
 800254e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fd74 	bl	8002040 <nRF24_WriteConfig>
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002568:	2220      	movs	r2, #32
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	20a0      	movs	r0, #160	@ 0xa0
 800256e:	f7ff fca9 	bl	8001ec4 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <nRF24_WriteTXPayload_IT>:

void nRF24_WriteTXPayload_IT(uint8_t * data)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <nRF24_WriteTXPayload_IT+0x24>)
 8002586:	2205      	movs	r2, #5
 8002588:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_WriteRegisters_IT(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800258c:	2220      	movs	r2, #32
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	20a0      	movs	r0, #160	@ 0xa0
 8002592:	f7ff fcbf 	bl	8001f14 <nRF24_WriteRegisters_IT>
	//nRF24_WaitTX();
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	000000fc 	.word	0x000000fc

080025a4 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80025aa:	2201      	movs	r2, #1
 80025ac:	2140      	movs	r1, #64	@ 0x40
 80025ae:	4810      	ldr	r0, [pc, #64]	@ (80025f0 <nRF24_WaitTX+0x4c>)
 80025b0:	f00b fecc 	bl	800e34c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7ff fb91 	bl	8001cdc <nRF24_Delay>
	NRF24_CE_LOW;
 80025ba:	2200      	movs	r2, #0
 80025bc:	2140      	movs	r1, #64	@ 0x40
 80025be:	480c      	ldr	r0, [pc, #48]	@ (80025f0 <nRF24_WaitTX+0x4c>)
 80025c0:	f00b fec4 	bl	800e34c <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7ff fb89 	bl	8001cdc <nRF24_Delay>
		status = nRF24_ReadStatus();
 80025ca:	f7ff fd8c 	bl	80020e6 <nRF24_ReadStatus>
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d104      	bne.n	80025e6 <nRF24_WaitTX+0x42>
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ee      	beq.n	80025c4 <nRF24_WaitTX+0x20>

}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	58020400 	.word	0x58020400

080025f4 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80025fc:	2220      	movs	r2, #32
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	2061      	movs	r0, #97	@ 0x61
 8002602:	f7ff fbef 	bl	8001de4 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002606:	2140      	movs	r1, #64	@ 0x40
 8002608:	2007      	movs	r0, #7
 800260a:	f7ff fc35 	bl	8001e78 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800260e:	f7ff fd6a 	bl	80020e6 <nRF24_ReadStatus>
 8002612:	4603      	mov	r3, r0
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 800261c:	2120      	movs	r1, #32
 800261e:	2007      	movs	r0, #7
 8002620:	f7ff fc2a 	bl	8001e78 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <nRF24_ReadRXPaylaod_IT>:

void nRF24_ReadRXPaylaod_IT(uint8_t *data){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <nRF24_ReadRXPaylaod_IT+0x24>)
 8002636:	2205      	movs	r2, #5
 8002638:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_ReadRegisters_IT(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800263c:	2220      	movs	r2, #32
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	2061      	movs	r0, #97	@ 0x61
 8002642:	f7ff fbf3 	bl	8001e2c <nRF24_ReadRegisters_IT>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	000000fc 	.word	0x000000fc

08002654 <nRF24_ReadRXPaylaod_IT_End>:

void nRF24_ReadRXPaylaod_IT_End(void){
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	NRF24_CSN_HIGH;
 8002658:	2201      	movs	r2, #1
 800265a:	2180      	movs	r1, #128	@ 0x80
 800265c:	480b      	ldr	r0, [pc, #44]	@ (800268c <nRF24_ReadRXPaylaod_IT_End+0x38>)
 800265e:	f00b fe75 	bl	800e34c <HAL_GPIO_WritePin>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002662:	2140      	movs	r1, #64	@ 0x40
 8002664:	2007      	movs	r0, #7
 8002666:	f7ff fc07 	bl	8001e78 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800266a:	f7ff fd3c 	bl	80020e6 <nRF24_ReadStatus>
 800266e:	4603      	mov	r3, r0
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <nRF24_ReadRXPaylaod_IT_End+0x2c>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002678:	2120      	movs	r1, #32
 800267a:	2007      	movs	r0, #7
 800267c:	f7ff fbfc 	bl	8001e78 <nRF24_WriteRegister>
	}
	NRF24.Status = NRF24_Ready;
 8002680:	4b03      	ldr	r3, [pc, #12]	@ (8002690 <nRF24_ReadRXPaylaod_IT_End+0x3c>)
 8002682:	2204      	movs	r2, #4
 8002684:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58020400 	.word	0x58020400
 8002690:	000000fc 	.word	0x000000fc

08002694 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 800269e:	f000 f811 	bl	80026c4 <nRF24_ReadFifoStatus>
 80026a2:	4603      	mov	r3, r0
 80026a4:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	fa42 f303 	asr.w	r3, r2, r3
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80026c8:	2017      	movs	r0, #23
 80026ca:	f7ff fb67 	bl	8001d9c <nRF24_ReadRegister>
 80026ce:	4603      	mov	r3, r0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80026dc:	4a25      	ldr	r2, [pc, #148]	@ (8002774 <nRF24_Init+0xa0>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80026e2:	2200      	movs	r2, #0
 80026e4:	2140      	movs	r1, #64	@ 0x40
 80026e6:	4824      	ldr	r0, [pc, #144]	@ (8002778 <nRF24_Init+0xa4>)
 80026e8:	f00b fe30 	bl	800e34c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80026ec:	2201      	movs	r2, #1
 80026ee:	2180      	movs	r1, #128	@ 0x80
 80026f0:	4821      	ldr	r0, [pc, #132]	@ (8002778 <nRF24_Init+0xa4>)
 80026f2:	f00b fe2b 	bl	800e34c <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80026f6:	200a      	movs	r0, #10
 80026f8:	f006 fcec 	bl	80090d4 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80026fc:	2003      	movs	r0, #3
 80026fe:	f7ff fcad 	bl	800205c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff fcc9 	bl	800209a <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002708:	2001      	movs	r0, #1
 800270a:	f7ff fd37 	bl	800217c <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff fd51 	bl	80021b6 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 8002714:	2100      	movs	r1, #0
 8002716:	2000      	movs	r0, #0
 8002718:	f7ff fd6a 	bl	80021f0 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 800271c:	2100      	movs	r1, #0
 800271e:	201c      	movs	r0, #28
 8002720:	f7ff fbaa 	bl	8001e78 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002724:	2120      	movs	r1, #32
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff fd8e 	bl	8002248 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 800272c:	200f      	movs	r0, #15
 800272e:	f7ff fd7a 	bl	8002226 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002732:	2101      	movs	r1, #1
 8002734:	2000      	movs	r0, #0
 8002736:	f7ff fda3 	bl	8002280 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800273a:	2101      	movs	r1, #1
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff fdd4 	bl	80022ea <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002742:	2003      	movs	r0, #3
 8002744:	f7ff fe06 	bl	8002354 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 8002748:	2001      	movs	r0, #1
 800274a:	f006 fcc3 	bl	80090d4 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 800274e:	2001      	movs	r0, #1
 8002750:	f7ff feaf 	bl	80024b2 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff fec9 	bl	80024ec <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff fee3 	bl	8002526 <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002760:	2001      	movs	r0, #1
 8002762:	f006 fcb7 	bl	80090d4 <HAL_Delay>

	nRF24_ClearInterrupts();
 8002766:	f7ff fe91 	bl	800248c <nRF24_ClearInterrupts>


}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	240000a4 	.word	0x240000a4
 8002778:	58020400 	.word	0x58020400

0800277c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002780:	f3bf 8f4f 	dsb	sy
}
 8002784:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <__NVIC_SystemReset+0x24>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800278e:	4904      	ldr	r1, [pc, #16]	@ (80027a0 <__NVIC_SystemReset+0x24>)
 8002790:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <__NVIC_SystemReset+0x28>)
 8002792:	4313      	orrs	r3, r2
 8002794:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002796:	f3bf 8f4f 	dsb	sy
}
 800279a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <__NVIC_SystemReset+0x20>
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	05fa0004 	.word	0x05fa0004

080027a8 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]
 80027b2:	2300      	movs	r3, #0
 80027b4:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80027b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <interpretcommand+0x8c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e02e      	b.n	8002820 <interpretcommand+0x78>

		if(words[j] == ' '){
 80027c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <interpretcommand+0x90>)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d102      	bne.n	80027d4 <interpretcommand+0x2c>
			vcount++;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	3301      	adds	r3, #1
 80027d2:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <interpretcommand+0x44>
			command[j] = words[j];
 80027da:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <interpretcommand+0x90>)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	7819      	ldrb	r1, [r3, #0]
 80027e2:	4a16      	ldr	r2, [pc, #88]	@ (800283c <interpretcommand+0x94>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	460a      	mov	r2, r1
 80027ea:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d113      	bne.n	800281a <interpretcommand+0x72>
			value1[J1] = words[j];
 80027f2:	7dbb      	ldrb	r3, [r7, #22]
 80027f4:	4910      	ldr	r1, [pc, #64]	@ (8002838 <interpretcommand+0x90>)
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	440a      	add	r2, r1
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	3318      	adds	r3, #24
 80027fe:	443b      	add	r3, r7
 8002800:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002804:	7dba      	ldrb	r2, [r7, #22]
 8002806:	7dbb      	ldrb	r3, [r7, #22]
 8002808:	3218      	adds	r2, #24
 800280a:	443a      	add	r2, r7
 800280c:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002810:	4a0b      	ldr	r2, [pc, #44]	@ (8002840 <interpretcommand+0x98>)
 8002812:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002814:	7dbb      	ldrb	r3, [r7, #22]
 8002816:	3301      	adds	r3, #1
 8002818:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	3301      	adds	r3, #1
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b4f      	cmp	r3, #79	@ 0x4f
 8002824:	ddcd      	ble.n	80027c2 <interpretcommand+0x1a>
		}
	}
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	000041e6 	.word	0x000041e6
 8002838:	000041dc 	.word	0x000041dc
 800283c:	000041d8 	.word	0x000041d8
 8002840:	000041c8 	.word	0x000041c8

08002844 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b50      	cmp	r3, #80	@ 0x50
 8002854:	d14c      	bne.n	80028f0 <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002856:	4bd5      	ldr	r3, [pc, #852]	@ (8002bac <executecommand+0x368>)
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002862:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002bb0 <executecommand+0x36c>
 8002866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800286a:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002bb4 <executecommand+0x370>
 800286e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002872:	4bce      	ldr	r3, [pc, #824]	@ (8002bac <executecommand+0x368>)
 8002874:	789b      	ldrb	r3, [r3, #2]
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287e:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002bb0 <executecommand+0x36c>
 8002882:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002886:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800288a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800288e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002892:	4bc6      	ldr	r3, [pc, #792]	@ (8002bac <executecommand+0x368>)
 8002894:	78db      	ldrb	r3, [r3, #3]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289e:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002bb0 <executecommand+0x36c>
 80028a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028aa:	4bc0      	ldr	r3, [pc, #768]	@ (8002bac <executecommand+0x368>)
 80028ac:	791b      	ldrb	r3, [r3, #4]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002bb0 <executecommand+0x36c>
 80028ba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028be:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80028c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ca:	4bb8      	ldr	r3, [pc, #736]	@ (8002bac <executecommand+0x368>)
 80028cc:	795b      	ldrb	r3, [r3, #5]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d6:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002bb0 <executecommand+0x36c>
 80028da:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028de:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002bb4 <executecommand+0x370>
 80028e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	4bb3      	ldr	r3, [pc, #716]	@ (8002bb8 <executecommand+0x374>)
 80028ec:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b49      	cmp	r3, #73	@ 0x49
 80028f6:	d14f      	bne.n	8002998 <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80028f8:	4bac      	ldr	r3, [pc, #688]	@ (8002bac <executecommand+0x368>)
 80028fa:	785b      	ldrb	r3, [r3, #1]
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002904:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002bb0 <executecommand+0x36c>
 8002908:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800290c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002bb4 <executecommand+0x370>
 8002910:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002914:	4ba5      	ldr	r3, [pc, #660]	@ (8002bac <executecommand+0x368>)
 8002916:	789b      	ldrb	r3, [r3, #2]
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002920:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002bb0 <executecommand+0x36c>
 8002924:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002928:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800292c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002934:	4b9d      	ldr	r3, [pc, #628]	@ (8002bac <executecommand+0x368>)
 8002936:	78db      	ldrb	r3, [r3, #3]
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002940:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002bb0 <executecommand+0x36c>
 8002944:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800294c:	4b97      	ldr	r3, [pc, #604]	@ (8002bac <executecommand+0x368>)
 800294e:	791b      	ldrb	r3, [r3, #4]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002958:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002bb0 <executecommand+0x36c>
 800295c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002960:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002964:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296c:	4b8f      	ldr	r3, [pc, #572]	@ (8002bac <executecommand+0x368>)
 800296e:	795b      	ldrb	r3, [r3, #5]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002978:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002bb0 <executecommand+0x36c>
 800297c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002980:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002bb4 <executecommand+0x370>
 8002984:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	4b8b      	ldr	r3, [pc, #556]	@ (8002bbc <executecommand+0x378>)
 800298e:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002992:	4b8b      	ldr	r3, [pc, #556]	@ (8002bc0 <executecommand+0x37c>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b44      	cmp	r3, #68	@ 0x44
 800299e:	d14c      	bne.n	8002a3a <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80029a0:	4b82      	ldr	r3, [pc, #520]	@ (8002bac <executecommand+0x368>)
 80029a2:	785b      	ldrb	r3, [r3, #1]
 80029a4:	ee07 3a90 	vmov	s15, r3
 80029a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ac:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002bb0 <executecommand+0x36c>
 80029b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029b4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002bc4 <executecommand+0x380>
 80029b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029bc:	4b7b      	ldr	r3, [pc, #492]	@ (8002bac <executecommand+0x368>)
 80029be:	789b      	ldrb	r3, [r3, #2]
 80029c0:	ee07 3a90 	vmov	s15, r3
 80029c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c8:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002bb0 <executecommand+0x36c>
 80029cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029d0:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002bb4 <executecommand+0x370>
 80029d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029dc:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <executecommand+0x368>)
 80029de:	78db      	ldrb	r3, [r3, #3]
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e8:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002bb0 <executecommand+0x36c>
 80029ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029f0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029fc:	4b6b      	ldr	r3, [pc, #428]	@ (8002bac <executecommand+0x368>)
 80029fe:	791b      	ldrb	r3, [r3, #4]
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a08:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002bb0 <executecommand+0x36c>
 8002a0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a14:	4b65      	ldr	r3, [pc, #404]	@ (8002bac <executecommand+0x368>)
 8002a16:	795b      	ldrb	r3, [r3, #5]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a20:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002bb0 <executecommand+0x36c>
 8002a24:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a28:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a34:	4b64      	ldr	r3, [pc, #400]	@ (8002bc8 <executecommand+0x384>)
 8002a36:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b70      	cmp	r3, #112	@ 0x70
 8002a40:	d14c      	bne.n	8002adc <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a42:	4b5a      	ldr	r3, [pc, #360]	@ (8002bac <executecommand+0x368>)
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002bb0 <executecommand+0x36c>
 8002a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a56:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002bb4 <executecommand+0x370>
 8002a5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a5e:	4b53      	ldr	r3, [pc, #332]	@ (8002bac <executecommand+0x368>)
 8002a60:	789b      	ldrb	r3, [r3, #2]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002bb0 <executecommand+0x36c>
 8002a6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a72:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <executecommand+0x368>)
 8002a80:	78db      	ldrb	r3, [r3, #3]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002bb0 <executecommand+0x36c>
 8002a8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a96:	4b45      	ldr	r3, [pc, #276]	@ (8002bac <executecommand+0x368>)
 8002a98:	791b      	ldrb	r3, [r3, #4]
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002bb0 <executecommand+0x36c>
 8002aa6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002aaa:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002aae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <executecommand+0x368>)
 8002ab8:	795b      	ldrb	r3, [r3, #5]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002bb0 <executecommand+0x36c>
 8002ac6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002aca:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002bb4 <executecommand+0x370>
 8002ace:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bcc <executecommand+0x388>)
 8002ad8:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b69      	cmp	r3, #105	@ 0x69
 8002ae2:	d14f      	bne.n	8002b84 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ae4:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <executecommand+0x368>)
 8002ae6:	785b      	ldrb	r3, [r3, #1]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002bb0 <executecommand+0x36c>
 8002af4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002af8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002bb4 <executecommand+0x370>
 8002afc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b00:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <executecommand+0x368>)
 8002b02:	789b      	ldrb	r3, [r3, #2]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002bb0 <executecommand+0x36c>
 8002b10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b14:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b20:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <executecommand+0x368>)
 8002b22:	78db      	ldrb	r3, [r3, #3]
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002bb0 <executecommand+0x36c>
 8002b30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b38:	4b1c      	ldr	r3, [pc, #112]	@ (8002bac <executecommand+0x368>)
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b44:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002bb0 <executecommand+0x36c>
 8002b48:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b4c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b58:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <executecommand+0x368>)
 8002b5a:	795b      	ldrb	r3, [r3, #5]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b64:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002bb0 <executecommand+0x36c>
 8002b68:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b6c:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002bb4 <executecommand+0x370>
 8002b70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b78:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <executecommand+0x38c>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <executecommand+0x390>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b64      	cmp	r3, #100	@ 0x64
 8002b8a:	d164      	bne.n	8002c56 <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b8c:	4b07      	ldr	r3, [pc, #28]	@ (8002bac <executecommand+0x368>)
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b98:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002bb0 <executecommand+0x36c>
 8002b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ba0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002bc4 <executecommand+0x380>
 8002ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ba8:	e016      	b.n	8002bd8 <executecommand+0x394>
 8002baa:	bf00      	nop
 8002bac:	000041c8 	.word	0x000041c8
 8002bb0:	42400000 	.word	0x42400000
 8002bb4:	42c80000 	.word	0x42c80000
 8002bb8:	000040f4 	.word	0x000040f4
 8002bbc:	00004100 	.word	0x00004100
 8002bc0:	000040c4 	.word	0x000040c4
 8002bc4:	447a0000 	.word	0x447a0000
 8002bc8:	0000410c 	.word	0x0000410c
 8002bcc:	00004154 	.word	0x00004154
 8002bd0:	00004160 	.word	0x00004160
 8002bd4:	000040d0 	.word	0x000040d0
 8002bd8:	4bd3      	ldr	r3, [pc, #844]	@ (8002f28 <executecommand+0x6e4>)
 8002bda:	789b      	ldrb	r3, [r3, #2]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be4:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002f2c <executecommand+0x6e8>
 8002be8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bec:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002f30 <executecommand+0x6ec>
 8002bf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	4bcb      	ldr	r3, [pc, #812]	@ (8002f28 <executecommand+0x6e4>)
 8002bfa:	78db      	ldrb	r3, [r3, #3]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c04:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002f2c <executecommand+0x6e8>
 8002c08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c0c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	4bc3      	ldr	r3, [pc, #780]	@ (8002f28 <executecommand+0x6e4>)
 8002c1a:	791b      	ldrb	r3, [r3, #4]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c24:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002f2c <executecommand+0x6e8>
 8002c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c30:	4bbd      	ldr	r3, [pc, #756]	@ (8002f28 <executecommand+0x6e4>)
 8002c32:	795b      	ldrb	r3, [r3, #5]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3c:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002f2c <executecommand+0x6e8>
 8002c40:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c44:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c48:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c50:	4bb8      	ldr	r3, [pc, #736]	@ (8002f34 <executecommand+0x6f0>)
 8002c52:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b46      	cmp	r3, #70	@ 0x46
 8002c5c:	d150      	bne.n	8002d00 <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c5e:	4bb2      	ldr	r3, [pc, #712]	@ (8002f28 <executecommand+0x6e4>)
 8002c60:	785b      	ldrb	r3, [r3, #1]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6a:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002f2c <executecommand+0x6e8>
 8002c6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c72:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002f38 <executecommand+0x6f4>
 8002c76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c7a:	4bab      	ldr	r3, [pc, #684]	@ (8002f28 <executecommand+0x6e4>)
 8002c7c:	789b      	ldrb	r3, [r3, #2]
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c86:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002f2c <executecommand+0x6e8>
 8002c8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c8e:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002f30 <executecommand+0x6ec>
 8002c92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c9a:	4ba3      	ldr	r3, [pc, #652]	@ (8002f28 <executecommand+0x6e4>)
 8002c9c:	78db      	ldrb	r3, [r3, #3]
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca6:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002f2c <executecommand+0x6e8>
 8002caa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cae:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cba:	4b9b      	ldr	r3, [pc, #620]	@ (8002f28 <executecommand+0x6e4>)
 8002cbc:	791b      	ldrb	r3, [r3, #4]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002f2c <executecommand+0x6e8>
 8002cca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd2:	4b95      	ldr	r3, [pc, #596]	@ (8002f28 <executecommand+0x6e4>)
 8002cd4:	795b      	ldrb	r3, [r3, #5]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cde:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002f2c <executecommand+0x6e8>
 8002ce2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ce6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002cea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf6:	ee17 3a90 	vmov	r3, s15
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8002f3c <executecommand+0x6f8>)
 8002cfe:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b66      	cmp	r3, #102	@ 0x66
 8002d06:	d150      	bne.n	8002daa <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002d08:	4b87      	ldr	r3, [pc, #540]	@ (8002f28 <executecommand+0x6e4>)
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d14:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002f2c <executecommand+0x6e8>
 8002d18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d1c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002f38 <executecommand+0x6f4>
 8002d20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d24:	4b80      	ldr	r3, [pc, #512]	@ (8002f28 <executecommand+0x6e4>)
 8002d26:	789b      	ldrb	r3, [r3, #2]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d30:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002f2c <executecommand+0x6e8>
 8002d34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d38:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002f30 <executecommand+0x6ec>
 8002d3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d44:	4b78      	ldr	r3, [pc, #480]	@ (8002f28 <executecommand+0x6e4>)
 8002d46:	78db      	ldrb	r3, [r3, #3]
 8002d48:	ee07 3a90 	vmov	s15, r3
 8002d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d50:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002f2c <executecommand+0x6e8>
 8002d54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d58:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d64:	4b70      	ldr	r3, [pc, #448]	@ (8002f28 <executecommand+0x6e4>)
 8002d66:	791b      	ldrb	r3, [r3, #4]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002f2c <executecommand+0x6e8>
 8002d74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f28 <executecommand+0x6e4>)
 8002d7e:	795b      	ldrb	r3, [r3, #5]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d88:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002f2c <executecommand+0x6e8>
 8002d8c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d90:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d94:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da0:	ee17 3a90 	vmov	r3, s15
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b66      	ldr	r3, [pc, #408]	@ (8002f40 <executecommand+0x6fc>)
 8002da8:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b61      	cmp	r3, #97	@ 0x61
 8002db0:	d14c      	bne.n	8002e4c <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002db2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f28 <executecommand+0x6e4>)
 8002db4:	785b      	ldrb	r3, [r3, #1]
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dbe:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002f2c <executecommand+0x6e8>
 8002dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dc6:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002f30 <executecommand+0x6ec>
 8002dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dce:	4b56      	ldr	r3, [pc, #344]	@ (8002f28 <executecommand+0x6e4>)
 8002dd0:	789b      	ldrb	r3, [r3, #2]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002f2c <executecommand+0x6e8>
 8002dde:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002de2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002de6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dee:	4b4e      	ldr	r3, [pc, #312]	@ (8002f28 <executecommand+0x6e4>)
 8002df0:	78db      	ldrb	r3, [r3, #3]
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfa:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002f2c <executecommand+0x6e8>
 8002dfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e06:	4b48      	ldr	r3, [pc, #288]	@ (8002f28 <executecommand+0x6e4>)
 8002e08:	791b      	ldrb	r3, [r3, #4]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002f2c <executecommand+0x6e8>
 8002e16:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e1a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e1e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e26:	4b40      	ldr	r3, [pc, #256]	@ (8002f28 <executecommand+0x6e4>)
 8002e28:	795b      	ldrb	r3, [r3, #5]
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e32:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002f2c <executecommand+0x6e8>
 8002e36:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e3a:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002f30 <executecommand+0x6ec>
 8002e3e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e46:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <executecommand+0x700>)
 8002e48:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b62      	cmp	r3, #98	@ 0x62
 8002e52:	d14f      	bne.n	8002ef4 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002e54:	4b34      	ldr	r3, [pc, #208]	@ (8002f28 <executecommand+0x6e4>)
 8002e56:	785b      	ldrb	r3, [r3, #1]
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e60:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002f2c <executecommand+0x6e8>
 8002e64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e68:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002f30 <executecommand+0x6ec>
 8002e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e70:	4b2d      	ldr	r3, [pc, #180]	@ (8002f28 <executecommand+0x6e4>)
 8002e72:	789b      	ldrb	r3, [r3, #2]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7c:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002f2c <executecommand+0x6e8>
 8002e80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e84:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <executecommand+0x6e4>)
 8002e92:	78db      	ldrb	r3, [r3, #3]
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002f2c <executecommand+0x6e8>
 8002ea0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f28 <executecommand+0x6e4>)
 8002eaa:	791b      	ldrb	r3, [r3, #4]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002f2c <executecommand+0x6e8>
 8002eb8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ebc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ec0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec8:	4b17      	ldr	r3, [pc, #92]	@ (8002f28 <executecommand+0x6e4>)
 8002eca:	795b      	ldrb	r3, [r3, #5]
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed4:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002f2c <executecommand+0x6e8>
 8002ed8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002edc:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002f30 <executecommand+0x6ec>
 8002ee0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee8:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <executecommand+0x704>)
 8002eea:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002eee:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <executecommand+0x708>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b63      	cmp	r3, #99	@ 0x63
 8002efa:	d166      	bne.n	8002fca <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002efc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <executecommand+0x6e4>)
 8002efe:	785b      	ldrb	r3, [r3, #1]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f08:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002f2c <executecommand+0x6e8>
 8002f0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f10:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002f38 <executecommand+0x6f4>
 8002f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <executecommand+0x6e4>)
 8002f1a:	789b      	ldrb	r3, [r3, #2]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f24:	e018      	b.n	8002f58 <executecommand+0x714>
 8002f26:	bf00      	nop
 8002f28:	000041c8 	.word	0x000041c8
 8002f2c:	42400000 	.word	0x42400000
 8002f30:	42c80000 	.word	0x42c80000
 8002f34:	0000416c 	.word	0x0000416c
 8002f38:	447a0000 	.word	0x447a0000
 8002f3c:	00004084 	.word	0x00004084
 8002f40:	00004086 	.word	0x00004086
 8002f44:	000040f8 	.word	0x000040f8
 8002f48:	00004104 	.word	0x00004104
 8002f4c:	000040c8 	.word	0x000040c8
 8002f50:	42400000 	.word	0x42400000
 8002f54:	42c80000 	.word	0x42c80000
 8002f58:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002f50 <executecommand+0x70c>
 8002f5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f60:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002f54 <executecommand+0x710>
 8002f64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6c:	4bd5      	ldr	r3, [pc, #852]	@ (80032c4 <executecommand+0xa80>)
 8002f6e:	78db      	ldrb	r3, [r3, #3]
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f78:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80032c8 <executecommand+0xa84>
 8002f7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f80:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f8c:	4bcd      	ldr	r3, [pc, #820]	@ (80032c4 <executecommand+0xa80>)
 8002f8e:	791b      	ldrb	r3, [r3, #4]
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f98:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80032c8 <executecommand+0xa84>
 8002f9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa4:	4bc7      	ldr	r3, [pc, #796]	@ (80032c4 <executecommand+0xa80>)
 8002fa6:	795b      	ldrb	r3, [r3, #5]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80032c8 <executecommand+0xa84>
 8002fb4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fb8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc4:	4bc1      	ldr	r3, [pc, #772]	@ (80032cc <executecommand+0xa88>)
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b65      	cmp	r3, #101	@ 0x65
 8002fd0:	d14c      	bne.n	800306c <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002fd2:	4bbc      	ldr	r3, [pc, #752]	@ (80032c4 <executecommand+0xa80>)
 8002fd4:	785b      	ldrb	r3, [r3, #1]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80032c8 <executecommand+0xa84>
 8002fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fe6:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80032d0 <executecommand+0xa8c>
 8002fea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fee:	4bb5      	ldr	r3, [pc, #724]	@ (80032c4 <executecommand+0xa80>)
 8002ff0:	789b      	ldrb	r3, [r3, #2]
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ffa:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80032c8 <executecommand+0xa84>
 8002ffe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003002:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003006:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800300a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800300e:	4bad      	ldr	r3, [pc, #692]	@ (80032c4 <executecommand+0xa80>)
 8003010:	78db      	ldrb	r3, [r3, #3]
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80032c8 <executecommand+0xa84>
 800301e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003026:	4ba7      	ldr	r3, [pc, #668]	@ (80032c4 <executecommand+0xa80>)
 8003028:	791b      	ldrb	r3, [r3, #4]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80032c8 <executecommand+0xa84>
 8003036:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800303a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800303e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003042:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003046:	4b9f      	ldr	r3, [pc, #636]	@ (80032c4 <executecommand+0xa80>)
 8003048:	795b      	ldrb	r3, [r3, #5]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003052:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80032c8 <executecommand+0xa84>
 8003056:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800305a:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80032d0 <executecommand+0xa8c>
 800305e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003066:	4b9b      	ldr	r3, [pc, #620]	@ (80032d4 <executecommand+0xa90>)
 8003068:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b67      	cmp	r3, #103	@ 0x67
 8003072:	d14f      	bne.n	8003114 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003074:	4b93      	ldr	r3, [pc, #588]	@ (80032c4 <executecommand+0xa80>)
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003080:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80032c8 <executecommand+0xa84>
 8003084:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003088:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80032d0 <executecommand+0xa8c>
 800308c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003090:	4b8c      	ldr	r3, [pc, #560]	@ (80032c4 <executecommand+0xa80>)
 8003092:	789b      	ldrb	r3, [r3, #2]
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309c:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80032c8 <executecommand+0xa84>
 80030a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030a4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030b0:	4b84      	ldr	r3, [pc, #528]	@ (80032c4 <executecommand+0xa80>)
 80030b2:	78db      	ldrb	r3, [r3, #3]
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030bc:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80032c8 <executecommand+0xa84>
 80030c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c8:	4b7e      	ldr	r3, [pc, #504]	@ (80032c4 <executecommand+0xa80>)
 80030ca:	791b      	ldrb	r3, [r3, #4]
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d4:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80032c8 <executecommand+0xa84>
 80030d8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030dc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80030e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e8:	4b76      	ldr	r3, [pc, #472]	@ (80032c4 <executecommand+0xa80>)
 80030ea:	795b      	ldrb	r3, [r3, #5]
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f4:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80032c8 <executecommand+0xa84>
 80030f8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030fc:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80032d0 <executecommand+0xa8c>
 8003100:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	4b73      	ldr	r3, [pc, #460]	@ (80032d8 <executecommand+0xa94>)
 800310a:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 800310e:	4b73      	ldr	r3, [pc, #460]	@ (80032dc <executecommand+0xa98>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b68      	cmp	r3, #104	@ 0x68
 800311a:	d14c      	bne.n	80031b6 <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800311c:	4b69      	ldr	r3, [pc, #420]	@ (80032c4 <executecommand+0xa80>)
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003128:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80032c8 <executecommand+0xa84>
 800312c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003130:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80032e0 <executecommand+0xa9c>
 8003134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003138:	4b62      	ldr	r3, [pc, #392]	@ (80032c4 <executecommand+0xa80>)
 800313a:	789b      	ldrb	r3, [r3, #2]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003144:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80032c8 <executecommand+0xa84>
 8003148:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800314c:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80032d0 <executecommand+0xa8c>
 8003150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003158:	4b5a      	ldr	r3, [pc, #360]	@ (80032c4 <executecommand+0xa80>)
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003164:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032c8 <executecommand+0xa84>
 8003168:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800316c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003170:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003178:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <executecommand+0xa80>)
 800317a:	791b      	ldrb	r3, [r3, #4]
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003184:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80032c8 <executecommand+0xa84>
 8003188:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003190:	4b4c      	ldr	r3, [pc, #304]	@ (80032c4 <executecommand+0xa80>)
 8003192:	795b      	ldrb	r3, [r3, #5]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80032c8 <executecommand+0xa84>
 80031a0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031a4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b0:	4b4c      	ldr	r3, [pc, #304]	@ (80032e4 <executecommand+0xaa0>)
 80031b2:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b6a      	cmp	r3, #106	@ 0x6a
 80031bc:	d14c      	bne.n	8003258 <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80031be:	4b41      	ldr	r3, [pc, #260]	@ (80032c4 <executecommand+0xa80>)
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80032c8 <executecommand+0xa84>
 80031ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031d2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80032d0 <executecommand+0xa8c>
 80031d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031da:	4b3a      	ldr	r3, [pc, #232]	@ (80032c4 <executecommand+0xa80>)
 80031dc:	789b      	ldrb	r3, [r3, #2]
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032c8 <executecommand+0xa84>
 80031ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031ee:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80031f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031fa:	4b32      	ldr	r3, [pc, #200]	@ (80032c4 <executecommand+0xa80>)
 80031fc:	78db      	ldrb	r3, [r3, #3]
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003206:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80032c8 <executecommand+0xa84>
 800320a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003212:	4b2c      	ldr	r3, [pc, #176]	@ (80032c4 <executecommand+0xa80>)
 8003214:	791b      	ldrb	r3, [r3, #4]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80032c8 <executecommand+0xa84>
 8003222:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003226:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800322a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800322e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003232:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <executecommand+0xa80>)
 8003234:	795b      	ldrb	r3, [r3, #5]
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323e:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80032c8 <executecommand+0xa84>
 8003242:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003246:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80032d0 <executecommand+0xa8c>
 800324a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800324e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003252:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <executecommand+0xaa4>)
 8003254:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b6b      	cmp	r3, #107	@ 0x6b
 800325e:	d167      	bne.n	8003330 <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003260:	4b18      	ldr	r3, [pc, #96]	@ (80032c4 <executecommand+0xa80>)
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80032c8 <executecommand+0xa84>
 8003270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003274:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80032d0 <executecommand+0xa8c>
 8003278:	ee27 7a87 	vmul.f32	s14, s15, s14
 800327c:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <executecommand+0xa80>)
 800327e:	789b      	ldrb	r3, [r3, #2]
 8003280:	ee07 3a90 	vmov	s15, r3
 8003284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003288:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80032c8 <executecommand+0xa84>
 800328c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003290:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003294:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <executecommand+0xa80>)
 800329e:	78db      	ldrb	r3, [r3, #3]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a8:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80032c8 <executecommand+0xa84>
 80032ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b4:	4b03      	ldr	r3, [pc, #12]	@ (80032c4 <executecommand+0xa80>)
 80032b6:	791b      	ldrb	r3, [r3, #4]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c0:	e016      	b.n	80032f0 <executecommand+0xaac>
 80032c2:	bf00      	nop
 80032c4:	000041c8 	.word	0x000041c8
 80032c8:	42400000 	.word	0x42400000
 80032cc:	00004110 	.word	0x00004110
 80032d0:	42c80000 	.word	0x42c80000
 80032d4:	00004158 	.word	0x00004158
 80032d8:	00004164 	.word	0x00004164
 80032dc:	000040d4 	.word	0x000040d4
 80032e0:	447a0000 	.word	0x447a0000
 80032e4:	00004170 	.word	0x00004170
 80032e8:	000040fc 	.word	0x000040fc
 80032ec:	42400000 	.word	0x42400000
 80032f0:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80032ec <executecommand+0xaa8>
 80032f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032f8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003304:	4bba      	ldr	r3, [pc, #744]	@ (80035f0 <executecommand+0xdac>)
 8003306:	795b      	ldrb	r3, [r3, #5]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003310:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80035f4 <executecommand+0xdb0>
 8003314:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003318:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80035f8 <executecommand+0xdb4>
 800331c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003324:	4bb5      	ldr	r3, [pc, #724]	@ (80035fc <executecommand+0xdb8>)
 8003326:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 800332a:	4bb5      	ldr	r3, [pc, #724]	@ (8003600 <executecommand+0xdbc>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b6c      	cmp	r3, #108	@ 0x6c
 8003336:	d14c      	bne.n	80033d2 <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003338:	4bad      	ldr	r3, [pc, #692]	@ (80035f0 <executecommand+0xdac>)
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003344:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80035f4 <executecommand+0xdb0>
 8003348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800334c:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8003604 <executecommand+0xdc0>
 8003350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003354:	4ba6      	ldr	r3, [pc, #664]	@ (80035f0 <executecommand+0xdac>)
 8003356:	789b      	ldrb	r3, [r3, #2]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003360:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80035f4 <executecommand+0xdb0>
 8003364:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003368:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80035f8 <executecommand+0xdb4>
 800336c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003374:	4b9e      	ldr	r3, [pc, #632]	@ (80035f0 <executecommand+0xdac>)
 8003376:	78db      	ldrb	r3, [r3, #3]
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003380:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80035f4 <executecommand+0xdb0>
 8003384:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003388:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800338c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003394:	4b96      	ldr	r3, [pc, #600]	@ (80035f0 <executecommand+0xdac>)
 8003396:	791b      	ldrb	r3, [r3, #4]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a0:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80035f4 <executecommand+0xdb0>
 80033a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	4b90      	ldr	r3, [pc, #576]	@ (80035f0 <executecommand+0xdac>)
 80033ae:	795b      	ldrb	r3, [r3, #5]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b8:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80035f4 <executecommand+0xdb0>
 80033bc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033c0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003608 <executecommand+0xdc4>)
 80033ce:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b6d      	cmp	r3, #109	@ 0x6d
 80033d8:	d14c      	bne.n	8003474 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80033da:	4b85      	ldr	r3, [pc, #532]	@ (80035f0 <executecommand+0xdac>)
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80035f4 <executecommand+0xdb0>
 80033ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033ee:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80035f8 <executecommand+0xdb4>
 80033f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033f6:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <executecommand+0xdac>)
 80033f8:	789b      	ldrb	r3, [r3, #2]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80035f4 <executecommand+0xdb0>
 8003406:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800340a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800340e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003416:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <executecommand+0xdac>)
 8003418:	78db      	ldrb	r3, [r3, #3]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003422:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80035f4 <executecommand+0xdb0>
 8003426:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800342a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800342e:	4b70      	ldr	r3, [pc, #448]	@ (80035f0 <executecommand+0xdac>)
 8003430:	791b      	ldrb	r3, [r3, #4]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80035f4 <executecommand+0xdb0>
 800343e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003442:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003446:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800344a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800344e:	4b68      	ldr	r3, [pc, #416]	@ (80035f0 <executecommand+0xdac>)
 8003450:	795b      	ldrb	r3, [r3, #5]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345a:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80035f4 <executecommand+0xdb0>
 800345e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003462:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80035f8 <executecommand+0xdb4>
 8003466:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	4b67      	ldr	r3, [pc, #412]	@ (800360c <executecommand+0xdc8>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b6e      	cmp	r3, #110	@ 0x6e
 800347a:	d14f      	bne.n	800351c <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800347c:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <executecommand+0xdac>)
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003488:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80035f4 <executecommand+0xdb0>
 800348c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003490:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80035f8 <executecommand+0xdb4>
 8003494:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003498:	4b55      	ldr	r3, [pc, #340]	@ (80035f0 <executecommand+0xdac>)
 800349a:	789b      	ldrb	r3, [r3, #2]
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a4:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80035f4 <executecommand+0xdb0>
 80034a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034ac:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b8:	4b4d      	ldr	r3, [pc, #308]	@ (80035f0 <executecommand+0xdac>)
 80034ba:	78db      	ldrb	r3, [r3, #3]
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c4:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80035f4 <executecommand+0xdb0>
 80034c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d0:	4b47      	ldr	r3, [pc, #284]	@ (80035f0 <executecommand+0xdac>)
 80034d2:	791b      	ldrb	r3, [r3, #4]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034dc:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80035f4 <executecommand+0xdb0>
 80034e0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034e4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f0:	4b3f      	ldr	r3, [pc, #252]	@ (80035f0 <executecommand+0xdac>)
 80034f2:	795b      	ldrb	r3, [r3, #5]
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fc:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80035f4 <executecommand+0xdb0>
 8003500:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003504:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80035f8 <executecommand+0xdb4>
 8003508:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800350c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003510:	4b3f      	ldr	r3, [pc, #252]	@ (8003610 <executecommand+0xdcc>)
 8003512:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 8003516:	4b3f      	ldr	r3, [pc, #252]	@ (8003614 <executecommand+0xdd0>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b6f      	cmp	r3, #111	@ 0x6f
 8003522:	d14c      	bne.n	80035be <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <executecommand+0xdac>)
 8003526:	785b      	ldrb	r3, [r3, #1]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003530:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80035f4 <executecommand+0xdb0>
 8003534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003538:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003604 <executecommand+0xdc0>
 800353c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003540:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <executecommand+0xdac>)
 8003542:	789b      	ldrb	r3, [r3, #2]
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80035f4 <executecommand+0xdb0>
 8003550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003554:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80035f8 <executecommand+0xdb4>
 8003558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800355c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003560:	4b23      	ldr	r3, [pc, #140]	@ (80035f0 <executecommand+0xdac>)
 8003562:	78db      	ldrb	r3, [r3, #3]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80035f4 <executecommand+0xdb0>
 8003570:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003574:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003578:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800357c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003580:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <executecommand+0xdac>)
 8003582:	791b      	ldrb	r3, [r3, #4]
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358c:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80035f4 <executecommand+0xdb0>
 8003590:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003598:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <executecommand+0xdac>)
 800359a:	795b      	ldrb	r3, [r3, #5]
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80035f4 <executecommand+0xdb0>
 80035a8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80035ac:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80035b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b8:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <executecommand+0xdd4>)
 80035ba:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b72      	cmp	r3, #114	@ 0x72
 80035c4:	d101      	bne.n	80035ca <executecommand+0xd86>
		NVIC_SystemReset();
 80035c6:	f7ff f8d9 	bl	800277c <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e007      	b.n	80035e0 <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 80035d0:	4a07      	ldr	r2, [pc, #28]	@ (80035f0 <executecommand+0xdac>)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b0e      	cmp	r3, #14
 80035e4:	ddf4      	ble.n	80035d0 <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	000041c8 	.word	0x000041c8
 80035f4:	42400000 	.word	0x42400000
 80035f8:	42c80000 	.word	0x42c80000
 80035fc:	00004108 	.word	0x00004108
 8003600:	000040cc 	.word	0x000040cc
 8003604:	447a0000 	.word	0x447a0000
 8003608:	00004114 	.word	0x00004114
 800360c:	0000415c 	.word	0x0000415c
 8003610:	00004168 	.word	0x00004168
 8003614:	000040d8 	.word	0x000040d8
 8003618:	00004174 	.word	0x00004174

0800361c <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	@ 0x28
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	2224      	movs	r2, #36	@ 0x24
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f01a fd73 	bl	801e114 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800362e:	4b2e      	ldr	r3, [pc, #184]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003630:	4a2e      	ldr	r2, [pc, #184]	@ (80036ec <MX_ADC2_Init+0xd0>)
 8003632:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003634:	4b2c      	ldr	r3, [pc, #176]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003636:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800363a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800363c:	4b2a      	ldr	r3, [pc, #168]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 800363e:	2208      	movs	r2, #8
 8003640:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003642:	4b29      	ldr	r3, [pc, #164]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003644:	2200      	movs	r2, #0
 8003646:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003648:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 800364a:	2204      	movs	r2, #4
 800364c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800364e:	4b26      	ldr	r3, [pc, #152]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003650:	2200      	movs	r2, #0
 8003652:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003654:	4b24      	ldr	r3, [pc, #144]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003656:	2200      	movs	r2, #0
 8003658:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800365a:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 800365c:	2201      	movs	r2, #1
 800365e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003660:	4b21      	ldr	r3, [pc, #132]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8003668:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 800366a:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003672:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003678:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 800367a:	2203      	movs	r2, #3
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800367e:	4b1a      	ldr	r3, [pc, #104]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003680:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003684:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003686:	4b18      	ldr	r3, [pc, #96]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003688:	2200      	movs	r2, #0
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800368c:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003694:	4b14      	ldr	r3, [pc, #80]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 8003696:	2201      	movs	r2, #1
 8003698:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800369a:	4813      	ldr	r0, [pc, #76]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 800369c:	f006 f864 	bl	8009768 <HAL_ADC_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80036a6:	f004 fcd7 	bl	8008058 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80036aa:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <MX_ADC2_Init+0xd4>)
 80036ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036ae:	2306      	movs	r3, #6
 80036b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80036b2:	2307      	movs	r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036b6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80036ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036bc:	2304      	movs	r3, #4
 80036be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4806      	ldr	r0, [pc, #24]	@ (80036e8 <MX_ADC2_Init+0xcc>)
 80036d0:	f006 fd90 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80036da:	f004 fcbd 	bl	8008058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80036de:	bf00      	nop
 80036e0:	3728      	adds	r7, #40	@ 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	240000ac 	.word	0x240000ac
 80036ec:	40022100 	.word	0x40022100
 80036f0:	19200040 	.word	0x19200040

080036f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	@ 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a34      	ldr	r2, [pc, #208]	@ (80037e4 <HAL_ADC_MspInit+0xf0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d162      	bne.n	80037dc <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003716:	4b34      	ldr	r3, [pc, #208]	@ (80037e8 <HAL_ADC_MspInit+0xf4>)
 8003718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800371c:	4a32      	ldr	r2, [pc, #200]	@ (80037e8 <HAL_ADC_MspInit+0xf4>)
 800371e:	f043 0320 	orr.w	r3, r3, #32
 8003722:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003726:	4b30      	ldr	r3, [pc, #192]	@ (80037e8 <HAL_ADC_MspInit+0xf4>)
 8003728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003734:	4b2c      	ldr	r3, [pc, #176]	@ (80037e8 <HAL_ADC_MspInit+0xf4>)
 8003736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800373a:	4a2b      	ldr	r2, [pc, #172]	@ (80037e8 <HAL_ADC_MspInit+0xf4>)
 800373c:	f043 0320 	orr.w	r3, r3, #32
 8003740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003744:	4b28      	ldr	r3, [pc, #160]	@ (80037e8 <HAL_ADC_MspInit+0xf4>)
 8003746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003752:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003758:	2303      	movs	r3, #3
 800375a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	4619      	mov	r1, r3
 8003766:	4821      	ldr	r0, [pc, #132]	@ (80037ec <HAL_ADC_MspInit+0xf8>)
 8003768:	f00a fc30 	bl	800dfcc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 800376c:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 800376e:	4a21      	ldr	r2, [pc, #132]	@ (80037f4 <HAL_ADC_MspInit+0x100>)
 8003770:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003772:	4b1f      	ldr	r3, [pc, #124]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 8003774:	220a      	movs	r2, #10
 8003776:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003778:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800377e:	4b1c      	ldr	r3, [pc, #112]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003784:	4b1a      	ldr	r3, [pc, #104]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 8003786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800378a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800378c:	4b18      	ldr	r3, [pc, #96]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 800378e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003792:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003794:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 8003796:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800379a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800379c:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 800379e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037a2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80037a4:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037aa:	4b11      	ldr	r3, [pc, #68]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80037b0:	480f      	ldr	r0, [pc, #60]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 80037b2:	f007 fdb9 	bl	800b328 <HAL_DMA_Init>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80037bc:	f004 fc4c 	bl	8008058 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 80037c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80037c6:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <HAL_ADC_MspInit+0xfc>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	2100      	movs	r1, #0
 80037d0:	2012      	movs	r0, #18
 80037d2:	f007 fcfc 	bl	800b1ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80037d6:	2012      	movs	r0, #18
 80037d8:	f007 fd13 	bl	800b202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80037dc:	bf00      	nop
 80037de:	3728      	adds	r7, #40	@ 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40022100 	.word	0x40022100
 80037e8:	58024400 	.word	0x58024400
 80037ec:	58021400 	.word	0x58021400
 80037f0:	2400011c 	.word	0x2400011c
 80037f4:	40020410 	.word	0x40020410

080037f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037fe:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <MX_DMA_Init+0x6c>)
 8003800:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003804:	4a17      	ldr	r2, [pc, #92]	@ (8003864 <MX_DMA_Init+0x6c>)
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800380e:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <MX_DMA_Init+0x6c>)
 8003810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <MX_DMA_Init+0x6c>)
 800381e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003822:	4a10      	ldr	r2, [pc, #64]	@ (8003864 <MX_DMA_Init+0x6c>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800382c:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <MX_DMA_Init+0x6c>)
 800382e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800383a:	2200      	movs	r2, #0
 800383c:	2100      	movs	r1, #0
 800383e:	200b      	movs	r0, #11
 8003840:	f007 fcc5 	bl	800b1ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003844:	200b      	movs	r0, #11
 8003846:	f007 fcdc 	bl	800b202 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800384a:	2200      	movs	r2, #0
 800384c:	2100      	movs	r1, #0
 800384e:	2038      	movs	r0, #56	@ 0x38
 8003850:	f007 fcbd 	bl	800b1ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003854:	2038      	movs	r0, #56	@ 0x38
 8003856:	f007 fcd4 	bl	800b202 <HAL_NVIC_EnableIRQ>

}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400

08003868 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003868:	b580      	push	{r7, lr}
 800386a:	b08e      	sub	sp, #56	@ 0x38
 800386c:	af00      	add	r7, sp, #0
 800386e:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(pitch_error);
 8003884:	4b88      	ldr	r3, [pc, #544]	@ (8003aa8 <Thrust_filter+0x240>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800388e:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(rool_error);
 8003892:	4b86      	ldr	r3, [pc, #536]	@ (8003aac <Thrust_filter+0x244>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800389c:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80038a0:	ed97 7b08 	vldr	d7, [r7, #32]
 80038a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038a8:	eeb0 0a67 	vmov.f32	s0, s15
 80038ac:	f003 ff0a 	bl	80076c4 <WartoscBezwgledna>
 80038b0:	eef0 7a40 	vmov.f32	s15, s0
 80038b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038b8:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80038bc:	ed97 7b06 	vldr	d7, [r7, #24]
 80038c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038c4:	eeb0 0a67 	vmov.f32	s0, s15
 80038c8:	f003 fefc 	bl	80076c4 <WartoscBezwgledna>
 80038cc:	eef0 7a40 	vmov.f32	s15, s0
 80038d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038d4:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80038d8:	ed97 6b08 	vldr	d6, [r7, #32]
 80038dc:	ed97 7b06 	vldr	d7, [r7, #24]
 80038e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80038e4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038ec:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80038f0:	eeb0 0b47 	vmov.f64	d0, d7
 80038f4:	f01a fd9c 	bl	801e430 <pow>
 80038f8:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 80038fc:	4b6c      	ldr	r3, [pc, #432]	@ (8003ab0 <Thrust_filter+0x248>)
 80038fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003902:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003906:	4293      	cmp	r3, r2
 8003908:	dd03      	ble.n	8003912 <Thrust_filter+0xaa>
		wanted_thrust = 10500;
 800390a:	4b69      	ldr	r3, [pc, #420]	@ (8003ab0 <Thrust_filter+0x248>)
 800390c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003910:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 8003912:	4b67      	ldr	r3, [pc, #412]	@ (8003ab0 <Thrust_filter+0x248>)
 8003914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003918:	b29a      	uxth	r2, r3
 800391a:	4b66      	ldr	r3, [pc, #408]	@ (8003ab4 <Thrust_filter+0x24c>)
 800391c:	885b      	ldrh	r3, [r3, #2]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	b29b      	uxth	r3, r3
 8003922:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003924:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003928:	2b00      	cmp	r3, #0
 800392a:	da13      	bge.n	8003954 <Thrust_filter+0xec>
		thrust_error = WartoscBezwgledna(thrust_error);
 800392c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003930:	ee07 3a90 	vmov	s15, r3
 8003934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003938:	eeb0 0a67 	vmov.f32	s0, s15
 800393c:	f003 fec2 	bl	80076c4 <WartoscBezwgledna>
 8003940:	eef0 7a40 	vmov.f32	s15, s0
 8003944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003948:	ee17 3a90 	vmov	r3, s15
 800394c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003954:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8097 	beq.w	8003a8c <Thrust_filter+0x224>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800395e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800396a:	eeb0 0b47 	vmov.f64	d0, d7
 800396e:	f01a fc07 	bl	801e180 <sqrt>
 8003972:	eeb0 7b40 	vmov.f64	d7, d0
 8003976:	eeb0 0b47 	vmov.f64	d0, d7
 800397a:	f01a fc01 	bl	801e180 <sqrt>
 800397e:	eeb0 7b40 	vmov.f64	d7, d0
 8003982:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 8003a98 <Thrust_filter+0x230>
 8003986:	ee27 7b06 	vmul.f64	d7, d7, d6
 800398a:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800398e:	ed97 7b00 	vldr	d7, [r7]
 8003992:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8003aa0 <Thrust_filter+0x238>
 8003996:	ee27 6b06 	vmul.f64	d6, d7, d6
 800399a:	ed97 7b02 	vldr	d7, [r7, #8]
 800399e:	ee26 5b07 	vmul.f64	d5, d6, d7
 80039a2:	ed97 6b04 	vldr	d6, [r7, #16]
 80039a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80039aa:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80039ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d105      	bne.n	80039c2 <Thrust_filter+0x15a>
			thrust_add = thrust_add*(-1);
 80039b6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039ba:	eeb1 7b47 	vneg.f64	d7, d7
 80039be:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80039c2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d2:	d513      	bpl.n	80039fc <Thrust_filter+0x194>
 80039d4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039d8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e4:	dd0a      	ble.n	80039fc <Thrust_filter+0x194>
			thrust_values = thrust_values + thrust_add;
 80039e6:	4b34      	ldr	r3, [pc, #208]	@ (8003ab8 <Thrust_filter+0x250>)
 80039e8:	ed93 6b00 	vldr	d6, [r3]
 80039ec:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039f4:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <Thrust_filter+0x250>)
 80039f6:	ed83 7b00 	vstr	d7, [r3]
 80039fa:	e010      	b.n	8003a1e <Thrust_filter+0x1b6>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 80039fc:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab4 <Thrust_filter+0x24c>)
 80039fe:	885b      	ldrh	r3, [r3, #2]
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a08:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003a0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a14:	ee17 3a90 	vmov	r3, s15
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	4b26      	ldr	r3, [pc, #152]	@ (8003ab4 <Thrust_filter+0x24c>)
 8003a1c:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 8003a1e:	4b26      	ldr	r3, [pc, #152]	@ (8003ab8 <Thrust_filter+0x250>)
 8003a20:	ed93 7b00 	vldr	d7, [r3]
 8003a24:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003a28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a30:	da09      	bge.n	8003a46 <Thrust_filter+0x1de>
 8003a32:	4b21      	ldr	r3, [pc, #132]	@ (8003ab8 <Thrust_filter+0x250>)
 8003a34:	ed93 7b00 	vldr	d7, [r3]
 8003a38:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003a3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a44:	d818      	bhi.n	8003a78 <Thrust_filter+0x210>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003a46:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <Thrust_filter+0x24c>)
 8003a48:	885b      	ldrh	r3, [r3, #2]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a52:	4b19      	ldr	r3, [pc, #100]	@ (8003ab8 <Thrust_filter+0x250>)
 8003a54:	ed93 7b00 	vldr	d7, [r3]
 8003a58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a60:	ee17 3a90 	vmov	r3, s15
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <Thrust_filter+0x24c>)
 8003a68:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003a6a:	4913      	ldr	r1, [pc, #76]	@ (8003ab8 <Thrust_filter+0x250>)
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003a78:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <Thrust_filter+0x24c>)
 8003a7a:	885b      	ldrh	r3, [r3, #2]
 8003a7c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d903      	bls.n	8003a8c <Thrust_filter+0x224>
			MYDRON.THRUST = 10000;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <Thrust_filter+0x24c>)
 8003a86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a8a:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003a8c:	bf00      	nop
 8003a8e:	3738      	adds	r7, #56	@ 0x38
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	f3af 8000 	nop.w
 8003a98:	00000000 	.word	0x00000000
 8003a9c:	409f4000 	.word	0x409f4000
 8003aa0:	30553261 	.word	0x30553261
 8003aa4:	3f43a92a 	.word	0x3f43a92a
 8003aa8:	00004094 	.word	0x00004094
 8003aac:	00004098 	.word	0x00004098
 8003ab0:	0000406c 	.word	0x0000406c
 8003ab4:	00000188 	.word	0x00000188
 8003ab8:	00004070 	.word	0x00004070

08003abc <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	f200 8380 	bhi.w	80041d4 <PID_cal+0x718>
 8003ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <PID_cal+0x20>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003af5 	.word	0x08003af5
 8003ae0:	08003c0f 	.word	0x08003c0f
 8003ae4:	08003d49 	.word	0x08003d49
 8003ae8:	08003e63 	.word	0x08003e63
 8003aec:	08003fa1 	.word	0x08003fa1
 8003af0:	080040bb 	.word	0x080040bb
		case 1://pitch

			*PID_var = PID_FAC[0]*(pitch_error);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	ed93 7a00 	vldr	s14, [r3]
 8003afa:	4b8b      	ldr	r3, [pc, #556]	@ (8003d28 <PID_cal+0x26c>)
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	ed93 7a00 	vldr	s14, [r3]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3304      	adds	r3, #4
 8003b14:	edd3 6a00 	vldr	s13, [r3]
 8003b18:	4b84      	ldr	r3, [pc, #528]	@ (8003d2c <PID_cal+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b28:	4b81      	ldr	r3, [pc, #516]	@ (8003d30 <PID_cal+0x274>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pitch_error) - old_error_pitch);//policzenie częsci D
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	ed93 7a00 	vldr	s14, [r3]
 8003b44:	4b78      	ldr	r3, [pc, #480]	@ (8003d28 <PID_cal+0x26c>)
 8003b46:	edd3 6a00 	vldr	s13, [r3]
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d34 <PID_cal+0x278>)
 8003b4c:	edd3 7a00 	vldr	s15, [r3]
 8003b50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	330c      	adds	r3, #12
 8003b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003b60:	4b75      	ldr	r3, [pc, #468]	@ (8003d38 <PID_cal+0x27c>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d045      	beq.n	8003bf4 <PID_cal+0x138>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	ed93 7a00 	vldr	s14, [r3]
 8003b70:	4b71      	ldr	r3, [pc, #452]	@ (8003d38 <PID_cal+0x27c>)
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d30 <PID_cal+0x274>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b86:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8003d38 <PID_cal+0x27c>)
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b96:	4b66      	ldr	r3, [pc, #408]	@ (8003d30 <PID_cal+0x274>)
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	3310      	adds	r3, #16
 8003bb0:	edd3 6a00 	vldr	s13, [r3]
 8003bb4:	4b60      	ldr	r3, [pc, #384]	@ (8003d38 <PID_cal+0x27c>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8003d30 <PID_cal+0x274>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bca:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003bce:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003bd2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003bd6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	330c      	adds	r3, #12
 8003be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be6:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	3310      	adds	r3, #16
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	68d2      	ldr	r2, [r2, #12]
 8003bf2:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	ed93 7a00 	vldr	s14, [r3]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003c0c:	e2e3      	b.n	80041d6 <PID_cal+0x71a>

		case 2://rool

			*PID_var = PID_FAC[0]*(rool_error);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	ed93 7a00 	vldr	s14, [r3]
 8003c14:	4b49      	ldr	r3, [pc, #292]	@ (8003d3c <PID_cal+0x280>)
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	ed93 7a00 	vldr	s14, [r3]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	edd3 6a00 	vldr	s13, [r3]
 8003c32:	4b43      	ldr	r3, [pc, #268]	@ (8003d40 <PID_cal+0x284>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c42:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <PID_cal+0x274>)
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_error) - old_error_rool);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	4b37      	ldr	r3, [pc, #220]	@ (8003d3c <PID_cal+0x280>)
 8003c60:	edd3 6a00 	vldr	s13, [r3]
 8003c64:	4b37      	ldr	r3, [pc, #220]	@ (8003d44 <PID_cal+0x288>)
 8003c66:	edd3 7a00 	vldr	s15, [r3]
 8003c6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	330c      	adds	r3, #12
 8003c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c76:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d38 <PID_cal+0x27c>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d045      	beq.n	8003d0e <PID_cal+0x252>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	330c      	adds	r3, #12
 8003c86:	ed93 7a00 	vldr	s14, [r3]
 8003c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d38 <PID_cal+0x27c>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c96:	4b26      	ldr	r3, [pc, #152]	@ (8003d30 <PID_cal+0x274>)
 8003c98:	edd3 7a00 	vldr	s15, [r3]
 8003c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ca0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ca4:	4b24      	ldr	r3, [pc, #144]	@ (8003d38 <PID_cal+0x27c>)
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d30 <PID_cal+0x274>)
 8003cb2:	edd3 7a00 	vldr	s15, [r3]
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	3310      	adds	r3, #16
 8003cca:	edd3 6a00 	vldr	s13, [r3]
 8003cce:	4b1a      	ldr	r3, [pc, #104]	@ (8003d38 <PID_cal+0x27c>)
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <PID_cal+0x274>)
 8003cdc:	edd3 7a00 	vldr	s15, [r3]
 8003ce0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ce4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003ce8:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003cec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003cf0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d00:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	3310      	adds	r3, #16
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	68d2      	ldr	r2, [r2, #12]
 8003d0c:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	ed93 7a00 	vldr	s14, [r3]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	330c      	adds	r3, #12
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003d26:	e256      	b.n	80041d6 <PID_cal+0x71a>
 8003d28:	00004094 	.word	0x00004094
 8003d2c:	000040c4 	.word	0x000040c4
 8003d30:	0801ebcc 	.word	0x0801ebcc
 8003d34:	000040ac 	.word	0x000040ac
 8003d38:	00004086 	.word	0x00004086
 8003d3c:	00004098 	.word	0x00004098
 8003d40:	000040c8 	.word	0x000040c8
 8003d44:	000040b0 	.word	0x000040b0

		case 3:

			*PID_var = PID_FAC[0]*(yaw_error);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	ed93 7a00 	vldr	s14, [r3]
 8003d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f7c <PID_cal+0x4c0>)
 8003d50:	edd3 7a00 	vldr	s15, [r3]
 8003d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	ed93 7a00 	vldr	s14, [r3]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	3304      	adds	r3, #4
 8003d68:	edd3 6a00 	vldr	s13, [r3]
 8003d6c:	4b84      	ldr	r3, [pc, #528]	@ (8003f80 <PID_cal+0x4c4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d7c:	4b81      	ldr	r3, [pc, #516]	@ (8003f84 <PID_cal+0x4c8>)
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_error) - old_error_yaw);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	3308      	adds	r3, #8
 8003d94:	ed93 7a00 	vldr	s14, [r3]
 8003d98:	4b78      	ldr	r3, [pc, #480]	@ (8003f7c <PID_cal+0x4c0>)
 8003d9a:	edd3 6a00 	vldr	s13, [r3]
 8003d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f88 <PID_cal+0x4cc>)
 8003da0:	edd3 7a00 	vldr	s15, [r3]
 8003da4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	330c      	adds	r3, #12
 8003dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db0:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003db4:	4b75      	ldr	r3, [pc, #468]	@ (8003f8c <PID_cal+0x4d0>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d045      	beq.n	8003e48 <PID_cal+0x38c>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	ed93 7a00 	vldr	s14, [r3]
 8003dc4:	4b71      	ldr	r3, [pc, #452]	@ (8003f8c <PID_cal+0x4d0>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f84 <PID_cal+0x4c8>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dda:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003dde:	4b6b      	ldr	r3, [pc, #428]	@ (8003f8c <PID_cal+0x4d0>)
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dea:	4b66      	ldr	r3, [pc, #408]	@ (8003f84 <PID_cal+0x4c8>)
 8003dec:	edd3 7a00 	vldr	s15, [r3]
 8003df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3310      	adds	r3, #16
 8003e04:	edd3 6a00 	vldr	s13, [r3]
 8003e08:	4b60      	ldr	r3, [pc, #384]	@ (8003f8c <PID_cal+0x4d0>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003e14:	4b5b      	ldr	r3, [pc, #364]	@ (8003f84 <PID_cal+0x4c8>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e1e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003e22:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003e26:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003e2a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	330c      	adds	r3, #12
 8003e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e3a:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3310      	adds	r3, #16
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	68d2      	ldr	r2, [r2, #12]
 8003e46:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	ed93 7a00 	vldr	s14, [r3]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	330c      	adds	r3, #12
 8003e52:	edd3 7a00 	vldr	s15, [r3]
 8003e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003e60:	e1b9      	b.n	80041d6 <PID_cal+0x71a>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pitch_ar_error);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	ed93 7a00 	vldr	s14, [r3]
 8003e68:	4b49      	ldr	r3, [pc, #292]	@ (8003f90 <PID_cal+0x4d4>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	ed93 7a00 	vldr	s14, [r3]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3304      	adds	r3, #4
 8003e82:	edd3 6a00 	vldr	s13, [r3]
 8003e86:	4b43      	ldr	r3, [pc, #268]	@ (8003f94 <PID_cal+0x4d8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e96:	4b3b      	ldr	r3, [pc, #236]	@ (8003f84 <PID_cal+0x4c8>)
 8003e98:	edd3 7a00 	vldr	s15, [r3]
 8003e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pitch_ar_error) - old_error_angular_rate_pitch);//policzenie częsci D
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	3308      	adds	r3, #8
 8003eae:	ed93 7a00 	vldr	s14, [r3]
 8003eb2:	4b37      	ldr	r3, [pc, #220]	@ (8003f90 <PID_cal+0x4d4>)
 8003eb4:	edd3 6a00 	vldr	s13, [r3]
 8003eb8:	4b37      	ldr	r3, [pc, #220]	@ (8003f98 <PID_cal+0x4dc>)
 8003eba:	edd3 7a00 	vldr	s15, [r3]
 8003ebe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003ece:	4b33      	ldr	r3, [pc, #204]	@ (8003f9c <PID_cal+0x4e0>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d045      	beq.n	8003f62 <PID_cal+0x4a6>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	ed93 7a00 	vldr	s14, [r3]
 8003ede:	4b2f      	ldr	r3, [pc, #188]	@ (8003f9c <PID_cal+0x4e0>)
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003eea:	4b26      	ldr	r3, [pc, #152]	@ (8003f84 <PID_cal+0x4c8>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ef4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ef8:	4b28      	ldr	r3, [pc, #160]	@ (8003f9c <PID_cal+0x4e0>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f04:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <PID_cal+0x4c8>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3310      	adds	r3, #16
 8003f1e:	edd3 6a00 	vldr	s13, [r3]
 8003f22:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <PID_cal+0x4e0>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <PID_cal+0x4c8>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f38:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003f3c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003f40:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003f44:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3310      	adds	r3, #16
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	68d2      	ldr	r2, [r2, #12]
 8003f60:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	ed93 7a00 	vldr	s14, [r3]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003f7a:	e12c      	b.n	80041d6 <PID_cal+0x71a>
 8003f7c:	0000409c 	.word	0x0000409c
 8003f80:	000040cc 	.word	0x000040cc
 8003f84:	0801ebcc 	.word	0x0801ebcc
 8003f88:	000040b4 	.word	0x000040b4
 8003f8c:	00004086 	.word	0x00004086
 8003f90:	000040a0 	.word	0x000040a0
 8003f94:	000040d0 	.word	0x000040d0
 8003f98:	000040b8 	.word	0x000040b8
 8003f9c:	00004084 	.word	0x00004084

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(rool_ar_error);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	ed93 7a00 	vldr	s14, [r3]
 8003fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80041e4 <PID_cal+0x728>)
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	ed93 7a00 	vldr	s14, [r3]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	edd3 6a00 	vldr	s13, [r3]
 8003fc4:	4b88      	ldr	r3, [pc, #544]	@ (80041e8 <PID_cal+0x72c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fd4:	4b85      	ldr	r3, [pc, #532]	@ (80041ec <PID_cal+0x730>)
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_ar_error) - old_error_angular_rate_rool);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	3308      	adds	r3, #8
 8003fec:	ed93 7a00 	vldr	s14, [r3]
 8003ff0:	4b7c      	ldr	r3, [pc, #496]	@ (80041e4 <PID_cal+0x728>)
 8003ff2:	edd3 6a00 	vldr	s13, [r3]
 8003ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80041f0 <PID_cal+0x734>)
 8003ff8:	edd3 7a00 	vldr	s15, [r3]
 8003ffc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	330c      	adds	r3, #12
 8004004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004008:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 800400c:	4b79      	ldr	r3, [pc, #484]	@ (80041f4 <PID_cal+0x738>)
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d045      	beq.n	80040a0 <PID_cal+0x5e4>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	330c      	adds	r3, #12
 8004018:	ed93 7a00 	vldr	s14, [r3]
 800401c:	4b75      	ldr	r3, [pc, #468]	@ (80041f4 <PID_cal+0x738>)
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	ee07 3a90 	vmov	s15, r3
 8004024:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004028:	4b70      	ldr	r3, [pc, #448]	@ (80041ec <PID_cal+0x730>)
 800402a:	edd3 7a00 	vldr	s15, [r3]
 800402e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004032:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004036:	4b6f      	ldr	r3, [pc, #444]	@ (80041f4 <PID_cal+0x738>)
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004042:	4b6a      	ldr	r3, [pc, #424]	@ (80041ec <PID_cal+0x730>)
 8004044:	edd3 7a00 	vldr	s15, [r3]
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004050:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3310      	adds	r3, #16
 800405c:	edd3 6a00 	vldr	s13, [r3]
 8004060:	4b64      	ldr	r3, [pc, #400]	@ (80041f4 <PID_cal+0x738>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800406c:	4b5f      	ldr	r3, [pc, #380]	@ (80041ec <PID_cal+0x730>)
 800406e:	edd3 7a00 	vldr	s15, [r3]
 8004072:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004076:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800407a:	ee37 6a86 	vadd.f32	s12, s15, s12
 800407e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004082:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	330c      	adds	r3, #12
 800408e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004092:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3310      	adds	r3, #16
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	ed93 7a00 	vldr	s14, [r3]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	330c      	adds	r3, #12
 80040aa:	edd3 7a00 	vldr	s15, [r3]
 80040ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	edc3 7a00 	vstr	s15, [r3]
			break;
 80040b8:	e08d      	b.n	80041d6 <PID_cal+0x71a>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(yaw_ar_error);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	ed93 7a00 	vldr	s14, [r3]
 80040c0:	4b4d      	ldr	r3, [pc, #308]	@ (80041f8 <PID_cal+0x73c>)
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	ed93 7a00 	vldr	s14, [r3]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3304      	adds	r3, #4
 80040da:	edd3 6a00 	vldr	s13, [r3]
 80040de:	4b47      	ldr	r3, [pc, #284]	@ (80041fc <PID_cal+0x740>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040ee:	4b3f      	ldr	r3, [pc, #252]	@ (80041ec <PID_cal+0x730>)
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_ar_error) - old_error_angular_rate_yaw);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3308      	adds	r3, #8
 8004106:	ed93 7a00 	vldr	s14, [r3]
 800410a:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <PID_cal+0x73c>)
 800410c:	edd3 6a00 	vldr	s13, [r3]
 8004110:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <PID_cal+0x744>)
 8004112:	edd3 7a00 	vldr	s15, [r3]
 8004116:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	330c      	adds	r3, #12
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8004126:	4b33      	ldr	r3, [pc, #204]	@ (80041f4 <PID_cal+0x738>)
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d045      	beq.n	80041ba <PID_cal+0x6fe>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	330c      	adds	r3, #12
 8004132:	ed93 7a00 	vldr	s14, [r3]
 8004136:	4b2f      	ldr	r3, [pc, #188]	@ (80041f4 <PID_cal+0x738>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004142:	4b2a      	ldr	r3, [pc, #168]	@ (80041ec <PID_cal+0x730>)
 8004144:	edd3 7a00 	vldr	s15, [r3]
 8004148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800414c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004150:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <PID_cal+0x738>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800415c:	4b23      	ldr	r3, [pc, #140]	@ (80041ec <PID_cal+0x730>)
 800415e:	edd3 7a00 	vldr	s15, [r3]
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800416a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	3310      	adds	r3, #16
 8004176:	edd3 6a00 	vldr	s13, [r3]
 800417a:	4b1e      	ldr	r3, [pc, #120]	@ (80041f4 <PID_cal+0x738>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004186:	4b19      	ldr	r3, [pc, #100]	@ (80041ec <PID_cal+0x730>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004190:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004194:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004198:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800419c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80041a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	330c      	adds	r3, #12
 80041a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ac:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	3310      	adds	r3, #16
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	68d2      	ldr	r2, [r2, #12]
 80041b8:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	ed93 7a00 	vldr	s14, [r3]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	330c      	adds	r3, #12
 80041c4:	edd3 7a00 	vldr	s15, [r3]
 80041c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	edc3 7a00 	vstr	s15, [r3]
			break;
 80041d2:	e000      	b.n	80041d6 <PID_cal+0x71a>
		default:
			break;
 80041d4:	bf00      	nop
	}
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	000040a4 	.word	0x000040a4
 80041e8:	000040d4 	.word	0x000040d4
 80041ec:	0801ebcc 	.word	0x0801ebcc
 80041f0:	000040bc 	.word	0x000040bc
 80041f4:	00004084 	.word	0x00004084
 80041f8:	000040a8 	.word	0x000040a8
 80041fc:	000040d8 	.word	0x000040d8
 8004200:	000040c0 	.word	0x000040c0
 8004204:	00000000 	.word	0x00000000

08004208 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 800420c:	4b1c      	ldr	r3, [pc, #112]	@ (8004280 <Get_batteryvalue+0x78>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800421c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8004278 <Get_batteryvalue+0x70>
 8004220:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004224:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004228:	ee17 3a90 	vmov	r3, s15
 800422c:	b29a      	uxth	r2, r3
 800422e:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <Get_batteryvalue+0x7c>)
 8004230:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8004232:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <Get_batteryvalue+0x7c>)
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	2b63      	cmp	r3, #99	@ 0x63
 8004238:	d902      	bls.n	8004240 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 800423a:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <Get_batteryvalue+0x7c>)
 800423c:	2264      	movs	r2, #100	@ 0x64
 800423e:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8004240:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <Get_batteryvalue+0x7c>)
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	2b18      	cmp	r3, #24
 8004246:	d802      	bhi.n	800424e <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8004248:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <Get_batteryvalue+0x7c>)
 800424a:	2207      	movs	r2, #7
 800424c:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <Get_batteryvalue+0x7c>)
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	2b0a      	cmp	r3, #10
 8004254:	d802      	bhi.n	800425c <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8004256:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <Get_batteryvalue+0x7c>)
 8004258:	2209      	movs	r2, #9
 800425a:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 800425c:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <Get_batteryvalue+0x7c>)
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	2b18      	cmp	r3, #24
 8004262:	d902      	bls.n	800426a <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8004264:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <Get_batteryvalue+0x7c>)
 8004266:	2208      	movs	r2, #8
 8004268:	829a      	strh	r2, [r3, #20]
	}
}
 800426a:	bf00      	nop
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	f3af 8000 	nop.w
 8004278:	7ae147ae 	.word	0x7ae147ae
 800427c:	401dae14 	.word	0x401dae14
 8004280:	24000eb0 	.word	0x24000eb0
 8004284:	00000188 	.word	0x00000188

08004288 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004292:	4802      	ldr	r0, [pc, #8]	@ (800429c <SELECT+0x14>)
 8004294:	f00a f85a 	bl	800e34c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}
 800429c:	58020c00 	.word	0x58020c00

080042a0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80042a4:	2201      	movs	r2, #1
 80042a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042aa:	4802      	ldr	r0, [pc, #8]	@ (80042b4 <DESELECT+0x14>)
 80042ac:	f00a f84e 	bl	800e34c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	58020c00 	.word	0x58020c00

080042b8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80042c2:	bf00      	nop
 80042c4:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <SPI_TxByte+0x2c>)
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d1f9      	bne.n	80042c4 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80042d0:	1df9      	adds	r1, r7, #7
 80042d2:	2364      	movs	r3, #100	@ 0x64
 80042d4:	2201      	movs	r2, #1
 80042d6:	4804      	ldr	r0, [pc, #16]	@ (80042e8 <SPI_TxByte+0x30>)
 80042d8:	f010 f994 	bl	8014604 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40020010 	.word	0x40020010
 80042e8:	24000274 	.word	0x24000274

080042ec <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80042f8:	bf00      	nop
 80042fa:	4b08      	ldr	r3, [pc, #32]	@ (800431c <SPI_TxBuffer+0x30>)
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004302:	2b20      	cmp	r3, #32
 8004304:	d1f9      	bne.n	80042fa <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8004306:	887b      	ldrh	r3, [r7, #2]
 8004308:	461a      	mov	r2, r3
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4804      	ldr	r0, [pc, #16]	@ (8004320 <SPI_TxBuffer+0x34>)
 800430e:	f011 fa67 	bl	80157e0 <HAL_SPI_Transmit_DMA>
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40020010 	.word	0x40020010
 8004320:	24000274 	.word	0x24000274

08004324 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800432a:	23ff      	movs	r3, #255	@ 0xff
 800432c:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800432e:	bf00      	nop
 8004330:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <SPI_RxByte+0x34>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004338:	2b20      	cmp	r3, #32
 800433a:	d1f9      	bne.n	8004330 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800433c:	1dba      	adds	r2, r7, #6
 800433e:	1df9      	adds	r1, r7, #7
 8004340:	2364      	movs	r3, #100	@ 0x64
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	2301      	movs	r3, #1
 8004346:	4805      	ldr	r0, [pc, #20]	@ (800435c <SPI_RxByte+0x38>)
 8004348:	f010 fdbc 	bl	8014ec4 <HAL_SPI_TransmitReceive>

	return data;
 800434c:	79bb      	ldrb	r3, [r7, #6]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40020010 	.word	0x40020010
 800435c:	24000274 	.word	0x24000274

08004360 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004368:	f7ff ffdc 	bl	8004324 <SPI_RxByte>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	701a      	strb	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <SD_ReadyWait+0x30>)
 8004384:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004388:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800438a:	f7ff ffcb 	bl	8004324 <SPI_RxByte>
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	2bff      	cmp	r3, #255	@ 0xff
 8004396:	d004      	beq.n	80043a2 <SD_ReadyWait+0x26>
 8004398:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <SD_ReadyWait+0x30>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f3      	bne.n	800438a <SD_ReadyWait+0xe>

	return res;
 80043a2:	79fb      	ldrb	r3, [r7, #7]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	2400037c 	.word	0x2400037c

080043b0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80043b6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80043ba:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80043bc:	f7ff ff70 	bl	80042a0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	e005      	b.n	80043d2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80043c6:	20ff      	movs	r0, #255	@ 0xff
 80043c8:	f7ff ff76 	bl	80042b8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	ddf6      	ble.n	80043c6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80043d8:	f7ff ff56 	bl	8004288 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80043dc:	2340      	movs	r3, #64	@ 0x40
 80043de:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80043f0:	2395      	movs	r3, #149	@ 0x95
 80043f2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80043f4:	463b      	mov	r3, r7
 80043f6:	2106      	movs	r1, #6
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff77 	bl	80042ec <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80043fe:	e002      	b.n	8004406 <SD_PowerOn+0x56>
	{
		cnt--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004406:	f7ff ff8d 	bl	8004324 <SPI_RxByte>
 800440a:	4603      	mov	r3, r0
 800440c:	2b01      	cmp	r3, #1
 800440e:	d002      	beq.n	8004416 <SD_PowerOn+0x66>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f4      	bne.n	8004400 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004416:	f7ff ff43 	bl	80042a0 <DESELECT>
	SPI_TxByte(0XFF);
 800441a:	20ff      	movs	r0, #255	@ 0xff
 800441c:	f7ff ff4c 	bl	80042b8 <SPI_TxByte>

	PowerFlag = 1;
 8004420:	4b03      	ldr	r3, [pc, #12]	@ (8004430 <SD_PowerOn+0x80>)
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	24000195 	.word	0x24000195

08004434 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004438:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <SD_PowerOff+0x14>)
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	24000195 	.word	0x24000195

0800444c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <SD_CheckPower+0x14>)
 8004452:	781b      	ldrb	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	24000195 	.word	0x24000195

08004464 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 800446e:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <SD_RxDataBlock+0x5c>)
 8004470:	220a      	movs	r2, #10
 8004472:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004474:	f7ff ff56 	bl	8004324 <SPI_RxByte>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2bff      	cmp	r3, #255	@ 0xff
 8004480:	d104      	bne.n	800448c <SD_RxDataBlock+0x28>
 8004482:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <SD_RxDataBlock+0x5c>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f3      	bne.n	8004474 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004490:	d001      	beq.n	8004496 <SD_RxDataBlock+0x32>
 8004492:	2300      	movs	r3, #0
 8004494:	e00f      	b.n	80044b6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ff5f 	bl	8004360 <SPI_RxBytePtr>
	} while(len--);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	1e5a      	subs	r2, r3, #1
 80044a6:	603a      	str	r2, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f4      	bne.n	8004496 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80044ac:	f7ff ff3a 	bl	8004324 <SPI_RxByte>
	SPI_RxByte();
 80044b0:	f7ff ff38 	bl	8004324 <SPI_RxByte>

	return TRUE;
 80044b4:	2301      	movs	r3, #1
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	24000378 	.word	0x24000378

080044c4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80044d4:	f7ff ff52 	bl	800437c <SD_ReadyWait>
 80044d8:	4603      	mov	r3, r0
 80044da:	2bff      	cmp	r3, #255	@ 0xff
 80044dc:	d001      	beq.n	80044e2 <SD_TxDataBlock+0x1e>
 80044de:	2300      	movs	r3, #0
 80044e0:	e02f      	b.n	8004542 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fee7 	bl	80042b8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80044ee:	d020      	beq.n	8004532 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80044f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fef9 	bl	80042ec <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80044fa:	f7ff ff13 	bl	8004324 <SPI_RxByte>
		SPI_RxByte();
 80044fe:	f7ff ff11 	bl	8004324 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004502:	e00b      	b.n	800451c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004504:	f7ff ff0e 	bl	8004324 <SPI_RxByte>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2b05      	cmp	r3, #5
 8004514:	d006      	beq.n	8004524 <SD_TxDataBlock+0x60>
			i++;
 8004516:	7bbb      	ldrb	r3, [r7, #14]
 8004518:	3301      	adds	r3, #1
 800451a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800451c:	7bbb      	ldrb	r3, [r7, #14]
 800451e:	2b40      	cmp	r3, #64	@ 0x40
 8004520:	d9f0      	bls.n	8004504 <SD_TxDataBlock+0x40>
 8004522:	e000      	b.n	8004526 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004524:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004526:	bf00      	nop
 8004528:	f7ff fefc 	bl	8004324 <SPI_RxByte>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0fa      	beq.n	8004528 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2b05      	cmp	r3, #5
 800453a:	d101      	bne.n	8004540 <SD_TxDataBlock+0x7c>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	6039      	str	r1, [r7, #0]
 8004554:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004556:	f7ff ff11 	bl	800437c <SD_ReadyWait>
 800455a:	4603      	mov	r3, r0
 800455c:	2bff      	cmp	r3, #255	@ 0xff
 800455e:	d001      	beq.n	8004564 <SD_SendCmd+0x1a>
 8004560:	23ff      	movs	r3, #255	@ 0xff
 8004562:	e042      	b.n	80045ea <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fea6 	bl	80042b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	0e1b      	lsrs	r3, r3, #24
 8004570:	b2db      	uxtb	r3, r3
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fea0 	bl	80042b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	0c1b      	lsrs	r3, r3, #16
 800457c:	b2db      	uxtb	r3, r3
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fe9a 	bl	80042b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	b2db      	uxtb	r3, r3
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fe94 	bl	80042b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fe8f 	bl	80042b8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d102      	bne.n	80045a6 <SD_SendCmd+0x5c>
 80045a0:	2395      	movs	r3, #149	@ 0x95
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e007      	b.n	80045b6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	2b48      	cmp	r3, #72	@ 0x48
 80045aa:	d102      	bne.n	80045b2 <SD_SendCmd+0x68>
 80045ac:	2387      	movs	r3, #135	@ 0x87
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e001      	b.n	80045b6 <SD_SendCmd+0x6c>
	else crc = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fe7d 	bl	80042b8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	2b4c      	cmp	r3, #76	@ 0x4c
 80045c2:	d101      	bne.n	80045c8 <SD_SendCmd+0x7e>
 80045c4:	f7ff feae 	bl	8004324 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80045c8:	230a      	movs	r3, #10
 80045ca:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80045cc:	f7ff feaa 	bl	8004324 <SPI_RxByte>
 80045d0:	4603      	mov	r3, r0
 80045d2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80045d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	da05      	bge.n	80045e8 <SD_SendCmd+0x9e>
 80045dc:	7bbb      	ldrb	r3, [r7, #14]
 80045de:	3b01      	subs	r3, #1
 80045e0:	73bb      	strb	r3, [r7, #14]
 80045e2:	7bbb      	ldrb	r3, [r7, #14]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f1      	bne.n	80045cc <SD_SendCmd+0x82>

	return res;
 80045e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <SD_disk_initialize+0x14>
 8004604:	2301      	movs	r3, #1
 8004606:	e0d6      	b.n	80047b6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004608:	4b6d      	ldr	r3, [pc, #436]	@ (80047c0 <SD_disk_initialize+0x1cc>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <SD_disk_initialize+0x2a>
 8004616:	4b6a      	ldr	r3, [pc, #424]	@ (80047c0 <SD_disk_initialize+0x1cc>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e0cb      	b.n	80047b6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800461e:	f7ff fec7 	bl	80043b0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004622:	f7ff fe31 	bl	8004288 <SELECT>

	/* check disk type */
	type = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800462a:	2100      	movs	r1, #0
 800462c:	2040      	movs	r0, #64	@ 0x40
 800462e:	f7ff ff8c 	bl	800454a <SD_SendCmd>
 8004632:	4603      	mov	r3, r0
 8004634:	2b01      	cmp	r3, #1
 8004636:	f040 80a6 	bne.w	8004786 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800463a:	4b62      	ldr	r3, [pc, #392]	@ (80047c4 <SD_disk_initialize+0x1d0>)
 800463c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004640:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004642:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004646:	2048      	movs	r0, #72	@ 0x48
 8004648:	f7ff ff7f 	bl	800454a <SD_SendCmd>
 800464c:	4603      	mov	r3, r0
 800464e:	2b01      	cmp	r3, #1
 8004650:	d158      	bne.n	8004704 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	e00c      	b.n	8004672 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004658:	7bfc      	ldrb	r4, [r7, #15]
 800465a:	f7ff fe63 	bl	8004324 <SPI_RxByte>
 800465e:	4603      	mov	r3, r0
 8004660:	461a      	mov	r2, r3
 8004662:	f104 0310 	add.w	r3, r4, #16
 8004666:	443b      	add	r3, r7
 8004668:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	3301      	adds	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d9ef      	bls.n	8004658 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004678:	7abb      	ldrb	r3, [r7, #10]
 800467a:	2b01      	cmp	r3, #1
 800467c:	f040 8083 	bne.w	8004786 <SD_disk_initialize+0x192>
 8004680:	7afb      	ldrb	r3, [r7, #11]
 8004682:	2baa      	cmp	r3, #170	@ 0xaa
 8004684:	d17f      	bne.n	8004786 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004686:	2100      	movs	r1, #0
 8004688:	2077      	movs	r0, #119	@ 0x77
 800468a:	f7ff ff5e 	bl	800454a <SD_SendCmd>
 800468e:	4603      	mov	r3, r0
 8004690:	2b01      	cmp	r3, #1
 8004692:	d807      	bhi.n	80046a4 <SD_disk_initialize+0xb0>
 8004694:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004698:	2069      	movs	r0, #105	@ 0x69
 800469a:	f7ff ff56 	bl	800454a <SD_SendCmd>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80046a4:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <SD_disk_initialize+0x1d0>)
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1eb      	bne.n	8004686 <SD_disk_initialize+0x92>
 80046ae:	e000      	b.n	80046b2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80046b0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80046b2:	4b44      	ldr	r3, [pc, #272]	@ (80047c4 <SD_disk_initialize+0x1d0>)
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d064      	beq.n	8004786 <SD_disk_initialize+0x192>
 80046bc:	2100      	movs	r1, #0
 80046be:	207a      	movs	r0, #122	@ 0x7a
 80046c0:	f7ff ff43 	bl	800454a <SD_SendCmd>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d15d      	bne.n	8004786 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
 80046ce:	e00c      	b.n	80046ea <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80046d0:	7bfc      	ldrb	r4, [r7, #15]
 80046d2:	f7ff fe27 	bl	8004324 <SPI_RxByte>
 80046d6:	4603      	mov	r3, r0
 80046d8:	461a      	mov	r2, r3
 80046da:	f104 0310 	add.w	r3, r4, #16
 80046de:	443b      	add	r3, r7
 80046e0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	3301      	adds	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d9ef      	bls.n	80046d0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80046f0:	7a3b      	ldrb	r3, [r7, #8]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <SD_disk_initialize+0x10a>
 80046fa:	230c      	movs	r3, #12
 80046fc:	e000      	b.n	8004700 <SD_disk_initialize+0x10c>
 80046fe:	2304      	movs	r3, #4
 8004700:	73bb      	strb	r3, [r7, #14]
 8004702:	e040      	b.n	8004786 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004704:	2100      	movs	r1, #0
 8004706:	2077      	movs	r0, #119	@ 0x77
 8004708:	f7ff ff1f 	bl	800454a <SD_SendCmd>
 800470c:	4603      	mov	r3, r0
 800470e:	2b01      	cmp	r3, #1
 8004710:	d808      	bhi.n	8004724 <SD_disk_initialize+0x130>
 8004712:	2100      	movs	r1, #0
 8004714:	2069      	movs	r0, #105	@ 0x69
 8004716:	f7ff ff18 	bl	800454a <SD_SendCmd>
 800471a:	4603      	mov	r3, r0
 800471c:	2b01      	cmp	r3, #1
 800471e:	d801      	bhi.n	8004724 <SD_disk_initialize+0x130>
 8004720:	2302      	movs	r3, #2
 8004722:	e000      	b.n	8004726 <SD_disk_initialize+0x132>
 8004724:	2301      	movs	r3, #1
 8004726:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004728:	7bbb      	ldrb	r3, [r7, #14]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d10e      	bne.n	800474c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800472e:	2100      	movs	r1, #0
 8004730:	2077      	movs	r0, #119	@ 0x77
 8004732:	f7ff ff0a 	bl	800454a <SD_SendCmd>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d80e      	bhi.n	800475a <SD_disk_initialize+0x166>
 800473c:	2100      	movs	r1, #0
 800473e:	2069      	movs	r0, #105	@ 0x69
 8004740:	f7ff ff03 	bl	800454a <SD_SendCmd>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d107      	bne.n	800475a <SD_disk_initialize+0x166>
 800474a:	e00d      	b.n	8004768 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800474c:	2100      	movs	r1, #0
 800474e:	2041      	movs	r0, #65	@ 0x41
 8004750:	f7ff fefb 	bl	800454a <SD_SendCmd>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800475a:	4b1a      	ldr	r3, [pc, #104]	@ (80047c4 <SD_disk_initialize+0x1d0>)
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e1      	bne.n	8004728 <SD_disk_initialize+0x134>
 8004764:	e000      	b.n	8004768 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004766:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004768:	4b16      	ldr	r3, [pc, #88]	@ (80047c4 <SD_disk_initialize+0x1d0>)
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <SD_disk_initialize+0x18e>
 8004772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004776:	2050      	movs	r0, #80	@ 0x50
 8004778:	f7ff fee7 	bl	800454a <SD_SendCmd>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <SD_disk_initialize+0x192>
 8004782:	2300      	movs	r3, #0
 8004784:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004786:	4a10      	ldr	r2, [pc, #64]	@ (80047c8 <SD_disk_initialize+0x1d4>)
 8004788:	7bbb      	ldrb	r3, [r7, #14]
 800478a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800478c:	f7ff fd88 	bl	80042a0 <DESELECT>
	SPI_RxByte();
 8004790:	f7ff fdc8 	bl	8004324 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004794:	7bbb      	ldrb	r3, [r7, #14]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800479a:	4b09      	ldr	r3, [pc, #36]	@ (80047c0 <SD_disk_initialize+0x1cc>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <SD_disk_initialize+0x1cc>)
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e001      	b.n	80047b0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80047ac:	f7ff fe42 	bl	8004434 <SD_PowerOff>
	}

	return Stat;
 80047b0:	4b03      	ldr	r3, [pc, #12]	@ (80047c0 <SD_disk_initialize+0x1cc>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}
 80047be:	bf00      	nop
 80047c0:	24000000 	.word	0x24000000
 80047c4:	24000378 	.word	0x24000378
 80047c8:	24000194 	.word	0x24000194

080047cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <SD_disk_status+0x14>
 80047dc:	2301      	movs	r3, #1
 80047de:	e002      	b.n	80047e6 <SD_disk_status+0x1a>
	return Stat;
 80047e0:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <SD_disk_status+0x28>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b2db      	uxtb	r3, r3
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	24000000 	.word	0x24000000

080047f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <SD_disk_read+0x1c>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <SD_disk_read+0x20>
 8004814:	2304      	movs	r3, #4
 8004816:	e051      	b.n	80048bc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004818:	4b2a      	ldr	r3, [pc, #168]	@ (80048c4 <SD_disk_read+0xcc>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <SD_disk_read+0x32>
 8004826:	2303      	movs	r3, #3
 8004828:	e048      	b.n	80048bc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800482a:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <SD_disk_read+0xd0>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <SD_disk_read+0x44>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	025b      	lsls	r3, r3, #9
 800483a:	607b      	str	r3, [r7, #4]

	SELECT();
 800483c:	f7ff fd24 	bl	8004288 <SELECT>

	if (count == 1)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d111      	bne.n	800486a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	2051      	movs	r0, #81	@ 0x51
 800484a:	f7ff fe7e 	bl	800454a <SD_SendCmd>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d129      	bne.n	80048a8 <SD_disk_read+0xb0>
 8004854:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004858:	68b8      	ldr	r0, [r7, #8]
 800485a:	f7ff fe03 	bl	8004464 <SD_RxDataBlock>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d021      	beq.n	80048a8 <SD_disk_read+0xb0>
 8004864:	2300      	movs	r3, #0
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	e01e      	b.n	80048a8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	2052      	movs	r0, #82	@ 0x52
 800486e:	f7ff fe6c 	bl	800454a <SD_SendCmd>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d117      	bne.n	80048a8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800487c:	68b8      	ldr	r0, [r7, #8]
 800487e:	f7ff fdf1 	bl	8004464 <SD_RxDataBlock>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <SD_disk_read+0xa6>
				buff += 512;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800488e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	3b01      	subs	r3, #1
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ed      	bne.n	8004878 <SD_disk_read+0x80>
 800489c:	e000      	b.n	80048a0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800489e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80048a0:	2100      	movs	r1, #0
 80048a2:	204c      	movs	r0, #76	@ 0x4c
 80048a4:	f7ff fe51 	bl	800454a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80048a8:	f7ff fcfa 	bl	80042a0 <DESELECT>
	SPI_RxByte();
 80048ac:	f7ff fd3a 	bl	8004324 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bf14      	ite	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	2300      	moveq	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	24000000 	.word	0x24000000
 80048c8:	24000194 	.word	0x24000194

080048cc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <SD_disk_write+0x1c>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <SD_disk_write+0x20>
 80048e8:	2304      	movs	r3, #4
 80048ea:	e06b      	b.n	80049c4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80048ec:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <SD_disk_write+0x100>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <SD_disk_write+0x32>
 80048fa:	2303      	movs	r3, #3
 80048fc:	e062      	b.n	80049c4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80048fe:	4b33      	ldr	r3, [pc, #204]	@ (80049cc <SD_disk_write+0x100>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <SD_disk_write+0x44>
 800490c:	2302      	movs	r3, #2
 800490e:	e059      	b.n	80049c4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004910:	4b2f      	ldr	r3, [pc, #188]	@ (80049d0 <SD_disk_write+0x104>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <SD_disk_write+0x56>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	025b      	lsls	r3, r3, #9
 8004920:	607b      	str	r3, [r7, #4]

	SELECT();
 8004922:	f7ff fcb1 	bl	8004288 <SELECT>

	if (count == 1)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d110      	bne.n	800494e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	2058      	movs	r0, #88	@ 0x58
 8004930:	f7ff fe0b 	bl	800454a <SD_SendCmd>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d13a      	bne.n	80049b0 <SD_disk_write+0xe4>
 800493a:	21fe      	movs	r1, #254	@ 0xfe
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	f7ff fdc1 	bl	80044c4 <SD_TxDataBlock>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d033      	beq.n	80049b0 <SD_disk_write+0xe4>
			count = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	e030      	b.n	80049b0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800494e:	4b20      	ldr	r3, [pc, #128]	@ (80049d0 <SD_disk_write+0x104>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800495a:	2100      	movs	r1, #0
 800495c:	2077      	movs	r0, #119	@ 0x77
 800495e:	f7ff fdf4 	bl	800454a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	2057      	movs	r0, #87	@ 0x57
 8004966:	f7ff fdf0 	bl	800454a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	2059      	movs	r0, #89	@ 0x59
 800496e:	f7ff fdec 	bl	800454a <SD_SendCmd>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11b      	bne.n	80049b0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004978:	21fc      	movs	r1, #252	@ 0xfc
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	f7ff fda2 	bl	80044c4 <SD_TxDataBlock>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <SD_disk_write+0xd0>
				buff += 512;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800498c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	3b01      	subs	r3, #1
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1ee      	bne.n	8004978 <SD_disk_write+0xac>
 800499a:	e000      	b.n	800499e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800499c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800499e:	21fd      	movs	r1, #253	@ 0xfd
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7ff fd8f 	bl	80044c4 <SD_TxDataBlock>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <SD_disk_write+0xe4>
			{
				count = 1;
 80049ac:	2301      	movs	r3, #1
 80049ae:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80049b0:	f7ff fc76 	bl	80042a0 <DESELECT>
	SPI_RxByte();
 80049b4:	f7ff fcb6 	bl	8004324 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	24000000 	.word	0x24000000
 80049d0:	24000194 	.word	0x24000194

080049d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b08b      	sub	sp, #44	@ 0x2c
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	603a      	str	r2, [r7, #0]
 80049de:	71fb      	strb	r3, [r7, #7]
 80049e0:	460b      	mov	r3, r1
 80049e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <SD_disk_ioctl+0x1e>
 80049ee:	2304      	movs	r3, #4
 80049f0:	e113      	b.n	8004c1a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80049f8:	79bb      	ldrb	r3, [r7, #6]
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d124      	bne.n	8004a48 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d012      	beq.n	8004a2c <SD_disk_ioctl+0x58>
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	dc1a      	bgt.n	8004a40 <SD_disk_ioctl+0x6c>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <SD_disk_ioctl+0x40>
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d006      	beq.n	8004a20 <SD_disk_ioctl+0x4c>
 8004a12:	e015      	b.n	8004a40 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004a14:	f7ff fd0e 	bl	8004434 <SD_PowerOff>
			res = RES_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a1e:	e0fa      	b.n	8004c16 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004a20:	f7ff fcc6 	bl	80043b0 <SD_PowerOn>
			res = RES_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a2a:	e0f4      	b.n	8004c16 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	1c5c      	adds	r4, r3, #1
 8004a30:	f7ff fd0c 	bl	800444c <SD_CheckPower>
 8004a34:	4603      	mov	r3, r0
 8004a36:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a3e:	e0ea      	b.n	8004c16 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a46:	e0e6      	b.n	8004c16 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a48:	4b76      	ldr	r3, [pc, #472]	@ (8004c24 <SD_disk_ioctl+0x250>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <SD_disk_ioctl+0x86>
 8004a56:	2303      	movs	r3, #3
 8004a58:	e0df      	b.n	8004c1a <SD_disk_ioctl+0x246>

		SELECT();
 8004a5a:	f7ff fc15 	bl	8004288 <SELECT>

		switch (ctrl)
 8004a5e:	79bb      	ldrb	r3, [r7, #6]
 8004a60:	2b0d      	cmp	r3, #13
 8004a62:	f200 80c9 	bhi.w	8004bf8 <SD_disk_ioctl+0x224>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <SD_disk_ioctl+0x98>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004b63 	.word	0x08004b63
 8004a70:	08004aa5 	.word	0x08004aa5
 8004a74:	08004b53 	.word	0x08004b53
 8004a78:	08004bf9 	.word	0x08004bf9
 8004a7c:	08004bf9 	.word	0x08004bf9
 8004a80:	08004bf9 	.word	0x08004bf9
 8004a84:	08004bf9 	.word	0x08004bf9
 8004a88:	08004bf9 	.word	0x08004bf9
 8004a8c:	08004bf9 	.word	0x08004bf9
 8004a90:	08004bf9 	.word	0x08004bf9
 8004a94:	08004bf9 	.word	0x08004bf9
 8004a98:	08004b75 	.word	0x08004b75
 8004a9c:	08004b99 	.word	0x08004b99
 8004aa0:	08004bbd 	.word	0x08004bbd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2049      	movs	r0, #73	@ 0x49
 8004aa8:	f7ff fd4f 	bl	800454a <SD_SendCmd>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 80a6 	bne.w	8004c00 <SD_disk_ioctl+0x22c>
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	2110      	movs	r1, #16
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fcd2 	bl	8004464 <SD_RxDataBlock>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 809c 	beq.w	8004c00 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004ac8:	7b3b      	ldrb	r3, [r7, #12]
 8004aca:	099b      	lsrs	r3, r3, #6
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10d      	bne.n	8004aee <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004ad2:	7d7b      	ldrb	r3, [r7, #21]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	7d3b      	ldrb	r3, [r7, #20]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004ae4:	8bfb      	ldrh	r3, [r7, #30]
 8004ae6:	029a      	lsls	r2, r3, #10
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e02d      	b.n	8004b4a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004aee:	7c7b      	ldrb	r3, [r7, #17]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	7dbb      	ldrb	r3, [r7, #22]
 8004af8:	09db      	lsrs	r3, r3, #7
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	7d7b      	ldrb	r3, [r7, #21]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 0306 	and.w	r3, r3, #6
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	3302      	adds	r3, #2
 8004b12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004b16:	7d3b      	ldrb	r3, [r7, #20]
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	7cbb      	ldrb	r3, [r7, #18]
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3301      	adds	r3, #1
 8004b3a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004b3c:	8bfa      	ldrh	r2, [r7, #30]
 8004b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b42:	3b09      	subs	r3, #9
 8004b44:	409a      	lsls	r2, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004b50:	e056      	b.n	8004c00 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b58:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b60:	e055      	b.n	8004c0e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004b62:	f7ff fc0b 	bl	800437c <SD_ReadyWait>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2bff      	cmp	r3, #255	@ 0xff
 8004b6a:	d14b      	bne.n	8004c04 <SD_disk_ioctl+0x230>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b72:	e047      	b.n	8004c04 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b74:	2100      	movs	r1, #0
 8004b76:	2049      	movs	r0, #73	@ 0x49
 8004b78:	f7ff fce7 	bl	800454a <SD_SendCmd>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d142      	bne.n	8004c08 <SD_disk_ioctl+0x234>
 8004b82:	2110      	movs	r1, #16
 8004b84:	6a38      	ldr	r0, [r7, #32]
 8004b86:	f7ff fc6d 	bl	8004464 <SD_RxDataBlock>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03b      	beq.n	8004c08 <SD_disk_ioctl+0x234>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b96:	e037      	b.n	8004c08 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b98:	2100      	movs	r1, #0
 8004b9a:	204a      	movs	r0, #74	@ 0x4a
 8004b9c:	f7ff fcd5 	bl	800454a <SD_SendCmd>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d132      	bne.n	8004c0c <SD_disk_ioctl+0x238>
 8004ba6:	2110      	movs	r1, #16
 8004ba8:	6a38      	ldr	r0, [r7, #32]
 8004baa:	f7ff fc5b 	bl	8004464 <SD_RxDataBlock>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d02b      	beq.n	8004c0c <SD_disk_ioctl+0x238>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004bba:	e027      	b.n	8004c0c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	207a      	movs	r0, #122	@ 0x7a
 8004bc0:	f7ff fcc3 	bl	800454a <SD_SendCmd>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d116      	bne.n	8004bf8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004bd0:	e00b      	b.n	8004bea <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004bd2:	6a3c      	ldr	r4, [r7, #32]
 8004bd4:	1c63      	adds	r3, r4, #1
 8004bd6:	623b      	str	r3, [r7, #32]
 8004bd8:	f7ff fba4 	bl	8004324 <SPI_RxByte>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004be0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004be4:	3301      	adds	r3, #1
 8004be6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004bea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d9ef      	bls.n	8004bd2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004bfe:	e006      	b.n	8004c0e <SD_disk_ioctl+0x23a>
			break;
 8004c00:	bf00      	nop
 8004c02:	e004      	b.n	8004c0e <SD_disk_ioctl+0x23a>
			break;
 8004c04:	bf00      	nop
 8004c06:	e002      	b.n	8004c0e <SD_disk_ioctl+0x23a>
			break;
 8004c08:	bf00      	nop
 8004c0a:	e000      	b.n	8004c0e <SD_disk_ioctl+0x23a>
			break;
 8004c0c:	bf00      	nop
		}

		DESELECT();
 8004c0e:	f7ff fb47 	bl	80042a0 <DESELECT>
		SPI_RxByte();
 8004c12:	f7ff fb87 	bl	8004324 <SPI_RxByte>
	}

	return res;
 8004c16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	372c      	adds	r7, #44	@ 0x2c
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd90      	pop	{r4, r7, pc}
 8004c22:	bf00      	nop
 8004c24:	24000000 	.word	0x24000000

08004c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08e      	sub	sp, #56	@ 0x38
 8004c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	609a      	str	r2, [r3, #8]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c44:	4a89      	ldr	r2, [pc, #548]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c46:	f043 0310 	orr.w	r3, r3, #16
 8004c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c4e:	4b87      	ldr	r3, [pc, #540]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	623b      	str	r3, [r7, #32]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c5c:	4b83      	ldr	r3, [pc, #524]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c62:	4a82      	ldr	r2, [pc, #520]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c6c:	4b7f      	ldr	r3, [pc, #508]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c80:	4a7a      	ldr	r2, [pc, #488]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c8a:	4b78      	ldr	r3, [pc, #480]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c98:	4b74      	ldr	r3, [pc, #464]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c9e:	4a73      	ldr	r2, [pc, #460]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004ca0:	f043 0320 	orr.w	r3, r3, #32
 8004ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ca8:	4b70      	ldr	r3, [pc, #448]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cbc:	4a6b      	ldr	r2, [pc, #428]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cc6:	4b69      	ldr	r3, [pc, #420]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cd4:	4b65      	ldr	r3, [pc, #404]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cda:	4a64      	ldr	r2, [pc, #400]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004cdc:	f043 0308 	orr.w	r3, r3, #8
 8004ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ce4:	4b61      	ldr	r3, [pc, #388]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d02:	4b5a      	ldr	r3, [pc, #360]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d10:	4b56      	ldr	r3, [pc, #344]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d16:	4a55      	ldr	r2, [pc, #340]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d20:	4b52      	ldr	r3, [pc, #328]	@ (8004e6c <MX_GPIO_Init+0x244>)
 8004d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004d34:	484e      	ldr	r0, [pc, #312]	@ (8004e70 <MX_GPIO_Init+0x248>)
 8004d36:	f009 fb09 	bl	800e34c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004d40:	484c      	ldr	r0, [pc, #304]	@ (8004e74 <MX_GPIO_Init+0x24c>)
 8004d42:	f009 fb03 	bl	800e34c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004d46:	2200      	movs	r2, #0
 8004d48:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004d4c:	484a      	ldr	r0, [pc, #296]	@ (8004e78 <MX_GPIO_Init+0x250>)
 8004d4e:	f009 fafd 	bl	800e34c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004d52:	2200      	movs	r2, #0
 8004d54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d58:	4848      	ldr	r0, [pc, #288]	@ (8004e7c <MX_GPIO_Init+0x254>)
 8004d5a:	f009 faf7 	bl	800e34c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004d64:	4846      	ldr	r0, [pc, #280]	@ (8004e80 <MX_GPIO_Init+0x258>)
 8004d66:	f009 faf1 	bl	800e34c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004d6a:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d70:	2301      	movs	r3, #1
 8004d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d80:	4619      	mov	r1, r3
 8004d82:	483b      	ldr	r0, [pc, #236]	@ (8004e70 <MX_GPIO_Init+0x248>)
 8004d84:	f009 f922 	bl	800dfcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004d88:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d96:	2300      	movs	r3, #0
 8004d98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4834      	ldr	r0, [pc, #208]	@ (8004e74 <MX_GPIO_Init+0x24c>)
 8004da2:	f009 f913 	bl	800dfcc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004db8:	4619      	mov	r1, r3
 8004dba:	482e      	ldr	r0, [pc, #184]	@ (8004e74 <MX_GPIO_Init+0x24c>)
 8004dbc:	f009 f906 	bl	800dfcc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004dc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4827      	ldr	r0, [pc, #156]	@ (8004e78 <MX_GPIO_Init+0x250>)
 8004dda:	f009 f8f7 	bl	800dfcc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004de4:	2301      	movs	r3, #1
 8004de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004dec:	2301      	movs	r3, #1
 8004dee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004df4:	4619      	mov	r1, r3
 8004df6:	4820      	ldr	r0, [pc, #128]	@ (8004e78 <MX_GPIO_Init+0x250>)
 8004df8:	f009 f8e8 	bl	800dfcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e02:	2301      	movs	r3, #1
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e12:	4619      	mov	r1, r3
 8004e14:	4819      	ldr	r0, [pc, #100]	@ (8004e7c <MX_GPIO_Init+0x254>)
 8004e16:	f009 f8d9 	bl	800dfcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004e1a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e20:	2301      	movs	r3, #1
 8004e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e30:	4619      	mov	r1, r3
 8004e32:	4813      	ldr	r0, [pc, #76]	@ (8004e80 <MX_GPIO_Init+0x258>)
 8004e34:	f009 f8ca 	bl	800dfcc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004e38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	480b      	ldr	r0, [pc, #44]	@ (8004e7c <MX_GPIO_Init+0x254>)
 8004e50:	f009 f8bc 	bl	800dfcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004e54:	2200      	movs	r2, #0
 8004e56:	2100      	movs	r1, #0
 8004e58:	2028      	movs	r0, #40	@ 0x28
 8004e5a:	f006 f9b8 	bl	800b1ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e5e:	2028      	movs	r0, #40	@ 0x28
 8004e60:	f006 f9cf 	bl	800b202 <HAL_NVIC_EnableIRQ>

}
 8004e64:	bf00      	nop
 8004e66:	3738      	adds	r7, #56	@ 0x38
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	58021000 	.word	0x58021000
 8004e74:	58020400 	.word	0x58020400
 8004e78:	58020c00 	.word	0x58020c00
 8004e7c:	58021800 	.word	0x58021800
 8004e80:	58020000 	.word	0x58020000

08004e84 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004e88:	4b1d      	ldr	r3, [pc, #116]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f04 <MX_I2C5_Init+0x80>)
 8004e8c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004e94:	4b1a      	ldr	r3, [pc, #104]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e9a:	4b19      	ldr	r3, [pc, #100]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ea0:	4b17      	ldr	r3, [pc, #92]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004ea6:	4b16      	ldr	r3, [pc, #88]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004eac:	4b14      	ldr	r3, [pc, #80]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004eb2:	4b13      	ldr	r3, [pc, #76]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004eb8:	4b11      	ldr	r3, [pc, #68]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004ebe:	4810      	ldr	r0, [pc, #64]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004ec0:	f009 fa78 	bl	800e3b4 <HAL_I2C_Init>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004eca:	f003 f8c5 	bl	8008058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ece:	2100      	movs	r1, #0
 8004ed0:	480b      	ldr	r0, [pc, #44]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004ed2:	f00b fe31 	bl	8010b38 <HAL_I2CEx_ConfigAnalogFilter>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004edc:	f003 f8bc 	bl	8008058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4807      	ldr	r0, [pc, #28]	@ (8004f00 <MX_I2C5_Init+0x7c>)
 8004ee4:	f00b fe73 	bl	8010bce <HAL_I2CEx_ConfigDigitalFilter>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004eee:	f003 f8b3 	bl	8008058 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004ef2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004ef6:	f00b feb7 	bl	8010c68 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	24000198 	.word	0x24000198
 8004f04:	40006400 	.word	0x40006400

08004f08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0b8      	sub	sp, #224	@ 0xe0
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f10:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f20:	f107 0310 	add.w	r3, r7, #16
 8004f24:	22b8      	movs	r2, #184	@ 0xb8
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f019 f8f3 	bl	801e114 <memset>
  if(i2cHandle->Instance==I2C5)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <HAL_I2C_MspInit+0xd8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d14f      	bne.n	8004fd8 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004f38:	f04f 0208 	mov.w	r2, #8
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004f44:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004f48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	4618      	mov	r0, r3
 8004f52:	f00c fe4d 	bl	8011bf0 <HAL_RCCEx_PeriphCLKConfig>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004f5c:	f003 f87c 	bl	8008058 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f60:	4b20      	ldr	r3, [pc, #128]	@ (8004fe4 <HAL_I2C_MspInit+0xdc>)
 8004f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f66:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe4 <HAL_I2C_MspInit+0xdc>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f70:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe4 <HAL_I2C_MspInit+0xdc>)
 8004f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f86:	2312      	movs	r3, #18
 8004f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004f98:	2304      	movs	r3, #4
 8004f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f9e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4810      	ldr	r0, [pc, #64]	@ (8004fe8 <HAL_I2C_MspInit+0xe0>)
 8004fa6:	f009 f811 	bl	800dfcc <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004faa:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe4 <HAL_I2C_MspInit+0xdc>)
 8004fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe4 <HAL_I2C_MspInit+0xdc>)
 8004fb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004fba:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe4 <HAL_I2C_MspInit+0xdc>)
 8004fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2101      	movs	r1, #1
 8004fcc:	209d      	movs	r0, #157	@ 0x9d
 8004fce:	f006 f8fe 	bl	800b1ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004fd2:	209d      	movs	r0, #157	@ 0x9d
 8004fd4:	f006 f915 	bl	800b202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004fd8:	bf00      	nop
 8004fda:	37e0      	adds	r7, #224	@ 0xe0
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40006400 	.word	0x40006400
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	58020800 	.word	0x58020800

08004fec <__NVIC_SystemReset>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004ff0:	f3bf 8f4f 	dsb	sy
}
 8004ff4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <__NVIC_SystemReset+0x24>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004ffe:	4904      	ldr	r1, [pc, #16]	@ (8005010 <__NVIC_SystemReset+0x24>)
 8005000:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <__NVIC_SystemReset+0x28>)
 8005002:	4313      	orrs	r3, r2
 8005004:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005006:	f3bf 8f4f 	dsb	sy
}
 800500a:	bf00      	nop
    __NOP();
 800500c:	bf00      	nop
 800500e:	e7fd      	b.n	800500c <__NVIC_SystemReset+0x20>
 8005010:	e000ed00 	.word	0xe000ed00
 8005014:	05fa0004 	.word	0x05fa0004

08005018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800501e:	f002 ffef 	bl	8008000 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005022:	f003 ffc5 	bl	8008fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005026:	f000 ffa1 	bl	8005f6c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800502a:	f001 f811 	bl	8006050 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800502e:	f7ff fdfb 	bl	8004c28 <MX_GPIO_Init>
  MX_DMA_Init();
 8005032:	f7fe fbe1 	bl	80037f8 <MX_DMA_Init>
  MX_I2C5_Init();
 8005036:	f7ff ff25 	bl	8004e84 <MX_I2C5_Init>
  MX_ADC2_Init();
 800503a:	f7fe faef 	bl	800361c <MX_ADC2_Init>
  MX_SPI2_Init();
 800503e:	f003 f867 	bl	8008110 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005042:	f003 fecd 	bl	8008de0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8005046:	f003 fbeb 	bl	8008820 <MX_TIM1_Init>
  MX_TIM8_Init();
 800504a:	f003 fd61 	bl	8008b10 <MX_TIM8_Init>
  MX_TIM3_Init();
 800504e:	f003 fce3 	bl	8008a18 <MX_TIM3_Init>
  MX_FATFS_Init();
 8005052:	f015 feab 	bl	801adac <MX_FATFS_Init>
  MX_TIM2_Init();
 8005056:	f003 fc8b 	bl	8008970 <MX_TIM2_Init>
  MX_SPI1_Init();
 800505a:	f003 f803 	bl	8008064 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 800505e:	2201      	movs	r2, #1
 8005060:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005064:	48a3      	ldr	r0, [pc, #652]	@ (80052f4 <main+0x2dc>)
 8005066:	f009 f971 	bl	800e34c <HAL_GPIO_WritePin>


  	  STARTUP = 1;
 800506a:	4ba3      	ldr	r3, [pc, #652]	@ (80052f8 <main+0x2e0>)
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8005070:	4ba2      	ldr	r3, [pc, #648]	@ (80052fc <main+0x2e4>)
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]

  	MPU6050.Acc.Acc_Scale = 8192;
 8005076:	4ba2      	ldr	r3, [pc, #648]	@ (8005300 <main+0x2e8>)
 8005078:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800507c:	619a      	str	r2, [r3, #24]
  	MPU6050.Acc.acc_x_cal = 0;
 800507e:	4ba0      	ldr	r3, [pc, #640]	@ (8005300 <main+0x2e8>)
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	61da      	str	r2, [r3, #28]
  	MPU6050.Acc.acc_y_cal = 0;
 8005086:	4b9e      	ldr	r3, [pc, #632]	@ (8005300 <main+0x2e8>)
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	621a      	str	r2, [r3, #32]
  	MPU6050.Acc.acc_z_cal = 0;
 800508e:	4b9c      	ldr	r3, [pc, #624]	@ (8005300 <main+0x2e8>)
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24
  	MPU6050.Acc.ax_ang = 0;
 8005096:	4b9a      	ldr	r3, [pc, #616]	@ (8005300 <main+0x2e8>)
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	60da      	str	r2, [r3, #12]
  	MPU6050.Acc.ay_ang = 0;
 800509e:	4b98      	ldr	r3, [pc, #608]	@ (8005300 <main+0x2e8>)
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
  	MPU6050.Acc.az_ang = 0;
 80050a6:	4b96      	ldr	r3, [pc, #600]	@ (8005300 <main+0x2e8>)
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	615a      	str	r2, [r3, #20]
  	MPU6050.Acc.ax = 0;
 80050ae:	4b94      	ldr	r3, [pc, #592]	@ (8005300 <main+0x2e8>)
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
  	MPU6050.Acc.ay = 0;
 80050b6:	4b92      	ldr	r3, [pc, #584]	@ (8005300 <main+0x2e8>)
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	605a      	str	r2, [r3, #4]
  	MPU6050.Acc.az = 0;
 80050be:	4b90      	ldr	r3, [pc, #576]	@ (8005300 <main+0x2e8>)
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	609a      	str	r2, [r3, #8]
  	MPU6050.Gyr.Gyr_Scale = 65.5;
 80050c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005300 <main+0x2e8>)
 80050c8:	4a8e      	ldr	r2, [pc, #568]	@ (8005304 <main+0x2ec>)
 80050ca:	635a      	str	r2, [r3, #52]	@ 0x34
  	MPU6050.Gyr.gyr_x_cal = 0;
 80050cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005300 <main+0x2e8>)
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	639a      	str	r2, [r3, #56]	@ 0x38
  	MPU6050.Gyr.gyr_y_cal = 0;
 80050d4:	4b8a      	ldr	r3, [pc, #552]	@ (8005300 <main+0x2e8>)
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	63da      	str	r2, [r3, #60]	@ 0x3c
  	MPU6050.Gyr.gyr_z_cal = 0;
 80050dc:	4b88      	ldr	r3, [pc, #544]	@ (8005300 <main+0x2e8>)
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	@ 0x40
  	MPU6050.Gyr.gx = 0;
 80050e4:	4b86      	ldr	r3, [pc, #536]	@ (8005300 <main+0x2e8>)
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	629a      	str	r2, [r3, #40]	@ 0x28
  	MPU6050.Gyr.gy = 0;
 80050ec:	4b84      	ldr	r3, [pc, #528]	@ (8005300 <main+0x2e8>)
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  	MPU6050.Gyr.gz = 0;
 80050f4:	4b82      	ldr	r3, [pc, #520]	@ (8005300 <main+0x2e8>)
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30
  	MPU6050.MPU6050_IRQ = 0;
 80050fc:	4b80      	ldr	r3, [pc, #512]	@ (8005300 <main+0x2e8>)
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52



	NRF24.NRF24_MODE = NRF24_Error;
 8005104:	4b80      	ldr	r3, [pc, #512]	@ (8005308 <main+0x2f0>)
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	NRF24.Status = NRF24_Ready;
 800510c:	4b7e      	ldr	r3, [pc, #504]	@ (8005308 <main+0x2f0>)
 800510e:	2204      	movs	r2, #4
 8005110:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24.Message_Status = 0;
 8005114:	4b7c      	ldr	r3, [pc, #496]	@ (8005308 <main+0x2f0>)
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	NRF24.NRF24_Message_count = 0;
 800511c:	4b7a      	ldr	r3, [pc, #488]	@ (8005308 <main+0x2f0>)
 800511e:	2200      	movs	r2, #0
 8005120:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	NRF24.Timer_1 = 0;
 8005124:	4b78      	ldr	r3, [pc, #480]	@ (8005308 <main+0x2f0>)
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24.Timer_2 = 0;
 800512c:	4b76      	ldr	r3, [pc, #472]	@ (8005308 <main+0x2f0>)
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24.Step = 0;
 8005134:	4b74      	ldr	r3, [pc, #464]	@ (8005308 <main+0x2f0>)
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24.SPI_Rx_Inte = 0;
 800513c:	4b72      	ldr	r3, [pc, #456]	@ (8005308 <main+0x2f0>)
 800513e:	2200      	movs	r2, #0
 8005140:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	NRF24.SPI_Tx_Inte = 0;
 8005144:	4b70      	ldr	r3, [pc, #448]	@ (8005308 <main+0x2f0>)
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89




  	PID_FAC_Pitch[0] = p_pitchfactor;
 800514c:	4b6f      	ldr	r3, [pc, #444]	@ (800530c <main+0x2f4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a6f      	ldr	r2, [pc, #444]	@ (8005310 <main+0x2f8>)
 8005152:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8005154:	4b6f      	ldr	r3, [pc, #444]	@ (8005314 <main+0x2fc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a6d      	ldr	r2, [pc, #436]	@ (8005310 <main+0x2f8>)
 800515a:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 800515c:	4b6e      	ldr	r3, [pc, #440]	@ (8005318 <main+0x300>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a6b      	ldr	r2, [pc, #428]	@ (8005310 <main+0x2f8>)
 8005162:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8005164:	4b6a      	ldr	r3, [pc, #424]	@ (8005310 <main+0x2f8>)
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 800516c:	4b6b      	ldr	r3, [pc, #428]	@ (800531c <main+0x304>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a6b      	ldr	r2, [pc, #428]	@ (8005320 <main+0x308>)
 8005172:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8005174:	4b6b      	ldr	r3, [pc, #428]	@ (8005324 <main+0x30c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a69      	ldr	r2, [pc, #420]	@ (8005320 <main+0x308>)
 800517a:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 800517c:	4b6a      	ldr	r3, [pc, #424]	@ (8005328 <main+0x310>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a67      	ldr	r2, [pc, #412]	@ (8005320 <main+0x308>)
 8005182:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8005184:	4b66      	ldr	r3, [pc, #408]	@ (8005320 <main+0x308>)
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 800518c:	4b67      	ldr	r3, [pc, #412]	@ (800532c <main+0x314>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a67      	ldr	r2, [pc, #412]	@ (8005330 <main+0x318>)
 8005192:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8005194:	4b67      	ldr	r3, [pc, #412]	@ (8005334 <main+0x31c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a65      	ldr	r2, [pc, #404]	@ (8005330 <main+0x318>)
 800519a:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 800519c:	4b66      	ldr	r3, [pc, #408]	@ (8005338 <main+0x320>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a63      	ldr	r2, [pc, #396]	@ (8005330 <main+0x318>)
 80051a2:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 80051a4:	4b62      	ldr	r3, [pc, #392]	@ (8005330 <main+0x318>)
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	611a      	str	r2, [r3, #16]


  	//ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
  	Mag_Z = 0;
 80051ac:	4b63      	ldr	r3, [pc, #396]	@ (800533c <main+0x324>)
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 80051b4:	4b62      	ldr	r3, [pc, #392]	@ (8005340 <main+0x328>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	4b62      	ldr	r3, [pc, #392]	@ (8005344 <main+0x32c>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 80051c0:	4b61      	ldr	r3, [pc, #388]	@ (8005348 <main+0x330>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 80051c6:	4b61      	ldr	r3, [pc, #388]	@ (800534c <main+0x334>)
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	4b60      	ldr	r3, [pc, #384]	@ (8005350 <main+0x338>)
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005354 <main+0x33c>)
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <main+0x340>)
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 80051e6:	4b5d      	ldr	r3, [pc, #372]	@ (800535c <main+0x344>)
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 80051ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005360 <main+0x348>)
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 80051f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005364 <main+0x34c>)
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 80051fe:	4b5a      	ldr	r3, [pc, #360]	@ (8005368 <main+0x350>)
 8005200:	2200      	movs	r2, #0
 8005202:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 8005204:	4b59      	ldr	r3, [pc, #356]	@ (800536c <main+0x354>)
 8005206:	f242 7210 	movw	r2, #10000	@ 0x2710
 800520a:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 0;
 800520c:	4b58      	ldr	r3, [pc, #352]	@ (8005370 <main+0x358>)
 800520e:	2200      	movs	r2, #0
 8005210:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 8005212:	4b58      	ldr	r3, [pc, #352]	@ (8005374 <main+0x35c>)
 8005214:	2200      	movs	r2, #0
 8005216:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 8005218:	4b57      	ldr	r3, [pc, #348]	@ (8005378 <main+0x360>)
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 8005220:	4b56      	ldr	r3, [pc, #344]	@ (800537c <main+0x364>)
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8005228:	4b55      	ldr	r3, [pc, #340]	@ (8005380 <main+0x368>)
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 8005230:	4b54      	ldr	r3, [pc, #336]	@ (8005384 <main+0x36c>)
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8005238:	4b53      	ldr	r3, [pc, #332]	@ (8005388 <main+0x370>)
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 8005240:	4b52      	ldr	r3, [pc, #328]	@ (800538c <main+0x374>)
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 8005248:	4b51      	ldr	r3, [pc, #324]	@ (8005390 <main+0x378>)
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 800524e:	4b51      	ldr	r3, [pc, #324]	@ (8005394 <main+0x37c>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8005254:	4b50      	ldr	r3, [pc, #320]	@ (8005398 <main+0x380>)
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 800525a:	4b50      	ldr	r3, [pc, #320]	@ (800539c <main+0x384>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8005260:	4b4f      	ldr	r3, [pc, #316]	@ (80053a0 <main+0x388>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8005266:	4b4f      	ldr	r3, [pc, #316]	@ (80053a4 <main+0x38c>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 800526c:	4b4e      	ldr	r3, [pc, #312]	@ (80053a8 <main+0x390>)
 800526e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005272:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8005274:	4b4d      	ldr	r3, [pc, #308]	@ (80053ac <main+0x394>)
 8005276:	f642 1204 	movw	r2, #10500	@ 0x2904
 800527a:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 800527c:	4b4c      	ldr	r3, [pc, #304]	@ (80053b0 <main+0x398>)
 800527e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005282:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8005284:	4b4b      	ldr	r3, [pc, #300]	@ (80053b4 <main+0x39c>)
 8005286:	f642 1204 	movw	r2, #10500	@ 0x2904
 800528a:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 800528c:	4b4a      	ldr	r3, [pc, #296]	@ (80053b8 <main+0x3a0>)
 800528e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005292:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8005294:	4b49      	ldr	r3, [pc, #292]	@ (80053bc <main+0x3a4>)
 8005296:	f642 1204 	movw	r2, #10500	@ 0x2904
 800529a:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 800529c:	4b48      	ldr	r3, [pc, #288]	@ (80053c0 <main+0x3a8>)
 800529e:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052a2:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 80052a4:	4b47      	ldr	r3, [pc, #284]	@ (80053c4 <main+0x3ac>)
 80052a6:	f642 1204 	movw	r2, #10500	@ 0x2904
 80052aa:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 80052ac:	4b46      	ldr	r3, [pc, #280]	@ (80053c8 <main+0x3b0>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 80052b2:	4b46      	ldr	r3, [pc, #280]	@ (80053cc <main+0x3b4>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 80052b8:	4b45      	ldr	r3, [pc, #276]	@ (80053d0 <main+0x3b8>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 80052be:	4b45      	ldr	r3, [pc, #276]	@ (80053d4 <main+0x3bc>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 80052c4:	4b44      	ldr	r3, [pc, #272]	@ (80053d8 <main+0x3c0>)
 80052c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052ca:	601a      	str	r2, [r3, #0]
  	//MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
  	i = 0, loopnum = 0;
 80052cc:	4b43      	ldr	r3, [pc, #268]	@ (80053dc <main+0x3c4>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	4b43      	ldr	r3, [pc, #268]	@ (80053e0 <main+0x3c8>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 80052d8:	4942      	ldr	r1, [pc, #264]	@ (80053e4 <main+0x3cc>)
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9c1 2300 	strd	r2, r3, [r1]

p_angular_rate_pitchfactor = 14;
 80052e6:	4b40      	ldr	r3, [pc, #256]	@ (80053e8 <main+0x3d0>)
 80052e8:	4a40      	ldr	r2, [pc, #256]	@ (80053ec <main+0x3d4>)
 80052ea:	601a      	str	r2, [r3, #0]
p_angular_rate_roolfactor = 12;
 80052ec:	4b40      	ldr	r3, [pc, #256]	@ (80053f0 <main+0x3d8>)
 80052ee:	4a41      	ldr	r2, [pc, #260]	@ (80053f4 <main+0x3dc>)
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e081      	b.n	80053f8 <main+0x3e0>
 80052f4:	58021800 	.word	0x58021800
 80052f8:	0000007c 	.word	0x0000007c
 80052fc:	000041c4 	.word	0x000041c4
 8005300:	00000000 	.word	0x00000000
 8005304:	42830000 	.word	0x42830000
 8005308:	000000fc 	.word	0x000000fc
 800530c:	000040f4 	.word	0x000040f4
 8005310:	00004118 	.word	0x00004118
 8005314:	00004100 	.word	0x00004100
 8005318:	0000410c 	.word	0x0000410c
 800531c:	000040f8 	.word	0x000040f8
 8005320:	0000412c 	.word	0x0000412c
 8005324:	00004104 	.word	0x00004104
 8005328:	00004110 	.word	0x00004110
 800532c:	000040fc 	.word	0x000040fc
 8005330:	00004140 	.word	0x00004140
 8005334:	00004108 	.word	0x00004108
 8005338:	00004114 	.word	0x00004114
 800533c:	00000054 	.word	0x00000054
 8005340:	00000074 	.word	0x00000074
 8005344:	00000078 	.word	0x00000078
 8005348:	00000080 	.word	0x00000080
 800534c:	000000e4 	.word	0x000000e4
 8005350:	000000e8 	.word	0x000000e8
 8005354:	000000ec 	.word	0x000000ec
 8005358:	000000f0 	.word	0x000000f0
 800535c:	00004060 	.word	0x00004060
 8005360:	00004064 	.word	0x00004064
 8005364:	00004068 	.word	0x00004068
 8005368:	0000406c 	.word	0x0000406c
 800536c:	0000406e 	.word	0x0000406e
 8005370:	00004084 	.word	0x00004084
 8005374:	00004086 	.word	0x00004086
 8005378:	000040ac 	.word	0x000040ac
 800537c:	000040b0 	.word	0x000040b0
 8005380:	000040b4 	.word	0x000040b4
 8005384:	000040b8 	.word	0x000040b8
 8005388:	000040bc 	.word	0x000040bc
 800538c:	000040c0 	.word	0x000040c0
 8005390:	000040c4 	.word	0x000040c4
 8005394:	000040c8 	.word	0x000040c8
 8005398:	000040cc 	.word	0x000040cc
 800539c:	000040d0 	.word	0x000040d0
 80053a0:	000040d4 	.word	0x000040d4
 80053a4:	000040d8 	.word	0x000040d8
 80053a8:	000041b4 	.word	0x000041b4
 80053ac:	000041b6 	.word	0x000041b6
 80053b0:	000041b8 	.word	0x000041b8
 80053b4:	000041ba 	.word	0x000041ba
 80053b8:	000041bc 	.word	0x000041bc
 80053bc:	000041be 	.word	0x000041be
 80053c0:	000041c0 	.word	0x000041c0
 80053c4:	000041c2 	.word	0x000041c2
 80053c8:	000041e6 	.word	0x000041e6
 80053cc:	000041e7 	.word	0x000041e7
 80053d0:	000041ec 	.word	0x000041ec
 80053d4:	000041f0 	.word	0x000041f0
 80053d8:	000041f8 	.word	0x000041f8
 80053dc:	00004200 	.word	0x00004200
 80053e0:	00004204 	.word	0x00004204
 80053e4:	00004070 	.word	0x00004070
 80053e8:	00004154 	.word	0x00004154
 80053ec:	41600000 	.word	0x41600000
 80053f0:	00004158 	.word	0x00004158
 80053f4:	41400000 	.word	0x41400000
p_angular_rate_yawfactor = 10;// -> 10
 80053f8:	4ba0      	ldr	r3, [pc, #640]	@ (800567c <main+0x664>)
 80053fa:	4aa1      	ldr	r2, [pc, #644]	@ (8005680 <main+0x668>)
 80053fc:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
i_angular_rate_pitchfactor = 10;
 80053fe:	4ba1      	ldr	r3, [pc, #644]	@ (8005684 <main+0x66c>)
 8005400:	4a9f      	ldr	r2, [pc, #636]	@ (8005680 <main+0x668>)
 8005402:	601a      	str	r2, [r3, #0]
i_angular_rate_roolfactor = 10;
 8005404:	4ba0      	ldr	r3, [pc, #640]	@ (8005688 <main+0x670>)
 8005406:	4a9e      	ldr	r2, [pc, #632]	@ (8005680 <main+0x668>)
 8005408:	601a      	str	r2, [r3, #0]
i_angular_rate_yawfactor = 0;
 800540a:	4ba0      	ldr	r3, [pc, #640]	@ (800568c <main+0x674>)
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
d_angular_rate_pitchfactor = 30;
 8005412:	4b9f      	ldr	r3, [pc, #636]	@ (8005690 <main+0x678>)
 8005414:	4a9f      	ldr	r2, [pc, #636]	@ (8005694 <main+0x67c>)
 8005416:	601a      	str	r2, [r3, #0]
d_angular_rate_roolfactor = 20;
 8005418:	4b9f      	ldr	r3, [pc, #636]	@ (8005698 <main+0x680>)
 800541a:	4aa0      	ldr	r2, [pc, #640]	@ (800569c <main+0x684>)
 800541c:	601a      	str	r2, [r3, #0]
d_angular_rate_yawfactor = 5;
 800541e:	4ba0      	ldr	r3, [pc, #640]	@ (80056a0 <main+0x688>)
 8005420:	4aa0      	ldr	r2, [pc, #640]	@ (80056a4 <main+0x68c>)
 8005422:	601a      	str	r2, [r3, #0]

p_pitchfactor = 5.5;
 8005424:	4ba0      	ldr	r3, [pc, #640]	@ (80056a8 <main+0x690>)
 8005426:	4aa1      	ldr	r2, [pc, #644]	@ (80056ac <main+0x694>)
 8005428:	601a      	str	r2, [r3, #0]
p_roolfactor = 6;//5
 800542a:	4ba1      	ldr	r3, [pc, #644]	@ (80056b0 <main+0x698>)
 800542c:	4aa1      	ldr	r2, [pc, #644]	@ (80056b4 <main+0x69c>)
 800542e:	601a      	str	r2, [r3, #0]
p_yawfactor = 5;
 8005430:	4ba1      	ldr	r3, [pc, #644]	@ (80056b8 <main+0x6a0>)
 8005432:	4a9c      	ldr	r2, [pc, #624]	@ (80056a4 <main+0x68c>)
 8005434:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
i_pitchfactor = 9;//8
 8005436:	4ba1      	ldr	r3, [pc, #644]	@ (80056bc <main+0x6a4>)
 8005438:	4aa1      	ldr	r2, [pc, #644]	@ (80056c0 <main+0x6a8>)
 800543a:	601a      	str	r2, [r3, #0]
i_roolfactor = 8;//10
 800543c:	4ba1      	ldr	r3, [pc, #644]	@ (80056c4 <main+0x6ac>)
 800543e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005442:	601a      	str	r2, [r3, #0]
i_yawfactor = 0;
 8005444:	4ba0      	ldr	r3, [pc, #640]	@ (80056c8 <main+0x6b0>)
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
d_pitchfactor = 30;//25
 800544c:	4b9f      	ldr	r3, [pc, #636]	@ (80056cc <main+0x6b4>)
 800544e:	4a91      	ldr	r2, [pc, #580]	@ (8005694 <main+0x67c>)
 8005450:	601a      	str	r2, [r3, #0]
d_roolfactor = 20;
 8005452:	4b9f      	ldr	r3, [pc, #636]	@ (80056d0 <main+0x6b8>)
 8005454:	4a91      	ldr	r2, [pc, #580]	@ (800569c <main+0x684>)
 8005456:	601a      	str	r2, [r3, #0]
d_yawfactor = 0;
 8005458:	4b9e      	ldr	r3, [pc, #632]	@ (80056d4 <main+0x6bc>)
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	601a      	str	r2, [r3, #0]




  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005460:	4b9d      	ldr	r3, [pc, #628]	@ (80056d8 <main+0x6c0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a9d      	ldr	r2, [pc, #628]	@ (80056dc <main+0x6c4>)
 8005466:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005468:	4b86      	ldr	r3, [pc, #536]	@ (8005684 <main+0x66c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a9b      	ldr	r2, [pc, #620]	@ (80056dc <main+0x6c4>)
 800546e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005470:	4b87      	ldr	r3, [pc, #540]	@ (8005690 <main+0x678>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a99      	ldr	r2, [pc, #612]	@ (80056dc <main+0x6c4>)
 8005476:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 8005478:	4b99      	ldr	r3, [pc, #612]	@ (80056e0 <main+0x6c8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a99      	ldr	r2, [pc, #612]	@ (80056e4 <main+0x6cc>)
 800547e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005480:	4b81      	ldr	r3, [pc, #516]	@ (8005688 <main+0x670>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a97      	ldr	r2, [pc, #604]	@ (80056e4 <main+0x6cc>)
 8005486:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005488:	4b83      	ldr	r3, [pc, #524]	@ (8005698 <main+0x680>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a95      	ldr	r2, [pc, #596]	@ (80056e4 <main+0x6cc>)
 800548e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 8005490:	4b7a      	ldr	r3, [pc, #488]	@ (800567c <main+0x664>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a94      	ldr	r2, [pc, #592]	@ (80056e8 <main+0x6d0>)
 8005496:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005498:	4b7c      	ldr	r3, [pc, #496]	@ (800568c <main+0x674>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a92      	ldr	r2, [pc, #584]	@ (80056e8 <main+0x6d0>)
 800549e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80054a0:	4b7f      	ldr	r3, [pc, #508]	@ (80056a0 <main+0x688>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a90      	ldr	r2, [pc, #576]	@ (80056e8 <main+0x6d0>)
 80054a6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80054a8:	4b7f      	ldr	r3, [pc, #508]	@ (80056a8 <main+0x690>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a8f      	ldr	r2, [pc, #572]	@ (80056ec <main+0x6d4>)
 80054ae:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80054b0:	4b82      	ldr	r3, [pc, #520]	@ (80056bc <main+0x6a4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a8d      	ldr	r2, [pc, #564]	@ (80056ec <main+0x6d4>)
 80054b6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80054b8:	4b84      	ldr	r3, [pc, #528]	@ (80056cc <main+0x6b4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a8b      	ldr	r2, [pc, #556]	@ (80056ec <main+0x6d4>)
 80054be:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 80054c0:	4b7b      	ldr	r3, [pc, #492]	@ (80056b0 <main+0x698>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a8a      	ldr	r2, [pc, #552]	@ (80056f0 <main+0x6d8>)
 80054c6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 80054c8:	4b7e      	ldr	r3, [pc, #504]	@ (80056c4 <main+0x6ac>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a88      	ldr	r2, [pc, #544]	@ (80056f0 <main+0x6d8>)
 80054ce:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 80054d0:	4b7f      	ldr	r3, [pc, #508]	@ (80056d0 <main+0x6b8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a86      	ldr	r2, [pc, #536]	@ (80056f0 <main+0x6d8>)
 80054d6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 80054d8:	4b77      	ldr	r3, [pc, #476]	@ (80056b8 <main+0x6a0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a85      	ldr	r2, [pc, #532]	@ (80056f4 <main+0x6dc>)
 80054de:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 80054e0:	4b79      	ldr	r3, [pc, #484]	@ (80056c8 <main+0x6b0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a83      	ldr	r2, [pc, #524]	@ (80056f4 <main+0x6dc>)
 80054e6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 80054e8:	4b7a      	ldr	r3, [pc, #488]	@ (80056d4 <main+0x6bc>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a81      	ldr	r2, [pc, #516]	@ (80056f4 <main+0x6dc>)
 80054ee:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 80054f0:	4b81      	ldr	r3, [pc, #516]	@ (80056f8 <main+0x6e0>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 80054f6:	4b81      	ldr	r3, [pc, #516]	@ (80056fc <main+0x6e4>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 80054fc:	4b80      	ldr	r3, [pc, #512]	@ (8005700 <main+0x6e8>)
 80054fe:	2200      	movs	r2, #0
 8005500:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 8005502:	4b80      	ldr	r3, [pc, #512]	@ (8005704 <main+0x6ec>)
 8005504:	2200      	movs	r2, #0
 8005506:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 8005508:	4b7f      	ldr	r3, [pc, #508]	@ (8005708 <main+0x6f0>)
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8005510:	4b7d      	ldr	r3, [pc, #500]	@ (8005708 <main+0x6f0>)
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8005518:	4b7b      	ldr	r3, [pc, #492]	@ (8005708 <main+0x6f0>)
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005520:	4b79      	ldr	r3, [pc, #484]	@ (8005708 <main+0x6f0>)
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8005528:	4b77      	ldr	r3, [pc, #476]	@ (8005708 <main+0x6f0>)
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005530:	4b75      	ldr	r3, [pc, #468]	@ (8005708 <main+0x6f0>)
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 8005538:	4b74      	ldr	r3, [pc, #464]	@ (800570c <main+0x6f4>)
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005540:	4b73      	ldr	r3, [pc, #460]	@ (8005710 <main+0x6f8>)
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 8005548:	4b72      	ldr	r3, [pc, #456]	@ (8005714 <main+0x6fc>)
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005550:	4b71      	ldr	r3, [pc, #452]	@ (8005718 <main+0x700>)
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 8005558:	4b70      	ldr	r3, [pc, #448]	@ (800571c <main+0x704>)
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005560:	4b6f      	ldr	r3, [pc, #444]	@ (8005720 <main+0x708>)
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 8005568:	4b6e      	ldr	r3, [pc, #440]	@ (8005724 <main+0x70c>)
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 8005570:	4b6c      	ldr	r3, [pc, #432]	@ (8005724 <main+0x70c>)
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 8005578:	4b6a      	ldr	r3, [pc, #424]	@ (8005724 <main+0x70c>)
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  //	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
  	//accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;



  	now_pitch = 0;//pitch -> x
 8005580:	4b69      	ldr	r3, [pc, #420]	@ (8005728 <main+0x710>)
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
  	now_rool = 0;//rool -> y
 8005588:	4b68      	ldr	r3, [pc, #416]	@ (800572c <main+0x714>)
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 8005590:	4b67      	ldr	r3, [pc, #412]	@ (8005730 <main+0x718>)
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 8005598:	4b66      	ldr	r3, [pc, #408]	@ (8005734 <main+0x71c>)
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

  	pitch_error = 0;
 80055a0:	4b65      	ldr	r3, [pc, #404]	@ (8005738 <main+0x720>)
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
  	rool_error = 0;
 80055a8:	4b64      	ldr	r3, [pc, #400]	@ (800573c <main+0x724>)
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
  	yaw_error = 0;
 80055b0:	4b63      	ldr	r3, [pc, #396]	@ (8005740 <main+0x728>)
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
  	pitch_ar_error = 0;
 80055b8:	4b62      	ldr	r3, [pc, #392]	@ (8005744 <main+0x72c>)
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
  	rool_ar_error = 0;
 80055c0:	4b61      	ldr	r3, [pc, #388]	@ (8005748 <main+0x730>)
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
  	yaw_ar_error = 0;
 80055c8:	4b60      	ldr	r3, [pc, #384]	@ (800574c <main+0x734>)
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]


  	NRF24_inte = 0;
 80055d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005750 <main+0x738>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 80055d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005754 <main+0x73c>)
 80055d8:	f107 0308 	add.w	r3, r7, #8
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	4611      	mov	r1, r2
 80055e0:	8019      	strh	r1, [r3, #0]
 80055e2:	3302      	adds	r3, #2
 80055e4:	0c12      	lsrs	r2, r2, #16
 80055e6:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 80055e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005758 <main+0x740>)
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	4611      	mov	r1, r2
 80055f0:	8019      	strh	r1, [r3, #0]
 80055f2:	3302      	adds	r3, #2
 80055f4:	0c12      	lsrs	r2, r2, #16
 80055f6:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 80055f8:	2201      	movs	r2, #1
 80055fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055fe:	4857      	ldr	r0, [pc, #348]	@ (800575c <main+0x744>)
 8005600:	f008 fea4 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_6_1;
 8005604:	2201      	movs	r2, #1
 8005606:	2108      	movs	r1, #8
 8005608:	4855      	ldr	r0, [pc, #340]	@ (8005760 <main+0x748>)
 800560a:	f008 fe9f 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_7_1;
 800560e:	2201      	movs	r2, #1
 8005610:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005614:	4851      	ldr	r0, [pc, #324]	@ (800575c <main+0x744>)
 8005616:	f008 fe99 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_uSD_1;
 800561a:	2201      	movs	r2, #1
 800561c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005620:	4850      	ldr	r0, [pc, #320]	@ (8005764 <main+0x74c>)
 8005622:	f008 fe93 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_G_1;
 8005626:	2201      	movs	r2, #1
 8005628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800562c:	484c      	ldr	r0, [pc, #304]	@ (8005760 <main+0x748>)
 800562e:	f008 fe8d 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005632:	2201      	movs	r2, #1
 8005634:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005638:	484b      	ldr	r0, [pc, #300]	@ (8005768 <main+0x750>)
 800563a:	f008 fe87 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_R_1;
 800563e:	2201      	movs	r2, #1
 8005640:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005644:	4848      	ldr	r0, [pc, #288]	@ (8005768 <main+0x750>)
 8005646:	f008 fe81 	bl	800e34c <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 800564a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800564e:	f003 fd41 	bl	80090d4 <HAL_Delay>
  	LED_G_0;
 8005652:	2200      	movs	r2, #0
 8005654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005658:	4841      	ldr	r0, [pc, #260]	@ (8005760 <main+0x748>)
 800565a:	f008 fe77 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_Y_0;
 800565e:	2200      	movs	r2, #0
 8005660:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005664:	4840      	ldr	r0, [pc, #256]	@ (8005768 <main+0x750>)
 8005666:	f008 fe71 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_R_0;
 800566a:	2200      	movs	r2, #0
 800566c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005670:	483d      	ldr	r0, [pc, #244]	@ (8005768 <main+0x750>)
 8005672:	f008 fe6b 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_5_0;
 8005676:	2200      	movs	r2, #0
 8005678:	e078      	b.n	800576c <main+0x754>
 800567a:	bf00      	nop
 800567c:	0000415c 	.word	0x0000415c
 8005680:	41200000 	.word	0x41200000
 8005684:	00004160 	.word	0x00004160
 8005688:	00004164 	.word	0x00004164
 800568c:	00004168 	.word	0x00004168
 8005690:	0000416c 	.word	0x0000416c
 8005694:	41f00000 	.word	0x41f00000
 8005698:	00004170 	.word	0x00004170
 800569c:	41a00000 	.word	0x41a00000
 80056a0:	00004174 	.word	0x00004174
 80056a4:	40a00000 	.word	0x40a00000
 80056a8:	000040f4 	.word	0x000040f4
 80056ac:	40b00000 	.word	0x40b00000
 80056b0:	000040f8 	.word	0x000040f8
 80056b4:	40c00000 	.word	0x40c00000
 80056b8:	000040fc 	.word	0x000040fc
 80056bc:	00004100 	.word	0x00004100
 80056c0:	41100000 	.word	0x41100000
 80056c4:	00004104 	.word	0x00004104
 80056c8:	00004108 	.word	0x00004108
 80056cc:	0000410c 	.word	0x0000410c
 80056d0:	00004110 	.word	0x00004110
 80056d4:	00004114 	.word	0x00004114
 80056d8:	00004154 	.word	0x00004154
 80056dc:	00004178 	.word	0x00004178
 80056e0:	00004158 	.word	0x00004158
 80056e4:	0000418c 	.word	0x0000418c
 80056e8:	000041a0 	.word	0x000041a0
 80056ec:	00004118 	.word	0x00004118
 80056f0:	0000412c 	.word	0x0000412c
 80056f4:	00004140 	.word	0x00004140
 80056f8:	00004058 	.word	0x00004058
 80056fc:	0000405a 	.word	0x0000405a
 8005700:	0000405c 	.word	0x0000405c
 8005704:	0000405e 	.word	0x0000405e
 8005708:	00000084 	.word	0x00000084
 800570c:	000040dc 	.word	0x000040dc
 8005710:	000040e0 	.word	0x000040e0
 8005714:	000040e4 	.word	0x000040e4
 8005718:	000040e8 	.word	0x000040e8
 800571c:	000040ec 	.word	0x000040ec
 8005720:	000040f0 	.word	0x000040f0
 8005724:	00000188 	.word	0x00000188
 8005728:	00004088 	.word	0x00004088
 800572c:	0000408c 	.word	0x0000408c
 8005730:	00004090 	.word	0x00004090
 8005734:	00004078 	.word	0x00004078
 8005738:	00004094 	.word	0x00004094
 800573c:	00004098 	.word	0x00004098
 8005740:	0000409c 	.word	0x0000409c
 8005744:	000040a0 	.word	0x000040a0
 8005748:	000040a4 	.word	0x000040a4
 800574c:	000040a8 	.word	0x000040a8
 8005750:	0000420f 	.word	0x0000420f
 8005754:	0801eb7c 	.word	0x0801eb7c
 8005758:	0801eb80 	.word	0x0801eb80
 800575c:	58020000 	.word	0x58020000
 8005760:	58021000 	.word	0x58021000
 8005764:	58020c00 	.word	0x58020c00
 8005768:	58020400 	.word	0x58020400
 800576c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005770:	489f      	ldr	r0, [pc, #636]	@ (80059f0 <main+0x9d8>)
 8005772:	f008 fdeb 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_6_0;
 8005776:	2200      	movs	r2, #0
 8005778:	2108      	movs	r1, #8
 800577a:	489e      	ldr	r0, [pc, #632]	@ (80059f4 <main+0x9dc>)
 800577c:	f008 fde6 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_7_0;
 8005780:	2200      	movs	r2, #0
 8005782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005786:	489a      	ldr	r0, [pc, #616]	@ (80059f0 <main+0x9d8>)
 8005788:	f008 fde0 	bl	800e34c <HAL_GPIO_WritePin>
  	LED_uSD_0;
 800578c:	2200      	movs	r2, #0
 800578e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005792:	4899      	ldr	r0, [pc, #612]	@ (80059f8 <main+0x9e0>)
 8005794:	f008 fdda 	bl	800e34c <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	e009      	b.n	80057b2 <main+0x79a>
  		Old_Data_stack.olddata[i] = 0;
 800579e:	4a97      	ldr	r2, [pc, #604]	@ (80059fc <main+0x9e4>)
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	3301      	adds	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80057b8:	dbf1      	blt.n	800579e <main+0x786>
  	}
  	Old_Data_stack.start_pointer = 0;
 80057ba:	4b90      	ldr	r3, [pc, #576]	@ (80059fc <main+0x9e4>)
 80057bc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 80057c6:	4b8d      	ldr	r3, [pc, #564]	@ (80059fc <main+0x9e4>)
 80057c8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80057cc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80057d0:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 80057d4:	4b8a      	ldr	r3, [pc, #552]	@ (8005a00 <main+0x9e8>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 80057da:	488a      	ldr	r0, [pc, #552]	@ (8005a04 <main+0x9ec>)
 80057dc:	f010 fdfa 	bl	80163d4 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 80057e0:	2201      	movs	r2, #1
 80057e2:	4987      	ldr	r1, [pc, #540]	@ (8005a00 <main+0x9e8>)
 80057e4:	4888      	ldr	r0, [pc, #544]	@ (8005a08 <main+0x9f0>)
 80057e6:	f004 f9c7 	bl	8009b78 <HAL_ADC_Start_DMA>
  	LED_R_1;
 80057ea:	2201      	movs	r2, #1
 80057ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057f0:	4886      	ldr	r0, [pc, #536]	@ (8005a0c <main+0x9f4>)
 80057f2:	f008 fdab 	bl	800e34c <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 80057f6:	bf00      	nop
 80057f8:	4b81      	ldr	r3, [pc, #516]	@ (8005a00 <main+0x9e8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0fb      	beq.n	80057f8 <main+0x7e0>

  	}
  	LED_R_0;
 8005800:	2200      	movs	r2, #0
 8005802:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005806:	4881      	ldr	r0, [pc, #516]	@ (8005a0c <main+0x9f4>)
 8005808:	f008 fda0 	bl	800e34c <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 800580c:	f7fe fcfc 	bl	8004208 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005810:	2104      	movs	r1, #4
 8005812:	487f      	ldr	r0, [pc, #508]	@ (8005a10 <main+0x9f8>)
 8005814:	f010 ff3a 	bl	801668c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005818:	2108      	movs	r1, #8
 800581a:	487d      	ldr	r0, [pc, #500]	@ (8005a10 <main+0x9f8>)
 800581c:	f010 ff36 	bl	801668c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005820:	210c      	movs	r1, #12
 8005822:	487b      	ldr	r0, [pc, #492]	@ (8005a10 <main+0x9f8>)
 8005824:	f010 ff32 	bl	801668c <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005828:	4b7a      	ldr	r3, [pc, #488]	@ (8005a14 <main+0x9fc>)
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	4618      	mov	r0, r3
 8005830:	f001 ff86 	bl	8007740 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005834:	4b77      	ldr	r3, [pc, #476]	@ (8005a14 <main+0x9fc>)
 8005836:	8a9b      	ldrh	r3, [r3, #20]
 8005838:	2b07      	cmp	r3, #7
 800583a:	d107      	bne.n	800584c <main+0x834>
  	{
  		LED_R_1;
 800583c:	2201      	movs	r2, #1
 800583e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005842:	4872      	ldr	r0, [pc, #456]	@ (8005a0c <main+0x9f4>)
 8005844:	f008 fd82 	bl	800e34c <HAL_GPIO_WritePin>
  		while(1){
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <main+0x830>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800584c:	4b71      	ldr	r3, [pc, #452]	@ (8005a14 <main+0x9fc>)
 800584e:	8a9b      	ldrh	r3, [r3, #20]
 8005850:	2b09      	cmp	r3, #9
 8005852:	d107      	bne.n	8005864 <main+0x84c>
  		LED_R_1;
 8005854:	2201      	movs	r2, #1
 8005856:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800585a:	486c      	ldr	r0, [pc, #432]	@ (8005a0c <main+0x9f4>)
 800585c:	f008 fd76 	bl	800e34c <HAL_GPIO_WritePin>

  		while(1){
 8005860:	bf00      	nop
 8005862:	e7fd      	b.n	8005860 <main+0x848>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 8005864:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005868:	4868      	ldr	r0, [pc, #416]	@ (8005a0c <main+0x9f4>)
 800586a:	f008 fd57 	bl	800e31c <HAL_GPIO_ReadPin>
 800586e:	4603      	mov	r3, r0
 8005870:	461a      	mov	r2, r3
 8005872:	4b69      	ldr	r3, [pc, #420]	@ (8005a18 <main+0xa00>)
 8005874:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005876:	4b68      	ldr	r3, [pc, #416]	@ (8005a18 <main+0xa00>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d103      	bne.n	8005886 <main+0x86e>
		SD_enable_Flag = 0;
 800587e:	4b66      	ldr	r3, [pc, #408]	@ (8005a18 <main+0xa00>)
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e002      	b.n	800588c <main+0x874>
	}
	else{
		SD_enable_Flag = 1;
 8005886:	4b64      	ldr	r3, [pc, #400]	@ (8005a18 <main+0xa00>)
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 800588c:	4b62      	ldr	r3, [pc, #392]	@ (8005a18 <main+0xa00>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d15f      	bne.n	8005954 <main+0x93c>
		LED_uSD_1;
 8005894:	2201      	movs	r2, #1
 8005896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800589a:	4857      	ldr	r0, [pc, #348]	@ (80059f8 <main+0x9e0>)
 800589c:	f008 fd56 	bl	800e34c <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 80058a0:	2201      	movs	r2, #1
 80058a2:	495e      	ldr	r1, [pc, #376]	@ (8005a1c <main+0xa04>)
 80058a4:	485e      	ldr	r0, [pc, #376]	@ (8005a20 <main+0xa08>)
 80058a6:	f017 fe1d 	bl	801d4e4 <f_mount>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005a24 <main+0xa0c>)
 80058b0:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80058b2:	485d      	ldr	r0, [pc, #372]	@ (8005a28 <main+0xa10>)
 80058b4:	f018 fa60 	bl	801dd78 <f_unlink>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b59      	ldr	r3, [pc, #356]	@ (8005a24 <main+0xa0c>)
 80058be:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 80058c0:	2201      	movs	r2, #1
 80058c2:	4956      	ldr	r1, [pc, #344]	@ (8005a1c <main+0xa04>)
 80058c4:	4856      	ldr	r0, [pc, #344]	@ (8005a20 <main+0xa08>)
 80058c6:	f017 fe0d 	bl	801d4e4 <f_mount>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	4b55      	ldr	r3, [pc, #340]	@ (8005a24 <main+0xa0c>)
 80058d0:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 80058d2:	220a      	movs	r2, #10
 80058d4:	4955      	ldr	r1, [pc, #340]	@ (8005a2c <main+0xa14>)
 80058d6:	4856      	ldr	r0, [pc, #344]	@ (8005a30 <main+0xa18>)
 80058d8:	f017 fe4a 	bl	801d570 <f_open>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	4b50      	ldr	r3, [pc, #320]	@ (8005a24 <main+0xa0c>)
 80058e2:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058ea:	4843      	ldr	r0, [pc, #268]	@ (80059f8 <main+0x9e0>)
 80058ec:	f008 fd2e 	bl	800e34c <HAL_GPIO_WritePin>

		LED_uSD_1;
 80058f0:	2201      	movs	r2, #1
 80058f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058f6:	4840      	ldr	r0, [pc, #256]	@ (80059f8 <main+0x9e0>)
 80058f8:	f008 fd28 	bl	800e34c <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 80058fc:	2300      	movs	r3, #0
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e007      	b.n	8005912 <main+0x8fa>
			DataToSendBuffer[i] = 49;
 8005902:	4a4c      	ldr	r2, [pc, #304]	@ (8005a34 <main+0xa1c>)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	4413      	add	r3, r2
 8005908:	2231      	movs	r2, #49	@ 0x31
 800590a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	3301      	adds	r3, #1
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4a48      	ldr	r2, [pc, #288]	@ (8005a38 <main+0xa20>)
 8005916:	4293      	cmp	r3, r2
 8005918:	ddf3      	ble.n	8005902 <main+0x8ea>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 800591a:	4b48      	ldr	r3, [pc, #288]	@ (8005a3c <main+0xa24>)
 800591c:	2281      	movs	r2, #129	@ 0x81
 800591e:	4945      	ldr	r1, [pc, #276]	@ (8005a34 <main+0xa1c>)
 8005920:	4843      	ldr	r0, [pc, #268]	@ (8005a30 <main+0xa18>)
 8005922:	f017 ffed 	bl	801d900 <f_write>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a24 <main+0xa0c>)
 800592c:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 800592e:	4840      	ldr	r0, [pc, #256]	@ (8005a30 <main+0xa18>)
 8005930:	f018 f9f8 	bl	801dd24 <f_close>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	4b3a      	ldr	r3, [pc, #232]	@ (8005a24 <main+0xa0c>)
 800593a:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 800593c:	4b39      	ldr	r3, [pc, #228]	@ (8005a24 <main+0xa0c>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <main+0x930>
			NVIC_SystemReset();
 8005944:	f7ff fb52 	bl	8004fec <__NVIC_SystemReset>
			while(1){

			}
		}
		LED_uSD_0;
 8005948:	2200      	movs	r2, #0
 800594a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800594e:	482a      	ldr	r0, [pc, #168]	@ (80059f8 <main+0x9e0>)
 8005950:	f008 fcfc 	bl	800e34c <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 8005954:	2201      	movs	r2, #1
 8005956:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800595a:	4825      	ldr	r0, [pc, #148]	@ (80059f0 <main+0x9d8>)
 800595c:	f008 fcf6 	bl	800e34c <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 8005960:	4837      	ldr	r0, [pc, #220]	@ (8005a40 <main+0xa28>)
 8005962:	f7fb fc7d 	bl	8001260 <MPU6050_INIT>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d107      	bne.n	800597c <main+0x964>
			LED_R_1;
 800596c:	2201      	movs	r2, #1
 800596e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005972:	4826      	ldr	r0, [pc, #152]	@ (8005a0c <main+0x9f4>)
 8005974:	f008 fcea 	bl	800e34c <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005978:	f7ff fb38 	bl	8004fec <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 800597c:	2201      	movs	r2, #1
 800597e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005982:	4822      	ldr	r0, [pc, #136]	@ (8005a0c <main+0x9f4>)
 8005984:	f008 fce2 	bl	800e34c <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION();
 8005988:	f7fb fd34 	bl	80013f4 <MPU6050_CALIBRATION>
		LED_Y_0;
 800598c:	2200      	movs	r2, #0
 800598e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005992:	481e      	ldr	r0, [pc, #120]	@ (8005a0c <main+0x9f4>)
 8005994:	f008 fcda 	bl	800e34c <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005998:	4829      	ldr	r0, [pc, #164]	@ (8005a40 <main+0xa28>)
 800599a:	f7fa fe99 	bl	80006d0 <BMP180_init>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d107      	bne.n	80059b4 <main+0x99c>
			LED_R_1;
 80059a4:	2201      	movs	r2, #1
 80059a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059aa:	4818      	ldr	r0, [pc, #96]	@ (8005a0c <main+0x9f4>)
 80059ac:	f008 fcce 	bl	800e34c <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 80059b0:	f7ff fb1c 	bl	8004fec <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 80059b4:	2201      	movs	r2, #1
 80059b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059ba:	4814      	ldr	r0, [pc, #80]	@ (8005a0c <main+0x9f4>)
 80059bc:	f008 fcc6 	bl	800e34c <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 80059c0:	4820      	ldr	r0, [pc, #128]	@ (8005a44 <main+0xa2c>)
 80059c2:	f7fb f9d7 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 80059c6:	2200      	movs	r2, #0
 80059c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059cc:	480f      	ldr	r0, [pc, #60]	@ (8005a0c <main+0x9f4>)
 80059ce:	f008 fcbd 	bl	800e34c <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 80059d2:	481b      	ldr	r0, [pc, #108]	@ (8005a40 <main+0xa28>)
 80059d4:	f7fb fb00 	bl	8000fd8 <HMC5883L_Init>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d134      	bne.n	8005a48 <main+0xa30>
			LED_R_1;
 80059de:	2201      	movs	r2, #1
 80059e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059e4:	4809      	ldr	r0, [pc, #36]	@ (8005a0c <main+0x9f4>)
 80059e6:	f008 fcb1 	bl	800e34c <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 80059ea:	f7ff faff 	bl	8004fec <__NVIC_SystemReset>
 80059ee:	bf00      	nop
 80059f0:	58020000 	.word	0x58020000
 80059f4:	58021000 	.word	0x58021000
 80059f8:	58020c00 	.word	0x58020c00
 80059fc:	000001ac 	.word	0x000001ac
 8005a00:	24000eb0 	.word	0x24000eb0
 8005a04:	24000464 	.word	0x24000464
 8005a08:	240000ac 	.word	0x240000ac
 8005a0c:	58020400 	.word	0x58020400
 8005a10:	24000380 	.word	0x24000380
 8005a14:	00000188 	.word	0x00000188
 8005a18:	000041f4 	.word	0x000041f4
 8005a1c:	0801eb60 	.word	0x0801eb60
 8005a20:	24000eb4 	.word	0x24000eb4
 8005a24:	24001eec 	.word	0x24001eec
 8005a28:	0801eb64 	.word	0x0801eb64
 8005a2c:	0801eb70 	.word	0x0801eb70
 8005a30:	24001ef0 	.word	0x24001ef0
 8005a34:	24002f28 	.word	0x24002f28
 8005a38:	0001f7e7 	.word	0x0001f7e7
 8005a3c:	24002f24 	.word	0x24002f24
 8005a40:	24000198 	.word	0x24000198
 8005a44:	000000ec 	.word	0x000000ec
			while(1){
			}
		}
		LED_Y_1;
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a4e:	4898      	ldr	r0, [pc, #608]	@ (8005cb0 <main+0xc98>)
 8005a50:	f008 fc7c 	bl	800e34c <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005a54:	f7fb fbce 	bl	80011f4 <HMC5883L_Calibration>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b95      	ldr	r3, [pc, #596]	@ (8005cb4 <main+0xc9c>)
 8005a5e:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005a60:	2200      	movs	r2, #0
 8005a62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a66:	4892      	ldr	r0, [pc, #584]	@ (8005cb0 <main+0xc98>)
 8005a68:	f008 fc70 	bl	800e34c <HAL_GPIO_WritePin>

		LED_5_0;
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a72:	4891      	ldr	r0, [pc, #580]	@ (8005cb8 <main+0xca0>)
 8005a74:	f008 fc6a 	bl	800e34c <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005a78:	4b90      	ldr	r3, [pc, #576]	@ (8005cbc <main+0xca4>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8005cbc <main+0xca4>)
 8005a80:	220c      	movs	r2, #12
 8005a82:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005a84:	4b8d      	ldr	r3, [pc, #564]	@ (8005cbc <main+0xca4>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005a8a:	4b8c      	ldr	r3, [pc, #560]	@ (8005cbc <main+0xca4>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005a90:	4b8a      	ldr	r3, [pc, #552]	@ (8005cbc <main+0xca4>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005a96:	4b89      	ldr	r3, [pc, #548]	@ (8005cbc <main+0xca4>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	2108      	movs	r1, #8
 8005aa0:	4887      	ldr	r0, [pc, #540]	@ (8005cc0 <main+0xca8>)
 8005aa2:	f008 fc53 	bl	800e34c <HAL_GPIO_WritePin>
		nRF24_Init(&hspi1);
 8005aa6:	4887      	ldr	r0, [pc, #540]	@ (8005cc4 <main+0xcac>)
 8005aa8:	f7fc fe14 	bl	80026d4 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005aac:	f107 0308 	add.w	r3, r7, #8
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f7fc fc6b 	bl	800238e <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fc fca0 	bl	8002400 <nRF24_SetTXAddress>
		nRF24_TX_Mode();
 8005ac0:	f7fc fa86 	bl	8001fd0 <nRF24_TX_Mode>
		NRF24.NRF24_MODE = NRF24_Tx_Mode;
 8005ac4:	4b80      	ldr	r3, [pc, #512]	@ (8005cc8 <main+0xcb0>)
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



		for(int i = 0; i < 32; i++){
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e008      	b.n	8005ae4 <main+0xacc>
			NRF24.Txcode[i] = 0;
 8005ad2:	4a7d      	ldr	r2, [pc, #500]	@ (8005cc8 <main+0xcb0>)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3360      	adds	r3, #96	@ 0x60
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b1f      	cmp	r3, #31
 8005ae8:	ddf3      	ble.n	8005ad2 <main+0xaba>
		}
		NRF24.Txcode[22] = 'd';
 8005aea:	4b77      	ldr	r3, [pc, #476]	@ (8005cc8 <main+0xcb0>)
 8005aec:	2264      	movs	r2, #100	@ 0x64
 8005aee:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
		NRF24.Txcode[23] = 'r';
 8005af2:	4b75      	ldr	r3, [pc, #468]	@ (8005cc8 <main+0xcb0>)
 8005af4:	2272      	movs	r2, #114	@ 0x72
 8005af6:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
		NRF24.Txcode[24] = 'o';
 8005afa:	4b73      	ldr	r3, [pc, #460]	@ (8005cc8 <main+0xcb0>)
 8005afc:	226f      	movs	r2, #111	@ 0x6f
 8005afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
		NRF24.Txcode[25] = 'n';
 8005b02:	4b71      	ldr	r3, [pc, #452]	@ (8005cc8 <main+0xcb0>)
 8005b04:	226e      	movs	r2, #110	@ 0x6e
 8005b06:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
		NRF24.Txcode[26] = '2';
 8005b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8005cc8 <main+0xcb0>)
 8005b0c:	2232      	movs	r2, #50	@ 0x32
 8005b0e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
		NRF24.Txcode[27] = 'c';
 8005b12:	4b6d      	ldr	r3, [pc, #436]	@ (8005cc8 <main+0xcb0>)
 8005b14:	2263      	movs	r2, #99	@ 0x63
 8005b16:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
		NRF24.Txcode[28] = '1';
 8005b1a:	4b6b      	ldr	r3, [pc, #428]	@ (8005cc8 <main+0xcb0>)
 8005b1c:	2231      	movs	r2, #49	@ 0x31
 8005b1e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		NRF24.Txcode[29] = 'z';
 8005b22:	4b69      	ldr	r3, [pc, #420]	@ (8005cc8 <main+0xcb0>)
 8005b24:	227a      	movs	r2, #122	@ 0x7a
 8005b26:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
		NRF24.Txcode[30] = 'a';
 8005b2a:	4b67      	ldr	r3, [pc, #412]	@ (8005cc8 <main+0xcb0>)
 8005b2c:	2261      	movs	r2, #97	@ 0x61
 8005b2e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
		NRF24.Txcode[31] = '7';
 8005b32:	4b65      	ldr	r3, [pc, #404]	@ (8005cc8 <main+0xcb0>)
 8005b34:	2237      	movs	r2, #55	@ 0x37
 8005b36:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f



		nRF24_WriteTXPayload(NRF24.Txcode);
 8005b3a:	4864      	ldr	r0, [pc, #400]	@ (8005ccc <main+0xcb4>)
 8005b3c:	f7fc fd10 	bl	8002560 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005b40:	f7fc fd30 	bl	80025a4 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005b44:	f7fc fa0e 	bl	8001f64 <nRF24_RX_Mode>
		NRF24.NRF24_MODE = NRF24_Rx_Mode;
 8005b48:	4b5f      	ldr	r3, [pc, #380]	@ (8005cc8 <main+0xcb0>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		uint8_t cunter = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b54:	e022      	b.n	8005b9c <main+0xb84>
			LED_G_1;
 8005b56:	2201      	movs	r2, #1
 8005b58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b5c:	4858      	ldr	r0, [pc, #352]	@ (8005cc0 <main+0xca8>)
 8005b5e:	f008 fbf5 	bl	800e34c <HAL_GPIO_WritePin>
			LED_Y_1;
 8005b62:	2201      	movs	r2, #1
 8005b64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b68:	4851      	ldr	r0, [pc, #324]	@ (8005cb0 <main+0xc98>)
 8005b6a:	f008 fbef 	bl	800e34c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f003 fab0 	bl	80090d4 <HAL_Delay>
			LED_G_0;
 8005b74:	2200      	movs	r2, #0
 8005b76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b7a:	4851      	ldr	r0, [pc, #324]	@ (8005cc0 <main+0xca8>)
 8005b7c:	f008 fbe6 	bl	800e34c <HAL_GPIO_WritePin>
			LED_Y_0;
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b86:	484a      	ldr	r0, [pc, #296]	@ (8005cb0 <main+0xc98>)
 8005b88:	f008 fbe0 	bl	800e34c <HAL_GPIO_WritePin>

			cunter++;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 8005b92:	7cfb      	ldrb	r3, [r7, #19]
 8005b94:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b96:	d101      	bne.n	8005b9c <main+0xb84>
				NVIC_SystemReset();
 8005b98:	f7ff fa28 	bl	8004fec <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f7fc fd79 	bl	8002694 <nRF24_IsBitSetInFifoStatus>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d0d6      	beq.n	8005b56 <main+0xb3e>
			}
		}

		while(NRF24_inte != 1){
 8005ba8:	bf00      	nop
 8005baa:	4b49      	ldr	r3, [pc, #292]	@ (8005cd0 <main+0xcb8>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d1fb      	bne.n	8005baa <main+0xb92>

		}
		nRF24_ReadRXPaylaod(NRF24.RxData);
 8005bb2:	4845      	ldr	r0, [pc, #276]	@ (8005cc8 <main+0xcb0>)
 8005bb4:	f7fc fd1e 	bl	80025f4 <nRF24_ReadRXPaylaod>
		STARTUP = 0;
 8005bb8:	4b46      	ldr	r3, [pc, #280]	@ (8005cd4 <main+0xcbc>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
		LED_6_0;
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2108      	movs	r1, #8
 8005bc2:	483f      	ldr	r0, [pc, #252]	@ (8005cc0 <main+0xca8>)
 8005bc4:	f008 fbc2 	bl	800e34c <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005bc8:	230c      	movs	r3, #12
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e00c      	b.n	8005be8 <main+0xbd0>
			NRF24.Rxcode[i] = NRF24.RxData[i];
 8005bce:	4a3e      	ldr	r2, [pc, #248]	@ (8005cc8 <main+0xcb0>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	7819      	ldrb	r1, [r3, #0]
 8005bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8005cc8 <main+0xcb0>)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3340      	adds	r3, #64	@ 0x40
 8005bde:	460a      	mov	r2, r1
 8005be0:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b15      	cmp	r3, #21
 8005bec:	ddef      	ble.n	8005bce <main+0xbb6>
		}
	///////////////////////////////////////////////////////////////////////
		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005bee:	483a      	ldr	r0, [pc, #232]	@ (8005cd8 <main+0xcc0>)
 8005bf0:	f010 fc6e 	bl	80164d0 <HAL_TIM_Base_Start_IT>

		ESC_INT(&htim3);
 8005bf4:	4839      	ldr	r0, [pc, #228]	@ (8005cdc <main+0xcc4>)
 8005bf6:	f7fb f9a5 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c00:	482d      	ldr	r0, [pc, #180]	@ (8005cb8 <main+0xca0>)
 8005c02:	f008 fba3 	bl	800e34c <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005c06:	2201      	movs	r2, #1
 8005c08:	4935      	ldr	r1, [pc, #212]	@ (8005ce0 <main+0xcc8>)
 8005c0a:	4836      	ldr	r0, [pc, #216]	@ (8005ce4 <main+0xccc>)
 8005c0c:	f012 fabc 	bl	8018188 <HAL_UART_Receive_IT>
		LED_7_0;
 8005c10:	2200      	movs	r2, #0
 8005c12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c16:	4828      	ldr	r0, [pc, #160]	@ (8005cb8 <main+0xca0>)
 8005c18:	f008 fb98 	bl	800e34c <HAL_GPIO_WritePin>

//		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms

	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005c1c:	4b27      	ldr	r3, [pc, #156]	@ (8005cbc <main+0xca4>)
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fd8c 	bl	8007740 <RGB_LED_For_BAT>

	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005c28:	4b24      	ldr	r3, [pc, #144]	@ (8005cbc <main+0xca4>)
 8005c2a:	8a9b      	ldrh	r3, [r3, #20]
 8005c2c:	2b07      	cmp	r3, #7
 8005c2e:	d107      	bne.n	8005c40 <main+0xc28>
	  	{
	  		LED_R_1;
 8005c30:	2201      	movs	r2, #1
 8005c32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c36:	481e      	ldr	r0, [pc, #120]	@ (8005cb0 <main+0xc98>)
 8005c38:	f008 fb88 	bl	800e34c <HAL_GPIO_WritePin>
	  		while(1){
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <main+0xc24>

	  		}
	  	}

	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c40:	4b1e      	ldr	r3, [pc, #120]	@ (8005cbc <main+0xca4>)
 8005c42:	8a9b      	ldrh	r3, [r3, #20]
 8005c44:	2b09      	cmp	r3, #9
 8005c46:	d107      	bne.n	8005c58 <main+0xc40>
	  		LED_R_1;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c4e:	4818      	ldr	r0, [pc, #96]	@ (8005cb0 <main+0xc98>)
 8005c50:	f008 fb7c 	bl	800e34c <HAL_GPIO_WritePin>
	  		while(1){
 8005c54:	bf00      	nop
 8005c56:	e7fd      	b.n	8005c54 <main+0xc3c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005c58:	4b18      	ldr	r3, [pc, #96]	@ (8005cbc <main+0xca4>)
 8005c5a:	8a9b      	ldrh	r3, [r3, #20]
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	d10a      	bne.n	8005c76 <main+0xc5e>
	  			LED_R_1;
 8005c60:	2201      	movs	r2, #1
 8005c62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c66:	4812      	ldr	r0, [pc, #72]	@ (8005cb0 <main+0xc98>)
 8005c68:	f008 fb70 	bl	800e34c <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005c6c:	4b13      	ldr	r3, [pc, #76]	@ (8005cbc <main+0xca4>)
 8005c6e:	885b      	ldrh	r3, [r3, #2]
 8005c70:	b21a      	sxth	r2, r3
 8005c72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <main+0xcd0>)
 8005c74:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005c76:	4b11      	ldr	r3, [pc, #68]	@ (8005cbc <main+0xca4>)
 8005c78:	8a9b      	ldrh	r3, [r3, #20]
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d103      	bne.n	8005c86 <main+0xc6e>
	  			thrust_limit = 10000;
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <main+0xcd0>)
 8005c80:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c84:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c86:	4b0d      	ldr	r3, [pc, #52]	@ (8005cbc <main+0xca4>)
 8005c88:	8a9b      	ldrh	r3, [r3, #20]
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d13b      	bne.n	8005d06 <main+0xcee>
	  			ESC_POWER_1;
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c94:	4815      	ldr	r0, [pc, #84]	@ (8005cec <main+0xcd4>)
 8005c96:	f008 fb59 	bl	800e34c <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ca0:	4803      	ldr	r0, [pc, #12]	@ (8005cb0 <main+0xc98>)
 8005ca2:	f008 fb53 	bl	800e34c <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005ca6:	4812      	ldr	r0, [pc, #72]	@ (8005cf0 <main+0xcd8>)
 8005ca8:	f018 f83c 	bl	801dd24 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005cac:	e027      	b.n	8005cfe <main+0xce6>
 8005cae:	bf00      	nop
 8005cb0:	58020400 	.word	0x58020400
 8005cb4:	00000068 	.word	0x00000068
 8005cb8:	58020000 	.word	0x58020000
 8005cbc:	00000188 	.word	0x00000188
 8005cc0:	58021000 	.word	0x58021000
 8005cc4:	240001ec 	.word	0x240001ec
 8005cc8:	000000fc 	.word	0x000000fc
 8005ccc:	0000015c 	.word	0x0000015c
 8005cd0:	0000420f 	.word	0x0000420f
 8005cd4:	0000007c 	.word	0x0000007c
 8005cd8:	240003cc 	.word	0x240003cc
 8005cdc:	24000418 	.word	0x24000418
 8005ce0:	000041e8 	.word	0x000041e8
 8005ce4:	240004b0 	.word	0x240004b0
 8005ce8:	0000406e 	.word	0x0000406e
 8005cec:	58021800 	.word	0x58021800
 8005cf0:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005cf4:	200a      	movs	r0, #10
 8005cf6:	f003 f9ed 	bl	80090d4 <HAL_Delay>
	  				Get_batteryvalue();
 8005cfa:	f7fe fa85 	bl	8004208 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005cfe:	4b70      	ldr	r3, [pc, #448]	@ (8005ec0 <main+0xea8>)
 8005d00:	8a9b      	ldrh	r3, [r3, #20]
 8005d02:	2b09      	cmp	r3, #9
 8005d04:	d0f6      	beq.n	8005cf4 <main+0xcdc>
	  			}
	  		}

	  		if(commandready == 1){
 8005d06:	4b6f      	ldr	r3, [pc, #444]	@ (8005ec4 <main+0xeac>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d159      	bne.n	8005dc2 <main+0xdaa>
	  			LED_7_1;
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d14:	486c      	ldr	r0, [pc, #432]	@ (8005ec8 <main+0xeb0>)
 8005d16:	f008 fb19 	bl	800e34c <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005d1a:	f7fc fd45 	bl	80027a8 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005d1e:	496b      	ldr	r1, [pc, #428]	@ (8005ecc <main+0xeb4>)
 8005d20:	486b      	ldr	r0, [pc, #428]	@ (8005ed0 <main+0xeb8>)
 8005d22:	f7fc fd8f 	bl	8002844 <executecommand>
	  			LED_7_0;
 8005d26:	2200      	movs	r2, #0
 8005d28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d2c:	4866      	ldr	r0, [pc, #408]	@ (8005ec8 <main+0xeb0>)
 8005d2e:	f008 fb0d 	bl	800e34c <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005d32:	4b68      	ldr	r3, [pc, #416]	@ (8005ed4 <main+0xebc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a68      	ldr	r2, [pc, #416]	@ (8005ed8 <main+0xec0>)
 8005d38:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005d3a:	4b68      	ldr	r3, [pc, #416]	@ (8005edc <main+0xec4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a66      	ldr	r2, [pc, #408]	@ (8005ed8 <main+0xec0>)
 8005d40:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005d42:	4b67      	ldr	r3, [pc, #412]	@ (8005ee0 <main+0xec8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a64      	ldr	r2, [pc, #400]	@ (8005ed8 <main+0xec0>)
 8005d48:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005d4a:	4b66      	ldr	r3, [pc, #408]	@ (8005ee4 <main+0xecc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a66      	ldr	r2, [pc, #408]	@ (8005ee8 <main+0xed0>)
 8005d50:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005d52:	4b66      	ldr	r3, [pc, #408]	@ (8005eec <main+0xed4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a64      	ldr	r2, [pc, #400]	@ (8005ee8 <main+0xed0>)
 8005d58:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005d5a:	4b65      	ldr	r3, [pc, #404]	@ (8005ef0 <main+0xed8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a62      	ldr	r2, [pc, #392]	@ (8005ee8 <main+0xed0>)
 8005d60:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005d62:	4b64      	ldr	r3, [pc, #400]	@ (8005ef4 <main+0xedc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a64      	ldr	r2, [pc, #400]	@ (8005ef8 <main+0xee0>)
 8005d68:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005d6a:	4b64      	ldr	r3, [pc, #400]	@ (8005efc <main+0xee4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a62      	ldr	r2, [pc, #392]	@ (8005ef8 <main+0xee0>)
 8005d70:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005d72:	4b63      	ldr	r3, [pc, #396]	@ (8005f00 <main+0xee8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a60      	ldr	r2, [pc, #384]	@ (8005ef8 <main+0xee0>)
 8005d78:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005d7a:	4b62      	ldr	r3, [pc, #392]	@ (8005f04 <main+0xeec>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a62      	ldr	r2, [pc, #392]	@ (8005f08 <main+0xef0>)
 8005d80:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005d82:	4b62      	ldr	r3, [pc, #392]	@ (8005f0c <main+0xef4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a60      	ldr	r2, [pc, #384]	@ (8005f08 <main+0xef0>)
 8005d88:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005d8a:	4b61      	ldr	r3, [pc, #388]	@ (8005f10 <main+0xef8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8005f08 <main+0xef0>)
 8005d90:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005d92:	4b60      	ldr	r3, [pc, #384]	@ (8005f14 <main+0xefc>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a60      	ldr	r2, [pc, #384]	@ (8005f18 <main+0xf00>)
 8005d98:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005d9a:	4b60      	ldr	r3, [pc, #384]	@ (8005f1c <main+0xf04>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8005f18 <main+0xf00>)
 8005da0:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005da2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f20 <main+0xf08>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a5c      	ldr	r2, [pc, #368]	@ (8005f18 <main+0xf00>)
 8005da8:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005daa:	4b5e      	ldr	r3, [pc, #376]	@ (8005f24 <main+0xf0c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a5e      	ldr	r2, [pc, #376]	@ (8005f28 <main+0xf10>)
 8005db0:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005db2:	4b5e      	ldr	r3, [pc, #376]	@ (8005f2c <main+0xf14>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a5c      	ldr	r2, [pc, #368]	@ (8005f28 <main+0xf10>)
 8005db8:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005dba:	4b5d      	ldr	r3, [pc, #372]	@ (8005f30 <main+0xf18>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8005f28 <main+0xf10>)
 8005dc0:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005f34 <main+0xf1c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d14d      	bne.n	8005e66 <main+0xe4e>
 8005dca:	4b5b      	ldr	r3, [pc, #364]	@ (8005f38 <main+0xf20>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d149      	bne.n	8005e66 <main+0xe4e>
 8005dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f3c <main+0xf24>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d145      	bne.n	8005e66 <main+0xe4e>
	  			TIM_inte_SD = 0;
 8005dda:	4b56      	ldr	r3, [pc, #344]	@ (8005f34 <main+0xf1c>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005de0:	4b57      	ldr	r3, [pc, #348]	@ (8005f40 <main+0xf28>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fe41 	bl	8007a6c <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005dea:	4b55      	ldr	r3, [pc, #340]	@ (8005f40 <main+0xf28>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d12b      	bne.n	8005e4e <main+0xe36>
	  				SD_In_Use = 1;
 8005df6:	4b53      	ldr	r3, [pc, #332]	@ (8005f44 <main+0xf2c>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e02:	4851      	ldr	r0, [pc, #324]	@ (8005f48 <main+0xf30>)
 8005e04:	f008 faa2 	bl	800e34c <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005e08:	2232      	movs	r2, #50	@ 0x32
 8005e0a:	4950      	ldr	r1, [pc, #320]	@ (8005f4c <main+0xf34>)
 8005e0c:	4850      	ldr	r0, [pc, #320]	@ (8005f50 <main+0xf38>)
 8005e0e:	f017 fbaf 	bl	801d570 <f_open>
 8005e12:	4603      	mov	r3, r0
 8005e14:	461a      	mov	r2, r3
 8005e16:	4b48      	ldr	r3, [pc, #288]	@ (8005f38 <main+0xf20>)
 8005e18:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8005f54 <main+0xf3c>)
 8005e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8005f58 <main+0xf40>)
 8005e1e:	494f      	ldr	r1, [pc, #316]	@ (8005f5c <main+0xf44>)
 8005e20:	484b      	ldr	r0, [pc, #300]	@ (8005f50 <main+0xf38>)
 8005e22:	f017 fd6d 	bl	801d900 <f_write>
 8005e26:	4603      	mov	r3, r0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4b43      	ldr	r3, [pc, #268]	@ (8005f38 <main+0xf20>)
 8005e2c:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005e2e:	4848      	ldr	r0, [pc, #288]	@ (8005f50 <main+0xf38>)
 8005e30:	f017 ff78 	bl	801dd24 <f_close>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	4b3f      	ldr	r3, [pc, #252]	@ (8005f38 <main+0xf20>)
 8005e3a:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e42:	4841      	ldr	r0, [pc, #260]	@ (8005f48 <main+0xf30>)
 8005e44:	f008 fa82 	bl	800e34c <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005e48:	4b3e      	ldr	r3, [pc, #248]	@ (8005f44 <main+0xf2c>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f40 <main+0xf28>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e56:	d203      	bcs.n	8005e60 <main+0xe48>
 8005e58:	4b39      	ldr	r3, [pc, #228]	@ (8005f40 <main+0xf28>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	e000      	b.n	8005e62 <main+0xe4a>
 8005e60:	2300      	movs	r3, #0
 8005e62:	4a37      	ldr	r2, [pc, #220]	@ (8005f40 <main+0xf28>)
 8005e64:	6013      	str	r3, [r2, #0]
	  		}


	  		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 8005e66:	4b16      	ldr	r3, [pc, #88]	@ (8005ec0 <main+0xea8>)
 8005e68:	8a5b      	ldrh	r3, [r3, #18]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d118      	bne.n	8005ea0 <main+0xe88>
//	  			nRF24_WaitTX();
//
//	  			nRF24_RX_Mode();
//	  			NRF24.Status = NRF24_Ready;
//	  			NRF24.NRF24_MODE = NRF24_Rx_Mode;
	  			if(NRF24.Step == 0){
 8005e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f60 <main+0xf48>)
 8005e70:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <main+0xe76>
	  				NRF24.Step = 2;
 8005e78:	4b39      	ldr	r3, [pc, #228]	@ (8005f60 <main+0xf48>)
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	  				NRF24.Status = NRF24_Ready;
 8005e80:	4b37      	ldr	r3, [pc, #220]	@ (8005f60 <main+0xf48>)
 8005e82:	2204      	movs	r2, #4
 8005e84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	  				HAL_Delay(10);
 8005e88:	200a      	movs	r0, #10
 8005e8a:	f003 f923 	bl	80090d4 <HAL_Delay>
	  			}
	  			if(NRF24.Step == 9){
 8005e8e:	4b34      	ldr	r3, [pc, #208]	@ (8005f60 <main+0xf48>)
 8005e90:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d103      	bne.n	8005ea0 <main+0xe88>
	  				NRF24.Step = 0;
 8005e98:	4b31      	ldr	r3, [pc, #196]	@ (8005f60 <main+0xf48>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	  			}
	  		}
	  		if(TIM_inte == 1){
 8005ea0:	4b30      	ldr	r3, [pc, #192]	@ (8005f64 <main+0xf4c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	f47f aed7 	bne.w	8005c58 <main+0xc40>
	  			LED_R_0;
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005eb0:	482d      	ldr	r0, [pc, #180]	@ (8005f68 <main+0xf50>)
 8005eb2:	f008 fa4b 	bl	800e34c <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8005f64 <main+0xf4c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005ebc:	e6cc      	b.n	8005c58 <main+0xc40>
 8005ebe:	bf00      	nop
 8005ec0:	00000188 	.word	0x00000188
 8005ec4:	000041e6 	.word	0x000041e6
 8005ec8:	58020000 	.word	0x58020000
 8005ecc:	000041c8 	.word	0x000041c8
 8005ed0:	000041d8 	.word	0x000041d8
 8005ed4:	000040f4 	.word	0x000040f4
 8005ed8:	00004118 	.word	0x00004118
 8005edc:	00004100 	.word	0x00004100
 8005ee0:	0000410c 	.word	0x0000410c
 8005ee4:	00004154 	.word	0x00004154
 8005ee8:	00004178 	.word	0x00004178
 8005eec:	00004160 	.word	0x00004160
 8005ef0:	0000416c 	.word	0x0000416c
 8005ef4:	000040f8 	.word	0x000040f8
 8005ef8:	0000412c 	.word	0x0000412c
 8005efc:	00004104 	.word	0x00004104
 8005f00:	00004110 	.word	0x00004110
 8005f04:	00004158 	.word	0x00004158
 8005f08:	0000418c 	.word	0x0000418c
 8005f0c:	00004164 	.word	0x00004164
 8005f10:	00004170 	.word	0x00004170
 8005f14:	000040fc 	.word	0x000040fc
 8005f18:	00004140 	.word	0x00004140
 8005f1c:	00004108 	.word	0x00004108
 8005f20:	00004114 	.word	0x00004114
 8005f24:	0000415c 	.word	0x0000415c
 8005f28:	000041a0 	.word	0x000041a0
 8005f2c:	00004168 	.word	0x00004168
 8005f30:	00004174 	.word	0x00004174
 8005f34:	00000074 	.word	0x00000074
 8005f38:	24001eec 	.word	0x24001eec
 8005f3c:	000041f4 	.word	0x000041f4
 8005f40:	000041ec 	.word	0x000041ec
 8005f44:	000041f0 	.word	0x000041f0
 8005f48:	58020c00 	.word	0x58020c00
 8005f4c:	0801eb70 	.word	0x0801eb70
 8005f50:	24001ef0 	.word	0x24001ef0
 8005f54:	24002f24 	.word	0x24002f24
 8005f58:	0001f7e8 	.word	0x0001f7e8
 8005f5c:	24002f28 	.word	0x24002f28
 8005f60:	000000fc 	.word	0x000000fc
 8005f64:	00000078 	.word	0x00000078
 8005f68:	58020400 	.word	0x58020400

08005f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b09c      	sub	sp, #112	@ 0x70
 8005f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f76:	224c      	movs	r2, #76	@ 0x4c
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f018 f8ca 	bl	801e114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	2220      	movs	r2, #32
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f018 f8c4 	bl	801e114 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005f8c:	2002      	movs	r0, #2
 8005f8e:	f00a fe8f 	bl	8010cb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005f92:	2300      	movs	r3, #0
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4b2d      	ldr	r3, [pc, #180]	@ (800604c <SystemClock_Config+0xe0>)
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800604c <SystemClock_Config+0xe0>)
 8005f9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005fa0:	6193      	str	r3, [r2, #24]
 8005fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800604c <SystemClock_Config+0xe0>)
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005fae:	bf00      	nop
 8005fb0:	4b26      	ldr	r3, [pc, #152]	@ (800604c <SystemClock_Config+0xe0>)
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fbc:	d1f8      	bne.n	8005fb0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005fbe:	2311      	movs	r3, #17
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005fc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005fc8:	2380      	movs	r3, #128	@ 0x80
 8005fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005fcc:	2310      	movs	r3, #16
 8005fce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005fdc:	2344      	movs	r3, #68	@ 0x44
 8005fde:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005fec:	230c      	movs	r3, #12
 8005fee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005ff4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005ff8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ffe:	4618      	mov	r0, r3
 8006000:	f00a fe90 	bl	8010d24 <HAL_RCC_OscConfig>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800600a:	f002 f825 	bl	8008058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800600e:	233f      	movs	r3, #63	@ 0x3f
 8006010:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006012:	2303      	movs	r3, #3
 8006014:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800601a:	2308      	movs	r3, #8
 800601c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800601e:	2340      	movs	r3, #64	@ 0x40
 8006020:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006022:	2340      	movs	r3, #64	@ 0x40
 8006024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800602a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800602c:	2340      	movs	r3, #64	@ 0x40
 800602e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006030:	1d3b      	adds	r3, r7, #4
 8006032:	2103      	movs	r1, #3
 8006034:	4618      	mov	r0, r3
 8006036:	f00b fa4f 	bl	80114d8 <HAL_RCC_ClockConfig>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006040:	f002 f80a 	bl	8008058 <Error_Handler>
  }
}
 8006044:	bf00      	nop
 8006046:	3770      	adds	r7, #112	@ 0x70
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	58024800 	.word	0x58024800

08006050 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b0ae      	sub	sp, #184	@ 0xb8
 8006054:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006056:	463b      	mov	r3, r7
 8006058:	22b8      	movs	r2, #184	@ 0xb8
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f018 f859 	bl	801e114 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 8006062:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 800606e:	2316      	movs	r3, #22
 8006070:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8006072:	23c0      	movs	r3, #192	@ 0xc0
 8006074:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8006076:	2303      	movs	r3, #3
 8006078:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800607a:	2302      	movs	r3, #2
 800607c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800607e:	2302      	movs	r3, #2
 8006080:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8006086:	2320      	movs	r3, #32
 8006088:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800608e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006092:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800609a:	463b      	mov	r3, r7
 800609c:	4618      	mov	r0, r3
 800609e:	f00b fda7 	bl	8011bf0 <HAL_RCCEx_PeriphCLKConfig>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80060a8:	f001 ffd6 	bl	8008058 <Error_Handler>
  }
}
 80060ac:	bf00      	nop
 80060ae:	37b8      	adds	r7, #184	@ 0xb8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4aa8      	ldr	r2, [pc, #672]	@ (8006360 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	f040 81d3 	bne.w	800646c <HAL_TIM_PeriodElapsedCallback+0x3b8>
	{
		TIM_inte_SD = 1;
 80060c6:	4ba7      	ldr	r3, [pc, #668]	@ (8006364 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 80060cc:	4ba6      	ldr	r3, [pc, #664]	@ (8006368 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 80060d2:	4ba6      	ldr	r3, [pc, #664]	@ (800636c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	4aa4      	ldr	r2, [pc, #656]	@ (800636c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80060da:	6013      	str	r3, [r2, #0]

		if(NRF24.Timer_1 == 0){
 80060dc:	4ba4      	ldr	r3, [pc, #656]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80060de:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 8093 	bne.w	800620e <HAL_TIM_PeriodElapsedCallback+0x15a>
			if(NRF24.Step == 2  && NRF24.Status == NRF24_Ready){
 80060e8:	4ba1      	ldr	r3, [pc, #644]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80060ea:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d11c      	bne.n	800612c <HAL_TIM_PeriodElapsedCallback+0x78>
 80060f2:	4b9f      	ldr	r3, [pc, #636]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80060f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d117      	bne.n	800612c <HAL_TIM_PeriodElapsedCallback+0x78>
				LED_6_1;
 80060fc:	2201      	movs	r2, #1
 80060fe:	2108      	movs	r1, #8
 8006100:	489c      	ldr	r0, [pc, #624]	@ (8006374 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006102:	f008 f923 	bl	800e34c <HAL_GPIO_WritePin>
				nRF24_TX_Mode();
 8006106:	f7fb ff63 	bl	8001fd0 <nRF24_TX_Mode>
				LED_6_0;
 800610a:	2200      	movs	r2, #0
 800610c:	2108      	movs	r1, #8
 800610e:	4899      	ldr	r0, [pc, #612]	@ (8006374 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006110:	f008 f91c 	bl	800e34c <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 3
 8006114:	4b96      	ldr	r3, [pc, #600]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006116:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800611a:	3301      	adds	r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	4b94      	ldr	r3, [pc, #592]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006120:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				NRF24.Timer_1 = 1;
 8006124:	4b92      	ldr	r3, [pc, #584]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			}
			if(NRF24.Step == 3 && NRF24.Timer_1 == 0){//todo
 800612c:	4b90      	ldr	r3, [pc, #576]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800612e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006132:	2b03      	cmp	r3, #3
 8006134:	d12c      	bne.n	8006190 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8006136:	4b8e      	ldr	r3, [pc, #568]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006138:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800613c:	2b00      	cmp	r3, #0
 800613e:	d127      	bne.n	8006190 <HAL_TIM_PeriodElapsedCallback+0xdc>
				NRF24.Status = NRF24_Ready;
 8006140:	4b8b      	ldr	r3, [pc, #556]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006142:	2204      	movs	r2, #4
 8006144:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				NRF24.NRF24_MODE = NRF24_Tx_Mode;
 8006148:	4b89      	ldr	r3, [pc, #548]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				NRF24.TxData[10] = (MYDRON.dron_status.Connection == DRON_DISCONNECTED) ? 1: 0;
 8006150:	4b89      	ldr	r3, [pc, #548]	@ (8006378 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006152:	8a5b      	ldrh	r3, [r3, #18]
 8006154:	2b02      	cmp	r3, #2
 8006156:	bf0c      	ite	eq
 8006158:	2301      	moveq	r3, #1
 800615a:	2300      	movne	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	4b83      	ldr	r3, [pc, #524]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006162:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

				LED_6_1;
 8006166:	2201      	movs	r2, #1
 8006168:	2108      	movs	r1, #8
 800616a:	4882      	ldr	r0, [pc, #520]	@ (8006374 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800616c:	f008 f8ee 	bl	800e34c <HAL_GPIO_WritePin>
				nRF24_WriteTXPayload_IT(NRF24.TxData);
 8006170:	4882      	ldr	r0, [pc, #520]	@ (800637c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8006172:	f7fc fa03 	bl	800257c <nRF24_WriteTXPayload_IT>
				LED_6_0;
 8006176:	2200      	movs	r2, #0
 8006178:	2108      	movs	r1, #8
 800617a:	487e      	ldr	r0, [pc, #504]	@ (8006374 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800617c:	f008 f8e6 	bl	800e34c <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 4
 8006180:	4b7b      	ldr	r3, [pc, #492]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006182:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006186:	3301      	adds	r3, #1
 8006188:	b2da      	uxtb	r2, r3
 800618a:	4b79      	ldr	r3, [pc, #484]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800618c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 5){
 8006190:	4b77      	ldr	r3, [pc, #476]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006192:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006196:	2b05      	cmp	r3, #5
 8006198:	d10c      	bne.n	80061b4 <HAL_TIM_PeriodElapsedCallback+0x100>
				NRF24_CE_LOW;
 800619a:	2200      	movs	r2, #0
 800619c:	2140      	movs	r1, #64	@ 0x40
 800619e:	4878      	ldr	r0, [pc, #480]	@ (8006380 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80061a0:	f008 f8d4 	bl	800e34c <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 6
 80061a4:	4b72      	ldr	r3, [pc, #456]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80061a6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80061aa:	3301      	adds	r3, #1
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	4b70      	ldr	r3, [pc, #448]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80061b0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 6){
 80061b4:	4b6e      	ldr	r3, [pc, #440]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80061b6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80061ba:	2b06      	cmp	r3, #6
 80061bc:	d127      	bne.n	800620e <HAL_TIM_PeriodElapsedCallback+0x15a>
				LED_6_1;
 80061be:	2201      	movs	r2, #1
 80061c0:	2108      	movs	r1, #8
 80061c2:	486c      	ldr	r0, [pc, #432]	@ (8006374 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80061c4:	f008 f8c2 	bl	800e34c <HAL_GPIO_WritePin>
				uint8_t status = nRF24_ReadStatus();
 80061c8:	f7fb ff8d 	bl	80020e6 <nRF24_ReadStatus>
 80061cc:	4603      	mov	r3, r0
 80061ce:	72fb      	strb	r3, [r7, #11]
				if(((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS)))){//nRF24_WaitTX()
 80061d0:	7afb      	ldrb	r3, [r7, #11]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <HAL_TIM_PeriodElapsedCallback+0x130>
 80061da:	7afb      	ldrb	r3, [r7, #11]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00f      	beq.n	8006204 <HAL_TIM_PeriodElapsedCallback+0x150>
					NRF24.Timer_2 = 1;
 80061e4:	4b62      	ldr	r3, [pc, #392]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
					NRF24.Status = NRF24_Ready;
 80061ec:	4b60      	ldr	r3, [pc, #384]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80061ee:	2204      	movs	r2, #4
 80061f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
					NRF24.Step++;//Step 7
 80061f4:	4b5e      	ldr	r3, [pc, #376]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80061f6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80061fa:	3301      	adds	r3, #1
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006200:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				}
				LED_6_0;
 8006204:	2200      	movs	r2, #0
 8006206:	2108      	movs	r1, #8
 8006208:	485a      	ldr	r0, [pc, #360]	@ (8006374 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800620a:	f008 f89f 	bl	800e34c <HAL_GPIO_WritePin>
			}
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 7 && NRF24.Status == NRF24_Ready){
 800620e:	4b58      	ldr	r3, [pc, #352]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006210:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8006214:	2b00      	cmp	r3, #0
 8006216:	d121      	bne.n	800625c <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8006218:	4b55      	ldr	r3, [pc, #340]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800621a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800621e:	2b07      	cmp	r3, #7
 8006220:	d11c      	bne.n	800625c <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8006222:	4b53      	ldr	r3, [pc, #332]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006224:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006228:	2b04      	cmp	r3, #4
 800622a:	d117      	bne.n	800625c <HAL_TIM_PeriodElapsedCallback+0x1a8>
			LED_6_1;
 800622c:	2201      	movs	r2, #1
 800622e:	2108      	movs	r1, #8
 8006230:	4850      	ldr	r0, [pc, #320]	@ (8006374 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006232:	f008 f88b 	bl	800e34c <HAL_GPIO_WritePin>
			nRF24_RX_Mode();
 8006236:	f7fb fe95 	bl	8001f64 <nRF24_RX_Mode>
			LED_6_0;
 800623a:	2200      	movs	r2, #0
 800623c:	2108      	movs	r1, #8
 800623e:	484d      	ldr	r0, [pc, #308]	@ (8006374 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006240:	f008 f884 	bl	800e34c <HAL_GPIO_WritePin>
			NRF24.Timer_2 = 1;
 8006244:	4b4a      	ldr	r3, [pc, #296]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			NRF24.Step++;//Step 8
 800624c:	4b48      	ldr	r3, [pc, #288]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800624e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006252:	3301      	adds	r3, #1
 8006254:	b2da      	uxtb	r2, r3
 8006256:	4b46      	ldr	r3, [pc, #280]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006258:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 8){
 800625c:	4b44      	ldr	r3, [pc, #272]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800625e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8006262:	2b00      	cmp	r3, #0
 8006264:	d110      	bne.n	8006288 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8006266:	4b42      	ldr	r3, [pc, #264]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006268:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800626c:	2b08      	cmp	r3, #8
 800626e:	d10b      	bne.n	8006288 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			NRF24.Status = NRF24_Ready;
 8006270:	4b3f      	ldr	r3, [pc, #252]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006272:	2204      	movs	r2, #4
 8006274:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			NRF24.NRF24_MODE = NRF24_Rx_Mode;
 8006278:	4b3d      	ldr	r3, [pc, #244]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24.Step = 0;
 8006280:	4b3b      	ldr	r3, [pc, #236]	@ (8006370 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}


		if(i == 0){// na calosc 100ms
 8006288:	4b3e      	ldr	r3, [pc, #248]	@ (8006384 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d113      	bne.n	80062b8 <HAL_TIM_PeriodElapsedCallback+0x204>
			LED_5_1;
 8006290:	2201      	movs	r2, #1
 8006292:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006296:	483c      	ldr	r0, [pc, #240]	@ (8006388 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8006298:	f008 f858 	bl	800e34c <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 800629c:	f7fa fae8 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 80062a0:	2200      	movs	r2, #0
 80062a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062a6:	4838      	ldr	r0, [pc, #224]	@ (8006388 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80062a8:	f008 f850 	bl	800e34c <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 80062ac:	4b32      	ldr	r3, [pc, #200]	@ (8006378 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 fa44 	bl	8007740 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 80062b8:	4b32      	ldr	r3, [pc, #200]	@ (8006384 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b0a      	cmp	r3, #10
 80062be:	d10d      	bne.n	80062dc <HAL_TIM_PeriodElapsedCallback+0x228>
			LED_5_1;
 80062c0:	2201      	movs	r2, #1
 80062c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062c6:	4830      	ldr	r0, [pc, #192]	@ (8006388 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80062c8:	f008 f840 	bl	800e34c <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 80062cc:	f7fa faba 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 80062d0:	2200      	movs	r2, #0
 80062d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062d6:	482c      	ldr	r0, [pc, #176]	@ (8006388 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80062d8:	f008 f838 	bl	800e34c <HAL_GPIO_WritePin>
		}

		if(i == 36){
 80062dc:	4b29      	ldr	r3, [pc, #164]	@ (8006384 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b24      	cmp	r3, #36	@ 0x24
 80062e2:	d10d      	bne.n	8006300 <HAL_TIM_PeriodElapsedCallback+0x24c>
			LED_5_1;
 80062e4:	2201      	movs	r2, #1
 80062e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062ea:	4827      	ldr	r0, [pc, #156]	@ (8006388 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80062ec:	f008 f82e 	bl	800e34c <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 80062f0:	f7fa fef2 	bl	80010d8 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 80062f4:	2200      	movs	r2, #0
 80062f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062fa:	4823      	ldr	r0, [pc, #140]	@ (8006388 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80062fc:	f008 f826 	bl	800e34c <HAL_GPIO_WritePin>
		}

		if(i == 40){//5
 8006300:	4b20      	ldr	r3, [pc, #128]	@ (8006384 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b28      	cmp	r3, #40	@ 0x28
 8006306:	d15b      	bne.n	80063c0 <HAL_TIM_PeriodElapsedCallback+0x30c>
			ampritude = startpres - pres;
 8006308:	4b20      	ldr	r3, [pc, #128]	@ (800638c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800630a:	ed93 7a00 	vldr	s14, [r3]
 800630e:	4b20      	ldr	r3, [pc, #128]	@ (8006390 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8006310:	edd3 7a00 	vldr	s15, [r3]
 8006314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006318:	4b1e      	ldr	r3, [pc, #120]	@ (8006394 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800631a:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 800631e:	f7fa fd69 	bl	8000df4 <BMP180_GET_height>
 8006322:	eef0 7a40 	vmov.f32	s15, s0
 8006326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800632a:	ee17 3a90 	vmov	r3, s15
 800632e:	b29b      	uxth	r3, r3
 8006330:	b21a      	sxth	r2, r3
 8006332:	4b11      	ldr	r3, [pc, #68]	@ (8006378 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006334:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, NRF24.TxData, 0, 3);
 8006336:	4b10      	ldr	r3, [pc, #64]	@ (8006378 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006338:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800633c:	2303      	movs	r3, #3
 800633e:	2200      	movs	r2, #0
 8006340:	490e      	ldr	r1, [pc, #56]	@ (800637c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8006342:	f001 f920 	bl	8007586 <convert_value_to_array>

			Get_batteryvalue();
 8006346:	f7fd ff5f 	bl	8004208 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, NRF24.TxData, 3, 6);
 800634a:	4b0b      	ldr	r3, [pc, #44]	@ (8006378 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b218      	sxth	r0, r3
 8006350:	2306      	movs	r3, #6
 8006352:	2203      	movs	r2, #3
 8006354:	4909      	ldr	r1, [pc, #36]	@ (800637c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8006356:	f001 f916 	bl	8007586 <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e02c      	b.n	80063ba <HAL_TIM_PeriodElapsedCallback+0x306>
 8006360:	240003cc 	.word	0x240003cc
 8006364:	00000074 	.word	0x00000074
 8006368:	00000078 	.word	0x00000078
 800636c:	00000080 	.word	0x00000080
 8006370:	000000fc 	.word	0x000000fc
 8006374:	58021000 	.word	0x58021000
 8006378:	00000188 	.word	0x00000188
 800637c:	0000011c 	.word	0x0000011c
 8006380:	58020400 	.word	0x58020400
 8006384:	00004200 	.word	0x00004200
 8006388:	58020000 	.word	0x58020000
 800638c:	000000ec 	.word	0x000000ec
 8006390:	000000e8 	.word	0x000000e8
 8006394:	000000f0 	.word	0x000000f0
				NRF24.TxData[22+i] = NRF24.Txcode[22+i];
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f103 0216 	add.w	r2, r3, #22
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3316      	adds	r3, #22
 80063a2:	4934      	ldr	r1, [pc, #208]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80063a4:	440a      	add	r2, r1
 80063a6:	f892 1060 	ldrb.w	r1, [r2, #96]	@ 0x60
 80063aa:	4a32      	ldr	r2, [pc, #200]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80063ac:	4413      	add	r3, r2
 80063ae:	460a      	mov	r2, r1
 80063b0:	f883 2020 	strb.w	r2, [r3, #32]
			for(int i = 0; i < 10; i++){
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b09      	cmp	r3, #9
 80063be:	ddeb      	ble.n	8006398 <HAL_TIM_PeriodElapsedCallback+0x2e4>
			}
		}


		LED_5_1;
 80063c0:	2201      	movs	r2, #1
 80063c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063c6:	482c      	ldr	r0, [pc, #176]	@ (8006478 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80063c8:	f007 ffc0 	bl	800e34c <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 80063cc:	f7fb f972 	bl	80016b4 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 80063d0:	2200      	movs	r2, #0
 80063d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063d6:	4828      	ldr	r0, [pc, #160]	@ (8006478 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80063d8:	f007 ffb8 	bl	800e34c <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 80063dc:	4b27      	ldr	r3, [pc, #156]	@ (800647c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b64      	cmp	r3, #100	@ 0x64
 80063e2:	d003      	beq.n	80063ec <HAL_TIM_PeriodElapsedCallback+0x338>
 80063e4:	4b25      	ldr	r3, [pc, #148]	@ (800647c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	e000      	b.n	80063ee <HAL_TIM_PeriodElapsedCallback+0x33a>
 80063ec:	2300      	movs	r3, #0
 80063ee:	4a23      	ldr	r2, [pc, #140]	@ (800647c <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80063f0:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 80063f2:	4b23      	ldr	r3, [pc, #140]	@ (8006480 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063fa:	d308      	bcc.n	800640e <HAL_TIM_PeriodElapsedCallback+0x35a>
			LED_R_1;
 80063fc:	2201      	movs	r2, #1
 80063fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006402:	4820      	ldr	r0, [pc, #128]	@ (8006484 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8006404:	f007 ffa2 	bl	800e34c <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8006408:	4b1f      	ldr	r3, [pc, #124]	@ (8006488 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 800640a:	2202      	movs	r2, #2
 800640c:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 800640e:	4b1e      	ldr	r3, [pc, #120]	@ (8006488 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8006410:	8a5b      	ldrh	r3, [r3, #18]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d110      	bne.n	8006438 <HAL_TIM_PeriodElapsedCallback+0x384>
			wanted_rool = 0;
 8006416:	4b1d      	ldr	r3, [pc, #116]	@ (800648c <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 800641e:	4b1c      	ldr	r3, [pc, #112]	@ (8006490 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 8006426:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 800642e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006432:	b21a      	sxth	r2, r3
 8006434:	4b18      	ldr	r3, [pc, #96]	@ (8006498 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8006436:	801a      	strh	r2, [r3, #0]
		}
		(NRF24.Timer_1 != 0) ? NRF24.Timer_1--: 0;
 8006438:	4b0e      	ldr	r3, [pc, #56]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800643a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <HAL_TIM_PeriodElapsedCallback+0x39e>
 8006442:	4b0c      	ldr	r3, [pc, #48]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8006444:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8006448:	3b01      	subs	r3, #1
 800644a:	b2da      	uxtb	r2, r3
 800644c:	4b09      	ldr	r3, [pc, #36]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800644e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		(NRF24.Timer_2 != 0) ? NRF24.Timer_2--: 0;
 8006452:	4b08      	ldr	r3, [pc, #32]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8006454:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_TIM_PeriodElapsedCallback+0x3b8>
 800645c:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800645e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8006462:	3b01      	subs	r3, #1
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4b03      	ldr	r3, [pc, #12]	@ (8006474 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8006468:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	}
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	000000fc 	.word	0x000000fc
 8006478:	58020000 	.word	0x58020000
 800647c:	00004200 	.word	0x00004200
 8006480:	00000080 	.word	0x00000080
 8006484:	58020400 	.word	0x58020400
 8006488:	00000188 	.word	0x00000188
 800648c:	0000407c 	.word	0x0000407c
 8006490:	00004078 	.word	0x00004078
 8006494:	00004080 	.word	0x00004080
 8006498:	0000406c 	.word	0x0000406c

0800649c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ac:	d11b      	bne.n	80064e6 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		NRF24_inte = 1;
 80064ae:	4b10      	ldr	r3, [pc, #64]	@ (80064f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	701a      	strb	r2, [r3, #0]
		if(STARTUP == 0){
 80064b4:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d114      	bne.n	80064e6 <HAL_GPIO_EXTI_Callback+0x4a>
			LED_6_1;
 80064bc:	2201      	movs	r2, #1
 80064be:	2108      	movs	r1, #8
 80064c0:	480d      	ldr	r0, [pc, #52]	@ (80064f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80064c2:	f007 ff43 	bl	800e34c <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod_IT(NRF24.RxData);
 80064c6:	480d      	ldr	r0, [pc, #52]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x60>)
 80064c8:	f7fc f8b0 	bl	800262c <nRF24_ReadRXPaylaod_IT>
			NRF24.Step++;//step 1
 80064cc:	4b0b      	ldr	r3, [pc, #44]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x60>)
 80064ce:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80064d2:	3301      	adds	r3, #1
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x60>)
 80064d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			LED_6_0;
 80064dc:	2200      	movs	r2, #0
 80064de:	2108      	movs	r1, #8
 80064e0:	4805      	ldr	r0, [pc, #20]	@ (80064f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80064e2:	f007 ff33 	bl	800e34c <HAL_GPIO_WritePin>
		}
	}
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	0000420f 	.word	0x0000420f
 80064f4:	0000007c 	.word	0x0000007c
 80064f8:	58021000 	.word	0x58021000
 80064fc:	000000fc 	.word	0x000000fc

08006500 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8006508:	4b24      	ldr	r3, [pc, #144]	@ (800659c <HAL_UART_RxCpltCallback+0x9c>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	4b24      	ldr	r3, [pc, #144]	@ (80065a0 <HAL_UART_RxCpltCallback+0xa0>)
 8006510:	7819      	ldrb	r1, [r3, #0]
 8006512:	4b24      	ldr	r3, [pc, #144]	@ (80065a4 <HAL_UART_RxCpltCallback+0xa4>)
 8006514:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 8006516:	4b21      	ldr	r3, [pc, #132]	@ (800659c <HAL_UART_RxCpltCallback+0x9c>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	4b21      	ldr	r3, [pc, #132]	@ (80065a4 <HAL_UART_RxCpltCallback+0xa4>)
 800651e:	5c9b      	ldrb	r3, [r3, r2]
 8006520:	2b0d      	cmp	r3, #13
 8006522:	d11a      	bne.n	800655a <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8006524:	230a      	movs	r3, #10
 8006526:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006528:	f107 010f 	add.w	r1, r7, #15
 800652c:	2364      	movs	r3, #100	@ 0x64
 800652e:	2201      	movs	r2, #1
 8006530:	481d      	ldr	r0, [pc, #116]	@ (80065a8 <HAL_UART_RxCpltCallback+0xa8>)
 8006532:	f011 fd07 	bl	8017f44 <HAL_UART_Transmit>
		Y = '\r';
 8006536:	230d      	movs	r3, #13
 8006538:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800653a:	f107 010f 	add.w	r1, r7, #15
 800653e:	2364      	movs	r3, #100	@ 0x64
 8006540:	2201      	movs	r2, #1
 8006542:	4819      	ldr	r0, [pc, #100]	@ (80065a8 <HAL_UART_RxCpltCallback+0xa8>)
 8006544:	f011 fcfe 	bl	8017f44 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8006548:	4b14      	ldr	r3, [pc, #80]	@ (800659c <HAL_UART_RxCpltCallback+0x9c>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	4b15      	ldr	r3, [pc, #84]	@ (80065a4 <HAL_UART_RxCpltCallback+0xa4>)
 8006550:	2100      	movs	r1, #0
 8006552:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006554:	4b15      	ldr	r3, [pc, #84]	@ (80065ac <HAL_UART_RxCpltCallback+0xac>)
 8006556:	2201      	movs	r2, #1
 8006558:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 800655a:	4b10      	ldr	r3, [pc, #64]	@ (800659c <HAL_UART_RxCpltCallback+0x9c>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	4b10      	ldr	r3, [pc, #64]	@ (80065a4 <HAL_UART_RxCpltCallback+0xa4>)
 8006562:	4413      	add	r3, r2
 8006564:	2201      	movs	r2, #1
 8006566:	4619      	mov	r1, r3
 8006568:	480f      	ldr	r0, [pc, #60]	@ (80065a8 <HAL_UART_RxCpltCallback+0xa8>)
 800656a:	f011 fd79 	bl	8018060 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 800656e:	2201      	movs	r2, #1
 8006570:	490b      	ldr	r1, [pc, #44]	@ (80065a0 <HAL_UART_RxCpltCallback+0xa0>)
 8006572:	480d      	ldr	r0, [pc, #52]	@ (80065a8 <HAL_UART_RxCpltCallback+0xa8>)
 8006574:	f011 fe08 	bl	8018188 <HAL_UART_Receive_IT>
	command_ch_num++;
 8006578:	4b08      	ldr	r3, [pc, #32]	@ (800659c <HAL_UART_RxCpltCallback+0x9c>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	3301      	adds	r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	4b06      	ldr	r3, [pc, #24]	@ (800659c <HAL_UART_RxCpltCallback+0x9c>)
 8006582:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006584:	4b09      	ldr	r3, [pc, #36]	@ (80065ac <HAL_UART_RxCpltCallback+0xac>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d102      	bne.n	8006592 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 800658c:	4b03      	ldr	r3, [pc, #12]	@ (800659c <HAL_UART_RxCpltCallback+0x9c>)
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
	}
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	000041e7 	.word	0x000041e7
 80065a0:	000041e8 	.word	0x000041e8
 80065a4:	000041dc 	.word	0x000041dc
 80065a8:	240004b0 	.word	0x240004b0
 80065ac:	000041e6 	.word	0x000041e6

080065b0 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	if(MPU6050.MPU6050_IRQ == 1){
 80065b8:	4bbc      	ldr	r3, [pc, #752]	@ (80068ac <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80065ba:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80065be:	2b01      	cmp	r3, #1
 80065c0:	f040 8530 	bne.w	8007024 <HAL_I2C_MemRxCpltCallback+0xa74>
			MPU6050.MPU6050_IRQ = 0;
 80065c4:	4bb9      	ldr	r3, [pc, #740]	@ (80068ac <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
			LED_G_1;
 80065cc:	2201      	movs	r2, #1
 80065ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065d2:	48b7      	ldr	r0, [pc, #732]	@ (80068b0 <HAL_I2C_MemRxCpltCallback+0x300>)
 80065d4:	f007 feba 	bl	800e34c <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT();
 80065d8:	f7fb f888 	bl	80016ec <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE();
 80065dc:	f7fa ffe0 	bl	80015a0 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, Mag_Z);
 80065e0:	4bb4      	ldr	r3, [pc, #720]	@ (80068b4 <HAL_I2C_MemRxCpltCallback+0x304>)
 80065e2:	edd3 7a00 	vldr	s15, [r3]
 80065e6:	eeb0 0a67 	vmov.f32	s0, s15
 80065ea:	48b3      	ldr	r0, [pc, #716]	@ (80068b8 <HAL_I2C_MemRxCpltCallback+0x308>)
 80065ec:	f7fb f92a 	bl	8001844 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 80065f0:	4bb1      	ldr	r3, [pc, #708]	@ (80068b8 <HAL_I2C_MemRxCpltCallback+0x308>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4ab1      	ldr	r2, [pc, #708]	@ (80068bc <HAL_I2C_MemRxCpltCallback+0x30c>)
 80065f6:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 80065f8:	4baf      	ldr	r3, [pc, #700]	@ (80068b8 <HAL_I2C_MemRxCpltCallback+0x308>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4ab0      	ldr	r2, [pc, #704]	@ (80068c0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80065fe:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 8006600:	4bad      	ldr	r3, [pc, #692]	@ (80068b8 <HAL_I2C_MemRxCpltCallback+0x308>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4aaf      	ldr	r2, [pc, #700]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x314>)
 8006606:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 8006608:	4baf      	ldr	r3, [pc, #700]	@ (80068c8 <HAL_I2C_MemRxCpltCallback+0x318>)
 800660a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006616:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800661a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800661e:	4bab      	ldr	r3, [pc, #684]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006620:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 8006624:	4baa      	ldr	r3, [pc, #680]	@ (80068d0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006632:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800663a:	4ba6      	ldr	r3, [pc, #664]	@ (80068d4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800663c:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 8006640:	4ba5      	ldr	r3, [pc, #660]	@ (80068d8 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006648:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 800664c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006650:	4b9e      	ldr	r3, [pc, #632]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006652:	edd3 7a00 	vldr	s15, [r3]
 8006656:	ee67 6a27 	vmul.f32	s13, s14, s15
 800665a:	eddf 7aa0 	vldr	s15, [pc, #640]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 800665e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800666a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800666e:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 8006672:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800667a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006682:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006686:	4b96      	ldr	r3, [pc, #600]	@ (80068e0 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006688:	edd3 7a00 	vldr	s15, [r3]
 800668c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006694:	4b8d      	ldr	r3, [pc, #564]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006696:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 800669a:	eddf 7a90 	vldr	s15, [pc, #576]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 800669e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80066a2:	4b8c      	ldr	r3, [pc, #560]	@ (80068d4 <HAL_I2C_MemRxCpltCallback+0x324>)
 80066a4:	edd3 7a00 	vldr	s15, [r3]
 80066a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80066ac:	eddf 7a8b 	vldr	s15, [pc, #556]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 80066b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c0:	eddf 7a86 	vldr	s15, [pc, #536]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 80066c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80066d4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80066d8:	4b82      	ldr	r3, [pc, #520]	@ (80068e4 <HAL_I2C_MemRxCpltCallback+0x334>)
 80066da:	edd3 7a00 	vldr	s15, [r3]
 80066de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066e6:	4b7b      	ldr	r3, [pc, #492]	@ (80068d4 <HAL_I2C_MemRxCpltCallback+0x324>)
 80066e8:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 80066ec:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 80066f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80066f4:	4b78      	ldr	r3, [pc, #480]	@ (80068d8 <HAL_I2C_MemRxCpltCallback+0x328>)
 80066f6:	edd3 7a00 	vldr	s15, [r3]
 80066fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80066fe:	eddf 7a77 	vldr	s15, [pc, #476]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 8006702:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800670a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800670e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006712:	eddf 7a72 	vldr	s15, [pc, #456]	@ 80068dc <HAL_I2C_MemRxCpltCallback+0x32c>
 8006716:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800671a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800671e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006722:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006726:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800672a:	4b6f      	ldr	r3, [pc, #444]	@ (80068e8 <HAL_I2C_MemRxCpltCallback+0x338>)
 800672c:	edd3 7a00 	vldr	s15, [r3]
 8006730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006738:	4b67      	ldr	r3, [pc, #412]	@ (80068d8 <HAL_I2C_MemRxCpltCallback+0x328>)
 800673a:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 800673e:	4b63      	ldr	r3, [pc, #396]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a67      	ldr	r2, [pc, #412]	@ (80068e0 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006744:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 8006746:	4b63      	ldr	r3, [pc, #396]	@ (80068d4 <HAL_I2C_MemRxCpltCallback+0x324>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a66      	ldr	r2, [pc, #408]	@ (80068e4 <HAL_I2C_MemRxCpltCallback+0x334>)
 800674c:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 800674e:	4b62      	ldr	r3, [pc, #392]	@ (80068d8 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a65      	ldr	r2, [pc, #404]	@ (80068e8 <HAL_I2C_MemRxCpltCallback+0x338>)
 8006754:	6013      	str	r3, [r2, #0]


		  	pitch_error = wanted_pitch - now_pitch;
 8006756:	4b5f      	ldr	r3, [pc, #380]	@ (80068d4 <HAL_I2C_MemRxCpltCallback+0x324>)
 8006758:	ed93 7a00 	vldr	s14, [r3]
 800675c:	4b57      	ldr	r3, [pc, #348]	@ (80068bc <HAL_I2C_MemRxCpltCallback+0x30c>)
 800675e:	edd3 7a00 	vldr	s15, [r3]
 8006762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006766:	4b61      	ldr	r3, [pc, #388]	@ (80068ec <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006768:	edc3 7a00 	vstr	s15, [r3]
		  	rool_error = wanted_rool - now_rool;
 800676c:	4b57      	ldr	r3, [pc, #348]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x31c>)
 800676e:	ed93 7a00 	vldr	s14, [r3]
 8006772:	4b53      	ldr	r3, [pc, #332]	@ (80068c0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006774:	edd3 7a00 	vldr	s15, [r3]
 8006778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800677c:	4b5c      	ldr	r3, [pc, #368]	@ (80068f0 <HAL_I2C_MemRxCpltCallback+0x340>)
 800677e:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_error = wanted_yaw - now_yaw;
 8006782:	4b55      	ldr	r3, [pc, #340]	@ (80068d8 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006784:	ed93 7a00 	vldr	s14, [r3]
 8006788:	4b4e      	ldr	r3, [pc, #312]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x314>)
 800678a:	edd3 7a00 	vldr	s15, [r3]
 800678e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006792:	4b58      	ldr	r3, [pc, #352]	@ (80068f4 <HAL_I2C_MemRxCpltCallback+0x344>)
 8006794:	edc3 7a00 	vstr	s15, [r3]
		  	pitch_ar_error = pid_pitch - MPU6050.Gyr.gx;
 8006798:	4b57      	ldr	r3, [pc, #348]	@ (80068f8 <HAL_I2C_MemRxCpltCallback+0x348>)
 800679a:	ed93 7a00 	vldr	s14, [r3]
 800679e:	4b43      	ldr	r3, [pc, #268]	@ (80068ac <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80067a0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80067a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067a8:	4b54      	ldr	r3, [pc, #336]	@ (80068fc <HAL_I2C_MemRxCpltCallback+0x34c>)
 80067aa:	edc3 7a00 	vstr	s15, [r3]
		  	rool_ar_error = pid_rool - MPU6050.Gyr.gy;
 80067ae:	4b54      	ldr	r3, [pc, #336]	@ (8006900 <HAL_I2C_MemRxCpltCallback+0x350>)
 80067b0:	ed93 7a00 	vldr	s14, [r3]
 80067b4:	4b3d      	ldr	r3, [pc, #244]	@ (80068ac <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80067b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80067ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067be:	4b51      	ldr	r3, [pc, #324]	@ (8006904 <HAL_I2C_MemRxCpltCallback+0x354>)
 80067c0:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_ar_error = pid_yaw - MPU6050.Gyr.gz;
 80067c4:	4b50      	ldr	r3, [pc, #320]	@ (8006908 <HAL_I2C_MemRxCpltCallback+0x358>)
 80067c6:	ed93 7a00 	vldr	s14, [r3]
 80067ca:	4b38      	ldr	r3, [pc, #224]	@ (80068ac <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80067cc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80067d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067d4:	4b4d      	ldr	r3, [pc, #308]	@ (800690c <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067d6:	edc3 7a00 	vstr	s15, [r3]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (pitch_error);//pitch_error -> pitch_error
 80067da:	4b4d      	ldr	r3, [pc, #308]	@ (8006910 <HAL_I2C_MemRxCpltCallback+0x360>)
 80067dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_I2C_MemRxCpltCallback+0x246>
 80067e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006914 <HAL_I2C_MemRxCpltCallback+0x364>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	ee07 3a90 	vmov	s15, r3
 80067ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067f4:	e00c      	b.n	8006810 <HAL_I2C_MemRxCpltCallback+0x260>
 80067f6:	4b47      	ldr	r3, [pc, #284]	@ (8006914 <HAL_I2C_MemRxCpltCallback+0x364>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006802:	4b3a      	ldr	r3, [pc, #232]	@ (80068ec <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006804:	edd3 7a00 	vldr	s15, [r3]
 8006808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800680c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006810:	4b40      	ldr	r3, [pc, #256]	@ (8006914 <HAL_I2C_MemRxCpltCallback+0x364>)
 8006812:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (rool_error);//rool_error
 8006816:	4b3e      	ldr	r3, [pc, #248]	@ (8006910 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006818:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_I2C_MemRxCpltCallback+0x282>
 8006820:	4b3d      	ldr	r3, [pc, #244]	@ (8006918 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800682c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006830:	e00c      	b.n	800684c <HAL_I2C_MemRxCpltCallback+0x29c>
 8006832:	4b39      	ldr	r3, [pc, #228]	@ (8006918 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800683e:	4b2c      	ldr	r3, [pc, #176]	@ (80068f0 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006840:	edd3 7a00 	vldr	s15, [r3]
 8006844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800684c:	4b32      	ldr	r3, [pc, #200]	@ (8006918 <HAL_I2C_MemRxCpltCallback+0x368>)
 800684e:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (yaw_error);//yaw_error
 8006852:	4b2f      	ldr	r3, [pc, #188]	@ (8006910 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006854:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_I2C_MemRxCpltCallback+0x2be>
 800685c:	4b2f      	ldr	r3, [pc, #188]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x36c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	ee07 3a90 	vmov	s15, r3
 8006864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800686c:	e00c      	b.n	8006888 <HAL_I2C_MemRxCpltCallback+0x2d8>
 800686e:	4b2b      	ldr	r3, [pc, #172]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x36c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800687a:	4b1e      	ldr	r3, [pc, #120]	@ (80068f4 <HAL_I2C_MemRxCpltCallback+0x344>)
 800687c:	edd3 7a00 	vldr	s15, [r3]
 8006880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006888:	4b24      	ldr	r3, [pc, #144]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x36c>)
 800688a:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pitch_ar_error);//pitch_ar_error
 800688e:	4b20      	ldr	r3, [pc, #128]	@ (8006910 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006890:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006894:	2b00      	cmp	r3, #0
 8006896:	d045      	beq.n	8006924 <HAL_I2C_MemRxCpltCallback+0x374>
 8006898:	4b21      	ldr	r3, [pc, #132]	@ (8006920 <HAL_I2C_MemRxCpltCallback+0x370>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068a8:	e049      	b.n	800693e <HAL_I2C_MemRxCpltCallback+0x38e>
 80068aa:	bf00      	nop
 80068ac:	00000000 	.word	0x00000000
 80068b0:	58021000 	.word	0x58021000
 80068b4:	00000054 	.word	0x00000054
 80068b8:	00000084 	.word	0x00000084
 80068bc:	00004088 	.word	0x00004088
 80068c0:	0000408c 	.word	0x0000408c
 80068c4:	00004090 	.word	0x00004090
 80068c8:	0000405a 	.word	0x0000405a
 80068cc:	0000407c 	.word	0x0000407c
 80068d0:	00004058 	.word	0x00004058
 80068d4:	00004078 	.word	0x00004078
 80068d8:	00004080 	.word	0x00004080
 80068dc:	3a83126f 	.word	0x3a83126f
 80068e0:	00004064 	.word	0x00004064
 80068e4:	00004060 	.word	0x00004060
 80068e8:	00004068 	.word	0x00004068
 80068ec:	00004094 	.word	0x00004094
 80068f0:	00004098 	.word	0x00004098
 80068f4:	0000409c 	.word	0x0000409c
 80068f8:	000040dc 	.word	0x000040dc
 80068fc:	000040a0 	.word	0x000040a0
 8006900:	000040e4 	.word	0x000040e4
 8006904:	000040a4 	.word	0x000040a4
 8006908:	000040e0 	.word	0x000040e0
 800690c:	000040a8 	.word	0x000040a8
 8006910:	00000188 	.word	0x00000188
 8006914:	000040c4 	.word	0x000040c4
 8006918:	000040c8 	.word	0x000040c8
 800691c:	000040cc 	.word	0x000040cc
 8006920:	000040d0 	.word	0x000040d0
 8006924:	4b77      	ldr	r3, [pc, #476]	@ (8006b04 <HAL_I2C_MemRxCpltCallback+0x554>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006930:	4b75      	ldr	r3, [pc, #468]	@ (8006b08 <HAL_I2C_MemRxCpltCallback+0x558>)
 8006932:	edd3 7a00 	vldr	s15, [r3]
 8006936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800693a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800693e:	4b71      	ldr	r3, [pc, #452]	@ (8006b04 <HAL_I2C_MemRxCpltCallback+0x554>)
 8006940:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (rool_ar_error);
 8006944:	4b71      	ldr	r3, [pc, #452]	@ (8006b0c <HAL_I2C_MemRxCpltCallback+0x55c>)
 8006946:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800694a:	2b00      	cmp	r3, #0
 800694c:	d008      	beq.n	8006960 <HAL_I2C_MemRxCpltCallback+0x3b0>
 800694e:	4b70      	ldr	r3, [pc, #448]	@ (8006b10 <HAL_I2C_MemRxCpltCallback+0x560>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800695a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800695e:	e00c      	b.n	800697a <HAL_I2C_MemRxCpltCallback+0x3ca>
 8006960:	4b6b      	ldr	r3, [pc, #428]	@ (8006b10 <HAL_I2C_MemRxCpltCallback+0x560>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	ee07 3a90 	vmov	s15, r3
 8006968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800696c:	4b69      	ldr	r3, [pc, #420]	@ (8006b14 <HAL_I2C_MemRxCpltCallback+0x564>)
 800696e:	edd3 7a00 	vldr	s15, [r3]
 8006972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800697a:	4b65      	ldr	r3, [pc, #404]	@ (8006b10 <HAL_I2C_MemRxCpltCallback+0x560>)
 800697c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (yaw_ar_error);
 8006980:	4b62      	ldr	r3, [pc, #392]	@ (8006b0c <HAL_I2C_MemRxCpltCallback+0x55c>)
 8006982:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <HAL_I2C_MemRxCpltCallback+0x3ec>
 800698a:	4b63      	ldr	r3, [pc, #396]	@ (8006b18 <HAL_I2C_MemRxCpltCallback+0x568>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800699a:	e00c      	b.n	80069b6 <HAL_I2C_MemRxCpltCallback+0x406>
 800699c:	4b5e      	ldr	r3, [pc, #376]	@ (8006b18 <HAL_I2C_MemRxCpltCallback+0x568>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a8:	4b5c      	ldr	r3, [pc, #368]	@ (8006b1c <HAL_I2C_MemRxCpltCallback+0x56c>)
 80069aa:	edd3 7a00 	vldr	s15, [r3]
 80069ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069b6:	4b58      	ldr	r3, [pc, #352]	@ (8006b18 <HAL_I2C_MemRxCpltCallback+0x568>)
 80069b8:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 80069bc:	2201      	movs	r2, #1
 80069be:	4958      	ldr	r1, [pc, #352]	@ (8006b20 <HAL_I2C_MemRxCpltCallback+0x570>)
 80069c0:	4858      	ldr	r0, [pc, #352]	@ (8006b24 <HAL_I2C_MemRxCpltCallback+0x574>)
 80069c2:	f7fd f87b 	bl	8003abc <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 80069c6:	2202      	movs	r2, #2
 80069c8:	4957      	ldr	r1, [pc, #348]	@ (8006b28 <HAL_I2C_MemRxCpltCallback+0x578>)
 80069ca:	4858      	ldr	r0, [pc, #352]	@ (8006b2c <HAL_I2C_MemRxCpltCallback+0x57c>)
 80069cc:	f7fd f876 	bl	8003abc <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 80069d0:	2203      	movs	r2, #3
 80069d2:	4957      	ldr	r1, [pc, #348]	@ (8006b30 <HAL_I2C_MemRxCpltCallback+0x580>)
 80069d4:	4857      	ldr	r0, [pc, #348]	@ (8006b34 <HAL_I2C_MemRxCpltCallback+0x584>)
 80069d6:	f7fd f871 	bl	8003abc <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 80069da:	2204      	movs	r2, #4
 80069dc:	4956      	ldr	r1, [pc, #344]	@ (8006b38 <HAL_I2C_MemRxCpltCallback+0x588>)
 80069de:	4857      	ldr	r0, [pc, #348]	@ (8006b3c <HAL_I2C_MemRxCpltCallback+0x58c>)
 80069e0:	f7fd f86c 	bl	8003abc <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 80069e4:	2205      	movs	r2, #5
 80069e6:	4956      	ldr	r1, [pc, #344]	@ (8006b40 <HAL_I2C_MemRxCpltCallback+0x590>)
 80069e8:	4856      	ldr	r0, [pc, #344]	@ (8006b44 <HAL_I2C_MemRxCpltCallback+0x594>)
 80069ea:	f7fd f867 	bl	8003abc <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80069ee:	2206      	movs	r2, #6
 80069f0:	4955      	ldr	r1, [pc, #340]	@ (8006b48 <HAL_I2C_MemRxCpltCallback+0x598>)
 80069f2:	4856      	ldr	r0, [pc, #344]	@ (8006b4c <HAL_I2C_MemRxCpltCallback+0x59c>)
 80069f4:	f7fd f862 	bl	8003abc <PID_cal>


			old_error_pitch = pitch_error;
 80069f8:	4b55      	ldr	r3, [pc, #340]	@ (8006b50 <HAL_I2C_MemRxCpltCallback+0x5a0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a55      	ldr	r2, [pc, #340]	@ (8006b54 <HAL_I2C_MemRxCpltCallback+0x5a4>)
 80069fe:	6013      	str	r3, [r2, #0]
			old_error_rool = rool_error;
 8006a00:	4b55      	ldr	r3, [pc, #340]	@ (8006b58 <HAL_I2C_MemRxCpltCallback+0x5a8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a55      	ldr	r2, [pc, #340]	@ (8006b5c <HAL_I2C_MemRxCpltCallback+0x5ac>)
 8006a06:	6013      	str	r3, [r2, #0]
			old_error_yaw = yaw_error;
 8006a08:	4b55      	ldr	r3, [pc, #340]	@ (8006b60 <HAL_I2C_MemRxCpltCallback+0x5b0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a55      	ldr	r2, [pc, #340]	@ (8006b64 <HAL_I2C_MemRxCpltCallback+0x5b4>)
 8006a0e:	6013      	str	r3, [r2, #0]

			old_error_angular_rate_pitch = pitch_ar_error;
 8006a10:	4b3d      	ldr	r3, [pc, #244]	@ (8006b08 <HAL_I2C_MemRxCpltCallback+0x558>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a54      	ldr	r2, [pc, #336]	@ (8006b68 <HAL_I2C_MemRxCpltCallback+0x5b8>)
 8006a16:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_rool = rool_ar_error;
 8006a18:	4b3e      	ldr	r3, [pc, #248]	@ (8006b14 <HAL_I2C_MemRxCpltCallback+0x564>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a53      	ldr	r2, [pc, #332]	@ (8006b6c <HAL_I2C_MemRxCpltCallback+0x5bc>)
 8006a1e:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_yaw = wanted_yaw - MPU6050.Gyr.gz;
 8006a20:	4b53      	ldr	r3, [pc, #332]	@ (8006b70 <HAL_I2C_MemRxCpltCallback+0x5c0>)
 8006a22:	ed93 7a00 	vldr	s14, [r3]
 8006a26:	4b53      	ldr	r3, [pc, #332]	@ (8006b74 <HAL_I2C_MemRxCpltCallback+0x5c4>)
 8006a28:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a30:	4b51      	ldr	r3, [pc, #324]	@ (8006b78 <HAL_I2C_MemRxCpltCallback+0x5c8>)
 8006a32:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006a36:	4b43      	ldr	r3, [pc, #268]	@ (8006b44 <HAL_I2C_MemRxCpltCallback+0x594>)
 8006a38:	edd3 7a00 	vldr	s15, [r3]
 8006a3c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006b7c <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a48:	dd04      	ble.n	8006a54 <HAL_I2C_MemRxCpltCallback+0x4a4>
 8006a4a:	f001 fa31 	bl	8007eb0 <ROOL_MAX_VAL>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	461a      	mov	r2, r3
 8006a52:	e012      	b.n	8006a7a <HAL_I2C_MemRxCpltCallback+0x4ca>
 8006a54:	4b3b      	ldr	r3, [pc, #236]	@ (8006b44 <HAL_I2C_MemRxCpltCallback+0x594>)
 8006a56:	edd3 7a00 	vldr	s15, [r3]
 8006a5a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006b80 <HAL_I2C_MemRxCpltCallback+0x5d0>
 8006a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a66:	d504      	bpl.n	8006a72 <HAL_I2C_MemRxCpltCallback+0x4c2>
 8006a68:	f001 fa32 	bl	8007ed0 <ROOL_MIN_VAL>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	e003      	b.n	8006a7a <HAL_I2C_MemRxCpltCallback+0x4ca>
 8006a72:	f001 fa7d 	bl	8007f70 <ROOL_GOOD_VAL>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b24      	ldr	r3, [pc, #144]	@ (8006b0c <HAL_I2C_MemRxCpltCallback+0x55c>)
 8006a7c:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b3c <HAL_I2C_MemRxCpltCallback+0x58c>)
 8006a80:	edd3 7a00 	vldr	s15, [r3]
 8006a84:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8006b7c <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a90:	dd04      	ble.n	8006a9c <HAL_I2C_MemRxCpltCallback+0x4ec>
 8006a92:	f001 fa2d 	bl	8007ef0 <PITCH_MAX_VAL>
 8006a96:	4603      	mov	r3, r0
 8006a98:	461a      	mov	r2, r3
 8006a9a:	e012      	b.n	8006ac2 <HAL_I2C_MemRxCpltCallback+0x512>
 8006a9c:	4b27      	ldr	r3, [pc, #156]	@ (8006b3c <HAL_I2C_MemRxCpltCallback+0x58c>)
 8006a9e:	edd3 7a00 	vldr	s15, [r3]
 8006aa2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8006b80 <HAL_I2C_MemRxCpltCallback+0x5d0>
 8006aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aae:	d504      	bpl.n	8006aba <HAL_I2C_MemRxCpltCallback+0x50a>
 8006ab0:	f001 fa2e 	bl	8007f10 <PITCH_MIN_VAL>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	e003      	b.n	8006ac2 <HAL_I2C_MemRxCpltCallback+0x512>
 8006aba:	f001 fa71 	bl	8007fa0 <PITCH_GOOD_VAL>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4b12      	ldr	r3, [pc, #72]	@ (8006b0c <HAL_I2C_MemRxCpltCallback+0x55c>)
 8006ac4:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006ac6:	4b21      	ldr	r3, [pc, #132]	@ (8006b4c <HAL_I2C_MemRxCpltCallback+0x59c>)
 8006ac8:	edd3 7a00 	vldr	s15, [r3]
 8006acc:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006b7c <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad8:	dd04      	ble.n	8006ae4 <HAL_I2C_MemRxCpltCallback+0x534>
 8006ada:	f001 fa29 	bl	8007f30 <YAW_MAX_VAL>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	e053      	b.n	8006b8c <HAL_I2C_MemRxCpltCallback+0x5dc>
 8006ae4:	4b19      	ldr	r3, [pc, #100]	@ (8006b4c <HAL_I2C_MemRxCpltCallback+0x59c>)
 8006ae6:	edd3 7a00 	vldr	s15, [r3]
 8006aea:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8006b80 <HAL_I2C_MemRxCpltCallback+0x5d0>
 8006aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af6:	d545      	bpl.n	8006b84 <HAL_I2C_MemRxCpltCallback+0x5d4>
 8006af8:	f001 fa2a 	bl	8007f50 <YAW_MIN_VAL>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	e044      	b.n	8006b8c <HAL_I2C_MemRxCpltCallback+0x5dc>
 8006b02:	bf00      	nop
 8006b04:	000040d0 	.word	0x000040d0
 8006b08:	000040a0 	.word	0x000040a0
 8006b0c:	00000188 	.word	0x00000188
 8006b10:	000040d4 	.word	0x000040d4
 8006b14:	000040a4 	.word	0x000040a4
 8006b18:	000040d8 	.word	0x000040d8
 8006b1c:	000040a8 	.word	0x000040a8
 8006b20:	00004118 	.word	0x00004118
 8006b24:	000040dc 	.word	0x000040dc
 8006b28:	0000412c 	.word	0x0000412c
 8006b2c:	000040e4 	.word	0x000040e4
 8006b30:	00004140 	.word	0x00004140
 8006b34:	000040e0 	.word	0x000040e0
 8006b38:	00004178 	.word	0x00004178
 8006b3c:	000040e8 	.word	0x000040e8
 8006b40:	0000418c 	.word	0x0000418c
 8006b44:	000040f0 	.word	0x000040f0
 8006b48:	000041a0 	.word	0x000041a0
 8006b4c:	000040ec 	.word	0x000040ec
 8006b50:	00004094 	.word	0x00004094
 8006b54:	000040ac 	.word	0x000040ac
 8006b58:	00004098 	.word	0x00004098
 8006b5c:	000040b0 	.word	0x000040b0
 8006b60:	0000409c 	.word	0x0000409c
 8006b64:	000040b4 	.word	0x000040b4
 8006b68:	000040b8 	.word	0x000040b8
 8006b6c:	000040bc 	.word	0x000040bc
 8006b70:	00004080 	.word	0x00004080
 8006b74:	00000000 	.word	0x00000000
 8006b78:	000040c0 	.word	0x000040c0
 8006b7c:	459c4000 	.word	0x459c4000
 8006b80:	c59c4000 	.word	0xc59c4000
 8006b84:	f001 fa24 	bl	8007fd0 <YAW_GOOD_VAL>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4bc4      	ldr	r3, [pc, #784]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006b8e:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006b90:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006b94:	f7fc fe68 	bl	8003868 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006b98:	4bc1      	ldr	r3, [pc, #772]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006b9a:	885b      	ldrh	r3, [r3, #2]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	4bc1      	ldr	r3, [pc, #772]	@ (8006ea4 <HAL_I2C_MemRxCpltCallback+0x8f4>)
 8006ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	dd05      	ble.n	8006bb4 <HAL_I2C_MemRxCpltCallback+0x604>
				MYDRON.THRUST = thrust_limit;
 8006ba8:	4bbe      	ldr	r3, [pc, #760]	@ (8006ea4 <HAL_I2C_MemRxCpltCallback+0x8f4>)
 8006baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	4bbb      	ldr	r3, [pc, #748]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006bb2:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006bb4:	4bbc      	ldr	r3, [pc, #752]	@ (8006ea8 <HAL_I2C_MemRxCpltCallback+0x8f8>)
 8006bb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8006bba:	eeb0 0a67 	vmov.f32	s0, s15
 8006bbe:	f000 fd81 	bl	80076c4 <WartoscBezwgledna>
 8006bc2:	eef0 7a40 	vmov.f32	s15, s0
 8006bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8006bca:	f001 f925 	bl	8007e18 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006bce:	4bb7      	ldr	r3, [pc, #732]	@ (8006eac <HAL_I2C_MemRxCpltCallback+0x8fc>)
 8006bd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8006bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd8:	f000 fd74 	bl	80076c4 <WartoscBezwgledna>
 8006bdc:	eef0 7a40 	vmov.f32	s15, s0
 8006be0:	eeb0 0a67 	vmov.f32	s0, s15
 8006be4:	f001 f918 	bl	8007e18 <Stack_Push>
			Stack_Push(now_pitch);
 8006be8:	4bb1      	ldr	r3, [pc, #708]	@ (8006eb0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006bea:	edd3 7a00 	vldr	s15, [r3]
 8006bee:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf2:	f001 f911 	bl	8007e18 <Stack_Push>
			Stack_Push(now_rool);
 8006bf6:	4baf      	ldr	r3, [pc, #700]	@ (8006eb4 <HAL_I2C_MemRxCpltCallback+0x904>)
 8006bf8:	edd3 7a00 	vldr	s15, [r3]
 8006bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8006c00:	f001 f90a 	bl	8007e18 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006c04:	4ba6      	ldr	r3, [pc, #664]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006c06:	885b      	ldrh	r3, [r3, #2]
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c10:	ed9f 6b9d 	vldr	d6, [pc, #628]	@ 8006e88 <HAL_I2C_MemRxCpltCallback+0x8d8>
 8006c14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c18:	4ba1      	ldr	r3, [pc, #644]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006c1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c26:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c2a:	4b9d      	ldr	r3, [pc, #628]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006c2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c38:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006c3c:	4b98      	ldr	r3, [pc, #608]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006c3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c4e:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006e90 <HAL_I2C_MemRxCpltCallback+0x8e0>
 8006c52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c56:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006e98 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006c5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c62:	ee17 2a90 	vmov	r2, s15
 8006c66:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d832      	bhi.n	8006cd4 <HAL_I2C_MemRxCpltCallback+0x724>
 8006c6e:	4b8c      	ldr	r3, [pc, #560]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006c70:	885b      	ldrh	r3, [r3, #2]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c7a:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8006e88 <HAL_I2C_MemRxCpltCallback+0x8d8>
 8006c7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c82:	4b87      	ldr	r3, [pc, #540]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006c84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c88:	ee07 3a90 	vmov	s15, r3
 8006c8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c94:	4b82      	ldr	r3, [pc, #520]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006c96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ca2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ca6:	4b7e      	ldr	r3, [pc, #504]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006ca8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cac:	ee07 3a90 	vmov	s15, r3
 8006cb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006cb8:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006e90 <HAL_I2C_MemRxCpltCallback+0x8e0>
 8006cbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006cc0:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006e98 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006cc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006cc8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ccc:	ee17 3a90 	vmov	r3, s15
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	e001      	b.n	8006cd8 <HAL_I2C_MemRxCpltCallback+0x728>
 8006cd4:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006cd8:	4a77      	ldr	r2, [pc, #476]	@ (8006eb8 <HAL_I2C_MemRxCpltCallback+0x908>)
 8006cda:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006cdc:	4b70      	ldr	r3, [pc, #448]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006cde:	885b      	ldrh	r3, [r3, #2]
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ce8:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8006e88 <HAL_I2C_MemRxCpltCallback+0x8d8>
 8006cec:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006cf2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cfe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d02:	4b67      	ldr	r3, [pc, #412]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006d04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d10:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d14:	4b62      	ldr	r3, [pc, #392]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006d16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d26:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006e90 <HAL_I2C_MemRxCpltCallback+0x8e0>
 8006d2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d2e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006e98 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006d32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d3a:	ee17 2a90 	vmov	r2, s15
 8006d3e:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d832      	bhi.n	8006dac <HAL_I2C_MemRxCpltCallback+0x7fc>
 8006d46:	4b56      	ldr	r3, [pc, #344]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006d48:	885b      	ldrh	r3, [r3, #2]
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d52:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8006e88 <HAL_I2C_MemRxCpltCallback+0x8d8>
 8006d56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d5a:	4b51      	ldr	r3, [pc, #324]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006d5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d68:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006d6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d7a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d7e:	4b48      	ldr	r3, [pc, #288]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d84:	ee07 3a90 	vmov	s15, r3
 8006d88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d90:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006e90 <HAL_I2C_MemRxCpltCallback+0x8e0>
 8006d94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d98:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006e98 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006d9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006da0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006da4:	ee17 3a90 	vmov	r3, s15
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	e001      	b.n	8006db0 <HAL_I2C_MemRxCpltCallback+0x800>
 8006dac:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006db0:	4a42      	ldr	r2, [pc, #264]	@ (8006ebc <HAL_I2C_MemRxCpltCallback+0x90c>)
 8006db2:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006db4:	4b3a      	ldr	r3, [pc, #232]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006db6:	885b      	ldrh	r3, [r3, #2]
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dc0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006e88 <HAL_I2C_MemRxCpltCallback+0x8d8>
 8006dc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dc8:	4b35      	ldr	r3, [pc, #212]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006dca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dd6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006dda:	4b31      	ldr	r3, [pc, #196]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006ddc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006de0:	ee07 3a90 	vmov	s15, r3
 8006de4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006de8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006dec:	4b2c      	ldr	r3, [pc, #176]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006dee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dfa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006dfe:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006e90 <HAL_I2C_MemRxCpltCallback+0x8e0>
 8006e02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e06:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006e98 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006e0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e12:	ee17 2a90 	vmov	r2, s15
 8006e16:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d850      	bhi.n	8006ec0 <HAL_I2C_MemRxCpltCallback+0x910>
 8006e1e:	4b20      	ldr	r3, [pc, #128]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006e20:	885b      	ldrh	r3, [r3, #2]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e2a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8006e88 <HAL_I2C_MemRxCpltCallback+0x8d8>
 8006e2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006e34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e44:	4b16      	ldr	r3, [pc, #88]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006e46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e56:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <HAL_I2C_MemRxCpltCallback+0x8f0>)
 8006e58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e5c:	ee07 3a90 	vmov	s15, r3
 8006e60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e68:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006e90 <HAL_I2C_MemRxCpltCallback+0x8e0>
 8006e6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e70:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006e98 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006e74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e7c:	ee17 3a90 	vmov	r3, s15
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	e01f      	b.n	8006ec4 <HAL_I2C_MemRxCpltCallback+0x914>
 8006e84:	f3af 8000 	nop.w
 8006e88:	66666666 	.word	0x66666666
 8006e8c:	3fe66666 	.word	0x3fe66666
 8006e90:	00000000 	.word	0x00000000
 8006e94:	40c48200 	.word	0x40c48200
 8006e98:	00000000 	.word	0x00000000
 8006e9c:	407f4000 	.word	0x407f4000
 8006ea0:	00000188 	.word	0x00000188
 8006ea4:	0000406e 	.word	0x0000406e
 8006ea8:	00004118 	.word	0x00004118
 8006eac:	0000412c 	.word	0x0000412c
 8006eb0:	00004088 	.word	0x00004088
 8006eb4:	0000408c 	.word	0x0000408c
 8006eb8:	000041b4 	.word	0x000041b4
 8006ebc:	000041b6 	.word	0x000041b6
 8006ec0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006ec4:	4a92      	ldr	r2, [pc, #584]	@ (8007110 <HAL_I2C_MemRxCpltCallback+0xb60>)
 8006ec6:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 8006ec8:	4b92      	ldr	r3, [pc, #584]	@ (8007114 <HAL_I2C_MemRxCpltCallback+0xb64>)
 8006eca:	885b      	ldrh	r3, [r3, #2]
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ed4:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 80070e0 <HAL_I2C_MemRxCpltCallback+0xb30>
 8006ed8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006edc:	4b8d      	ldr	r3, [pc, #564]	@ (8007114 <HAL_I2C_MemRxCpltCallback+0xb64>)
 8006ede:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006eea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006eee:	4b89      	ldr	r3, [pc, #548]	@ (8007114 <HAL_I2C_MemRxCpltCallback+0xb64>)
 8006ef0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006efc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f00:	4b84      	ldr	r3, [pc, #528]	@ (8007114 <HAL_I2C_MemRxCpltCallback+0xb64>)
 8006f02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f12:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 80070e8 <HAL_I2C_MemRxCpltCallback+0xb38>
 8006f16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f1a:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 80070f0 <HAL_I2C_MemRxCpltCallback+0xb40>
 8006f1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f26:	ee17 2a90 	vmov	r2, s15
 8006f2a:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d832      	bhi.n	8006f98 <HAL_I2C_MemRxCpltCallback+0x9e8>
 8006f32:	4b78      	ldr	r3, [pc, #480]	@ (8007114 <HAL_I2C_MemRxCpltCallback+0xb64>)
 8006f34:	885b      	ldrh	r3, [r3, #2]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f3e:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 80070e0 <HAL_I2C_MemRxCpltCallback+0xb30>
 8006f42:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f46:	4b73      	ldr	r3, [pc, #460]	@ (8007114 <HAL_I2C_MemRxCpltCallback+0xb64>)
 8006f48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f54:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f58:	4b6e      	ldr	r3, [pc, #440]	@ (8007114 <HAL_I2C_MemRxCpltCallback+0xb64>)
 8006f5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f66:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8007114 <HAL_I2C_MemRxCpltCallback+0xb64>)
 8006f6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f78:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f7c:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 80070e8 <HAL_I2C_MemRxCpltCallback+0xb38>
 8006f80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f84:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 80070f0 <HAL_I2C_MemRxCpltCallback+0xb40>
 8006f88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f90:	ee17 3a90 	vmov	r3, s15
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	e001      	b.n	8006f9c <HAL_I2C_MemRxCpltCallback+0x9ec>
 8006f98:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006f9c:	4a5e      	ldr	r2, [pc, #376]	@ (8007118 <HAL_I2C_MemRxCpltCallback+0xb68>)
 8006f9e:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8006fa0:	4b5e      	ldr	r3, [pc, #376]	@ (800711c <HAL_I2C_MemRxCpltCallback+0xb6c>)
 8006fa2:	881a      	ldrh	r2, [r3, #0]
 8006fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8007120 <HAL_I2C_MemRxCpltCallback+0xb70>)
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d004      	beq.n	8006fb6 <HAL_I2C_MemRxCpltCallback+0xa06>
				ESC_1_SPEED(SPEED1);
 8006fac:	4b5b      	ldr	r3, [pc, #364]	@ (800711c <HAL_I2C_MemRxCpltCallback+0xb6c>)
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7f9 ff3f 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8006fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8007124 <HAL_I2C_MemRxCpltCallback+0xb74>)
 8006fb8:	881a      	ldrh	r2, [r3, #0]
 8006fba:	4b5b      	ldr	r3, [pc, #364]	@ (8007128 <HAL_I2C_MemRxCpltCallback+0xb78>)
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d004      	beq.n	8006fcc <HAL_I2C_MemRxCpltCallback+0xa1c>
				ESC_2_SPEED(SPEED2);
 8006fc2:	4b58      	ldr	r3, [pc, #352]	@ (8007124 <HAL_I2C_MemRxCpltCallback+0xb74>)
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7f9 ff56 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8006fcc:	4b50      	ldr	r3, [pc, #320]	@ (8007110 <HAL_I2C_MemRxCpltCallback+0xb60>)
 8006fce:	881a      	ldrh	r2, [r3, #0]
 8006fd0:	4b56      	ldr	r3, [pc, #344]	@ (800712c <HAL_I2C_MemRxCpltCallback+0xb7c>)
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d004      	beq.n	8006fe2 <HAL_I2C_MemRxCpltCallback+0xa32>
				ESC_3_SPEED(SPEED3);
 8006fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8007110 <HAL_I2C_MemRxCpltCallback+0xb60>)
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7f9 ff6d 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8006fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8007118 <HAL_I2C_MemRxCpltCallback+0xb68>)
 8006fe4:	881a      	ldrh	r2, [r3, #0]
 8006fe6:	4b52      	ldr	r3, [pc, #328]	@ (8007130 <HAL_I2C_MemRxCpltCallback+0xb80>)
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d004      	beq.n	8006ff8 <HAL_I2C_MemRxCpltCallback+0xa48>
				ESC_4_SPEED(SPEED4);
 8006fee:	4b4a      	ldr	r3, [pc, #296]	@ (8007118 <HAL_I2C_MemRxCpltCallback+0xb68>)
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7f9 ff84 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8006ff8:	4b48      	ldr	r3, [pc, #288]	@ (800711c <HAL_I2C_MemRxCpltCallback+0xb6c>)
 8006ffa:	881a      	ldrh	r2, [r3, #0]
 8006ffc:	4b48      	ldr	r3, [pc, #288]	@ (8007120 <HAL_I2C_MemRxCpltCallback+0xb70>)
 8006ffe:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8007000:	4b48      	ldr	r3, [pc, #288]	@ (8007124 <HAL_I2C_MemRxCpltCallback+0xb74>)
 8007002:	881a      	ldrh	r2, [r3, #0]
 8007004:	4b48      	ldr	r3, [pc, #288]	@ (8007128 <HAL_I2C_MemRxCpltCallback+0xb78>)
 8007006:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8007008:	4b41      	ldr	r3, [pc, #260]	@ (8007110 <HAL_I2C_MemRxCpltCallback+0xb60>)
 800700a:	881a      	ldrh	r2, [r3, #0]
 800700c:	4b47      	ldr	r3, [pc, #284]	@ (800712c <HAL_I2C_MemRxCpltCallback+0xb7c>)
 800700e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8007010:	4b41      	ldr	r3, [pc, #260]	@ (8007118 <HAL_I2C_MemRxCpltCallback+0xb68>)
 8007012:	881a      	ldrh	r2, [r3, #0]
 8007014:	4b46      	ldr	r3, [pc, #280]	@ (8007130 <HAL_I2C_MemRxCpltCallback+0xb80>)
 8007016:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8007018:	2200      	movs	r2, #0
 800701a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800701e:	4845      	ldr	r0, [pc, #276]	@ (8007134 <HAL_I2C_MemRxCpltCallback+0xb84>)
 8007020:	f007 f994 	bl	800e34c <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8007024:	4b44      	ldr	r3, [pc, #272]	@ (8007138 <HAL_I2C_MemRxCpltCallback+0xb88>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d125      	bne.n	8007078 <HAL_I2C_MemRxCpltCallback+0xac8>
		HMC583L_IRQ = 0;
 800702c:	4b42      	ldr	r3, [pc, #264]	@ (8007138 <HAL_I2C_MemRxCpltCallback+0xb88>)
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
		HMC5883L_Get_Z_End_IT();
 8007032:	f7fa f86d 	bl	8001110 <HMC5883L_Get_Z_End_IT>
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8007036:	4b41      	ldr	r3, [pc, #260]	@ (800713c <HAL_I2C_MemRxCpltCallback+0xb8c>)
 8007038:	edd3 7a00 	vldr	s15, [r3]
 800703c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007040:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 80070f8 <HAL_I2C_MemRxCpltCallback+0xb48>
 8007044:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007048:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8007100 <HAL_I2C_MemRxCpltCallback+0xb50>
 800704c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8007050:	4b3b      	ldr	r3, [pc, #236]	@ (8007140 <HAL_I2C_MemRxCpltCallback+0xb90>)
 8007052:	edd3 7a00 	vldr	s15, [r3]
 8007056:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800705a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8007108 <HAL_I2C_MemRxCpltCallback+0xb58>
 800705e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007062:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007066:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800706a:	4b34      	ldr	r3, [pc, #208]	@ (800713c <HAL_I2C_MemRxCpltCallback+0xb8c>)
 800706c:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8007070:	4b32      	ldr	r3, [pc, #200]	@ (800713c <HAL_I2C_MemRxCpltCallback+0xb8c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a32      	ldr	r2, [pc, #200]	@ (8007140 <HAL_I2C_MemRxCpltCallback+0xb90>)
 8007076:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8007078:	4b32      	ldr	r3, [pc, #200]	@ (8007144 <HAL_I2C_MemRxCpltCallback+0xb94>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d113      	bne.n	80070a8 <HAL_I2C_MemRxCpltCallback+0xaf8>
		temperature = BMP180_GET_temp_IT();
 8007080:	f7f9 fb86 	bl	8000790 <BMP180_GET_temp_IT>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	4b2f      	ldr	r3, [pc, #188]	@ (8007148 <HAL_I2C_MemRxCpltCallback+0xb98>)
 800708a:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 800708c:	4b2e      	ldr	r3, [pc, #184]	@ (8007148 <HAL_I2C_MemRxCpltCallback+0xb98>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	4618      	mov	r0, r3
 8007094:	f7f9 fca0 	bl	80009d8 <BMP180_GET_temp>
 8007098:	eef0 7a40 	vmov.f32	s15, s0
 800709c:	4b2b      	ldr	r3, [pc, #172]	@ (800714c <HAL_I2C_MemRxCpltCallback+0xb9c>)
 800709e:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80070a2:	4b28      	ldr	r3, [pc, #160]	@ (8007144 <HAL_I2C_MemRxCpltCallback+0xb94>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 80070a8:	4b26      	ldr	r3, [pc, #152]	@ (8007144 <HAL_I2C_MemRxCpltCallback+0xb94>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d113      	bne.n	80070d8 <HAL_I2C_MemRxCpltCallback+0xb28>
		pressure = BMP180_GET_pres_IT();
 80070b0:	f7f9 fb84 	bl	80007bc <BMP180_GET_pres_IT>
 80070b4:	4603      	mov	r3, r0
 80070b6:	461a      	mov	r2, r3
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <HAL_I2C_MemRxCpltCallback+0xba0>)
 80070ba:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 80070bc:	4b24      	ldr	r3, [pc, #144]	@ (8007150 <HAL_I2C_MemRxCpltCallback+0xba0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 fce4 	bl	8000a90 <BMP180_GET_pres>
 80070c8:	eef0 7a40 	vmov.f32	s15, s0
 80070cc:	4b21      	ldr	r3, [pc, #132]	@ (8007154 <HAL_I2C_MemRxCpltCallback+0xba4>)
 80070ce:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80070d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007144 <HAL_I2C_MemRxCpltCallback+0xb94>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
	}
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	66666666 	.word	0x66666666
 80070e4:	3fe66666 	.word	0x3fe66666
 80070e8:	00000000 	.word	0x00000000
 80070ec:	40c48200 	.word	0x40c48200
 80070f0:	00000000 	.word	0x00000000
 80070f4:	407f4000 	.word	0x407f4000
 80070f8:	9999999a 	.word	0x9999999a
 80070fc:	3fc99999 	.word	0x3fc99999
 8007100:	33333333 	.word	0x33333333
 8007104:	3ff33333 	.word	0x3ff33333
 8007108:	aaaaaaab 	.word	0xaaaaaaab
 800710c:	3feaaaaa 	.word	0x3feaaaaa
 8007110:	000041b8 	.word	0x000041b8
 8007114:	00000188 	.word	0x00000188
 8007118:	000041ba 	.word	0x000041ba
 800711c:	000041b4 	.word	0x000041b4
 8007120:	000041bc 	.word	0x000041bc
 8007124:	000041b6 	.word	0x000041b6
 8007128:	000041be 	.word	0x000041be
 800712c:	000041c0 	.word	0x000041c0
 8007130:	000041c2 	.word	0x000041c2
 8007134:	58021000 	.word	0x58021000
 8007138:	000041fc 	.word	0x000041fc
 800713c:	00000054 	.word	0x00000054
 8007140:	00000064 	.word	0x00000064
 8007144:	000041fd 	.word	0x000041fd
 8007148:	000000c0 	.word	0x000000c0
 800714c:	000000e4 	.word	0x000000e4
 8007150:	000000c4 	.word	0x000000c4
 8007154:	000000e8 	.word	0x000000e8

08007158 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi){
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	if(NRF24.SPI_Tx_Inte == 1 && NRF24.Step == 4){
 8007160:	4b1a      	ldr	r3, [pc, #104]	@ (80071cc <HAL_SPI_TxCpltCallback+0x74>)
 8007162:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007166:	2b00      	cmp	r3, #0
 8007168:	d02c      	beq.n	80071c4 <HAL_SPI_TxCpltCallback+0x6c>
 800716a:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <HAL_SPI_TxCpltCallback+0x74>)
 800716c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007170:	2b04      	cmp	r3, #4
 8007172:	d127      	bne.n	80071c4 <HAL_SPI_TxCpltCallback+0x6c>
		LED_6_1;
 8007174:	2201      	movs	r2, #1
 8007176:	2108      	movs	r1, #8
 8007178:	4815      	ldr	r0, [pc, #84]	@ (80071d0 <HAL_SPI_TxCpltCallback+0x78>)
 800717a:	f007 f8e7 	bl	800e34c <HAL_GPIO_WritePin>
		NRF24_CSN_HIGH;
 800717e:	2201      	movs	r2, #1
 8007180:	2180      	movs	r1, #128	@ 0x80
 8007182:	4814      	ldr	r0, [pc, #80]	@ (80071d4 <HAL_SPI_TxCpltCallback+0x7c>)
 8007184:	f007 f8e2 	bl	800e34c <HAL_GPIO_WritePin>
		NRF24_CE_HIGH;//nRF24_WaitTX()
 8007188:	2201      	movs	r2, #1
 800718a:	2140      	movs	r1, #64	@ 0x40
 800718c:	4811      	ldr	r0, [pc, #68]	@ (80071d4 <HAL_SPI_TxCpltCallback+0x7c>)
 800718e:	f007 f8dd 	bl	800e34c <HAL_GPIO_WritePin>
		LED_6_0;
 8007192:	2200      	movs	r2, #0
 8007194:	2108      	movs	r1, #8
 8007196:	480e      	ldr	r0, [pc, #56]	@ (80071d0 <HAL_SPI_TxCpltCallback+0x78>)
 8007198:	f007 f8d8 	bl	800e34c <HAL_GPIO_WritePin>
		//
		NRF24.Status = NRF24_Ready;
 800719c:	4b0b      	ldr	r3, [pc, #44]	@ (80071cc <HAL_SPI_TxCpltCallback+0x74>)
 800719e:	2204      	movs	r2, #4
 80071a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		NRF24.Timer_1 = 1;
 80071a4:	4b09      	ldr	r3, [pc, #36]	@ (80071cc <HAL_SPI_TxCpltCallback+0x74>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		//NRF24.Message_Status = 2;
		NRF24.SPI_Tx_Inte = 0;
 80071ac:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <HAL_SPI_TxCpltCallback+0x74>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		NRF24.Step++;//Step 5
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <HAL_SPI_TxCpltCallback+0x74>)
 80071b6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80071ba:	3301      	adds	r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	4b03      	ldr	r3, [pc, #12]	@ (80071cc <HAL_SPI_TxCpltCallback+0x74>)
 80071c0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	}
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	000000fc 	.word	0x000000fc
 80071d0:	58021000 	.word	0x58021000
 80071d4:	58020400 	.word	0x58020400

080071d8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){//todo
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	if(STARTUP == 0 && NRF24.SPI_Rx_Inte == 1 && NRF24.Step == 1){
 80071e0:	4ba7      	ldr	r3, [pc, #668]	@ (8007480 <HAL_SPI_RxCpltCallback+0x2a8>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 8147 	bne.w	8007478 <HAL_SPI_RxCpltCallback+0x2a0>
 80071ea:	4ba6      	ldr	r3, [pc, #664]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 80071ec:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8141 	beq.w	8007478 <HAL_SPI_RxCpltCallback+0x2a0>
 80071f6:	4ba3      	ldr	r3, [pc, #652]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 80071f8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	f040 813b 	bne.w	8007478 <HAL_SPI_RxCpltCallback+0x2a0>
		NRF24.SPI_Rx_Inte = 0;
 8007202:	4ba0      	ldr	r3, [pc, #640]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007204:	2200      	movs	r2, #0
 8007206:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

		LED_6_1;
 800720a:	2201      	movs	r2, #1
 800720c:	2108      	movs	r1, #8
 800720e:	489e      	ldr	r0, [pc, #632]	@ (8007488 <HAL_SPI_RxCpltCallback+0x2b0>)
 8007210:	f007 f89c 	bl	800e34c <HAL_GPIO_WritePin>
		nRF24_ReadRXPaylaod_IT_End();
 8007214:	f7fb fa1e 	bl	8002654 <nRF24_ReadRXPaylaod_IT_End>
		LED_6_0;
 8007218:	2200      	movs	r2, #0
 800721a:	2108      	movs	r1, #8
 800721c:	489a      	ldr	r0, [pc, #616]	@ (8007488 <HAL_SPI_RxCpltCallback+0x2b0>)
 800721e:	f007 f895 	bl	800e34c <HAL_GPIO_WritePin>
		NRF24.Step++;//step 2
 8007222:	4b98      	ldr	r3, [pc, #608]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007224:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007228:	3301      	adds	r3, #1
 800722a:	b2da      	uxtb	r2, r3
 800722c:	4b95      	ldr	r3, [pc, #596]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 800722e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

		NRF24.Timer_1 = 2;
 8007232:	4b94      	ldr	r3, [pc, #592]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007234:	2202      	movs	r2, #2
 8007236:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

		LED_Y_1;
 800723a:	2201      	movs	r2, #1
 800723c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007240:	4892      	ldr	r0, [pc, #584]	@ (800748c <HAL_SPI_RxCpltCallback+0x2b4>)
 8007242:	f007 f883 	bl	800e34c <HAL_GPIO_WritePin>

		loopnum = 0;
 8007246:	4b92      	ldr	r3, [pc, #584]	@ (8007490 <HAL_SPI_RxCpltCallback+0x2b8>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e013      	b.n	800727a <HAL_SPI_RxCpltCallback+0xa2>
			if(NRF24.RxData[12+abc] == NRF24.Rxcode[abc+12]){
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	330c      	adds	r3, #12
 8007256:	4a8b      	ldr	r2, [pc, #556]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007258:	5cd2      	ldrb	r2, [r2, r3]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	330c      	adds	r3, #12
 800725e:	4989      	ldr	r1, [pc, #548]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007260:	440b      	add	r3, r1
 8007262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007266:	429a      	cmp	r2, r3
 8007268:	d104      	bne.n	8007274 <HAL_SPI_RxCpltCallback+0x9c>
				loopnum++;
 800726a:	4b89      	ldr	r3, [pc, #548]	@ (8007490 <HAL_SPI_RxCpltCallback+0x2b8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3301      	adds	r3, #1
 8007270:	4a87      	ldr	r2, [pc, #540]	@ (8007490 <HAL_SPI_RxCpltCallback+0x2b8>)
 8007272:	6013      	str	r3, [r2, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b09      	cmp	r3, #9
 800727e:	dde8      	ble.n	8007252 <HAL_SPI_RxCpltCallback+0x7a>
			}
		}

		if(loopnum == 10){
 8007280:	4b83      	ldr	r3, [pc, #524]	@ (8007490 <HAL_SPI_RxCpltCallback+0x2b8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b0a      	cmp	r3, #10
 8007286:	f040 80e6 	bne.w	8007456 <HAL_SPI_RxCpltCallback+0x27e>
			convert_array_to_value(NRF24.RxData, &wanted_pitch_v, 0, 2);//pitch
 800728a:	2302      	movs	r3, #2
 800728c:	2200      	movs	r2, #0
 800728e:	4981      	ldr	r1, [pc, #516]	@ (8007494 <HAL_SPI_RxCpltCallback+0x2bc>)
 8007290:	487c      	ldr	r0, [pc, #496]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 8007292:	f000 f927 	bl	80074e4 <convert_array_to_value>
			convert_array_to_value(NRF24.RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8007296:	2305      	movs	r3, #5
 8007298:	2203      	movs	r2, #3
 800729a:	497f      	ldr	r1, [pc, #508]	@ (8007498 <HAL_SPI_RxCpltCallback+0x2c0>)
 800729c:	4879      	ldr	r0, [pc, #484]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 800729e:	f000 f921 	bl	80074e4 <convert_array_to_value>
			if(wobble_strenght == 1){
 80072a2:	4b7e      	ldr	r3, [pc, #504]	@ (800749c <HAL_SPI_RxCpltCallback+0x2c4>)
 80072a4:	edd3 7a00 	vldr	s15, [r3]
 80072a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ac:	eef4 7a47 	vcmp.f32	s15, s14
 80072b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b4:	d105      	bne.n	80072c2 <HAL_SPI_RxCpltCallback+0xea>
				convert_array_to_value(NRF24.RxData, &wanted_thrust, 6, 8);//
 80072b6:	2308      	movs	r3, #8
 80072b8:	2206      	movs	r2, #6
 80072ba:	4979      	ldr	r1, [pc, #484]	@ (80074a0 <HAL_SPI_RxCpltCallback+0x2c8>)
 80072bc:	4871      	ldr	r0, [pc, #452]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 80072be:	f000 f911 	bl	80074e4 <convert_array_to_value>
			}
			convert_array_to_value(NRF24.RxData, &wanted_yaw_v, 9, 11);//
 80072c2:	230b      	movs	r3, #11
 80072c4:	2209      	movs	r2, #9
 80072c6:	4977      	ldr	r1, [pc, #476]	@ (80074a4 <HAL_SPI_RxCpltCallback+0x2cc>)
 80072c8:	486e      	ldr	r0, [pc, #440]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 80072ca:	f000 f90b 	bl	80074e4 <convert_array_to_value>
			MYDRON.dron_status.Connection = DRON_CONNECTED;
 80072ce:	4b76      	ldr	r3, [pc, #472]	@ (80074a8 <HAL_SPI_RxCpltCallback+0x2d0>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	825a      	strh	r2, [r3, #18]

			if(NRF24.RxData[23] == 1){
 80072d4:	4b6b      	ldr	r3, [pc, #428]	@ (8007484 <HAL_SPI_RxCpltCallback+0x2ac>)
 80072d6:	7ddb      	ldrb	r3, [r3, #23]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d11b      	bne.n	8007314 <HAL_SPI_RxCpltCallback+0x13c>
				ESC_POWER_1;
 80072dc:	2201      	movs	r2, #1
 80072de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80072e2:	4872      	ldr	r0, [pc, #456]	@ (80074ac <HAL_SPI_RxCpltCallback+0x2d4>)
 80072e4:	f007 f832 	bl	800e34c <HAL_GPIO_WritePin>
				LED_R_1;
 80072e8:	2201      	movs	r2, #1
 80072ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80072ee:	4867      	ldr	r0, [pc, #412]	@ (800748c <HAL_SPI_RxCpltCallback+0x2b4>)
 80072f0:	f007 f82c 	bl	800e34c <HAL_GPIO_WritePin>
				if(SD_enable_Flag == 1){
 80072f4:	4b6e      	ldr	r3, [pc, #440]	@ (80074b0 <HAL_SPI_RxCpltCallback+0x2d8>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d10b      	bne.n	8007314 <HAL_SPI_RxCpltCallback+0x13c>
					f_close(&fil);
 80072fc:	486d      	ldr	r0, [pc, #436]	@ (80074b4 <HAL_SPI_RxCpltCallback+0x2dc>)
 80072fe:	f016 fd11 	bl	801dd24 <f_close>
					fresult = f_mount(NULL, "/", 1);
 8007302:	2201      	movs	r2, #1
 8007304:	496c      	ldr	r1, [pc, #432]	@ (80074b8 <HAL_SPI_RxCpltCallback+0x2e0>)
 8007306:	2000      	movs	r0, #0
 8007308:	f016 f8ec 	bl	801d4e4 <f_mount>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	4b6a      	ldr	r3, [pc, #424]	@ (80074bc <HAL_SPI_RxCpltCallback+0x2e4>)
 8007312:	701a      	strb	r2, [r3, #0]
					}
			}

			if(wanted_thrust == 9999){
 8007314:	4b62      	ldr	r3, [pc, #392]	@ (80074a0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8007316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800731a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800731e:	4293      	cmp	r3, r2
 8007320:	d103      	bne.n	800732a <HAL_SPI_RxCpltCallback+0x152>
				MYDRON.THRUST_flag = THRUST_MAX;
 8007322:	4b61      	ldr	r3, [pc, #388]	@ (80074a8 <HAL_SPI_RxCpltCallback+0x2d0>)
 8007324:	2210      	movs	r2, #16
 8007326:	f883 2020 	strb.w	r2, [r3, #32]
		  	}
			wanted_thrust = wanted_thrust * 20;
 800732a:	4b5d      	ldr	r3, [pc, #372]	@ (80074a0 <HAL_SPI_RxCpltCallback+0x2c8>)
 800732c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007330:	b29b      	uxth	r3, r3
 8007332:	461a      	mov	r2, r3
 8007334:	0092      	lsls	r2, r2, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	b29b      	uxth	r3, r3
 800733c:	b21a      	sxth	r2, r3
 800733e:	4b58      	ldr	r3, [pc, #352]	@ (80074a0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8007340:	801a      	strh	r2, [r3, #0]
			wanted_thrust = wanted_thrust - 10000;
 8007342:	4b57      	ldr	r3, [pc, #348]	@ (80074a0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8007344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007348:	b29a      	uxth	r2, r3
 800734a:	4b5d      	ldr	r3, [pc, #372]	@ (80074c0 <HAL_SPI_RxCpltCallback+0x2e8>)
 800734c:	4413      	add	r3, r2
 800734e:	b29b      	uxth	r3, r3
 8007350:	b21a      	sxth	r2, r3
 8007352:	4b53      	ldr	r3, [pc, #332]	@ (80074a0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8007354:	801a      	strh	r2, [r3, #0]
			if(wanted_thrust < 0){
 8007356:	4b52      	ldr	r3, [pc, #328]	@ (80074a0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8007358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800735c:	2b00      	cmp	r3, #0
 800735e:	da02      	bge.n	8007366 <HAL_SPI_RxCpltCallback+0x18e>
				wanted_thrust = 0;
 8007360:	4b4f      	ldr	r3, [pc, #316]	@ (80074a0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8007362:	2200      	movs	r2, #0
 8007364:	801a      	strh	r2, [r3, #0]
			}

			wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 8007366:	4b4c      	ldr	r3, [pc, #304]	@ (8007498 <HAL_SPI_RxCpltCallback+0x2c0>)
 8007368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800736c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8007370:	ee07 3a90 	vmov	s15, r3
 8007374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007378:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80074c4 <HAL_SPI_RxCpltCallback+0x2ec>
 800737c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007384:	ee17 3a90 	vmov	r3, s15
 8007388:	b21a      	sxth	r2, r3
 800738a:	4b4f      	ldr	r3, [pc, #316]	@ (80074c8 <HAL_SPI_RxCpltCallback+0x2f0>)
 800738c:	801a      	strh	r2, [r3, #0]
			wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 800738e:	4b41      	ldr	r3, [pc, #260]	@ (8007494 <HAL_SPI_RxCpltCallback+0x2bc>)
 8007390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007394:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073a0:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80074cc <HAL_SPI_RxCpltCallback+0x2f4>
 80073a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073ac:	ee17 3a90 	vmov	r3, s15
 80073b0:	b21a      	sxth	r2, r3
 80073b2:	4b47      	ldr	r3, [pc, #284]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x2f8>)
 80073b4:	801a      	strh	r2, [r3, #0]
			wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;// wanted yaw is in deg/s
 80073b6:	4b3b      	ldr	r3, [pc, #236]	@ (80074a4 <HAL_SPI_RxCpltCallback+0x2cc>)
 80073b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073bc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073c8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80074d4 <HAL_SPI_RxCpltCallback+0x2fc>
 80073cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073d4:	ee17 3a90 	vmov	r3, s15
 80073d8:	b21a      	sxth	r2, r3
 80073da:	4b3f      	ldr	r3, [pc, #252]	@ (80074d8 <HAL_SPI_RxCpltCallback+0x300>)
 80073dc:	801a      	strh	r2, [r3, #0]

			wanted_rool_rx = (wanted_rool_rx >= 300) ? 300 : (wanted_rool_rx <= -300) ? -300 : wanted_rool_rx;
 80073de:	4b3a      	ldr	r3, [pc, #232]	@ (80074c8 <HAL_SPI_RxCpltCallback+0x2f0>)
 80073e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073e4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80073e8:	da08      	bge.n	80073fc <HAL_SPI_RxCpltCallback+0x224>
 80073ea:	4b37      	ldr	r3, [pc, #220]	@ (80074c8 <HAL_SPI_RxCpltCallback+0x2f0>)
 80073ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073f0:	4a3a      	ldr	r2, [pc, #232]	@ (80074dc <HAL_SPI_RxCpltCallback+0x304>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bfb8      	it	lt
 80073f6:	4613      	movlt	r3, r2
 80073f8:	b21b      	sxth	r3, r3
 80073fa:	e001      	b.n	8007400 <HAL_SPI_RxCpltCallback+0x228>
 80073fc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007400:	4a31      	ldr	r2, [pc, #196]	@ (80074c8 <HAL_SPI_RxCpltCallback+0x2f0>)
 8007402:	8013      	strh	r3, [r2, #0]
			wanted_pitch_rx = (wanted_pitch_rx >= 300) ? 300 : (wanted_pitch_rx <= -300) ? -300 : wanted_pitch_rx;
 8007404:	4b32      	ldr	r3, [pc, #200]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x2f8>)
 8007406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800740a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800740e:	da08      	bge.n	8007422 <HAL_SPI_RxCpltCallback+0x24a>
 8007410:	4b2f      	ldr	r3, [pc, #188]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x2f8>)
 8007412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007416:	4a31      	ldr	r2, [pc, #196]	@ (80074dc <HAL_SPI_RxCpltCallback+0x304>)
 8007418:	4293      	cmp	r3, r2
 800741a:	bfb8      	it	lt
 800741c:	4613      	movlt	r3, r2
 800741e:	b21b      	sxth	r3, r3
 8007420:	e001      	b.n	8007426 <HAL_SPI_RxCpltCallback+0x24e>
 8007422:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007426:	4a2a      	ldr	r2, [pc, #168]	@ (80074d0 <HAL_SPI_RxCpltCallback+0x2f8>)
 8007428:	8013      	strh	r3, [r2, #0]
			wanted_yaw_rx = (wanted_yaw_rx >= 300) ? 300 : (wanted_yaw_rx <= -300) ? -300 : wanted_yaw_rx;
 800742a:	4b2b      	ldr	r3, [pc, #172]	@ (80074d8 <HAL_SPI_RxCpltCallback+0x300>)
 800742c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007430:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8007434:	da08      	bge.n	8007448 <HAL_SPI_RxCpltCallback+0x270>
 8007436:	4b28      	ldr	r3, [pc, #160]	@ (80074d8 <HAL_SPI_RxCpltCallback+0x300>)
 8007438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800743c:	4a27      	ldr	r2, [pc, #156]	@ (80074dc <HAL_SPI_RxCpltCallback+0x304>)
 800743e:	4293      	cmp	r3, r2
 8007440:	bfb8      	it	lt
 8007442:	4613      	movlt	r3, r2
 8007444:	b21b      	sxth	r3, r3
 8007446:	e001      	b.n	800744c <HAL_SPI_RxCpltCallback+0x274>
 8007448:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800744c:	4a22      	ldr	r2, [pc, #136]	@ (80074d8 <HAL_SPI_RxCpltCallback+0x300>)
 800744e:	8013      	strh	r3, [r2, #0]

			NRF_TIM_Inte = 0;
 8007450:	4b23      	ldr	r3, [pc, #140]	@ (80074e0 <HAL_SPI_RxCpltCallback+0x308>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
		}

		if(loopnum > 0 && loopnum < 10){
 8007456:	4b0e      	ldr	r3, [pc, #56]	@ (8007490 <HAL_SPI_RxCpltCallback+0x2b8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d006      	beq.n	800746c <HAL_SPI_RxCpltCallback+0x294>
 800745e:	4b0c      	ldr	r3, [pc, #48]	@ (8007490 <HAL_SPI_RxCpltCallback+0x2b8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b09      	cmp	r3, #9
 8007464:	d802      	bhi.n	800746c <HAL_SPI_RxCpltCallback+0x294>
			MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 8007466:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <HAL_SPI_RxCpltCallback+0x2d0>)
 8007468:	2203      	movs	r2, #3
 800746a:	825a      	strh	r2, [r3, #18]
		}
		LED_Y_0;
 800746c:	2200      	movs	r2, #0
 800746e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007472:	4806      	ldr	r0, [pc, #24]	@ (800748c <HAL_SPI_RxCpltCallback+0x2b4>)
 8007474:	f006 ff6a 	bl	800e34c <HAL_GPIO_WritePin>
	}
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	0000007c 	.word	0x0000007c
 8007484:	000000fc 	.word	0x000000fc
 8007488:	58021000 	.word	0x58021000
 800748c:	58020400 	.word	0x58020400
 8007490:	00004204 	.word	0x00004204
 8007494:	0000420a 	.word	0x0000420a
 8007498:	00004208 	.word	0x00004208
 800749c:	000041f8 	.word	0x000041f8
 80074a0:	0000406c 	.word	0x0000406c
 80074a4:	0000420c 	.word	0x0000420c
 80074a8:	00000188 	.word	0x00000188
 80074ac:	58021800 	.word	0x58021800
 80074b0:	000041f4 	.word	0x000041f4
 80074b4:	24001ef0 	.word	0x24001ef0
 80074b8:	0801eb60 	.word	0x0801eb60
 80074bc:	24001eec 	.word	0x24001eec
 80074c0:	ffffd8f0 	.word	0xffffd8f0
 80074c4:	3f266666 	.word	0x3f266666
 80074c8:	0000405a 	.word	0x0000405a
 80074cc:	3f28f5c3 	.word	0x3f28f5c3
 80074d0:	00004058 	.word	0x00004058
 80074d4:	3f19999a 	.word	0x3f19999a
 80074d8:	0000405c 	.word	0x0000405c
 80074dc:	fffffed4 	.word	0xfffffed4
 80074e0:	00000080 	.word	0x00000080

080074e4 <convert_array_to_value>:

void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 80074e4:	b580      	push	{r7, lr}
 80074e6:	ed2d 8b04 	vpush	{d8-d9}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	460b      	mov	r3, r1
 80074f8:	71fb      	strb	r3, [r7, #7]
 80074fa:	4613      	mov	r3, r2
 80074fc:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2200      	movs	r2, #0
 8007502:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8007504:	79ba      	ldrb	r2, [r7, #6]
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	e02e      	b.n	8007570 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007518:	ee07 3a90 	vmov	s15, r3
 800751c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8007520:	79fa      	ldrb	r2, [r7, #7]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	4413      	add	r3, r2
 8007526:	461a      	mov	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	ee07 3a90 	vmov	s15, r3
 8007540:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007544:	eeb0 1b47 	vmov.f64	d1, d7
 8007548:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800754c:	f016 ff70 	bl	801e430 <pow>
 8007550:	eeb0 7b40 	vmov.f64	d7, d0
 8007554:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007558:	ee38 7b07 	vadd.f64	d7, d8, d7
 800755c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007560:	ee17 3a90 	vmov	r3, s15
 8007564:	b21a      	sxth	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	3301      	adds	r3, #1
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	429a      	cmp	r2, r3
 8007576:	dacc      	bge.n	8007512 <convert_array_to_value+0x2e>
	}

}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	ecbd 8b04 	vpop	{d8-d9}
 8007584:	bd80      	pop	{r7, pc}

08007586 <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007586:	b590      	push	{r4, r7, lr}
 8007588:	b087      	sub	sp, #28
 800758a:	af00      	add	r7, sp, #0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	4611      	mov	r1, r2
 8007590:	461a      	mov	r2, r3
 8007592:	4603      	mov	r3, r0
 8007594:	80fb      	strh	r3, [r7, #6]
 8007596:	460b      	mov	r3, r1
 8007598:	717b      	strb	r3, [r7, #5]
 800759a:	4613      	mov	r3, r2
 800759c:	713b      	strb	r3, [r7, #4]
	int x = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80075a6:	793a      	ldrb	r2, [r7, #4]
 80075a8:	797b      	ldrb	r3, [r7, #5]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	e03e      	b.n	8007632 <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 80075b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d028      	beq.n	800760e <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	4619      	mov	r1, r3
 80075c4:	200a      	movs	r0, #10
 80075c6:	f000 f83d 	bl	8007644 <potenga>
 80075ca:	4603      	mov	r3, r0
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	88fa      	ldrh	r2, [r7, #6]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	80fb      	strh	r3, [r7, #6]
			x++;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	3301      	adds	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 80075dc:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80075ee:	eeb0 1b47 	vmov.f64	d1, d7
 80075f2:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80075f6:	f016 ff1b 	bl	801e430 <pow>
 80075fa:	eeb0 7b40 	vmov.f64	d7, d0
 80075fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007602:	ee17 3a90 	vmov	r3, s15
 8007606:	b29b      	uxth	r3, r3
 8007608:	429c      	cmp	r4, r3
 800760a:	dad3      	bge.n	80075b4 <convert_value_to_array+0x2e>
 800760c:	e000      	b.n	8007610 <convert_value_to_array+0x8a>
				break;
 800760e:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8007610:	797a      	ldrb	r2, [r7, #5]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4413      	add	r3, r2
 8007616:	461a      	mov	r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	4413      	add	r3, r2
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	3301      	adds	r3, #1
 8007626:	613b      	str	r3, [r7, #16]
		x = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	429a      	cmp	r2, r3
 8007638:	dad0      	bge.n	80075dc <convert_value_to_array+0x56>
	}
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	bd90      	pop	{r4, r7, pc}

08007644 <potenga>:
uint32_t potenga(int a, int b){
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <potenga+0x18>
		return 1;
 8007658:	2301      	movs	r3, #1
 800765a:	e02d      	b.n	80076b8 <potenga+0x74>
	}
	if(b == 1){
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <potenga+0x22>
		return a;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	e028      	b.n	80076b8 <potenga+0x74>
	}
	if(b > 1){
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b01      	cmp	r3, #1
 800766a:	dd10      	ble.n	800768e <potenga+0x4a>
			for(int i = 1; i < b; i++){
 800766c:	2301      	movs	r3, #1
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	e007      	b.n	8007682 <potenga+0x3e>
			a = a*c;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	3301      	adds	r3, #1
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	dbf3      	blt.n	8007672 <potenga+0x2e>
		}
		return a;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	e014      	b.n	80076b8 <potenga+0x74>
	}
	if(b < 0){
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	da10      	bge.n	80076b6 <potenga+0x72>
		for(int i = 0; i < b; i++){
 8007694:	2300      	movs	r3, #0
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	e007      	b.n	80076aa <potenga+0x66>
			a = a/c;
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	fb92 f3f3 	sdiv	r3, r2, r3
 80076a2:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3301      	adds	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	dbf3      	blt.n	800769a <potenga+0x56>
		}
		return a;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	e000      	b.n	80076b8 <potenga+0x74>
	}
	return a;
 80076b6:	687b      	ldr	r3, [r7, #4]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 80076ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80076d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076da:	d504      	bpl.n	80076e6 <WartoscBezwgledna+0x22>
 80076dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80076e0:	eef1 7a67 	vneg.f32	s15, s15
 80076e4:	e001      	b.n	80076ea <WartoscBezwgledna+0x26>
 80076e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80076ea:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	ee07 3a90 	vmov	s15, r3
}
 80076f4:	eeb0 0a67 	vmov.f32	s0, s15
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
	...

08007704 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	71fb      	strb	r3, [r7, #7]
 800770e:	460b      	mov	r3, r1
 8007710:	71bb      	strb	r3, [r7, #6]
 8007712:	4613      	mov	r3, r2
 8007714:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8007716:	4b09      	ldr	r3, [pc, #36]	@ (800773c <RGB_LED_Set_color+0x38>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	797a      	ldrb	r2, [r7, #5]
 800771c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 800771e:	4b07      	ldr	r3, [pc, #28]	@ (800773c <RGB_LED_Set_color+0x38>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	79fa      	ldrb	r2, [r7, #7]
 8007724:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8007726:	4b05      	ldr	r3, [pc, #20]	@ (800773c <RGB_LED_Set_color+0x38>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	79ba      	ldrb	r2, [r7, #6]
 800772c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	24000380 	.word	0x24000380

08007740 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007758:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80077a8 <RGB_LED_For_BAT+0x68>
 800775c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007760:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80077b0 <RGB_LED_For_BAT+0x70>
 8007764:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800776c:	edc7 7a00 	vstr	s15, [r7]
 8007770:	783b      	ldrb	r3, [r7, #0]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	79fa      	ldrb	r2, [r7, #7]
 8007776:	ee07 2a90 	vmov	s15, r2
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007782:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80077a8 <RGB_LED_For_BAT+0x68>
 8007786:	ee27 7b06 	vmul.f64	d7, d7, d6
 800778a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800778e:	edc7 7a00 	vstr	s15, [r7]
 8007792:	783a      	ldrb	r2, [r7, #0]
 8007794:	b2d1      	uxtb	r1, r2
 8007796:	2200      	movs	r2, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff ffb3 	bl	8007704 <RGB_LED_Set_color>
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	66666666 	.word	0x66666666
 80077ac:	40046666 	.word	0x40046666
 80077b0:	00000000 	.word	0x00000000
 80077b4:	406fe000 	.word	0x406fe000

080077b8 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6039      	str	r1, [r7, #0]
 80077c0:	4611      	mov	r1, r2
 80077c2:	461a      	mov	r2, r3
 80077c4:	4603      	mov	r3, r0
 80077c6:	80fb      	strh	r3, [r7, #6]
 80077c8:	460b      	mov	r3, r1
 80077ca:	717b      	strb	r3, [r7, #5]
 80077cc:	4613      	mov	r3, r2
 80077ce:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80077d8:	793a      	ldrb	r2, [r7, #4]
 80077da:	797b      	ldrb	r3, [r7, #5]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 80077e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	da04      	bge.n	80077f2 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 80077e8:	797b      	ldrb	r3, [r7, #5]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	4413      	add	r3, r2
 80077ee:	222d      	movs	r2, #45	@ 0x2d
 80077f0:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 80077f2:	2301      	movs	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e035      	b.n	8007864 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 80077f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01d      	beq.n	800783c <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	4619      	mov	r1, r3
 8007808:	200a      	movs	r0, #10
 800780a:	f7ff ff1b 	bl	8007644 <potenga>
 800780e:	4603      	mov	r3, r0
 8007810:	b29b      	uxth	r3, r3
 8007812:	88fa      	ldrh	r2, [r7, #6]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	b29b      	uxth	r3, r3
 8007818:	80fb      	strh	r3, [r7, #6]
			x++;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	3301      	adds	r3, #1
 800781e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007820:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	4619      	mov	r1, r3
 800782c:	200a      	movs	r0, #10
 800782e:	f7ff ff09 	bl	8007644 <potenga>
 8007832:	4603      	mov	r3, r0
 8007834:	b29b      	uxth	r3, r3
 8007836:	429c      	cmp	r4, r3
 8007838:	dade      	bge.n	80077f8 <convert_value_to_array2+0x40>
 800783a:	e000      	b.n	800783e <convert_value_to_array2+0x86>
				break;
 800783c:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	7979      	ldrb	r1, [r7, #5]
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	440b      	add	r3, r1
 8007848:	4619      	mov	r1, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	440b      	add	r3, r1
 800784e:	3230      	adds	r2, #48	@ 0x30
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	3301      	adds	r3, #1
 8007858:	613b      	str	r3, [r7, #16]
		x = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	429a      	cmp	r2, r3
 800786a:	dad9      	bge.n	8007820 <convert_value_to_array2+0x68>
	}
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	bd90      	pop	{r4, r7, pc}

08007876 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007876:	b580      	push	{r7, lr}
 8007878:	ed2d 8b02 	vpush	{d8}
 800787c:	b08c      	sub	sp, #48	@ 0x30
 800787e:	af00      	add	r7, sp, #0
 8007880:	ed87 0a03 	vstr	s0, [r7, #12]
 8007884:	60b8      	str	r0, [r7, #8]
 8007886:	460b      	mov	r3, r1
 8007888:	71fb      	strb	r3, [r7, #7]
 800788a:	4613      	mov	r3, r2
 800788c:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 8007896:	79ba      	ldrb	r2, [r7, #6]
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80078a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80078a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ae:	d50a      	bpl.n	80078c6 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4413      	add	r3, r2
 80078b6:	222d      	movs	r2, #45	@ 0x2d
 80078b8:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 80078ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80078be:	eef1 7a67 	vneg.f32	s15, s15
 80078c2:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 80078c6:	2301      	movs	r3, #1
 80078c8:	61fb      	str	r3, [r7, #28]
 80078ca:	e021      	b.n	8007910 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80078da:	eeb0 1b47 	vmov.f64	d1, d7
 80078de:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80078e2:	f016 fda5 	bl	801e430 <pow>
 80078e6:	eeb0 7b40 	vmov.f64	d7, d0
 80078ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80078ee:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 80078f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80078f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80078fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007902:	da0b      	bge.n	800791c <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	3301      	adds	r3, #1
 8007908:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	3301      	adds	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	429a      	cmp	r2, r3
 8007918:	dbd8      	blt.n	80078cc <convert_value_to_array3+0x56>
 800791a:	e000      	b.n	800791e <convert_value_to_array3+0xa8>
			break;
 800791c:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	2b00      	cmp	r3, #0
 800792c:	dc07      	bgt.n	800793e <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	3301      	adds	r3, #1
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	4413      	add	r3, r2
 8007936:	222e      	movs	r2, #46	@ 0x2e
 8007938:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 800793a:	2301      	movs	r3, #1
 800793c:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	2b00      	cmp	r3, #0
 8007942:	dd0a      	ble.n	800795a <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 8007944:	79fa      	ldrb	r2, [r7, #7]
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	4413      	add	r3, r2
 800794a:	3301      	adds	r3, #1
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	4413      	add	r3, r2
 8007950:	222e      	movs	r2, #46	@ 0x2e
 8007952:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	3301      	adds	r3, #1
 8007958:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 800795a:	edd7 7a03 	vldr	s15, [r7, #12]
 800795e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	1e5a      	subs	r2, r3, #1
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007972:	eeb0 1b47 	vmov.f64	d1, d7
 8007976:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800797a:	f016 fd59 	bl	801e430 <pow>
 800797e:	eeb0 7b40 	vmov.f64	d7, d0
 8007982:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007986:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800798a:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800798e:	2300      	movs	r3, #0
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	e05f      	b.n	8007a54 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 8007994:	edd7 7a03 	vldr	s15, [r7, #12]
 8007998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800799c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a0:	d93d      	bls.n	8007a1e <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80079a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80079a6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	1e5a      	subs	r2, r3, #1
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079ba:	eeb0 1b47 	vmov.f64	d1, d7
 80079be:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80079c2:	f016 fd35 	bl	801e430 <pow>
 80079c6:	eeb0 7b40 	vmov.f64	d7, d0
 80079ca:	ee38 7b47 	vsub.f64	d7, d8, d7
 80079ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80079d2:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 80079d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d8:	3301      	adds	r3, #1
 80079da:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	1e5a      	subs	r2, r3, #1
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079ec:	eeb0 1b47 	vmov.f64	d1, d7
 80079f0:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80079f4:	f016 fd1c 	bl	801e430 <pow>
 80079f8:	eeb0 7b40 	vmov.f64	d7, d0
 80079fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007a00:	ee17 3a90 	vmov	r3, s15
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1a:	dabb      	bge.n	8007994 <convert_value_to_array3+0x11e>
 8007a1c:	e000      	b.n	8007a20 <convert_value_to_array3+0x1aa>
				break;
 8007a1e:	bf00      	nop
		}

        if(loopnum == kropka){
 8007a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d102      	bne.n	8007a2e <convert_value_to_array3+0x1b8>
            loopnum++;
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	79f9      	ldrb	r1, [r7, #7]
 8007a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a36:	440b      	add	r3, r1
 8007a38:	4619      	mov	r1, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3230      	adds	r2, #48	@ 0x30
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	3301      	adds	r3, #1
 8007a48:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	3301      	adds	r3, #1
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	3b02      	subs	r3, #2
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	dbbe      	blt.n	80079dc <convert_value_to_array3+0x166>
	}
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3730      	adds	r7, #48	@ 0x30
 8007a64:	46bd      	mov	sp, r7
 8007a66:	ecbd 8b02 	vpop	{d8}
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 8007a74:	4ba6      	ldr	r3, [pc, #664]	@ (8007d10 <uSD_Card_SendData_To_Buffer+0x2a4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	b218      	sxth	r0, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	01db      	lsls	r3, r3, #7
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	01db      	lsls	r3, r3, #7
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	49a1      	ldr	r1, [pc, #644]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a90:	f7ff fe92 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	01db      	lsls	r3, r3, #7
 8007a98:	3308      	adds	r3, #8
 8007a9a:	4a9e      	ldr	r2, [pc, #632]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a9c:	2120      	movs	r1, #32
 8007a9e:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007aa0:	4b9d      	ldr	r3, [pc, #628]	@ (8007d18 <uSD_Card_SendData_To_Buffer+0x2ac>)
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b218      	sxth	r0, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	01db      	lsls	r3, r3, #7
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	3309      	adds	r3, #9
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	01db      	lsls	r3, r3, #7
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	330f      	adds	r3, #15
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	4995      	ldr	r1, [pc, #596]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ac0:	f7ff fe7a 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	01db      	lsls	r3, r3, #7
 8007ac8:	330f      	adds	r3, #15
 8007aca:	4a92      	ldr	r2, [pc, #584]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007acc:	2120      	movs	r1, #32
 8007ace:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007ad0:	4b92      	ldr	r3, [pc, #584]	@ (8007d1c <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b218      	sxth	r0, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	01db      	lsls	r3, r3, #7
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	3310      	adds	r3, #16
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	01db      	lsls	r3, r3, #7
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	3316      	adds	r3, #22
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	4989      	ldr	r1, [pc, #548]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007af0:	f7ff fe62 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	01db      	lsls	r3, r3, #7
 8007af8:	3316      	adds	r3, #22
 8007afa:	4a86      	ldr	r2, [pc, #536]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007afc:	2120      	movs	r1, #32
 8007afe:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007b00:	4b87      	ldr	r3, [pc, #540]	@ (8007d20 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b218      	sxth	r0, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	01db      	lsls	r3, r3, #7
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	3317      	adds	r3, #23
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	01db      	lsls	r3, r3, #7
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	331d      	adds	r3, #29
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	497d      	ldr	r1, [pc, #500]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b20:	f7ff fe4a 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	01db      	lsls	r3, r3, #7
 8007b28:	331d      	adds	r3, #29
 8007b2a:	4a7a      	ldr	r2, [pc, #488]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b2c:	2120      	movs	r1, #32
 8007b2e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007b30:	4b7c      	ldr	r3, [pc, #496]	@ (8007d24 <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b218      	sxth	r0, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	01db      	lsls	r3, r3, #7
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	331e      	adds	r3, #30
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	01db      	lsls	r3, r3, #7
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	3324      	adds	r3, #36	@ 0x24
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	4971      	ldr	r1, [pc, #452]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b50:	f7ff fe32 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	01db      	lsls	r3, r3, #7
 8007b58:	3324      	adds	r3, #36	@ 0x24
 8007b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b5c:	2120      	movs	r1, #32
 8007b5e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007b60:	4b71      	ldr	r3, [pc, #452]	@ (8007d28 <uSD_Card_SendData_To_Buffer+0x2bc>)
 8007b62:	edd3 7a00 	vldr	s15, [r3]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	01db      	lsls	r3, r3, #7
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	3325      	adds	r3, #37	@ 0x25
 8007b70:	b2d9      	uxtb	r1, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	01db      	lsls	r3, r3, #7
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	332d      	adds	r3, #45	@ 0x2d
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	461a      	mov	r2, r3
 8007b80:	4864      	ldr	r0, [pc, #400]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b82:	eeb0 0a67 	vmov.f32	s0, s15
 8007b86:	f7ff fe76 	bl	8007876 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	01db      	lsls	r3, r3, #7
 8007b8e:	332d      	adds	r3, #45	@ 0x2d
 8007b90:	4a60      	ldr	r2, [pc, #384]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b92:	2120      	movs	r1, #32
 8007b94:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 8007b96:	4b65      	ldr	r3, [pc, #404]	@ (8007d2c <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007b98:	edd3 7a00 	vldr	s15, [r3]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	01db      	lsls	r3, r3, #7
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	332e      	adds	r3, #46	@ 0x2e
 8007ba6:	b2d9      	uxtb	r1, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	01db      	lsls	r3, r3, #7
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	3336      	adds	r3, #54	@ 0x36
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4857      	ldr	r0, [pc, #348]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8007bbc:	f7ff fe5b 	bl	8007876 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	01db      	lsls	r3, r3, #7
 8007bc4:	3336      	adds	r3, #54	@ 0x36
 8007bc6:	4a53      	ldr	r2, [pc, #332]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007bc8:	2120      	movs	r1, #32
 8007bca:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 8007bcc:	4b58      	ldr	r3, [pc, #352]	@ (8007d30 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007bce:	edd3 7a00 	vldr	s15, [r3]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	01db      	lsls	r3, r3, #7
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	3337      	adds	r3, #55	@ 0x37
 8007bdc:	b2d9      	uxtb	r1, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	01db      	lsls	r3, r3, #7
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	333f      	adds	r3, #63	@ 0x3f
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	461a      	mov	r2, r3
 8007bec:	4849      	ldr	r0, [pc, #292]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007bee:	eeb0 0a67 	vmov.f32	s0, s15
 8007bf2:	f7ff fe40 	bl	8007876 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	01db      	lsls	r3, r3, #7
 8007bfa:	333f      	adds	r3, #63	@ 0x3f
 8007bfc:	4a45      	ldr	r2, [pc, #276]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007bfe:	2120      	movs	r1, #32
 8007c00:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007c02:	4b4c      	ldr	r3, [pc, #304]	@ (8007d34 <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	b218      	sxth	r0, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	01db      	lsls	r3, r3, #7
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	3340      	adds	r3, #64	@ 0x40
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	01db      	lsls	r3, r3, #7
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	3348      	adds	r3, #72	@ 0x48
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	493c      	ldr	r1, [pc, #240]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c22:	f7ff fdc9 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	01db      	lsls	r3, r3, #7
 8007c2a:	3348      	adds	r3, #72	@ 0x48
 8007c2c:	4a39      	ldr	r2, [pc, #228]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c2e:	2120      	movs	r1, #32
 8007c30:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007c32:	4b41      	ldr	r3, [pc, #260]	@ (8007d38 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	b218      	sxth	r0, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	01db      	lsls	r3, r3, #7
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	3349      	adds	r3, #73	@ 0x49
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	01db      	lsls	r3, r3, #7
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	3351      	adds	r3, #81	@ 0x51
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	4930      	ldr	r1, [pc, #192]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c52:	f7ff fdb1 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	01db      	lsls	r3, r3, #7
 8007c5a:	3351      	adds	r3, #81	@ 0x51
 8007c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c5e:	2120      	movs	r1, #32
 8007c60:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007c62:	4b36      	ldr	r3, [pc, #216]	@ (8007d3c <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	b218      	sxth	r0, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	01db      	lsls	r3, r3, #7
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	3352      	adds	r3, #82	@ 0x52
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	01db      	lsls	r3, r3, #7
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	335a      	adds	r3, #90	@ 0x5a
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	4924      	ldr	r1, [pc, #144]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c82:	f7ff fd99 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	01db      	lsls	r3, r3, #7
 8007c8a:	335a      	adds	r3, #90	@ 0x5a
 8007c8c:	4a21      	ldr	r2, [pc, #132]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007c8e:	2120      	movs	r1, #32
 8007c90:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007c92:	4b2b      	ldr	r3, [pc, #172]	@ (8007d40 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007c94:	edd3 7a00 	vldr	s15, [r3]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	01db      	lsls	r3, r3, #7
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	335b      	adds	r3, #91	@ 0x5b
 8007ca2:	b2d9      	uxtb	r1, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	01db      	lsls	r3, r3, #7
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	3362      	adds	r3, #98	@ 0x62
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4818      	ldr	r0, [pc, #96]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8007cb8:	f7ff fddd 	bl	8007876 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	01db      	lsls	r3, r3, #7
 8007cc0:	3362      	adds	r3, #98	@ 0x62
 8007cc2:	4a14      	ldr	r2, [pc, #80]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007cc4:	2120      	movs	r1, #32
 8007cc6:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8007d40 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007cca:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	01db      	lsls	r3, r3, #7
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	3363      	adds	r3, #99	@ 0x63
 8007cd8:	b2d9      	uxtb	r1, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	01db      	lsls	r3, r3, #7
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	336a      	adds	r3, #106	@ 0x6a
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	480a      	ldr	r0, [pc, #40]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007cea:	eeb0 0a67 	vmov.f32	s0, s15
 8007cee:	f7ff fdc2 	bl	8007876 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	01db      	lsls	r3, r3, #7
 8007cf6:	336a      	adds	r3, #106	@ 0x6a
 8007cf8:	4a06      	ldr	r2, [pc, #24]	@ (8007d14 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007cfa:	2120      	movs	r1, #32
 8007cfc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007cfe:	4b10      	ldr	r3, [pc, #64]	@ (8007d40 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007d00:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	01db      	lsls	r3, r3, #7
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	336b      	adds	r3, #107	@ 0x6b
 8007d0e:	e019      	b.n	8007d44 <uSD_Card_SendData_To_Buffer+0x2d8>
 8007d10:	000041ec 	.word	0x000041ec
 8007d14:	24002f28 	.word	0x24002f28
 8007d18:	000041b4 	.word	0x000041b4
 8007d1c:	000041b6 	.word	0x000041b6
 8007d20:	000041b8 	.word	0x000041b8
 8007d24:	000041ba 	.word	0x000041ba
 8007d28:	0000407c 	.word	0x0000407c
 8007d2c:	00004078 	.word	0x00004078
 8007d30:	00004080 	.word	0x00004080
 8007d34:	000040c4 	.word	0x000040c4
 8007d38:	000040c8 	.word	0x000040c8
 8007d3c:	000040cc 	.word	0x000040cc
 8007d40:	00000084 	.word	0x00000084
 8007d44:	b2d9      	uxtb	r1, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	01db      	lsls	r3, r3, #7
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	3372      	adds	r3, #114	@ 0x72
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	461a      	mov	r2, r3
 8007d54:	482d      	ldr	r0, [pc, #180]	@ (8007e0c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007d56:	eeb0 0a67 	vmov.f32	s0, s15
 8007d5a:	f7ff fd8c 	bl	8007876 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	01db      	lsls	r3, r3, #7
 8007d62:	3372      	adds	r3, #114	@ 0x72
 8007d64:	4a29      	ldr	r2, [pc, #164]	@ (8007e0c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007d66:	2120      	movs	r1, #32
 8007d68:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007d6a:	4b29      	ldr	r3, [pc, #164]	@ (8007e10 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b218      	sxth	r0, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	01db      	lsls	r3, r3, #7
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	3373      	adds	r3, #115	@ 0x73
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	01db      	lsls	r3, r3, #7
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	3377      	adds	r3, #119	@ 0x77
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	4920      	ldr	r1, [pc, #128]	@ (8007e0c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007d8a:	f7ff fd15 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	01db      	lsls	r3, r3, #7
 8007d92:	3377      	adds	r3, #119	@ 0x77
 8007d94:	4a1d      	ldr	r2, [pc, #116]	@ (8007e0c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007d96:	2120      	movs	r1, #32
 8007d98:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8007e10 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007d9c:	8a5b      	ldrh	r3, [r3, #18]
 8007d9e:	b218      	sxth	r0, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	01db      	lsls	r3, r3, #7
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	3378      	adds	r3, #120	@ 0x78
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	01db      	lsls	r3, r3, #7
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	337a      	adds	r3, #122	@ 0x7a
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	4914      	ldr	r1, [pc, #80]	@ (8007e0c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007dba:	f7ff fcfd 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	01db      	lsls	r3, r3, #7
 8007dc2:	337a      	adds	r3, #122	@ 0x7a
 8007dc4:	4a11      	ldr	r2, [pc, #68]	@ (8007e0c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007dc6:	2120      	movs	r1, #32
 8007dc8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007dca:	4b12      	ldr	r3, [pc, #72]	@ (8007e14 <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007dcc:	edd3 7a00 	vldr	s15, [r3]
 8007dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dd4:	ee17 3a90 	vmov	r3, s15
 8007dd8:	b218      	sxth	r0, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	01db      	lsls	r3, r3, #7
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	337b      	adds	r3, #123	@ 0x7b
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	01db      	lsls	r3, r3, #7
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	337f      	adds	r3, #127	@ 0x7f
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	4906      	ldr	r1, [pc, #24]	@ (8007e0c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007df4:	f7ff fce0 	bl	80077b8 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	01db      	lsls	r3, r3, #7
 8007dfe:	4a03      	ldr	r2, [pc, #12]	@ (8007e0c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007e00:	210a      	movs	r1, #10
 8007e02:	54d1      	strb	r1, [r2, r3]
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	24002f28 	.word	0x24002f28
 8007e10:	00000188 	.word	0x00000188
 8007e14:	00000054 	.word	0x00000054

08007e18 <Stack_Push>:

void Stack_Push(float data){
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007e22:	4b22      	ldr	r3, [pc, #136]	@ (8007eac <Stack_Push+0x94>)
 8007e24:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e28:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	4b1e      	ldr	r3, [pc, #120]	@ (8007eac <Stack_Push+0x94>)
 8007e32:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e36:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007eac <Stack_Push+0x94>)
 8007e3c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e40:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007e44:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007e48:	d105      	bne.n	8007e56 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007e4a:	4b18      	ldr	r3, [pc, #96]	@ (8007eac <Stack_Push+0x94>)
 8007e4c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007e56:	4b15      	ldr	r3, [pc, #84]	@ (8007eac <Stack_Push+0x94>)
 8007e58:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e5c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007e60:	4a12      	ldr	r2, [pc, #72]	@ (8007eac <Stack_Push+0x94>)
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007e6a:	4b10      	ldr	r3, [pc, #64]	@ (8007eac <Stack_Push+0x94>)
 8007e6c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e70:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007e74:	3301      	adds	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	4b0c      	ldr	r3, [pc, #48]	@ (8007eac <Stack_Push+0x94>)
 8007e7a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e7e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007e82:	4b0a      	ldr	r3, [pc, #40]	@ (8007eac <Stack_Push+0x94>)
 8007e84:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e88:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007e8c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007e90:	d105      	bne.n	8007e9e <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007e92:	4b06      	ldr	r3, [pc, #24]	@ (8007eac <Stack_Push+0x94>)
 8007e94:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	000001ac 	.word	0x000001ac

08007eb0 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007eb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ecc <ROOL_MAX_VAL+0x1c>)
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007ebc:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	00000188 	.word	0x00000188

08007ed0 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <ROOL_MIN_VAL+0x18>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007edc:	4b03      	ldr	r3, [pc, #12]	@ (8007eec <ROOL_MIN_VAL+0x1c>)
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	00000188 	.word	0x00000188
 8007eec:	ffffec78 	.word	0xffffec78

08007ef0 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007ef4:	4b05      	ldr	r3, [pc, #20]	@ (8007f0c <PITCH_MAX_VAL+0x1c>)
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007efc:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	00000188 	.word	0x00000188

08007f10 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007f10:	b480      	push	{r7}
 8007f12:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007f14:	4b04      	ldr	r3, [pc, #16]	@ (8007f28 <PITCH_MIN_VAL+0x18>)
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007f1c:	4b03      	ldr	r3, [pc, #12]	@ (8007f2c <PITCH_MIN_VAL+0x1c>)
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	00000188 	.word	0x00000188
 8007f2c:	ffffec78 	.word	0xffffec78

08007f30 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007f34:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <YAW_MAX_VAL+0x1c>)
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007f3c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	00000188 	.word	0x00000188

08007f50 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007f54:	4b04      	ldr	r3, [pc, #16]	@ (8007f68 <YAW_MIN_VAL+0x18>)
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007f5c:	4b03      	ldr	r3, [pc, #12]	@ (8007f6c <YAW_MIN_VAL+0x1c>)
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	00000188 	.word	0x00000188
 8007f6c:	ffffec78 	.word	0xffffec78

08007f70 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007f74:	4b08      	ldr	r3, [pc, #32]	@ (8007f98 <ROOL_GOOD_VAL+0x28>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007f7c:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <ROOL_GOOD_VAL+0x2c>)
 8007f7e:	edd3 7a00 	vldr	s15, [r3]
 8007f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f86:	ee17 3a90 	vmov	r3, s15
 8007f8a:	b21b      	sxth	r3, r3
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	00000188 	.word	0x00000188
 8007f9c:	000040f0 	.word	0x000040f0

08007fa0 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007fa4:	4b08      	ldr	r3, [pc, #32]	@ (8007fc8 <PITCH_GOOD_VAL+0x28>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007fac:	4b07      	ldr	r3, [pc, #28]	@ (8007fcc <PITCH_GOOD_VAL+0x2c>)
 8007fae:	edd3 7a00 	vldr	s15, [r3]
 8007fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fb6:	ee17 3a90 	vmov	r3, s15
 8007fba:	b21b      	sxth	r3, r3
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	00000188 	.word	0x00000188
 8007fcc:	000040e8 	.word	0x000040e8

08007fd0 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007fd4:	4b08      	ldr	r3, [pc, #32]	@ (8007ff8 <YAW_GOOD_VAL+0x28>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007fdc:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <YAW_GOOD_VAL+0x2c>)
 8007fde:	edd3 7a00 	vldr	s15, [r3]
 8007fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fe6:	ee17 3a90 	vmov	r3, s15
 8007fea:	b21b      	sxth	r3, r3
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	00000188 	.word	0x00000188
 8007ffc:	000040ec 	.word	0x000040ec

08008000 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8008006:	463b      	mov	r3, r7
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	609a      	str	r2, [r3, #8]
 8008010:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8008012:	f003 f911 	bl	800b238 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008016:	2301      	movs	r3, #1
 8008018:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800801a:	2300      	movs	r3, #0
 800801c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800801e:	2300      	movs	r3, #0
 8008020:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8008022:	231f      	movs	r3, #31
 8008024:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8008026:	2387      	movs	r3, #135	@ 0x87
 8008028:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800802a:	2300      	movs	r3, #0
 800802c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800802e:	2300      	movs	r3, #0
 8008030:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8008032:	2301      	movs	r3, #1
 8008034:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008036:	2301      	movs	r3, #1
 8008038:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800803a:	2300      	movs	r3, #0
 800803c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008042:	463b      	mov	r3, r7
 8008044:	4618      	mov	r0, r3
 8008046:	f003 f92f 	bl	800b2a8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800804a:	2004      	movs	r0, #4
 800804c:	f003 f90c 	bl	800b268 <HAL_MPU_Enable>

}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800805c:	b672      	cpsid	i
}
 800805e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008060:	bf00      	nop
 8008062:	e7fd      	b.n	8008060 <Error_Handler+0x8>

08008064 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008068:	4b27      	ldr	r3, [pc, #156]	@ (8008108 <MX_SPI1_Init+0xa4>)
 800806a:	4a28      	ldr	r2, [pc, #160]	@ (800810c <MX_SPI1_Init+0xa8>)
 800806c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800806e:	4b26      	ldr	r3, [pc, #152]	@ (8008108 <MX_SPI1_Init+0xa4>)
 8008070:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8008074:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008076:	4b24      	ldr	r3, [pc, #144]	@ (8008108 <MX_SPI1_Init+0xa4>)
 8008078:	2200      	movs	r2, #0
 800807a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800807c:	4b22      	ldr	r3, [pc, #136]	@ (8008108 <MX_SPI1_Init+0xa4>)
 800807e:	2207      	movs	r2, #7
 8008080:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008082:	4b21      	ldr	r3, [pc, #132]	@ (8008108 <MX_SPI1_Init+0xa4>)
 8008084:	2200      	movs	r2, #0
 8008086:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008088:	4b1f      	ldr	r3, [pc, #124]	@ (8008108 <MX_SPI1_Init+0xa4>)
 800808a:	2200      	movs	r2, #0
 800808c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800808e:	4b1e      	ldr	r3, [pc, #120]	@ (8008108 <MX_SPI1_Init+0xa4>)
 8008090:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008094:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008096:	4b1c      	ldr	r3, [pc, #112]	@ (8008108 <MX_SPI1_Init+0xa4>)
 8008098:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800809c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800809e:	4b1a      	ldr	r3, [pc, #104]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80080a4:	4b18      	ldr	r3, [pc, #96]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080aa:	4b17      	ldr	r3, [pc, #92]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80080b0:	4b15      	ldr	r3, [pc, #84]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80080b6:	4b14      	ldr	r3, [pc, #80]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80080bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80080be:	4b12      	ldr	r3, [pc, #72]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80080c4:	4b10      	ldr	r3, [pc, #64]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80080ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80080d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80080d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080d8:	2200      	movs	r2, #0
 80080da:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80080dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080de:	2200      	movs	r2, #0
 80080e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80080e2:	4b09      	ldr	r3, [pc, #36]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80080e8:	4b07      	ldr	r3, [pc, #28]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80080ee:	4b06      	ldr	r3, [pc, #24]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80080f4:	4804      	ldr	r0, [pc, #16]	@ (8008108 <MX_SPI1_Init+0xa4>)
 80080f6:	f00c f961 	bl	80143bc <HAL_SPI_Init>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8008100:	f7ff ffaa 	bl	8008058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008104:	bf00      	nop
 8008106:	bd80      	pop	{r7, pc}
 8008108:	240001ec 	.word	0x240001ec
 800810c:	40013000 	.word	0x40013000

08008110 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8008114:	4b27      	ldr	r3, [pc, #156]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008116:	4a28      	ldr	r2, [pc, #160]	@ (80081b8 <MX_SPI2_Init+0xa8>)
 8008118:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800811a:	4b26      	ldr	r3, [pc, #152]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800811c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8008120:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008122:	4b24      	ldr	r3, [pc, #144]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008124:	2200      	movs	r2, #0
 8008126:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008128:	4b22      	ldr	r3, [pc, #136]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800812a:	2207      	movs	r2, #7
 800812c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800812e:	4b21      	ldr	r3, [pc, #132]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008130:	2200      	movs	r2, #0
 8008132:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008134:	4b1f      	ldr	r3, [pc, #124]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008136:	2200      	movs	r2, #0
 8008138:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800813a:	4b1e      	ldr	r3, [pc, #120]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800813c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008140:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008142:	4b1c      	ldr	r3, [pc, #112]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008144:	2200      	movs	r2, #0
 8008146:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008148:	4b1a      	ldr	r3, [pc, #104]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800814a:	2200      	movs	r2, #0
 800814c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800814e:	4b19      	ldr	r3, [pc, #100]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008150:	2200      	movs	r2, #0
 8008152:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008154:	4b17      	ldr	r3, [pc, #92]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008156:	2200      	movs	r2, #0
 8008158:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800815a:	4b16      	ldr	r3, [pc, #88]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800815c:	2200      	movs	r2, #0
 800815e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008160:	4b14      	ldr	r3, [pc, #80]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008166:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008168:	4b12      	ldr	r3, [pc, #72]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800816a:	2200      	movs	r2, #0
 800816c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800816e:	4b11      	ldr	r3, [pc, #68]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008170:	2200      	movs	r2, #0
 8008172:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008174:	4b0f      	ldr	r3, [pc, #60]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008176:	2200      	movs	r2, #0
 8008178:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800817a:	4b0e      	ldr	r3, [pc, #56]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800817c:	2200      	movs	r2, #0
 800817e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008180:	4b0c      	ldr	r3, [pc, #48]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008182:	2200      	movs	r2, #0
 8008184:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008186:	4b0b      	ldr	r3, [pc, #44]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008188:	2200      	movs	r2, #0
 800818a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800818c:	4b09      	ldr	r3, [pc, #36]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800818e:	2200      	movs	r2, #0
 8008190:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8008192:	4b08      	ldr	r3, [pc, #32]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 8008194:	2200      	movs	r2, #0
 8008196:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008198:	4b06      	ldr	r3, [pc, #24]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 800819a:	2200      	movs	r2, #0
 800819c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800819e:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <MX_SPI2_Init+0xa4>)
 80081a0:	f00c f90c 	bl	80143bc <HAL_SPI_Init>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80081aa:	f7ff ff55 	bl	8008058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	24000274 	.word	0x24000274
 80081b8:	40003800 	.word	0x40003800

080081bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08c      	sub	sp, #48	@ 0x30
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c4:	f107 031c 	add.w	r3, r7, #28
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	609a      	str	r2, [r3, #8]
 80081d0:	60da      	str	r2, [r3, #12]
 80081d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a60      	ldr	r2, [pc, #384]	@ (800835c <HAL_SPI_MspInit+0x1a0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d136      	bne.n	800824c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80081de:	4b60      	ldr	r3, [pc, #384]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 80081e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081e4:	4a5e      	ldr	r2, [pc, #376]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 80081e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80081ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80081ee:	4b5c      	ldr	r3, [pc, #368]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 80081f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081f8:	61bb      	str	r3, [r7, #24]
 80081fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081fc:	4b58      	ldr	r3, [pc, #352]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 80081fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008202:	4a57      	ldr	r2, [pc, #348]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 8008204:	f043 0302 	orr.w	r3, r3, #2
 8008208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800820c:	4b54      	ldr	r3, [pc, #336]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 800820e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800821a:	2338      	movs	r3, #56	@ 0x38
 800821c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800821e:	2302      	movs	r3, #2
 8008220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008222:	2300      	movs	r3, #0
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008226:	2300      	movs	r3, #0
 8008228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800822a:	2305      	movs	r3, #5
 800822c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800822e:	f107 031c 	add.w	r3, r7, #28
 8008232:	4619      	mov	r1, r3
 8008234:	484b      	ldr	r0, [pc, #300]	@ (8008364 <HAL_SPI_MspInit+0x1a8>)
 8008236:	f005 fec9 	bl	800dfcc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	2023      	movs	r0, #35	@ 0x23
 8008240:	f002 ffc5 	bl	800b1ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008244:	2023      	movs	r0, #35	@ 0x23
 8008246:	f002 ffdc 	bl	800b202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800824a:	e082      	b.n	8008352 <HAL_SPI_MspInit+0x196>
  else if(spiHandle->Instance==SPI2)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a45      	ldr	r2, [pc, #276]	@ (8008368 <HAL_SPI_MspInit+0x1ac>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d17d      	bne.n	8008352 <HAL_SPI_MspInit+0x196>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008256:	4b42      	ldr	r3, [pc, #264]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 8008258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800825c:	4a40      	ldr	r2, [pc, #256]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 800825e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008262:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008266:	4b3e      	ldr	r3, [pc, #248]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 8008268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800826c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008274:	4b3a      	ldr	r3, [pc, #232]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 8008276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800827a:	4a39      	ldr	r2, [pc, #228]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 800827c:	f043 0302 	orr.w	r3, r3, #2
 8008280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008284:	4b36      	ldr	r3, [pc, #216]	@ (8008360 <HAL_SPI_MspInit+0x1a4>)
 8008286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008292:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008298:	2302      	movs	r3, #2
 800829a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829c:	2300      	movs	r3, #0
 800829e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80082a0:	2301      	movs	r3, #1
 80082a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80082a4:	2305      	movs	r3, #5
 80082a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082a8:	f107 031c 	add.w	r3, r7, #28
 80082ac:	4619      	mov	r1, r3
 80082ae:	482d      	ldr	r0, [pc, #180]	@ (8008364 <HAL_SPI_MspInit+0x1a8>)
 80082b0:	f005 fe8c 	bl	800dfcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80082b4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80082b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ba:	2302      	movs	r3, #2
 80082bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082be:	2301      	movs	r3, #1
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80082c2:	2301      	movs	r3, #1
 80082c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80082c6:	2305      	movs	r3, #5
 80082c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082ca:	f107 031c 	add.w	r3, r7, #28
 80082ce:	4619      	mov	r1, r3
 80082d0:	4824      	ldr	r0, [pc, #144]	@ (8008364 <HAL_SPI_MspInit+0x1a8>)
 80082d2:	f005 fe7b 	bl	800dfcc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream0;
 80082d6:	4b25      	ldr	r3, [pc, #148]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 80082d8:	4a25      	ldr	r2, [pc, #148]	@ (8008370 <HAL_SPI_MspInit+0x1b4>)
 80082da:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80082dc:	4b23      	ldr	r3, [pc, #140]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 80082de:	2228      	movs	r2, #40	@ 0x28
 80082e0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80082e2:	4b22      	ldr	r3, [pc, #136]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 80082e4:	2240      	movs	r2, #64	@ 0x40
 80082e6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082e8:	4b20      	ldr	r3, [pc, #128]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80082ee:	4b1f      	ldr	r3, [pc, #124]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 80082f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80082f4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082f6:	4b1d      	ldr	r3, [pc, #116]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082fc:	4b1b      	ldr	r3, [pc, #108]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 80082fe:	2200      	movs	r2, #0
 8008300:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8008302:	4b1a      	ldr	r3, [pc, #104]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 8008304:	2200      	movs	r2, #0
 8008306:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008308:	4b18      	ldr	r3, [pc, #96]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 800830a:	2200      	movs	r2, #0
 800830c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800830e:	4b17      	ldr	r3, [pc, #92]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 8008310:	2204      	movs	r2, #4
 8008312:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008314:	4b15      	ldr	r3, [pc, #84]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 8008316:	2203      	movs	r2, #3
 8008318:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800831a:	4b14      	ldr	r3, [pc, #80]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 800831c:	2200      	movs	r2, #0
 800831e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008320:	4b12      	ldr	r3, [pc, #72]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 8008322:	2200      	movs	r2, #0
 8008324:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8008326:	4811      	ldr	r0, [pc, #68]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 8008328:	f002 fffe 	bl	800b328 <HAL_DMA_Init>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_SPI_MspInit+0x17a>
      Error_Handler();
 8008332:	f7ff fe91 	bl	8008058 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a0c      	ldr	r2, [pc, #48]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 800833a:	679a      	str	r2, [r3, #120]	@ 0x78
 800833c:	4a0b      	ldr	r2, [pc, #44]	@ (800836c <HAL_SPI_MspInit+0x1b0>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008342:	2200      	movs	r2, #0
 8008344:	2100      	movs	r1, #0
 8008346:	2024      	movs	r0, #36	@ 0x24
 8008348:	f002 ff41 	bl	800b1ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800834c:	2024      	movs	r0, #36	@ 0x24
 800834e:	f002 ff58 	bl	800b202 <HAL_NVIC_EnableIRQ>
}
 8008352:	bf00      	nop
 8008354:	3730      	adds	r7, #48	@ 0x30
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40013000 	.word	0x40013000
 8008360:	58024400 	.word	0x58024400
 8008364:	58020400 	.word	0x58020400
 8008368:	40003800 	.word	0x40003800
 800836c:	240002fc 	.word	0x240002fc
 8008370:	40020010 	.word	0x40020010

08008374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800837a:	4b0a      	ldr	r3, [pc, #40]	@ (80083a4 <HAL_MspInit+0x30>)
 800837c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008380:	4a08      	ldr	r2, [pc, #32]	@ (80083a4 <HAL_MspInit+0x30>)
 8008382:	f043 0302 	orr.w	r3, r3, #2
 8008386:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800838a:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <HAL_MspInit+0x30>)
 800838c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	607b      	str	r3, [r7, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	58024400 	.word	0x58024400

080083a8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80083ac:	4b0b      	ldr	r3, [pc, #44]	@ (80083dc <SDTimer_Handler+0x34>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <SDTimer_Handler+0x16>
    Timer1--;
 80083b4:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <SDTimer_Handler+0x34>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	4a08      	ldr	r2, [pc, #32]	@ (80083dc <SDTimer_Handler+0x34>)
 80083bc:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 80083be:	4b08      	ldr	r3, [pc, #32]	@ (80083e0 <SDTimer_Handler+0x38>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <SDTimer_Handler+0x28>
    Timer2--;
 80083c6:	4b06      	ldr	r3, [pc, #24]	@ (80083e0 <SDTimer_Handler+0x38>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	4a04      	ldr	r2, [pc, #16]	@ (80083e0 <SDTimer_Handler+0x38>)
 80083ce:	6013      	str	r3, [r2, #0]
}
 80083d0:	bf00      	nop
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	24000378 	.word	0x24000378
 80083e0:	2400037c 	.word	0x2400037c

080083e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 80083e8:	2200      	movs	r2, #0
 80083ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083ee:	4812      	ldr	r0, [pc, #72]	@ (8008438 <NMI_Handler+0x54>)
 80083f0:	f005 ffac 	bl	800e34c <HAL_GPIO_WritePin>
	LED_Y_0;
 80083f4:	2200      	movs	r2, #0
 80083f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80083fa:	4810      	ldr	r0, [pc, #64]	@ (800843c <NMI_Handler+0x58>)
 80083fc:	f005 ffa6 	bl	800e34c <HAL_GPIO_WritePin>
	LED_R_1;
 8008400:	2201      	movs	r2, #1
 8008402:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008406:	480d      	ldr	r0, [pc, #52]	@ (800843c <NMI_Handler+0x58>)
 8008408:	f005 ffa0 	bl	800e34c <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 800840c:	480c      	ldr	r0, [pc, #48]	@ (8008440 <NMI_Handler+0x5c>)
 800840e:	f015 fc89 	bl	801dd24 <f_close>

	wanted_rool = 0;
 8008412:	4b0c      	ldr	r3, [pc, #48]	@ (8008444 <NMI_Handler+0x60>)
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800841a:	4b0b      	ldr	r3, [pc, #44]	@ (8008448 <NMI_Handler+0x64>)
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008422:	4b0a      	ldr	r3, [pc, #40]	@ (800844c <NMI_Handler+0x68>)
 8008424:	f04f 0200 	mov.w	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800842a:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <NMI_Handler+0x6c>)
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b21a      	sxth	r2, r3
 8008430:	4b08      	ldr	r3, [pc, #32]	@ (8008454 <NMI_Handler+0x70>)
 8008432:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008434:	bf00      	nop
 8008436:	e7fd      	b.n	8008434 <NMI_Handler+0x50>
 8008438:	58021000 	.word	0x58021000
 800843c:	58020400 	.word	0x58020400
 8008440:	24001ef0 	.word	0x24001ef0
 8008444:	0000407c 	.word	0x0000407c
 8008448:	00004078 	.word	0x00004078
 800844c:	00004080 	.word	0x00004080
 8008450:	0801ebd0 	.word	0x0801ebd0
 8008454:	0000406c 	.word	0x0000406c

08008458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 800845c:	2201      	movs	r2, #1
 800845e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008462:	4812      	ldr	r0, [pc, #72]	@ (80084ac <HardFault_Handler+0x54>)
 8008464:	f005 ff72 	bl	800e34c <HAL_GPIO_WritePin>
	LED_Y_0;
 8008468:	2200      	movs	r2, #0
 800846a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800846e:	4810      	ldr	r0, [pc, #64]	@ (80084b0 <HardFault_Handler+0x58>)
 8008470:	f005 ff6c 	bl	800e34c <HAL_GPIO_WritePin>
	LED_R_1;
 8008474:	2201      	movs	r2, #1
 8008476:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800847a:	480d      	ldr	r0, [pc, #52]	@ (80084b0 <HardFault_Handler+0x58>)
 800847c:	f005 ff66 	bl	800e34c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008480:	480c      	ldr	r0, [pc, #48]	@ (80084b4 <HardFault_Handler+0x5c>)
 8008482:	f015 fc4f 	bl	801dd24 <f_close>
	wanted_rool = 0;
 8008486:	4b0c      	ldr	r3, [pc, #48]	@ (80084b8 <HardFault_Handler+0x60>)
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800848e:	4b0b      	ldr	r3, [pc, #44]	@ (80084bc <HardFault_Handler+0x64>)
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008496:	4b0a      	ldr	r3, [pc, #40]	@ (80084c0 <HardFault_Handler+0x68>)
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800849e:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <HardFault_Handler+0x6c>)
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b21a      	sxth	r2, r3
 80084a4:	4b08      	ldr	r3, [pc, #32]	@ (80084c8 <HardFault_Handler+0x70>)
 80084a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <HardFault_Handler+0x50>
 80084ac:	58021000 	.word	0x58021000
 80084b0:	58020400 	.word	0x58020400
 80084b4:	24001ef0 	.word	0x24001ef0
 80084b8:	0000407c 	.word	0x0000407c
 80084bc:	00004078 	.word	0x00004078
 80084c0:	00004080 	.word	0x00004080
 80084c4:	0801ebd0 	.word	0x0801ebd0
 80084c8:	0000406c 	.word	0x0000406c

080084cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 80084d0:	2200      	movs	r2, #0
 80084d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80084d6:	4812      	ldr	r0, [pc, #72]	@ (8008520 <MemManage_Handler+0x54>)
 80084d8:	f005 ff38 	bl	800e34c <HAL_GPIO_WritePin>
	LED_Y_0;
 80084dc:	2200      	movs	r2, #0
 80084de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80084e2:	4810      	ldr	r0, [pc, #64]	@ (8008524 <MemManage_Handler+0x58>)
 80084e4:	f005 ff32 	bl	800e34c <HAL_GPIO_WritePin>
	LED_R_1;
 80084e8:	2201      	movs	r2, #1
 80084ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80084ee:	480d      	ldr	r0, [pc, #52]	@ (8008524 <MemManage_Handler+0x58>)
 80084f0:	f005 ff2c 	bl	800e34c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80084f4:	480c      	ldr	r0, [pc, #48]	@ (8008528 <MemManage_Handler+0x5c>)
 80084f6:	f015 fc15 	bl	801dd24 <f_close>
	wanted_rool = 0;
 80084fa:	4b0c      	ldr	r3, [pc, #48]	@ (800852c <MemManage_Handler+0x60>)
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008502:	4b0b      	ldr	r3, [pc, #44]	@ (8008530 <MemManage_Handler+0x64>)
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800850a:	4b0a      	ldr	r3, [pc, #40]	@ (8008534 <MemManage_Handler+0x68>)
 800850c:	f04f 0200 	mov.w	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008512:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <MemManage_Handler+0x6c>)
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b21a      	sxth	r2, r3
 8008518:	4b08      	ldr	r3, [pc, #32]	@ (800853c <MemManage_Handler+0x70>)
 800851a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800851c:	bf00      	nop
 800851e:	e7fd      	b.n	800851c <MemManage_Handler+0x50>
 8008520:	58021000 	.word	0x58021000
 8008524:	58020400 	.word	0x58020400
 8008528:	24001ef0 	.word	0x24001ef0
 800852c:	0000407c 	.word	0x0000407c
 8008530:	00004078 	.word	0x00004078
 8008534:	00004080 	.word	0x00004080
 8008538:	0801ebd0 	.word	0x0801ebd0
 800853c:	0000406c 	.word	0x0000406c

08008540 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008544:	2201      	movs	r2, #1
 8008546:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800854a:	4812      	ldr	r0, [pc, #72]	@ (8008594 <BusFault_Handler+0x54>)
 800854c:	f005 fefe 	bl	800e34c <HAL_GPIO_WritePin>
	LED_Y_1;
 8008550:	2201      	movs	r2, #1
 8008552:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008556:	4810      	ldr	r0, [pc, #64]	@ (8008598 <BusFault_Handler+0x58>)
 8008558:	f005 fef8 	bl	800e34c <HAL_GPIO_WritePin>
	LED_R_1;
 800855c:	2201      	movs	r2, #1
 800855e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008562:	480d      	ldr	r0, [pc, #52]	@ (8008598 <BusFault_Handler+0x58>)
 8008564:	f005 fef2 	bl	800e34c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008568:	480c      	ldr	r0, [pc, #48]	@ (800859c <BusFault_Handler+0x5c>)
 800856a:	f015 fbdb 	bl	801dd24 <f_close>
	wanted_rool = 0;
 800856e:	4b0c      	ldr	r3, [pc, #48]	@ (80085a0 <BusFault_Handler+0x60>)
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008576:	4b0b      	ldr	r3, [pc, #44]	@ (80085a4 <BusFault_Handler+0x64>)
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800857e:	4b0a      	ldr	r3, [pc, #40]	@ (80085a8 <BusFault_Handler+0x68>)
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <BusFault_Handler+0x6c>)
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b21a      	sxth	r2, r3
 800858c:	4b08      	ldr	r3, [pc, #32]	@ (80085b0 <BusFault_Handler+0x70>)
 800858e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <BusFault_Handler+0x50>
 8008594:	58021000 	.word	0x58021000
 8008598:	58020400 	.word	0x58020400
 800859c:	24001ef0 	.word	0x24001ef0
 80085a0:	0000407c 	.word	0x0000407c
 80085a4:	00004078 	.word	0x00004078
 80085a8:	00004080 	.word	0x00004080
 80085ac:	0801ebd0 	.word	0x0801ebd0
 80085b0:	0000406c 	.word	0x0000406c

080085b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 80085b8:	2200      	movs	r2, #0
 80085ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085be:	4812      	ldr	r0, [pc, #72]	@ (8008608 <UsageFault_Handler+0x54>)
 80085c0:	f005 fec4 	bl	800e34c <HAL_GPIO_WritePin>
	LED_Y_1;
 80085c4:	2201      	movs	r2, #1
 80085c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80085ca:	4810      	ldr	r0, [pc, #64]	@ (800860c <UsageFault_Handler+0x58>)
 80085cc:	f005 febe 	bl	800e34c <HAL_GPIO_WritePin>
	LED_R_1;
 80085d0:	2201      	movs	r2, #1
 80085d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80085d6:	480d      	ldr	r0, [pc, #52]	@ (800860c <UsageFault_Handler+0x58>)
 80085d8:	f005 feb8 	bl	800e34c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80085dc:	480c      	ldr	r0, [pc, #48]	@ (8008610 <UsageFault_Handler+0x5c>)
 80085de:	f015 fba1 	bl	801dd24 <f_close>
	wanted_rool = 0;
 80085e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <UsageFault_Handler+0x60>)
 80085e4:	f04f 0200 	mov.w	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80085ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008618 <UsageFault_Handler+0x64>)
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80085f2:	4b0a      	ldr	r3, [pc, #40]	@ (800861c <UsageFault_Handler+0x68>)
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80085fa:	4b09      	ldr	r3, [pc, #36]	@ (8008620 <UsageFault_Handler+0x6c>)
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b21a      	sxth	r2, r3
 8008600:	4b08      	ldr	r3, [pc, #32]	@ (8008624 <UsageFault_Handler+0x70>)
 8008602:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <UsageFault_Handler+0x50>
 8008608:	58021000 	.word	0x58021000
 800860c:	58020400 	.word	0x58020400
 8008610:	24001ef0 	.word	0x24001ef0
 8008614:	0000407c 	.word	0x0000407c
 8008618:	00004078 	.word	0x00004078
 800861c:	00004080 	.word	0x00004080
 8008620:	0801ebd0 	.word	0x0801ebd0
 8008624:	0000406c 	.word	0x0000406c

08008628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800862c:	bf00      	nop
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008636:	b480      	push	{r7}
 8008638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800863a:	bf00      	nop
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008648:	bf00      	nop
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
	...

08008654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008658:	4b08      	ldr	r3, [pc, #32]	@ (800867c <SysTick_Handler+0x28>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	4a07      	ldr	r2, [pc, #28]	@ (800867c <SysTick_Handler+0x28>)
 8008660:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008662:	4b06      	ldr	r3, [pc, #24]	@ (800867c <SysTick_Handler+0x28>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b09      	cmp	r3, #9
 8008668:	d904      	bls.n	8008674 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 800866a:	4b04      	ldr	r3, [pc, #16]	@ (800867c <SysTick_Handler+0x28>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008670:	f7ff fe9a 	bl	80083a8 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008674:	f000 fd0e 	bl	8009094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008678:	bf00      	nop
 800867a:	bd80      	pop	{r7, pc}
 800867c:	24000374 	.word	0x24000374

08008680 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008684:	4802      	ldr	r0, [pc, #8]	@ (8008690 <DMA1_Stream0_IRQHandler+0x10>)
 8008686:	f004 f975 	bl	800c974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800868a:	bf00      	nop
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	240002fc 	.word	0x240002fc

08008694 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008698:	4802      	ldr	r0, [pc, #8]	@ (80086a4 <ADC_IRQHandler+0x10>)
 800869a:	f001 fb49 	bl	8009d30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800869e:	bf00      	nop
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	240000ac 	.word	0x240000ac

080086a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80086ac:	4802      	ldr	r0, [pc, #8]	@ (80086b8 <TIM2_IRQHandler+0x10>)
 80086ae:	f00e f960 	bl	8016972 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80086b2:	bf00      	nop
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	240003cc 	.word	0x240003cc

080086bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80086c0:	4802      	ldr	r0, [pc, #8]	@ (80086cc <SPI1_IRQHandler+0x10>)
 80086c2:	f00d f9cf 	bl	8015a64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80086c6:	bf00      	nop
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	240001ec 	.word	0x240001ec

080086d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80086d4:	4802      	ldr	r0, [pc, #8]	@ (80086e0 <SPI2_IRQHandler+0x10>)
 80086d6:	f00d f9c5 	bl	8015a64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80086da:	bf00      	nop
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	24000274 	.word	0x24000274

080086e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80086e8:	4802      	ldr	r0, [pc, #8]	@ (80086f4 <USART1_IRQHandler+0x10>)
 80086ea:	f00f fd99 	bl	8018220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086ee:	bf00      	nop
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	240004b0 	.word	0x240004b0

080086f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80086fc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008700:	f005 fe3d 	bl	800e37e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008704:	bf00      	nop
 8008706:	bd80      	pop	{r7, pc}

08008708 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800870c:	4802      	ldr	r0, [pc, #8]	@ (8008718 <DMA2_Stream0_IRQHandler+0x10>)
 800870e:	f004 f931 	bl	800c974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008712:	bf00      	nop
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	2400011c 	.word	0x2400011c

0800871c <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008720:	4802      	ldr	r0, [pc, #8]	@ (800872c <I2C5_EV_IRQHandler+0x10>)
 8008722:	f006 fa21 	bl	800eb68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008726:	bf00      	nop
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	24000198 	.word	0x24000198

08008730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008734:	4b32      	ldr	r3, [pc, #200]	@ (8008800 <SystemInit+0xd0>)
 8008736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800873a:	4a31      	ldr	r2, [pc, #196]	@ (8008800 <SystemInit+0xd0>)
 800873c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008744:	4b2f      	ldr	r3, [pc, #188]	@ (8008804 <SystemInit+0xd4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	2b06      	cmp	r3, #6
 800874e:	d807      	bhi.n	8008760 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008750:	4b2c      	ldr	r3, [pc, #176]	@ (8008804 <SystemInit+0xd4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f023 030f 	bic.w	r3, r3, #15
 8008758:	4a2a      	ldr	r2, [pc, #168]	@ (8008804 <SystemInit+0xd4>)
 800875a:	f043 0307 	orr.w	r3, r3, #7
 800875e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008760:	4b29      	ldr	r3, [pc, #164]	@ (8008808 <SystemInit+0xd8>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a28      	ldr	r2, [pc, #160]	@ (8008808 <SystemInit+0xd8>)
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800876c:	4b26      	ldr	r3, [pc, #152]	@ (8008808 <SystemInit+0xd8>)
 800876e:	2200      	movs	r2, #0
 8008770:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008772:	4b25      	ldr	r3, [pc, #148]	@ (8008808 <SystemInit+0xd8>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4924      	ldr	r1, [pc, #144]	@ (8008808 <SystemInit+0xd8>)
 8008778:	4b24      	ldr	r3, [pc, #144]	@ (800880c <SystemInit+0xdc>)
 800877a:	4013      	ands	r3, r2
 800877c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800877e:	4b21      	ldr	r3, [pc, #132]	@ (8008804 <SystemInit+0xd4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800878a:	4b1e      	ldr	r3, [pc, #120]	@ (8008804 <SystemInit+0xd4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f023 030f 	bic.w	r3, r3, #15
 8008792:	4a1c      	ldr	r2, [pc, #112]	@ (8008804 <SystemInit+0xd4>)
 8008794:	f043 0307 	orr.w	r3, r3, #7
 8008798:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800879a:	4b1b      	ldr	r3, [pc, #108]	@ (8008808 <SystemInit+0xd8>)
 800879c:	2200      	movs	r2, #0
 800879e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80087a0:	4b19      	ldr	r3, [pc, #100]	@ (8008808 <SystemInit+0xd8>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80087a6:	4b18      	ldr	r3, [pc, #96]	@ (8008808 <SystemInit+0xd8>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80087ac:	4b16      	ldr	r3, [pc, #88]	@ (8008808 <SystemInit+0xd8>)
 80087ae:	4a18      	ldr	r2, [pc, #96]	@ (8008810 <SystemInit+0xe0>)
 80087b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80087b2:	4b15      	ldr	r3, [pc, #84]	@ (8008808 <SystemInit+0xd8>)
 80087b4:	4a17      	ldr	r2, [pc, #92]	@ (8008814 <SystemInit+0xe4>)
 80087b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80087b8:	4b13      	ldr	r3, [pc, #76]	@ (8008808 <SystemInit+0xd8>)
 80087ba:	4a17      	ldr	r2, [pc, #92]	@ (8008818 <SystemInit+0xe8>)
 80087bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80087be:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <SystemInit+0xd8>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80087c4:	4b10      	ldr	r3, [pc, #64]	@ (8008808 <SystemInit+0xd8>)
 80087c6:	4a14      	ldr	r2, [pc, #80]	@ (8008818 <SystemInit+0xe8>)
 80087c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80087ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008808 <SystemInit+0xd8>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80087d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008808 <SystemInit+0xd8>)
 80087d2:	4a11      	ldr	r2, [pc, #68]	@ (8008818 <SystemInit+0xe8>)
 80087d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80087d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008808 <SystemInit+0xd8>)
 80087d8:	2200      	movs	r2, #0
 80087da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <SystemInit+0xd8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a09      	ldr	r2, [pc, #36]	@ (8008808 <SystemInit+0xd8>)
 80087e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80087e8:	4b07      	ldr	r3, [pc, #28]	@ (8008808 <SystemInit+0xd8>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80087ee:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <SystemInit+0xec>)
 80087f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80087f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80087f6:	bf00      	nop
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	e000ed00 	.word	0xe000ed00
 8008804:	52002000 	.word	0x52002000
 8008808:	58024400 	.word	0x58024400
 800880c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008810:	02020200 	.word	0x02020200
 8008814:	01ff0000 	.word	0x01ff0000
 8008818:	01010280 	.word	0x01010280
 800881c:	52004000 	.word	0x52004000

08008820 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b098      	sub	sp, #96	@ 0x60
 8008824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008826:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008832:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	605a      	str	r2, [r3, #4]
 800883c:	609a      	str	r2, [r3, #8]
 800883e:	60da      	str	r2, [r3, #12]
 8008840:	611a      	str	r2, [r3, #16]
 8008842:	615a      	str	r2, [r3, #20]
 8008844:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008846:	1d3b      	adds	r3, r7, #4
 8008848:	2234      	movs	r2, #52	@ 0x34
 800884a:	2100      	movs	r1, #0
 800884c:	4618      	mov	r0, r3
 800884e:	f015 fc61 	bl	801e114 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008852:	4b45      	ldr	r3, [pc, #276]	@ (8008968 <MX_TIM1_Init+0x148>)
 8008854:	4a45      	ldr	r2, [pc, #276]	@ (800896c <MX_TIM1_Init+0x14c>)
 8008856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008858:	4b43      	ldr	r3, [pc, #268]	@ (8008968 <MX_TIM1_Init+0x148>)
 800885a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800885e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008860:	4b41      	ldr	r3, [pc, #260]	@ (8008968 <MX_TIM1_Init+0x148>)
 8008862:	2200      	movs	r2, #0
 8008864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008866:	4b40      	ldr	r3, [pc, #256]	@ (8008968 <MX_TIM1_Init+0x148>)
 8008868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800886c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800886e:	4b3e      	ldr	r3, [pc, #248]	@ (8008968 <MX_TIM1_Init+0x148>)
 8008870:	2200      	movs	r2, #0
 8008872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008874:	4b3c      	ldr	r3, [pc, #240]	@ (8008968 <MX_TIM1_Init+0x148>)
 8008876:	2200      	movs	r2, #0
 8008878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800887a:	4b3b      	ldr	r3, [pc, #236]	@ (8008968 <MX_TIM1_Init+0x148>)
 800887c:	2280      	movs	r2, #128	@ 0x80
 800887e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008880:	4839      	ldr	r0, [pc, #228]	@ (8008968 <MX_TIM1_Init+0x148>)
 8008882:	f00d feab 	bl	80165dc <HAL_TIM_PWM_Init>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800888c:	f7ff fbe4 	bl	8008058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008890:	2300      	movs	r3, #0
 8008892:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008894:	2300      	movs	r3, #0
 8008896:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008898:	2300      	movs	r3, #0
 800889a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800889c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80088a0:	4619      	mov	r1, r3
 80088a2:	4831      	ldr	r0, [pc, #196]	@ (8008968 <MX_TIM1_Init+0x148>)
 80088a4:	f00f f9b8 	bl	8017c18 <HAL_TIMEx_MasterConfigSynchronization>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80088ae:	f7ff fbd3 	bl	8008058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088b2:	2360      	movs	r3, #96	@ 0x60
 80088b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088ba:	2300      	movs	r3, #0
 80088bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80088be:	2300      	movs	r3, #0
 80088c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80088c6:	2300      	movs	r3, #0
 80088c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80088ca:	2300      	movs	r3, #0
 80088cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80088ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80088d2:	2204      	movs	r2, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4824      	ldr	r0, [pc, #144]	@ (8008968 <MX_TIM1_Init+0x148>)
 80088d8:	f00e f9ee 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80088e2:	f7ff fbb9 	bl	8008058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80088e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80088ea:	2208      	movs	r2, #8
 80088ec:	4619      	mov	r1, r3
 80088ee:	481e      	ldr	r0, [pc, #120]	@ (8008968 <MX_TIM1_Init+0x148>)
 80088f0:	f00e f9e2 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80088fa:	f7ff fbad 	bl	8008058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80088fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008902:	220c      	movs	r2, #12
 8008904:	4619      	mov	r1, r3
 8008906:	4818      	ldr	r0, [pc, #96]	@ (8008968 <MX_TIM1_Init+0x148>)
 8008908:	f00e f9d6 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008912:	f7ff fba1 	bl	8008058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008916:	2300      	movs	r3, #0
 8008918:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800892a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800892e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008934:	2300      	movs	r3, #0
 8008936:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008938:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800893c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008942:	2300      	movs	r3, #0
 8008944:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008946:	1d3b      	adds	r3, r7, #4
 8008948:	4619      	mov	r1, r3
 800894a:	4807      	ldr	r0, [pc, #28]	@ (8008968 <MX_TIM1_Init+0x148>)
 800894c:	f00f fa00 	bl	8017d50 <HAL_TIMEx_ConfigBreakDeadTime>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008956:	f7ff fb7f 	bl	8008058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800895a:	4803      	ldr	r0, [pc, #12]	@ (8008968 <MX_TIM1_Init+0x148>)
 800895c:	f000 f9da 	bl	8008d14 <HAL_TIM_MspPostInit>

}
 8008960:	bf00      	nop
 8008962:	3760      	adds	r7, #96	@ 0x60
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	24000380 	.word	0x24000380
 800896c:	40010000 	.word	0x40010000

08008970 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008976:	f107 0314 	add.w	r3, r7, #20
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	605a      	str	r2, [r3, #4]
 8008980:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008982:	1d3b      	adds	r3, r7, #4
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	609a      	str	r2, [r3, #8]
 800898c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800898e:	4b21      	ldr	r3, [pc, #132]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 8008990:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008994:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008996:	4b1f      	ldr	r3, [pc, #124]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 8008998:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800899c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800899e:	4b1d      	ldr	r3, [pc, #116]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80089a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 80089a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80089aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089ac:	4b19      	ldr	r3, [pc, #100]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80089b2:	4b18      	ldr	r3, [pc, #96]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 80089b4:	2280      	movs	r2, #128	@ 0x80
 80089b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80089b8:	4816      	ldr	r0, [pc, #88]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 80089ba:	f00d ff83 	bl	80168c4 <HAL_TIM_IC_Init>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80089c4:	f7ff fb48 	bl	8008058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	4619      	mov	r1, r3
 80089d6:	480f      	ldr	r0, [pc, #60]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 80089d8:	f00f f91e 	bl	8017c18 <HAL_TIMEx_MasterConfigSynchronization>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80089e2:	f7ff fb39 	bl	8008058 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80089e6:	2300      	movs	r3, #0
 80089e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80089ea:	2301      	movs	r3, #1
 80089ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80089f6:	1d3b      	adds	r3, r7, #4
 80089f8:	2200      	movs	r2, #0
 80089fa:	4619      	mov	r1, r3
 80089fc:	4805      	ldr	r0, [pc, #20]	@ (8008a14 <MX_TIM2_Init+0xa4>)
 80089fe:	f00e f8bf 	bl	8016b80 <HAL_TIM_IC_ConfigChannel>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008a08:	f7ff fb26 	bl	8008058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008a0c:	bf00      	nop
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	240003cc 	.word	0x240003cc

08008a18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	@ 0x28
 8008a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a1e:	f107 031c 	add.w	r3, r7, #28
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	605a      	str	r2, [r3, #4]
 8008a28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008a2a:	463b      	mov	r3, r7
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	605a      	str	r2, [r3, #4]
 8008a32:	609a      	str	r2, [r3, #8]
 8008a34:	60da      	str	r2, [r3, #12]
 8008a36:	611a      	str	r2, [r3, #16]
 8008a38:	615a      	str	r2, [r3, #20]
 8008a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008a3c:	4b32      	ldr	r3, [pc, #200]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008a3e:	4a33      	ldr	r2, [pc, #204]	@ (8008b0c <MX_TIM3_Init+0xf4>)
 8008a40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008a42:	4b31      	ldr	r3, [pc, #196]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008a44:	221c      	movs	r2, #28
 8008a46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a48:	4b2f      	ldr	r3, [pc, #188]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008a50:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008a54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a56:	4b2c      	ldr	r3, [pc, #176]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008a62:	4829      	ldr	r0, [pc, #164]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008a64:	f00d fdba 	bl	80165dc <HAL_TIM_PWM_Init>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008a6e:	f7ff faf3 	bl	8008058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a76:	2300      	movs	r3, #0
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008a7a:	f107 031c 	add.w	r3, r7, #28
 8008a7e:	4619      	mov	r1, r3
 8008a80:	4821      	ldr	r0, [pc, #132]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008a82:	f00f f8c9 	bl	8017c18 <HAL_TIMEx_MasterConfigSynchronization>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008a8c:	f7ff fae4 	bl	8008058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008a90:	2360      	movs	r3, #96	@ 0x60
 8008a92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008aa0:	463b      	mov	r3, r7
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4818      	ldr	r0, [pc, #96]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008aa8:	f00e f906 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008ab2:	f7ff fad1 	bl	8008058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	2204      	movs	r2, #4
 8008aba:	4619      	mov	r1, r3
 8008abc:	4812      	ldr	r0, [pc, #72]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008abe:	f00e f8fb 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008ac8:	f7ff fac6 	bl	8008058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008acc:	463b      	mov	r3, r7
 8008ace:	2208      	movs	r2, #8
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	480d      	ldr	r0, [pc, #52]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008ad4:	f00e f8f0 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008ade:	f7ff fabb 	bl	8008058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	220c      	movs	r2, #12
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4807      	ldr	r0, [pc, #28]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008aea:	f00e f8e5 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008af4:	f7ff fab0 	bl	8008058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008af8:	4803      	ldr	r0, [pc, #12]	@ (8008b08 <MX_TIM3_Init+0xf0>)
 8008afa:	f000 f90b 	bl	8008d14 <HAL_TIM_MspPostInit>

}
 8008afe:	bf00      	nop
 8008b00:	3728      	adds	r7, #40	@ 0x28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	24000418 	.word	0x24000418
 8008b0c:	40000400 	.word	0x40000400

08008b10 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b16:	f107 0310 	add.w	r3, r7, #16
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	605a      	str	r2, [r3, #4]
 8008b20:	609a      	str	r2, [r3, #8]
 8008b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b24:	1d3b      	adds	r3, r7, #4
 8008b26:	2200      	movs	r2, #0
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	605a      	str	r2, [r3, #4]
 8008b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008b2e:	4b21      	ldr	r3, [pc, #132]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b30:	4a21      	ldr	r2, [pc, #132]	@ (8008bb8 <MX_TIM8_Init+0xa8>)
 8008b32:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008b34:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b36:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008b3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008b48:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008b50:	4b18      	ldr	r3, [pc, #96]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b56:	4b17      	ldr	r3, [pc, #92]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008b5c:	4815      	ldr	r0, [pc, #84]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b5e:	f00d fbe2 	bl	8016326 <HAL_TIM_Base_Init>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008b68:	f7ff fa76 	bl	8008058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008b72:	f107 0310 	add.w	r3, r7, #16
 8008b76:	4619      	mov	r1, r3
 8008b78:	480e      	ldr	r0, [pc, #56]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b7a:	f00e f9b1 	bl	8016ee0 <HAL_TIM_ConfigClockSource>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008b84:	f7ff fa68 	bl	8008058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008b88:	2320      	movs	r3, #32
 8008b8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008b8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008b90:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008b96:	1d3b      	adds	r3, r7, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4806      	ldr	r0, [pc, #24]	@ (8008bb4 <MX_TIM8_Init+0xa4>)
 8008b9c:	f00f f83c 	bl	8017c18 <HAL_TIMEx_MasterConfigSynchronization>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008ba6:	f7ff fa57 	bl	8008058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008baa:	bf00      	nop
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	24000464 	.word	0x24000464
 8008bb8:	40010400 	.word	0x40010400

08008bbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a16      	ldr	r2, [pc, #88]	@ (8008c24 <HAL_TIM_PWM_MspInit+0x68>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d10f      	bne.n	8008bee <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008bce:	4b16      	ldr	r3, [pc, #88]	@ (8008c28 <HAL_TIM_PWM_MspInit+0x6c>)
 8008bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bd4:	4a14      	ldr	r2, [pc, #80]	@ (8008c28 <HAL_TIM_PWM_MspInit+0x6c>)
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008bde:	4b12      	ldr	r3, [pc, #72]	@ (8008c28 <HAL_TIM_PWM_MspInit+0x6c>)
 8008be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008bec:	e013      	b.n	8008c16 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8008c2c <HAL_TIM_PWM_MspInit+0x70>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d10e      	bne.n	8008c16 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c28 <HAL_TIM_PWM_MspInit+0x6c>)
 8008bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8008c28 <HAL_TIM_PWM_MspInit+0x6c>)
 8008c00:	f043 0302 	orr.w	r3, r3, #2
 8008c04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008c08:	4b07      	ldr	r3, [pc, #28]	@ (8008c28 <HAL_TIM_PWM_MspInit+0x6c>)
 8008c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	60bb      	str	r3, [r7, #8]
 8008c14:	68bb      	ldr	r3, [r7, #8]
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40010000 	.word	0x40010000
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	40000400 	.word	0x40000400

08008c30 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	@ 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c38:	f107 0314 	add.w	r3, r7, #20
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	605a      	str	r2, [r3, #4]
 8008c42:	609a      	str	r2, [r3, #8]
 8008c44:	60da      	str	r2, [r3, #12]
 8008c46:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c50:	d135      	bne.n	8008cbe <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008c52:	4b1d      	ldr	r3, [pc, #116]	@ (8008cc8 <HAL_TIM_IC_MspInit+0x98>)
 8008c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c58:	4a1b      	ldr	r2, [pc, #108]	@ (8008cc8 <HAL_TIM_IC_MspInit+0x98>)
 8008c5a:	f043 0301 	orr.w	r3, r3, #1
 8008c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008c62:	4b19      	ldr	r3, [pc, #100]	@ (8008cc8 <HAL_TIM_IC_MspInit+0x98>)
 8008c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c70:	4b15      	ldr	r3, [pc, #84]	@ (8008cc8 <HAL_TIM_IC_MspInit+0x98>)
 8008c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c76:	4a14      	ldr	r2, [pc, #80]	@ (8008cc8 <HAL_TIM_IC_MspInit+0x98>)
 8008c78:	f043 0301 	orr.w	r3, r3, #1
 8008c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008c80:	4b11      	ldr	r3, [pc, #68]	@ (8008cc8 <HAL_TIM_IC_MspInit+0x98>)
 8008c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c92:	2302      	movs	r3, #2
 8008c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ca2:	f107 0314 	add.w	r3, r7, #20
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4808      	ldr	r0, [pc, #32]	@ (8008ccc <HAL_TIM_IC_MspInit+0x9c>)
 8008caa:	f005 f98f 	bl	800dfcc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	201c      	movs	r0, #28
 8008cb4:	f002 fa8b 	bl	800b1ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008cb8:	201c      	movs	r0, #28
 8008cba:	f002 faa2 	bl	800b202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008cbe:	bf00      	nop
 8008cc0:	3728      	adds	r7, #40	@ 0x28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	58024400 	.word	0x58024400
 8008ccc:	58020000 	.word	0x58020000

08008cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8008d0c <HAL_TIM_Base_MspInit+0x3c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d10e      	bne.n	8008d00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d10 <HAL_TIM_Base_MspInit+0x40>)
 8008ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ce8:	4a09      	ldr	r2, [pc, #36]	@ (8008d10 <HAL_TIM_Base_MspInit+0x40>)
 8008cea:	f043 0302 	orr.w	r3, r3, #2
 8008cee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008cf2:	4b07      	ldr	r3, [pc, #28]	@ (8008d10 <HAL_TIM_Base_MspInit+0x40>)
 8008cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	40010400 	.word	0x40010400
 8008d10:	58024400 	.word	0x58024400

08008d14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	@ 0x28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d1c:	f107 0314 	add.w	r3, r7, #20
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	605a      	str	r2, [r3, #4]
 8008d26:	609a      	str	r2, [r3, #8]
 8008d28:	60da      	str	r2, [r3, #12]
 8008d2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a26      	ldr	r2, [pc, #152]	@ (8008dcc <HAL_TIM_MspPostInit+0xb8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d120      	bne.n	8008d78 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d36:	4b26      	ldr	r3, [pc, #152]	@ (8008dd0 <HAL_TIM_MspPostInit+0xbc>)
 8008d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d3c:	4a24      	ldr	r2, [pc, #144]	@ (8008dd0 <HAL_TIM_MspPostInit+0xbc>)
 8008d3e:	f043 0310 	orr.w	r3, r3, #16
 8008d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d46:	4b22      	ldr	r3, [pc, #136]	@ (8008dd0 <HAL_TIM_MspPostInit+0xbc>)
 8008d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d4c:	f003 0310 	and.w	r3, r3, #16
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008d54:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d62:	2300      	movs	r3, #0
 8008d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008d66:	2301      	movs	r3, #1
 8008d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008d6a:	f107 0314 	add.w	r3, r7, #20
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4818      	ldr	r0, [pc, #96]	@ (8008dd4 <HAL_TIM_MspPostInit+0xc0>)
 8008d72:	f005 f92b 	bl	800dfcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008d76:	e024      	b.n	8008dc2 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a16      	ldr	r2, [pc, #88]	@ (8008dd8 <HAL_TIM_MspPostInit+0xc4>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d11f      	bne.n	8008dc2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d82:	4b13      	ldr	r3, [pc, #76]	@ (8008dd0 <HAL_TIM_MspPostInit+0xbc>)
 8008d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d88:	4a11      	ldr	r2, [pc, #68]	@ (8008dd0 <HAL_TIM_MspPostInit+0xbc>)
 8008d8a:	f043 0304 	orr.w	r3, r3, #4
 8008d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d92:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd0 <HAL_TIM_MspPostInit+0xbc>)
 8008d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008da0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008da6:	2302      	movs	r3, #2
 8008da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dae:	2300      	movs	r3, #0
 8008db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008db2:	2302      	movs	r3, #2
 8008db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008db6:	f107 0314 	add.w	r3, r7, #20
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4807      	ldr	r0, [pc, #28]	@ (8008ddc <HAL_TIM_MspPostInit+0xc8>)
 8008dbe:	f005 f905 	bl	800dfcc <HAL_GPIO_Init>
}
 8008dc2:	bf00      	nop
 8008dc4:	3728      	adds	r7, #40	@ 0x28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40010000 	.word	0x40010000
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	58021000 	.word	0x58021000
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	58020800 	.word	0x58020800

08008de0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008de4:	4b22      	ldr	r3, [pc, #136]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008de6:	4a23      	ldr	r2, [pc, #140]	@ (8008e74 <MX_USART1_UART_Init+0x94>)
 8008de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008dea:	4b21      	ldr	r3, [pc, #132]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008df2:	4b1f      	ldr	r3, [pc, #124]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008df8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e04:	4b1a      	ldr	r3, [pc, #104]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e06:	220c      	movs	r2, #12
 8008e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e0a:	4b19      	ldr	r3, [pc, #100]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e10:	4b17      	ldr	r3, [pc, #92]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e16:	4b16      	ldr	r3, [pc, #88]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008e1c:	4b14      	ldr	r3, [pc, #80]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008e22:	4b13      	ldr	r3, [pc, #76]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e28:	4811      	ldr	r0, [pc, #68]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e2a:	f00f f83b 	bl	8017ea4 <HAL_UART_Init>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008e34:	f7ff f910 	bl	8008058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e38:	2100      	movs	r1, #0
 8008e3a:	480d      	ldr	r0, [pc, #52]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e3c:	f011 feeb 	bl	801ac16 <HAL_UARTEx_SetTxFifoThreshold>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008e46:	f7ff f907 	bl	8008058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4808      	ldr	r0, [pc, #32]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e4e:	f011 ff20 	bl	801ac92 <HAL_UARTEx_SetRxFifoThreshold>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008e58:	f7ff f8fe 	bl	8008058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008e5c:	4804      	ldr	r0, [pc, #16]	@ (8008e70 <MX_USART1_UART_Init+0x90>)
 8008e5e:	f011 fea1 	bl	801aba4 <HAL_UARTEx_DisableFifoMode>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008e68:	f7ff f8f6 	bl	8008058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	240004b0 	.word	0x240004b0
 8008e74:	40011000 	.word	0x40011000

08008e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b0b8      	sub	sp, #224	@ 0xe0
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e80:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	609a      	str	r2, [r3, #8]
 8008e8c:	60da      	str	r2, [r3, #12]
 8008e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e90:	f107 0310 	add.w	r3, r7, #16
 8008e94:	22b8      	movs	r2, #184	@ 0xb8
 8008e96:	2100      	movs	r1, #0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f015 f93b 	bl	801e114 <memset>
  if(uartHandle->Instance==USART1)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8008f50 <HAL_UART_MspInit+0xd8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d14e      	bne.n	8008f46 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008ea8:	f04f 0201 	mov.w	r2, #1
 8008eac:	f04f 0300 	mov.w	r3, #0
 8008eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008eba:	f107 0310 	add.w	r3, r7, #16
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f008 fe96 	bl	8011bf0 <HAL_RCCEx_PeriphCLKConfig>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008eca:	f7ff f8c5 	bl	8008058 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ece:	4b21      	ldr	r3, [pc, #132]	@ (8008f54 <HAL_UART_MspInit+0xdc>)
 8008ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8008f54 <HAL_UART_MspInit+0xdc>)
 8008ed6:	f043 0310 	orr.w	r3, r3, #16
 8008eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008ede:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <HAL_UART_MspInit+0xdc>)
 8008ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eec:	4b19      	ldr	r3, [pc, #100]	@ (8008f54 <HAL_UART_MspInit+0xdc>)
 8008eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ef2:	4a18      	ldr	r2, [pc, #96]	@ (8008f54 <HAL_UART_MspInit+0xdc>)
 8008ef4:	f043 0301 	orr.w	r3, r3, #1
 8008ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008efc:	4b15      	ldr	r3, [pc, #84]	@ (8008f54 <HAL_UART_MspInit+0xdc>)
 8008efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	60bb      	str	r3, [r7, #8]
 8008f08:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008f0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008f0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f12:	2302      	movs	r3, #2
 8008f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008f24:	2307      	movs	r3, #7
 8008f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4809      	ldr	r0, [pc, #36]	@ (8008f58 <HAL_UART_MspInit+0xe0>)
 8008f32:	f005 f84b 	bl	800dfcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f36:	2200      	movs	r2, #0
 8008f38:	2100      	movs	r1, #0
 8008f3a:	2025      	movs	r0, #37	@ 0x25
 8008f3c:	f002 f947 	bl	800b1ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008f40:	2025      	movs	r0, #37	@ 0x25
 8008f42:	f002 f95e 	bl	800b202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008f46:	bf00      	nop
 8008f48:	37e0      	adds	r7, #224	@ 0xe0
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40011000 	.word	0x40011000
 8008f54:	58024400 	.word	0x58024400
 8008f58:	58020000 	.word	0x58020000

08008f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008f94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008f60:	f7ff fbe6 	bl	8008730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008f64:	480c      	ldr	r0, [pc, #48]	@ (8008f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008f66:	490d      	ldr	r1, [pc, #52]	@ (8008f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008f68:	4a0d      	ldr	r2, [pc, #52]	@ (8008fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f6c:	e002      	b.n	8008f74 <LoopCopyDataInit>

08008f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f72:	3304      	adds	r3, #4

08008f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f78:	d3f9      	bcc.n	8008f6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8008fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8008fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f80:	e001      	b.n	8008f86 <LoopFillZerobss>

08008f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f84:	3204      	adds	r2, #4

08008f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f88:	d3fb      	bcc.n	8008f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008f8a:	f015 f8d1 	bl	801e130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f8e:	f7fc f843 	bl	8005018 <main>
  bx  lr
 8008f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008f94:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008f98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008f9c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8008fa0:	08020990 	.word	0x08020990
  ldr r2, =_sbss
 8008fa4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8008fa8:	240008ac 	.word	0x240008ac

08008fac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008fac:	e7fe      	b.n	8008fac <ADC3_IRQHandler>
	...

08008fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fb6:	2003      	movs	r0, #3
 8008fb8:	f002 f8fe 	bl	800b1b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008fbc:	f008 fc42 	bl	8011844 <HAL_RCC_GetSysClockFreq>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	4b15      	ldr	r3, [pc, #84]	@ (8009018 <HAL_Init+0x68>)
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	0a1b      	lsrs	r3, r3, #8
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	4913      	ldr	r1, [pc, #76]	@ (800901c <HAL_Init+0x6c>)
 8008fce:	5ccb      	ldrb	r3, [r1, r3]
 8008fd0:	f003 031f 	and.w	r3, r3, #31
 8008fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008fda:	4b0f      	ldr	r3, [pc, #60]	@ (8009018 <HAL_Init+0x68>)
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	f003 030f 	and.w	r3, r3, #15
 8008fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800901c <HAL_Init+0x6c>)
 8008fe4:	5cd3      	ldrb	r3, [r2, r3]
 8008fe6:	f003 031f 	and.w	r3, r3, #31
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8009020 <HAL_Init+0x70>)
 8008ff2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8009024 <HAL_Init+0x74>)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ffa:	200f      	movs	r0, #15
 8008ffc:	f000 f814 	bl	8009028 <HAL_InitTick>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e002      	b.n	8009010 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800900a:	f7ff f9b3 	bl	8008374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	58024400 	.word	0x58024400
 800901c:	0801ebd4 	.word	0x0801ebd4
 8009020:	24000008 	.word	0x24000008
 8009024:	24000004 	.word	0x24000004

08009028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009030:	4b15      	ldr	r3, [pc, #84]	@ (8009088 <HAL_InitTick+0x60>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e021      	b.n	8009080 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800903c:	4b13      	ldr	r3, [pc, #76]	@ (800908c <HAL_InitTick+0x64>)
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	4b11      	ldr	r3, [pc, #68]	@ (8009088 <HAL_InitTick+0x60>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	4619      	mov	r1, r3
 8009046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800904a:	fbb3 f3f1 	udiv	r3, r3, r1
 800904e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009052:	4618      	mov	r0, r3
 8009054:	f002 f8e3 	bl	800b21e <HAL_SYSTICK_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e00e      	b.n	8009080 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b0f      	cmp	r3, #15
 8009066:	d80a      	bhi.n	800907e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009068:	2200      	movs	r2, #0
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	f04f 30ff 	mov.w	r0, #4294967295
 8009070:	f002 f8ad 	bl	800b1ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009074:	4a06      	ldr	r2, [pc, #24]	@ (8009090 <HAL_InitTick+0x68>)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	e000      	b.n	8009080 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	24000010 	.word	0x24000010
 800908c:	24000004 	.word	0x24000004
 8009090:	2400000c 	.word	0x2400000c

08009094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009098:	4b06      	ldr	r3, [pc, #24]	@ (80090b4 <HAL_IncTick+0x20>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	4b06      	ldr	r3, [pc, #24]	@ (80090b8 <HAL_IncTick+0x24>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4413      	add	r3, r2
 80090a4:	4a04      	ldr	r2, [pc, #16]	@ (80090b8 <HAL_IncTick+0x24>)
 80090a6:	6013      	str	r3, [r2, #0]
}
 80090a8:	bf00      	nop
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	24000010 	.word	0x24000010
 80090b8:	24000544 	.word	0x24000544

080090bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  return uwTick;
 80090c0:	4b03      	ldr	r3, [pc, #12]	@ (80090d0 <HAL_GetTick+0x14>)
 80090c2:	681b      	ldr	r3, [r3, #0]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	24000544 	.word	0x24000544

080090d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090dc:	f7ff ffee 	bl	80090bc <HAL_GetTick>
 80090e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ec:	d005      	beq.n	80090fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009118 <HAL_Delay+0x44>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090fa:	bf00      	nop
 80090fc:	f7ff ffde 	bl	80090bc <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	429a      	cmp	r2, r3
 800910a:	d8f7      	bhi.n	80090fc <HAL_Delay+0x28>
  {
  }
}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	24000010 	.word	0x24000010

0800911c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	609a      	str	r2, [r3, #8]
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	431a      	orrs	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	609a      	str	r2, [r3, #8]
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a18      	ldr	r2, [pc, #96]	@ (80091f4 <LL_ADC_SetChannelPreselection+0x70>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d027      	beq.n	80091e6 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800919c:	2b00      	cmp	r3, #0
 800919e:	d107      	bne.n	80091b0 <LL_ADC_SetChannelPreselection+0x2c>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	0e9b      	lsrs	r3, r3, #26
 80091a4:	f003 031f 	and.w	r3, r3, #31
 80091a8:	2201      	movs	r2, #1
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	e015      	b.n	80091dc <LL_ADC_SetChannelPreselection+0x58>
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	fa93 f3a3 	rbit	r3, r3
 80091ba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80091c6:	2320      	movs	r3, #32
 80091c8:	e003      	b.n	80091d2 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	fab3 f383 	clz	r3, r3
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 031f 	and.w	r3, r3, #31
 80091d6:	2201      	movs	r2, #1
 80091d8:	fa02 f303 	lsl.w	r3, r2, r3
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	69d2      	ldr	r2, [r2, #28]
 80091e0:	431a      	orrs	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	58026000 	.word	0x58026000

080091f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3360      	adds	r3, #96	@ 0x60
 800920a:	461a      	mov	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4a10      	ldr	r2, [pc, #64]	@ (8009258 <LL_ADC_SetOffset+0x60>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d10b      	bne.n	8009234 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	4313      	orrs	r3, r2
 800922a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8009232:	e00b      	b.n	800924c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	430b      	orrs	r3, r1
 8009246:	431a      	orrs	r2, r3
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	601a      	str	r2, [r3, #0]
}
 800924c:	bf00      	nop
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	58026000 	.word	0x58026000

0800925c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3360      	adds	r3, #96	@ 0x60
 800926a:	461a      	mov	r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f003 031f 	and.w	r3, r3, #31
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	fa01 f303 	lsl.w	r3, r1, r3
 80092a8:	431a      	orrs	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	611a      	str	r2, [r3, #16]
}
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
	...

080092bc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4a0c      	ldr	r2, [pc, #48]	@ (80092fc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d00e      	beq.n	80092ee <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3360      	adds	r3, #96	@ 0x60
 80092d4:	461a      	mov	r2, r3
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	431a      	orrs	r2, r3
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	601a      	str	r2, [r3, #0]
  }
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	58026000 	.word	0x58026000

08009300 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4a0c      	ldr	r2, [pc, #48]	@ (8009340 <LL_ADC_SetOffsetSaturation+0x40>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d10e      	bne.n	8009332 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3360      	adds	r3, #96	@ 0x60
 8009318:	461a      	mov	r2, r3
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	431a      	orrs	r2, r3
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8009332:	bf00      	nop
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	58026000 	.word	0x58026000

08009344 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009344:	b480      	push	{r7}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4a0c      	ldr	r2, [pc, #48]	@ (8009384 <LL_ADC_SetOffsetSign+0x40>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d10e      	bne.n	8009376 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3360      	adds	r3, #96	@ 0x60
 800935c:	461a      	mov	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	431a      	orrs	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8009376:	bf00      	nop
 8009378:	371c      	adds	r7, #28
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	58026000 	.word	0x58026000

08009388 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3360      	adds	r3, #96	@ 0x60
 8009398:	461a      	mov	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4a0c      	ldr	r2, [pc, #48]	@ (80093d8 <LL_ADC_SetOffsetState+0x50>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d108      	bne.n	80093bc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	431a      	orrs	r2, r3
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80093ba:	e007      	b.n	80093cc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	601a      	str	r2, [r3, #0]
}
 80093cc:	bf00      	nop
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	58026000 	.word	0x58026000

080093dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e000      	b.n	80093f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009402:	b480      	push	{r7}
 8009404:	b087      	sub	sp, #28
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3330      	adds	r3, #48	@ 0x30
 8009412:	461a      	mov	r2, r3
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	0a1b      	lsrs	r3, r3, #8
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	f003 030c 	and.w	r3, r3, #12
 800941e:	4413      	add	r3, r2
 8009420:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f003 031f 	and.w	r3, r3, #31
 800942c:	211f      	movs	r1, #31
 800942e:	fa01 f303 	lsl.w	r3, r1, r3
 8009432:	43db      	mvns	r3, r3
 8009434:	401a      	ands	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	0e9b      	lsrs	r3, r3, #26
 800943a:	f003 011f 	and.w	r1, r3, #31
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f003 031f 	and.w	r3, r3, #31
 8009444:	fa01 f303 	lsl.w	r3, r1, r3
 8009448:	431a      	orrs	r2, r3
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800944e:	bf00      	nop
 8009450:	371c      	adds	r7, #28
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f023 0203 	bic.w	r2, r3, #3
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60da      	str	r2, [r3, #12]
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f043 0201 	orr.w	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	60da      	str	r2, [r3, #12]
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a08      	ldr	r2, [pc, #32]	@ (80094d0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d107      	bne.n	80094c2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f023 0203 	bic.w	r2, r3, #3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60da      	str	r2, [r3, #12]
  }
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	58026000 	.word	0x58026000

080094d4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094e0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80094e8:	2301      	movs	r3, #1
 80094ea:	e000      	b.n	80094ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b087      	sub	sp, #28
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3314      	adds	r3, #20
 800950a:	461a      	mov	r2, r3
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	0e5b      	lsrs	r3, r3, #25
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	f003 0304 	and.w	r3, r3, #4
 8009516:	4413      	add	r3, r2
 8009518:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	0d1b      	lsrs	r3, r3, #20
 8009522:	f003 031f 	and.w	r3, r3, #31
 8009526:	2107      	movs	r1, #7
 8009528:	fa01 f303 	lsl.w	r3, r1, r3
 800952c:	43db      	mvns	r3, r3
 800952e:	401a      	ands	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	0d1b      	lsrs	r3, r3, #20
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	431a      	orrs	r2, r3
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009544:	bf00      	nop
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4a1a      	ldr	r2, [pc, #104]	@ (80095c8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d115      	bne.n	8009590 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009570:	43db      	mvns	r3, r3
 8009572:	401a      	ands	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f003 0318 	and.w	r3, r3, #24
 800957a:	4914      	ldr	r1, [pc, #80]	@ (80095cc <LL_ADC_SetChannelSingleDiff+0x7c>)
 800957c:	40d9      	lsrs	r1, r3
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	400b      	ands	r3, r1
 8009582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009586:	431a      	orrs	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800958e:	e014      	b.n	80095ba <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800959c:	43db      	mvns	r3, r3
 800959e:	401a      	ands	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f003 0318 	and.w	r3, r3, #24
 80095a6:	4909      	ldr	r1, [pc, #36]	@ (80095cc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80095a8:	40d9      	lsrs	r1, r3
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	400b      	ands	r3, r1
 80095ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095b2:	431a      	orrs	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	58026000 	.word	0x58026000
 80095cc:	000fffff 	.word	0x000fffff

080095d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f003 031f 	and.w	r3, r3, #31
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009616:	4013      	ands	r3, r2
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6093      	str	r3, [r2, #8]
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	5fffffc0 	.word	0x5fffffc0

0800962c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800963c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009640:	d101      	bne.n	8009646 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009642:	2301      	movs	r3, #1
 8009644:	e000      	b.n	8009648 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	4b05      	ldr	r3, [pc, #20]	@ (8009678 <LL_ADC_EnableInternalRegulator+0x24>)
 8009662:	4013      	ands	r3, r2
 8009664:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	6fffffc0 	.word	0x6fffffc0

0800967c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800968c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009690:	d101      	bne.n	8009696 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689a      	ldr	r2, [r3, #8]
 80096b0:	4b05      	ldr	r3, [pc, #20]	@ (80096c8 <LL_ADC_Enable+0x24>)
 80096b2:	4013      	ands	r3, r2
 80096b4:	f043 0201 	orr.w	r2, r3, #1
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	7fffffc0 	.word	0x7fffffc0

080096cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d101      	bne.n	80096e4 <LL_ADC_IsEnabled+0x18>
 80096e0:	2301      	movs	r3, #1
 80096e2:	e000      	b.n	80096e6 <LL_ADC_IsEnabled+0x1a>
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	4b05      	ldr	r3, [pc, #20]	@ (8009718 <LL_ADC_REG_StartConversion+0x24>)
 8009702:	4013      	ands	r3, r2
 8009704:	f043 0204 	orr.w	r2, r3, #4
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	7fffffc0 	.word	0x7fffffc0

0800971c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b04      	cmp	r3, #4
 800972e:	d101      	bne.n	8009734 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 0308 	and.w	r3, r3, #8
 8009752:	2b08      	cmp	r3, #8
 8009754:	d101      	bne.n	800975a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009756:	2301      	movs	r3, #1
 8009758:	e000      	b.n	800975c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009768:	b590      	push	{r4, r7, lr}
 800976a:	b089      	sub	sp, #36	@ 0x24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009774:	2300      	movs	r3, #0
 8009776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e1ee      	b.n	8009b60 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7f9 ffaf 	bl	80036f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff ff3f 	bl	800962c <LL_ADC_IsDeepPowerDownEnabled>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d004      	beq.n	80097be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff ff25 	bl	8009608 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7ff ff5a 	bl	800967c <LL_ADC_IsInternalRegulatorEnabled>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d114      	bne.n	80097f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff ff3e 	bl	8009654 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80097d8:	4b8e      	ldr	r3, [pc, #568]	@ (8009a14 <HAL_ADC_Init+0x2ac>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	099b      	lsrs	r3, r3, #6
 80097de:	4a8e      	ldr	r2, [pc, #568]	@ (8009a18 <HAL_ADC_Init+0x2b0>)
 80097e0:	fba2 2303 	umull	r2, r3, r2, r3
 80097e4:	099b      	lsrs	r3, r3, #6
 80097e6:	3301      	adds	r3, #1
 80097e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80097ea:	e002      	b.n	80097f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1f9      	bne.n	80097ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff ff3d 	bl	800967c <LL_ADC_IsInternalRegulatorEnabled>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10d      	bne.n	8009824 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800980c:	f043 0210 	orr.w	r2, r3, #16
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009818:	f043 0201 	orr.w	r2, r3, #1
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff ff77 	bl	800971c <LL_ADC_REG_IsConversionOngoing>
 800982e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	f040 8188 	bne.w	8009b4e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 8184 	bne.w	8009b4e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800984a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800984e:	f043 0202 	orr.w	r2, r3, #2
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff ff36 	bl	80096cc <LL_ADC_IsEnabled>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d136      	bne.n	80098d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a6c      	ldr	r2, [pc, #432]	@ (8009a1c <HAL_ADC_Init+0x2b4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d004      	beq.n	800987a <HAL_ADC_Init+0x112>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a6a      	ldr	r2, [pc, #424]	@ (8009a20 <HAL_ADC_Init+0x2b8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d10e      	bne.n	8009898 <HAL_ADC_Init+0x130>
 800987a:	4868      	ldr	r0, [pc, #416]	@ (8009a1c <HAL_ADC_Init+0x2b4>)
 800987c:	f7ff ff26 	bl	80096cc <LL_ADC_IsEnabled>
 8009880:	4604      	mov	r4, r0
 8009882:	4867      	ldr	r0, [pc, #412]	@ (8009a20 <HAL_ADC_Init+0x2b8>)
 8009884:	f7ff ff22 	bl	80096cc <LL_ADC_IsEnabled>
 8009888:	4603      	mov	r3, r0
 800988a:	4323      	orrs	r3, r4
 800988c:	2b00      	cmp	r3, #0
 800988e:	bf0c      	ite	eq
 8009890:	2301      	moveq	r3, #1
 8009892:	2300      	movne	r3, #0
 8009894:	b2db      	uxtb	r3, r3
 8009896:	e008      	b.n	80098aa <HAL_ADC_Init+0x142>
 8009898:	4862      	ldr	r0, [pc, #392]	@ (8009a24 <HAL_ADC_Init+0x2bc>)
 800989a:	f7ff ff17 	bl	80096cc <LL_ADC_IsEnabled>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bf0c      	ite	eq
 80098a4:	2301      	moveq	r3, #1
 80098a6:	2300      	movne	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d012      	beq.n	80098d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a5a      	ldr	r2, [pc, #360]	@ (8009a1c <HAL_ADC_Init+0x2b4>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d004      	beq.n	80098c2 <HAL_ADC_Init+0x15a>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a58      	ldr	r2, [pc, #352]	@ (8009a20 <HAL_ADC_Init+0x2b8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d101      	bne.n	80098c6 <HAL_ADC_Init+0x15e>
 80098c2:	4a59      	ldr	r2, [pc, #356]	@ (8009a28 <HAL_ADC_Init+0x2c0>)
 80098c4:	e000      	b.n	80098c8 <HAL_ADC_Init+0x160>
 80098c6:	4a59      	ldr	r2, [pc, #356]	@ (8009a2c <HAL_ADC_Init+0x2c4>)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	4619      	mov	r1, r3
 80098ce:	4610      	mov	r0, r2
 80098d0:	f7ff fc24 	bl	800911c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a52      	ldr	r2, [pc, #328]	@ (8009a24 <HAL_ADC_Init+0x2bc>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d129      	bne.n	8009932 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	7e5b      	ldrb	r3, [r3, #25]
 80098e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80098e8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80098ee:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d013      	beq.n	8009920 <HAL_ADC_Init+0x1b8>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b0c      	cmp	r3, #12
 80098fe:	d00d      	beq.n	800991c <HAL_ADC_Init+0x1b4>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	2b1c      	cmp	r3, #28
 8009906:	d007      	beq.n	8009918 <HAL_ADC_Init+0x1b0>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	2b18      	cmp	r3, #24
 800990e:	d101      	bne.n	8009914 <HAL_ADC_Init+0x1ac>
 8009910:	2318      	movs	r3, #24
 8009912:	e006      	b.n	8009922 <HAL_ADC_Init+0x1ba>
 8009914:	2300      	movs	r3, #0
 8009916:	e004      	b.n	8009922 <HAL_ADC_Init+0x1ba>
 8009918:	2310      	movs	r3, #16
 800991a:	e002      	b.n	8009922 <HAL_ADC_Init+0x1ba>
 800991c:	2308      	movs	r3, #8
 800991e:	e000      	b.n	8009922 <HAL_ADC_Init+0x1ba>
 8009920:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009922:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800992a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800992c:	4313      	orrs	r3, r2
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	e00e      	b.n	8009950 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	7e5b      	ldrb	r3, [r3, #25]
 8009936:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800993c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009942:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800994a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800994c:	4313      	orrs	r3, r2
 800994e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d106      	bne.n	8009968 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995e:	3b01      	subs	r3, #1
 8009960:	045b      	lsls	r3, r3, #17
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	4313      	orrs	r3, r2
 8009966:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996c:	2b00      	cmp	r3, #0
 800996e:	d009      	beq.n	8009984 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009974:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	4313      	orrs	r3, r2
 8009982:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a26      	ldr	r2, [pc, #152]	@ (8009a24 <HAL_ADC_Init+0x2bc>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d115      	bne.n	80099ba <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	4b26      	ldr	r3, [pc, #152]	@ (8009a30 <HAL_ADC_Init+0x2c8>)
 8009996:	4013      	ands	r3, r2
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	69b9      	ldr	r1, [r7, #24]
 800999e:	430b      	orrs	r3, r1
 80099a0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	611a      	str	r2, [r3, #16]
 80099b8:	e009      	b.n	80099ce <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009a34 <HAL_ADC_Init+0x2cc>)
 80099c2:	4013      	ands	r3, r2
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	69b9      	ldr	r1, [r7, #24]
 80099ca:	430b      	orrs	r3, r1
 80099cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff fea2 	bl	800971c <LL_ADC_REG_IsConversionOngoing>
 80099d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff feaf 	bl	8009742 <LL_ADC_INJ_IsConversionOngoing>
 80099e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f040 808e 	bne.w	8009b0a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f040 808a 	bne.w	8009b0a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009a24 <HAL_ADC_Init+0x2bc>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d11b      	bne.n	8009a38 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7e1b      	ldrb	r3, [r3, #24]
 8009a04:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009a0c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	e018      	b.n	8009a46 <HAL_ADC_Init+0x2de>
 8009a14:	24000004 	.word	0x24000004
 8009a18:	053e2d63 	.word	0x053e2d63
 8009a1c:	40022000 	.word	0x40022000
 8009a20:	40022100 	.word	0x40022100
 8009a24:	58026000 	.word	0x58026000
 8009a28:	40022300 	.word	0x40022300
 8009a2c:	58026300 	.word	0x58026300
 8009a30:	fff04007 	.word	0xfff04007
 8009a34:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	7e1b      	ldrb	r3, [r3, #24]
 8009a3c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009a42:	4313      	orrs	r3, r2
 8009a44:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	4b46      	ldr	r3, [pc, #280]	@ (8009b68 <HAL_ADC_Init+0x400>)
 8009a4e:	4013      	ands	r3, r2
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	69b9      	ldr	r1, [r7, #24]
 8009a56:	430b      	orrs	r3, r1
 8009a58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d137      	bne.n	8009ad4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a68:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8009b6c <HAL_ADC_Init+0x404>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d116      	bne.n	8009aa2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	691a      	ldr	r2, [r3, #16]
 8009a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8009b70 <HAL_ADC_Init+0x408>)
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009a86:	4311      	orrs	r1, r2
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009a8c:	4311      	orrs	r1, r2
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009a92:	430a      	orrs	r2, r1
 8009a94:	431a      	orrs	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	611a      	str	r2, [r3, #16]
 8009aa0:	e020      	b.n	8009ae4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	4b32      	ldr	r3, [pc, #200]	@ (8009b74 <HAL_ADC_Init+0x40c>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ab0:	3a01      	subs	r2, #1
 8009ab2:	0411      	lsls	r1, r2, #16
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009ab8:	4311      	orrs	r1, r2
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009abe:	4311      	orrs	r1, r2
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0201 	orr.w	r2, r2, #1
 8009ad0:	611a      	str	r2, [r3, #16]
 8009ad2:	e007      	b.n	8009ae4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	691a      	ldr	r2, [r3, #16]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0201 	bic.w	r2, r2, #1
 8009ae2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a1b      	ldr	r2, [pc, #108]	@ (8009b6c <HAL_ADC_Init+0x404>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d002      	beq.n	8009b0a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 f967 	bl	800add8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d10c      	bne.n	8009b2c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b18:	f023 010f 	bic.w	r1, r3, #15
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	1e5a      	subs	r2, r3, #1
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b2a:	e007      	b.n	8009b3c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f022 020f 	bic.w	r2, r2, #15
 8009b3a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b40:	f023 0303 	bic.w	r3, r3, #3
 8009b44:	f043 0201 	orr.w	r2, r3, #1
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b4c:	e007      	b.n	8009b5e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b52:	f043 0210 	orr.w	r2, r3, #16
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3724      	adds	r7, #36	@ 0x24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd90      	pop	{r4, r7, pc}
 8009b68:	ffffbffc 	.word	0xffffbffc
 8009b6c:	58026000 	.word	0x58026000
 8009b70:	fc00f81f 	.word	0xfc00f81f
 8009b74:	fc00f81e 	.word	0xfc00f81e

08009b78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a60      	ldr	r2, [pc, #384]	@ (8009d0c <HAL_ADC_Start_DMA+0x194>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d004      	beq.n	8009b98 <HAL_ADC_Start_DMA+0x20>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a5f      	ldr	r2, [pc, #380]	@ (8009d10 <HAL_ADC_Start_DMA+0x198>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d101      	bne.n	8009b9c <HAL_ADC_Start_DMA+0x24>
 8009b98:	4b5e      	ldr	r3, [pc, #376]	@ (8009d14 <HAL_ADC_Start_DMA+0x19c>)
 8009b9a:	e000      	b.n	8009b9e <HAL_ADC_Start_DMA+0x26>
 8009b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8009d18 <HAL_ADC_Start_DMA+0x1a0>)
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff fd16 	bl	80095d0 <LL_ADC_GetMultimode>
 8009ba4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff fdb6 	bl	800971c <LL_ADC_REG_IsConversionOngoing>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f040 80a2 	bne.w	8009cfc <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d101      	bne.n	8009bc6 <HAL_ADC_Start_DMA+0x4e>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e09d      	b.n	8009d02 <HAL_ADC_Start_DMA+0x18a>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d006      	beq.n	8009be2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	2b05      	cmp	r3, #5
 8009bd8:	d003      	beq.n	8009be2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	f040 8086 	bne.w	8009cee <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 ffda 	bl	800ab9c <ADC_Enable>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d178      	bne.n	8009ce4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009bf6:	4b49      	ldr	r3, [pc, #292]	@ (8009d1c <HAL_ADC_Start_DMA+0x1a4>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a42      	ldr	r2, [pc, #264]	@ (8009d10 <HAL_ADC_Start_DMA+0x198>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d002      	beq.n	8009c12 <HAL_ADC_Start_DMA+0x9a>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	e000      	b.n	8009c14 <HAL_ADC_Start_DMA+0x9c>
 8009c12:	4b3e      	ldr	r3, [pc, #248]	@ (8009d0c <HAL_ADC_Start_DMA+0x194>)
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d002      	beq.n	8009c22 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c26:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d006      	beq.n	8009c48 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c3e:	f023 0206 	bic.w	r2, r3, #6
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	665a      	str	r2, [r3, #100]	@ 0x64
 8009c46:	e002      	b.n	8009c4e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c52:	4a33      	ldr	r2, [pc, #204]	@ (8009d20 <HAL_ADC_Start_DMA+0x1a8>)
 8009c54:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c5a:	4a32      	ldr	r2, [pc, #200]	@ (8009d24 <HAL_ADC_Start_DMA+0x1ac>)
 8009c5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c62:	4a31      	ldr	r2, [pc, #196]	@ (8009d28 <HAL_ADC_Start_DMA+0x1b0>)
 8009c64:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	221c      	movs	r2, #28
 8009c6c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 0210 	orr.w	r2, r2, #16
 8009c84:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a28      	ldr	r2, [pc, #160]	@ (8009d2c <HAL_ADC_Start_DMA+0x1b4>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d10f      	bne.n	8009cb0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	f7ff fbfe 	bl	80094a0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff fbe9 	bl	8009480 <LL_ADC_EnableDMAReq>
 8009cae:	e007      	b.n	8009cc0 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7ff fbcd 	bl	800945a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3340      	adds	r3, #64	@ 0x40
 8009cca:	4619      	mov	r1, r3
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f001 fe82 	bl	800b9d8 <HAL_DMA_Start_IT>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff fd09 	bl	80096f4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009ce2:	e00d      	b.n	8009d00 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8009cec:	e008      	b.n	8009d00 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009cfa:	e001      	b.n	8009d00 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	40022000 	.word	0x40022000
 8009d10:	40022100 	.word	0x40022100
 8009d14:	40022300 	.word	0x40022300
 8009d18:	58026300 	.word	0x58026300
 8009d1c:	fffff0fe 	.word	0xfffff0fe
 8009d20:	0800acb1 	.word	0x0800acb1
 8009d24:	0800ad89 	.word	0x0800ad89
 8009d28:	0800ada5 	.word	0x0800ada5
 8009d2c:	58026000 	.word	0x58026000

08009d30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	@ 0x28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009d38:	2300      	movs	r3, #0
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a87      	ldr	r2, [pc, #540]	@ (8009f70 <HAL_ADC_IRQHandler+0x240>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d004      	beq.n	8009d60 <HAL_ADC_IRQHandler+0x30>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a86      	ldr	r2, [pc, #536]	@ (8009f74 <HAL_ADC_IRQHandler+0x244>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d101      	bne.n	8009d64 <HAL_ADC_IRQHandler+0x34>
 8009d60:	4b85      	ldr	r3, [pc, #532]	@ (8009f78 <HAL_ADC_IRQHandler+0x248>)
 8009d62:	e000      	b.n	8009d66 <HAL_ADC_IRQHandler+0x36>
 8009d64:	4b85      	ldr	r3, [pc, #532]	@ (8009f7c <HAL_ADC_IRQHandler+0x24c>)
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff fc32 	bl	80095d0 <LL_ADC_GetMultimode>
 8009d6c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d017      	beq.n	8009da8 <HAL_ADC_IRQHandler+0x78>
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d012      	beq.n	8009da8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d86:	f003 0310 	and.w	r3, r3, #16
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d105      	bne.n	8009d9a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d92:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 f932 	bl	800b004 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2202      	movs	r2, #2
 8009da6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	f003 0304 	and.w	r3, r3, #4
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d004      	beq.n	8009dbc <HAL_ADC_IRQHandler+0x8c>
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 8083 	beq.w	8009ece <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d07d      	beq.n	8009ece <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dd6:	f003 0310 	and.w	r3, r3, #16
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d105      	bne.n	8009dea <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009de2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff faf4 	bl	80093dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d062      	beq.n	8009ec0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a5d      	ldr	r2, [pc, #372]	@ (8009f74 <HAL_ADC_IRQHandler+0x244>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d002      	beq.n	8009e0a <HAL_ADC_IRQHandler+0xda>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	e000      	b.n	8009e0c <HAL_ADC_IRQHandler+0xdc>
 8009e0a:	4b59      	ldr	r3, [pc, #356]	@ (8009f70 <HAL_ADC_IRQHandler+0x240>)
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6812      	ldr	r2, [r2, #0]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d008      	beq.n	8009e26 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b05      	cmp	r3, #5
 8009e1e:	d002      	beq.n	8009e26 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2b09      	cmp	r3, #9
 8009e24:	d104      	bne.n	8009e30 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	623b      	str	r3, [r7, #32]
 8009e2e:	e00c      	b.n	8009e4a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a4f      	ldr	r2, [pc, #316]	@ (8009f74 <HAL_ADC_IRQHandler+0x244>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d002      	beq.n	8009e40 <HAL_ADC_IRQHandler+0x110>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	e000      	b.n	8009e42 <HAL_ADC_IRQHandler+0x112>
 8009e40:	4b4b      	ldr	r3, [pc, #300]	@ (8009f70 <HAL_ADC_IRQHandler+0x240>)
 8009e42:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d135      	bne.n	8009ec0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b08      	cmp	r3, #8
 8009e60:	d12e      	bne.n	8009ec0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff fc58 	bl	800971c <LL_ADC_REG_IsConversionOngoing>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d11a      	bne.n	8009ea8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f022 020c 	bic.w	r2, r2, #12
 8009e80:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d112      	bne.n	8009ec0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e9e:	f043 0201 	orr.w	r2, r3, #1
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	661a      	str	r2, [r3, #96]	@ 0x60
 8009ea6:	e00b      	b.n	8009ec0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eac:	f043 0210 	orr.w	r2, r3, #16
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eb8:	f043 0201 	orr.w	r2, r3, #1
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f96f 	bl	800a1a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	220c      	movs	r2, #12
 8009ecc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	f003 0320 	and.w	r3, r3, #32
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d004      	beq.n	8009ee2 <HAL_ADC_IRQHandler+0x1b2>
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 80a0 	beq.w	800a02e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 809a 	beq.w	800a02e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009efe:	f003 0310 	and.w	r3, r3, #16
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d105      	bne.n	8009f12 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f0a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff fadc 	bl	80094d4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009f1c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff fa5a 	bl	80093dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8009f28:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a11      	ldr	r2, [pc, #68]	@ (8009f74 <HAL_ADC_IRQHandler+0x244>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d002      	beq.n	8009f3a <HAL_ADC_IRQHandler+0x20a>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	e000      	b.n	8009f3c <HAL_ADC_IRQHandler+0x20c>
 8009f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f70 <HAL_ADC_IRQHandler+0x240>)
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	6812      	ldr	r2, [r2, #0]
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d008      	beq.n	8009f56 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b06      	cmp	r3, #6
 8009f4e:	d002      	beq.n	8009f56 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b07      	cmp	r3, #7
 8009f54:	d104      	bne.n	8009f60 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	623b      	str	r3, [r7, #32]
 8009f5e:	e014      	b.n	8009f8a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a03      	ldr	r2, [pc, #12]	@ (8009f74 <HAL_ADC_IRQHandler+0x244>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d00a      	beq.n	8009f80 <HAL_ADC_IRQHandler+0x250>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	e008      	b.n	8009f82 <HAL_ADC_IRQHandler+0x252>
 8009f70:	40022000 	.word	0x40022000
 8009f74:	40022100 	.word	0x40022100
 8009f78:	40022300 	.word	0x40022300
 8009f7c:	58026300 	.word	0x58026300
 8009f80:	4b84      	ldr	r3, [pc, #528]	@ (800a194 <HAL_ADC_IRQHandler+0x464>)
 8009f82:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d047      	beq.n	800a020 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d007      	beq.n	8009faa <HAL_ADC_IRQHandler+0x27a>
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d03f      	beq.n	800a020 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d13a      	bne.n	800a020 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb4:	2b40      	cmp	r3, #64	@ 0x40
 8009fb6:	d133      	bne.n	800a020 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d12e      	bne.n	800a020 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fbbb 	bl	8009742 <LL_ADC_INJ_IsConversionOngoing>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d11a      	bne.n	800a008 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009fe0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fe6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d112      	bne.n	800a020 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ffe:	f043 0201 	orr.w	r2, r3, #1
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	661a      	str	r2, [r3, #96]	@ 0x60
 800a006:	e00b      	b.n	800a020 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a00c:	f043 0210 	orr.w	r2, r3, #16
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a018:	f043 0201 	orr.w	r2, r3, #1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 ffc7 	bl	800afb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2260      	movs	r2, #96	@ 0x60
 800a02c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a034:	2b00      	cmp	r3, #0
 800a036:	d011      	beq.n	800a05c <HAL_ADC_IRQHandler+0x32c>
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00c      	beq.n	800a05c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a046:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f8bc 	bl	800a1cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2280      	movs	r2, #128	@ 0x80
 800a05a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a062:	2b00      	cmp	r3, #0
 800a064:	d012      	beq.n	800a08c <HAL_ADC_IRQHandler+0x35c>
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00d      	beq.n	800a08c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a074:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 ffad 	bl	800afdc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a08a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a092:	2b00      	cmp	r3, #0
 800a094:	d012      	beq.n	800a0bc <HAL_ADC_IRQHandler+0x38c>
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00d      	beq.n	800a0bc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 ff9f 	bl	800aff0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	f003 0310 	and.w	r3, r3, #16
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d043      	beq.n	800a14e <HAL_ADC_IRQHandler+0x41e>
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f003 0310 	and.w	r3, r3, #16
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d03e      	beq.n	800a14e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d102      	bne.n	800a0de <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0dc:	e021      	b.n	800a122 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d015      	beq.n	800a110 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a2a      	ldr	r2, [pc, #168]	@ (800a194 <HAL_ADC_IRQHandler+0x464>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d004      	beq.n	800a0f8 <HAL_ADC_IRQHandler+0x3c8>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a29      	ldr	r2, [pc, #164]	@ (800a198 <HAL_ADC_IRQHandler+0x468>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d101      	bne.n	800a0fc <HAL_ADC_IRQHandler+0x3cc>
 800a0f8:	4b28      	ldr	r3, [pc, #160]	@ (800a19c <HAL_ADC_IRQHandler+0x46c>)
 800a0fa:	e000      	b.n	800a0fe <HAL_ADC_IRQHandler+0x3ce>
 800a0fc:	4b28      	ldr	r3, [pc, #160]	@ (800a1a0 <HAL_ADC_IRQHandler+0x470>)
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff fa74 	bl	80095ec <LL_ADC_GetMultiDMATransfer>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00b      	beq.n	800a122 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a10a:	2301      	movs	r3, #1
 800a10c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a10e:	e008      	b.n	800a122 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	f003 0303 	and.w	r3, r3, #3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a11e:	2301      	movs	r3, #1
 800a120:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	2b01      	cmp	r3, #1
 800a126:	d10e      	bne.n	800a146 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a12c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a138:	f043 0202 	orr.w	r2, r3, #2
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f84d 	bl	800a1e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2210      	movs	r2, #16
 800a14c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a154:	2b00      	cmp	r3, #0
 800a156:	d018      	beq.n	800a18a <HAL_ADC_IRQHandler+0x45a>
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d013      	beq.n	800a18a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a166:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a172:	f043 0208 	orr.w	r2, r3, #8
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a182:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 ff1f 	bl	800afc8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a18a:	bf00      	nop
 800a18c:	3728      	adds	r7, #40	@ 0x28
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	40022000 	.word	0x40022000
 800a198:	40022100 	.word	0x40022100
 800a19c:	40022300 	.word	0x40022300
 800a1a0:	58026300 	.word	0x58026300

0800a1a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a1f4:	b590      	push	{r4, r7, lr}
 800a1f6:	b0a5      	sub	sp, #148	@ 0x94
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a20e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	4aa4      	ldr	r2, [pc, #656]	@ (800a4a8 <HAL_ADC_ConfigChannel+0x2b4>)
 800a216:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d102      	bne.n	800a228 <HAL_ADC_ConfigChannel+0x34>
 800a222:	2302      	movs	r3, #2
 800a224:	f000 bca2 	b.w	800ab6c <HAL_ADC_ConfigChannel+0x978>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff fa71 	bl	800971c <LL_ADC_REG_IsConversionOngoing>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f040 8486 	bne.w	800ab4e <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	db31      	blt.n	800a2ae <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a97      	ldr	r2, [pc, #604]	@ (800a4ac <HAL_ADC_ConfigChannel+0x2b8>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d02c      	beq.n	800a2ae <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d108      	bne.n	800a272 <HAL_ADC_ConfigChannel+0x7e>
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	0e9b      	lsrs	r3, r3, #26
 800a266:	f003 031f 	and.w	r3, r3, #31
 800a26a:	2201      	movs	r2, #1
 800a26c:	fa02 f303 	lsl.w	r3, r2, r3
 800a270:	e016      	b.n	800a2a0 <HAL_ADC_ConfigChannel+0xac>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a27a:	fa93 f3a3 	rbit	r3, r3
 800a27e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a282:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a28a:	2320      	movs	r3, #32
 800a28c:	e003      	b.n	800a296 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a28e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a290:	fab3 f383 	clz	r3, r3
 800a294:	b2db      	uxtb	r3, r3
 800a296:	f003 031f 	and.w	r3, r3, #31
 800a29a:	2201      	movs	r2, #1
 800a29c:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6812      	ldr	r2, [r2, #0]
 800a2a4:	69d1      	ldr	r1, [r2, #28]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6859      	ldr	r1, [r3, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f7ff f8a1 	bl	8009402 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7ff fa29 	bl	800971c <LL_ADC_REG_IsConversionOngoing>
 800a2ca:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7ff fa35 	bl	8009742 <LL_ADC_INJ_IsConversionOngoing>
 800a2d8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a2dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f040 824a 	bne.w	800a77a <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a2e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f040 8245 	bne.w	800a77a <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	6819      	ldr	r1, [r3, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f7ff f8fc 	bl	80094fa <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a69      	ldr	r2, [pc, #420]	@ (800a4ac <HAL_ADC_ConfigChannel+0x2b8>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d10d      	bne.n	800a328 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	695a      	ldr	r2, [r3, #20]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	08db      	lsrs	r3, r3, #3
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	fa02 f303 	lsl.w	r3, r2, r3
 800a322:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a326:	e032      	b.n	800a38e <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a328:	4b61      	ldr	r3, [pc, #388]	@ (800a4b0 <HAL_ADC_ConfigChannel+0x2bc>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a334:	d10b      	bne.n	800a34e <HAL_ADC_ConfigChannel+0x15a>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	695a      	ldr	r2, [r3, #20]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	089b      	lsrs	r3, r3, #2
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	fa02 f303 	lsl.w	r3, r2, r3
 800a34c:	e01d      	b.n	800a38a <HAL_ADC_ConfigChannel+0x196>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f003 0310 	and.w	r3, r3, #16
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10b      	bne.n	800a374 <HAL_ADC_ConfigChannel+0x180>
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	695a      	ldr	r2, [r3, #20]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	089b      	lsrs	r3, r3, #2
 800a368:	f003 0307 	and.w	r3, r3, #7
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	fa02 f303 	lsl.w	r3, r2, r3
 800a372:	e00a      	b.n	800a38a <HAL_ADC_ConfigChannel+0x196>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	695a      	ldr	r2, [r3, #20]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	089b      	lsrs	r3, r3, #2
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	fa02 f303 	lsl.w	r3, r2, r3
 800a38a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	2b04      	cmp	r3, #4
 800a394:	d048      	beq.n	800a428 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	6919      	ldr	r1, [r3, #16]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3a6:	f7fe ff27 	bl	80091f8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a3f      	ldr	r2, [pc, #252]	@ (800a4ac <HAL_ADC_ConfigChannel+0x2b8>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d119      	bne.n	800a3e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	6919      	ldr	r1, [r3, #16]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f7fe ffbf 	bl	8009344 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	6919      	ldr	r1, [r3, #16]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d102      	bne.n	800a3de <HAL_ADC_ConfigChannel+0x1ea>
 800a3d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a3dc:	e000      	b.n	800a3e0 <HAL_ADC_ConfigChannel+0x1ec>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f7fe ff8d 	bl	8009300 <LL_ADC_SetOffsetSaturation>
 800a3e6:	e1c8      	b.n	800a77a <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	6919      	ldr	r1, [r3, #16]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d102      	bne.n	800a400 <HAL_ADC_ConfigChannel+0x20c>
 800a3fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3fe:	e000      	b.n	800a402 <HAL_ADC_ConfigChannel+0x20e>
 800a400:	2300      	movs	r3, #0
 800a402:	461a      	mov	r2, r3
 800a404:	f7fe ff5a 	bl	80092bc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6818      	ldr	r0, [r3, #0]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	6919      	ldr	r1, [r3, #16]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	7e1b      	ldrb	r3, [r3, #24]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d102      	bne.n	800a41e <HAL_ADC_ConfigChannel+0x22a>
 800a418:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a41c:	e000      	b.n	800a420 <HAL_ADC_ConfigChannel+0x22c>
 800a41e:	2300      	movs	r3, #0
 800a420:	461a      	mov	r2, r3
 800a422:	f7fe ff31 	bl	8009288 <LL_ADC_SetDataRightShift>
 800a426:	e1a8      	b.n	800a77a <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a1f      	ldr	r2, [pc, #124]	@ (800a4ac <HAL_ADC_ConfigChannel+0x2b8>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	f040 815b 	bne.w	800a6ea <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2100      	movs	r1, #0
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe ff0e 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a440:	4603      	mov	r3, r0
 800a442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <HAL_ADC_ConfigChannel+0x26c>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2100      	movs	r1, #0
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe ff03 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a456:	4603      	mov	r3, r0
 800a458:	0e9b      	lsrs	r3, r3, #26
 800a45a:	f003 021f 	and.w	r2, r3, #31
 800a45e:	e017      	b.n	800a490 <HAL_ADC_ConfigChannel+0x29c>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2100      	movs	r1, #0
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fef8 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a46c:	4603      	mov	r3, r0
 800a46e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a472:	fa93 f3a3 	rbit	r3, r3
 800a476:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a47a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a482:	2320      	movs	r3, #32
 800a484:	e003      	b.n	800a48e <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a488:	fab3 f383 	clz	r3, r3
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10b      	bne.n	800a4b4 <HAL_ADC_ConfigChannel+0x2c0>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	0e9b      	lsrs	r3, r3, #26
 800a4a2:	f003 031f 	and.w	r3, r3, #31
 800a4a6:	e017      	b.n	800a4d8 <HAL_ADC_ConfigChannel+0x2e4>
 800a4a8:	47ff0000 	.word	0x47ff0000
 800a4ac:	58026000 	.word	0x58026000
 800a4b0:	5c001000 	.word	0x5c001000
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4bc:	fa93 f3a3 	rbit	r3, r3
 800a4c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a4c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a4c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	e003      	b.n	800a4d8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a4d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4d2:	fab3 f383 	clz	r3, r3
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d106      	bne.n	800a4ea <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe ff4f 	bl	8009388 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fe feb3 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10a      	bne.n	800a516 <HAL_ADC_ConfigChannel+0x322>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2101      	movs	r1, #1
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe fea8 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a50c:	4603      	mov	r3, r0
 800a50e:	0e9b      	lsrs	r3, r3, #26
 800a510:	f003 021f 	and.w	r2, r3, #31
 800a514:	e017      	b.n	800a546 <HAL_ADC_ConfigChannel+0x352>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2101      	movs	r1, #1
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fe fe9d 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a522:	4603      	mov	r3, r0
 800a524:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a528:	fa93 f3a3 	rbit	r3, r3
 800a52c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a52e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a530:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a538:	2320      	movs	r3, #32
 800a53a:	e003      	b.n	800a544 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a53c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a53e:	fab3 f383 	clz	r3, r3
 800a542:	b2db      	uxtb	r3, r3
 800a544:	461a      	mov	r2, r3
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d105      	bne.n	800a55e <HAL_ADC_ConfigChannel+0x36a>
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	0e9b      	lsrs	r3, r3, #26
 800a558:	f003 031f 	and.w	r3, r3, #31
 800a55c:	e011      	b.n	800a582 <HAL_ADC_ConfigChannel+0x38e>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a566:	fa93 f3a3 	rbit	r3, r3
 800a56a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800a56c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a56e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800a570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800a576:	2320      	movs	r3, #32
 800a578:	e003      	b.n	800a582 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800a57a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a57c:	fab3 f383 	clz	r3, r3
 800a580:	b2db      	uxtb	r3, r3
 800a582:	429a      	cmp	r2, r3
 800a584:	d106      	bne.n	800a594 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2200      	movs	r2, #0
 800a58c:	2101      	movs	r1, #1
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fe fefa 	bl	8009388 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2102      	movs	r1, #2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe fe5e 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10a      	bne.n	800a5c0 <HAL_ADC_ConfigChannel+0x3cc>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2102      	movs	r1, #2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fe53 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	0e9b      	lsrs	r3, r3, #26
 800a5ba:	f003 021f 	and.w	r2, r3, #31
 800a5be:	e017      	b.n	800a5f0 <HAL_ADC_ConfigChannel+0x3fc>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe fe48 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d2:	fa93 f3a3 	rbit	r3, r3
 800a5d6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800a5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800a5e2:	2320      	movs	r3, #32
 800a5e4:	e003      	b.n	800a5ee <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800a5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e8:	fab3 f383 	clz	r3, r3
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d105      	bne.n	800a608 <HAL_ADC_ConfigChannel+0x414>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	0e9b      	lsrs	r3, r3, #26
 800a602:	f003 031f 	and.w	r3, r3, #31
 800a606:	e011      	b.n	800a62c <HAL_ADC_ConfigChannel+0x438>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a610:	fa93 f3a3 	rbit	r3, r3
 800a614:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800a616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a618:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800a61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800a620:	2320      	movs	r3, #32
 800a622:	e003      	b.n	800a62c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800a624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a626:	fab3 f383 	clz	r3, r3
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d106      	bne.n	800a63e <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2200      	movs	r2, #0
 800a636:	2102      	movs	r1, #2
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe fea5 	bl	8009388 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2103      	movs	r1, #3
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe fe09 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <HAL_ADC_ConfigChannel+0x476>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2103      	movs	r1, #3
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fe fdfe 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a660:	4603      	mov	r3, r0
 800a662:	0e9b      	lsrs	r3, r3, #26
 800a664:	f003 021f 	and.w	r2, r3, #31
 800a668:	e017      	b.n	800a69a <HAL_ADC_ConfigChannel+0x4a6>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2103      	movs	r1, #3
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe fdf3 	bl	800925c <LL_ADC_GetOffsetChannel>
 800a676:	4603      	mov	r3, r0
 800a678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	fa93 f3a3 	rbit	r3, r3
 800a680:	61fb      	str	r3, [r7, #28]
  return result;
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800a68c:	2320      	movs	r3, #32
 800a68e:	e003      	b.n	800a698 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	fab3 f383 	clz	r3, r3
 800a696:	b2db      	uxtb	r3, r3
 800a698:	461a      	mov	r2, r3
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d105      	bne.n	800a6b2 <HAL_ADC_ConfigChannel+0x4be>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	0e9b      	lsrs	r3, r3, #26
 800a6ac:	f003 031f 	and.w	r3, r3, #31
 800a6b0:	e011      	b.n	800a6d6 <HAL_ADC_ConfigChannel+0x4e2>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	fa93 f3a3 	rbit	r3, r3
 800a6be:	613b      	str	r3, [r7, #16]
  return result;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800a6ca:	2320      	movs	r3, #32
 800a6cc:	e003      	b.n	800a6d6 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	fab3 f383 	clz	r3, r3
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d14f      	bne.n	800a77a <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2103      	movs	r1, #3
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fe50 	bl	8009388 <LL_ADC_SetOffsetState>
 800a6e8:	e047      	b.n	800a77a <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	069b      	lsls	r3, r3, #26
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d107      	bne.n	800a70e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a70c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a714:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	069b      	lsls	r3, r3, #26
 800a71e:	429a      	cmp	r2, r3
 800a720:	d107      	bne.n	800a732 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a730:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a738:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	069b      	lsls	r3, r3, #26
 800a742:	429a      	cmp	r2, r3
 800a744:	d107      	bne.n	800a756 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a754:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a75c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	069b      	lsls	r3, r3, #26
 800a766:	429a      	cmp	r2, r3
 800a768:	d107      	bne.n	800a77a <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a778:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe ffa4 	bl	80096cc <LL_ADC_IsEnabled>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	f040 81ea 	bne.w	800ab60 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6818      	ldr	r0, [r3, #0]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	461a      	mov	r2, r3
 800a79a:	f7fe fed9 	bl	8009550 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	4a7a      	ldr	r2, [pc, #488]	@ (800a98c <HAL_ADC_ConfigChannel+0x798>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	f040 80e0 	bne.w	800a96a <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4977      	ldr	r1, [pc, #476]	@ (800a990 <HAL_ADC_ConfigChannel+0x79c>)
 800a7b4:	428b      	cmp	r3, r1
 800a7b6:	d147      	bne.n	800a848 <HAL_ADC_ConfigChannel+0x654>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4975      	ldr	r1, [pc, #468]	@ (800a994 <HAL_ADC_ConfigChannel+0x7a0>)
 800a7be:	428b      	cmp	r3, r1
 800a7c0:	d040      	beq.n	800a844 <HAL_ADC_ConfigChannel+0x650>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4974      	ldr	r1, [pc, #464]	@ (800a998 <HAL_ADC_ConfigChannel+0x7a4>)
 800a7c8:	428b      	cmp	r3, r1
 800a7ca:	d039      	beq.n	800a840 <HAL_ADC_ConfigChannel+0x64c>
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4972      	ldr	r1, [pc, #456]	@ (800a99c <HAL_ADC_ConfigChannel+0x7a8>)
 800a7d2:	428b      	cmp	r3, r1
 800a7d4:	d032      	beq.n	800a83c <HAL_ADC_ConfigChannel+0x648>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4971      	ldr	r1, [pc, #452]	@ (800a9a0 <HAL_ADC_ConfigChannel+0x7ac>)
 800a7dc:	428b      	cmp	r3, r1
 800a7de:	d02b      	beq.n	800a838 <HAL_ADC_ConfigChannel+0x644>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	496f      	ldr	r1, [pc, #444]	@ (800a9a4 <HAL_ADC_ConfigChannel+0x7b0>)
 800a7e6:	428b      	cmp	r3, r1
 800a7e8:	d024      	beq.n	800a834 <HAL_ADC_ConfigChannel+0x640>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	496e      	ldr	r1, [pc, #440]	@ (800a9a8 <HAL_ADC_ConfigChannel+0x7b4>)
 800a7f0:	428b      	cmp	r3, r1
 800a7f2:	d01d      	beq.n	800a830 <HAL_ADC_ConfigChannel+0x63c>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	496c      	ldr	r1, [pc, #432]	@ (800a9ac <HAL_ADC_ConfigChannel+0x7b8>)
 800a7fa:	428b      	cmp	r3, r1
 800a7fc:	d016      	beq.n	800a82c <HAL_ADC_ConfigChannel+0x638>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	496b      	ldr	r1, [pc, #428]	@ (800a9b0 <HAL_ADC_ConfigChannel+0x7bc>)
 800a804:	428b      	cmp	r3, r1
 800a806:	d00f      	beq.n	800a828 <HAL_ADC_ConfigChannel+0x634>
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4969      	ldr	r1, [pc, #420]	@ (800a9b4 <HAL_ADC_ConfigChannel+0x7c0>)
 800a80e:	428b      	cmp	r3, r1
 800a810:	d008      	beq.n	800a824 <HAL_ADC_ConfigChannel+0x630>
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4968      	ldr	r1, [pc, #416]	@ (800a9b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800a818:	428b      	cmp	r3, r1
 800a81a:	d101      	bne.n	800a820 <HAL_ADC_ConfigChannel+0x62c>
 800a81c:	4b67      	ldr	r3, [pc, #412]	@ (800a9bc <HAL_ADC_ConfigChannel+0x7c8>)
 800a81e:	e0a0      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a820:	2300      	movs	r3, #0
 800a822:	e09e      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a824:	4b66      	ldr	r3, [pc, #408]	@ (800a9c0 <HAL_ADC_ConfigChannel+0x7cc>)
 800a826:	e09c      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a828:	4b66      	ldr	r3, [pc, #408]	@ (800a9c4 <HAL_ADC_ConfigChannel+0x7d0>)
 800a82a:	e09a      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a82c:	4b60      	ldr	r3, [pc, #384]	@ (800a9b0 <HAL_ADC_ConfigChannel+0x7bc>)
 800a82e:	e098      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a830:	4b5e      	ldr	r3, [pc, #376]	@ (800a9ac <HAL_ADC_ConfigChannel+0x7b8>)
 800a832:	e096      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a834:	4b64      	ldr	r3, [pc, #400]	@ (800a9c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800a836:	e094      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a838:	4b64      	ldr	r3, [pc, #400]	@ (800a9cc <HAL_ADC_ConfigChannel+0x7d8>)
 800a83a:	e092      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a83c:	4b64      	ldr	r3, [pc, #400]	@ (800a9d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800a83e:	e090      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a840:	4b64      	ldr	r3, [pc, #400]	@ (800a9d4 <HAL_ADC_ConfigChannel+0x7e0>)
 800a842:	e08e      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a844:	2301      	movs	r3, #1
 800a846:	e08c      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4962      	ldr	r1, [pc, #392]	@ (800a9d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800a84e:	428b      	cmp	r3, r1
 800a850:	d140      	bne.n	800a8d4 <HAL_ADC_ConfigChannel+0x6e0>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	494f      	ldr	r1, [pc, #316]	@ (800a994 <HAL_ADC_ConfigChannel+0x7a0>)
 800a858:	428b      	cmp	r3, r1
 800a85a:	d039      	beq.n	800a8d0 <HAL_ADC_ConfigChannel+0x6dc>
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	494d      	ldr	r1, [pc, #308]	@ (800a998 <HAL_ADC_ConfigChannel+0x7a4>)
 800a862:	428b      	cmp	r3, r1
 800a864:	d032      	beq.n	800a8cc <HAL_ADC_ConfigChannel+0x6d8>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	494c      	ldr	r1, [pc, #304]	@ (800a99c <HAL_ADC_ConfigChannel+0x7a8>)
 800a86c:	428b      	cmp	r3, r1
 800a86e:	d02b      	beq.n	800a8c8 <HAL_ADC_ConfigChannel+0x6d4>
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	494a      	ldr	r1, [pc, #296]	@ (800a9a0 <HAL_ADC_ConfigChannel+0x7ac>)
 800a876:	428b      	cmp	r3, r1
 800a878:	d024      	beq.n	800a8c4 <HAL_ADC_ConfigChannel+0x6d0>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4949      	ldr	r1, [pc, #292]	@ (800a9a4 <HAL_ADC_ConfigChannel+0x7b0>)
 800a880:	428b      	cmp	r3, r1
 800a882:	d01d      	beq.n	800a8c0 <HAL_ADC_ConfigChannel+0x6cc>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4947      	ldr	r1, [pc, #284]	@ (800a9a8 <HAL_ADC_ConfigChannel+0x7b4>)
 800a88a:	428b      	cmp	r3, r1
 800a88c:	d016      	beq.n	800a8bc <HAL_ADC_ConfigChannel+0x6c8>
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4946      	ldr	r1, [pc, #280]	@ (800a9ac <HAL_ADC_ConfigChannel+0x7b8>)
 800a894:	428b      	cmp	r3, r1
 800a896:	d00f      	beq.n	800a8b8 <HAL_ADC_ConfigChannel+0x6c4>
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4944      	ldr	r1, [pc, #272]	@ (800a9b0 <HAL_ADC_ConfigChannel+0x7bc>)
 800a89e:	428b      	cmp	r3, r1
 800a8a0:	d008      	beq.n	800a8b4 <HAL_ADC_ConfigChannel+0x6c0>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4944      	ldr	r1, [pc, #272]	@ (800a9b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800a8a8:	428b      	cmp	r3, r1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_ADC_ConfigChannel+0x6bc>
 800a8ac:	4b43      	ldr	r3, [pc, #268]	@ (800a9bc <HAL_ADC_ConfigChannel+0x7c8>)
 800a8ae:	e058      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	e056      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8b4:	4b43      	ldr	r3, [pc, #268]	@ (800a9c4 <HAL_ADC_ConfigChannel+0x7d0>)
 800a8b6:	e054      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a9b0 <HAL_ADC_ConfigChannel+0x7bc>)
 800a8ba:	e052      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a9ac <HAL_ADC_ConfigChannel+0x7b8>)
 800a8be:	e050      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8c0:	4b41      	ldr	r3, [pc, #260]	@ (800a9c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800a8c2:	e04e      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8c4:	4b41      	ldr	r3, [pc, #260]	@ (800a9cc <HAL_ADC_ConfigChannel+0x7d8>)
 800a8c6:	e04c      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8c8:	4b41      	ldr	r3, [pc, #260]	@ (800a9d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800a8ca:	e04a      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8cc:	4b41      	ldr	r3, [pc, #260]	@ (800a9d4 <HAL_ADC_ConfigChannel+0x7e0>)
 800a8ce:	e048      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e046      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4940      	ldr	r1, [pc, #256]	@ (800a9dc <HAL_ADC_ConfigChannel+0x7e8>)
 800a8da:	428b      	cmp	r3, r1
 800a8dc:	d140      	bne.n	800a960 <HAL_ADC_ConfigChannel+0x76c>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	492c      	ldr	r1, [pc, #176]	@ (800a994 <HAL_ADC_ConfigChannel+0x7a0>)
 800a8e4:	428b      	cmp	r3, r1
 800a8e6:	d039      	beq.n	800a95c <HAL_ADC_ConfigChannel+0x768>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	492a      	ldr	r1, [pc, #168]	@ (800a998 <HAL_ADC_ConfigChannel+0x7a4>)
 800a8ee:	428b      	cmp	r3, r1
 800a8f0:	d032      	beq.n	800a958 <HAL_ADC_ConfigChannel+0x764>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4929      	ldr	r1, [pc, #164]	@ (800a99c <HAL_ADC_ConfigChannel+0x7a8>)
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	d02b      	beq.n	800a954 <HAL_ADC_ConfigChannel+0x760>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4927      	ldr	r1, [pc, #156]	@ (800a9a0 <HAL_ADC_ConfigChannel+0x7ac>)
 800a902:	428b      	cmp	r3, r1
 800a904:	d024      	beq.n	800a950 <HAL_ADC_ConfigChannel+0x75c>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4926      	ldr	r1, [pc, #152]	@ (800a9a4 <HAL_ADC_ConfigChannel+0x7b0>)
 800a90c:	428b      	cmp	r3, r1
 800a90e:	d01d      	beq.n	800a94c <HAL_ADC_ConfigChannel+0x758>
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4924      	ldr	r1, [pc, #144]	@ (800a9a8 <HAL_ADC_ConfigChannel+0x7b4>)
 800a916:	428b      	cmp	r3, r1
 800a918:	d016      	beq.n	800a948 <HAL_ADC_ConfigChannel+0x754>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4923      	ldr	r1, [pc, #140]	@ (800a9ac <HAL_ADC_ConfigChannel+0x7b8>)
 800a920:	428b      	cmp	r3, r1
 800a922:	d00f      	beq.n	800a944 <HAL_ADC_ConfigChannel+0x750>
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4926      	ldr	r1, [pc, #152]	@ (800a9c4 <HAL_ADC_ConfigChannel+0x7d0>)
 800a92a:	428b      	cmp	r3, r1
 800a92c:	d008      	beq.n	800a940 <HAL_ADC_ConfigChannel+0x74c>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	492b      	ldr	r1, [pc, #172]	@ (800a9e0 <HAL_ADC_ConfigChannel+0x7ec>)
 800a934:	428b      	cmp	r3, r1
 800a936:	d101      	bne.n	800a93c <HAL_ADC_ConfigChannel+0x748>
 800a938:	4b2a      	ldr	r3, [pc, #168]	@ (800a9e4 <HAL_ADC_ConfigChannel+0x7f0>)
 800a93a:	e012      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a93c:	2300      	movs	r3, #0
 800a93e:	e010      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a940:	4b27      	ldr	r3, [pc, #156]	@ (800a9e0 <HAL_ADC_ConfigChannel+0x7ec>)
 800a942:	e00e      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a944:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b0 <HAL_ADC_ConfigChannel+0x7bc>)
 800a946:	e00c      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a948:	4b18      	ldr	r3, [pc, #96]	@ (800a9ac <HAL_ADC_ConfigChannel+0x7b8>)
 800a94a:	e00a      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a94c:	4b1e      	ldr	r3, [pc, #120]	@ (800a9c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800a94e:	e008      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a950:	4b1e      	ldr	r3, [pc, #120]	@ (800a9cc <HAL_ADC_ConfigChannel+0x7d8>)
 800a952:	e006      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a954:	4b1e      	ldr	r3, [pc, #120]	@ (800a9d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800a956:	e004      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a958:	4b1e      	ldr	r3, [pc, #120]	@ (800a9d4 <HAL_ADC_ConfigChannel+0x7e0>)
 800a95a:	e002      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a95c:	2301      	movs	r3, #1
 800a95e:	e000      	b.n	800a962 <HAL_ADC_ConfigChannel+0x76e>
 800a960:	2300      	movs	r3, #0
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f7fe fc0d 	bl	8009184 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f280 80f6 	bge.w	800ab60 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a05      	ldr	r2, [pc, #20]	@ (800a990 <HAL_ADC_ConfigChannel+0x79c>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d004      	beq.n	800a988 <HAL_ADC_ConfigChannel+0x794>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a15      	ldr	r2, [pc, #84]	@ (800a9d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d131      	bne.n	800a9ec <HAL_ADC_ConfigChannel+0x7f8>
 800a988:	4b17      	ldr	r3, [pc, #92]	@ (800a9e8 <HAL_ADC_ConfigChannel+0x7f4>)
 800a98a:	e030      	b.n	800a9ee <HAL_ADC_ConfigChannel+0x7fa>
 800a98c:	47ff0000 	.word	0x47ff0000
 800a990:	40022000 	.word	0x40022000
 800a994:	04300002 	.word	0x04300002
 800a998:	08600004 	.word	0x08600004
 800a99c:	0c900008 	.word	0x0c900008
 800a9a0:	10c00010 	.word	0x10c00010
 800a9a4:	14f00020 	.word	0x14f00020
 800a9a8:	2a000400 	.word	0x2a000400
 800a9ac:	2e300800 	.word	0x2e300800
 800a9b0:	32601000 	.word	0x32601000
 800a9b4:	43210000 	.word	0x43210000
 800a9b8:	4b840000 	.word	0x4b840000
 800a9bc:	4fb80000 	.word	0x4fb80000
 800a9c0:	47520000 	.word	0x47520000
 800a9c4:	36902000 	.word	0x36902000
 800a9c8:	25b00200 	.word	0x25b00200
 800a9cc:	21800100 	.word	0x21800100
 800a9d0:	1d500080 	.word	0x1d500080
 800a9d4:	19200040 	.word	0x19200040
 800a9d8:	40022100 	.word	0x40022100
 800a9dc:	58026000 	.word	0x58026000
 800a9e0:	3ac04000 	.word	0x3ac04000
 800a9e4:	3ef08000 	.word	0x3ef08000
 800a9e8:	40022300 	.word	0x40022300
 800a9ec:	4b61      	ldr	r3, [pc, #388]	@ (800ab74 <HAL_ADC_ConfigChannel+0x980>)
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fbba 	bl	8009168 <LL_ADC_GetCommonPathInternalCh>
 800a9f4:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a5f      	ldr	r2, [pc, #380]	@ (800ab78 <HAL_ADC_ConfigChannel+0x984>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d004      	beq.n	800aa0a <HAL_ADC_ConfigChannel+0x816>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a5d      	ldr	r2, [pc, #372]	@ (800ab7c <HAL_ADC_ConfigChannel+0x988>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d10e      	bne.n	800aa28 <HAL_ADC_ConfigChannel+0x834>
 800aa0a:	485b      	ldr	r0, [pc, #364]	@ (800ab78 <HAL_ADC_ConfigChannel+0x984>)
 800aa0c:	f7fe fe5e 	bl	80096cc <LL_ADC_IsEnabled>
 800aa10:	4604      	mov	r4, r0
 800aa12:	485a      	ldr	r0, [pc, #360]	@ (800ab7c <HAL_ADC_ConfigChannel+0x988>)
 800aa14:	f7fe fe5a 	bl	80096cc <LL_ADC_IsEnabled>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4323      	orrs	r3, r4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bf0c      	ite	eq
 800aa20:	2301      	moveq	r3, #1
 800aa22:	2300      	movne	r3, #0
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	e008      	b.n	800aa3a <HAL_ADC_ConfigChannel+0x846>
 800aa28:	4855      	ldr	r0, [pc, #340]	@ (800ab80 <HAL_ADC_ConfigChannel+0x98c>)
 800aa2a:	f7fe fe4f 	bl	80096cc <LL_ADC_IsEnabled>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	bf0c      	ite	eq
 800aa34:	2301      	moveq	r3, #1
 800aa36:	2300      	movne	r3, #0
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d07d      	beq.n	800ab3a <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a50      	ldr	r2, [pc, #320]	@ (800ab84 <HAL_ADC_ConfigChannel+0x990>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d130      	bne.n	800aaaa <HAL_ADC_ConfigChannel+0x8b6>
 800aa48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d12b      	bne.n	800aaaa <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a4a      	ldr	r2, [pc, #296]	@ (800ab80 <HAL_ADC_ConfigChannel+0x98c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	f040 8081 	bne.w	800ab60 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a45      	ldr	r2, [pc, #276]	@ (800ab78 <HAL_ADC_ConfigChannel+0x984>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d004      	beq.n	800aa72 <HAL_ADC_ConfigChannel+0x87e>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a43      	ldr	r2, [pc, #268]	@ (800ab7c <HAL_ADC_ConfigChannel+0x988>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d101      	bne.n	800aa76 <HAL_ADC_ConfigChannel+0x882>
 800aa72:	4a45      	ldr	r2, [pc, #276]	@ (800ab88 <HAL_ADC_ConfigChannel+0x994>)
 800aa74:	e000      	b.n	800aa78 <HAL_ADC_ConfigChannel+0x884>
 800aa76:	4a3f      	ldr	r2, [pc, #252]	@ (800ab74 <HAL_ADC_ConfigChannel+0x980>)
 800aa78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f7fe fb5e 	bl	8009142 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aa86:	4b41      	ldr	r3, [pc, #260]	@ (800ab8c <HAL_ADC_ConfigChannel+0x998>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	099b      	lsrs	r3, r3, #6
 800aa8c:	4a40      	ldr	r2, [pc, #256]	@ (800ab90 <HAL_ADC_ConfigChannel+0x99c>)
 800aa8e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa92:	099b      	lsrs	r3, r3, #6
 800aa94:	3301      	adds	r3, #1
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800aa9a:	e002      	b.n	800aaa2 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1f9      	bne.n	800aa9c <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aaa8:	e05a      	b.n	800ab60 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a39      	ldr	r2, [pc, #228]	@ (800ab94 <HAL_ADC_ConfigChannel+0x9a0>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d11e      	bne.n	800aaf2 <HAL_ADC_ConfigChannel+0x8fe>
 800aab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aab6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d119      	bne.n	800aaf2 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a2f      	ldr	r2, [pc, #188]	@ (800ab80 <HAL_ADC_ConfigChannel+0x98c>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d14b      	bne.n	800ab60 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a2a      	ldr	r2, [pc, #168]	@ (800ab78 <HAL_ADC_ConfigChannel+0x984>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d004      	beq.n	800aadc <HAL_ADC_ConfigChannel+0x8e8>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a29      	ldr	r2, [pc, #164]	@ (800ab7c <HAL_ADC_ConfigChannel+0x988>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d101      	bne.n	800aae0 <HAL_ADC_ConfigChannel+0x8ec>
 800aadc:	4a2a      	ldr	r2, [pc, #168]	@ (800ab88 <HAL_ADC_ConfigChannel+0x994>)
 800aade:	e000      	b.n	800aae2 <HAL_ADC_ConfigChannel+0x8ee>
 800aae0:	4a24      	ldr	r2, [pc, #144]	@ (800ab74 <HAL_ADC_ConfigChannel+0x980>)
 800aae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aae4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aae8:	4619      	mov	r1, r3
 800aaea:	4610      	mov	r0, r2
 800aaec:	f7fe fb29 	bl	8009142 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aaf0:	e036      	b.n	800ab60 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a28      	ldr	r2, [pc, #160]	@ (800ab98 <HAL_ADC_ConfigChannel+0x9a4>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d131      	bne.n	800ab60 <HAL_ADC_ConfigChannel+0x96c>
 800aafc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aafe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d12c      	bne.n	800ab60 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a1d      	ldr	r2, [pc, #116]	@ (800ab80 <HAL_ADC_ConfigChannel+0x98c>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d127      	bne.n	800ab60 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a18      	ldr	r2, [pc, #96]	@ (800ab78 <HAL_ADC_ConfigChannel+0x984>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d004      	beq.n	800ab24 <HAL_ADC_ConfigChannel+0x930>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a17      	ldr	r2, [pc, #92]	@ (800ab7c <HAL_ADC_ConfigChannel+0x988>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d101      	bne.n	800ab28 <HAL_ADC_ConfigChannel+0x934>
 800ab24:	4a18      	ldr	r2, [pc, #96]	@ (800ab88 <HAL_ADC_ConfigChannel+0x994>)
 800ab26:	e000      	b.n	800ab2a <HAL_ADC_ConfigChannel+0x936>
 800ab28:	4a12      	ldr	r2, [pc, #72]	@ (800ab74 <HAL_ADC_ConfigChannel+0x980>)
 800ab2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f7fe fb05 	bl	8009142 <LL_ADC_SetCommonPathInternalCh>
 800ab38:	e012      	b.n	800ab60 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab3e:	f043 0220 	orr.w	r2, r3, #32
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800ab4c:	e008      	b.n	800ab60 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab52:	f043 0220 	orr.w	r2, r3, #32
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800ab68:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3794      	adds	r7, #148	@ 0x94
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd90      	pop	{r4, r7, pc}
 800ab74:	58026300 	.word	0x58026300
 800ab78:	40022000 	.word	0x40022000
 800ab7c:	40022100 	.word	0x40022100
 800ab80:	58026000 	.word	0x58026000
 800ab84:	c7520000 	.word	0xc7520000
 800ab88:	40022300 	.word	0x40022300
 800ab8c:	24000004 	.word	0x24000004
 800ab90:	053e2d63 	.word	0x053e2d63
 800ab94:	c3210000 	.word	0xc3210000
 800ab98:	cb840000 	.word	0xcb840000

0800ab9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fe fd8f 	bl	80096cc <LL_ADC_IsEnabled>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d16e      	bne.n	800ac92 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	4b38      	ldr	r3, [pc, #224]	@ (800ac9c <ADC_Enable+0x100>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00d      	beq.n	800abde <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abc6:	f043 0210 	orr.w	r2, r3, #16
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abd2:	f043 0201 	orr.w	r2, r3, #1
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	e05a      	b.n	800ac94 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fd5e 	bl	80096a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800abe8:	f7fe fa68 	bl	80090bc <HAL_GetTick>
 800abec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a2b      	ldr	r2, [pc, #172]	@ (800aca0 <ADC_Enable+0x104>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d004      	beq.n	800ac02 <ADC_Enable+0x66>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a29      	ldr	r2, [pc, #164]	@ (800aca4 <ADC_Enable+0x108>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d101      	bne.n	800ac06 <ADC_Enable+0x6a>
 800ac02:	4b29      	ldr	r3, [pc, #164]	@ (800aca8 <ADC_Enable+0x10c>)
 800ac04:	e000      	b.n	800ac08 <ADC_Enable+0x6c>
 800ac06:	4b29      	ldr	r3, [pc, #164]	@ (800acac <ADC_Enable+0x110>)
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fe fce1 	bl	80095d0 <LL_ADC_GetMultimode>
 800ac0e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a23      	ldr	r2, [pc, #140]	@ (800aca4 <ADC_Enable+0x108>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d002      	beq.n	800ac20 <ADC_Enable+0x84>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	e000      	b.n	800ac22 <ADC_Enable+0x86>
 800ac20:	4b1f      	ldr	r3, [pc, #124]	@ (800aca0 <ADC_Enable+0x104>)
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	6812      	ldr	r2, [r2, #0]
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d02c      	beq.n	800ac84 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d130      	bne.n	800ac92 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ac30:	e028      	b.n	800ac84 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fd48 	bl	80096cc <LL_ADC_IsEnabled>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d104      	bne.n	800ac4c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe fd2c 	bl	80096a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ac4c:	f7fe fa36 	bl	80090bc <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d914      	bls.n	800ac84 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0301 	and.w	r3, r3, #1
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d00d      	beq.n	800ac84 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac6c:	f043 0210 	orr.w	r2, r3, #16
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac78:	f043 0201 	orr.w	r2, r3, #1
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e007      	b.n	800ac94 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d1cf      	bne.n	800ac32 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	8000003f 	.word	0x8000003f
 800aca0:	40022000 	.word	0x40022000
 800aca4:	40022100 	.word	0x40022100
 800aca8:	40022300 	.word	0x40022300
 800acac:	58026300 	.word	0x58026300

0800acb0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acc2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d14b      	bne.n	800ad62 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d021      	beq.n	800ad28 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fe fb77 	bl	80093dc <LL_ADC_REG_IsTriggerSourceSWStart>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d032      	beq.n	800ad5a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d12b      	bne.n	800ad5a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d11f      	bne.n	800ad5a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad1e:	f043 0201 	orr.w	r2, r3, #1
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	661a      	str	r2, [r3, #96]	@ 0x60
 800ad26:	e018      	b.n	800ad5a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	f003 0303 	and.w	r3, r3, #3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d111      	bne.n	800ad5a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d105      	bne.n	800ad5a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad52:	f043 0201 	orr.w	r2, r3, #1
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff fa22 	bl	800a1a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ad60:	e00e      	b.n	800ad80 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad66:	f003 0310 	and.w	r3, r3, #16
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7ff fa36 	bl	800a1e0 <HAL_ADC_ErrorCallback>
}
 800ad74:	e004      	b.n	800ad80 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	4798      	blx	r3
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad94:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f7ff fa0e 	bl	800a1b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ad9c:	bf00      	nop
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adc2:	f043 0204 	orr.w	r2, r3, #4
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f7ff fa08 	bl	800a1e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800add0:	bf00      	nop
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a6c      	ldr	r2, [pc, #432]	@ (800af98 <ADC_ConfigureBoostMode+0x1c0>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d004      	beq.n	800adf4 <ADC_ConfigureBoostMode+0x1c>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a6b      	ldr	r2, [pc, #428]	@ (800af9c <ADC_ConfigureBoostMode+0x1c4>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d109      	bne.n	800ae08 <ADC_ConfigureBoostMode+0x30>
 800adf4:	4b6a      	ldr	r3, [pc, #424]	@ (800afa0 <ADC_ConfigureBoostMode+0x1c8>)
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bf14      	ite	ne
 800ae00:	2301      	movne	r3, #1
 800ae02:	2300      	moveq	r3, #0
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	e008      	b.n	800ae1a <ADC_ConfigureBoostMode+0x42>
 800ae08:	4b66      	ldr	r3, [pc, #408]	@ (800afa4 <ADC_ConfigureBoostMode+0x1cc>)
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	bf14      	ite	ne
 800ae14:	2301      	movne	r3, #1
 800ae16:	2300      	moveq	r3, #0
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01c      	beq.n	800ae58 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800ae1e:	f006 fe8b 	bl	8011b38 <HAL_RCC_GetHCLKFreq>
 800ae22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae2c:	d010      	beq.n	800ae50 <ADC_ConfigureBoostMode+0x78>
 800ae2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae32:	d873      	bhi.n	800af1c <ADC_ConfigureBoostMode+0x144>
 800ae34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae38:	d002      	beq.n	800ae40 <ADC_ConfigureBoostMode+0x68>
 800ae3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae3e:	d16d      	bne.n	800af1c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	0c1b      	lsrs	r3, r3, #16
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae4c:	60fb      	str	r3, [r7, #12]
        break;
 800ae4e:	e068      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	089b      	lsrs	r3, r3, #2
 800ae54:	60fb      	str	r3, [r7, #12]
        break;
 800ae56:	e064      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800ae58:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ae5c:	f04f 0100 	mov.w	r1, #0
 800ae60:	f008 f866 	bl	8012f30 <HAL_RCCEx_GetPeriphCLKFreq>
 800ae64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800ae6e:	d051      	beq.n	800af14 <ADC_ConfigureBoostMode+0x13c>
 800ae70:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800ae74:	d854      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800ae76:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800ae7a:	d047      	beq.n	800af0c <ADC_ConfigureBoostMode+0x134>
 800ae7c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800ae80:	d84e      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800ae82:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800ae86:	d03d      	beq.n	800af04 <ADC_ConfigureBoostMode+0x12c>
 800ae88:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800ae8c:	d848      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800ae8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae92:	d033      	beq.n	800aefc <ADC_ConfigureBoostMode+0x124>
 800ae94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae98:	d842      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800ae9a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800ae9e:	d029      	beq.n	800aef4 <ADC_ConfigureBoostMode+0x11c>
 800aea0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800aea4:	d83c      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800aea6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800aeaa:	d01a      	beq.n	800aee2 <ADC_ConfigureBoostMode+0x10a>
 800aeac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800aeb0:	d836      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800aeb2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800aeb6:	d014      	beq.n	800aee2 <ADC_ConfigureBoostMode+0x10a>
 800aeb8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800aebc:	d830      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800aebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aec2:	d00e      	beq.n	800aee2 <ADC_ConfigureBoostMode+0x10a>
 800aec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aec8:	d82a      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800aeca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aece:	d008      	beq.n	800aee2 <ADC_ConfigureBoostMode+0x10a>
 800aed0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aed4:	d824      	bhi.n	800af20 <ADC_ConfigureBoostMode+0x148>
 800aed6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aeda:	d002      	beq.n	800aee2 <ADC_ConfigureBoostMode+0x10a>
 800aedc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aee0:	d11e      	bne.n	800af20 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	0c9b      	lsrs	r3, r3, #18
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef0:	60fb      	str	r3, [r7, #12]
        break;
 800aef2:	e016      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	091b      	lsrs	r3, r3, #4
 800aef8:	60fb      	str	r3, [r7, #12]
        break;
 800aefa:	e012      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	095b      	lsrs	r3, r3, #5
 800af00:	60fb      	str	r3, [r7, #12]
        break;
 800af02:	e00e      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	099b      	lsrs	r3, r3, #6
 800af08:	60fb      	str	r3, [r7, #12]
        break;
 800af0a:	e00a      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	09db      	lsrs	r3, r3, #7
 800af10:	60fb      	str	r3, [r7, #12]
        break;
 800af12:	e006      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	0a1b      	lsrs	r3, r3, #8
 800af18:	60fb      	str	r3, [r7, #12]
        break;
 800af1a:	e002      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
        break;
 800af1c:	bf00      	nop
 800af1e:	e000      	b.n	800af22 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800af20:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	085b      	lsrs	r3, r3, #1
 800af26:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	4a1f      	ldr	r2, [pc, #124]	@ (800afa8 <ADC_ConfigureBoostMode+0x1d0>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d808      	bhi.n	800af42 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	689a      	ldr	r2, [r3, #8]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800af3e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800af40:	e025      	b.n	800af8e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	4a19      	ldr	r2, [pc, #100]	@ (800afac <ADC_ConfigureBoostMode+0x1d4>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d80a      	bhi.n	800af60 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af5c:	609a      	str	r2, [r3, #8]
}
 800af5e:	e016      	b.n	800af8e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4a13      	ldr	r2, [pc, #76]	@ (800afb0 <ADC_ConfigureBoostMode+0x1d8>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d80a      	bhi.n	800af7e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af7a:	609a      	str	r2, [r3, #8]
}
 800af7c:	e007      	b.n	800af8e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800af8c:	609a      	str	r2, [r3, #8]
}
 800af8e:	bf00      	nop
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	40022000 	.word	0x40022000
 800af9c:	40022100 	.word	0x40022100
 800afa0:	40022300 	.word	0x40022300
 800afa4:	58026300 	.word	0x58026300
 800afa8:	005f5e10 	.word	0x005f5e10
 800afac:	00bebc20 	.word	0x00bebc20
 800afb0:	017d7840 	.word	0x017d7840

0800afb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <__NVIC_SetPriorityGrouping>:
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b028:	4b0b      	ldr	r3, [pc, #44]	@ (800b058 <__NVIC_SetPriorityGrouping+0x40>)
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b034:	4013      	ands	r3, r2
 800b036:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b040:	4b06      	ldr	r3, [pc, #24]	@ (800b05c <__NVIC_SetPriorityGrouping+0x44>)
 800b042:	4313      	orrs	r3, r2
 800b044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b046:	4a04      	ldr	r2, [pc, #16]	@ (800b058 <__NVIC_SetPriorityGrouping+0x40>)
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	60d3      	str	r3, [r2, #12]
}
 800b04c:	bf00      	nop
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	e000ed00 	.word	0xe000ed00
 800b05c:	05fa0000 	.word	0x05fa0000

0800b060 <__NVIC_GetPriorityGrouping>:
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b064:	4b04      	ldr	r3, [pc, #16]	@ (800b078 <__NVIC_GetPriorityGrouping+0x18>)
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	0a1b      	lsrs	r3, r3, #8
 800b06a:	f003 0307 	and.w	r3, r3, #7
}
 800b06e:	4618      	mov	r0, r3
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	e000ed00 	.word	0xe000ed00

0800b07c <__NVIC_EnableIRQ>:
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	db0b      	blt.n	800b0a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b08e:	88fb      	ldrh	r3, [r7, #6]
 800b090:	f003 021f 	and.w	r2, r3, #31
 800b094:	4907      	ldr	r1, [pc, #28]	@ (800b0b4 <__NVIC_EnableIRQ+0x38>)
 800b096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b09a:	095b      	lsrs	r3, r3, #5
 800b09c:	2001      	movs	r0, #1
 800b09e:	fa00 f202 	lsl.w	r2, r0, r2
 800b0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b0a6:	bf00      	nop
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	e000e100 	.word	0xe000e100

0800b0b8 <__NVIC_SetPriority>:
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	6039      	str	r1, [r7, #0]
 800b0c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b0c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	db0a      	blt.n	800b0e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	490c      	ldr	r1, [pc, #48]	@ (800b104 <__NVIC_SetPriority+0x4c>)
 800b0d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0d6:	0112      	lsls	r2, r2, #4
 800b0d8:	b2d2      	uxtb	r2, r2
 800b0da:	440b      	add	r3, r1
 800b0dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b0e0:	e00a      	b.n	800b0f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	4908      	ldr	r1, [pc, #32]	@ (800b108 <__NVIC_SetPriority+0x50>)
 800b0e8:	88fb      	ldrh	r3, [r7, #6]
 800b0ea:	f003 030f 	and.w	r3, r3, #15
 800b0ee:	3b04      	subs	r3, #4
 800b0f0:	0112      	lsls	r2, r2, #4
 800b0f2:	b2d2      	uxtb	r2, r2
 800b0f4:	440b      	add	r3, r1
 800b0f6:	761a      	strb	r2, [r3, #24]
}
 800b0f8:	bf00      	nop
 800b0fa:	370c      	adds	r7, #12
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	e000e100 	.word	0xe000e100
 800b108:	e000ed00 	.word	0xe000ed00

0800b10c <NVIC_EncodePriority>:
{
 800b10c:	b480      	push	{r7}
 800b10e:	b089      	sub	sp, #36	@ 0x24
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f003 0307 	and.w	r3, r3, #7
 800b11e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	f1c3 0307 	rsb	r3, r3, #7
 800b126:	2b04      	cmp	r3, #4
 800b128:	bf28      	it	cs
 800b12a:	2304      	movcs	r3, #4
 800b12c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	3304      	adds	r3, #4
 800b132:	2b06      	cmp	r3, #6
 800b134:	d902      	bls.n	800b13c <NVIC_EncodePriority+0x30>
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	3b03      	subs	r3, #3
 800b13a:	e000      	b.n	800b13e <NVIC_EncodePriority+0x32>
 800b13c:	2300      	movs	r3, #0
 800b13e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b140:	f04f 32ff 	mov.w	r2, #4294967295
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	fa02 f303 	lsl.w	r3, r2, r3
 800b14a:	43da      	mvns	r2, r3
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	401a      	ands	r2, r3
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b154:	f04f 31ff 	mov.w	r1, #4294967295
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	fa01 f303 	lsl.w	r3, r1, r3
 800b15e:	43d9      	mvns	r1, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b164:	4313      	orrs	r3, r2
}
 800b166:	4618      	mov	r0, r3
 800b168:	3724      	adds	r7, #36	@ 0x24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
	...

0800b174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3b01      	subs	r3, #1
 800b180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b184:	d301      	bcc.n	800b18a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b186:	2301      	movs	r3, #1
 800b188:	e00f      	b.n	800b1aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b18a:	4a0a      	ldr	r2, [pc, #40]	@ (800b1b4 <SysTick_Config+0x40>)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3b01      	subs	r3, #1
 800b190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b192:	210f      	movs	r1, #15
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	f7ff ff8e 	bl	800b0b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b19c:	4b05      	ldr	r3, [pc, #20]	@ (800b1b4 <SysTick_Config+0x40>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1a2:	4b04      	ldr	r3, [pc, #16]	@ (800b1b4 <SysTick_Config+0x40>)
 800b1a4:	2207      	movs	r2, #7
 800b1a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	e000e010 	.word	0xe000e010

0800b1b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff ff29 	bl	800b018 <__NVIC_SetPriorityGrouping>
}
 800b1c6:	bf00      	nop
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b086      	sub	sp, #24
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	60b9      	str	r1, [r7, #8]
 800b1d8:	607a      	str	r2, [r7, #4]
 800b1da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b1dc:	f7ff ff40 	bl	800b060 <__NVIC_GetPriorityGrouping>
 800b1e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	68b9      	ldr	r1, [r7, #8]
 800b1e6:	6978      	ldr	r0, [r7, #20]
 800b1e8:	f7ff ff90 	bl	800b10c <NVIC_EncodePriority>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7ff ff5f 	bl	800b0b8 <__NVIC_SetPriority>
}
 800b1fa:	bf00      	nop
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	4603      	mov	r3, r0
 800b20a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b20c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b210:	4618      	mov	r0, r3
 800b212:	f7ff ff33 	bl	800b07c <__NVIC_EnableIRQ>
}
 800b216:	bf00      	nop
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7ff ffa4 	bl	800b174 <SysTick_Config>
 800b22c:	4603      	mov	r3, r0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b23c:	f3bf 8f5f 	dmb	sy
}
 800b240:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b242:	4b07      	ldr	r3, [pc, #28]	@ (800b260 <HAL_MPU_Disable+0x28>)
 800b244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b246:	4a06      	ldr	r2, [pc, #24]	@ (800b260 <HAL_MPU_Disable+0x28>)
 800b248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b24c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b24e:	4b05      	ldr	r3, [pc, #20]	@ (800b264 <HAL_MPU_Disable+0x2c>)
 800b250:	2200      	movs	r2, #0
 800b252:	605a      	str	r2, [r3, #4]
}
 800b254:	bf00      	nop
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	e000ed00 	.word	0xe000ed00
 800b264:	e000ed90 	.word	0xe000ed90

0800b268 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b270:	4a0b      	ldr	r2, [pc, #44]	@ (800b2a0 <HAL_MPU_Enable+0x38>)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f043 0301 	orr.w	r3, r3, #1
 800b278:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b27a:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a4 <HAL_MPU_Enable+0x3c>)
 800b27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27e:	4a09      	ldr	r2, [pc, #36]	@ (800b2a4 <HAL_MPU_Enable+0x3c>)
 800b280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b284:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b286:	f3bf 8f4f 	dsb	sy
}
 800b28a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b28c:	f3bf 8f6f 	isb	sy
}
 800b290:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	e000ed90 	.word	0xe000ed90
 800b2a4:	e000ed00 	.word	0xe000ed00

0800b2a8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	785a      	ldrb	r2, [r3, #1]
 800b2b4:	4b1b      	ldr	r3, [pc, #108]	@ (800b324 <HAL_MPU_ConfigRegion+0x7c>)
 800b2b6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b324 <HAL_MPU_ConfigRegion+0x7c>)
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	4a19      	ldr	r2, [pc, #100]	@ (800b324 <HAL_MPU_ConfigRegion+0x7c>)
 800b2be:	f023 0301 	bic.w	r3, r3, #1
 800b2c2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b2c4:	4a17      	ldr	r2, [pc, #92]	@ (800b324 <HAL_MPU_ConfigRegion+0x7c>)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	7b1b      	ldrb	r3, [r3, #12]
 800b2d0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	7adb      	ldrb	r3, [r3, #11]
 800b2d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b2d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	7a9b      	ldrb	r3, [r3, #10]
 800b2de:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b2e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	7b5b      	ldrb	r3, [r3, #13]
 800b2e6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b2e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	7b9b      	ldrb	r3, [r3, #14]
 800b2ee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b2f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7bdb      	ldrb	r3, [r3, #15]
 800b2f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b2f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	7a5b      	ldrb	r3, [r3, #9]
 800b2fe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b300:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	7a1b      	ldrb	r3, [r3, #8]
 800b306:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b308:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	7812      	ldrb	r2, [r2, #0]
 800b30e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b310:	4a04      	ldr	r2, [pc, #16]	@ (800b324 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b312:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b314:	6113      	str	r3, [r2, #16]
}
 800b316:	bf00      	nop
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	e000ed90 	.word	0xe000ed90

0800b328 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b330:	f7fd fec4 	bl	80090bc <HAL_GetTick>
 800b334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e312      	b.n	800b966 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a66      	ldr	r2, [pc, #408]	@ (800b4e0 <HAL_DMA_Init+0x1b8>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d04a      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a65      	ldr	r2, [pc, #404]	@ (800b4e4 <HAL_DMA_Init+0x1bc>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d045      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a63      	ldr	r2, [pc, #396]	@ (800b4e8 <HAL_DMA_Init+0x1c0>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d040      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a62      	ldr	r2, [pc, #392]	@ (800b4ec <HAL_DMA_Init+0x1c4>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d03b      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a60      	ldr	r2, [pc, #384]	@ (800b4f0 <HAL_DMA_Init+0x1c8>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d036      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a5f      	ldr	r2, [pc, #380]	@ (800b4f4 <HAL_DMA_Init+0x1cc>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d031      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a5d      	ldr	r2, [pc, #372]	@ (800b4f8 <HAL_DMA_Init+0x1d0>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d02c      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a5c      	ldr	r2, [pc, #368]	@ (800b4fc <HAL_DMA_Init+0x1d4>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d027      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a5a      	ldr	r2, [pc, #360]	@ (800b500 <HAL_DMA_Init+0x1d8>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d022      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a59      	ldr	r2, [pc, #356]	@ (800b504 <HAL_DMA_Init+0x1dc>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d01d      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a57      	ldr	r2, [pc, #348]	@ (800b508 <HAL_DMA_Init+0x1e0>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d018      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a56      	ldr	r2, [pc, #344]	@ (800b50c <HAL_DMA_Init+0x1e4>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d013      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a54      	ldr	r2, [pc, #336]	@ (800b510 <HAL_DMA_Init+0x1e8>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d00e      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a53      	ldr	r2, [pc, #332]	@ (800b514 <HAL_DMA_Init+0x1ec>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d009      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a51      	ldr	r2, [pc, #324]	@ (800b518 <HAL_DMA_Init+0x1f0>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d004      	beq.n	800b3e0 <HAL_DMA_Init+0xb8>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a50      	ldr	r2, [pc, #320]	@ (800b51c <HAL_DMA_Init+0x1f4>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d101      	bne.n	800b3e4 <HAL_DMA_Init+0xbc>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e000      	b.n	800b3e6 <HAL_DMA_Init+0xbe>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 813c 	beq.w	800b664 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a37      	ldr	r2, [pc, #220]	@ (800b4e0 <HAL_DMA_Init+0x1b8>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d04a      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a36      	ldr	r2, [pc, #216]	@ (800b4e4 <HAL_DMA_Init+0x1bc>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d045      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a34      	ldr	r2, [pc, #208]	@ (800b4e8 <HAL_DMA_Init+0x1c0>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d040      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a33      	ldr	r2, [pc, #204]	@ (800b4ec <HAL_DMA_Init+0x1c4>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d03b      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a31      	ldr	r2, [pc, #196]	@ (800b4f0 <HAL_DMA_Init+0x1c8>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d036      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a30      	ldr	r2, [pc, #192]	@ (800b4f4 <HAL_DMA_Init+0x1cc>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d031      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a2e      	ldr	r2, [pc, #184]	@ (800b4f8 <HAL_DMA_Init+0x1d0>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d02c      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a2d      	ldr	r2, [pc, #180]	@ (800b4fc <HAL_DMA_Init+0x1d4>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d027      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a2b      	ldr	r2, [pc, #172]	@ (800b500 <HAL_DMA_Init+0x1d8>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d022      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a2a      	ldr	r2, [pc, #168]	@ (800b504 <HAL_DMA_Init+0x1dc>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d01d      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a28      	ldr	r2, [pc, #160]	@ (800b508 <HAL_DMA_Init+0x1e0>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d018      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a27      	ldr	r2, [pc, #156]	@ (800b50c <HAL_DMA_Init+0x1e4>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d013      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a25      	ldr	r2, [pc, #148]	@ (800b510 <HAL_DMA_Init+0x1e8>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d00e      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a24      	ldr	r2, [pc, #144]	@ (800b514 <HAL_DMA_Init+0x1ec>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d009      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a22      	ldr	r2, [pc, #136]	@ (800b518 <HAL_DMA_Init+0x1f0>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d004      	beq.n	800b49c <HAL_DMA_Init+0x174>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a21      	ldr	r2, [pc, #132]	@ (800b51c <HAL_DMA_Init+0x1f4>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d108      	bne.n	800b4ae <HAL_DMA_Init+0x186>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0201 	bic.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	e007      	b.n	800b4be <HAL_DMA_Init+0x196>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f022 0201 	bic.w	r2, r2, #1
 800b4bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b4be:	e02f      	b.n	800b520 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b4c0:	f7fd fdfc 	bl	80090bc <HAL_GetTick>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	2b05      	cmp	r3, #5
 800b4cc:	d928      	bls.n	800b520 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2203      	movs	r2, #3
 800b4d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e242      	b.n	800b966 <HAL_DMA_Init+0x63e>
 800b4e0:	40020010 	.word	0x40020010
 800b4e4:	40020028 	.word	0x40020028
 800b4e8:	40020040 	.word	0x40020040
 800b4ec:	40020058 	.word	0x40020058
 800b4f0:	40020070 	.word	0x40020070
 800b4f4:	40020088 	.word	0x40020088
 800b4f8:	400200a0 	.word	0x400200a0
 800b4fc:	400200b8 	.word	0x400200b8
 800b500:	40020410 	.word	0x40020410
 800b504:	40020428 	.word	0x40020428
 800b508:	40020440 	.word	0x40020440
 800b50c:	40020458 	.word	0x40020458
 800b510:	40020470 	.word	0x40020470
 800b514:	40020488 	.word	0x40020488
 800b518:	400204a0 	.word	0x400204a0
 800b51c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1c8      	bne.n	800b4c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	4b83      	ldr	r3, [pc, #524]	@ (800b748 <HAL_DMA_Init+0x420>)
 800b53a:	4013      	ands	r3, r2
 800b53c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b546:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b552:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b55e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	4313      	orrs	r3, r2
 800b56a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b570:	2b04      	cmp	r3, #4
 800b572:	d107      	bne.n	800b584 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57c:	4313      	orrs	r3, r2
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	4313      	orrs	r3, r2
 800b582:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	2b28      	cmp	r3, #40	@ 0x28
 800b58a:	d903      	bls.n	800b594 <HAL_DMA_Init+0x26c>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	2b2e      	cmp	r3, #46	@ 0x2e
 800b592:	d91f      	bls.n	800b5d4 <HAL_DMA_Init+0x2ac>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	2b3e      	cmp	r3, #62	@ 0x3e
 800b59a:	d903      	bls.n	800b5a4 <HAL_DMA_Init+0x27c>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	2b42      	cmp	r3, #66	@ 0x42
 800b5a2:	d917      	bls.n	800b5d4 <HAL_DMA_Init+0x2ac>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	2b46      	cmp	r3, #70	@ 0x46
 800b5aa:	d903      	bls.n	800b5b4 <HAL_DMA_Init+0x28c>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	2b48      	cmp	r3, #72	@ 0x48
 800b5b2:	d90f      	bls.n	800b5d4 <HAL_DMA_Init+0x2ac>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	2b4e      	cmp	r3, #78	@ 0x4e
 800b5ba:	d903      	bls.n	800b5c4 <HAL_DMA_Init+0x29c>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	2b52      	cmp	r3, #82	@ 0x52
 800b5c2:	d907      	bls.n	800b5d4 <HAL_DMA_Init+0x2ac>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	2b73      	cmp	r3, #115	@ 0x73
 800b5ca:	d905      	bls.n	800b5d8 <HAL_DMA_Init+0x2b0>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	2b77      	cmp	r3, #119	@ 0x77
 800b5d2:	d801      	bhi.n	800b5d8 <HAL_DMA_Init+0x2b0>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e000      	b.n	800b5da <HAL_DMA_Init+0x2b2>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f023 0307 	bic.w	r3, r3, #7
 800b5fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	4313      	orrs	r3, r2
 800b606:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d117      	bne.n	800b640 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00e      	beq.n	800b640 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f002 fb48 	bl	800dcb8 <DMA_CheckFifoParam>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d008      	beq.n	800b640 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2240      	movs	r2, #64	@ 0x40
 800b632:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e192      	b.n	800b966 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f002 fa83 	bl	800db54 <DMA_CalcBaseAndBitshift>
 800b64e:	4603      	mov	r3, r0
 800b650:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b656:	f003 031f 	and.w	r3, r3, #31
 800b65a:	223f      	movs	r2, #63	@ 0x3f
 800b65c:	409a      	lsls	r2, r3
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	609a      	str	r2, [r3, #8]
 800b662:	e0c8      	b.n	800b7f6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a38      	ldr	r2, [pc, #224]	@ (800b74c <HAL_DMA_Init+0x424>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d022      	beq.n	800b6b4 <HAL_DMA_Init+0x38c>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a37      	ldr	r2, [pc, #220]	@ (800b750 <HAL_DMA_Init+0x428>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d01d      	beq.n	800b6b4 <HAL_DMA_Init+0x38c>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a35      	ldr	r2, [pc, #212]	@ (800b754 <HAL_DMA_Init+0x42c>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d018      	beq.n	800b6b4 <HAL_DMA_Init+0x38c>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a34      	ldr	r2, [pc, #208]	@ (800b758 <HAL_DMA_Init+0x430>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d013      	beq.n	800b6b4 <HAL_DMA_Init+0x38c>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a32      	ldr	r2, [pc, #200]	@ (800b75c <HAL_DMA_Init+0x434>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d00e      	beq.n	800b6b4 <HAL_DMA_Init+0x38c>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a31      	ldr	r2, [pc, #196]	@ (800b760 <HAL_DMA_Init+0x438>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d009      	beq.n	800b6b4 <HAL_DMA_Init+0x38c>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a2f      	ldr	r2, [pc, #188]	@ (800b764 <HAL_DMA_Init+0x43c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d004      	beq.n	800b6b4 <HAL_DMA_Init+0x38c>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a2e      	ldr	r2, [pc, #184]	@ (800b768 <HAL_DMA_Init+0x440>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d101      	bne.n	800b6b8 <HAL_DMA_Init+0x390>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e000      	b.n	800b6ba <HAL_DMA_Init+0x392>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 8092 	beq.w	800b7e4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a21      	ldr	r2, [pc, #132]	@ (800b74c <HAL_DMA_Init+0x424>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d021      	beq.n	800b70e <HAL_DMA_Init+0x3e6>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a20      	ldr	r2, [pc, #128]	@ (800b750 <HAL_DMA_Init+0x428>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d01c      	beq.n	800b70e <HAL_DMA_Init+0x3e6>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a1e      	ldr	r2, [pc, #120]	@ (800b754 <HAL_DMA_Init+0x42c>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d017      	beq.n	800b70e <HAL_DMA_Init+0x3e6>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a1d      	ldr	r2, [pc, #116]	@ (800b758 <HAL_DMA_Init+0x430>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d012      	beq.n	800b70e <HAL_DMA_Init+0x3e6>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a1b      	ldr	r2, [pc, #108]	@ (800b75c <HAL_DMA_Init+0x434>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d00d      	beq.n	800b70e <HAL_DMA_Init+0x3e6>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a1a      	ldr	r2, [pc, #104]	@ (800b760 <HAL_DMA_Init+0x438>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d008      	beq.n	800b70e <HAL_DMA_Init+0x3e6>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a18      	ldr	r2, [pc, #96]	@ (800b764 <HAL_DMA_Init+0x43c>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d003      	beq.n	800b70e <HAL_DMA_Init+0x3e6>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a17      	ldr	r2, [pc, #92]	@ (800b768 <HAL_DMA_Init+0x440>)
 800b70c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2202      	movs	r2, #2
 800b712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	4b10      	ldr	r3, [pc, #64]	@ (800b76c <HAL_DMA_Init+0x444>)
 800b72a:	4013      	ands	r3, r2
 800b72c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2b40      	cmp	r3, #64	@ 0x40
 800b734:	d01c      	beq.n	800b770 <HAL_DMA_Init+0x448>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	2b80      	cmp	r3, #128	@ 0x80
 800b73c:	d102      	bne.n	800b744 <HAL_DMA_Init+0x41c>
 800b73e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b742:	e016      	b.n	800b772 <HAL_DMA_Init+0x44a>
 800b744:	2300      	movs	r3, #0
 800b746:	e014      	b.n	800b772 <HAL_DMA_Init+0x44a>
 800b748:	fe10803f 	.word	0xfe10803f
 800b74c:	58025408 	.word	0x58025408
 800b750:	5802541c 	.word	0x5802541c
 800b754:	58025430 	.word	0x58025430
 800b758:	58025444 	.word	0x58025444
 800b75c:	58025458 	.word	0x58025458
 800b760:	5802546c 	.word	0x5802546c
 800b764:	58025480 	.word	0x58025480
 800b768:	58025494 	.word	0x58025494
 800b76c:	fffe000f 	.word	0xfffe000f
 800b770:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	68d2      	ldr	r2, [r2, #12]
 800b776:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a1b      	ldr	r3, [r3, #32]
 800b79e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b7a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b6e      	ldr	r3, [pc, #440]	@ (800b970 <HAL_DMA_Init+0x648>)
 800b7b8:	4413      	add	r3, r2
 800b7ba:	4a6e      	ldr	r2, [pc, #440]	@ (800b974 <HAL_DMA_Init+0x64c>)
 800b7bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c0:	091b      	lsrs	r3, r3, #4
 800b7c2:	009a      	lsls	r2, r3, #2
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f002 f9c3 	bl	800db54 <DMA_CalcBaseAndBitshift>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7d6:	f003 031f 	and.w	r3, r3, #31
 800b7da:	2201      	movs	r2, #1
 800b7dc:	409a      	lsls	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	605a      	str	r2, [r3, #4]
 800b7e2:	e008      	b.n	800b7f6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2240      	movs	r2, #64	@ 0x40
 800b7e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2203      	movs	r2, #3
 800b7ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e0b7      	b.n	800b966 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a5f      	ldr	r2, [pc, #380]	@ (800b978 <HAL_DMA_Init+0x650>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d072      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a5d      	ldr	r2, [pc, #372]	@ (800b97c <HAL_DMA_Init+0x654>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d06d      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a5c      	ldr	r2, [pc, #368]	@ (800b980 <HAL_DMA_Init+0x658>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d068      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a5a      	ldr	r2, [pc, #360]	@ (800b984 <HAL_DMA_Init+0x65c>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d063      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a59      	ldr	r2, [pc, #356]	@ (800b988 <HAL_DMA_Init+0x660>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d05e      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a57      	ldr	r2, [pc, #348]	@ (800b98c <HAL_DMA_Init+0x664>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d059      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a56      	ldr	r2, [pc, #344]	@ (800b990 <HAL_DMA_Init+0x668>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d054      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a54      	ldr	r2, [pc, #336]	@ (800b994 <HAL_DMA_Init+0x66c>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d04f      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a53      	ldr	r2, [pc, #332]	@ (800b998 <HAL_DMA_Init+0x670>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d04a      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a51      	ldr	r2, [pc, #324]	@ (800b99c <HAL_DMA_Init+0x674>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d045      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a50      	ldr	r2, [pc, #320]	@ (800b9a0 <HAL_DMA_Init+0x678>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d040      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a4e      	ldr	r2, [pc, #312]	@ (800b9a4 <HAL_DMA_Init+0x67c>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d03b      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a4d      	ldr	r2, [pc, #308]	@ (800b9a8 <HAL_DMA_Init+0x680>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d036      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a4b      	ldr	r2, [pc, #300]	@ (800b9ac <HAL_DMA_Init+0x684>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d031      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a4a      	ldr	r2, [pc, #296]	@ (800b9b0 <HAL_DMA_Init+0x688>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d02c      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a48      	ldr	r2, [pc, #288]	@ (800b9b4 <HAL_DMA_Init+0x68c>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d027      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a47      	ldr	r2, [pc, #284]	@ (800b9b8 <HAL_DMA_Init+0x690>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d022      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a45      	ldr	r2, [pc, #276]	@ (800b9bc <HAL_DMA_Init+0x694>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d01d      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a44      	ldr	r2, [pc, #272]	@ (800b9c0 <HAL_DMA_Init+0x698>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d018      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a42      	ldr	r2, [pc, #264]	@ (800b9c4 <HAL_DMA_Init+0x69c>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d013      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a41      	ldr	r2, [pc, #260]	@ (800b9c8 <HAL_DMA_Init+0x6a0>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d00e      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a3f      	ldr	r2, [pc, #252]	@ (800b9cc <HAL_DMA_Init+0x6a4>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d009      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a3e      	ldr	r2, [pc, #248]	@ (800b9d0 <HAL_DMA_Init+0x6a8>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d004      	beq.n	800b8e6 <HAL_DMA_Init+0x5be>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a3c      	ldr	r2, [pc, #240]	@ (800b9d4 <HAL_DMA_Init+0x6ac>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d101      	bne.n	800b8ea <HAL_DMA_Init+0x5c2>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e000      	b.n	800b8ec <HAL_DMA_Init+0x5c4>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d032      	beq.n	800b956 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f002 fa5d 	bl	800ddb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	2b80      	cmp	r3, #128	@ 0x80
 800b8fc:	d102      	bne.n	800b904 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b90c:	b2d2      	uxtb	r2, r2
 800b90e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b918:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d010      	beq.n	800b944 <HAL_DMA_Init+0x61c>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	2b08      	cmp	r3, #8
 800b928:	d80c      	bhi.n	800b944 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f002 fada 	bl	800dee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b940:	605a      	str	r2, [r3, #4]
 800b942:	e008      	b.n	800b956 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	a7fdabf8 	.word	0xa7fdabf8
 800b974:	cccccccd 	.word	0xcccccccd
 800b978:	40020010 	.word	0x40020010
 800b97c:	40020028 	.word	0x40020028
 800b980:	40020040 	.word	0x40020040
 800b984:	40020058 	.word	0x40020058
 800b988:	40020070 	.word	0x40020070
 800b98c:	40020088 	.word	0x40020088
 800b990:	400200a0 	.word	0x400200a0
 800b994:	400200b8 	.word	0x400200b8
 800b998:	40020410 	.word	0x40020410
 800b99c:	40020428 	.word	0x40020428
 800b9a0:	40020440 	.word	0x40020440
 800b9a4:	40020458 	.word	0x40020458
 800b9a8:	40020470 	.word	0x40020470
 800b9ac:	40020488 	.word	0x40020488
 800b9b0:	400204a0 	.word	0x400204a0
 800b9b4:	400204b8 	.word	0x400204b8
 800b9b8:	58025408 	.word	0x58025408
 800b9bc:	5802541c 	.word	0x5802541c
 800b9c0:	58025430 	.word	0x58025430
 800b9c4:	58025444 	.word	0x58025444
 800b9c8:	58025458 	.word	0x58025458
 800b9cc:	5802546c 	.word	0x5802546c
 800b9d0:	58025480 	.word	0x58025480
 800b9d4:	58025494 	.word	0x58025494

0800b9d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e226      	b.n	800be42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d101      	bne.n	800ba02 <HAL_DMA_Start_IT+0x2a>
 800b9fe:	2302      	movs	r3, #2
 800ba00:	e21f      	b.n	800be42 <HAL_DMA_Start_IT+0x46a>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	f040 820a 	bne.w	800be2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a68      	ldr	r2, [pc, #416]	@ (800bbcc <HAL_DMA_Start_IT+0x1f4>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d04a      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a66      	ldr	r2, [pc, #408]	@ (800bbd0 <HAL_DMA_Start_IT+0x1f8>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d045      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a65      	ldr	r2, [pc, #404]	@ (800bbd4 <HAL_DMA_Start_IT+0x1fc>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d040      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a63      	ldr	r2, [pc, #396]	@ (800bbd8 <HAL_DMA_Start_IT+0x200>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d03b      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a62      	ldr	r2, [pc, #392]	@ (800bbdc <HAL_DMA_Start_IT+0x204>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d036      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a60      	ldr	r2, [pc, #384]	@ (800bbe0 <HAL_DMA_Start_IT+0x208>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d031      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a5f      	ldr	r2, [pc, #380]	@ (800bbe4 <HAL_DMA_Start_IT+0x20c>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d02c      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a5d      	ldr	r2, [pc, #372]	@ (800bbe8 <HAL_DMA_Start_IT+0x210>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d027      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a5c      	ldr	r2, [pc, #368]	@ (800bbec <HAL_DMA_Start_IT+0x214>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d022      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a5a      	ldr	r2, [pc, #360]	@ (800bbf0 <HAL_DMA_Start_IT+0x218>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d01d      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a59      	ldr	r2, [pc, #356]	@ (800bbf4 <HAL_DMA_Start_IT+0x21c>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d018      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a57      	ldr	r2, [pc, #348]	@ (800bbf8 <HAL_DMA_Start_IT+0x220>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d013      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a56      	ldr	r2, [pc, #344]	@ (800bbfc <HAL_DMA_Start_IT+0x224>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d00e      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a54      	ldr	r2, [pc, #336]	@ (800bc00 <HAL_DMA_Start_IT+0x228>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d009      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a53      	ldr	r2, [pc, #332]	@ (800bc04 <HAL_DMA_Start_IT+0x22c>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d004      	beq.n	800bac6 <HAL_DMA_Start_IT+0xee>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a51      	ldr	r2, [pc, #324]	@ (800bc08 <HAL_DMA_Start_IT+0x230>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d108      	bne.n	800bad8 <HAL_DMA_Start_IT+0x100>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f022 0201 	bic.w	r2, r2, #1
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	e007      	b.n	800bae8 <HAL_DMA_Start_IT+0x110>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f022 0201 	bic.w	r2, r2, #1
 800bae6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f001 fe84 	bl	800d7fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a34      	ldr	r2, [pc, #208]	@ (800bbcc <HAL_DMA_Start_IT+0x1f4>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d04a      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a33      	ldr	r2, [pc, #204]	@ (800bbd0 <HAL_DMA_Start_IT+0x1f8>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d045      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a31      	ldr	r2, [pc, #196]	@ (800bbd4 <HAL_DMA_Start_IT+0x1fc>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d040      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a30      	ldr	r2, [pc, #192]	@ (800bbd8 <HAL_DMA_Start_IT+0x200>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d03b      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a2e      	ldr	r2, [pc, #184]	@ (800bbdc <HAL_DMA_Start_IT+0x204>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d036      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a2d      	ldr	r2, [pc, #180]	@ (800bbe0 <HAL_DMA_Start_IT+0x208>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d031      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a2b      	ldr	r2, [pc, #172]	@ (800bbe4 <HAL_DMA_Start_IT+0x20c>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d02c      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a2a      	ldr	r2, [pc, #168]	@ (800bbe8 <HAL_DMA_Start_IT+0x210>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d027      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a28      	ldr	r2, [pc, #160]	@ (800bbec <HAL_DMA_Start_IT+0x214>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d022      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a27      	ldr	r2, [pc, #156]	@ (800bbf0 <HAL_DMA_Start_IT+0x218>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d01d      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a25      	ldr	r2, [pc, #148]	@ (800bbf4 <HAL_DMA_Start_IT+0x21c>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d018      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a24      	ldr	r2, [pc, #144]	@ (800bbf8 <HAL_DMA_Start_IT+0x220>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d013      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a22      	ldr	r2, [pc, #136]	@ (800bbfc <HAL_DMA_Start_IT+0x224>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d00e      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a21      	ldr	r2, [pc, #132]	@ (800bc00 <HAL_DMA_Start_IT+0x228>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d009      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a1f      	ldr	r2, [pc, #124]	@ (800bc04 <HAL_DMA_Start_IT+0x22c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d004      	beq.n	800bb94 <HAL_DMA_Start_IT+0x1bc>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a1e      	ldr	r2, [pc, #120]	@ (800bc08 <HAL_DMA_Start_IT+0x230>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d101      	bne.n	800bb98 <HAL_DMA_Start_IT+0x1c0>
 800bb94:	2301      	movs	r3, #1
 800bb96:	e000      	b.n	800bb9a <HAL_DMA_Start_IT+0x1c2>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d036      	beq.n	800bc0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f023 021e 	bic.w	r2, r3, #30
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f042 0216 	orr.w	r2, r2, #22
 800bbb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d03e      	beq.n	800bc38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f042 0208 	orr.w	r2, r2, #8
 800bbc8:	601a      	str	r2, [r3, #0]
 800bbca:	e035      	b.n	800bc38 <HAL_DMA_Start_IT+0x260>
 800bbcc:	40020010 	.word	0x40020010
 800bbd0:	40020028 	.word	0x40020028
 800bbd4:	40020040 	.word	0x40020040
 800bbd8:	40020058 	.word	0x40020058
 800bbdc:	40020070 	.word	0x40020070
 800bbe0:	40020088 	.word	0x40020088
 800bbe4:	400200a0 	.word	0x400200a0
 800bbe8:	400200b8 	.word	0x400200b8
 800bbec:	40020410 	.word	0x40020410
 800bbf0:	40020428 	.word	0x40020428
 800bbf4:	40020440 	.word	0x40020440
 800bbf8:	40020458 	.word	0x40020458
 800bbfc:	40020470 	.word	0x40020470
 800bc00:	40020488 	.word	0x40020488
 800bc04:	400204a0 	.word	0x400204a0
 800bc08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f023 020e 	bic.w	r2, r3, #14
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f042 020a 	orr.w	r2, r2, #10
 800bc1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d007      	beq.n	800bc38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f042 0204 	orr.w	r2, r2, #4
 800bc36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a83      	ldr	r2, [pc, #524]	@ (800be4c <HAL_DMA_Start_IT+0x474>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d072      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a82      	ldr	r2, [pc, #520]	@ (800be50 <HAL_DMA_Start_IT+0x478>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d06d      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a80      	ldr	r2, [pc, #512]	@ (800be54 <HAL_DMA_Start_IT+0x47c>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d068      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a7f      	ldr	r2, [pc, #508]	@ (800be58 <HAL_DMA_Start_IT+0x480>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d063      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a7d      	ldr	r2, [pc, #500]	@ (800be5c <HAL_DMA_Start_IT+0x484>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d05e      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a7c      	ldr	r2, [pc, #496]	@ (800be60 <HAL_DMA_Start_IT+0x488>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d059      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a7a      	ldr	r2, [pc, #488]	@ (800be64 <HAL_DMA_Start_IT+0x48c>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d054      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a79      	ldr	r2, [pc, #484]	@ (800be68 <HAL_DMA_Start_IT+0x490>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d04f      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a77      	ldr	r2, [pc, #476]	@ (800be6c <HAL_DMA_Start_IT+0x494>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d04a      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a76      	ldr	r2, [pc, #472]	@ (800be70 <HAL_DMA_Start_IT+0x498>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d045      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a74      	ldr	r2, [pc, #464]	@ (800be74 <HAL_DMA_Start_IT+0x49c>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d040      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a73      	ldr	r2, [pc, #460]	@ (800be78 <HAL_DMA_Start_IT+0x4a0>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d03b      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a71      	ldr	r2, [pc, #452]	@ (800be7c <HAL_DMA_Start_IT+0x4a4>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d036      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a70      	ldr	r2, [pc, #448]	@ (800be80 <HAL_DMA_Start_IT+0x4a8>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d031      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a6e      	ldr	r2, [pc, #440]	@ (800be84 <HAL_DMA_Start_IT+0x4ac>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d02c      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a6d      	ldr	r2, [pc, #436]	@ (800be88 <HAL_DMA_Start_IT+0x4b0>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d027      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a6b      	ldr	r2, [pc, #428]	@ (800be8c <HAL_DMA_Start_IT+0x4b4>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d022      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a6a      	ldr	r2, [pc, #424]	@ (800be90 <HAL_DMA_Start_IT+0x4b8>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d01d      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a68      	ldr	r2, [pc, #416]	@ (800be94 <HAL_DMA_Start_IT+0x4bc>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d018      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a67      	ldr	r2, [pc, #412]	@ (800be98 <HAL_DMA_Start_IT+0x4c0>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d013      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a65      	ldr	r2, [pc, #404]	@ (800be9c <HAL_DMA_Start_IT+0x4c4>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d00e      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a64      	ldr	r2, [pc, #400]	@ (800bea0 <HAL_DMA_Start_IT+0x4c8>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d009      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a62      	ldr	r2, [pc, #392]	@ (800bea4 <HAL_DMA_Start_IT+0x4cc>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d004      	beq.n	800bd28 <HAL_DMA_Start_IT+0x350>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a61      	ldr	r2, [pc, #388]	@ (800bea8 <HAL_DMA_Start_IT+0x4d0>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d101      	bne.n	800bd2c <HAL_DMA_Start_IT+0x354>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e000      	b.n	800bd2e <HAL_DMA_Start_IT+0x356>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d01a      	beq.n	800bd68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d007      	beq.n	800bd50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d007      	beq.n	800bd68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a37      	ldr	r2, [pc, #220]	@ (800be4c <HAL_DMA_Start_IT+0x474>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d04a      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a36      	ldr	r2, [pc, #216]	@ (800be50 <HAL_DMA_Start_IT+0x478>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d045      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a34      	ldr	r2, [pc, #208]	@ (800be54 <HAL_DMA_Start_IT+0x47c>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d040      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a33      	ldr	r2, [pc, #204]	@ (800be58 <HAL_DMA_Start_IT+0x480>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d03b      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a31      	ldr	r2, [pc, #196]	@ (800be5c <HAL_DMA_Start_IT+0x484>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d036      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a30      	ldr	r2, [pc, #192]	@ (800be60 <HAL_DMA_Start_IT+0x488>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d031      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a2e      	ldr	r2, [pc, #184]	@ (800be64 <HAL_DMA_Start_IT+0x48c>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d02c      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a2d      	ldr	r2, [pc, #180]	@ (800be68 <HAL_DMA_Start_IT+0x490>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d027      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a2b      	ldr	r2, [pc, #172]	@ (800be6c <HAL_DMA_Start_IT+0x494>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d022      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a2a      	ldr	r2, [pc, #168]	@ (800be70 <HAL_DMA_Start_IT+0x498>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d01d      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a28      	ldr	r2, [pc, #160]	@ (800be74 <HAL_DMA_Start_IT+0x49c>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d018      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a27      	ldr	r2, [pc, #156]	@ (800be78 <HAL_DMA_Start_IT+0x4a0>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d013      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a25      	ldr	r2, [pc, #148]	@ (800be7c <HAL_DMA_Start_IT+0x4a4>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d00e      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a24      	ldr	r2, [pc, #144]	@ (800be80 <HAL_DMA_Start_IT+0x4a8>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d009      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a22      	ldr	r2, [pc, #136]	@ (800be84 <HAL_DMA_Start_IT+0x4ac>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d004      	beq.n	800be08 <HAL_DMA_Start_IT+0x430>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a21      	ldr	r2, [pc, #132]	@ (800be88 <HAL_DMA_Start_IT+0x4b0>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d108      	bne.n	800be1a <HAL_DMA_Start_IT+0x442>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f042 0201 	orr.w	r2, r2, #1
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	e012      	b.n	800be40 <HAL_DMA_Start_IT+0x468>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f042 0201 	orr.w	r2, r2, #1
 800be28:	601a      	str	r2, [r3, #0]
 800be2a:	e009      	b.n	800be40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800be32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	40020010 	.word	0x40020010
 800be50:	40020028 	.word	0x40020028
 800be54:	40020040 	.word	0x40020040
 800be58:	40020058 	.word	0x40020058
 800be5c:	40020070 	.word	0x40020070
 800be60:	40020088 	.word	0x40020088
 800be64:	400200a0 	.word	0x400200a0
 800be68:	400200b8 	.word	0x400200b8
 800be6c:	40020410 	.word	0x40020410
 800be70:	40020428 	.word	0x40020428
 800be74:	40020440 	.word	0x40020440
 800be78:	40020458 	.word	0x40020458
 800be7c:	40020470 	.word	0x40020470
 800be80:	40020488 	.word	0x40020488
 800be84:	400204a0 	.word	0x400204a0
 800be88:	400204b8 	.word	0x400204b8
 800be8c:	58025408 	.word	0x58025408
 800be90:	5802541c 	.word	0x5802541c
 800be94:	58025430 	.word	0x58025430
 800be98:	58025444 	.word	0x58025444
 800be9c:	58025458 	.word	0x58025458
 800bea0:	5802546c 	.word	0x5802546c
 800bea4:	58025480 	.word	0x58025480
 800bea8:	58025494 	.word	0x58025494

0800beac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800beb4:	f7fd f902 	bl	80090bc <HAL_GetTick>
 800beb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e2dc      	b.n	800c47e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b02      	cmp	r3, #2
 800bece:	d008      	beq.n	800bee2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2280      	movs	r2, #128	@ 0x80
 800bed4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e2cd      	b.n	800c47e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a76      	ldr	r2, [pc, #472]	@ (800c0c0 <HAL_DMA_Abort+0x214>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d04a      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a74      	ldr	r2, [pc, #464]	@ (800c0c4 <HAL_DMA_Abort+0x218>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d045      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a73      	ldr	r2, [pc, #460]	@ (800c0c8 <HAL_DMA_Abort+0x21c>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d040      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a71      	ldr	r2, [pc, #452]	@ (800c0cc <HAL_DMA_Abort+0x220>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d03b      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a70      	ldr	r2, [pc, #448]	@ (800c0d0 <HAL_DMA_Abort+0x224>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d036      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a6e      	ldr	r2, [pc, #440]	@ (800c0d4 <HAL_DMA_Abort+0x228>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d031      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a6d      	ldr	r2, [pc, #436]	@ (800c0d8 <HAL_DMA_Abort+0x22c>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d02c      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a6b      	ldr	r2, [pc, #428]	@ (800c0dc <HAL_DMA_Abort+0x230>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d027      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a6a      	ldr	r2, [pc, #424]	@ (800c0e0 <HAL_DMA_Abort+0x234>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d022      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a68      	ldr	r2, [pc, #416]	@ (800c0e4 <HAL_DMA_Abort+0x238>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d01d      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a67      	ldr	r2, [pc, #412]	@ (800c0e8 <HAL_DMA_Abort+0x23c>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d018      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a65      	ldr	r2, [pc, #404]	@ (800c0ec <HAL_DMA_Abort+0x240>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d013      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a64      	ldr	r2, [pc, #400]	@ (800c0f0 <HAL_DMA_Abort+0x244>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d00e      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a62      	ldr	r2, [pc, #392]	@ (800c0f4 <HAL_DMA_Abort+0x248>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d009      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a61      	ldr	r2, [pc, #388]	@ (800c0f8 <HAL_DMA_Abort+0x24c>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d004      	beq.n	800bf82 <HAL_DMA_Abort+0xd6>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a5f      	ldr	r2, [pc, #380]	@ (800c0fc <HAL_DMA_Abort+0x250>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d101      	bne.n	800bf86 <HAL_DMA_Abort+0xda>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e000      	b.n	800bf88 <HAL_DMA_Abort+0xdc>
 800bf86:	2300      	movs	r3, #0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d013      	beq.n	800bfb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 021e 	bic.w	r2, r2, #30
 800bf9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	695a      	ldr	r2, [r3, #20]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bfaa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	e00a      	b.n	800bfca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f022 020e 	bic.w	r2, r2, #14
 800bfc2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a3c      	ldr	r2, [pc, #240]	@ (800c0c0 <HAL_DMA_Abort+0x214>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d072      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a3a      	ldr	r2, [pc, #232]	@ (800c0c4 <HAL_DMA_Abort+0x218>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d06d      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a39      	ldr	r2, [pc, #228]	@ (800c0c8 <HAL_DMA_Abort+0x21c>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d068      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a37      	ldr	r2, [pc, #220]	@ (800c0cc <HAL_DMA_Abort+0x220>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d063      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a36      	ldr	r2, [pc, #216]	@ (800c0d0 <HAL_DMA_Abort+0x224>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d05e      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a34      	ldr	r2, [pc, #208]	@ (800c0d4 <HAL_DMA_Abort+0x228>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d059      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a33      	ldr	r2, [pc, #204]	@ (800c0d8 <HAL_DMA_Abort+0x22c>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d054      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a31      	ldr	r2, [pc, #196]	@ (800c0dc <HAL_DMA_Abort+0x230>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d04f      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a30      	ldr	r2, [pc, #192]	@ (800c0e0 <HAL_DMA_Abort+0x234>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d04a      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a2e      	ldr	r2, [pc, #184]	@ (800c0e4 <HAL_DMA_Abort+0x238>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d045      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a2d      	ldr	r2, [pc, #180]	@ (800c0e8 <HAL_DMA_Abort+0x23c>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d040      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a2b      	ldr	r2, [pc, #172]	@ (800c0ec <HAL_DMA_Abort+0x240>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d03b      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a2a      	ldr	r2, [pc, #168]	@ (800c0f0 <HAL_DMA_Abort+0x244>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d036      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a28      	ldr	r2, [pc, #160]	@ (800c0f4 <HAL_DMA_Abort+0x248>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d031      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a27      	ldr	r2, [pc, #156]	@ (800c0f8 <HAL_DMA_Abort+0x24c>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d02c      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a25      	ldr	r2, [pc, #148]	@ (800c0fc <HAL_DMA_Abort+0x250>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d027      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a24      	ldr	r2, [pc, #144]	@ (800c100 <HAL_DMA_Abort+0x254>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d022      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a22      	ldr	r2, [pc, #136]	@ (800c104 <HAL_DMA_Abort+0x258>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d01d      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a21      	ldr	r2, [pc, #132]	@ (800c108 <HAL_DMA_Abort+0x25c>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d018      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a1f      	ldr	r2, [pc, #124]	@ (800c10c <HAL_DMA_Abort+0x260>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d013      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a1e      	ldr	r2, [pc, #120]	@ (800c110 <HAL_DMA_Abort+0x264>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d00e      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a1c      	ldr	r2, [pc, #112]	@ (800c114 <HAL_DMA_Abort+0x268>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d009      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c118 <HAL_DMA_Abort+0x26c>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d004      	beq.n	800c0ba <HAL_DMA_Abort+0x20e>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a19      	ldr	r2, [pc, #100]	@ (800c11c <HAL_DMA_Abort+0x270>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d132      	bne.n	800c120 <HAL_DMA_Abort+0x274>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e031      	b.n	800c122 <HAL_DMA_Abort+0x276>
 800c0be:	bf00      	nop
 800c0c0:	40020010 	.word	0x40020010
 800c0c4:	40020028 	.word	0x40020028
 800c0c8:	40020040 	.word	0x40020040
 800c0cc:	40020058 	.word	0x40020058
 800c0d0:	40020070 	.word	0x40020070
 800c0d4:	40020088 	.word	0x40020088
 800c0d8:	400200a0 	.word	0x400200a0
 800c0dc:	400200b8 	.word	0x400200b8
 800c0e0:	40020410 	.word	0x40020410
 800c0e4:	40020428 	.word	0x40020428
 800c0e8:	40020440 	.word	0x40020440
 800c0ec:	40020458 	.word	0x40020458
 800c0f0:	40020470 	.word	0x40020470
 800c0f4:	40020488 	.word	0x40020488
 800c0f8:	400204a0 	.word	0x400204a0
 800c0fc:	400204b8 	.word	0x400204b8
 800c100:	58025408 	.word	0x58025408
 800c104:	5802541c 	.word	0x5802541c
 800c108:	58025430 	.word	0x58025430
 800c10c:	58025444 	.word	0x58025444
 800c110:	58025458 	.word	0x58025458
 800c114:	5802546c 	.word	0x5802546c
 800c118:	58025480 	.word	0x58025480
 800c11c:	58025494 	.word	0x58025494
 800c120:	2300      	movs	r3, #0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d007      	beq.n	800c136 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c134:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a6d      	ldr	r2, [pc, #436]	@ (800c2f0 <HAL_DMA_Abort+0x444>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d04a      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a6b      	ldr	r2, [pc, #428]	@ (800c2f4 <HAL_DMA_Abort+0x448>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d045      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a6a      	ldr	r2, [pc, #424]	@ (800c2f8 <HAL_DMA_Abort+0x44c>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d040      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a68      	ldr	r2, [pc, #416]	@ (800c2fc <HAL_DMA_Abort+0x450>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d03b      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a67      	ldr	r2, [pc, #412]	@ (800c300 <HAL_DMA_Abort+0x454>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d036      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a65      	ldr	r2, [pc, #404]	@ (800c304 <HAL_DMA_Abort+0x458>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d031      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a64      	ldr	r2, [pc, #400]	@ (800c308 <HAL_DMA_Abort+0x45c>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d02c      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a62      	ldr	r2, [pc, #392]	@ (800c30c <HAL_DMA_Abort+0x460>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d027      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a61      	ldr	r2, [pc, #388]	@ (800c310 <HAL_DMA_Abort+0x464>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d022      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a5f      	ldr	r2, [pc, #380]	@ (800c314 <HAL_DMA_Abort+0x468>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d01d      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a5e      	ldr	r2, [pc, #376]	@ (800c318 <HAL_DMA_Abort+0x46c>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d018      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a5c      	ldr	r2, [pc, #368]	@ (800c31c <HAL_DMA_Abort+0x470>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d013      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a5b      	ldr	r2, [pc, #364]	@ (800c320 <HAL_DMA_Abort+0x474>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d00e      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a59      	ldr	r2, [pc, #356]	@ (800c324 <HAL_DMA_Abort+0x478>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d009      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a58      	ldr	r2, [pc, #352]	@ (800c328 <HAL_DMA_Abort+0x47c>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d004      	beq.n	800c1d6 <HAL_DMA_Abort+0x32a>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a56      	ldr	r2, [pc, #344]	@ (800c32c <HAL_DMA_Abort+0x480>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d108      	bne.n	800c1e8 <HAL_DMA_Abort+0x33c>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f022 0201 	bic.w	r2, r2, #1
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	e007      	b.n	800c1f8 <HAL_DMA_Abort+0x34c>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f022 0201 	bic.w	r2, r2, #1
 800c1f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c1f8:	e013      	b.n	800c222 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c1fa:	f7fc ff5f 	bl	80090bc <HAL_GetTick>
 800c1fe:	4602      	mov	r2, r0
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	2b05      	cmp	r3, #5
 800c206:	d90c      	bls.n	800c222 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2220      	movs	r2, #32
 800c20c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2203      	movs	r2, #3
 800c212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c21e:	2301      	movs	r3, #1
 800c220:	e12d      	b.n	800c47e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1e5      	bne.n	800c1fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a2f      	ldr	r2, [pc, #188]	@ (800c2f0 <HAL_DMA_Abort+0x444>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d04a      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a2d      	ldr	r2, [pc, #180]	@ (800c2f4 <HAL_DMA_Abort+0x448>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d045      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a2c      	ldr	r2, [pc, #176]	@ (800c2f8 <HAL_DMA_Abort+0x44c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d040      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a2a      	ldr	r2, [pc, #168]	@ (800c2fc <HAL_DMA_Abort+0x450>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d03b      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a29      	ldr	r2, [pc, #164]	@ (800c300 <HAL_DMA_Abort+0x454>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d036      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a27      	ldr	r2, [pc, #156]	@ (800c304 <HAL_DMA_Abort+0x458>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d031      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a26      	ldr	r2, [pc, #152]	@ (800c308 <HAL_DMA_Abort+0x45c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d02c      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a24      	ldr	r2, [pc, #144]	@ (800c30c <HAL_DMA_Abort+0x460>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d027      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a23      	ldr	r2, [pc, #140]	@ (800c310 <HAL_DMA_Abort+0x464>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d022      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a21      	ldr	r2, [pc, #132]	@ (800c314 <HAL_DMA_Abort+0x468>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d01d      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a20      	ldr	r2, [pc, #128]	@ (800c318 <HAL_DMA_Abort+0x46c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d018      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a1e      	ldr	r2, [pc, #120]	@ (800c31c <HAL_DMA_Abort+0x470>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d013      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a1d      	ldr	r2, [pc, #116]	@ (800c320 <HAL_DMA_Abort+0x474>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d00e      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c324 <HAL_DMA_Abort+0x478>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d009      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a1a      	ldr	r2, [pc, #104]	@ (800c328 <HAL_DMA_Abort+0x47c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d004      	beq.n	800c2ce <HAL_DMA_Abort+0x422>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a18      	ldr	r2, [pc, #96]	@ (800c32c <HAL_DMA_Abort+0x480>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d101      	bne.n	800c2d2 <HAL_DMA_Abort+0x426>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <HAL_DMA_Abort+0x428>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d02b      	beq.n	800c330 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2e2:	f003 031f 	and.w	r3, r3, #31
 800c2e6:	223f      	movs	r2, #63	@ 0x3f
 800c2e8:	409a      	lsls	r2, r3
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	609a      	str	r2, [r3, #8]
 800c2ee:	e02a      	b.n	800c346 <HAL_DMA_Abort+0x49a>
 800c2f0:	40020010 	.word	0x40020010
 800c2f4:	40020028 	.word	0x40020028
 800c2f8:	40020040 	.word	0x40020040
 800c2fc:	40020058 	.word	0x40020058
 800c300:	40020070 	.word	0x40020070
 800c304:	40020088 	.word	0x40020088
 800c308:	400200a0 	.word	0x400200a0
 800c30c:	400200b8 	.word	0x400200b8
 800c310:	40020410 	.word	0x40020410
 800c314:	40020428 	.word	0x40020428
 800c318:	40020440 	.word	0x40020440
 800c31c:	40020458 	.word	0x40020458
 800c320:	40020470 	.word	0x40020470
 800c324:	40020488 	.word	0x40020488
 800c328:	400204a0 	.word	0x400204a0
 800c32c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c334:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c33a:	f003 031f 	and.w	r3, r3, #31
 800c33e:	2201      	movs	r2, #1
 800c340:	409a      	lsls	r2, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a4f      	ldr	r2, [pc, #316]	@ (800c488 <HAL_DMA_Abort+0x5dc>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d072      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a4d      	ldr	r2, [pc, #308]	@ (800c48c <HAL_DMA_Abort+0x5e0>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d06d      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a4c      	ldr	r2, [pc, #304]	@ (800c490 <HAL_DMA_Abort+0x5e4>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d068      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a4a      	ldr	r2, [pc, #296]	@ (800c494 <HAL_DMA_Abort+0x5e8>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d063      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a49      	ldr	r2, [pc, #292]	@ (800c498 <HAL_DMA_Abort+0x5ec>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d05e      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a47      	ldr	r2, [pc, #284]	@ (800c49c <HAL_DMA_Abort+0x5f0>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d059      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a46      	ldr	r2, [pc, #280]	@ (800c4a0 <HAL_DMA_Abort+0x5f4>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d054      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a44      	ldr	r2, [pc, #272]	@ (800c4a4 <HAL_DMA_Abort+0x5f8>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d04f      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a43      	ldr	r2, [pc, #268]	@ (800c4a8 <HAL_DMA_Abort+0x5fc>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d04a      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a41      	ldr	r2, [pc, #260]	@ (800c4ac <HAL_DMA_Abort+0x600>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d045      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a40      	ldr	r2, [pc, #256]	@ (800c4b0 <HAL_DMA_Abort+0x604>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d040      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a3e      	ldr	r2, [pc, #248]	@ (800c4b4 <HAL_DMA_Abort+0x608>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d03b      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a3d      	ldr	r2, [pc, #244]	@ (800c4b8 <HAL_DMA_Abort+0x60c>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d036      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a3b      	ldr	r2, [pc, #236]	@ (800c4bc <HAL_DMA_Abort+0x610>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d031      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a3a      	ldr	r2, [pc, #232]	@ (800c4c0 <HAL_DMA_Abort+0x614>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d02c      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a38      	ldr	r2, [pc, #224]	@ (800c4c4 <HAL_DMA_Abort+0x618>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d027      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a37      	ldr	r2, [pc, #220]	@ (800c4c8 <HAL_DMA_Abort+0x61c>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d022      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a35      	ldr	r2, [pc, #212]	@ (800c4cc <HAL_DMA_Abort+0x620>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d01d      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a34      	ldr	r2, [pc, #208]	@ (800c4d0 <HAL_DMA_Abort+0x624>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d018      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a32      	ldr	r2, [pc, #200]	@ (800c4d4 <HAL_DMA_Abort+0x628>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d013      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a31      	ldr	r2, [pc, #196]	@ (800c4d8 <HAL_DMA_Abort+0x62c>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d00e      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a2f      	ldr	r2, [pc, #188]	@ (800c4dc <HAL_DMA_Abort+0x630>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d009      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a2e      	ldr	r2, [pc, #184]	@ (800c4e0 <HAL_DMA_Abort+0x634>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d004      	beq.n	800c436 <HAL_DMA_Abort+0x58a>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a2c      	ldr	r2, [pc, #176]	@ (800c4e4 <HAL_DMA_Abort+0x638>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d101      	bne.n	800c43a <HAL_DMA_Abort+0x58e>
 800c436:	2301      	movs	r3, #1
 800c438:	e000      	b.n	800c43c <HAL_DMA_Abort+0x590>
 800c43a:	2300      	movs	r3, #0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d015      	beq.n	800c46c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c448:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00c      	beq.n	800c46c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c45c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c460:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c46a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	40020010 	.word	0x40020010
 800c48c:	40020028 	.word	0x40020028
 800c490:	40020040 	.word	0x40020040
 800c494:	40020058 	.word	0x40020058
 800c498:	40020070 	.word	0x40020070
 800c49c:	40020088 	.word	0x40020088
 800c4a0:	400200a0 	.word	0x400200a0
 800c4a4:	400200b8 	.word	0x400200b8
 800c4a8:	40020410 	.word	0x40020410
 800c4ac:	40020428 	.word	0x40020428
 800c4b0:	40020440 	.word	0x40020440
 800c4b4:	40020458 	.word	0x40020458
 800c4b8:	40020470 	.word	0x40020470
 800c4bc:	40020488 	.word	0x40020488
 800c4c0:	400204a0 	.word	0x400204a0
 800c4c4:	400204b8 	.word	0x400204b8
 800c4c8:	58025408 	.word	0x58025408
 800c4cc:	5802541c 	.word	0x5802541c
 800c4d0:	58025430 	.word	0x58025430
 800c4d4:	58025444 	.word	0x58025444
 800c4d8:	58025458 	.word	0x58025458
 800c4dc:	5802546c 	.word	0x5802546c
 800c4e0:	58025480 	.word	0x58025480
 800c4e4:	58025494 	.word	0x58025494

0800c4e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e237      	b.n	800c96a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b02      	cmp	r3, #2
 800c504:	d004      	beq.n	800c510 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2280      	movs	r2, #128	@ 0x80
 800c50a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c50c:	2301      	movs	r3, #1
 800c50e:	e22c      	b.n	800c96a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a5c      	ldr	r2, [pc, #368]	@ (800c688 <HAL_DMA_Abort_IT+0x1a0>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d04a      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a5b      	ldr	r2, [pc, #364]	@ (800c68c <HAL_DMA_Abort_IT+0x1a4>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d045      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a59      	ldr	r2, [pc, #356]	@ (800c690 <HAL_DMA_Abort_IT+0x1a8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d040      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a58      	ldr	r2, [pc, #352]	@ (800c694 <HAL_DMA_Abort_IT+0x1ac>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d03b      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a56      	ldr	r2, [pc, #344]	@ (800c698 <HAL_DMA_Abort_IT+0x1b0>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d036      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a55      	ldr	r2, [pc, #340]	@ (800c69c <HAL_DMA_Abort_IT+0x1b4>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d031      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a53      	ldr	r2, [pc, #332]	@ (800c6a0 <HAL_DMA_Abort_IT+0x1b8>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d02c      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a52      	ldr	r2, [pc, #328]	@ (800c6a4 <HAL_DMA_Abort_IT+0x1bc>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d027      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a50      	ldr	r2, [pc, #320]	@ (800c6a8 <HAL_DMA_Abort_IT+0x1c0>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d022      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a4f      	ldr	r2, [pc, #316]	@ (800c6ac <HAL_DMA_Abort_IT+0x1c4>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d01d      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a4d      	ldr	r2, [pc, #308]	@ (800c6b0 <HAL_DMA_Abort_IT+0x1c8>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d018      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a4c      	ldr	r2, [pc, #304]	@ (800c6b4 <HAL_DMA_Abort_IT+0x1cc>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d013      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a4a      	ldr	r2, [pc, #296]	@ (800c6b8 <HAL_DMA_Abort_IT+0x1d0>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d00e      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a49      	ldr	r2, [pc, #292]	@ (800c6bc <HAL_DMA_Abort_IT+0x1d4>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d009      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a47      	ldr	r2, [pc, #284]	@ (800c6c0 <HAL_DMA_Abort_IT+0x1d8>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d004      	beq.n	800c5b0 <HAL_DMA_Abort_IT+0xc8>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a46      	ldr	r2, [pc, #280]	@ (800c6c4 <HAL_DMA_Abort_IT+0x1dc>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d101      	bne.n	800c5b4 <HAL_DMA_Abort_IT+0xcc>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e000      	b.n	800c5b6 <HAL_DMA_Abort_IT+0xce>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 8086 	beq.w	800c6c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2204      	movs	r2, #4
 800c5c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a2f      	ldr	r2, [pc, #188]	@ (800c688 <HAL_DMA_Abort_IT+0x1a0>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d04a      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a2e      	ldr	r2, [pc, #184]	@ (800c68c <HAL_DMA_Abort_IT+0x1a4>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d045      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a2c      	ldr	r2, [pc, #176]	@ (800c690 <HAL_DMA_Abort_IT+0x1a8>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d040      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a2b      	ldr	r2, [pc, #172]	@ (800c694 <HAL_DMA_Abort_IT+0x1ac>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d03b      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a29      	ldr	r2, [pc, #164]	@ (800c698 <HAL_DMA_Abort_IT+0x1b0>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d036      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a28      	ldr	r2, [pc, #160]	@ (800c69c <HAL_DMA_Abort_IT+0x1b4>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d031      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a26      	ldr	r2, [pc, #152]	@ (800c6a0 <HAL_DMA_Abort_IT+0x1b8>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d02c      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a25      	ldr	r2, [pc, #148]	@ (800c6a4 <HAL_DMA_Abort_IT+0x1bc>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d027      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a23      	ldr	r2, [pc, #140]	@ (800c6a8 <HAL_DMA_Abort_IT+0x1c0>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d022      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a22      	ldr	r2, [pc, #136]	@ (800c6ac <HAL_DMA_Abort_IT+0x1c4>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d01d      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a20      	ldr	r2, [pc, #128]	@ (800c6b0 <HAL_DMA_Abort_IT+0x1c8>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d018      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a1f      	ldr	r2, [pc, #124]	@ (800c6b4 <HAL_DMA_Abort_IT+0x1cc>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d013      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a1d      	ldr	r2, [pc, #116]	@ (800c6b8 <HAL_DMA_Abort_IT+0x1d0>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d00e      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a1c      	ldr	r2, [pc, #112]	@ (800c6bc <HAL_DMA_Abort_IT+0x1d4>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d009      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a1a      	ldr	r2, [pc, #104]	@ (800c6c0 <HAL_DMA_Abort_IT+0x1d8>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d004      	beq.n	800c664 <HAL_DMA_Abort_IT+0x17c>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a19      	ldr	r2, [pc, #100]	@ (800c6c4 <HAL_DMA_Abort_IT+0x1dc>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d108      	bne.n	800c676 <HAL_DMA_Abort_IT+0x18e>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 0201 	bic.w	r2, r2, #1
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	e178      	b.n	800c968 <HAL_DMA_Abort_IT+0x480>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f022 0201 	bic.w	r2, r2, #1
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	e16f      	b.n	800c968 <HAL_DMA_Abort_IT+0x480>
 800c688:	40020010 	.word	0x40020010
 800c68c:	40020028 	.word	0x40020028
 800c690:	40020040 	.word	0x40020040
 800c694:	40020058 	.word	0x40020058
 800c698:	40020070 	.word	0x40020070
 800c69c:	40020088 	.word	0x40020088
 800c6a0:	400200a0 	.word	0x400200a0
 800c6a4:	400200b8 	.word	0x400200b8
 800c6a8:	40020410 	.word	0x40020410
 800c6ac:	40020428 	.word	0x40020428
 800c6b0:	40020440 	.word	0x40020440
 800c6b4:	40020458 	.word	0x40020458
 800c6b8:	40020470 	.word	0x40020470
 800c6bc:	40020488 	.word	0x40020488
 800c6c0:	400204a0 	.word	0x400204a0
 800c6c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f022 020e 	bic.w	r2, r2, #14
 800c6d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a6c      	ldr	r2, [pc, #432]	@ (800c890 <HAL_DMA_Abort_IT+0x3a8>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d04a      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a6b      	ldr	r2, [pc, #428]	@ (800c894 <HAL_DMA_Abort_IT+0x3ac>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d045      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a69      	ldr	r2, [pc, #420]	@ (800c898 <HAL_DMA_Abort_IT+0x3b0>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d040      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a68      	ldr	r2, [pc, #416]	@ (800c89c <HAL_DMA_Abort_IT+0x3b4>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d03b      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a66      	ldr	r2, [pc, #408]	@ (800c8a0 <HAL_DMA_Abort_IT+0x3b8>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d036      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a65      	ldr	r2, [pc, #404]	@ (800c8a4 <HAL_DMA_Abort_IT+0x3bc>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d031      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a63      	ldr	r2, [pc, #396]	@ (800c8a8 <HAL_DMA_Abort_IT+0x3c0>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d02c      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a62      	ldr	r2, [pc, #392]	@ (800c8ac <HAL_DMA_Abort_IT+0x3c4>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d027      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a60      	ldr	r2, [pc, #384]	@ (800c8b0 <HAL_DMA_Abort_IT+0x3c8>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d022      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a5f      	ldr	r2, [pc, #380]	@ (800c8b4 <HAL_DMA_Abort_IT+0x3cc>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d01d      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a5d      	ldr	r2, [pc, #372]	@ (800c8b8 <HAL_DMA_Abort_IT+0x3d0>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d018      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a5c      	ldr	r2, [pc, #368]	@ (800c8bc <HAL_DMA_Abort_IT+0x3d4>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d013      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a5a      	ldr	r2, [pc, #360]	@ (800c8c0 <HAL_DMA_Abort_IT+0x3d8>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d00e      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a59      	ldr	r2, [pc, #356]	@ (800c8c4 <HAL_DMA_Abort_IT+0x3dc>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d009      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a57      	ldr	r2, [pc, #348]	@ (800c8c8 <HAL_DMA_Abort_IT+0x3e0>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d004      	beq.n	800c778 <HAL_DMA_Abort_IT+0x290>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a56      	ldr	r2, [pc, #344]	@ (800c8cc <HAL_DMA_Abort_IT+0x3e4>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d108      	bne.n	800c78a <HAL_DMA_Abort_IT+0x2a2>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f022 0201 	bic.w	r2, r2, #1
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	e007      	b.n	800c79a <HAL_DMA_Abort_IT+0x2b2>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f022 0201 	bic.w	r2, r2, #1
 800c798:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a3c      	ldr	r2, [pc, #240]	@ (800c890 <HAL_DMA_Abort_IT+0x3a8>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d072      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a3a      	ldr	r2, [pc, #232]	@ (800c894 <HAL_DMA_Abort_IT+0x3ac>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d06d      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a39      	ldr	r2, [pc, #228]	@ (800c898 <HAL_DMA_Abort_IT+0x3b0>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d068      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a37      	ldr	r2, [pc, #220]	@ (800c89c <HAL_DMA_Abort_IT+0x3b4>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d063      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a36      	ldr	r2, [pc, #216]	@ (800c8a0 <HAL_DMA_Abort_IT+0x3b8>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d05e      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a34      	ldr	r2, [pc, #208]	@ (800c8a4 <HAL_DMA_Abort_IT+0x3bc>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d059      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a33      	ldr	r2, [pc, #204]	@ (800c8a8 <HAL_DMA_Abort_IT+0x3c0>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d054      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a31      	ldr	r2, [pc, #196]	@ (800c8ac <HAL_DMA_Abort_IT+0x3c4>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d04f      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a30      	ldr	r2, [pc, #192]	@ (800c8b0 <HAL_DMA_Abort_IT+0x3c8>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d04a      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a2e      	ldr	r2, [pc, #184]	@ (800c8b4 <HAL_DMA_Abort_IT+0x3cc>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d045      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a2d      	ldr	r2, [pc, #180]	@ (800c8b8 <HAL_DMA_Abort_IT+0x3d0>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d040      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a2b      	ldr	r2, [pc, #172]	@ (800c8bc <HAL_DMA_Abort_IT+0x3d4>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d03b      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a2a      	ldr	r2, [pc, #168]	@ (800c8c0 <HAL_DMA_Abort_IT+0x3d8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d036      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a28      	ldr	r2, [pc, #160]	@ (800c8c4 <HAL_DMA_Abort_IT+0x3dc>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d031      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a27      	ldr	r2, [pc, #156]	@ (800c8c8 <HAL_DMA_Abort_IT+0x3e0>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d02c      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a25      	ldr	r2, [pc, #148]	@ (800c8cc <HAL_DMA_Abort_IT+0x3e4>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d027      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a24      	ldr	r2, [pc, #144]	@ (800c8d0 <HAL_DMA_Abort_IT+0x3e8>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d022      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a22      	ldr	r2, [pc, #136]	@ (800c8d4 <HAL_DMA_Abort_IT+0x3ec>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d01d      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a21      	ldr	r2, [pc, #132]	@ (800c8d8 <HAL_DMA_Abort_IT+0x3f0>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d018      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a1f      	ldr	r2, [pc, #124]	@ (800c8dc <HAL_DMA_Abort_IT+0x3f4>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d013      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a1e      	ldr	r2, [pc, #120]	@ (800c8e0 <HAL_DMA_Abort_IT+0x3f8>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d00e      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a1c      	ldr	r2, [pc, #112]	@ (800c8e4 <HAL_DMA_Abort_IT+0x3fc>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d009      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a1b      	ldr	r2, [pc, #108]	@ (800c8e8 <HAL_DMA_Abort_IT+0x400>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d004      	beq.n	800c88a <HAL_DMA_Abort_IT+0x3a2>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a19      	ldr	r2, [pc, #100]	@ (800c8ec <HAL_DMA_Abort_IT+0x404>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d132      	bne.n	800c8f0 <HAL_DMA_Abort_IT+0x408>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e031      	b.n	800c8f2 <HAL_DMA_Abort_IT+0x40a>
 800c88e:	bf00      	nop
 800c890:	40020010 	.word	0x40020010
 800c894:	40020028 	.word	0x40020028
 800c898:	40020040 	.word	0x40020040
 800c89c:	40020058 	.word	0x40020058
 800c8a0:	40020070 	.word	0x40020070
 800c8a4:	40020088 	.word	0x40020088
 800c8a8:	400200a0 	.word	0x400200a0
 800c8ac:	400200b8 	.word	0x400200b8
 800c8b0:	40020410 	.word	0x40020410
 800c8b4:	40020428 	.word	0x40020428
 800c8b8:	40020440 	.word	0x40020440
 800c8bc:	40020458 	.word	0x40020458
 800c8c0:	40020470 	.word	0x40020470
 800c8c4:	40020488 	.word	0x40020488
 800c8c8:	400204a0 	.word	0x400204a0
 800c8cc:	400204b8 	.word	0x400204b8
 800c8d0:	58025408 	.word	0x58025408
 800c8d4:	5802541c 	.word	0x5802541c
 800c8d8:	58025430 	.word	0x58025430
 800c8dc:	58025444 	.word	0x58025444
 800c8e0:	58025458 	.word	0x58025458
 800c8e4:	5802546c 	.word	0x5802546c
 800c8e8:	58025480 	.word	0x58025480
 800c8ec:	58025494 	.word	0x58025494
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d028      	beq.n	800c948 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c904:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c90a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c910:	f003 031f 	and.w	r3, r3, #31
 800c914:	2201      	movs	r2, #1
 800c916:	409a      	lsls	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c924:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00c      	beq.n	800c948 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c93c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c946:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop

0800c974 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b08a      	sub	sp, #40	@ 0x28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c980:	4b67      	ldr	r3, [pc, #412]	@ (800cb20 <HAL_DMA_IRQHandler+0x1ac>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a67      	ldr	r2, [pc, #412]	@ (800cb24 <HAL_DMA_IRQHandler+0x1b0>)
 800c986:	fba2 2303 	umull	r2, r3, r2, r3
 800c98a:	0a9b      	lsrs	r3, r3, #10
 800c98c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c992:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c998:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a5f      	ldr	r2, [pc, #380]	@ (800cb28 <HAL_DMA_IRQHandler+0x1b4>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d04a      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a5d      	ldr	r2, [pc, #372]	@ (800cb2c <HAL_DMA_IRQHandler+0x1b8>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d045      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a5c      	ldr	r2, [pc, #368]	@ (800cb30 <HAL_DMA_IRQHandler+0x1bc>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d040      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a5a      	ldr	r2, [pc, #360]	@ (800cb34 <HAL_DMA_IRQHandler+0x1c0>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d03b      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a59      	ldr	r2, [pc, #356]	@ (800cb38 <HAL_DMA_IRQHandler+0x1c4>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d036      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a57      	ldr	r2, [pc, #348]	@ (800cb3c <HAL_DMA_IRQHandler+0x1c8>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d031      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a56      	ldr	r2, [pc, #344]	@ (800cb40 <HAL_DMA_IRQHandler+0x1cc>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d02c      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a54      	ldr	r2, [pc, #336]	@ (800cb44 <HAL_DMA_IRQHandler+0x1d0>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d027      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a53      	ldr	r2, [pc, #332]	@ (800cb48 <HAL_DMA_IRQHandler+0x1d4>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d022      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a51      	ldr	r2, [pc, #324]	@ (800cb4c <HAL_DMA_IRQHandler+0x1d8>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d01d      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a50      	ldr	r2, [pc, #320]	@ (800cb50 <HAL_DMA_IRQHandler+0x1dc>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d018      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a4e      	ldr	r2, [pc, #312]	@ (800cb54 <HAL_DMA_IRQHandler+0x1e0>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d013      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a4d      	ldr	r2, [pc, #308]	@ (800cb58 <HAL_DMA_IRQHandler+0x1e4>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d00e      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a4b      	ldr	r2, [pc, #300]	@ (800cb5c <HAL_DMA_IRQHandler+0x1e8>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d009      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a4a      	ldr	r2, [pc, #296]	@ (800cb60 <HAL_DMA_IRQHandler+0x1ec>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d004      	beq.n	800ca46 <HAL_DMA_IRQHandler+0xd2>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a48      	ldr	r2, [pc, #288]	@ (800cb64 <HAL_DMA_IRQHandler+0x1f0>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d101      	bne.n	800ca4a <HAL_DMA_IRQHandler+0xd6>
 800ca46:	2301      	movs	r3, #1
 800ca48:	e000      	b.n	800ca4c <HAL_DMA_IRQHandler+0xd8>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 842b 	beq.w	800d2a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca56:	f003 031f 	and.w	r3, r3, #31
 800ca5a:	2208      	movs	r2, #8
 800ca5c:	409a      	lsls	r2, r3
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	4013      	ands	r3, r2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 80a2 	beq.w	800cbac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a2e      	ldr	r2, [pc, #184]	@ (800cb28 <HAL_DMA_IRQHandler+0x1b4>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d04a      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a2d      	ldr	r2, [pc, #180]	@ (800cb2c <HAL_DMA_IRQHandler+0x1b8>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d045      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a2b      	ldr	r2, [pc, #172]	@ (800cb30 <HAL_DMA_IRQHandler+0x1bc>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d040      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a2a      	ldr	r2, [pc, #168]	@ (800cb34 <HAL_DMA_IRQHandler+0x1c0>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d03b      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a28      	ldr	r2, [pc, #160]	@ (800cb38 <HAL_DMA_IRQHandler+0x1c4>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d036      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a27      	ldr	r2, [pc, #156]	@ (800cb3c <HAL_DMA_IRQHandler+0x1c8>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d031      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a25      	ldr	r2, [pc, #148]	@ (800cb40 <HAL_DMA_IRQHandler+0x1cc>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d02c      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a24      	ldr	r2, [pc, #144]	@ (800cb44 <HAL_DMA_IRQHandler+0x1d0>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d027      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a22      	ldr	r2, [pc, #136]	@ (800cb48 <HAL_DMA_IRQHandler+0x1d4>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d022      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a21      	ldr	r2, [pc, #132]	@ (800cb4c <HAL_DMA_IRQHandler+0x1d8>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d01d      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a1f      	ldr	r2, [pc, #124]	@ (800cb50 <HAL_DMA_IRQHandler+0x1dc>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d018      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a1e      	ldr	r2, [pc, #120]	@ (800cb54 <HAL_DMA_IRQHandler+0x1e0>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d013      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a1c      	ldr	r2, [pc, #112]	@ (800cb58 <HAL_DMA_IRQHandler+0x1e4>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d00e      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a1b      	ldr	r2, [pc, #108]	@ (800cb5c <HAL_DMA_IRQHandler+0x1e8>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d009      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a19      	ldr	r2, [pc, #100]	@ (800cb60 <HAL_DMA_IRQHandler+0x1ec>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d004      	beq.n	800cb08 <HAL_DMA_IRQHandler+0x194>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a18      	ldr	r2, [pc, #96]	@ (800cb64 <HAL_DMA_IRQHandler+0x1f0>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d12f      	bne.n	800cb68 <HAL_DMA_IRQHandler+0x1f4>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 0304 	and.w	r3, r3, #4
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	bf14      	ite	ne
 800cb16:	2301      	movne	r3, #1
 800cb18:	2300      	moveq	r3, #0
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	e02e      	b.n	800cb7c <HAL_DMA_IRQHandler+0x208>
 800cb1e:	bf00      	nop
 800cb20:	24000004 	.word	0x24000004
 800cb24:	1b4e81b5 	.word	0x1b4e81b5
 800cb28:	40020010 	.word	0x40020010
 800cb2c:	40020028 	.word	0x40020028
 800cb30:	40020040 	.word	0x40020040
 800cb34:	40020058 	.word	0x40020058
 800cb38:	40020070 	.word	0x40020070
 800cb3c:	40020088 	.word	0x40020088
 800cb40:	400200a0 	.word	0x400200a0
 800cb44:	400200b8 	.word	0x400200b8
 800cb48:	40020410 	.word	0x40020410
 800cb4c:	40020428 	.word	0x40020428
 800cb50:	40020440 	.word	0x40020440
 800cb54:	40020458 	.word	0x40020458
 800cb58:	40020470 	.word	0x40020470
 800cb5c:	40020488 	.word	0x40020488
 800cb60:	400204a0 	.word	0x400204a0
 800cb64:	400204b8 	.word	0x400204b8
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0308 	and.w	r3, r3, #8
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	bf14      	ite	ne
 800cb76:	2301      	movne	r3, #1
 800cb78:	2300      	moveq	r3, #0
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d015      	beq.n	800cbac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 0204 	bic.w	r2, r2, #4
 800cb8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb94:	f003 031f 	and.w	r3, r3, #31
 800cb98:	2208      	movs	r2, #8
 800cb9a:	409a      	lsls	r2, r3
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cba4:	f043 0201 	orr.w	r2, r3, #1
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbb0:	f003 031f 	and.w	r3, r3, #31
 800cbb4:	69ba      	ldr	r2, [r7, #24]
 800cbb6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d06e      	beq.n	800cca0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a69      	ldr	r2, [pc, #420]	@ (800cd6c <HAL_DMA_IRQHandler+0x3f8>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d04a      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a67      	ldr	r2, [pc, #412]	@ (800cd70 <HAL_DMA_IRQHandler+0x3fc>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d045      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a66      	ldr	r2, [pc, #408]	@ (800cd74 <HAL_DMA_IRQHandler+0x400>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d040      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a64      	ldr	r2, [pc, #400]	@ (800cd78 <HAL_DMA_IRQHandler+0x404>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d03b      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a63      	ldr	r2, [pc, #396]	@ (800cd7c <HAL_DMA_IRQHandler+0x408>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d036      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a61      	ldr	r2, [pc, #388]	@ (800cd80 <HAL_DMA_IRQHandler+0x40c>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d031      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a60      	ldr	r2, [pc, #384]	@ (800cd84 <HAL_DMA_IRQHandler+0x410>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d02c      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a5e      	ldr	r2, [pc, #376]	@ (800cd88 <HAL_DMA_IRQHandler+0x414>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d027      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a5d      	ldr	r2, [pc, #372]	@ (800cd8c <HAL_DMA_IRQHandler+0x418>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d022      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a5b      	ldr	r2, [pc, #364]	@ (800cd90 <HAL_DMA_IRQHandler+0x41c>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d01d      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a5a      	ldr	r2, [pc, #360]	@ (800cd94 <HAL_DMA_IRQHandler+0x420>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d018      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a58      	ldr	r2, [pc, #352]	@ (800cd98 <HAL_DMA_IRQHandler+0x424>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d013      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a57      	ldr	r2, [pc, #348]	@ (800cd9c <HAL_DMA_IRQHandler+0x428>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d00e      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a55      	ldr	r2, [pc, #340]	@ (800cda0 <HAL_DMA_IRQHandler+0x42c>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d009      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a54      	ldr	r2, [pc, #336]	@ (800cda4 <HAL_DMA_IRQHandler+0x430>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d004      	beq.n	800cc62 <HAL_DMA_IRQHandler+0x2ee>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a52      	ldr	r2, [pc, #328]	@ (800cda8 <HAL_DMA_IRQHandler+0x434>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d10a      	bne.n	800cc78 <HAL_DMA_IRQHandler+0x304>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	bf14      	ite	ne
 800cc70:	2301      	movne	r3, #1
 800cc72:	2300      	moveq	r3, #0
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	e003      	b.n	800cc80 <HAL_DMA_IRQHandler+0x30c>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00d      	beq.n	800cca0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc88:	f003 031f 	and.w	r3, r3, #31
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	409a      	lsls	r2, r3
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc98:	f043 0202 	orr.w	r2, r3, #2
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cca4:	f003 031f 	and.w	r3, r3, #31
 800cca8:	2204      	movs	r2, #4
 800ccaa:	409a      	lsls	r2, r3
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	4013      	ands	r3, r2
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 808f 	beq.w	800cdd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a2c      	ldr	r2, [pc, #176]	@ (800cd6c <HAL_DMA_IRQHandler+0x3f8>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d04a      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a2a      	ldr	r2, [pc, #168]	@ (800cd70 <HAL_DMA_IRQHandler+0x3fc>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d045      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a29      	ldr	r2, [pc, #164]	@ (800cd74 <HAL_DMA_IRQHandler+0x400>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d040      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a27      	ldr	r2, [pc, #156]	@ (800cd78 <HAL_DMA_IRQHandler+0x404>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d03b      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a26      	ldr	r2, [pc, #152]	@ (800cd7c <HAL_DMA_IRQHandler+0x408>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d036      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a24      	ldr	r2, [pc, #144]	@ (800cd80 <HAL_DMA_IRQHandler+0x40c>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d031      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a23      	ldr	r2, [pc, #140]	@ (800cd84 <HAL_DMA_IRQHandler+0x410>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d02c      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a21      	ldr	r2, [pc, #132]	@ (800cd88 <HAL_DMA_IRQHandler+0x414>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d027      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a20      	ldr	r2, [pc, #128]	@ (800cd8c <HAL_DMA_IRQHandler+0x418>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d022      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a1e      	ldr	r2, [pc, #120]	@ (800cd90 <HAL_DMA_IRQHandler+0x41c>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d01d      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a1d      	ldr	r2, [pc, #116]	@ (800cd94 <HAL_DMA_IRQHandler+0x420>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d018      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a1b      	ldr	r2, [pc, #108]	@ (800cd98 <HAL_DMA_IRQHandler+0x424>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d013      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a1a      	ldr	r2, [pc, #104]	@ (800cd9c <HAL_DMA_IRQHandler+0x428>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d00e      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a18      	ldr	r2, [pc, #96]	@ (800cda0 <HAL_DMA_IRQHandler+0x42c>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d009      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a17      	ldr	r2, [pc, #92]	@ (800cda4 <HAL_DMA_IRQHandler+0x430>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d004      	beq.n	800cd56 <HAL_DMA_IRQHandler+0x3e2>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a15      	ldr	r2, [pc, #84]	@ (800cda8 <HAL_DMA_IRQHandler+0x434>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d12a      	bne.n	800cdac <HAL_DMA_IRQHandler+0x438>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f003 0302 	and.w	r3, r3, #2
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	bf14      	ite	ne
 800cd64:	2301      	movne	r3, #1
 800cd66:	2300      	moveq	r3, #0
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	e023      	b.n	800cdb4 <HAL_DMA_IRQHandler+0x440>
 800cd6c:	40020010 	.word	0x40020010
 800cd70:	40020028 	.word	0x40020028
 800cd74:	40020040 	.word	0x40020040
 800cd78:	40020058 	.word	0x40020058
 800cd7c:	40020070 	.word	0x40020070
 800cd80:	40020088 	.word	0x40020088
 800cd84:	400200a0 	.word	0x400200a0
 800cd88:	400200b8 	.word	0x400200b8
 800cd8c:	40020410 	.word	0x40020410
 800cd90:	40020428 	.word	0x40020428
 800cd94:	40020440 	.word	0x40020440
 800cd98:	40020458 	.word	0x40020458
 800cd9c:	40020470 	.word	0x40020470
 800cda0:	40020488 	.word	0x40020488
 800cda4:	400204a0 	.word	0x400204a0
 800cda8:	400204b8 	.word	0x400204b8
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00d      	beq.n	800cdd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdbc:	f003 031f 	and.w	r3, r3, #31
 800cdc0:	2204      	movs	r2, #4
 800cdc2:	409a      	lsls	r2, r3
 800cdc4:	6a3b      	ldr	r3, [r7, #32]
 800cdc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdcc:	f043 0204 	orr.w	r2, r3, #4
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdd8:	f003 031f 	and.w	r3, r3, #31
 800cddc:	2210      	movs	r2, #16
 800cdde:	409a      	lsls	r2, r3
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	4013      	ands	r3, r2
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 80a6 	beq.w	800cf36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a85      	ldr	r2, [pc, #532]	@ (800d004 <HAL_DMA_IRQHandler+0x690>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d04a      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a83      	ldr	r2, [pc, #524]	@ (800d008 <HAL_DMA_IRQHandler+0x694>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d045      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a82      	ldr	r2, [pc, #520]	@ (800d00c <HAL_DMA_IRQHandler+0x698>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d040      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a80      	ldr	r2, [pc, #512]	@ (800d010 <HAL_DMA_IRQHandler+0x69c>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d03b      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a7f      	ldr	r2, [pc, #508]	@ (800d014 <HAL_DMA_IRQHandler+0x6a0>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d036      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a7d      	ldr	r2, [pc, #500]	@ (800d018 <HAL_DMA_IRQHandler+0x6a4>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d031      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a7c      	ldr	r2, [pc, #496]	@ (800d01c <HAL_DMA_IRQHandler+0x6a8>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d02c      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a7a      	ldr	r2, [pc, #488]	@ (800d020 <HAL_DMA_IRQHandler+0x6ac>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d027      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a79      	ldr	r2, [pc, #484]	@ (800d024 <HAL_DMA_IRQHandler+0x6b0>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d022      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a77      	ldr	r2, [pc, #476]	@ (800d028 <HAL_DMA_IRQHandler+0x6b4>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d01d      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a76      	ldr	r2, [pc, #472]	@ (800d02c <HAL_DMA_IRQHandler+0x6b8>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d018      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a74      	ldr	r2, [pc, #464]	@ (800d030 <HAL_DMA_IRQHandler+0x6bc>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d013      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a73      	ldr	r2, [pc, #460]	@ (800d034 <HAL_DMA_IRQHandler+0x6c0>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d00e      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a71      	ldr	r2, [pc, #452]	@ (800d038 <HAL_DMA_IRQHandler+0x6c4>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d009      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a70      	ldr	r2, [pc, #448]	@ (800d03c <HAL_DMA_IRQHandler+0x6c8>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d004      	beq.n	800ce8a <HAL_DMA_IRQHandler+0x516>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a6e      	ldr	r2, [pc, #440]	@ (800d040 <HAL_DMA_IRQHandler+0x6cc>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d10a      	bne.n	800cea0 <HAL_DMA_IRQHandler+0x52c>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 0308 	and.w	r3, r3, #8
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bf14      	ite	ne
 800ce98:	2301      	movne	r3, #1
 800ce9a:	2300      	moveq	r3, #0
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	e009      	b.n	800ceb4 <HAL_DMA_IRQHandler+0x540>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 0304 	and.w	r3, r3, #4
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bf14      	ite	ne
 800ceae:	2301      	movne	r3, #1
 800ceb0:	2300      	moveq	r3, #0
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d03e      	beq.n	800cf36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cebc:	f003 031f 	and.w	r3, r3, #31
 800cec0:	2210      	movs	r2, #16
 800cec2:	409a      	lsls	r2, r3
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d018      	beq.n	800cf08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d108      	bne.n	800cef6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d024      	beq.n	800cf36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	4798      	blx	r3
 800cef4:	e01f      	b.n	800cf36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d01b      	beq.n	800cf36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	4798      	blx	r3
 800cf06:	e016      	b.n	800cf36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d107      	bne.n	800cf26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f022 0208 	bic.w	r2, r2, #8
 800cf24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d003      	beq.n	800cf36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf3a:	f003 031f 	and.w	r3, r3, #31
 800cf3e:	2220      	movs	r2, #32
 800cf40:	409a      	lsls	r2, r3
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	4013      	ands	r3, r2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 8110 	beq.w	800d16c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a2c      	ldr	r2, [pc, #176]	@ (800d004 <HAL_DMA_IRQHandler+0x690>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d04a      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a2b      	ldr	r2, [pc, #172]	@ (800d008 <HAL_DMA_IRQHandler+0x694>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d045      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a29      	ldr	r2, [pc, #164]	@ (800d00c <HAL_DMA_IRQHandler+0x698>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d040      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a28      	ldr	r2, [pc, #160]	@ (800d010 <HAL_DMA_IRQHandler+0x69c>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d03b      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a26      	ldr	r2, [pc, #152]	@ (800d014 <HAL_DMA_IRQHandler+0x6a0>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d036      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a25      	ldr	r2, [pc, #148]	@ (800d018 <HAL_DMA_IRQHandler+0x6a4>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d031      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a23      	ldr	r2, [pc, #140]	@ (800d01c <HAL_DMA_IRQHandler+0x6a8>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d02c      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a22      	ldr	r2, [pc, #136]	@ (800d020 <HAL_DMA_IRQHandler+0x6ac>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d027      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a20      	ldr	r2, [pc, #128]	@ (800d024 <HAL_DMA_IRQHandler+0x6b0>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d022      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a1f      	ldr	r2, [pc, #124]	@ (800d028 <HAL_DMA_IRQHandler+0x6b4>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d01d      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a1d      	ldr	r2, [pc, #116]	@ (800d02c <HAL_DMA_IRQHandler+0x6b8>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d018      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a1c      	ldr	r2, [pc, #112]	@ (800d030 <HAL_DMA_IRQHandler+0x6bc>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d013      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a1a      	ldr	r2, [pc, #104]	@ (800d034 <HAL_DMA_IRQHandler+0x6c0>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d00e      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a19      	ldr	r2, [pc, #100]	@ (800d038 <HAL_DMA_IRQHandler+0x6c4>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d009      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a17      	ldr	r2, [pc, #92]	@ (800d03c <HAL_DMA_IRQHandler+0x6c8>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d004      	beq.n	800cfec <HAL_DMA_IRQHandler+0x678>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a16      	ldr	r2, [pc, #88]	@ (800d040 <HAL_DMA_IRQHandler+0x6cc>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d12b      	bne.n	800d044 <HAL_DMA_IRQHandler+0x6d0>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f003 0310 	and.w	r3, r3, #16
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	bf14      	ite	ne
 800cffa:	2301      	movne	r3, #1
 800cffc:	2300      	moveq	r3, #0
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	e02a      	b.n	800d058 <HAL_DMA_IRQHandler+0x6e4>
 800d002:	bf00      	nop
 800d004:	40020010 	.word	0x40020010
 800d008:	40020028 	.word	0x40020028
 800d00c:	40020040 	.word	0x40020040
 800d010:	40020058 	.word	0x40020058
 800d014:	40020070 	.word	0x40020070
 800d018:	40020088 	.word	0x40020088
 800d01c:	400200a0 	.word	0x400200a0
 800d020:	400200b8 	.word	0x400200b8
 800d024:	40020410 	.word	0x40020410
 800d028:	40020428 	.word	0x40020428
 800d02c:	40020440 	.word	0x40020440
 800d030:	40020458 	.word	0x40020458
 800d034:	40020470 	.word	0x40020470
 800d038:	40020488 	.word	0x40020488
 800d03c:	400204a0 	.word	0x400204a0
 800d040:	400204b8 	.word	0x400204b8
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	bf14      	ite	ne
 800d052:	2301      	movne	r3, #1
 800d054:	2300      	moveq	r3, #0
 800d056:	b2db      	uxtb	r3, r3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f000 8087 	beq.w	800d16c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d062:	f003 031f 	and.w	r3, r3, #31
 800d066:	2220      	movs	r2, #32
 800d068:	409a      	lsls	r2, r3
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d074:	b2db      	uxtb	r3, r3
 800d076:	2b04      	cmp	r3, #4
 800d078:	d139      	bne.n	800d0ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f022 0216 	bic.w	r2, r2, #22
 800d088:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	695a      	ldr	r2, [r3, #20]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d098:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d103      	bne.n	800d0aa <HAL_DMA_IRQHandler+0x736>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d007      	beq.n	800d0ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f022 0208 	bic.w	r2, r2, #8
 800d0b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0be:	f003 031f 	and.w	r3, r3, #31
 800d0c2:	223f      	movs	r2, #63	@ 0x3f
 800d0c4:	409a      	lsls	r2, r3
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f000 834a 	beq.w	800d778 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	4798      	blx	r3
          }
          return;
 800d0ec:	e344      	b.n	800d778 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d018      	beq.n	800d12e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d108      	bne.n	800d11c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d02c      	beq.n	800d16c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	4798      	blx	r3
 800d11a:	e027      	b.n	800d16c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d120:	2b00      	cmp	r3, #0
 800d122:	d023      	beq.n	800d16c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	4798      	blx	r3
 800d12c:	e01e      	b.n	800d16c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10f      	bne.n	800d15c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f022 0210 	bic.w	r2, r2, #16
 800d14a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d160:	2b00      	cmp	r3, #0
 800d162:	d003      	beq.n	800d16c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 8306 	beq.w	800d782 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f000 8088 	beq.w	800d294 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2204      	movs	r2, #4
 800d188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a7a      	ldr	r2, [pc, #488]	@ (800d37c <HAL_DMA_IRQHandler+0xa08>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d04a      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a79      	ldr	r2, [pc, #484]	@ (800d380 <HAL_DMA_IRQHandler+0xa0c>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d045      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a77      	ldr	r2, [pc, #476]	@ (800d384 <HAL_DMA_IRQHandler+0xa10>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d040      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a76      	ldr	r2, [pc, #472]	@ (800d388 <HAL_DMA_IRQHandler+0xa14>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d03b      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a74      	ldr	r2, [pc, #464]	@ (800d38c <HAL_DMA_IRQHandler+0xa18>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d036      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a73      	ldr	r2, [pc, #460]	@ (800d390 <HAL_DMA_IRQHandler+0xa1c>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d031      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a71      	ldr	r2, [pc, #452]	@ (800d394 <HAL_DMA_IRQHandler+0xa20>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d02c      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a70      	ldr	r2, [pc, #448]	@ (800d398 <HAL_DMA_IRQHandler+0xa24>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d027      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a6e      	ldr	r2, [pc, #440]	@ (800d39c <HAL_DMA_IRQHandler+0xa28>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d022      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a6d      	ldr	r2, [pc, #436]	@ (800d3a0 <HAL_DMA_IRQHandler+0xa2c>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d01d      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a6b      	ldr	r2, [pc, #428]	@ (800d3a4 <HAL_DMA_IRQHandler+0xa30>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d018      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a6a      	ldr	r2, [pc, #424]	@ (800d3a8 <HAL_DMA_IRQHandler+0xa34>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d013      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a68      	ldr	r2, [pc, #416]	@ (800d3ac <HAL_DMA_IRQHandler+0xa38>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d00e      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4a67      	ldr	r2, [pc, #412]	@ (800d3b0 <HAL_DMA_IRQHandler+0xa3c>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d009      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a65      	ldr	r2, [pc, #404]	@ (800d3b4 <HAL_DMA_IRQHandler+0xa40>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d004      	beq.n	800d22c <HAL_DMA_IRQHandler+0x8b8>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a64      	ldr	r2, [pc, #400]	@ (800d3b8 <HAL_DMA_IRQHandler+0xa44>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d108      	bne.n	800d23e <HAL_DMA_IRQHandler+0x8ca>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f022 0201 	bic.w	r2, r2, #1
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	e007      	b.n	800d24e <HAL_DMA_IRQHandler+0x8da>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f022 0201 	bic.w	r2, r2, #1
 800d24c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3301      	adds	r3, #1
 800d252:	60fb      	str	r3, [r7, #12]
 800d254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d256:	429a      	cmp	r2, r3
 800d258:	d307      	bcc.n	800d26a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f003 0301 	and.w	r3, r3, #1
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1f2      	bne.n	800d24e <HAL_DMA_IRQHandler+0x8da>
 800d268:	e000      	b.n	800d26c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d26a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	2b00      	cmp	r3, #0
 800d278:	d004      	beq.n	800d284 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2203      	movs	r2, #3
 800d27e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d282:	e003      	b.n	800d28c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 8272 	beq.w	800d782 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	4798      	blx	r3
 800d2a6:	e26c      	b.n	800d782 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a43      	ldr	r2, [pc, #268]	@ (800d3bc <HAL_DMA_IRQHandler+0xa48>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d022      	beq.n	800d2f8 <HAL_DMA_IRQHandler+0x984>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a42      	ldr	r2, [pc, #264]	@ (800d3c0 <HAL_DMA_IRQHandler+0xa4c>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d01d      	beq.n	800d2f8 <HAL_DMA_IRQHandler+0x984>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a40      	ldr	r2, [pc, #256]	@ (800d3c4 <HAL_DMA_IRQHandler+0xa50>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d018      	beq.n	800d2f8 <HAL_DMA_IRQHandler+0x984>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a3f      	ldr	r2, [pc, #252]	@ (800d3c8 <HAL_DMA_IRQHandler+0xa54>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d013      	beq.n	800d2f8 <HAL_DMA_IRQHandler+0x984>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a3d      	ldr	r2, [pc, #244]	@ (800d3cc <HAL_DMA_IRQHandler+0xa58>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d00e      	beq.n	800d2f8 <HAL_DMA_IRQHandler+0x984>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a3c      	ldr	r2, [pc, #240]	@ (800d3d0 <HAL_DMA_IRQHandler+0xa5c>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d009      	beq.n	800d2f8 <HAL_DMA_IRQHandler+0x984>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a3a      	ldr	r2, [pc, #232]	@ (800d3d4 <HAL_DMA_IRQHandler+0xa60>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d004      	beq.n	800d2f8 <HAL_DMA_IRQHandler+0x984>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a39      	ldr	r2, [pc, #228]	@ (800d3d8 <HAL_DMA_IRQHandler+0xa64>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d101      	bne.n	800d2fc <HAL_DMA_IRQHandler+0x988>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e000      	b.n	800d2fe <HAL_DMA_IRQHandler+0x98a>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f000 823f 	beq.w	800d782 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d310:	f003 031f 	and.w	r3, r3, #31
 800d314:	2204      	movs	r2, #4
 800d316:	409a      	lsls	r2, r3
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	4013      	ands	r3, r2
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 80cd 	beq.w	800d4bc <HAL_DMA_IRQHandler+0xb48>
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	f003 0304 	and.w	r3, r3, #4
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f000 80c7 	beq.w	800d4bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d332:	f003 031f 	and.w	r3, r3, #31
 800d336:	2204      	movs	r2, #4
 800d338:	409a      	lsls	r2, r3
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d049      	beq.n	800d3dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d109      	bne.n	800d366 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 8210 	beq.w	800d77c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d364:	e20a      	b.n	800d77c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f000 8206 	beq.w	800d77c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d378:	e200      	b.n	800d77c <HAL_DMA_IRQHandler+0xe08>
 800d37a:	bf00      	nop
 800d37c:	40020010 	.word	0x40020010
 800d380:	40020028 	.word	0x40020028
 800d384:	40020040 	.word	0x40020040
 800d388:	40020058 	.word	0x40020058
 800d38c:	40020070 	.word	0x40020070
 800d390:	40020088 	.word	0x40020088
 800d394:	400200a0 	.word	0x400200a0
 800d398:	400200b8 	.word	0x400200b8
 800d39c:	40020410 	.word	0x40020410
 800d3a0:	40020428 	.word	0x40020428
 800d3a4:	40020440 	.word	0x40020440
 800d3a8:	40020458 	.word	0x40020458
 800d3ac:	40020470 	.word	0x40020470
 800d3b0:	40020488 	.word	0x40020488
 800d3b4:	400204a0 	.word	0x400204a0
 800d3b8:	400204b8 	.word	0x400204b8
 800d3bc:	58025408 	.word	0x58025408
 800d3c0:	5802541c 	.word	0x5802541c
 800d3c4:	58025430 	.word	0x58025430
 800d3c8:	58025444 	.word	0x58025444
 800d3cc:	58025458 	.word	0x58025458
 800d3d0:	5802546c 	.word	0x5802546c
 800d3d4:	58025480 	.word	0x58025480
 800d3d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	f003 0320 	and.w	r3, r3, #32
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d160      	bne.n	800d4a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a7f      	ldr	r2, [pc, #508]	@ (800d5e8 <HAL_DMA_IRQHandler+0xc74>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d04a      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a7d      	ldr	r2, [pc, #500]	@ (800d5ec <HAL_DMA_IRQHandler+0xc78>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d045      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a7c      	ldr	r2, [pc, #496]	@ (800d5f0 <HAL_DMA_IRQHandler+0xc7c>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d040      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a7a      	ldr	r2, [pc, #488]	@ (800d5f4 <HAL_DMA_IRQHandler+0xc80>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d03b      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a79      	ldr	r2, [pc, #484]	@ (800d5f8 <HAL_DMA_IRQHandler+0xc84>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d036      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a77      	ldr	r2, [pc, #476]	@ (800d5fc <HAL_DMA_IRQHandler+0xc88>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d031      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a76      	ldr	r2, [pc, #472]	@ (800d600 <HAL_DMA_IRQHandler+0xc8c>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d02c      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a74      	ldr	r2, [pc, #464]	@ (800d604 <HAL_DMA_IRQHandler+0xc90>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d027      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a73      	ldr	r2, [pc, #460]	@ (800d608 <HAL_DMA_IRQHandler+0xc94>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d022      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a71      	ldr	r2, [pc, #452]	@ (800d60c <HAL_DMA_IRQHandler+0xc98>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d01d      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a70      	ldr	r2, [pc, #448]	@ (800d610 <HAL_DMA_IRQHandler+0xc9c>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d018      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a6e      	ldr	r2, [pc, #440]	@ (800d614 <HAL_DMA_IRQHandler+0xca0>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d013      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a6d      	ldr	r2, [pc, #436]	@ (800d618 <HAL_DMA_IRQHandler+0xca4>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d00e      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a6b      	ldr	r2, [pc, #428]	@ (800d61c <HAL_DMA_IRQHandler+0xca8>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d009      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a6a      	ldr	r2, [pc, #424]	@ (800d620 <HAL_DMA_IRQHandler+0xcac>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d004      	beq.n	800d486 <HAL_DMA_IRQHandler+0xb12>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a68      	ldr	r2, [pc, #416]	@ (800d624 <HAL_DMA_IRQHandler+0xcb0>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d108      	bne.n	800d498 <HAL_DMA_IRQHandler+0xb24>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f022 0208 	bic.w	r2, r2, #8
 800d494:	601a      	str	r2, [r3, #0]
 800d496:	e007      	b.n	800d4a8 <HAL_DMA_IRQHandler+0xb34>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f022 0204 	bic.w	r2, r2, #4
 800d4a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 8165 	beq.w	800d77c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d4ba:	e15f      	b.n	800d77c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4c0:	f003 031f 	and.w	r3, r3, #31
 800d4c4:	2202      	movs	r2, #2
 800d4c6:	409a      	lsls	r2, r3
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	4013      	ands	r3, r2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 80c5 	beq.w	800d65c <HAL_DMA_IRQHandler+0xce8>
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	f003 0302 	and.w	r3, r3, #2
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 80bf 	beq.w	800d65c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4e2:	f003 031f 	and.w	r3, r3, #31
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	409a      	lsls	r2, r3
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d018      	beq.n	800d52a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d109      	bne.n	800d516 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d506:	2b00      	cmp	r3, #0
 800d508:	f000 813a 	beq.w	800d780 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d514:	e134      	b.n	800d780 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 8130 	beq.w	800d780 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d528:	e12a      	b.n	800d780 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	f003 0320 	and.w	r3, r3, #32
 800d530:	2b00      	cmp	r3, #0
 800d532:	f040 8089 	bne.w	800d648 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a2b      	ldr	r2, [pc, #172]	@ (800d5e8 <HAL_DMA_IRQHandler+0xc74>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d04a      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a29      	ldr	r2, [pc, #164]	@ (800d5ec <HAL_DMA_IRQHandler+0xc78>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d045      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a28      	ldr	r2, [pc, #160]	@ (800d5f0 <HAL_DMA_IRQHandler+0xc7c>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d040      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a26      	ldr	r2, [pc, #152]	@ (800d5f4 <HAL_DMA_IRQHandler+0xc80>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d03b      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a25      	ldr	r2, [pc, #148]	@ (800d5f8 <HAL_DMA_IRQHandler+0xc84>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d036      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a23      	ldr	r2, [pc, #140]	@ (800d5fc <HAL_DMA_IRQHandler+0xc88>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d031      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a22      	ldr	r2, [pc, #136]	@ (800d600 <HAL_DMA_IRQHandler+0xc8c>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d02c      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a20      	ldr	r2, [pc, #128]	@ (800d604 <HAL_DMA_IRQHandler+0xc90>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d027      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a1f      	ldr	r2, [pc, #124]	@ (800d608 <HAL_DMA_IRQHandler+0xc94>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d022      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a1d      	ldr	r2, [pc, #116]	@ (800d60c <HAL_DMA_IRQHandler+0xc98>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d01d      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a1c      	ldr	r2, [pc, #112]	@ (800d610 <HAL_DMA_IRQHandler+0xc9c>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d018      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a1a      	ldr	r2, [pc, #104]	@ (800d614 <HAL_DMA_IRQHandler+0xca0>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d013      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a19      	ldr	r2, [pc, #100]	@ (800d618 <HAL_DMA_IRQHandler+0xca4>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d00e      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a17      	ldr	r2, [pc, #92]	@ (800d61c <HAL_DMA_IRQHandler+0xca8>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d009      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a16      	ldr	r2, [pc, #88]	@ (800d620 <HAL_DMA_IRQHandler+0xcac>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d004      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0xc62>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a14      	ldr	r2, [pc, #80]	@ (800d624 <HAL_DMA_IRQHandler+0xcb0>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d128      	bne.n	800d628 <HAL_DMA_IRQHandler+0xcb4>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f022 0214 	bic.w	r2, r2, #20
 800d5e4:	601a      	str	r2, [r3, #0]
 800d5e6:	e027      	b.n	800d638 <HAL_DMA_IRQHandler+0xcc4>
 800d5e8:	40020010 	.word	0x40020010
 800d5ec:	40020028 	.word	0x40020028
 800d5f0:	40020040 	.word	0x40020040
 800d5f4:	40020058 	.word	0x40020058
 800d5f8:	40020070 	.word	0x40020070
 800d5fc:	40020088 	.word	0x40020088
 800d600:	400200a0 	.word	0x400200a0
 800d604:	400200b8 	.word	0x400200b8
 800d608:	40020410 	.word	0x40020410
 800d60c:	40020428 	.word	0x40020428
 800d610:	40020440 	.word	0x40020440
 800d614:	40020458 	.word	0x40020458
 800d618:	40020470 	.word	0x40020470
 800d61c:	40020488 	.word	0x40020488
 800d620:	400204a0 	.word	0x400204a0
 800d624:	400204b8 	.word	0x400204b8
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f022 020a 	bic.w	r2, r2, #10
 800d636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2201      	movs	r2, #1
 800d63c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f000 8097 	beq.w	800d780 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d65a:	e091      	b.n	800d780 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d660:	f003 031f 	and.w	r3, r3, #31
 800d664:	2208      	movs	r2, #8
 800d666:	409a      	lsls	r2, r3
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	4013      	ands	r3, r2
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 8088 	beq.w	800d782 <HAL_DMA_IRQHandler+0xe0e>
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	f003 0308 	and.w	r3, r3, #8
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f000 8082 	beq.w	800d782 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a41      	ldr	r2, [pc, #260]	@ (800d788 <HAL_DMA_IRQHandler+0xe14>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d04a      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a3f      	ldr	r2, [pc, #252]	@ (800d78c <HAL_DMA_IRQHandler+0xe18>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d045      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a3e      	ldr	r2, [pc, #248]	@ (800d790 <HAL_DMA_IRQHandler+0xe1c>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d040      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a3c      	ldr	r2, [pc, #240]	@ (800d794 <HAL_DMA_IRQHandler+0xe20>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d03b      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a3b      	ldr	r2, [pc, #236]	@ (800d798 <HAL_DMA_IRQHandler+0xe24>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d036      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a39      	ldr	r2, [pc, #228]	@ (800d79c <HAL_DMA_IRQHandler+0xe28>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d031      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4a38      	ldr	r2, [pc, #224]	@ (800d7a0 <HAL_DMA_IRQHandler+0xe2c>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d02c      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4a36      	ldr	r2, [pc, #216]	@ (800d7a4 <HAL_DMA_IRQHandler+0xe30>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d027      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a35      	ldr	r2, [pc, #212]	@ (800d7a8 <HAL_DMA_IRQHandler+0xe34>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d022      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a33      	ldr	r2, [pc, #204]	@ (800d7ac <HAL_DMA_IRQHandler+0xe38>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d01d      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a32      	ldr	r2, [pc, #200]	@ (800d7b0 <HAL_DMA_IRQHandler+0xe3c>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d018      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a30      	ldr	r2, [pc, #192]	@ (800d7b4 <HAL_DMA_IRQHandler+0xe40>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d013      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a2f      	ldr	r2, [pc, #188]	@ (800d7b8 <HAL_DMA_IRQHandler+0xe44>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d00e      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a2d      	ldr	r2, [pc, #180]	@ (800d7bc <HAL_DMA_IRQHandler+0xe48>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d009      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a2c      	ldr	r2, [pc, #176]	@ (800d7c0 <HAL_DMA_IRQHandler+0xe4c>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d004      	beq.n	800d71e <HAL_DMA_IRQHandler+0xdaa>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a2a      	ldr	r2, [pc, #168]	@ (800d7c4 <HAL_DMA_IRQHandler+0xe50>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d108      	bne.n	800d730 <HAL_DMA_IRQHandler+0xdbc>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f022 021c 	bic.w	r2, r2, #28
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	e007      	b.n	800d740 <HAL_DMA_IRQHandler+0xdcc>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f022 020e 	bic.w	r2, r2, #14
 800d73e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d744:	f003 031f 	and.w	r3, r3, #31
 800d748:	2201      	movs	r2, #1
 800d74a:	409a      	lsls	r2, r3
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2201      	movs	r2, #1
 800d75a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d009      	beq.n	800d782 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	4798      	blx	r3
 800d776:	e004      	b.n	800d782 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800d778:	bf00      	nop
 800d77a:	e002      	b.n	800d782 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d77c:	bf00      	nop
 800d77e:	e000      	b.n	800d782 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d780:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d782:	3728      	adds	r7, #40	@ 0x28
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	40020010 	.word	0x40020010
 800d78c:	40020028 	.word	0x40020028
 800d790:	40020040 	.word	0x40020040
 800d794:	40020058 	.word	0x40020058
 800d798:	40020070 	.word	0x40020070
 800d79c:	40020088 	.word	0x40020088
 800d7a0:	400200a0 	.word	0x400200a0
 800d7a4:	400200b8 	.word	0x400200b8
 800d7a8:	40020410 	.word	0x40020410
 800d7ac:	40020428 	.word	0x40020428
 800d7b0:	40020440 	.word	0x40020440
 800d7b4:	40020458 	.word	0x40020458
 800d7b8:	40020470 	.word	0x40020470
 800d7bc:	40020488 	.word	0x40020488
 800d7c0:	400204a0 	.word	0x400204a0
 800d7c4:	400204b8 	.word	0x400204b8

0800d7c8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d7d6:	b2db      	uxtb	r3, r3
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b087      	sub	sp, #28
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
 800d808:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d80e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d814:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a7f      	ldr	r2, [pc, #508]	@ (800da18 <DMA_SetConfig+0x21c>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d072      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a7d      	ldr	r2, [pc, #500]	@ (800da1c <DMA_SetConfig+0x220>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d06d      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a7c      	ldr	r2, [pc, #496]	@ (800da20 <DMA_SetConfig+0x224>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d068      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a7a      	ldr	r2, [pc, #488]	@ (800da24 <DMA_SetConfig+0x228>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d063      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a79      	ldr	r2, [pc, #484]	@ (800da28 <DMA_SetConfig+0x22c>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d05e      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a77      	ldr	r2, [pc, #476]	@ (800da2c <DMA_SetConfig+0x230>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d059      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a76      	ldr	r2, [pc, #472]	@ (800da30 <DMA_SetConfig+0x234>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d054      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a74      	ldr	r2, [pc, #464]	@ (800da34 <DMA_SetConfig+0x238>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d04f      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a73      	ldr	r2, [pc, #460]	@ (800da38 <DMA_SetConfig+0x23c>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d04a      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a71      	ldr	r2, [pc, #452]	@ (800da3c <DMA_SetConfig+0x240>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d045      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a70      	ldr	r2, [pc, #448]	@ (800da40 <DMA_SetConfig+0x244>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d040      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a6e      	ldr	r2, [pc, #440]	@ (800da44 <DMA_SetConfig+0x248>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d03b      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a6d      	ldr	r2, [pc, #436]	@ (800da48 <DMA_SetConfig+0x24c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d036      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a6b      	ldr	r2, [pc, #428]	@ (800da4c <DMA_SetConfig+0x250>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d031      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a6a      	ldr	r2, [pc, #424]	@ (800da50 <DMA_SetConfig+0x254>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d02c      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a68      	ldr	r2, [pc, #416]	@ (800da54 <DMA_SetConfig+0x258>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d027      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a67      	ldr	r2, [pc, #412]	@ (800da58 <DMA_SetConfig+0x25c>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d022      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a65      	ldr	r2, [pc, #404]	@ (800da5c <DMA_SetConfig+0x260>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d01d      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a64      	ldr	r2, [pc, #400]	@ (800da60 <DMA_SetConfig+0x264>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d018      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a62      	ldr	r2, [pc, #392]	@ (800da64 <DMA_SetConfig+0x268>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d013      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a61      	ldr	r2, [pc, #388]	@ (800da68 <DMA_SetConfig+0x26c>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00e      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a5f      	ldr	r2, [pc, #380]	@ (800da6c <DMA_SetConfig+0x270>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d009      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a5e      	ldr	r2, [pc, #376]	@ (800da70 <DMA_SetConfig+0x274>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d004      	beq.n	800d906 <DMA_SetConfig+0x10a>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a5c      	ldr	r2, [pc, #368]	@ (800da74 <DMA_SetConfig+0x278>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d101      	bne.n	800d90a <DMA_SetConfig+0x10e>
 800d906:	2301      	movs	r3, #1
 800d908:	e000      	b.n	800d90c <DMA_SetConfig+0x110>
 800d90a:	2300      	movs	r3, #0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00d      	beq.n	800d92c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d918:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d004      	beq.n	800d92c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d92a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a39      	ldr	r2, [pc, #228]	@ (800da18 <DMA_SetConfig+0x21c>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d04a      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a38      	ldr	r2, [pc, #224]	@ (800da1c <DMA_SetConfig+0x220>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d045      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a36      	ldr	r2, [pc, #216]	@ (800da20 <DMA_SetConfig+0x224>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d040      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a35      	ldr	r2, [pc, #212]	@ (800da24 <DMA_SetConfig+0x228>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d03b      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a33      	ldr	r2, [pc, #204]	@ (800da28 <DMA_SetConfig+0x22c>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d036      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a32      	ldr	r2, [pc, #200]	@ (800da2c <DMA_SetConfig+0x230>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d031      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a30      	ldr	r2, [pc, #192]	@ (800da30 <DMA_SetConfig+0x234>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d02c      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a2f      	ldr	r2, [pc, #188]	@ (800da34 <DMA_SetConfig+0x238>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d027      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a2d      	ldr	r2, [pc, #180]	@ (800da38 <DMA_SetConfig+0x23c>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d022      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a2c      	ldr	r2, [pc, #176]	@ (800da3c <DMA_SetConfig+0x240>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d01d      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a2a      	ldr	r2, [pc, #168]	@ (800da40 <DMA_SetConfig+0x244>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d018      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a29      	ldr	r2, [pc, #164]	@ (800da44 <DMA_SetConfig+0x248>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d013      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a27      	ldr	r2, [pc, #156]	@ (800da48 <DMA_SetConfig+0x24c>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d00e      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a26      	ldr	r2, [pc, #152]	@ (800da4c <DMA_SetConfig+0x250>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d009      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a24      	ldr	r2, [pc, #144]	@ (800da50 <DMA_SetConfig+0x254>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d004      	beq.n	800d9cc <DMA_SetConfig+0x1d0>
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a23      	ldr	r2, [pc, #140]	@ (800da54 <DMA_SetConfig+0x258>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d101      	bne.n	800d9d0 <DMA_SetConfig+0x1d4>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e000      	b.n	800d9d2 <DMA_SetConfig+0x1d6>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d059      	beq.n	800da8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d9da:	f003 031f 	and.w	r3, r3, #31
 800d9de:	223f      	movs	r2, #63	@ 0x3f
 800d9e0:	409a      	lsls	r2, r3
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d9f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	2b40      	cmp	r3, #64	@ 0x40
 800da04:	d138      	bne.n	800da78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68ba      	ldr	r2, [r7, #8]
 800da14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800da16:	e086      	b.n	800db26 <DMA_SetConfig+0x32a>
 800da18:	40020010 	.word	0x40020010
 800da1c:	40020028 	.word	0x40020028
 800da20:	40020040 	.word	0x40020040
 800da24:	40020058 	.word	0x40020058
 800da28:	40020070 	.word	0x40020070
 800da2c:	40020088 	.word	0x40020088
 800da30:	400200a0 	.word	0x400200a0
 800da34:	400200b8 	.word	0x400200b8
 800da38:	40020410 	.word	0x40020410
 800da3c:	40020428 	.word	0x40020428
 800da40:	40020440 	.word	0x40020440
 800da44:	40020458 	.word	0x40020458
 800da48:	40020470 	.word	0x40020470
 800da4c:	40020488 	.word	0x40020488
 800da50:	400204a0 	.word	0x400204a0
 800da54:	400204b8 	.word	0x400204b8
 800da58:	58025408 	.word	0x58025408
 800da5c:	5802541c 	.word	0x5802541c
 800da60:	58025430 	.word	0x58025430
 800da64:	58025444 	.word	0x58025444
 800da68:	58025458 	.word	0x58025458
 800da6c:	5802546c 	.word	0x5802546c
 800da70:	58025480 	.word	0x58025480
 800da74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	60da      	str	r2, [r3, #12]
}
 800da88:	e04d      	b.n	800db26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a29      	ldr	r2, [pc, #164]	@ (800db34 <DMA_SetConfig+0x338>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d022      	beq.n	800dada <DMA_SetConfig+0x2de>
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a27      	ldr	r2, [pc, #156]	@ (800db38 <DMA_SetConfig+0x33c>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d01d      	beq.n	800dada <DMA_SetConfig+0x2de>
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a26      	ldr	r2, [pc, #152]	@ (800db3c <DMA_SetConfig+0x340>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d018      	beq.n	800dada <DMA_SetConfig+0x2de>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a24      	ldr	r2, [pc, #144]	@ (800db40 <DMA_SetConfig+0x344>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d013      	beq.n	800dada <DMA_SetConfig+0x2de>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a23      	ldr	r2, [pc, #140]	@ (800db44 <DMA_SetConfig+0x348>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d00e      	beq.n	800dada <DMA_SetConfig+0x2de>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a21      	ldr	r2, [pc, #132]	@ (800db48 <DMA_SetConfig+0x34c>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d009      	beq.n	800dada <DMA_SetConfig+0x2de>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a20      	ldr	r2, [pc, #128]	@ (800db4c <DMA_SetConfig+0x350>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d004      	beq.n	800dada <DMA_SetConfig+0x2de>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a1e      	ldr	r2, [pc, #120]	@ (800db50 <DMA_SetConfig+0x354>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d101      	bne.n	800dade <DMA_SetConfig+0x2e2>
 800dada:	2301      	movs	r3, #1
 800dadc:	e000      	b.n	800dae0 <DMA_SetConfig+0x2e4>
 800dade:	2300      	movs	r3, #0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d020      	beq.n	800db26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dae8:	f003 031f 	and.w	r3, r3, #31
 800daec:	2201      	movs	r2, #1
 800daee:	409a      	lsls	r2, r3
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	683a      	ldr	r2, [r7, #0]
 800dafa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	2b40      	cmp	r3, #64	@ 0x40
 800db02:	d108      	bne.n	800db16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	60da      	str	r2, [r3, #12]
}
 800db14:	e007      	b.n	800db26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	60da      	str	r2, [r3, #12]
}
 800db26:	bf00      	nop
 800db28:	371c      	adds	r7, #28
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	58025408 	.word	0x58025408
 800db38:	5802541c 	.word	0x5802541c
 800db3c:	58025430 	.word	0x58025430
 800db40:	58025444 	.word	0x58025444
 800db44:	58025458 	.word	0x58025458
 800db48:	5802546c 	.word	0x5802546c
 800db4c:	58025480 	.word	0x58025480
 800db50:	58025494 	.word	0x58025494

0800db54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a42      	ldr	r2, [pc, #264]	@ (800dc6c <DMA_CalcBaseAndBitshift+0x118>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d04a      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a41      	ldr	r2, [pc, #260]	@ (800dc70 <DMA_CalcBaseAndBitshift+0x11c>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d045      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a3f      	ldr	r2, [pc, #252]	@ (800dc74 <DMA_CalcBaseAndBitshift+0x120>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d040      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a3e      	ldr	r2, [pc, #248]	@ (800dc78 <DMA_CalcBaseAndBitshift+0x124>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d03b      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a3c      	ldr	r2, [pc, #240]	@ (800dc7c <DMA_CalcBaseAndBitshift+0x128>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d036      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a3b      	ldr	r2, [pc, #236]	@ (800dc80 <DMA_CalcBaseAndBitshift+0x12c>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d031      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a39      	ldr	r2, [pc, #228]	@ (800dc84 <DMA_CalcBaseAndBitshift+0x130>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d02c      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a38      	ldr	r2, [pc, #224]	@ (800dc88 <DMA_CalcBaseAndBitshift+0x134>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d027      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a36      	ldr	r2, [pc, #216]	@ (800dc8c <DMA_CalcBaseAndBitshift+0x138>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d022      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a35      	ldr	r2, [pc, #212]	@ (800dc90 <DMA_CalcBaseAndBitshift+0x13c>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d01d      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a33      	ldr	r2, [pc, #204]	@ (800dc94 <DMA_CalcBaseAndBitshift+0x140>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d018      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a32      	ldr	r2, [pc, #200]	@ (800dc98 <DMA_CalcBaseAndBitshift+0x144>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d013      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a30      	ldr	r2, [pc, #192]	@ (800dc9c <DMA_CalcBaseAndBitshift+0x148>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d00e      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a2f      	ldr	r2, [pc, #188]	@ (800dca0 <DMA_CalcBaseAndBitshift+0x14c>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d009      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a2d      	ldr	r2, [pc, #180]	@ (800dca4 <DMA_CalcBaseAndBitshift+0x150>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d004      	beq.n	800dbfc <DMA_CalcBaseAndBitshift+0xa8>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a2c      	ldr	r2, [pc, #176]	@ (800dca8 <DMA_CalcBaseAndBitshift+0x154>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d101      	bne.n	800dc00 <DMA_CalcBaseAndBitshift+0xac>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e000      	b.n	800dc02 <DMA_CalcBaseAndBitshift+0xae>
 800dc00:	2300      	movs	r3, #0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d024      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	3b10      	subs	r3, #16
 800dc0e:	4a27      	ldr	r2, [pc, #156]	@ (800dcac <DMA_CalcBaseAndBitshift+0x158>)
 800dc10:	fba2 2303 	umull	r2, r3, r2, r3
 800dc14:	091b      	lsrs	r3, r3, #4
 800dc16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f003 0307 	and.w	r3, r3, #7
 800dc1e:	4a24      	ldr	r2, [pc, #144]	@ (800dcb0 <DMA_CalcBaseAndBitshift+0x15c>)
 800dc20:	5cd3      	ldrb	r3, [r2, r3]
 800dc22:	461a      	mov	r2, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b03      	cmp	r3, #3
 800dc2c:	d908      	bls.n	800dc40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	461a      	mov	r2, r3
 800dc34:	4b1f      	ldr	r3, [pc, #124]	@ (800dcb4 <DMA_CalcBaseAndBitshift+0x160>)
 800dc36:	4013      	ands	r3, r2
 800dc38:	1d1a      	adds	r2, r3, #4
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	659a      	str	r2, [r3, #88]	@ 0x58
 800dc3e:	e00d      	b.n	800dc5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	461a      	mov	r2, r3
 800dc46:	4b1b      	ldr	r3, [pc, #108]	@ (800dcb4 <DMA_CalcBaseAndBitshift+0x160>)
 800dc48:	4013      	ands	r3, r2
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	6593      	str	r3, [r2, #88]	@ 0x58
 800dc4e:	e005      	b.n	800dc5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3714      	adds	r7, #20
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	40020010 	.word	0x40020010
 800dc70:	40020028 	.word	0x40020028
 800dc74:	40020040 	.word	0x40020040
 800dc78:	40020058 	.word	0x40020058
 800dc7c:	40020070 	.word	0x40020070
 800dc80:	40020088 	.word	0x40020088
 800dc84:	400200a0 	.word	0x400200a0
 800dc88:	400200b8 	.word	0x400200b8
 800dc8c:	40020410 	.word	0x40020410
 800dc90:	40020428 	.word	0x40020428
 800dc94:	40020440 	.word	0x40020440
 800dc98:	40020458 	.word	0x40020458
 800dc9c:	40020470 	.word	0x40020470
 800dca0:	40020488 	.word	0x40020488
 800dca4:	400204a0 	.word	0x400204a0
 800dca8:	400204b8 	.word	0x400204b8
 800dcac:	aaaaaaab 	.word	0xaaaaaaab
 800dcb0:	0801ebe4 	.word	0x0801ebe4
 800dcb4:	fffffc00 	.word	0xfffffc00

0800dcb8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d120      	bne.n	800dd0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	d858      	bhi.n	800dd86 <DMA_CheckFifoParam+0xce>
 800dcd4:	a201      	add	r2, pc, #4	@ (adr r2, 800dcdc <DMA_CheckFifoParam+0x24>)
 800dcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcda:	bf00      	nop
 800dcdc:	0800dced 	.word	0x0800dced
 800dce0:	0800dcff 	.word	0x0800dcff
 800dce4:	0800dced 	.word	0x0800dced
 800dce8:	0800dd87 	.word	0x0800dd87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d048      	beq.n	800dd8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dcfc:	e045      	b.n	800dd8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800dd06:	d142      	bne.n	800dd8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dd0c:	e03f      	b.n	800dd8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	699b      	ldr	r3, [r3, #24]
 800dd12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd16:	d123      	bne.n	800dd60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	d838      	bhi.n	800dd92 <DMA_CheckFifoParam+0xda>
 800dd20:	a201      	add	r2, pc, #4	@ (adr r2, 800dd28 <DMA_CheckFifoParam+0x70>)
 800dd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd26:	bf00      	nop
 800dd28:	0800dd39 	.word	0x0800dd39
 800dd2c:	0800dd3f 	.word	0x0800dd3f
 800dd30:	0800dd39 	.word	0x0800dd39
 800dd34:	0800dd51 	.word	0x0800dd51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	73fb      	strb	r3, [r7, #15]
        break;
 800dd3c:	e030      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d025      	beq.n	800dd96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dd4e:	e022      	b.n	800dd96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800dd58:	d11f      	bne.n	800dd9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dd5e:	e01c      	b.n	800dd9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d902      	bls.n	800dd6e <DMA_CheckFifoParam+0xb6>
 800dd68:	2b03      	cmp	r3, #3
 800dd6a:	d003      	beq.n	800dd74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800dd6c:	e018      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	73fb      	strb	r3, [r7, #15]
        break;
 800dd72:	e015      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00e      	beq.n	800dd9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	73fb      	strb	r3, [r7, #15]
    break;
 800dd84:	e00b      	b.n	800dd9e <DMA_CheckFifoParam+0xe6>
        break;
 800dd86:	bf00      	nop
 800dd88:	e00a      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>
        break;
 800dd8a:	bf00      	nop
 800dd8c:	e008      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>
        break;
 800dd8e:	bf00      	nop
 800dd90:	e006      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>
        break;
 800dd92:	bf00      	nop
 800dd94:	e004      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>
        break;
 800dd96:	bf00      	nop
 800dd98:	e002      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>
        break;
 800dd9a:	bf00      	nop
 800dd9c:	e000      	b.n	800dda0 <DMA_CheckFifoParam+0xe8>
    break;
 800dd9e:	bf00      	nop
    }
  }

  return status;
 800dda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3714      	adds	r7, #20
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop

0800ddb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a38      	ldr	r2, [pc, #224]	@ (800dea4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d022      	beq.n	800de0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a36      	ldr	r2, [pc, #216]	@ (800dea8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d01d      	beq.n	800de0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a35      	ldr	r2, [pc, #212]	@ (800deac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d018      	beq.n	800de0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a33      	ldr	r2, [pc, #204]	@ (800deb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d013      	beq.n	800de0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a32      	ldr	r2, [pc, #200]	@ (800deb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d00e      	beq.n	800de0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a30      	ldr	r2, [pc, #192]	@ (800deb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d009      	beq.n	800de0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a2f      	ldr	r2, [pc, #188]	@ (800debc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d004      	beq.n	800de0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a2d      	ldr	r2, [pc, #180]	@ (800dec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d101      	bne.n	800de12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800de0e:	2301      	movs	r3, #1
 800de10:	e000      	b.n	800de14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800de12:	2300      	movs	r3, #0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d01a      	beq.n	800de4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	3b08      	subs	r3, #8
 800de20:	4a28      	ldr	r2, [pc, #160]	@ (800dec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800de22:	fba2 2303 	umull	r2, r3, r2, r3
 800de26:	091b      	lsrs	r3, r3, #4
 800de28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	4b26      	ldr	r3, [pc, #152]	@ (800dec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800de2e:	4413      	add	r3, r2
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	461a      	mov	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a24      	ldr	r2, [pc, #144]	@ (800decc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800de3c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f003 031f 	and.w	r3, r3, #31
 800de44:	2201      	movs	r2, #1
 800de46:	409a      	lsls	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800de4c:	e024      	b.n	800de98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	3b10      	subs	r3, #16
 800de56:	4a1e      	ldr	r2, [pc, #120]	@ (800ded0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800de58:	fba2 2303 	umull	r2, r3, r2, r3
 800de5c:	091b      	lsrs	r3, r3, #4
 800de5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	4a1c      	ldr	r2, [pc, #112]	@ (800ded4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d806      	bhi.n	800de76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	4a1b      	ldr	r2, [pc, #108]	@ (800ded8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d902      	bls.n	800de76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	3308      	adds	r3, #8
 800de74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	4b18      	ldr	r3, [pc, #96]	@ (800dedc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800de7a:	4413      	add	r3, r2
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	461a      	mov	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a16      	ldr	r2, [pc, #88]	@ (800dee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800de88:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f003 031f 	and.w	r3, r3, #31
 800de90:	2201      	movs	r2, #1
 800de92:	409a      	lsls	r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800de98:	bf00      	nop
 800de9a:	3714      	adds	r7, #20
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	58025408 	.word	0x58025408
 800dea8:	5802541c 	.word	0x5802541c
 800deac:	58025430 	.word	0x58025430
 800deb0:	58025444 	.word	0x58025444
 800deb4:	58025458 	.word	0x58025458
 800deb8:	5802546c 	.word	0x5802546c
 800debc:	58025480 	.word	0x58025480
 800dec0:	58025494 	.word	0x58025494
 800dec4:	cccccccd 	.word	0xcccccccd
 800dec8:	16009600 	.word	0x16009600
 800decc:	58025880 	.word	0x58025880
 800ded0:	aaaaaaab 	.word	0xaaaaaaab
 800ded4:	400204b8 	.word	0x400204b8
 800ded8:	4002040f 	.word	0x4002040f
 800dedc:	10008200 	.word	0x10008200
 800dee0:	40020880 	.word	0x40020880

0800dee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	b2db      	uxtb	r3, r3
 800def2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d04a      	beq.n	800df90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2b08      	cmp	r3, #8
 800defe:	d847      	bhi.n	800df90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a25      	ldr	r2, [pc, #148]	@ (800df9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d022      	beq.n	800df50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a24      	ldr	r2, [pc, #144]	@ (800dfa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d01d      	beq.n	800df50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a22      	ldr	r2, [pc, #136]	@ (800dfa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d018      	beq.n	800df50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a21      	ldr	r2, [pc, #132]	@ (800dfa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d013      	beq.n	800df50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a1f      	ldr	r2, [pc, #124]	@ (800dfac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d00e      	beq.n	800df50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a1e      	ldr	r2, [pc, #120]	@ (800dfb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d009      	beq.n	800df50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a1c      	ldr	r2, [pc, #112]	@ (800dfb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d004      	beq.n	800df50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a1b      	ldr	r2, [pc, #108]	@ (800dfb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d101      	bne.n	800df54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800df50:	2301      	movs	r3, #1
 800df52:	e000      	b.n	800df56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800df54:	2300      	movs	r3, #0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00a      	beq.n	800df70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	4b17      	ldr	r3, [pc, #92]	@ (800dfbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	461a      	mov	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4a15      	ldr	r2, [pc, #84]	@ (800dfc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800df6c:	671a      	str	r2, [r3, #112]	@ 0x70
 800df6e:	e009      	b.n	800df84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	4b14      	ldr	r3, [pc, #80]	@ (800dfc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800df74:	4413      	add	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	461a      	mov	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4a11      	ldr	r2, [pc, #68]	@ (800dfc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800df82:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3b01      	subs	r3, #1
 800df88:	2201      	movs	r2, #1
 800df8a:	409a      	lsls	r2, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800df90:	bf00      	nop
 800df92:	3714      	adds	r7, #20
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr
 800df9c:	58025408 	.word	0x58025408
 800dfa0:	5802541c 	.word	0x5802541c
 800dfa4:	58025430 	.word	0x58025430
 800dfa8:	58025444 	.word	0x58025444
 800dfac:	58025458 	.word	0x58025458
 800dfb0:	5802546c 	.word	0x5802546c
 800dfb4:	58025480 	.word	0x58025480
 800dfb8:	58025494 	.word	0x58025494
 800dfbc:	1600963f 	.word	0x1600963f
 800dfc0:	58025940 	.word	0x58025940
 800dfc4:	1000823f 	.word	0x1000823f
 800dfc8:	40020940 	.word	0x40020940

0800dfcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b089      	sub	sp, #36	@ 0x24
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800dfda:	4b86      	ldr	r3, [pc, #536]	@ (800e1f4 <HAL_GPIO_Init+0x228>)
 800dfdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dfde:	e18c      	b.n	800e2fa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	2101      	movs	r1, #1
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	fa01 f303 	lsl.w	r3, r1, r3
 800dfec:	4013      	ands	r3, r2
 800dfee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	f000 817e 	beq.w	800e2f4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	f003 0303 	and.w	r3, r3, #3
 800e000:	2b01      	cmp	r3, #1
 800e002:	d005      	beq.n	800e010 <HAL_GPIO_Init+0x44>
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	f003 0303 	and.w	r3, r3, #3
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d130      	bne.n	800e072 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	689b      	ldr	r3, [r3, #8]
 800e014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	005b      	lsls	r3, r3, #1
 800e01a:	2203      	movs	r2, #3
 800e01c:	fa02 f303 	lsl.w	r3, r2, r3
 800e020:	43db      	mvns	r3, r3
 800e022:	69ba      	ldr	r2, [r7, #24]
 800e024:	4013      	ands	r3, r2
 800e026:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	68da      	ldr	r2, [r3, #12]
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	005b      	lsls	r3, r3, #1
 800e030:	fa02 f303 	lsl.w	r3, r2, r3
 800e034:	69ba      	ldr	r2, [r7, #24]
 800e036:	4313      	orrs	r3, r2
 800e038:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	69ba      	ldr	r2, [r7, #24]
 800e03e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e046:	2201      	movs	r2, #1
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	fa02 f303 	lsl.w	r3, r2, r3
 800e04e:	43db      	mvns	r3, r3
 800e050:	69ba      	ldr	r2, [r7, #24]
 800e052:	4013      	ands	r3, r2
 800e054:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	091b      	lsrs	r3, r3, #4
 800e05c:	f003 0201 	and.w	r2, r3, #1
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	fa02 f303 	lsl.w	r3, r2, r3
 800e066:	69ba      	ldr	r2, [r7, #24]
 800e068:	4313      	orrs	r3, r2
 800e06a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	69ba      	ldr	r2, [r7, #24]
 800e070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f003 0303 	and.w	r3, r3, #3
 800e07a:	2b03      	cmp	r3, #3
 800e07c:	d017      	beq.n	800e0ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	2203      	movs	r2, #3
 800e08a:	fa02 f303 	lsl.w	r3, r2, r3
 800e08e:	43db      	mvns	r3, r3
 800e090:	69ba      	ldr	r2, [r7, #24]
 800e092:	4013      	ands	r3, r2
 800e094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	689a      	ldr	r2, [r3, #8]
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	fa02 f303 	lsl.w	r3, r2, r3
 800e0a2:	69ba      	ldr	r2, [r7, #24]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	69ba      	ldr	r2, [r7, #24]
 800e0ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	f003 0303 	and.w	r3, r3, #3
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d123      	bne.n	800e102 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	08da      	lsrs	r2, r3, #3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3208      	adds	r2, #8
 800e0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	f003 0307 	and.w	r3, r3, #7
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	220f      	movs	r2, #15
 800e0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0d6:	43db      	mvns	r3, r3
 800e0d8:	69ba      	ldr	r2, [r7, #24]
 800e0da:	4013      	ands	r3, r2
 800e0dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	691a      	ldr	r2, [r3, #16]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	f003 0307 	and.w	r3, r3, #7
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ee:	69ba      	ldr	r2, [r7, #24]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	08da      	lsrs	r2, r3, #3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3208      	adds	r2, #8
 800e0fc:	69b9      	ldr	r1, [r7, #24]
 800e0fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	2203      	movs	r2, #3
 800e10e:	fa02 f303 	lsl.w	r3, r2, r3
 800e112:	43db      	mvns	r3, r3
 800e114:	69ba      	ldr	r2, [r7, #24]
 800e116:	4013      	ands	r3, r2
 800e118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	f003 0203 	and.w	r2, r3, #3
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	005b      	lsls	r3, r3, #1
 800e126:	fa02 f303 	lsl.w	r3, r2, r3
 800e12a:	69ba      	ldr	r2, [r7, #24]
 800e12c:	4313      	orrs	r3, r2
 800e12e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	69ba      	ldr	r2, [r7, #24]
 800e134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f000 80d8 	beq.w	800e2f4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e144:	4b2c      	ldr	r3, [pc, #176]	@ (800e1f8 <HAL_GPIO_Init+0x22c>)
 800e146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e14a:	4a2b      	ldr	r2, [pc, #172]	@ (800e1f8 <HAL_GPIO_Init+0x22c>)
 800e14c:	f043 0302 	orr.w	r3, r3, #2
 800e150:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e154:	4b28      	ldr	r3, [pc, #160]	@ (800e1f8 <HAL_GPIO_Init+0x22c>)
 800e156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e15a:	f003 0302 	and.w	r3, r3, #2
 800e15e:	60fb      	str	r3, [r7, #12]
 800e160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e162:	4a26      	ldr	r2, [pc, #152]	@ (800e1fc <HAL_GPIO_Init+0x230>)
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	089b      	lsrs	r3, r3, #2
 800e168:	3302      	adds	r3, #2
 800e16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e16e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	f003 0303 	and.w	r3, r3, #3
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	220f      	movs	r2, #15
 800e17a:	fa02 f303 	lsl.w	r3, r2, r3
 800e17e:	43db      	mvns	r3, r3
 800e180:	69ba      	ldr	r2, [r7, #24]
 800e182:	4013      	ands	r3, r2
 800e184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a1d      	ldr	r2, [pc, #116]	@ (800e200 <HAL_GPIO_Init+0x234>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d04a      	beq.n	800e224 <HAL_GPIO_Init+0x258>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4a1c      	ldr	r2, [pc, #112]	@ (800e204 <HAL_GPIO_Init+0x238>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d02b      	beq.n	800e1ee <HAL_GPIO_Init+0x222>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4a1b      	ldr	r2, [pc, #108]	@ (800e208 <HAL_GPIO_Init+0x23c>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d025      	beq.n	800e1ea <HAL_GPIO_Init+0x21e>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4a1a      	ldr	r2, [pc, #104]	@ (800e20c <HAL_GPIO_Init+0x240>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d01f      	beq.n	800e1e6 <HAL_GPIO_Init+0x21a>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	4a19      	ldr	r2, [pc, #100]	@ (800e210 <HAL_GPIO_Init+0x244>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d019      	beq.n	800e1e2 <HAL_GPIO_Init+0x216>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a18      	ldr	r2, [pc, #96]	@ (800e214 <HAL_GPIO_Init+0x248>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d013      	beq.n	800e1de <HAL_GPIO_Init+0x212>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a17      	ldr	r2, [pc, #92]	@ (800e218 <HAL_GPIO_Init+0x24c>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d00d      	beq.n	800e1da <HAL_GPIO_Init+0x20e>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4a16      	ldr	r2, [pc, #88]	@ (800e21c <HAL_GPIO_Init+0x250>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d007      	beq.n	800e1d6 <HAL_GPIO_Init+0x20a>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a15      	ldr	r2, [pc, #84]	@ (800e220 <HAL_GPIO_Init+0x254>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d101      	bne.n	800e1d2 <HAL_GPIO_Init+0x206>
 800e1ce:	2309      	movs	r3, #9
 800e1d0:	e029      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1d2:	230a      	movs	r3, #10
 800e1d4:	e027      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1d6:	2307      	movs	r3, #7
 800e1d8:	e025      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1da:	2306      	movs	r3, #6
 800e1dc:	e023      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1de:	2305      	movs	r3, #5
 800e1e0:	e021      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1e2:	2304      	movs	r3, #4
 800e1e4:	e01f      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1e6:	2303      	movs	r3, #3
 800e1e8:	e01d      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1ea:	2302      	movs	r3, #2
 800e1ec:	e01b      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e019      	b.n	800e226 <HAL_GPIO_Init+0x25a>
 800e1f2:	bf00      	nop
 800e1f4:	58000080 	.word	0x58000080
 800e1f8:	58024400 	.word	0x58024400
 800e1fc:	58000400 	.word	0x58000400
 800e200:	58020000 	.word	0x58020000
 800e204:	58020400 	.word	0x58020400
 800e208:	58020800 	.word	0x58020800
 800e20c:	58020c00 	.word	0x58020c00
 800e210:	58021000 	.word	0x58021000
 800e214:	58021400 	.word	0x58021400
 800e218:	58021800 	.word	0x58021800
 800e21c:	58021c00 	.word	0x58021c00
 800e220:	58022400 	.word	0x58022400
 800e224:	2300      	movs	r3, #0
 800e226:	69fa      	ldr	r2, [r7, #28]
 800e228:	f002 0203 	and.w	r2, r2, #3
 800e22c:	0092      	lsls	r2, r2, #2
 800e22e:	4093      	lsls	r3, r2
 800e230:	69ba      	ldr	r2, [r7, #24]
 800e232:	4313      	orrs	r3, r2
 800e234:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e236:	4938      	ldr	r1, [pc, #224]	@ (800e318 <HAL_GPIO_Init+0x34c>)
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	089b      	lsrs	r3, r3, #2
 800e23c:	3302      	adds	r3, #2
 800e23e:	69ba      	ldr	r2, [r7, #24]
 800e240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	43db      	mvns	r3, r3
 800e250:	69ba      	ldr	r2, [r7, #24]
 800e252:	4013      	ands	r3, r2
 800e254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d003      	beq.n	800e26a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e262:	69ba      	ldr	r2, [r7, #24]
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	4313      	orrs	r3, r2
 800e268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e26a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	43db      	mvns	r3, r3
 800e27e:	69ba      	ldr	r2, [r7, #24]
 800e280:	4013      	ands	r3, r2
 800e282:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d003      	beq.n	800e298 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e290:	69ba      	ldr	r2, [r7, #24]
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	4313      	orrs	r3, r2
 800e296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e298:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	43db      	mvns	r3, r3
 800e2aa:	69ba      	ldr	r2, [r7, #24]
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e2bc:	69ba      	ldr	r2, [r7, #24]
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	43db      	mvns	r3, r3
 800e2d4:	69ba      	ldr	r2, [r7, #24]
 800e2d6:	4013      	ands	r3, r2
 800e2d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d003      	beq.n	800e2ee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e2e6:	69ba      	ldr	r2, [r7, #24]
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	69ba      	ldr	r2, [r7, #24]
 800e2f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	fa22 f303 	lsr.w	r3, r2, r3
 800e304:	2b00      	cmp	r3, #0
 800e306:	f47f ae6b 	bne.w	800dfe0 <HAL_GPIO_Init+0x14>
  }
}
 800e30a:	bf00      	nop
 800e30c:	bf00      	nop
 800e30e:	3724      	adds	r7, #36	@ 0x24
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr
 800e318:	58000400 	.word	0x58000400

0800e31c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	460b      	mov	r3, r1
 800e326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	691a      	ldr	r2, [r3, #16]
 800e32c:	887b      	ldrh	r3, [r7, #2]
 800e32e:	4013      	ands	r3, r2
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e334:	2301      	movs	r3, #1
 800e336:	73fb      	strb	r3, [r7, #15]
 800e338:	e001      	b.n	800e33e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e33a:	2300      	movs	r3, #0
 800e33c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	807b      	strh	r3, [r7, #2]
 800e358:	4613      	mov	r3, r2
 800e35a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e35c:	787b      	ldrb	r3, [r7, #1]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e362:	887a      	ldrh	r2, [r7, #2]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e368:	e003      	b.n	800e372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e36a:	887b      	ldrh	r3, [r7, #2]
 800e36c:	041a      	lsls	r2, r3, #16
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	619a      	str	r2, [r3, #24]
}
 800e372:	bf00      	nop
 800e374:	370c      	adds	r7, #12
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr

0800e37e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b082      	sub	sp, #8
 800e382:	af00      	add	r7, sp, #0
 800e384:	4603      	mov	r3, r0
 800e386:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e38c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e390:	88fb      	ldrh	r3, [r7, #6]
 800e392:	4013      	ands	r3, r2
 800e394:	2b00      	cmp	r3, #0
 800e396:	d008      	beq.n	800e3aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e39c:	88fb      	ldrh	r3, [r7, #6]
 800e39e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e3a2:	88fb      	ldrh	r3, [r7, #6]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f8 f879 	bl	800649c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e3aa:	bf00      	nop
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
	...

0800e3b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d101      	bne.n	800e3c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e08b      	b.n	800e4de <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d106      	bne.n	800e3e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7f6 fd94 	bl	8004f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2224      	movs	r2, #36	@ 0x24
 800e3e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f022 0201 	bic.w	r2, r2, #1
 800e3f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685a      	ldr	r2, [r3, #4]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	689a      	ldr	r2, [r3, #8]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d107      	bne.n	800e42e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	689a      	ldr	r2, [r3, #8]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e42a:	609a      	str	r2, [r3, #8]
 800e42c:	e006      	b.n	800e43c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	689a      	ldr	r2, [r3, #8]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e43a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	2b02      	cmp	r3, #2
 800e442:	d108      	bne.n	800e456 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	685a      	ldr	r2, [r3, #4]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e452:	605a      	str	r2, [r3, #4]
 800e454:	e007      	b.n	800e466 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e464:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	6859      	ldr	r1, [r3, #4]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	4b1d      	ldr	r3, [pc, #116]	@ (800e4e8 <HAL_I2C_Init+0x134>)
 800e472:	430b      	orrs	r3, r1
 800e474:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68da      	ldr	r2, [r3, #12]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e484:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	691a      	ldr	r2, [r3, #16]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	695b      	ldr	r3, [r3, #20]
 800e48e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	430a      	orrs	r2, r1
 800e49e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	69d9      	ldr	r1, [r3, #28]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a1a      	ldr	r2, [r3, #32]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	430a      	orrs	r2, r1
 800e4ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f042 0201 	orr.w	r2, r2, #1
 800e4be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2220      	movs	r2, #32
 800e4ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	02008000 	.word	0x02008000

0800e4ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b088      	sub	sp, #32
 800e4f0:	af02      	add	r7, sp, #8
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	4608      	mov	r0, r1
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	817b      	strh	r3, [r7, #10]
 800e4fe:	460b      	mov	r3, r1
 800e500:	813b      	strh	r3, [r7, #8]
 800e502:	4613      	mov	r3, r2
 800e504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	2b20      	cmp	r3, #32
 800e510:	f040 80f9 	bne.w	800e706 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e514:	6a3b      	ldr	r3, [r7, #32]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <HAL_I2C_Mem_Write+0x34>
 800e51a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d105      	bne.n	800e52c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e526:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e528:	2301      	movs	r3, #1
 800e52a:	e0ed      	b.n	800e708 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e532:	2b01      	cmp	r3, #1
 800e534:	d101      	bne.n	800e53a <HAL_I2C_Mem_Write+0x4e>
 800e536:	2302      	movs	r3, #2
 800e538:	e0e6      	b.n	800e708 <HAL_I2C_Mem_Write+0x21c>
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e542:	f7fa fdbb 	bl	80090bc <HAL_GetTick>
 800e546:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	2319      	movs	r3, #25
 800e54e:	2201      	movs	r2, #1
 800e550:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e554:	68f8      	ldr	r0, [r7, #12]
 800e556:	f002 f818 	bl	801058a <I2C_WaitOnFlagUntilTimeout>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e560:	2301      	movs	r3, #1
 800e562:	e0d1      	b.n	800e708 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2221      	movs	r2, #33	@ 0x21
 800e568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2240      	movs	r2, #64	@ 0x40
 800e570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6a3a      	ldr	r2, [r7, #32]
 800e57e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e584:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e58c:	88f8      	ldrh	r0, [r7, #6]
 800e58e:	893a      	ldrh	r2, [r7, #8]
 800e590:	8979      	ldrh	r1, [r7, #10]
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	4603      	mov	r3, r0
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f001 f965 	bl	800f86c <I2C_RequestMemoryWrite>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d005      	beq.n	800e5b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e0a9      	b.n	800e708 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	2bff      	cmp	r3, #255	@ 0xff
 800e5bc:	d90e      	bls.n	800e5dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	22ff      	movs	r2, #255	@ 0xff
 800e5c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	8979      	ldrh	r1, [r7, #10]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f002 f99b 	bl	8010910 <I2C_TransferConfig>
 800e5da:	e00f      	b.n	800e5fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	8979      	ldrh	r1, [r7, #10]
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	f002 f98a 	bl	8010910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e5fc:	697a      	ldr	r2, [r7, #20]
 800e5fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f002 f81b 	bl	801063c <I2C_WaitOnTXISFlagUntilTimeout>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e60c:	2301      	movs	r3, #1
 800e60e:	e07b      	b.n	800e708 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e614:	781a      	ldrb	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e620:	1c5a      	adds	r2, r3, #1
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	3b01      	subs	r3, #1
 800e62e:	b29a      	uxth	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e638:	3b01      	subs	r3, #1
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e644:	b29b      	uxth	r3, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d034      	beq.n	800e6b4 <HAL_I2C_Mem_Write+0x1c8>
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d130      	bne.n	800e6b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e658:	2200      	movs	r2, #0
 800e65a:	2180      	movs	r1, #128	@ 0x80
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f001 ff94 	bl	801058a <I2C_WaitOnFlagUntilTimeout>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e668:	2301      	movs	r3, #1
 800e66a:	e04d      	b.n	800e708 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e670:	b29b      	uxth	r3, r3
 800e672:	2bff      	cmp	r3, #255	@ 0xff
 800e674:	d90e      	bls.n	800e694 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	22ff      	movs	r2, #255	@ 0xff
 800e67a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e680:	b2da      	uxtb	r2, r3
 800e682:	8979      	ldrh	r1, [r7, #10]
 800e684:	2300      	movs	r3, #0
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f002 f93f 	bl	8010910 <I2C_TransferConfig>
 800e692:	e00f      	b.n	800e6b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e698:	b29a      	uxth	r2, r3
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	8979      	ldrh	r1, [r7, #10]
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f002 f92e 	bl	8010910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d19e      	bne.n	800e5fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e6be:	697a      	ldr	r2, [r7, #20]
 800e6c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f002 f801 	bl	80106ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e01a      	b.n	800e708 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2220      	movs	r2, #32
 800e6d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	6859      	ldr	r1, [r3, #4]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	4b0a      	ldr	r3, [pc, #40]	@ (800e710 <HAL_I2C_Mem_Write+0x224>)
 800e6e6:	400b      	ands	r3, r1
 800e6e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2220      	movs	r2, #32
 800e6ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	e000      	b.n	800e708 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e706:	2302      	movs	r3, #2
  }
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3718      	adds	r7, #24
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	fe00e800 	.word	0xfe00e800

0800e714 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b088      	sub	sp, #32
 800e718:	af02      	add	r7, sp, #8
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	4608      	mov	r0, r1
 800e71e:	4611      	mov	r1, r2
 800e720:	461a      	mov	r2, r3
 800e722:	4603      	mov	r3, r0
 800e724:	817b      	strh	r3, [r7, #10]
 800e726:	460b      	mov	r3, r1
 800e728:	813b      	strh	r3, [r7, #8]
 800e72a:	4613      	mov	r3, r2
 800e72c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b20      	cmp	r3, #32
 800e738:	f040 80fd 	bne.w	800e936 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e73c:	6a3b      	ldr	r3, [r7, #32]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d002      	beq.n	800e748 <HAL_I2C_Mem_Read+0x34>
 800e742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e744:	2b00      	cmp	r3, #0
 800e746:	d105      	bne.n	800e754 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e74e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e750:	2301      	movs	r3, #1
 800e752:	e0f1      	b.n	800e938 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d101      	bne.n	800e762 <HAL_I2C_Mem_Read+0x4e>
 800e75e:	2302      	movs	r3, #2
 800e760:	e0ea      	b.n	800e938 <HAL_I2C_Mem_Read+0x224>
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2201      	movs	r2, #1
 800e766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e76a:	f7fa fca7 	bl	80090bc <HAL_GetTick>
 800e76e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	2319      	movs	r3, #25
 800e776:	2201      	movs	r2, #1
 800e778:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f001 ff04 	bl	801058a <I2C_WaitOnFlagUntilTimeout>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d001      	beq.n	800e78c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e788:	2301      	movs	r3, #1
 800e78a:	e0d5      	b.n	800e938 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2222      	movs	r2, #34	@ 0x22
 800e790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2240      	movs	r2, #64	@ 0x40
 800e798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	6a3a      	ldr	r2, [r7, #32]
 800e7a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e7b4:	88f8      	ldrh	r0, [r7, #6]
 800e7b6:	893a      	ldrh	r2, [r7, #8]
 800e7b8:	8979      	ldrh	r1, [r7, #10]
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	9301      	str	r3, [sp, #4]
 800e7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	f001 f8a5 	bl	800f914 <I2C_RequestMemoryRead>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d005      	beq.n	800e7dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e0ad      	b.n	800e938 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	2bff      	cmp	r3, #255	@ 0xff
 800e7e4:	d90e      	bls.n	800e804 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	22ff      	movs	r2, #255	@ 0xff
 800e7ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7f0:	b2da      	uxtb	r2, r3
 800e7f2:	8979      	ldrh	r1, [r7, #10]
 800e7f4:	4b52      	ldr	r3, [pc, #328]	@ (800e940 <HAL_I2C_Mem_Read+0x22c>)
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f002 f887 	bl	8010910 <I2C_TransferConfig>
 800e802:	e00f      	b.n	800e824 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e808:	b29a      	uxth	r2, r3
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e812:	b2da      	uxtb	r2, r3
 800e814:	8979      	ldrh	r1, [r7, #10]
 800e816:	4b4a      	ldr	r3, [pc, #296]	@ (800e940 <HAL_I2C_Mem_Read+0x22c>)
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f002 f876 	bl	8010910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e82a:	2200      	movs	r2, #0
 800e82c:	2104      	movs	r1, #4
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f001 feab 	bl	801058a <I2C_WaitOnFlagUntilTimeout>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d001      	beq.n	800e83e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	e07c      	b.n	800e938 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e848:	b2d2      	uxtb	r2, r2
 800e84a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e850:	1c5a      	adds	r2, r3, #1
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e85a:	3b01      	subs	r3, #1
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e866:	b29b      	uxth	r3, r3
 800e868:	3b01      	subs	r3, #1
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e874:	b29b      	uxth	r3, r3
 800e876:	2b00      	cmp	r3, #0
 800e878:	d034      	beq.n	800e8e4 <HAL_I2C_Mem_Read+0x1d0>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d130      	bne.n	800e8e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e888:	2200      	movs	r2, #0
 800e88a:	2180      	movs	r1, #128	@ 0x80
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	f001 fe7c 	bl	801058a <I2C_WaitOnFlagUntilTimeout>
 800e892:	4603      	mov	r3, r0
 800e894:	2b00      	cmp	r3, #0
 800e896:	d001      	beq.n	800e89c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e898:	2301      	movs	r3, #1
 800e89a:	e04d      	b.n	800e938 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	2bff      	cmp	r3, #255	@ 0xff
 800e8a4:	d90e      	bls.n	800e8c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	22ff      	movs	r2, #255	@ 0xff
 800e8aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	8979      	ldrh	r1, [r7, #10]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f002 f827 	bl	8010910 <I2C_TransferConfig>
 800e8c2:	e00f      	b.n	800e8e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8d2:	b2da      	uxtb	r2, r3
 800e8d4:	8979      	ldrh	r1, [r7, #10]
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f002 f816 	bl	8010910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d19a      	bne.n	800e824 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e8ee:	697a      	ldr	r2, [r7, #20]
 800e8f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8f2:	68f8      	ldr	r0, [r7, #12]
 800e8f4:	f001 fee9 	bl	80106ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d001      	beq.n	800e902 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e8fe:	2301      	movs	r3, #1
 800e900:	e01a      	b.n	800e938 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2220      	movs	r2, #32
 800e908:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	6859      	ldr	r1, [r3, #4]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	4b0b      	ldr	r3, [pc, #44]	@ (800e944 <HAL_I2C_Mem_Read+0x230>)
 800e916:	400b      	ands	r3, r1
 800e918:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2220      	movs	r2, #32
 800e91e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e932:	2300      	movs	r3, #0
 800e934:	e000      	b.n	800e938 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e936:	2302      	movs	r3, #2
  }
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	80002400 	.word	0x80002400
 800e944:	fe00e800 	.word	0xfe00e800

0800e948 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af02      	add	r7, sp, #8
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	4608      	mov	r0, r1
 800e952:	4611      	mov	r1, r2
 800e954:	461a      	mov	r2, r3
 800e956:	4603      	mov	r3, r0
 800e958:	817b      	strh	r3, [r7, #10]
 800e95a:	460b      	mov	r3, r1
 800e95c:	813b      	strh	r3, [r7, #8]
 800e95e:	4613      	mov	r3, r2
 800e960:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	2b20      	cmp	r3, #32
 800e96c:	d16a      	bne.n	800ea44 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d002      	beq.n	800e97a <HAL_I2C_Mem_Write_IT+0x32>
 800e974:	8bbb      	ldrh	r3, [r7, #28]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d105      	bne.n	800e986 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e980:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	e05f      	b.n	800ea46 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	699b      	ldr	r3, [r3, #24]
 800e98c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e994:	d101      	bne.n	800e99a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800e996:	2302      	movs	r3, #2
 800e998:	e055      	b.n	800ea46 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d101      	bne.n	800e9a8 <HAL_I2C_Mem_Write_IT+0x60>
 800e9a4:	2302      	movs	r3, #2
 800e9a6:	e04e      	b.n	800ea46 <HAL_I2C_Mem_Write_IT+0xfe>
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2221      	movs	r2, #33	@ 0x21
 800e9b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2240      	movs	r2, #64	@ 0x40
 800e9bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	69ba      	ldr	r2, [r7, #24]
 800e9d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	8bba      	ldrh	r2, [r7, #28]
 800e9d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	4a1d      	ldr	r2, [pc, #116]	@ (800ea50 <HAL_I2C_Mem_Write_IT+0x108>)
 800e9dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	4a1c      	ldr	r2, [pc, #112]	@ (800ea54 <HAL_I2C_Mem_Write_IT+0x10c>)
 800e9e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e9e4:	897a      	ldrh	r2, [r7, #10]
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e9ea:	88fb      	ldrh	r3, [r7, #6]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d109      	bne.n	800ea04 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e9f0:	893b      	ldrh	r3, [r7, #8]
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800ea00:	651a      	str	r2, [r3, #80]	@ 0x50
 800ea02:	e00b      	b.n	800ea1c <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ea04:	893b      	ldrh	r3, [r7, #8]
 800ea06:	0a1b      	lsrs	r3, r3, #8
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ea12:	893b      	ldrh	r3, [r7, #8]
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	461a      	mov	r2, r3
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ea1c:	88fb      	ldrh	r3, [r7, #6]
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	8979      	ldrh	r1, [r7, #10]
 800ea22:	4b0d      	ldr	r3, [pc, #52]	@ (800ea58 <HAL_I2C_Mem_Write_IT+0x110>)
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f001 ff70 	bl	8010910 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ea38:	2101      	movs	r1, #1
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f001 ff9a 	bl	8010974 <I2C_Enable_IRQ>

    return HAL_OK;
 800ea40:	2300      	movs	r3, #0
 800ea42:	e000      	b.n	800ea46 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ea44:	2302      	movs	r3, #2
  }
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	ffff0000 	.word	0xffff0000
 800ea54:	0800ec59 	.word	0x0800ec59
 800ea58:	80002000 	.word	0x80002000

0800ea5c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b086      	sub	sp, #24
 800ea60:	af02      	add	r7, sp, #8
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	4608      	mov	r0, r1
 800ea66:	4611      	mov	r1, r2
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	817b      	strh	r3, [r7, #10]
 800ea6e:	460b      	mov	r3, r1
 800ea70:	813b      	strh	r3, [r7, #8]
 800ea72:	4613      	mov	r3, r2
 800ea74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	2b20      	cmp	r3, #32
 800ea80:	d166      	bne.n	800eb50 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d002      	beq.n	800ea8e <HAL_I2C_Mem_Read_IT+0x32>
 800ea88:	8bbb      	ldrh	r3, [r7, #28]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d105      	bne.n	800ea9a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea94:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ea96:	2301      	movs	r3, #1
 800ea98:	e05b      	b.n	800eb52 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	699b      	ldr	r3, [r3, #24]
 800eaa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eaa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eaa8:	d101      	bne.n	800eaae <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800eaaa:	2302      	movs	r3, #2
 800eaac:	e051      	b.n	800eb52 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d101      	bne.n	800eabc <HAL_I2C_Mem_Read_IT+0x60>
 800eab8:	2302      	movs	r3, #2
 800eaba:	e04a      	b.n	800eb52 <HAL_I2C_Mem_Read_IT+0xf6>
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2201      	movs	r2, #1
 800eac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2222      	movs	r2, #34	@ 0x22
 800eac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2240      	movs	r2, #64	@ 0x40
 800ead0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	69ba      	ldr	r2, [r7, #24]
 800eade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	8bba      	ldrh	r2, [r7, #28]
 800eae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	4a1c      	ldr	r2, [pc, #112]	@ (800eb5c <HAL_I2C_Mem_Read_IT+0x100>)
 800eaea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4a1c      	ldr	r2, [pc, #112]	@ (800eb60 <HAL_I2C_Mem_Read_IT+0x104>)
 800eaf0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eaf2:	897a      	ldrh	r2, [r7, #10]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eaf8:	88fb      	ldrh	r3, [r7, #6]
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d109      	bne.n	800eb12 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eafe:	893b      	ldrh	r3, [r7, #8]
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb0e:	651a      	str	r2, [r3, #80]	@ 0x50
 800eb10:	e00b      	b.n	800eb2a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eb12:	893b      	ldrh	r3, [r7, #8]
 800eb14:	0a1b      	lsrs	r3, r3, #8
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eb20:	893b      	ldrh	r3, [r7, #8]
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	461a      	mov	r2, r3
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800eb2a:	88fb      	ldrh	r3, [r7, #6]
 800eb2c:	b2da      	uxtb	r2, r3
 800eb2e:	8979      	ldrh	r1, [r7, #10]
 800eb30:	4b0c      	ldr	r3, [pc, #48]	@ (800eb64 <HAL_I2C_Mem_Read_IT+0x108>)
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	2300      	movs	r3, #0
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f001 feea 	bl	8010910 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800eb44:	2101      	movs	r1, #1
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f001 ff14 	bl	8010974 <I2C_Enable_IRQ>

    return HAL_OK;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	e000      	b.n	800eb52 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800eb50:	2302      	movs	r3, #2
  }
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	ffff0000 	.word	0xffff0000
 800eb60:	0800ec59 	.word	0x0800ec59
 800eb64:	80002000 	.word	0x80002000

0800eb68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d005      	beq.n	800eb94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	68f9      	ldr	r1, [r7, #12]
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	4798      	blx	r3
  }
}
 800eb94:	bf00      	nop
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	70fb      	strb	r3, [r7, #3]
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ebfc:	bf00      	nop
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ec10:	bf00      	nop
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ec24:	bf00      	nop
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ec4c:	bf00      	nop
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b088      	sub	sp, #32
 800ec5c:	af02      	add	r7, sp, #8
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800ec64:	4b8d      	ldr	r3, [pc, #564]	@ (800ee9c <I2C_Mem_ISR_IT+0x244>)
 800ec66:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d101      	bne.n	800ec7a <I2C_Mem_ISR_IT+0x22>
 800ec76:	2302      	movs	r3, #2
 800ec78:	e10c      	b.n	800ee94 <I2C_Mem_ISR_IT+0x23c>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	f003 0310 	and.w	r3, r3, #16
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d012      	beq.n	800ecb2 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00d      	beq.n	800ecb2 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2210      	movs	r2, #16
 800ec9c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eca2:	f043 0204 	orr.w	r2, r3, #4
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f001 fc2b 	bl	8010506 <I2C_Flush_TXDR>
 800ecb0:	e0dd      	b.n	800ee6e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d022      	beq.n	800ed02 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d01d      	beq.n	800ed02 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	f023 0304 	bic.w	r3, r3, #4
 800eccc:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecd8:	b2d2      	uxtb	r2, r2
 800ecda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecea:	3b01      	subs	r3, #1
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ed00:	e0b5      	b.n	800ee6e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	f003 0302 	and.w	r3, r3, #2
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d02c      	beq.n	800ed66 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d027      	beq.n	800ed66 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1e:	d118      	bne.n	800ed52 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed24:	781a      	ldrb	r2, [r3, #0]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed30:	1c5a      	adds	r2, r3, #1
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ed50:	e08d      	b.n	800ee6e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ed5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed62:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ed64:	e083      	b.n	800ee6e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d03c      	beq.n	800edea <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d037      	beq.n	800edea <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d02c      	beq.n	800edde <I2C_Mem_ISR_IT+0x186>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d128      	bne.n	800edde <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	2bff      	cmp	r3, #255	@ 0xff
 800ed94:	d910      	bls.n	800edb8 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	22ff      	movs	r2, #255	@ 0xff
 800ed9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eda0:	b299      	uxth	r1, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	2300      	movs	r3, #0
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f001 fdad 	bl	8010910 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800edb6:	e017      	b.n	800ede8 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edbc:	b29a      	uxth	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edc6:	b299      	uxth	r1, r3
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edcc:	b2da      	uxtb	r2, r3
 800edce:	2300      	movs	r3, #0
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f001 fd9a 	bl	8010910 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eddc:	e004      	b.n	800ede8 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800edde:	2140      	movs	r1, #64	@ 0x40
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f001 fa79 	bl	80102d8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ede6:	e042      	b.n	800ee6e <I2C_Mem_ISR_IT+0x216>
 800ede8:	e041      	b.n	800ee6e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d03c      	beq.n	800ee6e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d037      	beq.n	800ee6e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800edfe:	2101      	movs	r1, #1
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f001 fe3b 	bl	8010a7c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ee06:	2102      	movs	r1, #2
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f001 fdb3 	bl	8010974 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b22      	cmp	r3, #34	@ 0x22
 800ee18:	d101      	bne.n	800ee1e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800ee1a:	4b21      	ldr	r3, [pc, #132]	@ (800eea0 <I2C_Mem_ISR_IT+0x248>)
 800ee1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	2bff      	cmp	r3, #255	@ 0xff
 800ee26:	d910      	bls.n	800ee4a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	22ff      	movs	r2, #255	@ 0xff
 800ee2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee32:	b299      	uxth	r1, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ee42:	68f8      	ldr	r0, [r7, #12]
 800ee44:	f001 fd64 	bl	8010910 <I2C_TransferConfig>
 800ee48:	e011      	b.n	800ee6e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee58:	b299      	uxth	r1, r3
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	9300      	str	r3, [sp, #0]
 800ee64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	f001 fd51 	bl	8010910 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	f003 0320 	and.w	r3, r3, #32
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d008      	beq.n	800ee8a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d003      	beq.n	800ee8a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800ee82:	6939      	ldr	r1, [r7, #16]
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f000 feb7 	bl	800fbf8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3718      	adds	r7, #24
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	80002000 	.word	0x80002000
 800eea0:	80002400 	.word	0x80002400

0800eea4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d101      	bne.n	800eec8 <I2C_Slave_ISR_IT+0x24>
 800eec4:	2302      	movs	r3, #2
 800eec6:	e0e2      	b.n	800f08e <I2C_Slave_ISR_IT+0x1ea>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	f003 0320 	and.w	r3, r3, #32
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d009      	beq.n	800eeee <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d004      	beq.n	800eeee <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800eee4:	6939      	ldr	r1, [r7, #16]
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f000 ff4e 	bl	800fd88 <I2C_ITSlaveCplt>
 800eeec:	e0ca      	b.n	800f084 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	f003 0310 	and.w	r3, r3, #16
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d04b      	beq.n	800ef90 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d046      	beq.n	800ef90 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d128      	bne.n	800ef5e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b28      	cmp	r3, #40	@ 0x28
 800ef16:	d108      	bne.n	800ef2a <I2C_Slave_ISR_IT+0x86>
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef1e:	d104      	bne.n	800ef2a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ef20:	6939      	ldr	r1, [r7, #16]
 800ef22:	68f8      	ldr	r0, [r7, #12]
 800ef24:	f001 f984 	bl	8010230 <I2C_ITListenCplt>
 800ef28:	e031      	b.n	800ef8e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	2b29      	cmp	r3, #41	@ 0x29
 800ef34:	d10e      	bne.n	800ef54 <I2C_Slave_ISR_IT+0xb0>
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ef3c:	d00a      	beq.n	800ef54 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2210      	movs	r2, #16
 800ef44:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	f001 fadd 	bl	8010506 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f000 fdf6 	bl	800fb3e <I2C_ITSlaveSeqCplt>
 800ef52:	e01c      	b.n	800ef8e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2210      	movs	r2, #16
 800ef5a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800ef5c:	e08f      	b.n	800f07e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2210      	movs	r2, #16
 800ef64:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef6a:	f043 0204 	orr.w	r2, r3, #4
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d003      	beq.n	800ef80 <I2C_Slave_ISR_IT+0xdc>
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef7e:	d17e      	bne.n	800f07e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef84:	4619      	mov	r1, r3
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f001 f9a6 	bl	80102d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ef8c:	e077      	b.n	800f07e <I2C_Slave_ISR_IT+0x1da>
 800ef8e:	e076      	b.n	800f07e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	f003 0304 	and.w	r3, r3, #4
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d02f      	beq.n	800effa <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d02a      	beq.n	800effa <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d018      	beq.n	800efe0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb8:	b2d2      	uxtb	r2, r2
 800efba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc0:	1c5a      	adds	r2, r3, #1
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efca:	3b01      	subs	r3, #1
 800efcc:	b29a      	uxth	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	3b01      	subs	r3, #1
 800efda:	b29a      	uxth	r2, r3
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d14b      	bne.n	800f082 <I2C_Slave_ISR_IT+0x1de>
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800eff0:	d047      	beq.n	800f082 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f000 fda3 	bl	800fb3e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800eff8:	e043      	b.n	800f082 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	f003 0308 	and.w	r3, r3, #8
 800f000:	2b00      	cmp	r3, #0
 800f002:	d009      	beq.n	800f018 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d004      	beq.n	800f018 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f00e:	6939      	ldr	r1, [r7, #16]
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f000 fcd3 	bl	800f9bc <I2C_ITAddrCplt>
 800f016:	e035      	b.n	800f084 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	f003 0302 	and.w	r3, r3, #2
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d030      	beq.n	800f084 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d02b      	beq.n	800f084 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f030:	b29b      	uxth	r3, r3
 800f032:	2b00      	cmp	r3, #0
 800f034:	d018      	beq.n	800f068 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f03a:	781a      	ldrb	r2, [r3, #0]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f050:	b29b      	uxth	r3, r3
 800f052:	3b01      	subs	r3, #1
 800f054:	b29a      	uxth	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f05e:	3b01      	subs	r3, #1
 800f060:	b29a      	uxth	r2, r3
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f066:	e00d      	b.n	800f084 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f06e:	d002      	beq.n	800f076 <I2C_Slave_ISR_IT+0x1d2>
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d106      	bne.n	800f084 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f000 fd61 	bl	800fb3e <I2C_ITSlaveSeqCplt>
 800f07c:	e002      	b.n	800f084 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f07e:	bf00      	nop
 800f080:	e000      	b.n	800f084 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f082:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3718      	adds	r7, #24
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b088      	sub	sp, #32
 800f09a:	af02      	add	r7, sp, #8
 800f09c:	60f8      	str	r0, [r7, #12]
 800f09e:	60b9      	str	r1, [r7, #8]
 800f0a0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d101      	bne.n	800f0b0 <I2C_Master_ISR_DMA+0x1a>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	e0d9      	b.n	800f264 <I2C_Master_ISR_DMA+0x1ce>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	f003 0310 	and.w	r3, r3, #16
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d016      	beq.n	800f0f0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d011      	beq.n	800f0f0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2210      	movs	r2, #16
 800f0d2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0d8:	f043 0204 	orr.w	r2, r3, #4
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f0e0:	2120      	movs	r1, #32
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f001 fc46 	bl	8010974 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f001 fa0c 	bl	8010506 <I2C_Flush_TXDR>
 800f0ee:	e0b4      	b.n	800f25a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d071      	beq.n	800f1de <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f100:	2b00      	cmp	r3, #0
 800f102:	d06c      	beq.n	800f1de <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f112:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f118:	b29b      	uxth	r3, r3
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d04e      	beq.n	800f1bc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	b29b      	uxth	r3, r3
 800f126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f12a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f130:	b29b      	uxth	r3, r3
 800f132:	2bff      	cmp	r3, #255	@ 0xff
 800f134:	d906      	bls.n	800f144 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	22ff      	movs	r2, #255	@ 0xff
 800f13a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f13c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f140:	617b      	str	r3, [r7, #20]
 800f142:	e010      	b.n	800f166 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f148:	b29a      	uxth	r2, r3
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f152:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f156:	d003      	beq.n	800f160 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f15c:	617b      	str	r3, [r7, #20]
 800f15e:	e002      	b.n	800f166 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f164:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f16a:	b2da      	uxtb	r2, r3
 800f16c:	8a79      	ldrh	r1, [r7, #18]
 800f16e:	2300      	movs	r3, #0
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f001 fbcb 	bl	8010910 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f17e:	b29a      	uxth	r2, r3
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	b29a      	uxth	r2, r3
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b22      	cmp	r3, #34	@ 0x22
 800f196:	d108      	bne.n	800f1aa <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f1a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f1a8:	e057      	b.n	800f25a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f1b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f1ba:	e04e      	b.n	800f25a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f1c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f1ca:	d003      	beq.n	800f1d4 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f000 fc79 	bl	800fac4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f1d2:	e042      	b.n	800f25a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f1d4:	2140      	movs	r1, #64	@ 0x40
 800f1d6:	68f8      	ldr	r0, [r7, #12]
 800f1d8:	f001 f87e 	bl	80102d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f1dc:	e03d      	b.n	800f25a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d028      	beq.n	800f23a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d023      	beq.n	800f23a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d119      	bne.n	800f230 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f20a:	d025      	beq.n	800f258 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f210:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f214:	d108      	bne.n	800f228 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	685a      	ldr	r2, [r3, #4]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f224:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f226:	e017      	b.n	800f258 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f000 fc4b 	bl	800fac4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f22e:	e013      	b.n	800f258 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f230:	2140      	movs	r1, #64	@ 0x40
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f001 f850 	bl	80102d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f238:	e00e      	b.n	800f258 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	f003 0320 	and.w	r3, r3, #32
 800f240:	2b00      	cmp	r3, #0
 800f242:	d00a      	beq.n	800f25a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d005      	beq.n	800f25a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f24e:	68b9      	ldr	r1, [r7, #8]
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f000 fcd1 	bl	800fbf8 <I2C_ITMasterCplt>
 800f256:	e000      	b.n	800f25a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f258:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2200      	movs	r2, #0
 800f25e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f262:	2300      	movs	r3, #0
}
 800f264:	4618      	mov	r0, r3
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b088      	sub	sp, #32
 800f270:	af02      	add	r7, sp, #8
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f278:	4b8d      	ldr	r3, [pc, #564]	@ (800f4b0 <I2C_Mem_ISR_DMA+0x244>)
 800f27a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f282:	2b01      	cmp	r3, #1
 800f284:	d101      	bne.n	800f28a <I2C_Mem_ISR_DMA+0x1e>
 800f286:	2302      	movs	r3, #2
 800f288:	e10e      	b.n	800f4a8 <I2C_Mem_ISR_DMA+0x23c>
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2201      	movs	r2, #1
 800f28e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	f003 0310 	and.w	r3, r3, #16
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d016      	beq.n	800f2ca <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d011      	beq.n	800f2ca <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2210      	movs	r2, #16
 800f2ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2b2:	f043 0204 	orr.w	r2, r3, #4
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f2ba:	2120      	movs	r1, #32
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f001 fb59 	bl	8010974 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	f001 f91f 	bl	8010506 <I2C_Flush_TXDR>
 800f2c8:	e0e9      	b.n	800f49e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	f003 0302 	and.w	r3, r3, #2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00e      	beq.n	800f2f2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d009      	beq.n	800f2f2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f2e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ee:	651a      	str	r2, [r3, #80]	@ 0x50
 800f2f0:	e0d5      	b.n	800f49e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d05f      	beq.n	800f3bc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f302:	2b00      	cmp	r3, #0
 800f304:	d05a      	beq.n	800f3bc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f306:	2101      	movs	r1, #1
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f001 fbb7 	bl	8010a7c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f30e:	2110      	movs	r1, #16
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f001 fb2f 	bl	8010974 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d048      	beq.n	800f3b2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f324:	b29b      	uxth	r3, r3
 800f326:	2bff      	cmp	r3, #255	@ 0xff
 800f328:	d910      	bls.n	800f34c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	22ff      	movs	r2, #255	@ 0xff
 800f32e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f334:	b299      	uxth	r1, r3
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	2300      	movs	r3, #0
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f001 fae3 	bl	8010910 <I2C_TransferConfig>
 800f34a:	e011      	b.n	800f370 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f350:	b29a      	uxth	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f35a:	b299      	uxth	r1, r3
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f360:	b2da      	uxtb	r2, r3
 800f362:	2300      	movs	r3, #0
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f001 fad0 	bl	8010910 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f374:	b29a      	uxth	r2, r3
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b22      	cmp	r3, #34	@ 0x22
 800f38c:	d108      	bne.n	800f3a0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f39c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f39e:	e07e      	b.n	800f49e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	681a      	ldr	r2, [r3, #0]
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f3ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f3b0:	e075      	b.n	800f49e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f3b2:	2140      	movs	r1, #64	@ 0x40
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 ff8f 	bl	80102d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f3ba:	e070      	b.n	800f49e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d05d      	beq.n	800f482 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d058      	beq.n	800f482 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f3d0:	2101      	movs	r1, #1
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f001 fb52 	bl	8010a7c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f3d8:	2110      	movs	r1, #16
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f001 faca 	bl	8010974 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	2b22      	cmp	r3, #34	@ 0x22
 800f3ea:	d101      	bne.n	800f3f0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f3ec:	4b31      	ldr	r3, [pc, #196]	@ (800f4b4 <I2C_Mem_ISR_DMA+0x248>)
 800f3ee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	2bff      	cmp	r3, #255	@ 0xff
 800f3f8:	d910      	bls.n	800f41c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	22ff      	movs	r2, #255	@ 0xff
 800f3fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f404:	b299      	uxth	r1, r3
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f40a:	b2da      	uxtb	r2, r3
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f001 fa7b 	bl	8010910 <I2C_TransferConfig>
 800f41a:	e011      	b.n	800f440 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f420:	b29a      	uxth	r2, r3
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f42a:	b299      	uxth	r1, r3
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f430:	b2da      	uxtb	r2, r3
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f001 fa68 	bl	8010910 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f444:	b29a      	uxth	r2, r3
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	2b22      	cmp	r3, #34	@ 0x22
 800f45c:	d108      	bne.n	800f470 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f46c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f46e:	e016      	b.n	800f49e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f47e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f480:	e00d      	b.n	800f49e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	f003 0320 	and.w	r3, r3, #32
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d008      	beq.n	800f49e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f496:	68b9      	ldr	r1, [r7, #8]
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 fbad 	bl	800fbf8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3718      	adds	r7, #24
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	80002000 	.word	0x80002000
 800f4b4:	80002400 	.word	0x80002400

0800f4b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b088      	sub	sp, #32
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d101      	bne.n	800f4dc <I2C_Slave_ISR_DMA+0x24>
 800f4d8:	2302      	movs	r3, #2
 800f4da:	e1c2      	b.n	800f862 <I2C_Slave_ISR_DMA+0x3aa>
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	f003 0320 	and.w	r3, r3, #32
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d009      	beq.n	800f502 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d004      	beq.n	800f502 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f4f8:	68b9      	ldr	r1, [r7, #8]
 800f4fa:	68f8      	ldr	r0, [r7, #12]
 800f4fc:	f000 fc44 	bl	800fd88 <I2C_ITSlaveCplt>
 800f500:	e1aa      	b.n	800f858 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	f003 0310 	and.w	r3, r3, #16
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f000 8197 	beq.w	800f83c <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f514:	2b00      	cmp	r3, #0
 800f516:	f000 8191 	beq.w	800f83c <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f520:	2b00      	cmp	r3, #0
 800f522:	d105      	bne.n	800f530 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	f000 817f 	beq.w	800f82e <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d07b      	beq.n	800f630 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d076      	beq.n	800f630 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a74      	ldr	r2, [pc, #464]	@ (800f71c <I2C_Slave_ISR_DMA+0x264>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d059      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4a72      	ldr	r2, [pc, #456]	@ (800f720 <I2C_Slave_ISR_DMA+0x268>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d053      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4a70      	ldr	r2, [pc, #448]	@ (800f724 <I2C_Slave_ISR_DMA+0x26c>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d04d      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a6e      	ldr	r2, [pc, #440]	@ (800f728 <I2C_Slave_ISR_DMA+0x270>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d047      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a6c      	ldr	r2, [pc, #432]	@ (800f72c <I2C_Slave_ISR_DMA+0x274>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d041      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4a6a      	ldr	r2, [pc, #424]	@ (800f730 <I2C_Slave_ISR_DMA+0x278>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d03b      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4a68      	ldr	r2, [pc, #416]	@ (800f734 <I2C_Slave_ISR_DMA+0x27c>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d035      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a66      	ldr	r2, [pc, #408]	@ (800f738 <I2C_Slave_ISR_DMA+0x280>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d02f      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a64      	ldr	r2, [pc, #400]	@ (800f73c <I2C_Slave_ISR_DMA+0x284>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d029      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4a62      	ldr	r2, [pc, #392]	@ (800f740 <I2C_Slave_ISR_DMA+0x288>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d023      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a60      	ldr	r2, [pc, #384]	@ (800f744 <I2C_Slave_ISR_DMA+0x28c>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d01d      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a5e      	ldr	r2, [pc, #376]	@ (800f748 <I2C_Slave_ISR_DMA+0x290>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d017      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4a5c      	ldr	r2, [pc, #368]	@ (800f74c <I2C_Slave_ISR_DMA+0x294>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d011      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a5a      	ldr	r2, [pc, #360]	@ (800f750 <I2C_Slave_ISR_DMA+0x298>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d00b      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a58      	ldr	r2, [pc, #352]	@ (800f754 <I2C_Slave_ISR_DMA+0x29c>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d005      	beq.n	800f602 <I2C_Slave_ISR_DMA+0x14a>
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a56      	ldr	r2, [pc, #344]	@ (800f758 <I2C_Slave_ISR_DMA+0x2a0>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d109      	bne.n	800f616 <I2C_Slave_ISR_DMA+0x15e>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	bf0c      	ite	eq
 800f60e:	2301      	moveq	r3, #1
 800f610:	2300      	movne	r3, #0
 800f612:	b2db      	uxtb	r3, r3
 800f614:	e008      	b.n	800f628 <I2C_Slave_ISR_DMA+0x170>
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	bf0c      	ite	eq
 800f622:	2301      	moveq	r3, #1
 800f624:	2300      	movne	r3, #0
 800f626:	b2db      	uxtb	r3, r3
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d001      	beq.n	800f630 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800f62c:	2301      	movs	r3, #1
 800f62e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f634:	2b00      	cmp	r3, #0
 800f636:	f000 809e 	beq.w	800f776 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 8098 	beq.w	800f776 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a33      	ldr	r2, [pc, #204]	@ (800f71c <I2C_Slave_ISR_DMA+0x264>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d059      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a31      	ldr	r2, [pc, #196]	@ (800f720 <I2C_Slave_ISR_DMA+0x268>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d053      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4a2f      	ldr	r2, [pc, #188]	@ (800f724 <I2C_Slave_ISR_DMA+0x26c>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d04d      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a2d      	ldr	r2, [pc, #180]	@ (800f728 <I2C_Slave_ISR_DMA+0x270>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d047      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a2b      	ldr	r2, [pc, #172]	@ (800f72c <I2C_Slave_ISR_DMA+0x274>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d041      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a29      	ldr	r2, [pc, #164]	@ (800f730 <I2C_Slave_ISR_DMA+0x278>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d03b      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a27      	ldr	r2, [pc, #156]	@ (800f734 <I2C_Slave_ISR_DMA+0x27c>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d035      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a25      	ldr	r2, [pc, #148]	@ (800f738 <I2C_Slave_ISR_DMA+0x280>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d02f      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a23      	ldr	r2, [pc, #140]	@ (800f73c <I2C_Slave_ISR_DMA+0x284>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d029      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a21      	ldr	r2, [pc, #132]	@ (800f740 <I2C_Slave_ISR_DMA+0x288>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d023      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a1f      	ldr	r2, [pc, #124]	@ (800f744 <I2C_Slave_ISR_DMA+0x28c>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d01d      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f748 <I2C_Slave_ISR_DMA+0x290>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d017      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a1b      	ldr	r2, [pc, #108]	@ (800f74c <I2C_Slave_ISR_DMA+0x294>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d011      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a19      	ldr	r2, [pc, #100]	@ (800f750 <I2C_Slave_ISR_DMA+0x298>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d00b      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a17      	ldr	r2, [pc, #92]	@ (800f754 <I2C_Slave_ISR_DMA+0x29c>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d005      	beq.n	800f706 <I2C_Slave_ISR_DMA+0x24e>
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4a15      	ldr	r2, [pc, #84]	@ (800f758 <I2C_Slave_ISR_DMA+0x2a0>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d12a      	bne.n	800f75c <I2C_Slave_ISR_DMA+0x2a4>
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	bf0c      	ite	eq
 800f712:	2301      	moveq	r3, #1
 800f714:	2300      	movne	r3, #0
 800f716:	b2db      	uxtb	r3, r3
 800f718:	e029      	b.n	800f76e <I2C_Slave_ISR_DMA+0x2b6>
 800f71a:	bf00      	nop
 800f71c:	40020010 	.word	0x40020010
 800f720:	40020028 	.word	0x40020028
 800f724:	40020040 	.word	0x40020040
 800f728:	40020058 	.word	0x40020058
 800f72c:	40020070 	.word	0x40020070
 800f730:	40020088 	.word	0x40020088
 800f734:	400200a0 	.word	0x400200a0
 800f738:	400200b8 	.word	0x400200b8
 800f73c:	40020410 	.word	0x40020410
 800f740:	40020428 	.word	0x40020428
 800f744:	40020440 	.word	0x40020440
 800f748:	40020458 	.word	0x40020458
 800f74c:	40020470 	.word	0x40020470
 800f750:	40020488 	.word	0x40020488
 800f754:	400204a0 	.word	0x400204a0
 800f758:	400204b8 	.word	0x400204b8
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	bf0c      	ite	eq
 800f768:	2301      	moveq	r3, #1
 800f76a:	2300      	movne	r3, #0
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d001      	beq.n	800f776 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800f772:	2301      	movs	r3, #1
 800f774:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d128      	bne.n	800f7ce <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f782:	b2db      	uxtb	r3, r3
 800f784:	2b28      	cmp	r3, #40	@ 0x28
 800f786:	d108      	bne.n	800f79a <I2C_Slave_ISR_DMA+0x2e2>
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f78e:	d104      	bne.n	800f79a <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800f790:	68b9      	ldr	r1, [r7, #8]
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f000 fd4c 	bl	8010230 <I2C_ITListenCplt>
 800f798:	e048      	b.n	800f82c <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	2b29      	cmp	r3, #41	@ 0x29
 800f7a4:	d10e      	bne.n	800f7c4 <I2C_Slave_ISR_DMA+0x30c>
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f7ac:	d00a      	beq.n	800f7c4 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	2210      	movs	r2, #16
 800f7b4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f000 fea5 	bl	8010506 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f000 f9be 	bl	800fb3e <I2C_ITSlaveSeqCplt>
 800f7c2:	e033      	b.n	800f82c <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2210      	movs	r2, #16
 800f7ca:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800f7cc:	e034      	b.n	800f838 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2210      	movs	r2, #16
 800f7d4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7da:	f043 0204 	orr.w	r2, r3, #4
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7e8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d003      	beq.n	800f7f8 <I2C_Slave_ISR_DMA+0x340>
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f7f6:	d11f      	bne.n	800f838 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	2b21      	cmp	r3, #33	@ 0x21
 800f7fc:	d002      	beq.n	800f804 <I2C_Slave_ISR_DMA+0x34c>
 800f7fe:	7dfb      	ldrb	r3, [r7, #23]
 800f800:	2b29      	cmp	r3, #41	@ 0x29
 800f802:	d103      	bne.n	800f80c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2221      	movs	r2, #33	@ 0x21
 800f808:	631a      	str	r2, [r3, #48]	@ 0x30
 800f80a:	e008      	b.n	800f81e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f80c:	7dfb      	ldrb	r3, [r7, #23]
 800f80e:	2b22      	cmp	r3, #34	@ 0x22
 800f810:	d002      	beq.n	800f818 <I2C_Slave_ISR_DMA+0x360>
 800f812:	7dfb      	ldrb	r3, [r7, #23]
 800f814:	2b2a      	cmp	r3, #42	@ 0x2a
 800f816:	d102      	bne.n	800f81e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2222      	movs	r2, #34	@ 0x22
 800f81c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f822:	4619      	mov	r1, r3
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f000 fd57 	bl	80102d8 <I2C_ITError>
      if (treatdmanack == 1U)
 800f82a:	e005      	b.n	800f838 <I2C_Slave_ISR_DMA+0x380>
 800f82c:	e004      	b.n	800f838 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2210      	movs	r2, #16
 800f834:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f836:	e00f      	b.n	800f858 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800f838:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f83a:	e00d      	b.n	800f858 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	f003 0308 	and.w	r3, r3, #8
 800f842:	2b00      	cmp	r3, #0
 800f844:	d008      	beq.n	800f858 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d003      	beq.n	800f858 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800f850:	68b9      	ldr	r1, [r7, #8]
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f000 f8b2 	bl	800f9bc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2200      	movs	r2, #0
 800f85c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3720      	adds	r7, #32
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop

0800f86c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af02      	add	r7, sp, #8
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	4608      	mov	r0, r1
 800f876:	4611      	mov	r1, r2
 800f878:	461a      	mov	r2, r3
 800f87a:	4603      	mov	r3, r0
 800f87c:	817b      	strh	r3, [r7, #10]
 800f87e:	460b      	mov	r3, r1
 800f880:	813b      	strh	r3, [r7, #8]
 800f882:	4613      	mov	r3, r2
 800f884:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f886:	88fb      	ldrh	r3, [r7, #6]
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	8979      	ldrh	r1, [r7, #10]
 800f88c:	4b20      	ldr	r3, [pc, #128]	@ (800f910 <I2C_RequestMemoryWrite+0xa4>)
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	f001 f83b 	bl	8010910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f89a:	69fa      	ldr	r2, [r7, #28]
 800f89c:	69b9      	ldr	r1, [r7, #24]
 800f89e:	68f8      	ldr	r0, [r7, #12]
 800f8a0:	f000 fecc 	bl	801063c <I2C_WaitOnTXISFlagUntilTimeout>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d001      	beq.n	800f8ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e02c      	b.n	800f908 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f8ae:	88fb      	ldrh	r3, [r7, #6]
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d105      	bne.n	800f8c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f8b4:	893b      	ldrh	r3, [r7, #8]
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	629a      	str	r2, [r3, #40]	@ 0x28
 800f8be:	e015      	b.n	800f8ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f8c0:	893b      	ldrh	r3, [r7, #8]
 800f8c2:	0a1b      	lsrs	r3, r3, #8
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f8ce:	69fa      	ldr	r2, [r7, #28]
 800f8d0:	69b9      	ldr	r1, [r7, #24]
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f000 feb2 	bl	801063c <I2C_WaitOnTXISFlagUntilTimeout>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e012      	b.n	800f908 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f8e2:	893b      	ldrh	r3, [r7, #8]
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	69bb      	ldr	r3, [r7, #24]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	2180      	movs	r1, #128	@ 0x80
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f000 fe47 	bl	801058a <I2C_WaitOnFlagUntilTimeout>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800f902:	2301      	movs	r3, #1
 800f904:	e000      	b.n	800f908 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	80002000 	.word	0x80002000

0800f914 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b086      	sub	sp, #24
 800f918:	af02      	add	r7, sp, #8
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	4608      	mov	r0, r1
 800f91e:	4611      	mov	r1, r2
 800f920:	461a      	mov	r2, r3
 800f922:	4603      	mov	r3, r0
 800f924:	817b      	strh	r3, [r7, #10]
 800f926:	460b      	mov	r3, r1
 800f928:	813b      	strh	r3, [r7, #8]
 800f92a:	4613      	mov	r3, r2
 800f92c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f92e:	88fb      	ldrh	r3, [r7, #6]
 800f930:	b2da      	uxtb	r2, r3
 800f932:	8979      	ldrh	r1, [r7, #10]
 800f934:	4b20      	ldr	r3, [pc, #128]	@ (800f9b8 <I2C_RequestMemoryRead+0xa4>)
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	2300      	movs	r3, #0
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f000 ffe8 	bl	8010910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f940:	69fa      	ldr	r2, [r7, #28]
 800f942:	69b9      	ldr	r1, [r7, #24]
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f000 fe79 	bl	801063c <I2C_WaitOnTXISFlagUntilTimeout>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d001      	beq.n	800f954 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800f950:	2301      	movs	r3, #1
 800f952:	e02c      	b.n	800f9ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f954:	88fb      	ldrh	r3, [r7, #6]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d105      	bne.n	800f966 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f95a:	893b      	ldrh	r3, [r7, #8]
 800f95c:	b2da      	uxtb	r2, r3
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	629a      	str	r2, [r3, #40]	@ 0x28
 800f964:	e015      	b.n	800f992 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f966:	893b      	ldrh	r3, [r7, #8]
 800f968:	0a1b      	lsrs	r3, r3, #8
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	b2da      	uxtb	r2, r3
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f974:	69fa      	ldr	r2, [r7, #28]
 800f976:	69b9      	ldr	r1, [r7, #24]
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f000 fe5f 	bl	801063c <I2C_WaitOnTXISFlagUntilTimeout>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d001      	beq.n	800f988 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	e012      	b.n	800f9ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f988:	893b      	ldrh	r3, [r7, #8]
 800f98a:	b2da      	uxtb	r2, r3
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	9300      	str	r3, [sp, #0]
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	2200      	movs	r2, #0
 800f99a:	2140      	movs	r1, #64	@ 0x40
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f000 fdf4 	bl	801058a <I2C_WaitOnFlagUntilTimeout>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d001      	beq.n	800f9ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e000      	b.n	800f9ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	80002000 	.word	0x80002000

0800f9bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f9d2:	2b28      	cmp	r3, #40	@ 0x28
 800f9d4:	d16a      	bne.n	800faac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	699b      	ldr	r3, [r3, #24]
 800f9dc:	0c1b      	lsrs	r3, r3, #16
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	f003 0301 	and.w	r3, r3, #1
 800f9e4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	699b      	ldr	r3, [r3, #24]
 800f9ec:	0c1b      	lsrs	r3, r3, #16
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f9f4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	689b      	ldr	r3, [r3, #8]
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa02:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fa10:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d138      	bne.n	800fa8c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fa1a:	897b      	ldrh	r3, [r7, #10]
 800fa1c:	09db      	lsrs	r3, r3, #7
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	89bb      	ldrh	r3, [r7, #12]
 800fa22:	4053      	eors	r3, r2
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	f003 0306 	and.w	r3, r3, #6
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d11c      	bne.n	800fa68 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fa2e:	897b      	ldrh	r3, [r7, #10]
 800fa30:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa36:	1c5a      	adds	r2, r3, #1
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	d13b      	bne.n	800fabc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2208      	movs	r2, #8
 800fa50:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fa5a:	89ba      	ldrh	r2, [r7, #12]
 800fa5c:	7bfb      	ldrb	r3, [r7, #15]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff f8c3 	bl	800ebec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fa66:	e029      	b.n	800fabc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fa68:	893b      	ldrh	r3, [r7, #8]
 800fa6a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fa6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f001 f803 	bl	8010a7c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fa7e:	89ba      	ldrh	r2, [r7, #12]
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff f8b1 	bl	800ebec <HAL_I2C_AddrCallback>
}
 800fa8a:	e017      	b.n	800fabc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fa8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 fff3 	bl	8010a7c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fa9e:	89ba      	ldrh	r2, [r7, #12]
 800faa0:	7bfb      	ldrb	r3, [r7, #15]
 800faa2:	4619      	mov	r1, r3
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f7ff f8a1 	bl	800ebec <HAL_I2C_AddrCallback>
}
 800faaa:	e007      	b.n	800fabc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	2208      	movs	r2, #8
 800fab2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800fabc:	bf00      	nop
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	2b21      	cmp	r3, #33	@ 0x21
 800fade:	d115      	bne.n	800fb0c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2220      	movs	r2, #32
 800fae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2211      	movs	r2, #17
 800faec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800faf4:	2101      	movs	r1, #1
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 ffc0 	bl	8010a7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2200      	movs	r2, #0
 800fb00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7ff f849 	bl	800eb9c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fb0a:	e014      	b.n	800fb36 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2220      	movs	r2, #32
 800fb10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2212      	movs	r2, #18
 800fb18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fb20:	2102      	movs	r1, #2
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 ffaa 	bl	8010a7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f7ff f83d 	bl	800ebb0 <HAL_I2C_MasterRxCpltCallback>
}
 800fb36:	bf00      	nop
 800fb38:	3708      	adds	r7, #8
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}

0800fb3e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b084      	sub	sp, #16
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d008      	beq.n	800fb72 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fb6e:	601a      	str	r2, [r3, #0]
 800fb70:	e00c      	b.n	800fb8c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d007      	beq.n	800fb8c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fb8a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	2b29      	cmp	r3, #41	@ 0x29
 800fb96:	d112      	bne.n	800fbbe <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2228      	movs	r2, #40	@ 0x28
 800fb9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2221      	movs	r2, #33	@ 0x21
 800fba4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fba6:	2101      	movs	r1, #1
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 ff67 	bl	8010a7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f7ff f804 	bl	800ebc4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fbbc:	e017      	b.n	800fbee <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbc8:	d111      	bne.n	800fbee <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2228      	movs	r2, #40	@ 0x28
 800fbce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2222      	movs	r2, #34	@ 0x22
 800fbd6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fbd8:	2102      	movs	r1, #2
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 ff4e 	bl	8010a7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7fe fff5 	bl	800ebd8 <HAL_I2C_SlaveRxCpltCallback>
}
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
	...

0800fbf8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2220      	movs	r2, #32
 800fc0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b21      	cmp	r3, #33	@ 0x21
 800fc18:	d107      	bne.n	800fc2a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fc1a:	2101      	movs	r1, #1
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 ff2d 	bl	8010a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2211      	movs	r2, #17
 800fc26:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc28:	e00c      	b.n	800fc44 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	2b22      	cmp	r3, #34	@ 0x22
 800fc34:	d106      	bne.n	800fc44 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fc36:	2102      	movs	r1, #2
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 ff1f 	bl	8010a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2212      	movs	r2, #18
 800fc42:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	6859      	ldr	r1, [r3, #4]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	4b4c      	ldr	r3, [pc, #304]	@ (800fd80 <I2C_ITMasterCplt+0x188>)
 800fc50:	400b      	ands	r3, r1
 800fc52:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2200      	movs	r2, #0
 800fc58:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	4a49      	ldr	r2, [pc, #292]	@ (800fd84 <I2C_ITMasterCplt+0x18c>)
 800fc5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	f003 0310 	and.w	r3, r3, #16
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d009      	beq.n	800fc7e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2210      	movs	r2, #16
 800fc70:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc76:	f043 0204 	orr.w	r2, r3, #4
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	2b60      	cmp	r3, #96	@ 0x60
 800fc88:	d10a      	bne.n	800fca0 <I2C_ITMasterCplt+0xa8>
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	f003 0304 	and.w	r3, r3, #4
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d005      	beq.n	800fca0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 fc30 	bl	8010506 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcaa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	2b60      	cmp	r3, #96	@ 0x60
 800fcb6:	d002      	beq.n	800fcbe <I2C_ITMasterCplt+0xc6>
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d006      	beq.n	800fccc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 fb07 	bl	80102d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fcca:	e054      	b.n	800fd76 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	2b21      	cmp	r3, #33	@ 0x21
 800fcd6:	d124      	bne.n	800fd22 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2220      	movs	r2, #32
 800fcdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	2b40      	cmp	r3, #64	@ 0x40
 800fcf0:	d10b      	bne.n	800fd0a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f7fe ff8a 	bl	800ec1c <HAL_I2C_MemTxCpltCallback>
}
 800fd08:	e035      	b.n	800fd76 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7fe ff3e 	bl	800eb9c <HAL_I2C_MasterTxCpltCallback>
}
 800fd20:	e029      	b.n	800fd76 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b22      	cmp	r3, #34	@ 0x22
 800fd2c:	d123      	bne.n	800fd76 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2220      	movs	r2, #32
 800fd32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	2b40      	cmp	r3, #64	@ 0x40
 800fd46:	d10b      	bne.n	800fd60 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7f6 fc29 	bl	80065b0 <HAL_I2C_MemRxCpltCallback>
}
 800fd5e:	e00a      	b.n	800fd76 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7fe ff1d 	bl	800ebb0 <HAL_I2C_MasterRxCpltCallback>
}
 800fd76:	bf00      	nop
 800fd78:	3718      	adds	r7, #24
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	fe00e800 	.word	0xfe00e800
 800fd84:	ffff0000 	.word	0xffff0000

0800fd88 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fda2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdaa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2220      	movs	r2, #32
 800fdb2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fdb4:	7afb      	ldrb	r3, [r7, #11]
 800fdb6:	2b21      	cmp	r3, #33	@ 0x21
 800fdb8:	d002      	beq.n	800fdc0 <I2C_ITSlaveCplt+0x38>
 800fdba:	7afb      	ldrb	r3, [r7, #11]
 800fdbc:	2b29      	cmp	r3, #41	@ 0x29
 800fdbe:	d108      	bne.n	800fdd2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800fdc0:	f248 0101 	movw	r1, #32769	@ 0x8001
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f000 fe59 	bl	8010a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2221      	movs	r2, #33	@ 0x21
 800fdce:	631a      	str	r2, [r3, #48]	@ 0x30
 800fdd0:	e019      	b.n	800fe06 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fdd2:	7afb      	ldrb	r3, [r7, #11]
 800fdd4:	2b22      	cmp	r3, #34	@ 0x22
 800fdd6:	d002      	beq.n	800fdde <I2C_ITSlaveCplt+0x56>
 800fdd8:	7afb      	ldrb	r3, [r7, #11]
 800fdda:	2b2a      	cmp	r3, #42	@ 0x2a
 800fddc:	d108      	bne.n	800fdf0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800fdde:	f248 0102 	movw	r1, #32770	@ 0x8002
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 fe4a 	bl	8010a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2222      	movs	r2, #34	@ 0x22
 800fdec:	631a      	str	r2, [r3, #48]	@ 0x30
 800fdee:	e00a      	b.n	800fe06 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800fdf0:	7afb      	ldrb	r3, [r7, #11]
 800fdf2:	2b28      	cmp	r3, #40	@ 0x28
 800fdf4:	d107      	bne.n	800fe06 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800fdf6:	f248 0103 	movw	r1, #32771	@ 0x8003
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 fe3e 	bl	8010a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	685a      	ldr	r2, [r3, #4]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fe14:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	6859      	ldr	r1, [r3, #4]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	4b7f      	ldr	r3, [pc, #508]	@ (8010020 <I2C_ITSlaveCplt+0x298>)
 800fe22:	400b      	ands	r3, r1
 800fe24:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 fb6d 	bl	8010506 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d07a      	beq.n	800ff2c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fe44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	f000 8111 	beq.w	8010072 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a73      	ldr	r2, [pc, #460]	@ (8010024 <I2C_ITSlaveCplt+0x29c>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d059      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4a71      	ldr	r2, [pc, #452]	@ (8010028 <I2C_ITSlaveCplt+0x2a0>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d053      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a6f      	ldr	r2, [pc, #444]	@ (801002c <I2C_ITSlaveCplt+0x2a4>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d04d      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a6d      	ldr	r2, [pc, #436]	@ (8010030 <I2C_ITSlaveCplt+0x2a8>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d047      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4a6b      	ldr	r2, [pc, #428]	@ (8010034 <I2C_ITSlaveCplt+0x2ac>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d041      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a69      	ldr	r2, [pc, #420]	@ (8010038 <I2C_ITSlaveCplt+0x2b0>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d03b      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4a67      	ldr	r2, [pc, #412]	@ (801003c <I2C_ITSlaveCplt+0x2b4>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d035      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a65      	ldr	r2, [pc, #404]	@ (8010040 <I2C_ITSlaveCplt+0x2b8>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d02f      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a63      	ldr	r2, [pc, #396]	@ (8010044 <I2C_ITSlaveCplt+0x2bc>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d029      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4a61      	ldr	r2, [pc, #388]	@ (8010048 <I2C_ITSlaveCplt+0x2c0>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d023      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a5f      	ldr	r2, [pc, #380]	@ (801004c <I2C_ITSlaveCplt+0x2c4>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d01d      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a5d      	ldr	r2, [pc, #372]	@ (8010050 <I2C_ITSlaveCplt+0x2c8>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d017      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a5b      	ldr	r2, [pc, #364]	@ (8010054 <I2C_ITSlaveCplt+0x2cc>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d011      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	4a59      	ldr	r2, [pc, #356]	@ (8010058 <I2C_ITSlaveCplt+0x2d0>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d00b      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	4a57      	ldr	r2, [pc, #348]	@ (801005c <I2C_ITSlaveCplt+0x2d4>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d005      	beq.n	800ff10 <I2C_ITSlaveCplt+0x188>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4a55      	ldr	r2, [pc, #340]	@ (8010060 <I2C_ITSlaveCplt+0x2d8>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d105      	bne.n	800ff1c <I2C_ITSlaveCplt+0x194>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	e004      	b.n	800ff26 <I2C_ITSlaveCplt+0x19e>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800ff2a:	e0a2      	b.n	8010072 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f000 809d 	beq.w	8010072 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ff46:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f000 8090 	beq.w	8010072 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4a32      	ldr	r2, [pc, #200]	@ (8010024 <I2C_ITSlaveCplt+0x29c>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d059      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a30      	ldr	r2, [pc, #192]	@ (8010028 <I2C_ITSlaveCplt+0x2a0>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d053      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a2e      	ldr	r2, [pc, #184]	@ (801002c <I2C_ITSlaveCplt+0x2a4>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d04d      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4a2c      	ldr	r2, [pc, #176]	@ (8010030 <I2C_ITSlaveCplt+0x2a8>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d047      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a2a      	ldr	r2, [pc, #168]	@ (8010034 <I2C_ITSlaveCplt+0x2ac>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d041      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a28      	ldr	r2, [pc, #160]	@ (8010038 <I2C_ITSlaveCplt+0x2b0>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d03b      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4a26      	ldr	r2, [pc, #152]	@ (801003c <I2C_ITSlaveCplt+0x2b4>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d035      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a24      	ldr	r2, [pc, #144]	@ (8010040 <I2C_ITSlaveCplt+0x2b8>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d02f      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a22      	ldr	r2, [pc, #136]	@ (8010044 <I2C_ITSlaveCplt+0x2bc>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d029      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a20      	ldr	r2, [pc, #128]	@ (8010048 <I2C_ITSlaveCplt+0x2c0>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d023      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4a1e      	ldr	r2, [pc, #120]	@ (801004c <I2C_ITSlaveCplt+0x2c4>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d01d      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a1c      	ldr	r2, [pc, #112]	@ (8010050 <I2C_ITSlaveCplt+0x2c8>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d017      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4a1a      	ldr	r2, [pc, #104]	@ (8010054 <I2C_ITSlaveCplt+0x2cc>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d011      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a18      	ldr	r2, [pc, #96]	@ (8010058 <I2C_ITSlaveCplt+0x2d0>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d00b      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a16      	ldr	r2, [pc, #88]	@ (801005c <I2C_ITSlaveCplt+0x2d4>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d005      	beq.n	8010012 <I2C_ITSlaveCplt+0x28a>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a14      	ldr	r2, [pc, #80]	@ (8010060 <I2C_ITSlaveCplt+0x2d8>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d128      	bne.n	8010064 <I2C_ITSlaveCplt+0x2dc>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	b29b      	uxth	r3, r3
 801001c:	e027      	b.n	801006e <I2C_ITSlaveCplt+0x2e6>
 801001e:	bf00      	nop
 8010020:	fe00e800 	.word	0xfe00e800
 8010024:	40020010 	.word	0x40020010
 8010028:	40020028 	.word	0x40020028
 801002c:	40020040 	.word	0x40020040
 8010030:	40020058 	.word	0x40020058
 8010034:	40020070 	.word	0x40020070
 8010038:	40020088 	.word	0x40020088
 801003c:	400200a0 	.word	0x400200a0
 8010040:	400200b8 	.word	0x400200b8
 8010044:	40020410 	.word	0x40020410
 8010048:	40020428 	.word	0x40020428
 801004c:	40020440 	.word	0x40020440
 8010050:	40020458 	.word	0x40020458
 8010054:	40020470 	.word	0x40020470
 8010058:	40020488 	.word	0x40020488
 801005c:	400204a0 	.word	0x400204a0
 8010060:	400204b8 	.word	0x400204b8
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	b29b      	uxth	r3, r3
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	f003 0304 	and.w	r3, r3, #4
 8010078:	2b00      	cmp	r3, #0
 801007a:	d020      	beq.n	80100be <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	f023 0304 	bic.w	r3, r3, #4
 8010082:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801008e:	b2d2      	uxtb	r2, r2
 8010090:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010096:	1c5a      	adds	r2, r3, #1
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d00c      	beq.n	80100be <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100a8:	3b01      	subs	r3, #1
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	3b01      	subs	r3, #1
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d005      	beq.n	80100d4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100cc:	f043 0204 	orr.w	r2, r3, #4
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	f003 0310 	and.w	r3, r3, #16
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d049      	beq.n	8010172 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d044      	beq.n	8010172 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d128      	bne.n	8010144 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	2b28      	cmp	r3, #40	@ 0x28
 80100fc:	d108      	bne.n	8010110 <I2C_ITSlaveCplt+0x388>
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010104:	d104      	bne.n	8010110 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8010106:	6979      	ldr	r1, [r7, #20]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 f891 	bl	8010230 <I2C_ITListenCplt>
 801010e:	e030      	b.n	8010172 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010116:	b2db      	uxtb	r3, r3
 8010118:	2b29      	cmp	r3, #41	@ 0x29
 801011a:	d10e      	bne.n	801013a <I2C_ITSlaveCplt+0x3b2>
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010122:	d00a      	beq.n	801013a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2210      	movs	r2, #16
 801012a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f000 f9ea 	bl	8010506 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f7ff fd03 	bl	800fb3e <I2C_ITSlaveSeqCplt>
 8010138:	e01b      	b.n	8010172 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	2210      	movs	r2, #16
 8010140:	61da      	str	r2, [r3, #28]
 8010142:	e016      	b.n	8010172 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2210      	movs	r2, #16
 801014a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010150:	f043 0204 	orr.w	r2, r3, #4
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d003      	beq.n	8010166 <I2C_ITSlaveCplt+0x3de>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010164:	d105      	bne.n	8010172 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801016a:	4619      	mov	r1, r3
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 f8b3 	bl	80102d8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010184:	2b00      	cmp	r3, #0
 8010186:	d010      	beq.n	80101aa <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801018c:	4619      	mov	r1, r3
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 f8a2 	bl	80102d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801019a:	b2db      	uxtb	r3, r3
 801019c:	2b28      	cmp	r3, #40	@ 0x28
 801019e:	d141      	bne.n	8010224 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80101a0:	6979      	ldr	r1, [r7, #20]
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 f844 	bl	8010230 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80101a8:	e03c      	b.n	8010224 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80101b2:	d014      	beq.n	80101de <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f7ff fcc2 	bl	800fb3e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	4a1b      	ldr	r2, [pc, #108]	@ (801022c <I2C_ITSlaveCplt+0x4a4>)
 80101be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2220      	movs	r2, #32
 80101c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2200      	movs	r2, #0
 80101cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7fe fd16 	bl	800ec08 <HAL_I2C_ListenCpltCallback>
}
 80101dc:	e022      	b.n	8010224 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	2b22      	cmp	r3, #34	@ 0x22
 80101e8:	d10e      	bne.n	8010208 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2220      	movs	r2, #32
 80101ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f7fe fce9 	bl	800ebd8 <HAL_I2C_SlaveRxCpltCallback>
}
 8010206:	e00d      	b.n	8010224 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2220      	movs	r2, #32
 801020c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f7fe fcd0 	bl	800ebc4 <HAL_I2C_SlaveTxCpltCallback>
}
 8010224:	bf00      	nop
 8010226:	3718      	adds	r7, #24
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}
 801022c:	ffff0000 	.word	0xffff0000

08010230 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a25      	ldr	r2, [pc, #148]	@ (80102d4 <I2C_ITListenCplt+0xa4>)
 801023e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2200      	movs	r2, #0
 8010244:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2220      	movs	r2, #32
 801024a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2200      	movs	r2, #0
 8010252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	f003 0304 	and.w	r3, r3, #4
 8010262:	2b00      	cmp	r3, #0
 8010264:	d022      	beq.n	80102ac <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010270:	b2d2      	uxtb	r2, r2
 8010272:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010278:	1c5a      	adds	r2, r3, #1
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010282:	2b00      	cmp	r3, #0
 8010284:	d012      	beq.n	80102ac <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801028a:	3b01      	subs	r3, #1
 801028c:	b29a      	uxth	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010296:	b29b      	uxth	r3, r3
 8010298:	3b01      	subs	r3, #1
 801029a:	b29a      	uxth	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102a4:	f043 0204 	orr.w	r2, r3, #4
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80102ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 fbe3 	bl	8010a7c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2210      	movs	r2, #16
 80102bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f7fe fc9e 	bl	800ec08 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80102cc:	bf00      	nop
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	ffff0000 	.word	0xffff0000

080102d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102e8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a6d      	ldr	r2, [pc, #436]	@ (80104ac <I2C_ITError+0x1d4>)
 80102f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	431a      	orrs	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801030a:	7bfb      	ldrb	r3, [r7, #15]
 801030c:	2b28      	cmp	r3, #40	@ 0x28
 801030e:	d005      	beq.n	801031c <I2C_ITError+0x44>
 8010310:	7bfb      	ldrb	r3, [r7, #15]
 8010312:	2b29      	cmp	r3, #41	@ 0x29
 8010314:	d002      	beq.n	801031c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010316:	7bfb      	ldrb	r3, [r7, #15]
 8010318:	2b2a      	cmp	r3, #42	@ 0x2a
 801031a:	d10b      	bne.n	8010334 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801031c:	2103      	movs	r1, #3
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 fbac 	bl	8010a7c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2228      	movs	r2, #40	@ 0x28
 8010328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	4a60      	ldr	r2, [pc, #384]	@ (80104b0 <I2C_ITError+0x1d8>)
 8010330:	635a      	str	r2, [r3, #52]	@ 0x34
 8010332:	e030      	b.n	8010396 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010334:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 fb9f 	bl	8010a7c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 f8e1 	bl	8010506 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801034a:	b2db      	uxtb	r3, r3
 801034c:	2b60      	cmp	r3, #96	@ 0x60
 801034e:	d01f      	beq.n	8010390 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2220      	movs	r2, #32
 8010354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	f003 0320 	and.w	r3, r3, #32
 8010362:	2b20      	cmp	r3, #32
 8010364:	d114      	bne.n	8010390 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	699b      	ldr	r3, [r3, #24]
 801036c:	f003 0310 	and.w	r3, r3, #16
 8010370:	2b10      	cmp	r3, #16
 8010372:	d109      	bne.n	8010388 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2210      	movs	r2, #16
 801037a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010380:	f043 0204 	orr.w	r2, r3, #4
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2220      	movs	r2, #32
 801038e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801039a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d039      	beq.n	8010418 <I2C_ITError+0x140>
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	2b11      	cmp	r3, #17
 80103a8:	d002      	beq.n	80103b0 <I2C_ITError+0xd8>
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	2b21      	cmp	r3, #33	@ 0x21
 80103ae:	d133      	bne.n	8010418 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80103ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80103be:	d107      	bne.n	80103d0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80103ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7fd f9f7 	bl	800d7c8 <HAL_DMA_GetState>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d017      	beq.n	8010410 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e4:	4a33      	ldr	r2, [pc, #204]	@ (80104b4 <I2C_ITError+0x1dc>)
 80103e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fc f877 	bl	800c4e8 <HAL_DMA_Abort_IT>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d04d      	beq.n	801049c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801040a:	4610      	mov	r0, r2
 801040c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801040e:	e045      	b.n	801049c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f000 f851 	bl	80104b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010416:	e041      	b.n	801049c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801041c:	2b00      	cmp	r3, #0
 801041e:	d039      	beq.n	8010494 <I2C_ITError+0x1bc>
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	2b12      	cmp	r3, #18
 8010424:	d002      	beq.n	801042c <I2C_ITError+0x154>
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	2b22      	cmp	r3, #34	@ 0x22
 801042a:	d133      	bne.n	8010494 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801043a:	d107      	bne.n	801044c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801044a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010450:	4618      	mov	r0, r3
 8010452:	f7fd f9b9 	bl	800d7c8 <HAL_DMA_GetState>
 8010456:	4603      	mov	r3, r0
 8010458:	2b01      	cmp	r3, #1
 801045a:	d017      	beq.n	801048c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010460:	4a14      	ldr	r2, [pc, #80]	@ (80104b4 <I2C_ITError+0x1dc>)
 8010462:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010470:	4618      	mov	r0, r3
 8010472:	f7fc f839 	bl	800c4e8 <HAL_DMA_Abort_IT>
 8010476:	4603      	mov	r3, r0
 8010478:	2b00      	cmp	r3, #0
 801047a:	d011      	beq.n	80104a0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010486:	4610      	mov	r0, r2
 8010488:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801048a:	e009      	b.n	80104a0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 f813 	bl	80104b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010492:	e005      	b.n	80104a0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f000 f80f 	bl	80104b8 <I2C_TreatErrorCallback>
  }
}
 801049a:	e002      	b.n	80104a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801049c:	bf00      	nop
 801049e:	e000      	b.n	80104a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104a0:	bf00      	nop
}
 80104a2:	bf00      	nop
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	ffff0000 	.word	0xffff0000
 80104b0:	0800eea5 	.word	0x0800eea5
 80104b4:	0801054f 	.word	0x0801054f

080104b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	2b60      	cmp	r3, #96	@ 0x60
 80104ca:	d10e      	bne.n	80104ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2220      	movs	r2, #32
 80104d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2200      	movs	r2, #0
 80104de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f7fe fbae 	bl	800ec44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80104e8:	e009      	b.n	80104fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2200      	movs	r2, #0
 80104ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7fe fb99 	bl	800ec30 <HAL_I2C_ErrorCallback>
}
 80104fe:	bf00      	nop
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010506:	b480      	push	{r7}
 8010508:	b083      	sub	sp, #12
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	699b      	ldr	r3, [r3, #24]
 8010514:	f003 0302 	and.w	r3, r3, #2
 8010518:	2b02      	cmp	r3, #2
 801051a:	d103      	bne.n	8010524 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2200      	movs	r2, #0
 8010522:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	699b      	ldr	r3, [r3, #24]
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	2b01      	cmp	r3, #1
 8010530:	d007      	beq.n	8010542 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	699a      	ldr	r2, [r3, #24]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f042 0201 	orr.w	r2, r2, #1
 8010540:	619a      	str	r2, [r3, #24]
  }
}
 8010542:	bf00      	nop
 8010544:	370c      	adds	r7, #12
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr

0801054e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801054e:	b580      	push	{r7, lr}
 8010550:	b084      	sub	sp, #16
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801055a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010560:	2b00      	cmp	r3, #0
 8010562:	d003      	beq.n	801056c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010568:	2200      	movs	r2, #0
 801056a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010570:	2b00      	cmp	r3, #0
 8010572:	d003      	beq.n	801057c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010578:	2200      	movs	r2, #0
 801057a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f7ff ff9b 	bl	80104b8 <I2C_TreatErrorCallback>
}
 8010582:	bf00      	nop
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b084      	sub	sp, #16
 801058e:	af00      	add	r7, sp, #0
 8010590:	60f8      	str	r0, [r7, #12]
 8010592:	60b9      	str	r1, [r7, #8]
 8010594:	603b      	str	r3, [r7, #0]
 8010596:	4613      	mov	r3, r2
 8010598:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801059a:	e03b      	b.n	8010614 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801059c:	69ba      	ldr	r2, [r7, #24]
 801059e:	6839      	ldr	r1, [r7, #0]
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f000 f8d5 	bl	8010750 <I2C_IsErrorOccurred>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d001      	beq.n	80105b0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80105ac:	2301      	movs	r3, #1
 80105ae:	e041      	b.n	8010634 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b6:	d02d      	beq.n	8010614 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105b8:	f7f8 fd80 	bl	80090bc <HAL_GetTick>
 80105bc:	4602      	mov	r2, r0
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	1ad3      	subs	r3, r2, r3
 80105c2:	683a      	ldr	r2, [r7, #0]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d302      	bcc.n	80105ce <I2C_WaitOnFlagUntilTimeout+0x44>
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d122      	bne.n	8010614 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	699a      	ldr	r2, [r3, #24]
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	4013      	ands	r3, r2
 80105d8:	68ba      	ldr	r2, [r7, #8]
 80105da:	429a      	cmp	r2, r3
 80105dc:	bf0c      	ite	eq
 80105de:	2301      	moveq	r3, #1
 80105e0:	2300      	movne	r3, #0
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	461a      	mov	r2, r3
 80105e6:	79fb      	ldrb	r3, [r7, #7]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d113      	bne.n	8010614 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105f0:	f043 0220 	orr.w	r2, r3, #32
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2220      	movs	r2, #32
 80105fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2200      	movs	r2, #0
 8010604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2200      	movs	r2, #0
 801060c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010610:	2301      	movs	r3, #1
 8010612:	e00f      	b.n	8010634 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	699a      	ldr	r2, [r3, #24]
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	4013      	ands	r3, r2
 801061e:	68ba      	ldr	r2, [r7, #8]
 8010620:	429a      	cmp	r2, r3
 8010622:	bf0c      	ite	eq
 8010624:	2301      	moveq	r3, #1
 8010626:	2300      	movne	r3, #0
 8010628:	b2db      	uxtb	r3, r3
 801062a:	461a      	mov	r2, r3
 801062c:	79fb      	ldrb	r3, [r7, #7]
 801062e:	429a      	cmp	r2, r3
 8010630:	d0b4      	beq.n	801059c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010648:	e033      	b.n	80106b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	68b9      	ldr	r1, [r7, #8]
 801064e:	68f8      	ldr	r0, [r7, #12]
 8010650:	f000 f87e 	bl	8010750 <I2C_IsErrorOccurred>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d001      	beq.n	801065e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801065a:	2301      	movs	r3, #1
 801065c:	e031      	b.n	80106c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010664:	d025      	beq.n	80106b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010666:	f7f8 fd29 	bl	80090bc <HAL_GetTick>
 801066a:	4602      	mov	r2, r0
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	1ad3      	subs	r3, r2, r3
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	429a      	cmp	r2, r3
 8010674:	d302      	bcc.n	801067c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d11a      	bne.n	80106b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	699b      	ldr	r3, [r3, #24]
 8010682:	f003 0302 	and.w	r3, r3, #2
 8010686:	2b02      	cmp	r3, #2
 8010688:	d013      	beq.n	80106b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801068e:	f043 0220 	orr.w	r2, r3, #32
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2220      	movs	r2, #32
 801069a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e007      	b.n	80106c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	699b      	ldr	r3, [r3, #24]
 80106b8:	f003 0302 	and.w	r3, r3, #2
 80106bc:	2b02      	cmp	r3, #2
 80106be:	d1c4      	bne.n	801064a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b084      	sub	sp, #16
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	60f8      	str	r0, [r7, #12]
 80106d2:	60b9      	str	r1, [r7, #8]
 80106d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80106d6:	e02f      	b.n	8010738 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	68b9      	ldr	r1, [r7, #8]
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	f000 f837 	bl	8010750 <I2C_IsErrorOccurred>
 80106e2:	4603      	mov	r3, r0
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d001      	beq.n	80106ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80106e8:	2301      	movs	r3, #1
 80106ea:	e02d      	b.n	8010748 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106ec:	f7f8 fce6 	bl	80090bc <HAL_GetTick>
 80106f0:	4602      	mov	r2, r0
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d302      	bcc.n	8010702 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d11a      	bne.n	8010738 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	f003 0320 	and.w	r3, r3, #32
 801070c:	2b20      	cmp	r3, #32
 801070e:	d013      	beq.n	8010738 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010714:	f043 0220 	orr.w	r2, r3, #32
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2220      	movs	r2, #32
 8010720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2200      	movs	r2, #0
 8010728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2200      	movs	r2, #0
 8010730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010734:	2301      	movs	r3, #1
 8010736:	e007      	b.n	8010748 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	699b      	ldr	r3, [r3, #24]
 801073e:	f003 0320 	and.w	r3, r3, #32
 8010742:	2b20      	cmp	r3, #32
 8010744:	d1c8      	bne.n	80106d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3710      	adds	r7, #16
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b08a      	sub	sp, #40	@ 0x28
 8010754:	af00      	add	r7, sp, #0
 8010756:	60f8      	str	r0, [r7, #12]
 8010758:	60b9      	str	r1, [r7, #8]
 801075a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801075c:	2300      	movs	r3, #0
 801075e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	699b      	ldr	r3, [r3, #24]
 8010768:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801076a:	2300      	movs	r3, #0
 801076c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010772:	69bb      	ldr	r3, [r7, #24]
 8010774:	f003 0310 	and.w	r3, r3, #16
 8010778:	2b00      	cmp	r3, #0
 801077a:	d068      	beq.n	801084e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2210      	movs	r2, #16
 8010782:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010784:	e049      	b.n	801081a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801078c:	d045      	beq.n	801081a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801078e:	f7f8 fc95 	bl	80090bc <HAL_GetTick>
 8010792:	4602      	mov	r2, r0
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	429a      	cmp	r2, r3
 801079c:	d302      	bcc.n	80107a4 <I2C_IsErrorOccurred+0x54>
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d13a      	bne.n	801081a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80107b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80107c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80107c6:	d121      	bne.n	801080c <I2C_IsErrorOccurred+0xbc>
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80107ce:	d01d      	beq.n	801080c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80107d0:	7cfb      	ldrb	r3, [r7, #19]
 80107d2:	2b20      	cmp	r3, #32
 80107d4:	d01a      	beq.n	801080c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	685a      	ldr	r2, [r3, #4]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80107e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80107e6:	f7f8 fc69 	bl	80090bc <HAL_GetTick>
 80107ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80107ec:	e00e      	b.n	801080c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80107ee:	f7f8 fc65 	bl	80090bc <HAL_GetTick>
 80107f2:	4602      	mov	r2, r0
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	2b19      	cmp	r3, #25
 80107fa:	d907      	bls.n	801080c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80107fc:	6a3b      	ldr	r3, [r7, #32]
 80107fe:	f043 0320 	orr.w	r3, r3, #32
 8010802:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010804:	2301      	movs	r3, #1
 8010806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801080a:	e006      	b.n	801081a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	699b      	ldr	r3, [r3, #24]
 8010812:	f003 0320 	and.w	r3, r3, #32
 8010816:	2b20      	cmp	r3, #32
 8010818:	d1e9      	bne.n	80107ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	699b      	ldr	r3, [r3, #24]
 8010820:	f003 0320 	and.w	r3, r3, #32
 8010824:	2b20      	cmp	r3, #32
 8010826:	d003      	beq.n	8010830 <I2C_IsErrorOccurred+0xe0>
 8010828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801082c:	2b00      	cmp	r3, #0
 801082e:	d0aa      	beq.n	8010786 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	2220      	movs	r2, #32
 801083e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010840:	6a3b      	ldr	r3, [r7, #32]
 8010842:	f043 0304 	orr.w	r3, r3, #4
 8010846:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010848:	2301      	movs	r3, #1
 801084a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	699b      	ldr	r3, [r3, #24]
 8010854:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010856:	69bb      	ldr	r3, [r7, #24]
 8010858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00b      	beq.n	8010878 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010860:	6a3b      	ldr	r3, [r7, #32]
 8010862:	f043 0301 	orr.w	r3, r3, #1
 8010866:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010870:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010872:	2301      	movs	r3, #1
 8010874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00b      	beq.n	801089a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010882:	6a3b      	ldr	r3, [r7, #32]
 8010884:	f043 0308 	orr.w	r3, r3, #8
 8010888:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010892:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010894:	2301      	movs	r3, #1
 8010896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00b      	beq.n	80108bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80108a4:	6a3b      	ldr	r3, [r7, #32]
 80108a6:	f043 0302 	orr.w	r3, r3, #2
 80108aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80108bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d01c      	beq.n	80108fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80108c4:	68f8      	ldr	r0, [r7, #12]
 80108c6:	f7ff fe1e 	bl	8010506 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	6859      	ldr	r1, [r3, #4]
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	4b0d      	ldr	r3, [pc, #52]	@ (801090c <I2C_IsErrorOccurred+0x1bc>)
 80108d6:	400b      	ands	r3, r1
 80108d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	431a      	orrs	r2, r3
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2220      	movs	r2, #32
 80108ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2200      	movs	r2, #0
 80108f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80108fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010902:	4618      	mov	r0, r3
 8010904:	3728      	adds	r7, #40	@ 0x28
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	fe00e800 	.word	0xfe00e800

08010910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010910:	b480      	push	{r7}
 8010912:	b087      	sub	sp, #28
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	607b      	str	r3, [r7, #4]
 801091a:	460b      	mov	r3, r1
 801091c:	817b      	strh	r3, [r7, #10]
 801091e:	4613      	mov	r3, r2
 8010920:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010922:	897b      	ldrh	r3, [r7, #10]
 8010924:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010928:	7a7b      	ldrb	r3, [r7, #9]
 801092a:	041b      	lsls	r3, r3, #16
 801092c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010930:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010936:	6a3b      	ldr	r3, [r7, #32]
 8010938:	4313      	orrs	r3, r2
 801093a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801093e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	685a      	ldr	r2, [r3, #4]
 8010946:	6a3b      	ldr	r3, [r7, #32]
 8010948:	0d5b      	lsrs	r3, r3, #21
 801094a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 801094e:	4b08      	ldr	r3, [pc, #32]	@ (8010970 <I2C_TransferConfig+0x60>)
 8010950:	430b      	orrs	r3, r1
 8010952:	43db      	mvns	r3, r3
 8010954:	ea02 0103 	and.w	r1, r2, r3
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	697a      	ldr	r2, [r7, #20]
 801095e:	430a      	orrs	r2, r1
 8010960:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010962:	bf00      	nop
 8010964:	371c      	adds	r7, #28
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	03ff63ff 	.word	0x03ff63ff

08010974 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	460b      	mov	r3, r1
 801097e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010980:	2300      	movs	r3, #0
 8010982:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010988:	4a39      	ldr	r2, [pc, #228]	@ (8010a70 <I2C_Enable_IRQ+0xfc>)
 801098a:	4293      	cmp	r3, r2
 801098c:	d032      	beq.n	80109f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010992:	4a38      	ldr	r2, [pc, #224]	@ (8010a74 <I2C_Enable_IRQ+0x100>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d02d      	beq.n	80109f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801099c:	4a36      	ldr	r2, [pc, #216]	@ (8010a78 <I2C_Enable_IRQ+0x104>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d028      	beq.n	80109f4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80109a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	da03      	bge.n	80109b2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80109b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80109b2:	887b      	ldrh	r3, [r7, #2]
 80109b4:	f003 0301 	and.w	r3, r3, #1
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d003      	beq.n	80109c4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80109c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80109c4:	887b      	ldrh	r3, [r7, #2]
 80109c6:	f003 0302 	and.w	r3, r3, #2
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d003      	beq.n	80109d6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80109d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80109d6:	887b      	ldrh	r3, [r7, #2]
 80109d8:	2b10      	cmp	r3, #16
 80109da:	d103      	bne.n	80109e4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80109e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80109e4:	887b      	ldrh	r3, [r7, #2]
 80109e6:	2b20      	cmp	r3, #32
 80109e8:	d133      	bne.n	8010a52 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f043 0320 	orr.w	r3, r3, #32
 80109f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80109f2:	e02e      	b.n	8010a52 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80109f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	da03      	bge.n	8010a04 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010a02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010a04:	887b      	ldrh	r3, [r7, #2]
 8010a06:	f003 0301 	and.w	r3, r3, #1
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d003      	beq.n	8010a16 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010a14:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010a16:	887b      	ldrh	r3, [r7, #2]
 8010a18:	f003 0302 	and.w	r3, r3, #2
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d003      	beq.n	8010a28 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010a26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010a28:	887b      	ldrh	r3, [r7, #2]
 8010a2a:	2b10      	cmp	r3, #16
 8010a2c:	d103      	bne.n	8010a36 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010a34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010a36:	887b      	ldrh	r3, [r7, #2]
 8010a38:	2b20      	cmp	r3, #32
 8010a3a:	d103      	bne.n	8010a44 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010a42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010a44:	887b      	ldrh	r3, [r7, #2]
 8010a46:	2b40      	cmp	r3, #64	@ 0x40
 8010a48:	d103      	bne.n	8010a52 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a50:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	6819      	ldr	r1, [r3, #0]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	430a      	orrs	r2, r1
 8010a60:	601a      	str	r2, [r3, #0]
}
 8010a62:	bf00      	nop
 8010a64:	3714      	adds	r7, #20
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	0800f097 	.word	0x0800f097
 8010a74:	0800f4b9 	.word	0x0800f4b9
 8010a78:	0800f26d 	.word	0x0800f26d

08010a7c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	460b      	mov	r3, r1
 8010a86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010a8c:	887b      	ldrh	r3, [r7, #2]
 8010a8e:	f003 0301 	and.w	r3, r3, #1
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d00f      	beq.n	8010ab6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010a9c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010aaa:	2b28      	cmp	r3, #40	@ 0x28
 8010aac:	d003      	beq.n	8010ab6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010ab4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010ab6:	887b      	ldrh	r3, [r7, #2]
 8010ab8:	f003 0302 	and.w	r3, r3, #2
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d00f      	beq.n	8010ae0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010ac6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010ad4:	2b28      	cmp	r3, #40	@ 0x28
 8010ad6:	d003      	beq.n	8010ae0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010ade:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010ae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	da03      	bge.n	8010af0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010aee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010af0:	887b      	ldrh	r3, [r7, #2]
 8010af2:	2b10      	cmp	r3, #16
 8010af4:	d103      	bne.n	8010afe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010afc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010afe:	887b      	ldrh	r3, [r7, #2]
 8010b00:	2b20      	cmp	r3, #32
 8010b02:	d103      	bne.n	8010b0c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f043 0320 	orr.w	r3, r3, #32
 8010b0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010b0c:	887b      	ldrh	r3, [r7, #2]
 8010b0e:	2b40      	cmp	r3, #64	@ 0x40
 8010b10:	d103      	bne.n	8010b1a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b18:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	6819      	ldr	r1, [r3, #0]
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	43da      	mvns	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	400a      	ands	r2, r1
 8010b2a:	601a      	str	r2, [r3, #0]
}
 8010b2c:	bf00      	nop
 8010b2e:	3714      	adds	r7, #20
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	2b20      	cmp	r3, #32
 8010b4c:	d138      	bne.n	8010bc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d101      	bne.n	8010b5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010b58:	2302      	movs	r3, #2
 8010b5a:	e032      	b.n	8010bc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2201      	movs	r2, #1
 8010b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2224      	movs	r2, #36	@ 0x24
 8010b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f022 0201 	bic.w	r2, r2, #1
 8010b7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010b8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	6819      	ldr	r1, [r3, #0]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	683a      	ldr	r2, [r7, #0]
 8010b98:	430a      	orrs	r2, r1
 8010b9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f042 0201 	orr.w	r2, r2, #1
 8010baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2220      	movs	r2, #32
 8010bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	e000      	b.n	8010bc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010bc0:	2302      	movs	r3, #2
  }
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	370c      	adds	r7, #12
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr

08010bce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010bce:	b480      	push	{r7}
 8010bd0:	b085      	sub	sp, #20
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	2b20      	cmp	r3, #32
 8010be2:	d139      	bne.n	8010c58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d101      	bne.n	8010bf2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010bee:	2302      	movs	r3, #2
 8010bf0:	e033      	b.n	8010c5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2224      	movs	r2, #36	@ 0x24
 8010bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f022 0201 	bic.w	r2, r2, #1
 8010c10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010c20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	021b      	lsls	r3, r3, #8
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	68fa      	ldr	r2, [r7, #12]
 8010c32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f042 0201 	orr.w	r2, r2, #1
 8010c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2220      	movs	r2, #32
 8010c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010c54:	2300      	movs	r3, #0
 8010c56:	e000      	b.n	8010c5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010c58:	2302      	movs	r3, #2
  }
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3714      	adds	r7, #20
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
	...

08010c68 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b085      	sub	sp, #20
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c70:	4b0d      	ldr	r3, [pc, #52]	@ (8010ca8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010c76:	4a0c      	ldr	r2, [pc, #48]	@ (8010ca8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010c78:	f043 0302 	orr.w	r3, r3, #2
 8010c7c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010c80:	4b09      	ldr	r3, [pc, #36]	@ (8010ca8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010c86:	f003 0302 	and.w	r3, r3, #2
 8010c8a:	60fb      	str	r3, [r7, #12]
 8010c8c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8010c8e:	4b07      	ldr	r3, [pc, #28]	@ (8010cac <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010c90:	685a      	ldr	r2, [r3, #4]
 8010c92:	4906      	ldr	r1, [pc, #24]	@ (8010cac <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	604b      	str	r3, [r1, #4]
}
 8010c9a:	bf00      	nop
 8010c9c:	3714      	adds	r7, #20
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr
 8010ca6:	bf00      	nop
 8010ca8:	58024400 	.word	0x58024400
 8010cac:	58000400 	.word	0x58000400

08010cb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010cb8:	4b19      	ldr	r3, [pc, #100]	@ (8010d20 <HAL_PWREx_ConfigSupply+0x70>)
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	f003 0304 	and.w	r3, r3, #4
 8010cc0:	2b04      	cmp	r3, #4
 8010cc2:	d00a      	beq.n	8010cda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010cc4:	4b16      	ldr	r3, [pc, #88]	@ (8010d20 <HAL_PWREx_ConfigSupply+0x70>)
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	f003 0307 	and.w	r3, r3, #7
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d001      	beq.n	8010cd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	e01f      	b.n	8010d16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	e01d      	b.n	8010d16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010cda:	4b11      	ldr	r3, [pc, #68]	@ (8010d20 <HAL_PWREx_ConfigSupply+0x70>)
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	f023 0207 	bic.w	r2, r3, #7
 8010ce2:	490f      	ldr	r1, [pc, #60]	@ (8010d20 <HAL_PWREx_ConfigSupply+0x70>)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	4313      	orrs	r3, r2
 8010ce8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010cea:	f7f8 f9e7 	bl	80090bc <HAL_GetTick>
 8010cee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010cf0:	e009      	b.n	8010d06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010cf2:	f7f8 f9e3 	bl	80090bc <HAL_GetTick>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	1ad3      	subs	r3, r2, r3
 8010cfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010d00:	d901      	bls.n	8010d06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e007      	b.n	8010d16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010d06:	4b06      	ldr	r3, [pc, #24]	@ (8010d20 <HAL_PWREx_ConfigSupply+0x70>)
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010d12:	d1ee      	bne.n	8010cf2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3710      	adds	r7, #16
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	58024800 	.word	0x58024800

08010d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b08c      	sub	sp, #48	@ 0x30
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d101      	bne.n	8010d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010d32:	2301      	movs	r3, #1
 8010d34:	e3c8      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f003 0301 	and.w	r3, r3, #1
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	f000 8087 	beq.w	8010e52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010d44:	4b88      	ldr	r3, [pc, #544]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010d4e:	4b86      	ldr	r3, [pc, #536]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d56:	2b10      	cmp	r3, #16
 8010d58:	d007      	beq.n	8010d6a <HAL_RCC_OscConfig+0x46>
 8010d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d5c:	2b18      	cmp	r3, #24
 8010d5e:	d110      	bne.n	8010d82 <HAL_RCC_OscConfig+0x5e>
 8010d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d62:	f003 0303 	and.w	r3, r3, #3
 8010d66:	2b02      	cmp	r3, #2
 8010d68:	d10b      	bne.n	8010d82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d06c      	beq.n	8010e50 <HAL_RCC_OscConfig+0x12c>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d168      	bne.n	8010e50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e3a2      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010d8a:	d106      	bne.n	8010d9a <HAL_RCC_OscConfig+0x76>
 8010d8c:	4b76      	ldr	r3, [pc, #472]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4a75      	ldr	r2, [pc, #468]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010d96:	6013      	str	r3, [r2, #0]
 8010d98:	e02e      	b.n	8010df8 <HAL_RCC_OscConfig+0xd4>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d10c      	bne.n	8010dbc <HAL_RCC_OscConfig+0x98>
 8010da2:	4b71      	ldr	r3, [pc, #452]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4a70      	ldr	r2, [pc, #448]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010dac:	6013      	str	r3, [r2, #0]
 8010dae:	4b6e      	ldr	r3, [pc, #440]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	4a6d      	ldr	r2, [pc, #436]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010db4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010db8:	6013      	str	r3, [r2, #0]
 8010dba:	e01d      	b.n	8010df8 <HAL_RCC_OscConfig+0xd4>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010dc4:	d10c      	bne.n	8010de0 <HAL_RCC_OscConfig+0xbc>
 8010dc6:	4b68      	ldr	r3, [pc, #416]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4a67      	ldr	r2, [pc, #412]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010dd0:	6013      	str	r3, [r2, #0]
 8010dd2:	4b65      	ldr	r3, [pc, #404]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4a64      	ldr	r2, [pc, #400]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ddc:	6013      	str	r3, [r2, #0]
 8010dde:	e00b      	b.n	8010df8 <HAL_RCC_OscConfig+0xd4>
 8010de0:	4b61      	ldr	r3, [pc, #388]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4a60      	ldr	r2, [pc, #384]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010dea:	6013      	str	r3, [r2, #0]
 8010dec:	4b5e      	ldr	r3, [pc, #376]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4a5d      	ldr	r2, [pc, #372]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d013      	beq.n	8010e28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e00:	f7f8 f95c 	bl	80090bc <HAL_GetTick>
 8010e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010e06:	e008      	b.n	8010e1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e08:	f7f8 f958 	bl	80090bc <HAL_GetTick>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e10:	1ad3      	subs	r3, r2, r3
 8010e12:	2b64      	cmp	r3, #100	@ 0x64
 8010e14:	d901      	bls.n	8010e1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010e16:	2303      	movs	r3, #3
 8010e18:	e356      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010e1a:	4b53      	ldr	r3, [pc, #332]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d0f0      	beq.n	8010e08 <HAL_RCC_OscConfig+0xe4>
 8010e26:	e014      	b.n	8010e52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e28:	f7f8 f948 	bl	80090bc <HAL_GetTick>
 8010e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010e2e:	e008      	b.n	8010e42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e30:	f7f8 f944 	bl	80090bc <HAL_GetTick>
 8010e34:	4602      	mov	r2, r0
 8010e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	2b64      	cmp	r3, #100	@ 0x64
 8010e3c:	d901      	bls.n	8010e42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010e3e:	2303      	movs	r3, #3
 8010e40:	e342      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010e42:	4b49      	ldr	r3, [pc, #292]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d1f0      	bne.n	8010e30 <HAL_RCC_OscConfig+0x10c>
 8010e4e:	e000      	b.n	8010e52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f003 0302 	and.w	r3, r3, #2
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f000 808c 	beq.w	8010f78 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010e60:	4b41      	ldr	r3, [pc, #260]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010e62:	691b      	ldr	r3, [r3, #16]
 8010e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d007      	beq.n	8010e86 <HAL_RCC_OscConfig+0x162>
 8010e76:	6a3b      	ldr	r3, [r7, #32]
 8010e78:	2b18      	cmp	r3, #24
 8010e7a:	d137      	bne.n	8010eec <HAL_RCC_OscConfig+0x1c8>
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	f003 0303 	and.w	r3, r3, #3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d132      	bne.n	8010eec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010e86:	4b38      	ldr	r3, [pc, #224]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f003 0304 	and.w	r3, r3, #4
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d005      	beq.n	8010e9e <HAL_RCC_OscConfig+0x17a>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d101      	bne.n	8010e9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e314      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010e9e:	4b32      	ldr	r3, [pc, #200]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f023 0219 	bic.w	r2, r3, #25
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	492f      	ldr	r1, [pc, #188]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010eac:	4313      	orrs	r3, r2
 8010eae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010eb0:	f7f8 f904 	bl	80090bc <HAL_GetTick>
 8010eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010eb6:	e008      	b.n	8010eca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010eb8:	f7f8 f900 	bl	80090bc <HAL_GetTick>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec0:	1ad3      	subs	r3, r2, r3
 8010ec2:	2b02      	cmp	r3, #2
 8010ec4:	d901      	bls.n	8010eca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8010ec6:	2303      	movs	r3, #3
 8010ec8:	e2fe      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010eca:	4b27      	ldr	r3, [pc, #156]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f003 0304 	and.w	r3, r3, #4
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d0f0      	beq.n	8010eb8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ed6:	4b24      	ldr	r3, [pc, #144]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	691b      	ldr	r3, [r3, #16]
 8010ee2:	061b      	lsls	r3, r3, #24
 8010ee4:	4920      	ldr	r1, [pc, #128]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010eea:	e045      	b.n	8010f78 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d026      	beq.n	8010f42 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f023 0219 	bic.w	r2, r3, #25
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	4919      	ldr	r1, [pc, #100]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010f02:	4313      	orrs	r3, r2
 8010f04:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f06:	f7f8 f8d9 	bl	80090bc <HAL_GetTick>
 8010f0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010f0c:	e008      	b.n	8010f20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f0e:	f7f8 f8d5 	bl	80090bc <HAL_GetTick>
 8010f12:	4602      	mov	r2, r0
 8010f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	2b02      	cmp	r3, #2
 8010f1a:	d901      	bls.n	8010f20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8010f1c:	2303      	movs	r3, #3
 8010f1e:	e2d3      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010f20:	4b11      	ldr	r3, [pc, #68]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f003 0304 	and.w	r3, r3, #4
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d0f0      	beq.n	8010f0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	061b      	lsls	r3, r3, #24
 8010f3a:	490b      	ldr	r1, [pc, #44]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	604b      	str	r3, [r1, #4]
 8010f40:	e01a      	b.n	8010f78 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010f42:	4b09      	ldr	r3, [pc, #36]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	4a08      	ldr	r2, [pc, #32]	@ (8010f68 <HAL_RCC_OscConfig+0x244>)
 8010f48:	f023 0301 	bic.w	r3, r3, #1
 8010f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f4e:	f7f8 f8b5 	bl	80090bc <HAL_GetTick>
 8010f52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010f54:	e00a      	b.n	8010f6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f56:	f7f8 f8b1 	bl	80090bc <HAL_GetTick>
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	2b02      	cmp	r3, #2
 8010f62:	d903      	bls.n	8010f6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8010f64:	2303      	movs	r3, #3
 8010f66:	e2af      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
 8010f68:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010f6c:	4b96      	ldr	r3, [pc, #600]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f003 0304 	and.w	r3, r3, #4
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1ee      	bne.n	8010f56 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f003 0310 	and.w	r3, r3, #16
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d06a      	beq.n	801105a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010f84:	4b90      	ldr	r3, [pc, #576]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8010f86:	691b      	ldr	r3, [r3, #16]
 8010f88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010f8c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010f8e:	4b8e      	ldr	r3, [pc, #568]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8010f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f92:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	2b08      	cmp	r3, #8
 8010f98:	d007      	beq.n	8010faa <HAL_RCC_OscConfig+0x286>
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	2b18      	cmp	r3, #24
 8010f9e:	d11b      	bne.n	8010fd8 <HAL_RCC_OscConfig+0x2b4>
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	f003 0303 	and.w	r3, r3, #3
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d116      	bne.n	8010fd8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010faa:	4b87      	ldr	r3, [pc, #540]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d005      	beq.n	8010fc2 <HAL_RCC_OscConfig+0x29e>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	69db      	ldr	r3, [r3, #28]
 8010fba:	2b80      	cmp	r3, #128	@ 0x80
 8010fbc:	d001      	beq.n	8010fc2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e282      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010fc2:	4b81      	ldr	r3, [pc, #516]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6a1b      	ldr	r3, [r3, #32]
 8010fce:	061b      	lsls	r3, r3, #24
 8010fd0:	497d      	ldr	r1, [pc, #500]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010fd6:	e040      	b.n	801105a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	69db      	ldr	r3, [r3, #28]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d023      	beq.n	8011028 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010fe0:	4b79      	ldr	r3, [pc, #484]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4a78      	ldr	r2, [pc, #480]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8010fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fec:	f7f8 f866 	bl	80090bc <HAL_GetTick>
 8010ff0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010ff2:	e008      	b.n	8011006 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8010ff4:	f7f8 f862 	bl	80090bc <HAL_GetTick>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffc:	1ad3      	subs	r3, r2, r3
 8010ffe:	2b02      	cmp	r3, #2
 8011000:	d901      	bls.n	8011006 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8011002:	2303      	movs	r3, #3
 8011004:	e260      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011006:	4b70      	ldr	r3, [pc, #448]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801100e:	2b00      	cmp	r3, #0
 8011010:	d0f0      	beq.n	8010ff4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011012:	4b6d      	ldr	r3, [pc, #436]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6a1b      	ldr	r3, [r3, #32]
 801101e:	061b      	lsls	r3, r3, #24
 8011020:	4969      	ldr	r1, [pc, #420]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011022:	4313      	orrs	r3, r2
 8011024:	60cb      	str	r3, [r1, #12]
 8011026:	e018      	b.n	801105a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011028:	4b67      	ldr	r3, [pc, #412]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	4a66      	ldr	r2, [pc, #408]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 801102e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011034:	f7f8 f842 	bl	80090bc <HAL_GetTick>
 8011038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801103a:	e008      	b.n	801104e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801103c:	f7f8 f83e 	bl	80090bc <HAL_GetTick>
 8011040:	4602      	mov	r2, r0
 8011042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	2b02      	cmp	r3, #2
 8011048:	d901      	bls.n	801104e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801104a:	2303      	movs	r3, #3
 801104c:	e23c      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801104e:	4b5e      	ldr	r3, [pc, #376]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1f0      	bne.n	801103c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f003 0308 	and.w	r3, r3, #8
 8011062:	2b00      	cmp	r3, #0
 8011064:	d036      	beq.n	80110d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	695b      	ldr	r3, [r3, #20]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d019      	beq.n	80110a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801106e:	4b56      	ldr	r3, [pc, #344]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011072:	4a55      	ldr	r2, [pc, #340]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011074:	f043 0301 	orr.w	r3, r3, #1
 8011078:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801107a:	f7f8 f81f 	bl	80090bc <HAL_GetTick>
 801107e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011080:	e008      	b.n	8011094 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011082:	f7f8 f81b 	bl	80090bc <HAL_GetTick>
 8011086:	4602      	mov	r2, r0
 8011088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	2b02      	cmp	r3, #2
 801108e:	d901      	bls.n	8011094 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011090:	2303      	movs	r3, #3
 8011092:	e219      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011094:	4b4c      	ldr	r3, [pc, #304]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011098:	f003 0302 	and.w	r3, r3, #2
 801109c:	2b00      	cmp	r3, #0
 801109e:	d0f0      	beq.n	8011082 <HAL_RCC_OscConfig+0x35e>
 80110a0:	e018      	b.n	80110d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80110a2:	4b49      	ldr	r3, [pc, #292]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80110a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110a6:	4a48      	ldr	r2, [pc, #288]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80110a8:	f023 0301 	bic.w	r3, r3, #1
 80110ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110ae:	f7f8 f805 	bl	80090bc <HAL_GetTick>
 80110b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80110b4:	e008      	b.n	80110c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80110b6:	f7f8 f801 	bl	80090bc <HAL_GetTick>
 80110ba:	4602      	mov	r2, r0
 80110bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	2b02      	cmp	r3, #2
 80110c2:	d901      	bls.n	80110c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80110c4:	2303      	movs	r3, #3
 80110c6:	e1ff      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80110c8:	4b3f      	ldr	r3, [pc, #252]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80110ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110cc:	f003 0302 	and.w	r3, r3, #2
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d1f0      	bne.n	80110b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f003 0320 	and.w	r3, r3, #32
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d036      	beq.n	801114e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	699b      	ldr	r3, [r3, #24]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d019      	beq.n	801111c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80110e8:	4b37      	ldr	r3, [pc, #220]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a36      	ldr	r2, [pc, #216]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80110ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80110f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80110f4:	f7f7 ffe2 	bl	80090bc <HAL_GetTick>
 80110f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80110fa:	e008      	b.n	801110e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80110fc:	f7f7 ffde 	bl	80090bc <HAL_GetTick>
 8011100:	4602      	mov	r2, r0
 8011102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	2b02      	cmp	r3, #2
 8011108:	d901      	bls.n	801110e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801110a:	2303      	movs	r3, #3
 801110c:	e1dc      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801110e:	4b2e      	ldr	r3, [pc, #184]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011116:	2b00      	cmp	r3, #0
 8011118:	d0f0      	beq.n	80110fc <HAL_RCC_OscConfig+0x3d8>
 801111a:	e018      	b.n	801114e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801111c:	4b2a      	ldr	r3, [pc, #168]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a29      	ldr	r2, [pc, #164]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011126:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011128:	f7f7 ffc8 	bl	80090bc <HAL_GetTick>
 801112c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801112e:	e008      	b.n	8011142 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011130:	f7f7 ffc4 	bl	80090bc <HAL_GetTick>
 8011134:	4602      	mov	r2, r0
 8011136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011138:	1ad3      	subs	r3, r2, r3
 801113a:	2b02      	cmp	r3, #2
 801113c:	d901      	bls.n	8011142 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801113e:	2303      	movs	r3, #3
 8011140:	e1c2      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011142:	4b21      	ldr	r3, [pc, #132]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801114a:	2b00      	cmp	r3, #0
 801114c:	d1f0      	bne.n	8011130 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f003 0304 	and.w	r3, r3, #4
 8011156:	2b00      	cmp	r3, #0
 8011158:	f000 8086 	beq.w	8011268 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801115c:	4b1b      	ldr	r3, [pc, #108]	@ (80111cc <HAL_RCC_OscConfig+0x4a8>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a1a      	ldr	r2, [pc, #104]	@ (80111cc <HAL_RCC_OscConfig+0x4a8>)
 8011162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011168:	f7f7 ffa8 	bl	80090bc <HAL_GetTick>
 801116c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801116e:	e008      	b.n	8011182 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011170:	f7f7 ffa4 	bl	80090bc <HAL_GetTick>
 8011174:	4602      	mov	r2, r0
 8011176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011178:	1ad3      	subs	r3, r2, r3
 801117a:	2b64      	cmp	r3, #100	@ 0x64
 801117c:	d901      	bls.n	8011182 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801117e:	2303      	movs	r3, #3
 8011180:	e1a2      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011182:	4b12      	ldr	r3, [pc, #72]	@ (80111cc <HAL_RCC_OscConfig+0x4a8>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801118a:	2b00      	cmp	r3, #0
 801118c:	d0f0      	beq.n	8011170 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	689b      	ldr	r3, [r3, #8]
 8011192:	2b01      	cmp	r3, #1
 8011194:	d106      	bne.n	80111a4 <HAL_RCC_OscConfig+0x480>
 8011196:	4b0c      	ldr	r3, [pc, #48]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 8011198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801119a:	4a0b      	ldr	r2, [pc, #44]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 801119c:	f043 0301 	orr.w	r3, r3, #1
 80111a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80111a2:	e032      	b.n	801120a <HAL_RCC_OscConfig+0x4e6>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d111      	bne.n	80111d0 <HAL_RCC_OscConfig+0x4ac>
 80111ac:	4b06      	ldr	r3, [pc, #24]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80111ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111b0:	4a05      	ldr	r2, [pc, #20]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80111b2:	f023 0301 	bic.w	r3, r3, #1
 80111b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80111b8:	4b03      	ldr	r3, [pc, #12]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80111ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111bc:	4a02      	ldr	r2, [pc, #8]	@ (80111c8 <HAL_RCC_OscConfig+0x4a4>)
 80111be:	f023 0304 	bic.w	r3, r3, #4
 80111c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80111c4:	e021      	b.n	801120a <HAL_RCC_OscConfig+0x4e6>
 80111c6:	bf00      	nop
 80111c8:	58024400 	.word	0x58024400
 80111cc:	58024800 	.word	0x58024800
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	689b      	ldr	r3, [r3, #8]
 80111d4:	2b05      	cmp	r3, #5
 80111d6:	d10c      	bne.n	80111f2 <HAL_RCC_OscConfig+0x4ce>
 80111d8:	4b83      	ldr	r3, [pc, #524]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80111da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111dc:	4a82      	ldr	r2, [pc, #520]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80111de:	f043 0304 	orr.w	r3, r3, #4
 80111e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80111e4:	4b80      	ldr	r3, [pc, #512]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80111e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111e8:	4a7f      	ldr	r2, [pc, #508]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80111ea:	f043 0301 	orr.w	r3, r3, #1
 80111ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80111f0:	e00b      	b.n	801120a <HAL_RCC_OscConfig+0x4e6>
 80111f2:	4b7d      	ldr	r3, [pc, #500]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80111f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111f6:	4a7c      	ldr	r2, [pc, #496]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80111f8:	f023 0301 	bic.w	r3, r3, #1
 80111fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80111fe:	4b7a      	ldr	r3, [pc, #488]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011202:	4a79      	ldr	r2, [pc, #484]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011204:	f023 0304 	bic.w	r3, r3, #4
 8011208:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	689b      	ldr	r3, [r3, #8]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d015      	beq.n	801123e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011212:	f7f7 ff53 	bl	80090bc <HAL_GetTick>
 8011216:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011218:	e00a      	b.n	8011230 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801121a:	f7f7 ff4f 	bl	80090bc <HAL_GetTick>
 801121e:	4602      	mov	r2, r0
 8011220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011228:	4293      	cmp	r3, r2
 801122a:	d901      	bls.n	8011230 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801122c:	2303      	movs	r3, #3
 801122e:	e14b      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011230:	4b6d      	ldr	r3, [pc, #436]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011234:	f003 0302 	and.w	r3, r3, #2
 8011238:	2b00      	cmp	r3, #0
 801123a:	d0ee      	beq.n	801121a <HAL_RCC_OscConfig+0x4f6>
 801123c:	e014      	b.n	8011268 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801123e:	f7f7 ff3d 	bl	80090bc <HAL_GetTick>
 8011242:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011244:	e00a      	b.n	801125c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011246:	f7f7 ff39 	bl	80090bc <HAL_GetTick>
 801124a:	4602      	mov	r2, r0
 801124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801124e:	1ad3      	subs	r3, r2, r3
 8011250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011254:	4293      	cmp	r3, r2
 8011256:	d901      	bls.n	801125c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011258:	2303      	movs	r3, #3
 801125a:	e135      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801125c:	4b62      	ldr	r3, [pc, #392]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801125e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011260:	f003 0302 	and.w	r3, r3, #2
 8011264:	2b00      	cmp	r3, #0
 8011266:	d1ee      	bne.n	8011246 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126c:	2b00      	cmp	r3, #0
 801126e:	f000 812a 	beq.w	80114c6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011272:	4b5d      	ldr	r3, [pc, #372]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801127a:	2b18      	cmp	r3, #24
 801127c:	f000 80ba 	beq.w	80113f4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011284:	2b02      	cmp	r3, #2
 8011286:	f040 8095 	bne.w	80113b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801128a:	4b57      	ldr	r3, [pc, #348]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	4a56      	ldr	r2, [pc, #344]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011290:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011296:	f7f7 ff11 	bl	80090bc <HAL_GetTick>
 801129a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801129c:	e008      	b.n	80112b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801129e:	f7f7 ff0d 	bl	80090bc <HAL_GetTick>
 80112a2:	4602      	mov	r2, r0
 80112a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d901      	bls.n	80112b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80112ac:	2303      	movs	r3, #3
 80112ae:	e10b      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80112b0:	4b4d      	ldr	r3, [pc, #308]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1f0      	bne.n	801129e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80112bc:	4b4a      	ldr	r3, [pc, #296]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80112be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80112c0:	4b4a      	ldr	r3, [pc, #296]	@ (80113ec <HAL_RCC_OscConfig+0x6c8>)
 80112c2:	4013      	ands	r3, r2
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80112cc:	0112      	lsls	r2, r2, #4
 80112ce:	430a      	orrs	r2, r1
 80112d0:	4945      	ldr	r1, [pc, #276]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80112d2:	4313      	orrs	r3, r2
 80112d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112da:	3b01      	subs	r3, #1
 80112dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112e4:	3b01      	subs	r3, #1
 80112e6:	025b      	lsls	r3, r3, #9
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	431a      	orrs	r2, r3
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112f0:	3b01      	subs	r3, #1
 80112f2:	041b      	lsls	r3, r3, #16
 80112f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80112f8:	431a      	orrs	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112fe:	3b01      	subs	r3, #1
 8011300:	061b      	lsls	r3, r3, #24
 8011302:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011306:	4938      	ldr	r1, [pc, #224]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011308:	4313      	orrs	r3, r2
 801130a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801130c:	4b36      	ldr	r3, [pc, #216]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801130e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011310:	4a35      	ldr	r2, [pc, #212]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011312:	f023 0301 	bic.w	r3, r3, #1
 8011316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011318:	4b33      	ldr	r3, [pc, #204]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801131a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801131c:	4b34      	ldr	r3, [pc, #208]	@ (80113f0 <HAL_RCC_OscConfig+0x6cc>)
 801131e:	4013      	ands	r3, r2
 8011320:	687a      	ldr	r2, [r7, #4]
 8011322:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011324:	00d2      	lsls	r2, r2, #3
 8011326:	4930      	ldr	r1, [pc, #192]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011328:	4313      	orrs	r3, r2
 801132a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801132c:	4b2e      	ldr	r3, [pc, #184]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011330:	f023 020c 	bic.w	r2, r3, #12
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011338:	492b      	ldr	r1, [pc, #172]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801133a:	4313      	orrs	r3, r2
 801133c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801133e:	4b2a      	ldr	r3, [pc, #168]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011342:	f023 0202 	bic.w	r2, r3, #2
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801134a:	4927      	ldr	r1, [pc, #156]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801134c:	4313      	orrs	r3, r2
 801134e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011350:	4b25      	ldr	r3, [pc, #148]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011354:	4a24      	ldr	r2, [pc, #144]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801135a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801135c:	4b22      	ldr	r3, [pc, #136]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801135e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011360:	4a21      	ldr	r2, [pc, #132]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011368:	4b1f      	ldr	r3, [pc, #124]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801136c:	4a1e      	ldr	r2, [pc, #120]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801136e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011374:	4b1c      	ldr	r3, [pc, #112]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011378:	4a1b      	ldr	r2, [pc, #108]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 801137a:	f043 0301 	orr.w	r3, r3, #1
 801137e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011380:	4b19      	ldr	r3, [pc, #100]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4a18      	ldr	r2, [pc, #96]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 8011386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801138a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801138c:	f7f7 fe96 	bl	80090bc <HAL_GetTick>
 8011390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011392:	e008      	b.n	80113a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011394:	f7f7 fe92 	bl	80090bc <HAL_GetTick>
 8011398:	4602      	mov	r2, r0
 801139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139c:	1ad3      	subs	r3, r2, r3
 801139e:	2b02      	cmp	r3, #2
 80113a0:	d901      	bls.n	80113a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80113a2:	2303      	movs	r3, #3
 80113a4:	e090      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80113a6:	4b10      	ldr	r3, [pc, #64]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d0f0      	beq.n	8011394 <HAL_RCC_OscConfig+0x670>
 80113b2:	e088      	b.n	80114c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80113b4:	4b0c      	ldr	r3, [pc, #48]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	4a0b      	ldr	r2, [pc, #44]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80113ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80113be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113c0:	f7f7 fe7c 	bl	80090bc <HAL_GetTick>
 80113c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80113c6:	e008      	b.n	80113da <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80113c8:	f7f7 fe78 	bl	80090bc <HAL_GetTick>
 80113cc:	4602      	mov	r2, r0
 80113ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	2b02      	cmp	r3, #2
 80113d4:	d901      	bls.n	80113da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80113d6:	2303      	movs	r3, #3
 80113d8:	e076      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80113da:	4b03      	ldr	r3, [pc, #12]	@ (80113e8 <HAL_RCC_OscConfig+0x6c4>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d1f0      	bne.n	80113c8 <HAL_RCC_OscConfig+0x6a4>
 80113e6:	e06e      	b.n	80114c6 <HAL_RCC_OscConfig+0x7a2>
 80113e8:	58024400 	.word	0x58024400
 80113ec:	fffffc0c 	.word	0xfffffc0c
 80113f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80113f4:	4b36      	ldr	r3, [pc, #216]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 80113f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80113fa:	4b35      	ldr	r3, [pc, #212]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 80113fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011404:	2b01      	cmp	r3, #1
 8011406:	d031      	beq.n	801146c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	f003 0203 	and.w	r2, r3, #3
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011412:	429a      	cmp	r2, r3
 8011414:	d12a      	bne.n	801146c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	091b      	lsrs	r3, r3, #4
 801141a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011422:	429a      	cmp	r2, r3
 8011424:	d122      	bne.n	801146c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011430:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011432:	429a      	cmp	r2, r3
 8011434:	d11a      	bne.n	801146c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	0a5b      	lsrs	r3, r3, #9
 801143a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011442:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011444:	429a      	cmp	r2, r3
 8011446:	d111      	bne.n	801146c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	0c1b      	lsrs	r3, r3, #16
 801144c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011454:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011456:	429a      	cmp	r2, r3
 8011458:	d108      	bne.n	801146c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	0e1b      	lsrs	r3, r3, #24
 801145e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011466:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011468:	429a      	cmp	r2, r3
 801146a:	d001      	beq.n	8011470 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801146c:	2301      	movs	r3, #1
 801146e:	e02b      	b.n	80114c8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011470:	4b17      	ldr	r3, [pc, #92]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 8011472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011474:	08db      	lsrs	r3, r3, #3
 8011476:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801147a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011480:	693a      	ldr	r2, [r7, #16]
 8011482:	429a      	cmp	r2, r3
 8011484:	d01f      	beq.n	80114c6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8011486:	4b12      	ldr	r3, [pc, #72]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 8011488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801148a:	4a11      	ldr	r2, [pc, #68]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 801148c:	f023 0301 	bic.w	r3, r3, #1
 8011490:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011492:	f7f7 fe13 	bl	80090bc <HAL_GetTick>
 8011496:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011498:	bf00      	nop
 801149a:	f7f7 fe0f 	bl	80090bc <HAL_GetTick>
 801149e:	4602      	mov	r2, r0
 80114a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d0f9      	beq.n	801149a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80114a6:	4b0a      	ldr	r3, [pc, #40]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 80114a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114aa:	4b0a      	ldr	r3, [pc, #40]	@ (80114d4 <HAL_RCC_OscConfig+0x7b0>)
 80114ac:	4013      	ands	r3, r2
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80114b2:	00d2      	lsls	r2, r2, #3
 80114b4:	4906      	ldr	r1, [pc, #24]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 80114b6:	4313      	orrs	r3, r2
 80114b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80114ba:	4b05      	ldr	r3, [pc, #20]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 80114bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114be:	4a04      	ldr	r2, [pc, #16]	@ (80114d0 <HAL_RCC_OscConfig+0x7ac>)
 80114c0:	f043 0301 	orr.w	r3, r3, #1
 80114c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80114c6:	2300      	movs	r3, #0
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3730      	adds	r7, #48	@ 0x30
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	58024400 	.word	0x58024400
 80114d4:	ffff0007 	.word	0xffff0007

080114d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d101      	bne.n	80114ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80114e8:	2301      	movs	r3, #1
 80114ea:	e19c      	b.n	8011826 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80114ec:	4b8a      	ldr	r3, [pc, #552]	@ (8011718 <HAL_RCC_ClockConfig+0x240>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f003 030f 	and.w	r3, r3, #15
 80114f4:	683a      	ldr	r2, [r7, #0]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d910      	bls.n	801151c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80114fa:	4b87      	ldr	r3, [pc, #540]	@ (8011718 <HAL_RCC_ClockConfig+0x240>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f023 020f 	bic.w	r2, r3, #15
 8011502:	4985      	ldr	r1, [pc, #532]	@ (8011718 <HAL_RCC_ClockConfig+0x240>)
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	4313      	orrs	r3, r2
 8011508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801150a:	4b83      	ldr	r3, [pc, #524]	@ (8011718 <HAL_RCC_ClockConfig+0x240>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f003 030f 	and.w	r3, r3, #15
 8011512:	683a      	ldr	r2, [r7, #0]
 8011514:	429a      	cmp	r2, r3
 8011516:	d001      	beq.n	801151c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011518:	2301      	movs	r3, #1
 801151a:	e184      	b.n	8011826 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	f003 0304 	and.w	r3, r3, #4
 8011524:	2b00      	cmp	r3, #0
 8011526:	d010      	beq.n	801154a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	691a      	ldr	r2, [r3, #16]
 801152c:	4b7b      	ldr	r3, [pc, #492]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801152e:	699b      	ldr	r3, [r3, #24]
 8011530:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011534:	429a      	cmp	r2, r3
 8011536:	d908      	bls.n	801154a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011538:	4b78      	ldr	r3, [pc, #480]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801153a:	699b      	ldr	r3, [r3, #24]
 801153c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	691b      	ldr	r3, [r3, #16]
 8011544:	4975      	ldr	r1, [pc, #468]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 8011546:	4313      	orrs	r3, r2
 8011548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f003 0308 	and.w	r3, r3, #8
 8011552:	2b00      	cmp	r3, #0
 8011554:	d010      	beq.n	8011578 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	695a      	ldr	r2, [r3, #20]
 801155a:	4b70      	ldr	r3, [pc, #448]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801155c:	69db      	ldr	r3, [r3, #28]
 801155e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011562:	429a      	cmp	r2, r3
 8011564:	d908      	bls.n	8011578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011566:	4b6d      	ldr	r3, [pc, #436]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 8011568:	69db      	ldr	r3, [r3, #28]
 801156a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	695b      	ldr	r3, [r3, #20]
 8011572:	496a      	ldr	r1, [pc, #424]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 8011574:	4313      	orrs	r3, r2
 8011576:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f003 0310 	and.w	r3, r3, #16
 8011580:	2b00      	cmp	r3, #0
 8011582:	d010      	beq.n	80115a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	699a      	ldr	r2, [r3, #24]
 8011588:	4b64      	ldr	r3, [pc, #400]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801158a:	69db      	ldr	r3, [r3, #28]
 801158c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011590:	429a      	cmp	r2, r3
 8011592:	d908      	bls.n	80115a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011594:	4b61      	ldr	r3, [pc, #388]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 8011596:	69db      	ldr	r3, [r3, #28]
 8011598:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	699b      	ldr	r3, [r3, #24]
 80115a0:	495e      	ldr	r1, [pc, #376]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80115a2:	4313      	orrs	r3, r2
 80115a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f003 0320 	and.w	r3, r3, #32
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d010      	beq.n	80115d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	69da      	ldr	r2, [r3, #28]
 80115b6:	4b59      	ldr	r3, [pc, #356]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80115b8:	6a1b      	ldr	r3, [r3, #32]
 80115ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80115be:	429a      	cmp	r2, r3
 80115c0:	d908      	bls.n	80115d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80115c2:	4b56      	ldr	r3, [pc, #344]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80115c4:	6a1b      	ldr	r3, [r3, #32]
 80115c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	69db      	ldr	r3, [r3, #28]
 80115ce:	4953      	ldr	r1, [pc, #332]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80115d0:	4313      	orrs	r3, r2
 80115d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f003 0302 	and.w	r3, r3, #2
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d010      	beq.n	8011602 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68da      	ldr	r2, [r3, #12]
 80115e4:	4b4d      	ldr	r3, [pc, #308]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80115e6:	699b      	ldr	r3, [r3, #24]
 80115e8:	f003 030f 	and.w	r3, r3, #15
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d908      	bls.n	8011602 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80115f0:	4b4a      	ldr	r3, [pc, #296]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80115f2:	699b      	ldr	r3, [r3, #24]
 80115f4:	f023 020f 	bic.w	r2, r3, #15
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	4947      	ldr	r1, [pc, #284]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80115fe:	4313      	orrs	r3, r2
 8011600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f003 0301 	and.w	r3, r3, #1
 801160a:	2b00      	cmp	r3, #0
 801160c:	d055      	beq.n	80116ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801160e:	4b43      	ldr	r3, [pc, #268]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 8011610:	699b      	ldr	r3, [r3, #24]
 8011612:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	689b      	ldr	r3, [r3, #8]
 801161a:	4940      	ldr	r1, [pc, #256]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801161c:	4313      	orrs	r3, r2
 801161e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	2b02      	cmp	r3, #2
 8011626:	d107      	bne.n	8011638 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011628:	4b3c      	ldr	r3, [pc, #240]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011630:	2b00      	cmp	r3, #0
 8011632:	d121      	bne.n	8011678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011634:	2301      	movs	r3, #1
 8011636:	e0f6      	b.n	8011826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	2b03      	cmp	r3, #3
 801163e:	d107      	bne.n	8011650 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011640:	4b36      	ldr	r3, [pc, #216]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011648:	2b00      	cmp	r3, #0
 801164a:	d115      	bne.n	8011678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801164c:	2301      	movs	r3, #1
 801164e:	e0ea      	b.n	8011826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d107      	bne.n	8011668 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011658:	4b30      	ldr	r3, [pc, #192]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011660:	2b00      	cmp	r3, #0
 8011662:	d109      	bne.n	8011678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011664:	2301      	movs	r3, #1
 8011666:	e0de      	b.n	8011826 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011668:	4b2c      	ldr	r3, [pc, #176]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f003 0304 	and.w	r3, r3, #4
 8011670:	2b00      	cmp	r3, #0
 8011672:	d101      	bne.n	8011678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011674:	2301      	movs	r3, #1
 8011676:	e0d6      	b.n	8011826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011678:	4b28      	ldr	r3, [pc, #160]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 801167a:	691b      	ldr	r3, [r3, #16]
 801167c:	f023 0207 	bic.w	r2, r3, #7
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	4925      	ldr	r1, [pc, #148]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 8011686:	4313      	orrs	r3, r2
 8011688:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801168a:	f7f7 fd17 	bl	80090bc <HAL_GetTick>
 801168e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011690:	e00a      	b.n	80116a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011692:	f7f7 fd13 	bl	80090bc <HAL_GetTick>
 8011696:	4602      	mov	r2, r0
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	1ad3      	subs	r3, r2, r3
 801169c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d901      	bls.n	80116a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80116a4:	2303      	movs	r3, #3
 80116a6:	e0be      	b.n	8011826 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80116a8:	4b1c      	ldr	r3, [pc, #112]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80116aa:	691b      	ldr	r3, [r3, #16]
 80116ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	00db      	lsls	r3, r3, #3
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d1eb      	bne.n	8011692 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f003 0302 	and.w	r3, r3, #2
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d010      	beq.n	80116e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	68da      	ldr	r2, [r3, #12]
 80116ca:	4b14      	ldr	r3, [pc, #80]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80116cc:	699b      	ldr	r3, [r3, #24]
 80116ce:	f003 030f 	and.w	r3, r3, #15
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d208      	bcs.n	80116e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80116d6:	4b11      	ldr	r3, [pc, #68]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80116d8:	699b      	ldr	r3, [r3, #24]
 80116da:	f023 020f 	bic.w	r2, r3, #15
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	490e      	ldr	r1, [pc, #56]	@ (801171c <HAL_RCC_ClockConfig+0x244>)
 80116e4:	4313      	orrs	r3, r2
 80116e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80116e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011718 <HAL_RCC_ClockConfig+0x240>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f003 030f 	and.w	r3, r3, #15
 80116f0:	683a      	ldr	r2, [r7, #0]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d214      	bcs.n	8011720 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80116f6:	4b08      	ldr	r3, [pc, #32]	@ (8011718 <HAL_RCC_ClockConfig+0x240>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f023 020f 	bic.w	r2, r3, #15
 80116fe:	4906      	ldr	r1, [pc, #24]	@ (8011718 <HAL_RCC_ClockConfig+0x240>)
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	4313      	orrs	r3, r2
 8011704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011706:	4b04      	ldr	r3, [pc, #16]	@ (8011718 <HAL_RCC_ClockConfig+0x240>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f003 030f 	and.w	r3, r3, #15
 801170e:	683a      	ldr	r2, [r7, #0]
 8011710:	429a      	cmp	r2, r3
 8011712:	d005      	beq.n	8011720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011714:	2301      	movs	r3, #1
 8011716:	e086      	b.n	8011826 <HAL_RCC_ClockConfig+0x34e>
 8011718:	52002000 	.word	0x52002000
 801171c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f003 0304 	and.w	r3, r3, #4
 8011728:	2b00      	cmp	r3, #0
 801172a:	d010      	beq.n	801174e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	691a      	ldr	r2, [r3, #16]
 8011730:	4b3f      	ldr	r3, [pc, #252]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 8011732:	699b      	ldr	r3, [r3, #24]
 8011734:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011738:	429a      	cmp	r2, r3
 801173a:	d208      	bcs.n	801174e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801173c:	4b3c      	ldr	r3, [pc, #240]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 801173e:	699b      	ldr	r3, [r3, #24]
 8011740:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	691b      	ldr	r3, [r3, #16]
 8011748:	4939      	ldr	r1, [pc, #228]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 801174a:	4313      	orrs	r3, r2
 801174c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f003 0308 	and.w	r3, r3, #8
 8011756:	2b00      	cmp	r3, #0
 8011758:	d010      	beq.n	801177c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	695a      	ldr	r2, [r3, #20]
 801175e:	4b34      	ldr	r3, [pc, #208]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 8011760:	69db      	ldr	r3, [r3, #28]
 8011762:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011766:	429a      	cmp	r2, r3
 8011768:	d208      	bcs.n	801177c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801176a:	4b31      	ldr	r3, [pc, #196]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 801176c:	69db      	ldr	r3, [r3, #28]
 801176e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	695b      	ldr	r3, [r3, #20]
 8011776:	492e      	ldr	r1, [pc, #184]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 8011778:	4313      	orrs	r3, r2
 801177a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	f003 0310 	and.w	r3, r3, #16
 8011784:	2b00      	cmp	r3, #0
 8011786:	d010      	beq.n	80117aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	699a      	ldr	r2, [r3, #24]
 801178c:	4b28      	ldr	r3, [pc, #160]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 801178e:	69db      	ldr	r3, [r3, #28]
 8011790:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011794:	429a      	cmp	r2, r3
 8011796:	d208      	bcs.n	80117aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011798:	4b25      	ldr	r3, [pc, #148]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 801179a:	69db      	ldr	r3, [r3, #28]
 801179c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	699b      	ldr	r3, [r3, #24]
 80117a4:	4922      	ldr	r1, [pc, #136]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 80117a6:	4313      	orrs	r3, r2
 80117a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f003 0320 	and.w	r3, r3, #32
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d010      	beq.n	80117d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	69da      	ldr	r2, [r3, #28]
 80117ba:	4b1d      	ldr	r3, [pc, #116]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 80117bc:	6a1b      	ldr	r3, [r3, #32]
 80117be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d208      	bcs.n	80117d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80117c6:	4b1a      	ldr	r3, [pc, #104]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 80117c8:	6a1b      	ldr	r3, [r3, #32]
 80117ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	69db      	ldr	r3, [r3, #28]
 80117d2:	4917      	ldr	r1, [pc, #92]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 80117d4:	4313      	orrs	r3, r2
 80117d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80117d8:	f000 f834 	bl	8011844 <HAL_RCC_GetSysClockFreq>
 80117dc:	4602      	mov	r2, r0
 80117de:	4b14      	ldr	r3, [pc, #80]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 80117e0:	699b      	ldr	r3, [r3, #24]
 80117e2:	0a1b      	lsrs	r3, r3, #8
 80117e4:	f003 030f 	and.w	r3, r3, #15
 80117e8:	4912      	ldr	r1, [pc, #72]	@ (8011834 <HAL_RCC_ClockConfig+0x35c>)
 80117ea:	5ccb      	ldrb	r3, [r1, r3]
 80117ec:	f003 031f 	and.w	r3, r3, #31
 80117f0:	fa22 f303 	lsr.w	r3, r2, r3
 80117f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80117f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011830 <HAL_RCC_ClockConfig+0x358>)
 80117f8:	699b      	ldr	r3, [r3, #24]
 80117fa:	f003 030f 	and.w	r3, r3, #15
 80117fe:	4a0d      	ldr	r2, [pc, #52]	@ (8011834 <HAL_RCC_ClockConfig+0x35c>)
 8011800:	5cd3      	ldrb	r3, [r2, r3]
 8011802:	f003 031f 	and.w	r3, r3, #31
 8011806:	693a      	ldr	r2, [r7, #16]
 8011808:	fa22 f303 	lsr.w	r3, r2, r3
 801180c:	4a0a      	ldr	r2, [pc, #40]	@ (8011838 <HAL_RCC_ClockConfig+0x360>)
 801180e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011810:	4a0a      	ldr	r2, [pc, #40]	@ (801183c <HAL_RCC_ClockConfig+0x364>)
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011816:	4b0a      	ldr	r3, [pc, #40]	@ (8011840 <HAL_RCC_ClockConfig+0x368>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	4618      	mov	r0, r3
 801181c:	f7f7 fc04 	bl	8009028 <HAL_InitTick>
 8011820:	4603      	mov	r3, r0
 8011822:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011824:	7bfb      	ldrb	r3, [r7, #15]
}
 8011826:	4618      	mov	r0, r3
 8011828:	3718      	adds	r7, #24
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	58024400 	.word	0x58024400
 8011834:	0801ebd4 	.word	0x0801ebd4
 8011838:	24000008 	.word	0x24000008
 801183c:	24000004 	.word	0x24000004
 8011840:	2400000c 	.word	0x2400000c

08011844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011844:	b480      	push	{r7}
 8011846:	b089      	sub	sp, #36	@ 0x24
 8011848:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801184a:	4bb3      	ldr	r3, [pc, #716]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801184c:	691b      	ldr	r3, [r3, #16]
 801184e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011852:	2b18      	cmp	r3, #24
 8011854:	f200 8155 	bhi.w	8011b02 <HAL_RCC_GetSysClockFreq+0x2be>
 8011858:	a201      	add	r2, pc, #4	@ (adr r2, 8011860 <HAL_RCC_GetSysClockFreq+0x1c>)
 801185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801185e:	bf00      	nop
 8011860:	080118c5 	.word	0x080118c5
 8011864:	08011b03 	.word	0x08011b03
 8011868:	08011b03 	.word	0x08011b03
 801186c:	08011b03 	.word	0x08011b03
 8011870:	08011b03 	.word	0x08011b03
 8011874:	08011b03 	.word	0x08011b03
 8011878:	08011b03 	.word	0x08011b03
 801187c:	08011b03 	.word	0x08011b03
 8011880:	080118eb 	.word	0x080118eb
 8011884:	08011b03 	.word	0x08011b03
 8011888:	08011b03 	.word	0x08011b03
 801188c:	08011b03 	.word	0x08011b03
 8011890:	08011b03 	.word	0x08011b03
 8011894:	08011b03 	.word	0x08011b03
 8011898:	08011b03 	.word	0x08011b03
 801189c:	08011b03 	.word	0x08011b03
 80118a0:	080118f1 	.word	0x080118f1
 80118a4:	08011b03 	.word	0x08011b03
 80118a8:	08011b03 	.word	0x08011b03
 80118ac:	08011b03 	.word	0x08011b03
 80118b0:	08011b03 	.word	0x08011b03
 80118b4:	08011b03 	.word	0x08011b03
 80118b8:	08011b03 	.word	0x08011b03
 80118bc:	08011b03 	.word	0x08011b03
 80118c0:	080118f7 	.word	0x080118f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118c4:	4b94      	ldr	r3, [pc, #592]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f003 0320 	and.w	r3, r3, #32
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d009      	beq.n	80118e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80118d0:	4b91      	ldr	r3, [pc, #580]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	08db      	lsrs	r3, r3, #3
 80118d6:	f003 0303 	and.w	r3, r3, #3
 80118da:	4a90      	ldr	r2, [pc, #576]	@ (8011b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80118dc:	fa22 f303 	lsr.w	r3, r2, r3
 80118e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80118e2:	e111      	b.n	8011b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80118e4:	4b8d      	ldr	r3, [pc, #564]	@ (8011b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80118e6:	61bb      	str	r3, [r7, #24]
      break;
 80118e8:	e10e      	b.n	8011b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80118ea:	4b8d      	ldr	r3, [pc, #564]	@ (8011b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80118ec:	61bb      	str	r3, [r7, #24]
      break;
 80118ee:	e10b      	b.n	8011b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80118f0:	4b8c      	ldr	r3, [pc, #560]	@ (8011b24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80118f2:	61bb      	str	r3, [r7, #24]
      break;
 80118f4:	e108      	b.n	8011b08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80118f6:	4b88      	ldr	r3, [pc, #544]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80118f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118fa:	f003 0303 	and.w	r3, r3, #3
 80118fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011900:	4b85      	ldr	r3, [pc, #532]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011904:	091b      	lsrs	r3, r3, #4
 8011906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801190a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801190c:	4b82      	ldr	r3, [pc, #520]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801190e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011910:	f003 0301 	and.w	r3, r3, #1
 8011914:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011916:	4b80      	ldr	r3, [pc, #512]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801191a:	08db      	lsrs	r3, r3, #3
 801191c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	fb02 f303 	mul.w	r3, r2, r3
 8011926:	ee07 3a90 	vmov	s15, r3
 801192a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801192e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	2b00      	cmp	r3, #0
 8011936:	f000 80e1 	beq.w	8011afc <HAL_RCC_GetSysClockFreq+0x2b8>
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	2b02      	cmp	r3, #2
 801193e:	f000 8083 	beq.w	8011a48 <HAL_RCC_GetSysClockFreq+0x204>
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	2b02      	cmp	r3, #2
 8011946:	f200 80a1 	bhi.w	8011a8c <HAL_RCC_GetSysClockFreq+0x248>
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d003      	beq.n	8011958 <HAL_RCC_GetSysClockFreq+0x114>
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	2b01      	cmp	r3, #1
 8011954:	d056      	beq.n	8011a04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8011956:	e099      	b.n	8011a8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011958:	4b6f      	ldr	r3, [pc, #444]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f003 0320 	and.w	r3, r3, #32
 8011960:	2b00      	cmp	r3, #0
 8011962:	d02d      	beq.n	80119c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011964:	4b6c      	ldr	r3, [pc, #432]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	08db      	lsrs	r3, r3, #3
 801196a:	f003 0303 	and.w	r3, r3, #3
 801196e:	4a6b      	ldr	r2, [pc, #428]	@ (8011b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011970:	fa22 f303 	lsr.w	r3, r2, r3
 8011974:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	ee07 3a90 	vmov	s15, r3
 801197c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	ee07 3a90 	vmov	s15, r3
 8011986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801198a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801198e:	4b62      	ldr	r3, [pc, #392]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011996:	ee07 3a90 	vmov	s15, r3
 801199a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801199e:	ed97 6a02 	vldr	s12, [r7, #8]
 80119a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80119a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80119b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80119be:	e087      	b.n	8011ad0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	ee07 3a90 	vmov	s15, r3
 80119c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011b2c <HAL_RCC_GetSysClockFreq+0x2e8>
 80119ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80119d2:	4b51      	ldr	r3, [pc, #324]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119da:	ee07 3a90 	vmov	s15, r3
 80119de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80119e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80119ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80119f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011a02:	e065      	b.n	8011ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	ee07 3a90 	vmov	s15, r3
 8011a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a16:	4b40      	ldr	r3, [pc, #256]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a1e:	ee07 3a90 	vmov	s15, r3
 8011a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011a46:	e043      	b.n	8011ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	ee07 3a90 	vmov	s15, r3
 8011a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011b34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a62:	ee07 3a90 	vmov	s15, r3
 8011a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011a8a:	e021      	b.n	8011ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	ee07 3a90 	vmov	s15, r3
 8011a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011aa6:	ee07 3a90 	vmov	s15, r3
 8011aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ab2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011aca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011ace:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011ad0:	4b11      	ldr	r3, [pc, #68]	@ (8011b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ad4:	0a5b      	lsrs	r3, r3, #9
 8011ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ada:	3301      	adds	r3, #1
 8011adc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	ee07 3a90 	vmov	s15, r3
 8011ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8011aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011af4:	ee17 3a90 	vmov	r3, s15
 8011af8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011afa:	e005      	b.n	8011b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011afc:	2300      	movs	r3, #0
 8011afe:	61bb      	str	r3, [r7, #24]
      break;
 8011b00:	e002      	b.n	8011b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011b02:	4b07      	ldr	r3, [pc, #28]	@ (8011b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011b04:	61bb      	str	r3, [r7, #24]
      break;
 8011b06:	bf00      	nop
  }

  return sysclockfreq;
 8011b08:	69bb      	ldr	r3, [r7, #24]
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3724      	adds	r7, #36	@ 0x24
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	58024400 	.word	0x58024400
 8011b1c:	03d09000 	.word	0x03d09000
 8011b20:	003d0900 	.word	0x003d0900
 8011b24:	016e3600 	.word	0x016e3600
 8011b28:	46000000 	.word	0x46000000
 8011b2c:	4c742400 	.word	0x4c742400
 8011b30:	4a742400 	.word	0x4a742400
 8011b34:	4bb71b00 	.word	0x4bb71b00

08011b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011b3e:	f7ff fe81 	bl	8011844 <HAL_RCC_GetSysClockFreq>
 8011b42:	4602      	mov	r2, r0
 8011b44:	4b10      	ldr	r3, [pc, #64]	@ (8011b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8011b46:	699b      	ldr	r3, [r3, #24]
 8011b48:	0a1b      	lsrs	r3, r3, #8
 8011b4a:	f003 030f 	and.w	r3, r3, #15
 8011b4e:	490f      	ldr	r1, [pc, #60]	@ (8011b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8011b50:	5ccb      	ldrb	r3, [r1, r3]
 8011b52:	f003 031f 	and.w	r3, r3, #31
 8011b56:	fa22 f303 	lsr.w	r3, r2, r3
 8011b5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8011b5e:	699b      	ldr	r3, [r3, #24]
 8011b60:	f003 030f 	and.w	r3, r3, #15
 8011b64:	4a09      	ldr	r2, [pc, #36]	@ (8011b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8011b66:	5cd3      	ldrb	r3, [r2, r3]
 8011b68:	f003 031f 	and.w	r3, r3, #31
 8011b6c:	687a      	ldr	r2, [r7, #4]
 8011b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8011b72:	4a07      	ldr	r2, [pc, #28]	@ (8011b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8011b74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011b76:	4a07      	ldr	r2, [pc, #28]	@ (8011b94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011b7c:	4b04      	ldr	r3, [pc, #16]	@ (8011b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	58024400 	.word	0x58024400
 8011b8c:	0801ebd4 	.word	0x0801ebd4
 8011b90:	24000008 	.word	0x24000008
 8011b94:	24000004 	.word	0x24000004

08011b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011b9c:	f7ff ffcc 	bl	8011b38 <HAL_RCC_GetHCLKFreq>
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	4b06      	ldr	r3, [pc, #24]	@ (8011bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8011ba4:	69db      	ldr	r3, [r3, #28]
 8011ba6:	091b      	lsrs	r3, r3, #4
 8011ba8:	f003 0307 	and.w	r3, r3, #7
 8011bac:	4904      	ldr	r1, [pc, #16]	@ (8011bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011bae:	5ccb      	ldrb	r3, [r1, r3]
 8011bb0:	f003 031f 	and.w	r3, r3, #31
 8011bb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	58024400 	.word	0x58024400
 8011bc0:	0801ebd4 	.word	0x0801ebd4

08011bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011bc8:	f7ff ffb6 	bl	8011b38 <HAL_RCC_GetHCLKFreq>
 8011bcc:	4602      	mov	r2, r0
 8011bce:	4b06      	ldr	r3, [pc, #24]	@ (8011be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011bd0:	69db      	ldr	r3, [r3, #28]
 8011bd2:	0a1b      	lsrs	r3, r3, #8
 8011bd4:	f003 0307 	and.w	r3, r3, #7
 8011bd8:	4904      	ldr	r1, [pc, #16]	@ (8011bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8011bda:	5ccb      	ldrb	r3, [r1, r3]
 8011bdc:	f003 031f 	and.w	r3, r3, #31
 8011be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	58024400 	.word	0x58024400
 8011bec:	0801ebd4 	.word	0x0801ebd4

08011bf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011bf4:	b0c6      	sub	sp, #280	@ 0x118
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011c02:	2300      	movs	r3, #0
 8011c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011c14:	2500      	movs	r5, #0
 8011c16:	ea54 0305 	orrs.w	r3, r4, r5
 8011c1a:	d049      	beq.n	8011cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8011c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011c26:	d02f      	beq.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011c28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011c2c:	d828      	bhi.n	8011c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011c2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011c32:	d01a      	beq.n	8011c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011c38:	d822      	bhi.n	8011c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d003      	beq.n	8011c46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011c42:	d007      	beq.n	8011c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011c44:	e01c      	b.n	8011c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011c46:	4bab      	ldr	r3, [pc, #684]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c4a:	4aaa      	ldr	r2, [pc, #680]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011c52:	e01a      	b.n	8011c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c58:	3308      	adds	r3, #8
 8011c5a:	2102      	movs	r1, #2
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f002 fa49 	bl	80140f4 <RCCEx_PLL2_Config>
 8011c62:	4603      	mov	r3, r0
 8011c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011c68:	e00f      	b.n	8011c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c6e:	3328      	adds	r3, #40	@ 0x28
 8011c70:	2102      	movs	r1, #2
 8011c72:	4618      	mov	r0, r3
 8011c74:	f002 faf0 	bl	8014258 <RCCEx_PLL3_Config>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011c7e:	e004      	b.n	8011c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011c80:	2301      	movs	r3, #1
 8011c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011c86:	e000      	b.n	8011c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d10a      	bne.n	8011ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011c92:	4b98      	ldr	r3, [pc, #608]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011ca0:	4a94      	ldr	r2, [pc, #592]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ca2:	430b      	orrs	r3, r1
 8011ca4:	6513      	str	r3, [r2, #80]	@ 0x50
 8011ca6:	e003      	b.n	8011cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011cac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011cbc:	f04f 0900 	mov.w	r9, #0
 8011cc0:	ea58 0309 	orrs.w	r3, r8, r9
 8011cc4:	d047      	beq.n	8011d56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8011cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011ccc:	2b04      	cmp	r3, #4
 8011cce:	d82a      	bhi.n	8011d26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8011cd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd6:	bf00      	nop
 8011cd8:	08011ced 	.word	0x08011ced
 8011cdc:	08011cfb 	.word	0x08011cfb
 8011ce0:	08011d11 	.word	0x08011d11
 8011ce4:	08011d2f 	.word	0x08011d2f
 8011ce8:	08011d2f 	.word	0x08011d2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011cec:	4b81      	ldr	r3, [pc, #516]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cf0:	4a80      	ldr	r2, [pc, #512]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011cf8:	e01a      	b.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cfe:	3308      	adds	r3, #8
 8011d00:	2100      	movs	r1, #0
 8011d02:	4618      	mov	r0, r3
 8011d04:	f002 f9f6 	bl	80140f4 <RCCEx_PLL2_Config>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011d0e:	e00f      	b.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d14:	3328      	adds	r3, #40	@ 0x28
 8011d16:	2100      	movs	r1, #0
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f002 fa9d 	bl	8014258 <RCCEx_PLL3_Config>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011d24:	e004      	b.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011d26:	2301      	movs	r3, #1
 8011d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011d2c:	e000      	b.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8011d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d10a      	bne.n	8011d4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011d38:	4b6e      	ldr	r3, [pc, #440]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d3c:	f023 0107 	bic.w	r1, r3, #7
 8011d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d46:	4a6b      	ldr	r2, [pc, #428]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d48:	430b      	orrs	r3, r1
 8011d4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8011d4c:	e003      	b.n	8011d56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8011d62:	f04f 0b00 	mov.w	fp, #0
 8011d66:	ea5a 030b 	orrs.w	r3, sl, fp
 8011d6a:	d05b      	beq.n	8011e24 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8011d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011d74:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011d78:	d03b      	beq.n	8011df2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011d7a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011d7e:	d834      	bhi.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011d80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011d84:	d037      	beq.n	8011df6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011d86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011d8a:	d82e      	bhi.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011d90:	d033      	beq.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011d92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011d96:	d828      	bhi.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011d9c:	d01a      	beq.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011da2:	d822      	bhi.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d003      	beq.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011dac:	d007      	beq.n	8011dbe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011dae:	e01c      	b.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011db0:	4b50      	ldr	r3, [pc, #320]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011db4:	4a4f      	ldr	r2, [pc, #316]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011dbc:	e01e      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dc2:	3308      	adds	r3, #8
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f002 f994 	bl	80140f4 <RCCEx_PLL2_Config>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011dd2:	e013      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dd8:	3328      	adds	r3, #40	@ 0x28
 8011dda:	2100      	movs	r1, #0
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f002 fa3b 	bl	8014258 <RCCEx_PLL3_Config>
 8011de2:	4603      	mov	r3, r0
 8011de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011de8:	e008      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011dea:	2301      	movs	r3, #1
 8011dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011df0:	e004      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011df2:	bf00      	nop
 8011df4:	e002      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011df6:	bf00      	nop
 8011df8:	e000      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d10b      	bne.n	8011e1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011e04:	4b3b      	ldr	r3, [pc, #236]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e08:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8011e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011e14:	4a37      	ldr	r2, [pc, #220]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e16:	430b      	orrs	r3, r1
 8011e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8011e1a:	e003      	b.n	8011e24 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011e34:	2300      	movs	r3, #0
 8011e36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011e3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8011e3e:	460b      	mov	r3, r1
 8011e40:	4313      	orrs	r3, r2
 8011e42:	d05d      	beq.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8011e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011e4c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011e50:	d03b      	beq.n	8011eca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011e52:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011e56:	d834      	bhi.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011e58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011e5c:	d037      	beq.n	8011ece <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011e5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011e62:	d82e      	bhi.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011e64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011e68:	d033      	beq.n	8011ed2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011e6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011e6e:	d828      	bhi.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011e70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011e74:	d01a      	beq.n	8011eac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8011e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011e7a:	d822      	bhi.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d003      	beq.n	8011e88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011e84:	d007      	beq.n	8011e96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011e86:	e01c      	b.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011e88:	4b1a      	ldr	r3, [pc, #104]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e8c:	4a19      	ldr	r2, [pc, #100]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e94:	e01e      	b.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e9a:	3308      	adds	r3, #8
 8011e9c:	2100      	movs	r1, #0
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f002 f928 	bl	80140f4 <RCCEx_PLL2_Config>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011eaa:	e013      	b.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eb0:	3328      	adds	r3, #40	@ 0x28
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f002 f9cf 	bl	8014258 <RCCEx_PLL3_Config>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011ec0:	e008      	b.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011ec8:	e004      	b.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011eca:	bf00      	nop
 8011ecc:	e002      	b.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011ece:	bf00      	nop
 8011ed0:	e000      	b.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d10d      	bne.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011edc:	4b05      	ldr	r3, [pc, #20]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011ee0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8011ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011eec:	4a01      	ldr	r2, [pc, #4]	@ (8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011eee:	430b      	orrs	r3, r1
 8011ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8011ef2:	e005      	b.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8011ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8011f0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011f10:	2300      	movs	r3, #0
 8011f12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011f16:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8011f1a:	460b      	mov	r3, r1
 8011f1c:	4313      	orrs	r3, r2
 8011f1e:	d03a      	beq.n	8011f96 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8011f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f26:	2b30      	cmp	r3, #48	@ 0x30
 8011f28:	d01f      	beq.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8011f2a:	2b30      	cmp	r3, #48	@ 0x30
 8011f2c:	d819      	bhi.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011f2e:	2b20      	cmp	r3, #32
 8011f30:	d00c      	beq.n	8011f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8011f32:	2b20      	cmp	r3, #32
 8011f34:	d815      	bhi.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d019      	beq.n	8011f6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8011f3a:	2b10      	cmp	r3, #16
 8011f3c:	d111      	bne.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f3e:	4baa      	ldr	r3, [pc, #680]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f42:	4aa9      	ldr	r2, [pc, #676]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011f4a:	e011      	b.n	8011f70 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f50:	3308      	adds	r3, #8
 8011f52:	2102      	movs	r1, #2
 8011f54:	4618      	mov	r0, r3
 8011f56:	f002 f8cd 	bl	80140f4 <RCCEx_PLL2_Config>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011f60:	e006      	b.n	8011f70 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011f62:	2301      	movs	r3, #1
 8011f64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011f68:	e002      	b.n	8011f70 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011f6a:	bf00      	nop
 8011f6c:	e000      	b.n	8011f70 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d10a      	bne.n	8011f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011f78:	4b9b      	ldr	r3, [pc, #620]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8011f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f86:	4a98      	ldr	r2, [pc, #608]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011f88:	430b      	orrs	r3, r1
 8011f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011f8c:	e003      	b.n	8011f96 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8011fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8011fac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	4313      	orrs	r3, r2
 8011fb4:	d051      	beq.n	801205a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8011fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011fc0:	d035      	beq.n	801202e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8011fc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011fc6:	d82e      	bhi.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011fc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011fcc:	d031      	beq.n	8012032 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8011fce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011fd2:	d828      	bhi.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011fd8:	d01a      	beq.n	8012010 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8011fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011fde:	d822      	bhi.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d003      	beq.n	8011fec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8011fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011fe8:	d007      	beq.n	8011ffa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8011fea:	e01c      	b.n	8012026 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011fec:	4b7e      	ldr	r3, [pc, #504]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ff0:	4a7d      	ldr	r2, [pc, #500]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011ff8:	e01c      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ffe:	3308      	adds	r3, #8
 8012000:	2100      	movs	r1, #0
 8012002:	4618      	mov	r0, r3
 8012004:	f002 f876 	bl	80140f4 <RCCEx_PLL2_Config>
 8012008:	4603      	mov	r3, r0
 801200a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801200e:	e011      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012014:	3328      	adds	r3, #40	@ 0x28
 8012016:	2100      	movs	r1, #0
 8012018:	4618      	mov	r0, r3
 801201a:	f002 f91d 	bl	8014258 <RCCEx_PLL3_Config>
 801201e:	4603      	mov	r3, r0
 8012020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012024:	e006      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012026:	2301      	movs	r3, #1
 8012028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801202c:	e002      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801202e:	bf00      	nop
 8012030:	e000      	b.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8012032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012038:	2b00      	cmp	r3, #0
 801203a:	d10a      	bne.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801203c:	4b6a      	ldr	r3, [pc, #424]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801203e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012040:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8012044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801204a:	4a67      	ldr	r2, [pc, #412]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801204c:	430b      	orrs	r3, r1
 801204e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012050:	e003      	b.n	801205a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012056:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801205a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012062:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8012066:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801206a:	2300      	movs	r3, #0
 801206c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012070:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8012074:	460b      	mov	r3, r1
 8012076:	4313      	orrs	r3, r2
 8012078:	d053      	beq.n	8012122 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801207a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801207e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012084:	d033      	beq.n	80120ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8012086:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801208a:	d82c      	bhi.n	80120e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801208c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012090:	d02f      	beq.n	80120f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8012092:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012096:	d826      	bhi.n	80120e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801209c:	d02b      	beq.n	80120f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801209e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80120a2:	d820      	bhi.n	80120e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80120a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80120a8:	d012      	beq.n	80120d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80120aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80120ae:	d81a      	bhi.n	80120e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d022      	beq.n	80120fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80120b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80120b8:	d115      	bne.n	80120e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80120ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120be:	3308      	adds	r3, #8
 80120c0:	2101      	movs	r1, #1
 80120c2:	4618      	mov	r0, r3
 80120c4:	f002 f816 	bl	80140f4 <RCCEx_PLL2_Config>
 80120c8:	4603      	mov	r3, r0
 80120ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80120ce:	e015      	b.n	80120fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80120d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120d4:	3328      	adds	r3, #40	@ 0x28
 80120d6:	2101      	movs	r1, #1
 80120d8:	4618      	mov	r0, r3
 80120da:	f002 f8bd 	bl	8014258 <RCCEx_PLL3_Config>
 80120de:	4603      	mov	r3, r0
 80120e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80120e4:	e00a      	b.n	80120fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80120e6:	2301      	movs	r3, #1
 80120e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80120ec:	e006      	b.n	80120fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80120ee:	bf00      	nop
 80120f0:	e004      	b.n	80120fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80120f2:	bf00      	nop
 80120f4:	e002      	b.n	80120fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80120f6:	bf00      	nop
 80120f8:	e000      	b.n	80120fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80120fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80120fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012100:	2b00      	cmp	r3, #0
 8012102:	d10a      	bne.n	801211a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012104:	4b38      	ldr	r3, [pc, #224]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012108:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801210c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012112:	4a35      	ldr	r2, [pc, #212]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012114:	430b      	orrs	r3, r1
 8012116:	6513      	str	r3, [r2, #80]	@ 0x50
 8012118:	e003      	b.n	8012122 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801211a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801211e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801212e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012132:	2300      	movs	r3, #0
 8012134:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012138:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801213c:	460b      	mov	r3, r1
 801213e:	4313      	orrs	r3, r2
 8012140:	d058      	beq.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012146:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801214a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801214e:	d033      	beq.n	80121b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012154:	d82c      	bhi.n	80121b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801215a:	d02f      	beq.n	80121bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012160:	d826      	bhi.n	80121b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012166:	d02b      	beq.n	80121c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801216c:	d820      	bhi.n	80121b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801216e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012172:	d012      	beq.n	801219a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8012174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012178:	d81a      	bhi.n	80121b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801217a:	2b00      	cmp	r3, #0
 801217c:	d022      	beq.n	80121c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801217e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012182:	d115      	bne.n	80121b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012188:	3308      	adds	r3, #8
 801218a:	2101      	movs	r1, #1
 801218c:	4618      	mov	r0, r3
 801218e:	f001 ffb1 	bl	80140f4 <RCCEx_PLL2_Config>
 8012192:	4603      	mov	r3, r0
 8012194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012198:	e015      	b.n	80121c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801219a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801219e:	3328      	adds	r3, #40	@ 0x28
 80121a0:	2101      	movs	r1, #1
 80121a2:	4618      	mov	r0, r3
 80121a4:	f002 f858 	bl	8014258 <RCCEx_PLL3_Config>
 80121a8:	4603      	mov	r3, r0
 80121aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80121ae:	e00a      	b.n	80121c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80121b0:	2301      	movs	r3, #1
 80121b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121b6:	e006      	b.n	80121c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80121b8:	bf00      	nop
 80121ba:	e004      	b.n	80121c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80121bc:	bf00      	nop
 80121be:	e002      	b.n	80121c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80121c0:	bf00      	nop
 80121c2:	e000      	b.n	80121c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80121c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80121c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d10e      	bne.n	80121ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80121ce:	4b06      	ldr	r3, [pc, #24]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80121d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80121d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80121de:	4a02      	ldr	r2, [pc, #8]	@ (80121e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80121e0:	430b      	orrs	r3, r1
 80121e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80121e4:	e006      	b.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80121e6:	bf00      	nop
 80121e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80121ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80121f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012204:	2300      	movs	r3, #0
 8012206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801220a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801220e:	460b      	mov	r3, r1
 8012210:	4313      	orrs	r3, r2
 8012212:	d037      	beq.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8012214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801221a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801221e:	d00e      	beq.n	801223e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012224:	d816      	bhi.n	8012254 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8012226:	2b00      	cmp	r3, #0
 8012228:	d018      	beq.n	801225c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801222a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801222e:	d111      	bne.n	8012254 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012230:	4bc4      	ldr	r3, [pc, #784]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012234:	4ac3      	ldr	r2, [pc, #780]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801223a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801223c:	e00f      	b.n	801225e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801223e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012242:	3308      	adds	r3, #8
 8012244:	2101      	movs	r1, #1
 8012246:	4618      	mov	r0, r3
 8012248:	f001 ff54 	bl	80140f4 <RCCEx_PLL2_Config>
 801224c:	4603      	mov	r3, r0
 801224e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012252:	e004      	b.n	801225e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012254:	2301      	movs	r3, #1
 8012256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801225a:	e000      	b.n	801225e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801225c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801225e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012262:	2b00      	cmp	r3, #0
 8012264:	d10a      	bne.n	801227c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8012266:	4bb7      	ldr	r3, [pc, #732]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801226a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801226e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012274:	4ab3      	ldr	r2, [pc, #716]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012276:	430b      	orrs	r3, r1
 8012278:	6513      	str	r3, [r2, #80]	@ 0x50
 801227a:	e003      	b.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801227c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012280:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012294:	2300      	movs	r3, #0
 8012296:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801229a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801229e:	460b      	mov	r3, r1
 80122a0:	4313      	orrs	r3, r2
 80122a2:	d039      	beq.n	8012318 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80122a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122aa:	2b03      	cmp	r3, #3
 80122ac:	d81c      	bhi.n	80122e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80122ae:	a201      	add	r2, pc, #4	@ (adr r2, 80122b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80122b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122b4:	080122f1 	.word	0x080122f1
 80122b8:	080122c5 	.word	0x080122c5
 80122bc:	080122d3 	.word	0x080122d3
 80122c0:	080122f1 	.word	0x080122f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80122c4:	4b9f      	ldr	r3, [pc, #636]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c8:	4a9e      	ldr	r2, [pc, #632]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80122d0:	e00f      	b.n	80122f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80122d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d6:	3308      	adds	r3, #8
 80122d8:	2102      	movs	r1, #2
 80122da:	4618      	mov	r0, r3
 80122dc:	f001 ff0a 	bl	80140f4 <RCCEx_PLL2_Config>
 80122e0:	4603      	mov	r3, r0
 80122e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80122e6:	e004      	b.n	80122f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80122e8:	2301      	movs	r3, #1
 80122ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122ee:	e000      	b.n	80122f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80122f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d10a      	bne.n	8012310 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80122fa:	4b92      	ldr	r3, [pc, #584]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122fe:	f023 0103 	bic.w	r1, r3, #3
 8012302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012308:	4a8e      	ldr	r2, [pc, #568]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801230a:	430b      	orrs	r3, r1
 801230c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801230e:	e003      	b.n	8012318 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012314:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8012324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012328:	2300      	movs	r3, #0
 801232a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801232e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8012332:	460b      	mov	r3, r1
 8012334:	4313      	orrs	r3, r2
 8012336:	f000 8099 	beq.w	801246c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801233a:	4b83      	ldr	r3, [pc, #524]	@ (8012548 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	4a82      	ldr	r2, [pc, #520]	@ (8012548 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012346:	f7f6 feb9 	bl	80090bc <HAL_GetTick>
 801234a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801234e:	e00b      	b.n	8012368 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012350:	f7f6 feb4 	bl	80090bc <HAL_GetTick>
 8012354:	4602      	mov	r2, r0
 8012356:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801235a:	1ad3      	subs	r3, r2, r3
 801235c:	2b64      	cmp	r3, #100	@ 0x64
 801235e:	d903      	bls.n	8012368 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012360:	2303      	movs	r3, #3
 8012362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012366:	e005      	b.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012368:	4b77      	ldr	r3, [pc, #476]	@ (8012548 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012370:	2b00      	cmp	r3, #0
 8012372:	d0ed      	beq.n	8012350 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8012374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012378:	2b00      	cmp	r3, #0
 801237a:	d173      	bne.n	8012464 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801237c:	4b71      	ldr	r3, [pc, #452]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801237e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012388:	4053      	eors	r3, r2
 801238a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801238e:	2b00      	cmp	r3, #0
 8012390:	d015      	beq.n	80123be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012392:	4b6c      	ldr	r3, [pc, #432]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801239a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801239e:	4b69      	ldr	r3, [pc, #420]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123a2:	4a68      	ldr	r2, [pc, #416]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80123a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80123aa:	4b66      	ldr	r3, [pc, #408]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123ae:	4a65      	ldr	r2, [pc, #404]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80123b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80123b6:	4a63      	ldr	r2, [pc, #396]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80123bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80123be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80123c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80123ca:	d118      	bne.n	80123fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80123cc:	f7f6 fe76 	bl	80090bc <HAL_GetTick>
 80123d0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80123d4:	e00d      	b.n	80123f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80123d6:	f7f6 fe71 	bl	80090bc <HAL_GetTick>
 80123da:	4602      	mov	r2, r0
 80123dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80123e0:	1ad2      	subs	r2, r2, r3
 80123e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d903      	bls.n	80123f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80123ea:	2303      	movs	r3, #3
 80123ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80123f0:	e005      	b.n	80123fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80123f2:	4b54      	ldr	r3, [pc, #336]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123f6:	f003 0302 	and.w	r3, r3, #2
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d0eb      	beq.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80123fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012402:	2b00      	cmp	r3, #0
 8012404:	d129      	bne.n	801245a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801240a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801240e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012416:	d10e      	bne.n	8012436 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012418:	4b4a      	ldr	r3, [pc, #296]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801241a:	691b      	ldr	r3, [r3, #16]
 801241c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012428:	091a      	lsrs	r2, r3, #4
 801242a:	4b48      	ldr	r3, [pc, #288]	@ (801254c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801242c:	4013      	ands	r3, r2
 801242e:	4a45      	ldr	r2, [pc, #276]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012430:	430b      	orrs	r3, r1
 8012432:	6113      	str	r3, [r2, #16]
 8012434:	e005      	b.n	8012442 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8012436:	4b43      	ldr	r3, [pc, #268]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012438:	691b      	ldr	r3, [r3, #16]
 801243a:	4a42      	ldr	r2, [pc, #264]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801243c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012440:	6113      	str	r3, [r2, #16]
 8012442:	4b40      	ldr	r3, [pc, #256]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012444:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801244a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801244e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012452:	4a3c      	ldr	r2, [pc, #240]	@ (8012544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012454:	430b      	orrs	r3, r1
 8012456:	6713      	str	r3, [r2, #112]	@ 0x70
 8012458:	e008      	b.n	801246c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801245a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801245e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012462:	e003      	b.n	801246c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801246c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012474:	f002 0301 	and.w	r3, r2, #1
 8012478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801247c:	2300      	movs	r3, #0
 801247e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012482:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8012486:	460b      	mov	r3, r1
 8012488:	4313      	orrs	r3, r2
 801248a:	f000 808f 	beq.w	80125ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801248e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012494:	2b28      	cmp	r3, #40	@ 0x28
 8012496:	d871      	bhi.n	801257c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012498:	a201      	add	r2, pc, #4	@ (adr r2, 80124a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801249e:	bf00      	nop
 80124a0:	08012585 	.word	0x08012585
 80124a4:	0801257d 	.word	0x0801257d
 80124a8:	0801257d 	.word	0x0801257d
 80124ac:	0801257d 	.word	0x0801257d
 80124b0:	0801257d 	.word	0x0801257d
 80124b4:	0801257d 	.word	0x0801257d
 80124b8:	0801257d 	.word	0x0801257d
 80124bc:	0801257d 	.word	0x0801257d
 80124c0:	08012551 	.word	0x08012551
 80124c4:	0801257d 	.word	0x0801257d
 80124c8:	0801257d 	.word	0x0801257d
 80124cc:	0801257d 	.word	0x0801257d
 80124d0:	0801257d 	.word	0x0801257d
 80124d4:	0801257d 	.word	0x0801257d
 80124d8:	0801257d 	.word	0x0801257d
 80124dc:	0801257d 	.word	0x0801257d
 80124e0:	08012567 	.word	0x08012567
 80124e4:	0801257d 	.word	0x0801257d
 80124e8:	0801257d 	.word	0x0801257d
 80124ec:	0801257d 	.word	0x0801257d
 80124f0:	0801257d 	.word	0x0801257d
 80124f4:	0801257d 	.word	0x0801257d
 80124f8:	0801257d 	.word	0x0801257d
 80124fc:	0801257d 	.word	0x0801257d
 8012500:	08012585 	.word	0x08012585
 8012504:	0801257d 	.word	0x0801257d
 8012508:	0801257d 	.word	0x0801257d
 801250c:	0801257d 	.word	0x0801257d
 8012510:	0801257d 	.word	0x0801257d
 8012514:	0801257d 	.word	0x0801257d
 8012518:	0801257d 	.word	0x0801257d
 801251c:	0801257d 	.word	0x0801257d
 8012520:	08012585 	.word	0x08012585
 8012524:	0801257d 	.word	0x0801257d
 8012528:	0801257d 	.word	0x0801257d
 801252c:	0801257d 	.word	0x0801257d
 8012530:	0801257d 	.word	0x0801257d
 8012534:	0801257d 	.word	0x0801257d
 8012538:	0801257d 	.word	0x0801257d
 801253c:	0801257d 	.word	0x0801257d
 8012540:	08012585 	.word	0x08012585
 8012544:	58024400 	.word	0x58024400
 8012548:	58024800 	.word	0x58024800
 801254c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012554:	3308      	adds	r3, #8
 8012556:	2101      	movs	r1, #1
 8012558:	4618      	mov	r0, r3
 801255a:	f001 fdcb 	bl	80140f4 <RCCEx_PLL2_Config>
 801255e:	4603      	mov	r3, r0
 8012560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012564:	e00f      	b.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801256a:	3328      	adds	r3, #40	@ 0x28
 801256c:	2101      	movs	r1, #1
 801256e:	4618      	mov	r0, r3
 8012570:	f001 fe72 	bl	8014258 <RCCEx_PLL3_Config>
 8012574:	4603      	mov	r3, r0
 8012576:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801257a:	e004      	b.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801257c:	2301      	movs	r3, #1
 801257e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012582:	e000      	b.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012586:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801258a:	2b00      	cmp	r3, #0
 801258c:	d10a      	bne.n	80125a4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801258e:	4bbf      	ldr	r3, [pc, #764]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012592:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801259a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801259c:	4abb      	ldr	r2, [pc, #748]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801259e:	430b      	orrs	r3, r1
 80125a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80125a2:	e003      	b.n	80125ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80125ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b4:	f002 0302 	and.w	r3, r2, #2
 80125b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80125bc:	2300      	movs	r3, #0
 80125be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80125c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80125c6:	460b      	mov	r3, r1
 80125c8:	4313      	orrs	r3, r2
 80125ca:	d041      	beq.n	8012650 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80125cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125d2:	2b05      	cmp	r3, #5
 80125d4:	d824      	bhi.n	8012620 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80125d6:	a201      	add	r2, pc, #4	@ (adr r2, 80125dc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80125d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125dc:	08012629 	.word	0x08012629
 80125e0:	080125f5 	.word	0x080125f5
 80125e4:	0801260b 	.word	0x0801260b
 80125e8:	08012629 	.word	0x08012629
 80125ec:	08012629 	.word	0x08012629
 80125f0:	08012629 	.word	0x08012629
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80125f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125f8:	3308      	adds	r3, #8
 80125fa:	2101      	movs	r1, #1
 80125fc:	4618      	mov	r0, r3
 80125fe:	f001 fd79 	bl	80140f4 <RCCEx_PLL2_Config>
 8012602:	4603      	mov	r3, r0
 8012604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012608:	e00f      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801260a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801260e:	3328      	adds	r3, #40	@ 0x28
 8012610:	2101      	movs	r1, #1
 8012612:	4618      	mov	r0, r3
 8012614:	f001 fe20 	bl	8014258 <RCCEx_PLL3_Config>
 8012618:	4603      	mov	r3, r0
 801261a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801261e:	e004      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012620:	2301      	movs	r3, #1
 8012622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012626:	e000      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012628:	bf00      	nop
    }

    if (ret == HAL_OK)
 801262a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801262e:	2b00      	cmp	r3, #0
 8012630:	d10a      	bne.n	8012648 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012632:	4b96      	ldr	r3, [pc, #600]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012636:	f023 0107 	bic.w	r1, r3, #7
 801263a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801263e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012640:	4a92      	ldr	r2, [pc, #584]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012642:	430b      	orrs	r3, r1
 8012644:	6553      	str	r3, [r2, #84]	@ 0x54
 8012646:	e003      	b.n	8012650 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801264c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012658:	f002 0304 	and.w	r3, r2, #4
 801265c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012660:	2300      	movs	r3, #0
 8012662:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012666:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801266a:	460b      	mov	r3, r1
 801266c:	4313      	orrs	r3, r2
 801266e:	d044      	beq.n	80126fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012678:	2b05      	cmp	r3, #5
 801267a:	d825      	bhi.n	80126c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 801267c:	a201      	add	r2, pc, #4	@ (adr r2, 8012684 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012682:	bf00      	nop
 8012684:	080126d1 	.word	0x080126d1
 8012688:	0801269d 	.word	0x0801269d
 801268c:	080126b3 	.word	0x080126b3
 8012690:	080126d1 	.word	0x080126d1
 8012694:	080126d1 	.word	0x080126d1
 8012698:	080126d1 	.word	0x080126d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801269c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126a0:	3308      	adds	r3, #8
 80126a2:	2101      	movs	r1, #1
 80126a4:	4618      	mov	r0, r3
 80126a6:	f001 fd25 	bl	80140f4 <RCCEx_PLL2_Config>
 80126aa:	4603      	mov	r3, r0
 80126ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80126b0:	e00f      	b.n	80126d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80126b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b6:	3328      	adds	r3, #40	@ 0x28
 80126b8:	2101      	movs	r1, #1
 80126ba:	4618      	mov	r0, r3
 80126bc:	f001 fdcc 	bl	8014258 <RCCEx_PLL3_Config>
 80126c0:	4603      	mov	r3, r0
 80126c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80126c6:	e004      	b.n	80126d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80126c8:	2301      	movs	r3, #1
 80126ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80126ce:	e000      	b.n	80126d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80126d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d10b      	bne.n	80126f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80126da:	4b6c      	ldr	r3, [pc, #432]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80126dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80126de:	f023 0107 	bic.w	r1, r3, #7
 80126e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126ea:	4a68      	ldr	r2, [pc, #416]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80126ec:	430b      	orrs	r3, r1
 80126ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80126f0:	e003      	b.n	80126fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80126fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012702:	f002 0320 	and.w	r3, r2, #32
 8012706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801270a:	2300      	movs	r3, #0
 801270c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012710:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012714:	460b      	mov	r3, r1
 8012716:	4313      	orrs	r3, r2
 8012718:	d055      	beq.n	80127c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801271a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801271e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012726:	d033      	beq.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012728:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801272c:	d82c      	bhi.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801272e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012732:	d02f      	beq.n	8012794 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012738:	d826      	bhi.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801273a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801273e:	d02b      	beq.n	8012798 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012740:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012744:	d820      	bhi.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801274a:	d012      	beq.n	8012772 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801274c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012750:	d81a      	bhi.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012752:	2b00      	cmp	r3, #0
 8012754:	d022      	beq.n	801279c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801275a:	d115      	bne.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801275c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012760:	3308      	adds	r3, #8
 8012762:	2100      	movs	r1, #0
 8012764:	4618      	mov	r0, r3
 8012766:	f001 fcc5 	bl	80140f4 <RCCEx_PLL2_Config>
 801276a:	4603      	mov	r3, r0
 801276c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012770:	e015      	b.n	801279e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012776:	3328      	adds	r3, #40	@ 0x28
 8012778:	2102      	movs	r1, #2
 801277a:	4618      	mov	r0, r3
 801277c:	f001 fd6c 	bl	8014258 <RCCEx_PLL3_Config>
 8012780:	4603      	mov	r3, r0
 8012782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012786:	e00a      	b.n	801279e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012788:	2301      	movs	r3, #1
 801278a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801278e:	e006      	b.n	801279e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012790:	bf00      	nop
 8012792:	e004      	b.n	801279e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012794:	bf00      	nop
 8012796:	e002      	b.n	801279e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012798:	bf00      	nop
 801279a:	e000      	b.n	801279e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801279c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801279e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d10b      	bne.n	80127be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80127a6:	4b39      	ldr	r3, [pc, #228]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80127a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80127ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80127b6:	4a35      	ldr	r2, [pc, #212]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80127b8:	430b      	orrs	r3, r1
 80127ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80127bc:	e003      	b.n	80127c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80127c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80127d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80127d6:	2300      	movs	r3, #0
 80127d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80127dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80127e0:	460b      	mov	r3, r1
 80127e2:	4313      	orrs	r3, r2
 80127e4:	d058      	beq.n	8012898 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80127e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80127ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80127f2:	d033      	beq.n	801285c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80127f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80127f8:	d82c      	bhi.n	8012854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80127fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80127fe:	d02f      	beq.n	8012860 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012804:	d826      	bhi.n	8012854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012806:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801280a:	d02b      	beq.n	8012864 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801280c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012810:	d820      	bhi.n	8012854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012816:	d012      	beq.n	801283e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801281c:	d81a      	bhi.n	8012854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801281e:	2b00      	cmp	r3, #0
 8012820:	d022      	beq.n	8012868 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012826:	d115      	bne.n	8012854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801282c:	3308      	adds	r3, #8
 801282e:	2100      	movs	r1, #0
 8012830:	4618      	mov	r0, r3
 8012832:	f001 fc5f 	bl	80140f4 <RCCEx_PLL2_Config>
 8012836:	4603      	mov	r3, r0
 8012838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801283c:	e015      	b.n	801286a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801283e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012842:	3328      	adds	r3, #40	@ 0x28
 8012844:	2102      	movs	r1, #2
 8012846:	4618      	mov	r0, r3
 8012848:	f001 fd06 	bl	8014258 <RCCEx_PLL3_Config>
 801284c:	4603      	mov	r3, r0
 801284e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012852:	e00a      	b.n	801286a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012854:	2301      	movs	r3, #1
 8012856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801285a:	e006      	b.n	801286a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801285c:	bf00      	nop
 801285e:	e004      	b.n	801286a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012860:	bf00      	nop
 8012862:	e002      	b.n	801286a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012864:	bf00      	nop
 8012866:	e000      	b.n	801286a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012868:	bf00      	nop
    }

    if (ret == HAL_OK)
 801286a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801286e:	2b00      	cmp	r3, #0
 8012870:	d10e      	bne.n	8012890 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012872:	4b06      	ldr	r3, [pc, #24]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012876:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801287a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801287e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012882:	4a02      	ldr	r2, [pc, #8]	@ (801288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012884:	430b      	orrs	r3, r1
 8012886:	6593      	str	r3, [r2, #88]	@ 0x58
 8012888:	e006      	b.n	8012898 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801288a:	bf00      	nop
 801288c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80128a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80128a8:	2300      	movs	r3, #0
 80128aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80128ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80128b2:	460b      	mov	r3, r1
 80128b4:	4313      	orrs	r3, r2
 80128b6:	d055      	beq.n	8012964 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80128b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80128c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80128c4:	d033      	beq.n	801292e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80128c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80128ca:	d82c      	bhi.n	8012926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80128cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80128d0:	d02f      	beq.n	8012932 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80128d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80128d6:	d826      	bhi.n	8012926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80128d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80128dc:	d02b      	beq.n	8012936 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80128de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80128e2:	d820      	bhi.n	8012926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80128e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80128e8:	d012      	beq.n	8012910 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80128ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80128ee:	d81a      	bhi.n	8012926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d022      	beq.n	801293a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80128f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80128f8:	d115      	bne.n	8012926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80128fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128fe:	3308      	adds	r3, #8
 8012900:	2100      	movs	r1, #0
 8012902:	4618      	mov	r0, r3
 8012904:	f001 fbf6 	bl	80140f4 <RCCEx_PLL2_Config>
 8012908:	4603      	mov	r3, r0
 801290a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801290e:	e015      	b.n	801293c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012914:	3328      	adds	r3, #40	@ 0x28
 8012916:	2102      	movs	r1, #2
 8012918:	4618      	mov	r0, r3
 801291a:	f001 fc9d 	bl	8014258 <RCCEx_PLL3_Config>
 801291e:	4603      	mov	r3, r0
 8012920:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012924:	e00a      	b.n	801293c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012926:	2301      	movs	r3, #1
 8012928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801292c:	e006      	b.n	801293c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801292e:	bf00      	nop
 8012930:	e004      	b.n	801293c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012932:	bf00      	nop
 8012934:	e002      	b.n	801293c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012936:	bf00      	nop
 8012938:	e000      	b.n	801293c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801293a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801293c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012940:	2b00      	cmp	r3, #0
 8012942:	d10b      	bne.n	801295c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012944:	4ba0      	ldr	r3, [pc, #640]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012948:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801294c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012950:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012954:	4a9c      	ldr	r2, [pc, #624]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012956:	430b      	orrs	r3, r1
 8012958:	6593      	str	r3, [r2, #88]	@ 0x58
 801295a:	e003      	b.n	8012964 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801295c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012960:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296c:	f002 0308 	and.w	r3, r2, #8
 8012970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012974:	2300      	movs	r3, #0
 8012976:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801297a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801297e:	460b      	mov	r3, r1
 8012980:	4313      	orrs	r3, r2
 8012982:	d01e      	beq.n	80129c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801298c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012990:	d10c      	bne.n	80129ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012996:	3328      	adds	r3, #40	@ 0x28
 8012998:	2102      	movs	r1, #2
 801299a:	4618      	mov	r0, r3
 801299c:	f001 fc5c 	bl	8014258 <RCCEx_PLL3_Config>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d002      	beq.n	80129ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80129a6:	2301      	movs	r3, #1
 80129a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80129ac:	4b86      	ldr	r3, [pc, #536]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80129ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80129b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80129bc:	4a82      	ldr	r2, [pc, #520]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80129be:	430b      	orrs	r3, r1
 80129c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80129c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ca:	f002 0310 	and.w	r3, r2, #16
 80129ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80129d2:	2300      	movs	r3, #0
 80129d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80129d8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80129dc:	460b      	mov	r3, r1
 80129de:	4313      	orrs	r3, r2
 80129e0:	d01e      	beq.n	8012a20 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80129e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80129ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80129ee:	d10c      	bne.n	8012a0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80129f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129f4:	3328      	adds	r3, #40	@ 0x28
 80129f6:	2102      	movs	r1, #2
 80129f8:	4618      	mov	r0, r3
 80129fa:	f001 fc2d 	bl	8014258 <RCCEx_PLL3_Config>
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d002      	beq.n	8012a0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012a04:	2301      	movs	r3, #1
 8012a06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a1a:	4a6b      	ldr	r2, [pc, #428]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a1c:	430b      	orrs	r3, r1
 8012a1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012a2e:	2300      	movs	r3, #0
 8012a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012a32:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012a36:	460b      	mov	r3, r1
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	d03e      	beq.n	8012aba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012a48:	d022      	beq.n	8012a90 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012a4e:	d81b      	bhi.n	8012a88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d003      	beq.n	8012a5c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a58:	d00b      	beq.n	8012a72 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012a5a:	e015      	b.n	8012a88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a60:	3308      	adds	r3, #8
 8012a62:	2100      	movs	r1, #0
 8012a64:	4618      	mov	r0, r3
 8012a66:	f001 fb45 	bl	80140f4 <RCCEx_PLL2_Config>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012a70:	e00f      	b.n	8012a92 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a76:	3328      	adds	r3, #40	@ 0x28
 8012a78:	2102      	movs	r1, #2
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f001 fbec 	bl	8014258 <RCCEx_PLL3_Config>
 8012a80:	4603      	mov	r3, r0
 8012a82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012a86:	e004      	b.n	8012a92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a8e:	e000      	b.n	8012a92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d10b      	bne.n	8012ab2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012aaa:	4a47      	ldr	r2, [pc, #284]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012aac:	430b      	orrs	r3, r1
 8012aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ab0:	e003      	b.n	8012aba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ab6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012ac6:	673b      	str	r3, [r7, #112]	@ 0x70
 8012ac8:	2300      	movs	r3, #0
 8012aca:	677b      	str	r3, [r7, #116]	@ 0x74
 8012acc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012ad0:	460b      	mov	r3, r1
 8012ad2:	4313      	orrs	r3, r2
 8012ad4:	d03b      	beq.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ade:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012ae2:	d01f      	beq.n	8012b24 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012ae4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012ae8:	d818      	bhi.n	8012b1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012aee:	d003      	beq.n	8012af8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012af4:	d007      	beq.n	8012b06 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012af6:	e011      	b.n	8012b1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012af8:	4b33      	ldr	r3, [pc, #204]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012afc:	4a32      	ldr	r2, [pc, #200]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012b04:	e00f      	b.n	8012b26 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b0a:	3328      	adds	r3, #40	@ 0x28
 8012b0c:	2101      	movs	r1, #1
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f001 fba2 	bl	8014258 <RCCEx_PLL3_Config>
 8012b14:	4603      	mov	r3, r0
 8012b16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012b1a:	e004      	b.n	8012b26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012b22:	e000      	b.n	8012b26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d10b      	bne.n	8012b46 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012b2e:	4b26      	ldr	r3, [pc, #152]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b3e:	4a22      	ldr	r2, [pc, #136]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b40:	430b      	orrs	r3, r1
 8012b42:	6553      	str	r3, [r2, #84]	@ 0x54
 8012b44:	e003      	b.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b60:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012b64:	460b      	mov	r3, r1
 8012b66:	4313      	orrs	r3, r2
 8012b68:	d034      	beq.n	8012bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d003      	beq.n	8012b7c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b78:	d007      	beq.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012b7a:	e011      	b.n	8012ba0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012b7c:	4b12      	ldr	r3, [pc, #72]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b80:	4a11      	ldr	r2, [pc, #68]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012b88:	e00e      	b.n	8012ba8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b8e:	3308      	adds	r3, #8
 8012b90:	2102      	movs	r1, #2
 8012b92:	4618      	mov	r0, r3
 8012b94:	f001 faae 	bl	80140f4 <RCCEx_PLL2_Config>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012b9e:	e003      	b.n	8012ba8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d10d      	bne.n	8012bcc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012bb0:	4b05      	ldr	r3, [pc, #20]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012bb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012bbe:	4a02      	ldr	r2, [pc, #8]	@ (8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012bc0:	430b      	orrs	r3, r1
 8012bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012bc4:	e006      	b.n	8012bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012bc6:	bf00      	nop
 8012bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bdc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8012be2:	2300      	movs	r3, #0
 8012be4:	667b      	str	r3, [r7, #100]	@ 0x64
 8012be6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012bea:	460b      	mov	r3, r1
 8012bec:	4313      	orrs	r3, r2
 8012bee:	d00c      	beq.n	8012c0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bf4:	3328      	adds	r3, #40	@ 0x28
 8012bf6:	2102      	movs	r1, #2
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f001 fb2d 	bl	8014258 <RCCEx_PLL3_Config>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d002      	beq.n	8012c0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012c04:	2301      	movs	r3, #1
 8012c06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012c18:	2300      	movs	r3, #0
 8012c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012c20:	460b      	mov	r3, r1
 8012c22:	4313      	orrs	r3, r2
 8012c24:	d036      	beq.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8012c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012c30:	d018      	beq.n	8012c64 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8012c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012c36:	d811      	bhi.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c3c:	d014      	beq.n	8012c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8012c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c42:	d80b      	bhi.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d011      	beq.n	8012c6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c4c:	d106      	bne.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c4e:	4bb7      	ldr	r3, [pc, #732]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c52:	4ab6      	ldr	r2, [pc, #728]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8012c5a:	e008      	b.n	8012c6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c62:	e004      	b.n	8012c6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012c64:	bf00      	nop
 8012c66:	e002      	b.n	8012c6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012c68:	bf00      	nop
 8012c6a:	e000      	b.n	8012c6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d10a      	bne.n	8012c8c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012c76:	4bad      	ldr	r3, [pc, #692]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c84:	4aa9      	ldr	r2, [pc, #676]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012c86:	430b      	orrs	r3, r1
 8012c88:	6553      	str	r3, [r2, #84]	@ 0x54
 8012c8a:	e003      	b.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012ca0:	653b      	str	r3, [r7, #80]	@ 0x50
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	657b      	str	r3, [r7, #84]	@ 0x54
 8012ca6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012caa:	460b      	mov	r3, r1
 8012cac:	4313      	orrs	r3, r2
 8012cae:	d009      	beq.n	8012cc4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012cb0:	4b9e      	ldr	r3, [pc, #632]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012cb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cbe:	4a9b      	ldr	r2, [pc, #620]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012cc0:	430b      	orrs	r3, r1
 8012cc2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ccc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012cd6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8012cda:	460b      	mov	r3, r1
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	d009      	beq.n	8012cf4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012ce0:	4b92      	ldr	r3, [pc, #584]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ce4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012cee:	4a8f      	ldr	r2, [pc, #572]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012cf0:	430b      	orrs	r3, r1
 8012cf2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cfc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d02:	2300      	movs	r3, #0
 8012d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8012d06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	4313      	orrs	r3, r2
 8012d0e:	d00e      	beq.n	8012d2e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012d10:	4b86      	ldr	r3, [pc, #536]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d12:	691b      	ldr	r3, [r3, #16]
 8012d14:	4a85      	ldr	r2, [pc, #532]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012d1a:	6113      	str	r3, [r2, #16]
 8012d1c:	4b83      	ldr	r3, [pc, #524]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d1e:	6919      	ldr	r1, [r3, #16]
 8012d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012d28:	4a80      	ldr	r2, [pc, #512]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d2a:	430b      	orrs	r3, r1
 8012d2c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d36:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8012d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012d44:	460b      	mov	r3, r1
 8012d46:	4313      	orrs	r3, r2
 8012d48:	d009      	beq.n	8012d5e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012d4a:	4b78      	ldr	r3, [pc, #480]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d58:	4a74      	ldr	r2, [pc, #464]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d5a:	430b      	orrs	r3, r1
 8012d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d66:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8012d74:	460b      	mov	r3, r1
 8012d76:	4313      	orrs	r3, r2
 8012d78:	d00a      	beq.n	8012d90 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d7e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012d8a:	4a68      	ldr	r2, [pc, #416]	@ (8012f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d8c:	430b      	orrs	r3, r1
 8012d8e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d98:	2100      	movs	r1, #0
 8012d9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012d9c:	f003 0301 	and.w	r3, r3, #1
 8012da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012da2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012da6:	460b      	mov	r3, r1
 8012da8:	4313      	orrs	r3, r2
 8012daa:	d011      	beq.n	8012dd0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012db0:	3308      	adds	r3, #8
 8012db2:	2100      	movs	r1, #0
 8012db4:	4618      	mov	r0, r3
 8012db6:	f001 f99d 	bl	80140f4 <RCCEx_PLL2_Config>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d003      	beq.n	8012dd0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012dcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd8:	2100      	movs	r1, #0
 8012dda:	6239      	str	r1, [r7, #32]
 8012ddc:	f003 0302 	and.w	r3, r3, #2
 8012de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012de2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012de6:	460b      	mov	r3, r1
 8012de8:	4313      	orrs	r3, r2
 8012dea:	d011      	beq.n	8012e10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012df0:	3308      	adds	r3, #8
 8012df2:	2101      	movs	r1, #1
 8012df4:	4618      	mov	r0, r3
 8012df6:	f001 f97d 	bl	80140f4 <RCCEx_PLL2_Config>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d003      	beq.n	8012e10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e18:	2100      	movs	r1, #0
 8012e1a:	61b9      	str	r1, [r7, #24]
 8012e1c:	f003 0304 	and.w	r3, r3, #4
 8012e20:	61fb      	str	r3, [r7, #28]
 8012e22:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012e26:	460b      	mov	r3, r1
 8012e28:	4313      	orrs	r3, r2
 8012e2a:	d011      	beq.n	8012e50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e30:	3308      	adds	r3, #8
 8012e32:	2102      	movs	r1, #2
 8012e34:	4618      	mov	r0, r3
 8012e36:	f001 f95d 	bl	80140f4 <RCCEx_PLL2_Config>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d003      	beq.n	8012e50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e58:	2100      	movs	r1, #0
 8012e5a:	6139      	str	r1, [r7, #16]
 8012e5c:	f003 0308 	and.w	r3, r3, #8
 8012e60:	617b      	str	r3, [r7, #20]
 8012e62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012e66:	460b      	mov	r3, r1
 8012e68:	4313      	orrs	r3, r2
 8012e6a:	d011      	beq.n	8012e90 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e70:	3328      	adds	r3, #40	@ 0x28
 8012e72:	2100      	movs	r1, #0
 8012e74:	4618      	mov	r0, r3
 8012e76:	f001 f9ef 	bl	8014258 <RCCEx_PLL3_Config>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d003      	beq.n	8012e90 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e98:	2100      	movs	r1, #0
 8012e9a:	60b9      	str	r1, [r7, #8]
 8012e9c:	f003 0310 	and.w	r3, r3, #16
 8012ea0:	60fb      	str	r3, [r7, #12]
 8012ea2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012ea6:	460b      	mov	r3, r1
 8012ea8:	4313      	orrs	r3, r2
 8012eaa:	d011      	beq.n	8012ed0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eb0:	3328      	adds	r3, #40	@ 0x28
 8012eb2:	2101      	movs	r1, #1
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f001 f9cf 	bl	8014258 <RCCEx_PLL3_Config>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d003      	beq.n	8012ed0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ecc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8012ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed8:	2100      	movs	r1, #0
 8012eda:	6039      	str	r1, [r7, #0]
 8012edc:	f003 0320 	and.w	r3, r3, #32
 8012ee0:	607b      	str	r3, [r7, #4]
 8012ee2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	d011      	beq.n	8012f10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ef0:	3328      	adds	r3, #40	@ 0x28
 8012ef2:	2102      	movs	r1, #2
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f001 f9af 	bl	8014258 <RCCEx_PLL3_Config>
 8012efa:	4603      	mov	r3, r0
 8012efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d003      	beq.n	8012f10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8012f10:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d101      	bne.n	8012f1c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	e000      	b.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8012f1c:	2301      	movs	r3, #1
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8012f24:	46bd      	mov	sp, r7
 8012f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012f2a:	bf00      	nop
 8012f2c:	58024400 	.word	0x58024400

08012f30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b090      	sub	sp, #64	@ 0x40
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8012f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f3e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8012f42:	430b      	orrs	r3, r1
 8012f44:	f040 8094 	bne.w	8013070 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8012f48:	4b9b      	ldr	r3, [pc, #620]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f4c:	f003 0307 	and.w	r3, r3, #7
 8012f50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f54:	2b04      	cmp	r3, #4
 8012f56:	f200 8087 	bhi.w	8013068 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8012f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8012f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f60:	08012f75 	.word	0x08012f75
 8012f64:	08012f9d 	.word	0x08012f9d
 8012f68:	08012fc5 	.word	0x08012fc5
 8012f6c:	08013061 	.word	0x08013061
 8012f70:	08012fed 	.word	0x08012fed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012f74:	4b90      	ldr	r3, [pc, #576]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012f7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012f80:	d108      	bne.n	8012f94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012f86:	4618      	mov	r0, r3
 8012f88:	f000 ff62 	bl	8013e50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f90:	f000 bc93 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f94:	2300      	movs	r3, #0
 8012f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f98:	f000 bc8f 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012f9c:	4b86      	ldr	r3, [pc, #536]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012fa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012fa8:	d108      	bne.n	8012fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012faa:	f107 0318 	add.w	r3, r7, #24
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f000 fca6 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012fb8:	f000 bc7f 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012fc0:	f000 bc7b 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012fc4:	4b7c      	ldr	r3, [pc, #496]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012fd0:	d108      	bne.n	8012fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012fd2:	f107 030c 	add.w	r3, r7, #12
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f000 fde6 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012fe0:	f000 bc6b 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012fe8:	f000 bc67 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012fec:	4b72      	ldr	r3, [pc, #456]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ff0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012ff4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012ff6:	4b70      	ldr	r3, [pc, #448]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f003 0304 	and.w	r3, r3, #4
 8012ffe:	2b04      	cmp	r3, #4
 8013000:	d10c      	bne.n	801301c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8013002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013004:	2b00      	cmp	r3, #0
 8013006:	d109      	bne.n	801301c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013008:	4b6b      	ldr	r3, [pc, #428]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	08db      	lsrs	r3, r3, #3
 801300e:	f003 0303 	and.w	r3, r3, #3
 8013012:	4a6a      	ldr	r2, [pc, #424]	@ (80131bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8013014:	fa22 f303 	lsr.w	r3, r2, r3
 8013018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801301a:	e01f      	b.n	801305c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801301c:	4b66      	ldr	r3, [pc, #408]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013028:	d106      	bne.n	8013038 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801302c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013030:	d102      	bne.n	8013038 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013032:	4b63      	ldr	r3, [pc, #396]	@ (80131c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8013034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013036:	e011      	b.n	801305c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013038:	4b5f      	ldr	r3, [pc, #380]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013044:	d106      	bne.n	8013054 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8013046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801304c:	d102      	bne.n	8013054 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801304e:	4b5d      	ldr	r3, [pc, #372]	@ (80131c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013052:	e003      	b.n	801305c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013054:	2300      	movs	r3, #0
 8013056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013058:	f000 bc2f 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801305c:	f000 bc2d 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013060:	4b59      	ldr	r3, [pc, #356]	@ (80131c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013064:	f000 bc29 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013068:	2300      	movs	r3, #0
 801306a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801306c:	f000 bc25 	b.w	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013074:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013078:	430b      	orrs	r3, r1
 801307a:	f040 80a7 	bne.w	80131cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801307e:	4b4e      	ldr	r3, [pc, #312]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013082:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8013086:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801308a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801308e:	d054      	beq.n	801313a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013092:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013096:	f200 808b 	bhi.w	80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801309a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801309c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80130a0:	f000 8083 	beq.w	80131aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80130a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80130aa:	f200 8081 	bhi.w	80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80130ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80130b4:	d02f      	beq.n	8013116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80130b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80130bc:	d878      	bhi.n	80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80130be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d004      	beq.n	80130ce <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80130c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80130ca:	d012      	beq.n	80130f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80130cc:	e070      	b.n	80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80130ce:	4b3a      	ldr	r3, [pc, #232]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80130d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80130da:	d107      	bne.n	80130ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80130dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80130e0:	4618      	mov	r0, r3
 80130e2:	f000 feb5 	bl	8013e50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80130e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80130ea:	e3e6      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80130ec:	2300      	movs	r3, #0
 80130ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130f0:	e3e3      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80130f2:	4b31      	ldr	r3, [pc, #196]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80130fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80130fe:	d107      	bne.n	8013110 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013100:	f107 0318 	add.w	r3, r7, #24
 8013104:	4618      	mov	r0, r3
 8013106:	f000 fbfb 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801310e:	e3d4      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013110:	2300      	movs	r3, #0
 8013112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013114:	e3d1      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013116:	4b28      	ldr	r3, [pc, #160]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801311e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013122:	d107      	bne.n	8013134 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013124:	f107 030c 	add.w	r3, r7, #12
 8013128:	4618      	mov	r0, r3
 801312a:	f000 fd3d 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013132:	e3c2      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013134:	2300      	movs	r3, #0
 8013136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013138:	e3bf      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801313a:	4b1f      	ldr	r3, [pc, #124]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801313e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013142:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013144:	4b1c      	ldr	r3, [pc, #112]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f003 0304 	and.w	r3, r3, #4
 801314c:	2b04      	cmp	r3, #4
 801314e:	d10c      	bne.n	801316a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013152:	2b00      	cmp	r3, #0
 8013154:	d109      	bne.n	801316a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013156:	4b18      	ldr	r3, [pc, #96]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	08db      	lsrs	r3, r3, #3
 801315c:	f003 0303 	and.w	r3, r3, #3
 8013160:	4a16      	ldr	r2, [pc, #88]	@ (80131bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8013162:	fa22 f303 	lsr.w	r3, r2, r3
 8013166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013168:	e01e      	b.n	80131a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801316a:	4b13      	ldr	r3, [pc, #76]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013176:	d106      	bne.n	8013186 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801317a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801317e:	d102      	bne.n	8013186 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013180:	4b0f      	ldr	r3, [pc, #60]	@ (80131c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8013182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013184:	e010      	b.n	80131a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013186:	4b0c      	ldr	r3, [pc, #48]	@ (80131b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801318e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013192:	d106      	bne.n	80131a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8013194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801319a:	d102      	bne.n	80131a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801319c:	4b09      	ldr	r3, [pc, #36]	@ (80131c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801319e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131a0:	e002      	b.n	80131a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80131a2:	2300      	movs	r3, #0
 80131a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80131a6:	e388      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80131a8:	e387      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80131aa:	4b07      	ldr	r3, [pc, #28]	@ (80131c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80131ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131ae:	e384      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80131b0:	2300      	movs	r3, #0
 80131b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131b4:	e381      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80131b6:	bf00      	nop
 80131b8:	58024400 	.word	0x58024400
 80131bc:	03d09000 	.word	0x03d09000
 80131c0:	003d0900 	.word	0x003d0900
 80131c4:	016e3600 	.word	0x016e3600
 80131c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80131cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131d0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80131d4:	430b      	orrs	r3, r1
 80131d6:	f040 809c 	bne.w	8013312 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80131da:	4b9e      	ldr	r3, [pc, #632]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80131dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131de:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80131e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80131e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80131ea:	d054      	beq.n	8013296 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80131ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80131f2:	f200 808b 	bhi.w	801330c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80131f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80131fc:	f000 8083 	beq.w	8013306 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8013200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013202:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013206:	f200 8081 	bhi.w	801330c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801320a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801320c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013210:	d02f      	beq.n	8013272 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8013212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013218:	d878      	bhi.n	801330c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801321c:	2b00      	cmp	r3, #0
 801321e:	d004      	beq.n	801322a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8013220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013222:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013226:	d012      	beq.n	801324e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8013228:	e070      	b.n	801330c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801322a:	4b8a      	ldr	r3, [pc, #552]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013236:	d107      	bne.n	8013248 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801323c:	4618      	mov	r0, r3
 801323e:	f000 fe07 	bl	8013e50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013246:	e338      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013248:	2300      	movs	r3, #0
 801324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801324c:	e335      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801324e:	4b81      	ldr	r3, [pc, #516]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801325a:	d107      	bne.n	801326c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801325c:	f107 0318 	add.w	r3, r7, #24
 8013260:	4618      	mov	r0, r3
 8013262:	f000 fb4d 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013266:	69bb      	ldr	r3, [r7, #24]
 8013268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801326a:	e326      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801326c:	2300      	movs	r3, #0
 801326e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013270:	e323      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013272:	4b78      	ldr	r3, [pc, #480]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801327a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801327e:	d107      	bne.n	8013290 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013280:	f107 030c 	add.w	r3, r7, #12
 8013284:	4618      	mov	r0, r3
 8013286:	f000 fc8f 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801328e:	e314      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013290:	2300      	movs	r3, #0
 8013292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013294:	e311      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013296:	4b6f      	ldr	r3, [pc, #444]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801329a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801329e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80132a0:	4b6c      	ldr	r3, [pc, #432]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	f003 0304 	and.w	r3, r3, #4
 80132a8:	2b04      	cmp	r3, #4
 80132aa:	d10c      	bne.n	80132c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80132ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d109      	bne.n	80132c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80132b2:	4b68      	ldr	r3, [pc, #416]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	08db      	lsrs	r3, r3, #3
 80132b8:	f003 0303 	and.w	r3, r3, #3
 80132bc:	4a66      	ldr	r2, [pc, #408]	@ (8013458 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80132be:	fa22 f303 	lsr.w	r3, r2, r3
 80132c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132c4:	e01e      	b.n	8013304 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80132c6:	4b63      	ldr	r3, [pc, #396]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132d2:	d106      	bne.n	80132e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80132d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80132da:	d102      	bne.n	80132e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80132dc:	4b5f      	ldr	r3, [pc, #380]	@ (801345c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80132de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132e0:	e010      	b.n	8013304 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80132e2:	4b5c      	ldr	r3, [pc, #368]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80132ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80132ee:	d106      	bne.n	80132fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80132f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80132f6:	d102      	bne.n	80132fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80132f8:	4b59      	ldr	r3, [pc, #356]	@ (8013460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80132fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132fc:	e002      	b.n	8013304 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80132fe:	2300      	movs	r3, #0
 8013300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013302:	e2da      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013304:	e2d9      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013306:	4b57      	ldr	r3, [pc, #348]	@ (8013464 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801330a:	e2d6      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801330c:	2300      	movs	r3, #0
 801330e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013310:	e2d3      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8013312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013316:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801331a:	430b      	orrs	r3, r1
 801331c:	f040 80a7 	bne.w	801346e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8013320:	4b4c      	ldr	r3, [pc, #304]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013324:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8013328:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801332a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801332c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013330:	d055      	beq.n	80133de <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8013332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013338:	f200 8096 	bhi.w	8013468 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801333c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801333e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013342:	f000 8084 	beq.w	801344e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8013346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013348:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801334c:	f200 808c 	bhi.w	8013468 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013356:	d030      	beq.n	80133ba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801335a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801335e:	f200 8083 	bhi.w	8013468 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013364:	2b00      	cmp	r3, #0
 8013366:	d004      	beq.n	8013372 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801336a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801336e:	d012      	beq.n	8013396 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013370:	e07a      	b.n	8013468 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013372:	4b38      	ldr	r3, [pc, #224]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801337a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801337e:	d107      	bne.n	8013390 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013384:	4618      	mov	r0, r3
 8013386:	f000 fd63 	bl	8013e50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801338a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801338c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801338e:	e294      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013390:	2300      	movs	r3, #0
 8013392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013394:	e291      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013396:	4b2f      	ldr	r3, [pc, #188]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801339e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80133a2:	d107      	bne.n	80133b4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133a4:	f107 0318 	add.w	r3, r7, #24
 80133a8:	4618      	mov	r0, r3
 80133aa:	f000 faa9 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80133ae:	69bb      	ldr	r3, [r7, #24]
 80133b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133b2:	e282      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133b8:	e27f      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80133ba:	4b26      	ldr	r3, [pc, #152]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80133c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80133c6:	d107      	bne.n	80133d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80133c8:	f107 030c 	add.w	r3, r7, #12
 80133cc:	4618      	mov	r0, r3
 80133ce:	f000 fbeb 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133d6:	e270      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133d8:	2300      	movs	r3, #0
 80133da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133dc:	e26d      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80133de:	4b1d      	ldr	r3, [pc, #116]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80133e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80133e8:	4b1a      	ldr	r3, [pc, #104]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	f003 0304 	and.w	r3, r3, #4
 80133f0:	2b04      	cmp	r3, #4
 80133f2:	d10c      	bne.n	801340e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80133f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d109      	bne.n	801340e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80133fa:	4b16      	ldr	r3, [pc, #88]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	08db      	lsrs	r3, r3, #3
 8013400:	f003 0303 	and.w	r3, r3, #3
 8013404:	4a14      	ldr	r2, [pc, #80]	@ (8013458 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013406:	fa22 f303 	lsr.w	r3, r2, r3
 801340a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801340c:	e01e      	b.n	801344c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801340e:	4b11      	ldr	r3, [pc, #68]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801341a:	d106      	bne.n	801342a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801341c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801341e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013422:	d102      	bne.n	801342a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013424:	4b0d      	ldr	r3, [pc, #52]	@ (801345c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8013426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013428:	e010      	b.n	801344c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801342a:	4b0a      	ldr	r3, [pc, #40]	@ (8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013436:	d106      	bne.n	8013446 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801343a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801343e:	d102      	bne.n	8013446 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013440:	4b07      	ldr	r3, [pc, #28]	@ (8013460 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013444:	e002      	b.n	801344c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013446:	2300      	movs	r3, #0
 8013448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801344a:	e236      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801344c:	e235      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801344e:	4b05      	ldr	r3, [pc, #20]	@ (8013464 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013452:	e232      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013454:	58024400 	.word	0x58024400
 8013458:	03d09000 	.word	0x03d09000
 801345c:	003d0900 	.word	0x003d0900
 8013460:	016e3600 	.word	0x016e3600
 8013464:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013468:	2300      	movs	r3, #0
 801346a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801346c:	e225      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801346e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013472:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8013476:	430b      	orrs	r3, r1
 8013478:	f040 8085 	bne.w	8013586 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801347c:	4b9c      	ldr	r3, [pc, #624]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801347e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013480:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8013484:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8013486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801348c:	d06b      	beq.n	8013566 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801348e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013494:	d874      	bhi.n	8013580 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013498:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801349c:	d056      	beq.n	801354c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801349e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80134a4:	d86c      	bhi.n	8013580 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80134a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80134ac:	d03b      	beq.n	8013526 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80134ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80134b4:	d864      	bhi.n	8013580 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80134b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80134bc:	d021      	beq.n	8013502 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80134be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80134c4:	d85c      	bhi.n	8013580 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80134c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d004      	beq.n	80134d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80134cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80134d2:	d004      	beq.n	80134de <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80134d4:	e054      	b.n	8013580 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80134d6:	f7fe fb5f 	bl	8011b98 <HAL_RCC_GetPCLK1Freq>
 80134da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80134dc:	e1ed      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80134de:	4b84      	ldr	r3, [pc, #528]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80134e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80134ea:	d107      	bne.n	80134fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134ec:	f107 0318 	add.w	r3, r7, #24
 80134f0:	4618      	mov	r0, r3
 80134f2:	f000 fa05 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80134fa:	e1de      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80134fc:	2300      	movs	r3, #0
 80134fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013500:	e1db      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013502:	4b7b      	ldr	r3, [pc, #492]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801350a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801350e:	d107      	bne.n	8013520 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013510:	f107 030c 	add.w	r3, r7, #12
 8013514:	4618      	mov	r0, r3
 8013516:	f000 fb47 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801351e:	e1cc      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013520:	2300      	movs	r3, #0
 8013522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013524:	e1c9      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013526:	4b72      	ldr	r3, [pc, #456]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	f003 0304 	and.w	r3, r3, #4
 801352e:	2b04      	cmp	r3, #4
 8013530:	d109      	bne.n	8013546 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013532:	4b6f      	ldr	r3, [pc, #444]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	08db      	lsrs	r3, r3, #3
 8013538:	f003 0303 	and.w	r3, r3, #3
 801353c:	4a6d      	ldr	r2, [pc, #436]	@ (80136f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801353e:	fa22 f303 	lsr.w	r3, r2, r3
 8013542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013544:	e1b9      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013546:	2300      	movs	r3, #0
 8013548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801354a:	e1b6      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801354c:	4b68      	ldr	r3, [pc, #416]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013558:	d102      	bne.n	8013560 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801355a:	4b67      	ldr	r3, [pc, #412]	@ (80136f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801355c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801355e:	e1ac      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013560:	2300      	movs	r3, #0
 8013562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013564:	e1a9      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013566:	4b62      	ldr	r3, [pc, #392]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801356e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013572:	d102      	bne.n	801357a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8013574:	4b61      	ldr	r3, [pc, #388]	@ (80136fc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013578:	e19f      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801357a:	2300      	movs	r3, #0
 801357c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801357e:	e19c      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013580:	2300      	movs	r3, #0
 8013582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013584:	e199      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013586:	e9d7 2300 	ldrd	r2, r3, [r7]
 801358a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801358e:	430b      	orrs	r3, r1
 8013590:	d173      	bne.n	801367a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8013592:	4b57      	ldr	r3, [pc, #348]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013596:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801359a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801359c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801359e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135a2:	d02f      	beq.n	8013604 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80135a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135aa:	d863      	bhi.n	8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80135ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d004      	beq.n	80135bc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80135b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135b8:	d012      	beq.n	80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80135ba:	e05b      	b.n	8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80135bc:	4b4c      	ldr	r3, [pc, #304]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80135c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80135c8:	d107      	bne.n	80135da <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80135ca:	f107 0318 	add.w	r3, r7, #24
 80135ce:	4618      	mov	r0, r3
 80135d0:	f000 f996 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135d8:	e16f      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135da:	2300      	movs	r3, #0
 80135dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135de:	e16c      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80135e0:	4b43      	ldr	r3, [pc, #268]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80135e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135ec:	d107      	bne.n	80135fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80135ee:	f107 030c 	add.w	r3, r7, #12
 80135f2:	4618      	mov	r0, r3
 80135f4:	f000 fad8 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135fc:	e15d      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135fe:	2300      	movs	r3, #0
 8013600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013602:	e15a      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013604:	4b3a      	ldr	r3, [pc, #232]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013608:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801360c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801360e:	4b38      	ldr	r3, [pc, #224]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f003 0304 	and.w	r3, r3, #4
 8013616:	2b04      	cmp	r3, #4
 8013618:	d10c      	bne.n	8013634 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801361a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801361c:	2b00      	cmp	r3, #0
 801361e:	d109      	bne.n	8013634 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013620:	4b33      	ldr	r3, [pc, #204]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	08db      	lsrs	r3, r3, #3
 8013626:	f003 0303 	and.w	r3, r3, #3
 801362a:	4a32      	ldr	r2, [pc, #200]	@ (80136f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801362c:	fa22 f303 	lsr.w	r3, r2, r3
 8013630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013632:	e01e      	b.n	8013672 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013634:	4b2e      	ldr	r3, [pc, #184]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801363c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013640:	d106      	bne.n	8013650 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013648:	d102      	bne.n	8013650 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801364a:	4b2b      	ldr	r3, [pc, #172]	@ (80136f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801364e:	e010      	b.n	8013672 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013650:	4b27      	ldr	r3, [pc, #156]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801365c:	d106      	bne.n	801366c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013664:	d102      	bne.n	801366c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013666:	4b25      	ldr	r3, [pc, #148]	@ (80136fc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801366a:	e002      	b.n	8013672 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801366c:	2300      	movs	r3, #0
 801366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013670:	e123      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013672:	e122      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013678:	e11f      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801367a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801367e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013682:	430b      	orrs	r3, r1
 8013684:	d13c      	bne.n	8013700 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013686:	4b1a      	ldr	r3, [pc, #104]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801368a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801368e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013692:	2b00      	cmp	r3, #0
 8013694:	d004      	beq.n	80136a0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801369c:	d012      	beq.n	80136c4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801369e:	e023      	b.n	80136e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80136a0:	4b13      	ldr	r3, [pc, #76]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80136a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136ac:	d107      	bne.n	80136be <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80136ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 fbcc 	bl	8013e50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80136b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136bc:	e0fd      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136be:	2300      	movs	r3, #0
 80136c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136c2:	e0fa      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80136c4:	4b0a      	ldr	r3, [pc, #40]	@ (80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80136cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80136d0:	d107      	bne.n	80136e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80136d2:	f107 0318 	add.w	r3, r7, #24
 80136d6:	4618      	mov	r0, r3
 80136d8:	f000 f912 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80136dc:	6a3b      	ldr	r3, [r7, #32]
 80136de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136e0:	e0eb      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136e2:	2300      	movs	r3, #0
 80136e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136e6:	e0e8      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80136e8:	2300      	movs	r3, #0
 80136ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136ec:	e0e5      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136ee:	bf00      	nop
 80136f0:	58024400 	.word	0x58024400
 80136f4:	03d09000 	.word	0x03d09000
 80136f8:	003d0900 	.word	0x003d0900
 80136fc:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013704:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013708:	430b      	orrs	r3, r1
 801370a:	f040 8085 	bne.w	8013818 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801370e:	4b6d      	ldr	r3, [pc, #436]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013712:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013716:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801371a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801371e:	d06b      	beq.n	80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013726:	d874      	bhi.n	8013812 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801372a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801372e:	d056      	beq.n	80137de <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013736:	d86c      	bhi.n	8013812 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801373a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801373e:	d03b      	beq.n	80137b8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013746:	d864      	bhi.n	8013812 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801374e:	d021      	beq.n	8013794 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013756:	d85c      	bhi.n	8013812 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801375a:	2b00      	cmp	r3, #0
 801375c:	d004      	beq.n	8013768 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013764:	d004      	beq.n	8013770 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013766:	e054      	b.n	8013812 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013768:	f000 f8b4 	bl	80138d4 <HAL_RCCEx_GetD3PCLK1Freq>
 801376c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801376e:	e0a4      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013770:	4b54      	ldr	r3, [pc, #336]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801377c:	d107      	bne.n	801378e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801377e:	f107 0318 	add.w	r3, r7, #24
 8013782:	4618      	mov	r0, r3
 8013784:	f000 f8bc 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801378c:	e095      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801378e:	2300      	movs	r3, #0
 8013790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013792:	e092      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013794:	4b4b      	ldr	r3, [pc, #300]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801379c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137a0:	d107      	bne.n	80137b2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80137a2:	f107 030c 	add.w	r3, r7, #12
 80137a6:	4618      	mov	r0, r3
 80137a8:	f000 f9fe 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137b0:	e083      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137b2:	2300      	movs	r3, #0
 80137b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137b6:	e080      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80137b8:	4b42      	ldr	r3, [pc, #264]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	f003 0304 	and.w	r3, r3, #4
 80137c0:	2b04      	cmp	r3, #4
 80137c2:	d109      	bne.n	80137d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80137c4:	4b3f      	ldr	r3, [pc, #252]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	08db      	lsrs	r3, r3, #3
 80137ca:	f003 0303 	and.w	r3, r3, #3
 80137ce:	4a3e      	ldr	r2, [pc, #248]	@ (80138c8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80137d0:	fa22 f303 	lsr.w	r3, r2, r3
 80137d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137d6:	e070      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137d8:	2300      	movs	r3, #0
 80137da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137dc:	e06d      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80137de:	4b39      	ldr	r3, [pc, #228]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80137e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80137ea:	d102      	bne.n	80137f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80137ec:	4b37      	ldr	r3, [pc, #220]	@ (80138cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80137ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137f0:	e063      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137f6:	e060      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80137f8:	4b32      	ldr	r3, [pc, #200]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013800:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013804:	d102      	bne.n	801380c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013806:	4b32      	ldr	r3, [pc, #200]	@ (80138d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801380a:	e056      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801380c:	2300      	movs	r3, #0
 801380e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013810:	e053      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013812:	2300      	movs	r3, #0
 8013814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013816:	e050      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013818:	e9d7 2300 	ldrd	r2, r3, [r7]
 801381c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013820:	430b      	orrs	r3, r1
 8013822:	d148      	bne.n	80138b6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013824:	4b27      	ldr	r3, [pc, #156]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013828:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801382c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013834:	d02a      	beq.n	801388c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801383c:	d838      	bhi.n	80138b0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013840:	2b00      	cmp	r3, #0
 8013842:	d004      	beq.n	801384e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801384a:	d00d      	beq.n	8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801384c:	e030      	b.n	80138b0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801384e:	4b1d      	ldr	r3, [pc, #116]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801385a:	d102      	bne.n	8013862 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801385c:	4b1c      	ldr	r3, [pc, #112]	@ (80138d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801385e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013860:	e02b      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013862:	2300      	movs	r3, #0
 8013864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013866:	e028      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013868:	4b16      	ldr	r3, [pc, #88]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013874:	d107      	bne.n	8013886 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801387a:	4618      	mov	r0, r3
 801387c:	f000 fae8 	bl	8013e50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013884:	e019      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013886:	2300      	movs	r3, #0
 8013888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801388a:	e016      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801388c:	4b0d      	ldr	r3, [pc, #52]	@ (80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013898:	d107      	bne.n	80138aa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801389a:	f107 0318 	add.w	r3, r7, #24
 801389e:	4618      	mov	r0, r3
 80138a0:	f000 f82e 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80138a8:	e007      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80138aa:	2300      	movs	r3, #0
 80138ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138ae:	e004      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80138b0:	2300      	movs	r3, #0
 80138b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138b4:	e001      	b.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80138b6:	2300      	movs	r3, #0
 80138b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80138ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3740      	adds	r7, #64	@ 0x40
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	58024400 	.word	0x58024400
 80138c8:	03d09000 	.word	0x03d09000
 80138cc:	003d0900 	.word	0x003d0900
 80138d0:	016e3600 	.word	0x016e3600

080138d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80138d8:	f7fe f92e 	bl	8011b38 <HAL_RCC_GetHCLKFreq>
 80138dc:	4602      	mov	r2, r0
 80138de:	4b06      	ldr	r3, [pc, #24]	@ (80138f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80138e0:	6a1b      	ldr	r3, [r3, #32]
 80138e2:	091b      	lsrs	r3, r3, #4
 80138e4:	f003 0307 	and.w	r3, r3, #7
 80138e8:	4904      	ldr	r1, [pc, #16]	@ (80138fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80138ea:	5ccb      	ldrb	r3, [r1, r3]
 80138ec:	f003 031f 	and.w	r3, r3, #31
 80138f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	58024400 	.word	0x58024400
 80138fc:	0801ebd4 	.word	0x0801ebd4

08013900 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013900:	b480      	push	{r7}
 8013902:	b089      	sub	sp, #36	@ 0x24
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013908:	4ba1      	ldr	r3, [pc, #644]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801390c:	f003 0303 	and.w	r3, r3, #3
 8013910:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013912:	4b9f      	ldr	r3, [pc, #636]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013916:	0b1b      	lsrs	r3, r3, #12
 8013918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801391c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801391e:	4b9c      	ldr	r3, [pc, #624]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013922:	091b      	lsrs	r3, r3, #4
 8013924:	f003 0301 	and.w	r3, r3, #1
 8013928:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801392a:	4b99      	ldr	r3, [pc, #612]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801392c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801392e:	08db      	lsrs	r3, r3, #3
 8013930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013934:	693a      	ldr	r2, [r7, #16]
 8013936:	fb02 f303 	mul.w	r3, r2, r3
 801393a:	ee07 3a90 	vmov	s15, r3
 801393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	2b00      	cmp	r3, #0
 801394a:	f000 8111 	beq.w	8013b70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801394e:	69bb      	ldr	r3, [r7, #24]
 8013950:	2b02      	cmp	r3, #2
 8013952:	f000 8083 	beq.w	8013a5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	2b02      	cmp	r3, #2
 801395a:	f200 80a1 	bhi.w	8013aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d003      	beq.n	801396c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013964:	69bb      	ldr	r3, [r7, #24]
 8013966:	2b01      	cmp	r3, #1
 8013968:	d056      	beq.n	8013a18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801396a:	e099      	b.n	8013aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801396c:	4b88      	ldr	r3, [pc, #544]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f003 0320 	and.w	r3, r3, #32
 8013974:	2b00      	cmp	r3, #0
 8013976:	d02d      	beq.n	80139d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013978:	4b85      	ldr	r3, [pc, #532]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	08db      	lsrs	r3, r3, #3
 801397e:	f003 0303 	and.w	r3, r3, #3
 8013982:	4a84      	ldr	r2, [pc, #528]	@ (8013b94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013984:	fa22 f303 	lsr.w	r3, r2, r3
 8013988:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	ee07 3a90 	vmov	s15, r3
 8013990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	ee07 3a90 	vmov	s15, r3
 801399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801399e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139a2:	4b7b      	ldr	r3, [pc, #492]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139aa:	ee07 3a90 	vmov	s15, r3
 80139ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80139b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80139b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80139ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80139be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80139c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80139c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80139d2:	e087      	b.n	8013ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	ee07 3a90 	vmov	s15, r3
 80139da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013b9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80139e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139e6:	4b6a      	ldr	r3, [pc, #424]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139ee:	ee07 3a90 	vmov	s15, r3
 80139f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80139f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80139fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80139fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013a16:	e065      	b.n	8013ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	ee07 3a90 	vmov	s15, r3
 8013a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013a2a:	4b59      	ldr	r3, [pc, #356]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a32:	ee07 3a90 	vmov	s15, r3
 8013a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013a3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013a5a:	e043      	b.n	8013ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	ee07 3a90 	vmov	s15, r3
 8013a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013a6e:	4b48      	ldr	r3, [pc, #288]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a76:	ee07 3a90 	vmov	s15, r3
 8013a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013a82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013a9e:	e021      	b.n	8013ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	ee07 3a90 	vmov	s15, r3
 8013aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013aaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ab2:	4b37      	ldr	r3, [pc, #220]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013aba:	ee07 3a90 	vmov	s15, r3
 8013abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ac6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ae2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ae8:	0a5b      	lsrs	r3, r3, #9
 8013aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013aee:	ee07 3a90 	vmov	s15, r3
 8013af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013af6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8013b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b0a:	ee17 2a90 	vmov	r2, s15
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013b12:	4b1f      	ldr	r3, [pc, #124]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b16:	0c1b      	lsrs	r3, r3, #16
 8013b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b1c:	ee07 3a90 	vmov	s15, r3
 8013b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b38:	ee17 2a90 	vmov	r2, s15
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013b40:	4b13      	ldr	r3, [pc, #76]	@ (8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b44:	0e1b      	lsrs	r3, r3, #24
 8013b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b4a:	ee07 3a90 	vmov	s15, r3
 8013b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b66:	ee17 2a90 	vmov	r2, s15
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013b6e:	e008      	b.n	8013b82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2200      	movs	r2, #0
 8013b74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	609a      	str	r2, [r3, #8]
}
 8013b82:	bf00      	nop
 8013b84:	3724      	adds	r7, #36	@ 0x24
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr
 8013b8e:	bf00      	nop
 8013b90:	58024400 	.word	0x58024400
 8013b94:	03d09000 	.word	0x03d09000
 8013b98:	46000000 	.word	0x46000000
 8013b9c:	4c742400 	.word	0x4c742400
 8013ba0:	4a742400 	.word	0x4a742400
 8013ba4:	4bb71b00 	.word	0x4bb71b00

08013ba8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013ba8:	b480      	push	{r7}
 8013baa:	b089      	sub	sp, #36	@ 0x24
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013bb0:	4ba1      	ldr	r3, [pc, #644]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bb4:	f003 0303 	and.w	r3, r3, #3
 8013bb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013bba:	4b9f      	ldr	r3, [pc, #636]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bbe:	0d1b      	lsrs	r3, r3, #20
 8013bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013bc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013bc6:	4b9c      	ldr	r3, [pc, #624]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bca:	0a1b      	lsrs	r3, r3, #8
 8013bcc:	f003 0301 	and.w	r3, r3, #1
 8013bd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013bd2:	4b99      	ldr	r3, [pc, #612]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013bd6:	08db      	lsrs	r3, r3, #3
 8013bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013bdc:	693a      	ldr	r2, [r7, #16]
 8013bde:	fb02 f303 	mul.w	r3, r2, r3
 8013be2:	ee07 3a90 	vmov	s15, r3
 8013be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f000 8111 	beq.w	8013e18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	2b02      	cmp	r3, #2
 8013bfa:	f000 8083 	beq.w	8013d04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013bfe:	69bb      	ldr	r3, [r7, #24]
 8013c00:	2b02      	cmp	r3, #2
 8013c02:	f200 80a1 	bhi.w	8013d48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013c06:	69bb      	ldr	r3, [r7, #24]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d003      	beq.n	8013c14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013c0c:	69bb      	ldr	r3, [r7, #24]
 8013c0e:	2b01      	cmp	r3, #1
 8013c10:	d056      	beq.n	8013cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013c12:	e099      	b.n	8013d48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013c14:	4b88      	ldr	r3, [pc, #544]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f003 0320 	and.w	r3, r3, #32
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d02d      	beq.n	8013c7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013c20:	4b85      	ldr	r3, [pc, #532]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	08db      	lsrs	r3, r3, #3
 8013c26:	f003 0303 	and.w	r3, r3, #3
 8013c2a:	4a84      	ldr	r2, [pc, #528]	@ (8013e3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8013c30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	ee07 3a90 	vmov	s15, r3
 8013c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	ee07 3a90 	vmov	s15, r3
 8013c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c52:	ee07 3a90 	vmov	s15, r3
 8013c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013c7a:	e087      	b.n	8013d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	ee07 3a90 	vmov	s15, r3
 8013c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013e44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c96:	ee07 3a90 	vmov	s15, r3
 8013c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ca2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013cbe:	e065      	b.n	8013d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	ee07 3a90 	vmov	s15, r3
 8013cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013cd2:	4b59      	ldr	r3, [pc, #356]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cda:	ee07 3a90 	vmov	s15, r3
 8013cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ce6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013d02:	e043      	b.n	8013d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	ee07 3a90 	vmov	s15, r3
 8013d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d16:	4b48      	ldr	r3, [pc, #288]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d1e:	ee07 3a90 	vmov	s15, r3
 8013d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013d46:	e021      	b.n	8013d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	ee07 3a90 	vmov	s15, r3
 8013d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d5a:	4b37      	ldr	r3, [pc, #220]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d62:	ee07 3a90 	vmov	s15, r3
 8013d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013d8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d90:	0a5b      	lsrs	r3, r3, #9
 8013d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d96:	ee07 3a90 	vmov	s15, r3
 8013d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8013daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013db2:	ee17 2a90 	vmov	r2, s15
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8013dba:	4b1f      	ldr	r3, [pc, #124]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dbe:	0c1b      	lsrs	r3, r3, #16
 8013dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013dc4:	ee07 3a90 	vmov	s15, r3
 8013dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8013dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013de0:	ee17 2a90 	vmov	r2, s15
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8013de8:	4b13      	ldr	r3, [pc, #76]	@ (8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dec:	0e1b      	lsrs	r3, r3, #24
 8013dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013df2:	ee07 3a90 	vmov	s15, r3
 8013df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e0e:	ee17 2a90 	vmov	r2, s15
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013e16:	e008      	b.n	8013e2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2200      	movs	r2, #0
 8013e28:	609a      	str	r2, [r3, #8]
}
 8013e2a:	bf00      	nop
 8013e2c:	3724      	adds	r7, #36	@ 0x24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr
 8013e36:	bf00      	nop
 8013e38:	58024400 	.word	0x58024400
 8013e3c:	03d09000 	.word	0x03d09000
 8013e40:	46000000 	.word	0x46000000
 8013e44:	4c742400 	.word	0x4c742400
 8013e48:	4a742400 	.word	0x4a742400
 8013e4c:	4bb71b00 	.word	0x4bb71b00

08013e50 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8013e50:	b480      	push	{r7}
 8013e52:	b089      	sub	sp, #36	@ 0x24
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013e58:	4ba0      	ldr	r3, [pc, #640]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e5c:	f003 0303 	and.w	r3, r3, #3
 8013e60:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8013e62:	4b9e      	ldr	r3, [pc, #632]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e66:	091b      	lsrs	r3, r3, #4
 8013e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013e6c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013e6e:	4b9b      	ldr	r3, [pc, #620]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e72:	f003 0301 	and.w	r3, r3, #1
 8013e76:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013e78:	4b98      	ldr	r3, [pc, #608]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e7c:	08db      	lsrs	r3, r3, #3
 8013e7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e82:	693a      	ldr	r2, [r7, #16]
 8013e84:	fb02 f303 	mul.w	r3, r2, r3
 8013e88:	ee07 3a90 	vmov	s15, r3
 8013e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e90:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	f000 8111 	beq.w	80140be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8013e9c:	69bb      	ldr	r3, [r7, #24]
 8013e9e:	2b02      	cmp	r3, #2
 8013ea0:	f000 8083 	beq.w	8013faa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	2b02      	cmp	r3, #2
 8013ea8:	f200 80a1 	bhi.w	8013fee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8013eac:	69bb      	ldr	r3, [r7, #24]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d003      	beq.n	8013eba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d056      	beq.n	8013f66 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8013eb8:	e099      	b.n	8013fee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013eba:	4b88      	ldr	r3, [pc, #544]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	f003 0320 	and.w	r3, r3, #32
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d02d      	beq.n	8013f22 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ec6:	4b85      	ldr	r3, [pc, #532]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	08db      	lsrs	r3, r3, #3
 8013ecc:	f003 0303 	and.w	r3, r3, #3
 8013ed0:	4a83      	ldr	r2, [pc, #524]	@ (80140e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8013ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8013ed6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	ee07 3a90 	vmov	s15, r3
 8013ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	ee07 3a90 	vmov	s15, r3
 8013ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ef0:	4b7a      	ldr	r3, [pc, #488]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ef8:	ee07 3a90 	vmov	s15, r3
 8013efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f00:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f04:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80140e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f1c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013f20:	e087      	b.n	8014032 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013f22:	697b      	ldr	r3, [r7, #20]
 8013f24:	ee07 3a90 	vmov	s15, r3
 8013f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f2c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80140e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f34:	4b69      	ldr	r3, [pc, #420]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f3c:	ee07 3a90 	vmov	s15, r3
 8013f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f44:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f48:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80140e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013f4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f64:	e065      	b.n	8014032 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013f66:	697b      	ldr	r3, [r7, #20]
 8013f68:	ee07 3a90 	vmov	s15, r3
 8013f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f70:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80140ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8013f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f78:	4b58      	ldr	r3, [pc, #352]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f80:	ee07 3a90 	vmov	s15, r3
 8013f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f88:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f8c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80140e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013f90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fa4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013fa8:	e043      	b.n	8014032 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	ee07 3a90 	vmov	s15, r3
 8013fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fb4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80140f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8013fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013fbc:	4b47      	ldr	r3, [pc, #284]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fc4:	ee07 3a90 	vmov	s15, r3
 8013fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013fcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8013fd0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80140e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013fdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fe8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013fec:	e021      	b.n	8014032 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	ee07 3a90 	vmov	s15, r3
 8013ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ff8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80140e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014000:	4b36      	ldr	r3, [pc, #216]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014008:	ee07 3a90 	vmov	s15, r3
 801400c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014010:	ed97 6a03 	vldr	s12, [r7, #12]
 8014014:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80140e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014018:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801401c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014024:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014028:	ee67 7a27 	vmul.f32	s15, s14, s15
 801402c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014030:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8014032:	4b2a      	ldr	r3, [pc, #168]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014036:	0a5b      	lsrs	r3, r3, #9
 8014038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801403c:	ee07 3a90 	vmov	s15, r3
 8014040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014048:	ee37 7a87 	vadd.f32	s14, s15, s14
 801404c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014058:	ee17 2a90 	vmov	r2, s15
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014060:	4b1e      	ldr	r3, [pc, #120]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014064:	0c1b      	lsrs	r3, r3, #16
 8014066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801406a:	ee07 3a90 	vmov	s15, r3
 801406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014076:	ee37 7a87 	vadd.f32	s14, s15, s14
 801407a:	edd7 6a07 	vldr	s13, [r7, #28]
 801407e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014086:	ee17 2a90 	vmov	r2, s15
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801408e:	4b13      	ldr	r3, [pc, #76]	@ (80140dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014092:	0e1b      	lsrs	r3, r3, #24
 8014094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014098:	ee07 3a90 	vmov	s15, r3
 801409c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80140a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80140a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80140ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80140b4:	ee17 2a90 	vmov	r2, s15
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80140bc:	e008      	b.n	80140d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2200      	movs	r2, #0
 80140c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2200      	movs	r2, #0
 80140c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2200      	movs	r2, #0
 80140ce:	609a      	str	r2, [r3, #8]
}
 80140d0:	bf00      	nop
 80140d2:	3724      	adds	r7, #36	@ 0x24
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr
 80140dc:	58024400 	.word	0x58024400
 80140e0:	03d09000 	.word	0x03d09000
 80140e4:	46000000 	.word	0x46000000
 80140e8:	4c742400 	.word	0x4c742400
 80140ec:	4a742400 	.word	0x4a742400
 80140f0:	4bb71b00 	.word	0x4bb71b00

080140f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b084      	sub	sp, #16
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
 80140fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80140fe:	2300      	movs	r3, #0
 8014100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014102:	4b53      	ldr	r3, [pc, #332]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014106:	f003 0303 	and.w	r3, r3, #3
 801410a:	2b03      	cmp	r3, #3
 801410c:	d101      	bne.n	8014112 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801410e:	2301      	movs	r3, #1
 8014110:	e099      	b.n	8014246 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8014112:	4b4f      	ldr	r3, [pc, #316]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	4a4e      	ldr	r2, [pc, #312]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014118:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801411c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801411e:	f7f4 ffcd 	bl	80090bc <HAL_GetTick>
 8014122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014124:	e008      	b.n	8014138 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014126:	f7f4 ffc9 	bl	80090bc <HAL_GetTick>
 801412a:	4602      	mov	r2, r0
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	1ad3      	subs	r3, r2, r3
 8014130:	2b02      	cmp	r3, #2
 8014132:	d901      	bls.n	8014138 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014134:	2303      	movs	r3, #3
 8014136:	e086      	b.n	8014246 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014138:	4b45      	ldr	r3, [pc, #276]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014140:	2b00      	cmp	r3, #0
 8014142:	d1f0      	bne.n	8014126 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014144:	4b42      	ldr	r3, [pc, #264]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014148:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	031b      	lsls	r3, r3, #12
 8014152:	493f      	ldr	r1, [pc, #252]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014154:	4313      	orrs	r3, r2
 8014156:	628b      	str	r3, [r1, #40]	@ 0x28
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	3b01      	subs	r3, #1
 801415e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	689b      	ldr	r3, [r3, #8]
 8014166:	3b01      	subs	r3, #1
 8014168:	025b      	lsls	r3, r3, #9
 801416a:	b29b      	uxth	r3, r3
 801416c:	431a      	orrs	r2, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	3b01      	subs	r3, #1
 8014174:	041b      	lsls	r3, r3, #16
 8014176:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801417a:	431a      	orrs	r2, r3
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	691b      	ldr	r3, [r3, #16]
 8014180:	3b01      	subs	r3, #1
 8014182:	061b      	lsls	r3, r3, #24
 8014184:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014188:	4931      	ldr	r1, [pc, #196]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 801418a:	4313      	orrs	r3, r2
 801418c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801418e:	4b30      	ldr	r3, [pc, #192]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014192:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	695b      	ldr	r3, [r3, #20]
 801419a:	492d      	ldr	r1, [pc, #180]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 801419c:	4313      	orrs	r3, r2
 801419e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80141a0:	4b2b      	ldr	r3, [pc, #172]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141a4:	f023 0220 	bic.w	r2, r3, #32
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	699b      	ldr	r3, [r3, #24]
 80141ac:	4928      	ldr	r1, [pc, #160]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141ae:	4313      	orrs	r3, r2
 80141b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80141b2:	4b27      	ldr	r3, [pc, #156]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141b6:	4a26      	ldr	r2, [pc, #152]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141b8:	f023 0310 	bic.w	r3, r3, #16
 80141bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80141be:	4b24      	ldr	r3, [pc, #144]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80141c2:	4b24      	ldr	r3, [pc, #144]	@ (8014254 <RCCEx_PLL2_Config+0x160>)
 80141c4:	4013      	ands	r3, r2
 80141c6:	687a      	ldr	r2, [r7, #4]
 80141c8:	69d2      	ldr	r2, [r2, #28]
 80141ca:	00d2      	lsls	r2, r2, #3
 80141cc:	4920      	ldr	r1, [pc, #128]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141ce:	4313      	orrs	r3, r2
 80141d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80141d2:	4b1f      	ldr	r3, [pc, #124]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141d6:	4a1e      	ldr	r2, [pc, #120]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141d8:	f043 0310 	orr.w	r3, r3, #16
 80141dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d106      	bne.n	80141f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80141e4:	4b1a      	ldr	r3, [pc, #104]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141e8:	4a19      	ldr	r2, [pc, #100]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80141ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80141f0:	e00f      	b.n	8014212 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	d106      	bne.n	8014206 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80141f8:	4b15      	ldr	r3, [pc, #84]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141fc:	4a14      	ldr	r2, [pc, #80]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 80141fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014204:	e005      	b.n	8014212 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8014206:	4b12      	ldr	r3, [pc, #72]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801420a:	4a11      	ldr	r2, [pc, #68]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 801420c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014210:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8014212:	4b0f      	ldr	r3, [pc, #60]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	4a0e      	ldr	r2, [pc, #56]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 8014218:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801421c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801421e:	f7f4 ff4d 	bl	80090bc <HAL_GetTick>
 8014222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014224:	e008      	b.n	8014238 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014226:	f7f4 ff49 	bl	80090bc <HAL_GetTick>
 801422a:	4602      	mov	r2, r0
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	1ad3      	subs	r3, r2, r3
 8014230:	2b02      	cmp	r3, #2
 8014232:	d901      	bls.n	8014238 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014234:	2303      	movs	r3, #3
 8014236:	e006      	b.n	8014246 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014238:	4b05      	ldr	r3, [pc, #20]	@ (8014250 <RCCEx_PLL2_Config+0x15c>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014240:	2b00      	cmp	r3, #0
 8014242:	d0f0      	beq.n	8014226 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014244:	7bfb      	ldrb	r3, [r7, #15]
}
 8014246:	4618      	mov	r0, r3
 8014248:	3710      	adds	r7, #16
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	58024400 	.word	0x58024400
 8014254:	ffff0007 	.word	0xffff0007

08014258 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014262:	2300      	movs	r3, #0
 8014264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014266:	4b53      	ldr	r3, [pc, #332]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801426a:	f003 0303 	and.w	r3, r3, #3
 801426e:	2b03      	cmp	r3, #3
 8014270:	d101      	bne.n	8014276 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014272:	2301      	movs	r3, #1
 8014274:	e099      	b.n	80143aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014276:	4b4f      	ldr	r3, [pc, #316]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	4a4e      	ldr	r2, [pc, #312]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801427c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014282:	f7f4 ff1b 	bl	80090bc <HAL_GetTick>
 8014286:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014288:	e008      	b.n	801429c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801428a:	f7f4 ff17 	bl	80090bc <HAL_GetTick>
 801428e:	4602      	mov	r2, r0
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	1ad3      	subs	r3, r2, r3
 8014294:	2b02      	cmp	r3, #2
 8014296:	d901      	bls.n	801429c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014298:	2303      	movs	r3, #3
 801429a:	e086      	b.n	80143aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801429c:	4b45      	ldr	r3, [pc, #276]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d1f0      	bne.n	801428a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80142a8:	4b42      	ldr	r3, [pc, #264]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 80142aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	051b      	lsls	r3, r3, #20
 80142b6:	493f      	ldr	r1, [pc, #252]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 80142b8:	4313      	orrs	r3, r2
 80142ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	3b01      	subs	r3, #1
 80142c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	689b      	ldr	r3, [r3, #8]
 80142ca:	3b01      	subs	r3, #1
 80142cc:	025b      	lsls	r3, r3, #9
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	431a      	orrs	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	3b01      	subs	r3, #1
 80142d8:	041b      	lsls	r3, r3, #16
 80142da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80142de:	431a      	orrs	r2, r3
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	691b      	ldr	r3, [r3, #16]
 80142e4:	3b01      	subs	r3, #1
 80142e6:	061b      	lsls	r3, r3, #24
 80142e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80142ec:	4931      	ldr	r1, [pc, #196]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 80142ee:	4313      	orrs	r3, r2
 80142f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80142f2:	4b30      	ldr	r3, [pc, #192]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 80142f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	695b      	ldr	r3, [r3, #20]
 80142fe:	492d      	ldr	r1, [pc, #180]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014300:	4313      	orrs	r3, r2
 8014302:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014304:	4b2b      	ldr	r3, [pc, #172]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014308:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	699b      	ldr	r3, [r3, #24]
 8014310:	4928      	ldr	r1, [pc, #160]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014312:	4313      	orrs	r3, r2
 8014314:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014316:	4b27      	ldr	r3, [pc, #156]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801431a:	4a26      	ldr	r2, [pc, #152]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801431c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014320:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8014322:	4b24      	ldr	r3, [pc, #144]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014326:	4b24      	ldr	r3, [pc, #144]	@ (80143b8 <RCCEx_PLL3_Config+0x160>)
 8014328:	4013      	ands	r3, r2
 801432a:	687a      	ldr	r2, [r7, #4]
 801432c:	69d2      	ldr	r2, [r2, #28]
 801432e:	00d2      	lsls	r2, r2, #3
 8014330:	4920      	ldr	r1, [pc, #128]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014332:	4313      	orrs	r3, r2
 8014334:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014336:	4b1f      	ldr	r3, [pc, #124]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801433a:	4a1e      	ldr	r2, [pc, #120]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801433c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014340:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d106      	bne.n	8014356 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014348:	4b1a      	ldr	r3, [pc, #104]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801434c:	4a19      	ldr	r2, [pc, #100]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801434e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8014352:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014354:	e00f      	b.n	8014376 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	2b01      	cmp	r3, #1
 801435a:	d106      	bne.n	801436a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801435c:	4b15      	ldr	r3, [pc, #84]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014360:	4a14      	ldr	r2, [pc, #80]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014362:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014366:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014368:	e005      	b.n	8014376 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801436a:	4b12      	ldr	r3, [pc, #72]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801436e:	4a11      	ldr	r2, [pc, #68]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014370:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014374:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014376:	4b0f      	ldr	r3, [pc, #60]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	4a0e      	ldr	r2, [pc, #56]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801437c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014382:	f7f4 fe9b 	bl	80090bc <HAL_GetTick>
 8014386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014388:	e008      	b.n	801439c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801438a:	f7f4 fe97 	bl	80090bc <HAL_GetTick>
 801438e:	4602      	mov	r2, r0
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	1ad3      	subs	r3, r2, r3
 8014394:	2b02      	cmp	r3, #2
 8014396:	d901      	bls.n	801439c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014398:	2303      	movs	r3, #3
 801439a:	e006      	b.n	80143aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801439c:	4b05      	ldr	r3, [pc, #20]	@ (80143b4 <RCCEx_PLL3_Config+0x15c>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d0f0      	beq.n	801438a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80143a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	58024400 	.word	0x58024400
 80143b8:	ffff0007 	.word	0xffff0007

080143bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b084      	sub	sp, #16
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d101      	bne.n	80143ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80143ca:	2301      	movs	r3, #1
 80143cc:	e10f      	b.n	80145ee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2200      	movs	r2, #0
 80143d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	4a87      	ldr	r2, [pc, #540]	@ (80145f8 <HAL_SPI_Init+0x23c>)
 80143da:	4293      	cmp	r3, r2
 80143dc:	d00f      	beq.n	80143fe <HAL_SPI_Init+0x42>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	4a86      	ldr	r2, [pc, #536]	@ (80145fc <HAL_SPI_Init+0x240>)
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d00a      	beq.n	80143fe <HAL_SPI_Init+0x42>
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	4a84      	ldr	r2, [pc, #528]	@ (8014600 <HAL_SPI_Init+0x244>)
 80143ee:	4293      	cmp	r3, r2
 80143f0:	d005      	beq.n	80143fe <HAL_SPI_Init+0x42>
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	2b0f      	cmp	r3, #15
 80143f8:	d901      	bls.n	80143fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80143fa:	2301      	movs	r3, #1
 80143fc:	e0f7      	b.n	80145ee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f001 ff76 	bl	80162f0 <SPI_GetPacketSize>
 8014404:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	4a7b      	ldr	r2, [pc, #492]	@ (80145f8 <HAL_SPI_Init+0x23c>)
 801440c:	4293      	cmp	r3, r2
 801440e:	d00c      	beq.n	801442a <HAL_SPI_Init+0x6e>
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	4a79      	ldr	r2, [pc, #484]	@ (80145fc <HAL_SPI_Init+0x240>)
 8014416:	4293      	cmp	r3, r2
 8014418:	d007      	beq.n	801442a <HAL_SPI_Init+0x6e>
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	4a78      	ldr	r2, [pc, #480]	@ (8014600 <HAL_SPI_Init+0x244>)
 8014420:	4293      	cmp	r3, r2
 8014422:	d002      	beq.n	801442a <HAL_SPI_Init+0x6e>
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2b08      	cmp	r3, #8
 8014428:	d811      	bhi.n	801444e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801442e:	4a72      	ldr	r2, [pc, #456]	@ (80145f8 <HAL_SPI_Init+0x23c>)
 8014430:	4293      	cmp	r3, r2
 8014432:	d009      	beq.n	8014448 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	4a70      	ldr	r2, [pc, #448]	@ (80145fc <HAL_SPI_Init+0x240>)
 801443a:	4293      	cmp	r3, r2
 801443c:	d004      	beq.n	8014448 <HAL_SPI_Init+0x8c>
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	4a6f      	ldr	r2, [pc, #444]	@ (8014600 <HAL_SPI_Init+0x244>)
 8014444:	4293      	cmp	r3, r2
 8014446:	d104      	bne.n	8014452 <HAL_SPI_Init+0x96>
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	2b10      	cmp	r3, #16
 801444c:	d901      	bls.n	8014452 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801444e:	2301      	movs	r3, #1
 8014450:	e0cd      	b.n	80145ee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014458:	b2db      	uxtb	r3, r3
 801445a:	2b00      	cmp	r3, #0
 801445c:	d106      	bne.n	801446c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2200      	movs	r2, #0
 8014462:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7f3 fea8 	bl	80081bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2202      	movs	r2, #2
 8014470:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	681a      	ldr	r2, [r3, #0]
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f022 0201 	bic.w	r2, r2, #1
 8014482:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	689b      	ldr	r3, [r3, #8]
 801448a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801448e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	699b      	ldr	r3, [r3, #24]
 8014494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014498:	d119      	bne.n	80144ce <HAL_SPI_Init+0x112>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80144a2:	d103      	bne.n	80144ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d008      	beq.n	80144be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d10c      	bne.n	80144ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80144b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80144bc:	d107      	bne.n	80144ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	681a      	ldr	r2, [r3, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80144cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d00f      	beq.n	80144fa <HAL_SPI_Init+0x13e>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	68db      	ldr	r3, [r3, #12]
 80144de:	2b06      	cmp	r3, #6
 80144e0:	d90b      	bls.n	80144fa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	430a      	orrs	r2, r1
 80144f6:	601a      	str	r2, [r3, #0]
 80144f8:	e007      	b.n	801450a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	681a      	ldr	r2, [r3, #0]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014508:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	69da      	ldr	r2, [r3, #28]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014512:	431a      	orrs	r2, r3
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	431a      	orrs	r2, r3
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801451c:	ea42 0103 	orr.w	r1, r2, r3
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	68da      	ldr	r2, [r3, #12]
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	430a      	orrs	r2, r1
 801452a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014534:	431a      	orrs	r2, r3
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801453a:	431a      	orrs	r2, r3
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	699b      	ldr	r3, [r3, #24]
 8014540:	431a      	orrs	r2, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	691b      	ldr	r3, [r3, #16]
 8014546:	431a      	orrs	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	695b      	ldr	r3, [r3, #20]
 801454c:	431a      	orrs	r2, r3
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	6a1b      	ldr	r3, [r3, #32]
 8014552:	431a      	orrs	r2, r3
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	431a      	orrs	r2, r3
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801455e:	431a      	orrs	r2, r3
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	689b      	ldr	r3, [r3, #8]
 8014564:	431a      	orrs	r2, r3
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801456a:	ea42 0103 	orr.w	r1, r2, r3
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	430a      	orrs	r2, r1
 8014578:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d113      	bne.n	80145aa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	689b      	ldr	r3, [r3, #8]
 8014588:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014594:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	689b      	ldr	r3, [r3, #8]
 801459c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80145a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	f022 0201 	bic.w	r2, r2, #1
 80145b8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d00a      	beq.n	80145dc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	430a      	orrs	r2, r1
 80145da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2200      	movs	r2, #0
 80145e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2201      	movs	r2, #1
 80145e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80145ec:	2300      	movs	r3, #0
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3710      	adds	r7, #16
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
 80145f6:	bf00      	nop
 80145f8:	40013000 	.word	0x40013000
 80145fc:	40003800 	.word	0x40003800
 8014600:	40003c00 	.word	0x40003c00

08014604 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b088      	sub	sp, #32
 8014608:	af02      	add	r7, sp, #8
 801460a:	60f8      	str	r0, [r7, #12]
 801460c:	60b9      	str	r1, [r7, #8]
 801460e:	603b      	str	r3, [r7, #0]
 8014610:	4613      	mov	r3, r2
 8014612:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	3320      	adds	r3, #32
 801461a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801461c:	f7f4 fd4e 	bl	80090bc <HAL_GetTick>
 8014620:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014628:	b2db      	uxtb	r3, r3
 801462a:	2b01      	cmp	r3, #1
 801462c:	d001      	beq.n	8014632 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 801462e:	2302      	movs	r3, #2
 8014630:	e1d1      	b.n	80149d6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d002      	beq.n	801463e <HAL_SPI_Transmit+0x3a>
 8014638:	88fb      	ldrh	r3, [r7, #6]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d101      	bne.n	8014642 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 801463e:	2301      	movs	r3, #1
 8014640:	e1c9      	b.n	80149d6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014648:	2b01      	cmp	r3, #1
 801464a:	d101      	bne.n	8014650 <HAL_SPI_Transmit+0x4c>
 801464c:	2302      	movs	r3, #2
 801464e:	e1c2      	b.n	80149d6 <HAL_SPI_Transmit+0x3d2>
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	2201      	movs	r2, #1
 8014654:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2203      	movs	r2, #3
 801465c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	2200      	movs	r2, #0
 8014664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	68ba      	ldr	r2, [r7, #8]
 801466c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	88fa      	ldrh	r2, [r7, #6]
 8014672:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	88fa      	ldrh	r2, [r7, #6]
 801467a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	2200      	movs	r2, #0
 8014682:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2200      	movs	r2, #0
 8014688:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	2200      	movs	r2, #0
 8014690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2200      	movs	r2, #0
 8014698:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	2200      	movs	r2, #0
 801469e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	689b      	ldr	r3, [r3, #8]
 80146a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80146a8:	d108      	bne.n	80146bc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80146b8:	601a      	str	r2, [r3, #0]
 80146ba:	e009      	b.n	80146d0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80146ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	685a      	ldr	r2, [r3, #4]
 80146d6:	4b96      	ldr	r3, [pc, #600]	@ (8014930 <HAL_SPI_Transmit+0x32c>)
 80146d8:	4013      	ands	r3, r2
 80146da:	88f9      	ldrh	r1, [r7, #6]
 80146dc:	68fa      	ldr	r2, [r7, #12]
 80146de:	6812      	ldr	r2, [r2, #0]
 80146e0:	430b      	orrs	r3, r1
 80146e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	f042 0201 	orr.w	r2, r2, #1
 80146f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80146fc:	d107      	bne.n	801470e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801470c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	2b0f      	cmp	r3, #15
 8014714:	d947      	bls.n	80147a6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014716:	e03f      	b.n	8014798 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	695b      	ldr	r3, [r3, #20]
 801471e:	f003 0302 	and.w	r3, r3, #2
 8014722:	2b02      	cmp	r3, #2
 8014724:	d114      	bne.n	8014750 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	6812      	ldr	r2, [r2, #0]
 8014730:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014736:	1d1a      	adds	r2, r3, #4
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014742:	b29b      	uxth	r3, r3
 8014744:	3b01      	subs	r3, #1
 8014746:	b29a      	uxth	r2, r3
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801474e:	e023      	b.n	8014798 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014750:	f7f4 fcb4 	bl	80090bc <HAL_GetTick>
 8014754:	4602      	mov	r2, r0
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	1ad3      	subs	r3, r2, r3
 801475a:	683a      	ldr	r2, [r7, #0]
 801475c:	429a      	cmp	r2, r3
 801475e:	d803      	bhi.n	8014768 <HAL_SPI_Transmit+0x164>
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014766:	d102      	bne.n	801476e <HAL_SPI_Transmit+0x16a>
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d114      	bne.n	8014798 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801476e:	68f8      	ldr	r0, [r7, #12]
 8014770:	f001 fcf0 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801477a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	2201      	movs	r2, #1
 8014788:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	2200      	movs	r2, #0
 8014790:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014794:	2303      	movs	r3, #3
 8014796:	e11e      	b.n	80149d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801479e:	b29b      	uxth	r3, r3
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d1b9      	bne.n	8014718 <HAL_SPI_Transmit+0x114>
 80147a4:	e0f1      	b.n	801498a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	68db      	ldr	r3, [r3, #12]
 80147aa:	2b07      	cmp	r3, #7
 80147ac:	f240 80e6 	bls.w	801497c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80147b0:	e05d      	b.n	801486e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	695b      	ldr	r3, [r3, #20]
 80147b8:	f003 0302 	and.w	r3, r3, #2
 80147bc:	2b02      	cmp	r3, #2
 80147be:	d132      	bne.n	8014826 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d918      	bls.n	80147fe <HAL_SPI_Transmit+0x1fa>
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d014      	beq.n	80147fe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	6812      	ldr	r2, [r2, #0]
 80147de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80147e4:	1d1a      	adds	r2, r3, #4
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	3b02      	subs	r3, #2
 80147f4:	b29a      	uxth	r2, r3
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80147fc:	e037      	b.n	801486e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014802:	881a      	ldrh	r2, [r3, #0]
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801480c:	1c9a      	adds	r2, r3, #2
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014818:	b29b      	uxth	r3, r3
 801481a:	3b01      	subs	r3, #1
 801481c:	b29a      	uxth	r2, r3
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014824:	e023      	b.n	801486e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014826:	f7f4 fc49 	bl	80090bc <HAL_GetTick>
 801482a:	4602      	mov	r2, r0
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	683a      	ldr	r2, [r7, #0]
 8014832:	429a      	cmp	r2, r3
 8014834:	d803      	bhi.n	801483e <HAL_SPI_Transmit+0x23a>
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801483c:	d102      	bne.n	8014844 <HAL_SPI_Transmit+0x240>
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d114      	bne.n	801486e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014844:	68f8      	ldr	r0, [r7, #12]
 8014846:	f001 fc85 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014850:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2201      	movs	r2, #1
 801485e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2200      	movs	r2, #0
 8014866:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801486a:	2303      	movs	r3, #3
 801486c:	e0b3      	b.n	80149d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014874:	b29b      	uxth	r3, r3
 8014876:	2b00      	cmp	r3, #0
 8014878:	d19b      	bne.n	80147b2 <HAL_SPI_Transmit+0x1ae>
 801487a:	e086      	b.n	801498a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	695b      	ldr	r3, [r3, #20]
 8014882:	f003 0302 	and.w	r3, r3, #2
 8014886:	2b02      	cmp	r3, #2
 8014888:	d154      	bne.n	8014934 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014890:	b29b      	uxth	r3, r3
 8014892:	2b03      	cmp	r3, #3
 8014894:	d918      	bls.n	80148c8 <HAL_SPI_Transmit+0x2c4>
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801489a:	2b40      	cmp	r3, #64	@ 0x40
 801489c:	d914      	bls.n	80148c8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	6812      	ldr	r2, [r2, #0]
 80148a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148ae:	1d1a      	adds	r2, r3, #4
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	3b04      	subs	r3, #4
 80148be:	b29a      	uxth	r2, r3
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80148c6:	e059      	b.n	801497c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d917      	bls.n	8014904 <HAL_SPI_Transmit+0x300>
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d013      	beq.n	8014904 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148e0:	881a      	ldrh	r2, [r3, #0]
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148ea:	1c9a      	adds	r2, r3, #2
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	3b02      	subs	r3, #2
 80148fa:	b29a      	uxth	r2, r3
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014902:	e03b      	b.n	801497c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	3320      	adds	r3, #32
 801490e:	7812      	ldrb	r2, [r2, #0]
 8014910:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014916:	1c5a      	adds	r2, r3, #1
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014922:	b29b      	uxth	r3, r3
 8014924:	3b01      	subs	r3, #1
 8014926:	b29a      	uxth	r2, r3
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801492e:	e025      	b.n	801497c <HAL_SPI_Transmit+0x378>
 8014930:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014934:	f7f4 fbc2 	bl	80090bc <HAL_GetTick>
 8014938:	4602      	mov	r2, r0
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	1ad3      	subs	r3, r2, r3
 801493e:	683a      	ldr	r2, [r7, #0]
 8014940:	429a      	cmp	r2, r3
 8014942:	d803      	bhi.n	801494c <HAL_SPI_Transmit+0x348>
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801494a:	d102      	bne.n	8014952 <HAL_SPI_Transmit+0x34e>
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d114      	bne.n	801497c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014952:	68f8      	ldr	r0, [r7, #12]
 8014954:	f001 fbfe 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801495e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2201      	movs	r2, #1
 801496c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2200      	movs	r2, #0
 8014974:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014978:	2303      	movs	r3, #3
 801497a:	e02c      	b.n	80149d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014982:	b29b      	uxth	r3, r3
 8014984:	2b00      	cmp	r3, #0
 8014986:	f47f af79 	bne.w	801487c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801498a:	693b      	ldr	r3, [r7, #16]
 801498c:	9300      	str	r3, [sp, #0]
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	2200      	movs	r2, #0
 8014992:	2108      	movs	r1, #8
 8014994:	68f8      	ldr	r0, [r7, #12]
 8014996:	f001 fc7d 	bl	8016294 <SPI_WaitOnFlagUntilTimeout>
 801499a:	4603      	mov	r3, r0
 801499c:	2b00      	cmp	r3, #0
 801499e:	d007      	beq.n	80149b0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80149a6:	f043 0220 	orr.w	r2, r3, #32
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80149b0:	68f8      	ldr	r0, [r7, #12]
 80149b2:	f001 fbcf 	bl	8016154 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2201      	movs	r2, #1
 80149ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2200      	movs	r2, #0
 80149c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d001      	beq.n	80149d4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80149d0:	2301      	movs	r3, #1
 80149d2:	e000      	b.n	80149d6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80149d4:	2300      	movs	r3, #0
  }
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3718      	adds	r7, #24
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop

080149e0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b088      	sub	sp, #32
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	603b      	str	r3, [r7, #0]
 80149ec:	4613      	mov	r3, r2
 80149ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149f4:	095b      	lsrs	r3, r3, #5
 80149f6:	b29b      	uxth	r3, r3
 80149f8:	3301      	adds	r3, #1
 80149fa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	3330      	adds	r3, #48	@ 0x30
 8014a02:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014a04:	f7f4 fb5a 	bl	80090bc <HAL_GetTick>
 8014a08:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	2b01      	cmp	r3, #1
 8014a14:	d001      	beq.n	8014a1a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014a16:	2302      	movs	r3, #2
 8014a18:	e250      	b.n	8014ebc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d002      	beq.n	8014a26 <HAL_SPI_Receive+0x46>
 8014a20:	88fb      	ldrh	r3, [r7, #6]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d101      	bne.n	8014a2a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014a26:	2301      	movs	r3, #1
 8014a28:	e248      	b.n	8014ebc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d101      	bne.n	8014a38 <HAL_SPI_Receive+0x58>
 8014a34:	2302      	movs	r3, #2
 8014a36:	e241      	b.n	8014ebc <HAL_SPI_Receive+0x4dc>
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2204      	movs	r2, #4
 8014a44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	68ba      	ldr	r2, [r7, #8]
 8014a54:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	88fa      	ldrh	r2, [r7, #6]
 8014a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	88fa      	ldrh	r2, [r7, #6]
 8014a62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2200      	movs	r2, #0
 8014a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2200      	movs	r2, #0
 8014a70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2200      	movs	r2, #0
 8014a78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2200      	movs	r2, #0
 8014a80:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2200      	movs	r2, #0
 8014a86:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	689b      	ldr	r3, [r3, #8]
 8014a8c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014a90:	d108      	bne.n	8014aa4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	681a      	ldr	r2, [r3, #0]
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014aa0:	601a      	str	r2, [r3, #0]
 8014aa2:	e009      	b.n	8014ab8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014ab6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	685a      	ldr	r2, [r3, #4]
 8014abe:	4b95      	ldr	r3, [pc, #596]	@ (8014d14 <HAL_SPI_Receive+0x334>)
 8014ac0:	4013      	ands	r3, r2
 8014ac2:	88f9      	ldrh	r1, [r7, #6]
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	6812      	ldr	r2, [r2, #0]
 8014ac8:	430b      	orrs	r3, r1
 8014aca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	f042 0201 	orr.w	r2, r2, #1
 8014ada:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014ae4:	d107      	bne.n	8014af6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014af4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	68db      	ldr	r3, [r3, #12]
 8014afa:	2b0f      	cmp	r3, #15
 8014afc:	d96c      	bls.n	8014bd8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014afe:	e064      	b.n	8014bca <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	695b      	ldr	r3, [r3, #20]
 8014b06:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	695b      	ldr	r3, [r3, #20]
 8014b0e:	f003 0301 	and.w	r3, r3, #1
 8014b12:	2b01      	cmp	r3, #1
 8014b14:	d114      	bne.n	8014b40 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014b20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b26:	1d1a      	adds	r2, r3, #4
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	3b01      	subs	r3, #1
 8014b36:	b29a      	uxth	r2, r3
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014b3e:	e044      	b.n	8014bca <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	8bfa      	ldrh	r2, [r7, #30]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d919      	bls.n	8014b82 <HAL_SPI_Receive+0x1a2>
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d014      	beq.n	8014b82 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014b62:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b68:	1d1a      	adds	r2, r3, #4
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	3b01      	subs	r3, #1
 8014b78:	b29a      	uxth	r2, r3
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014b80:	e023      	b.n	8014bca <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014b82:	f7f4 fa9b 	bl	80090bc <HAL_GetTick>
 8014b86:	4602      	mov	r2, r0
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	1ad3      	subs	r3, r2, r3
 8014b8c:	683a      	ldr	r2, [r7, #0]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d803      	bhi.n	8014b9a <HAL_SPI_Receive+0x1ba>
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b98:	d102      	bne.n	8014ba0 <HAL_SPI_Receive+0x1c0>
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d114      	bne.n	8014bca <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014ba0:	68f8      	ldr	r0, [r7, #12]
 8014ba2:	f001 fad7 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014bac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2201      	movs	r2, #1
 8014bba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014bc6:	2303      	movs	r3, #3
 8014bc8:	e178      	b.n	8014ebc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d194      	bne.n	8014b00 <HAL_SPI_Receive+0x120>
 8014bd6:	e15e      	b.n	8014e96 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	68db      	ldr	r3, [r3, #12]
 8014bdc:	2b07      	cmp	r3, #7
 8014bde:	f240 8153 	bls.w	8014e88 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014be2:	e08f      	b.n	8014d04 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	695b      	ldr	r3, [r3, #20]
 8014bea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	695b      	ldr	r3, [r3, #20]
 8014bf2:	f003 0301 	and.w	r3, r3, #1
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d114      	bne.n	8014c24 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bfe:	69ba      	ldr	r2, [r7, #24]
 8014c00:	8812      	ldrh	r2, [r2, #0]
 8014c02:	b292      	uxth	r2, r2
 8014c04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c0a:	1c9a      	adds	r2, r3, #2
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	b29a      	uxth	r2, r3
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c22:	e06f      	b.n	8014d04 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	8bfa      	ldrh	r2, [r7, #30]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d924      	bls.n	8014c7c <HAL_SPI_Receive+0x29c>
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d01f      	beq.n	8014c7c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c40:	69ba      	ldr	r2, [r7, #24]
 8014c42:	8812      	ldrh	r2, [r2, #0]
 8014c44:	b292      	uxth	r2, r2
 8014c46:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c4c:	1c9a      	adds	r2, r3, #2
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c56:	69ba      	ldr	r2, [r7, #24]
 8014c58:	8812      	ldrh	r2, [r2, #0]
 8014c5a:	b292      	uxth	r2, r2
 8014c5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c62:	1c9a      	adds	r2, r3, #2
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	3b02      	subs	r3, #2
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c7a:	e043      	b.n	8014d04 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	d119      	bne.n	8014cbc <HAL_SPI_Receive+0x2dc>
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d014      	beq.n	8014cbc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c96:	69ba      	ldr	r2, [r7, #24]
 8014c98:	8812      	ldrh	r2, [r2, #0]
 8014c9a:	b292      	uxth	r2, r2
 8014c9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ca2:	1c9a      	adds	r2, r3, #2
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cae:	b29b      	uxth	r3, r3
 8014cb0:	3b01      	subs	r3, #1
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014cba:	e023      	b.n	8014d04 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014cbc:	f7f4 f9fe 	bl	80090bc <HAL_GetTick>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	1ad3      	subs	r3, r2, r3
 8014cc6:	683a      	ldr	r2, [r7, #0]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d803      	bhi.n	8014cd4 <HAL_SPI_Receive+0x2f4>
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cd2:	d102      	bne.n	8014cda <HAL_SPI_Receive+0x2fa>
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d114      	bne.n	8014d04 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014cda:	68f8      	ldr	r0, [r7, #12]
 8014cdc:	f001 fa3a 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ce6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014d00:	2303      	movs	r3, #3
 8014d02:	e0db      	b.n	8014ebc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d0a:	b29b      	uxth	r3, r3
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	f47f af69 	bne.w	8014be4 <HAL_SPI_Receive+0x204>
 8014d12:	e0c0      	b.n	8014e96 <HAL_SPI_Receive+0x4b6>
 8014d14:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	695b      	ldr	r3, [r3, #20]
 8014d1e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	695b      	ldr	r3, [r3, #20]
 8014d26:	f003 0301 	and.w	r3, r3, #1
 8014d2a:	2b01      	cmp	r3, #1
 8014d2c:	d117      	bne.n	8014d5e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d3a:	7812      	ldrb	r2, [r2, #0]
 8014d3c:	b2d2      	uxtb	r2, r2
 8014d3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d44:	1c5a      	adds	r2, r3, #1
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	3b01      	subs	r3, #1
 8014d54:	b29a      	uxth	r2, r3
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014d5c:	e094      	b.n	8014e88 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	8bfa      	ldrh	r2, [r7, #30]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d946      	bls.n	8014dfa <HAL_SPI_Receive+0x41a>
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d041      	beq.n	8014dfa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d82:	7812      	ldrb	r2, [r2, #0]
 8014d84:	b2d2      	uxtb	r2, r2
 8014d86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d8c:	1c5a      	adds	r2, r3, #1
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d9e:	7812      	ldrb	r2, [r2, #0]
 8014da0:	b2d2      	uxtb	r2, r2
 8014da2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014da8:	1c5a      	adds	r2, r3, #1
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dba:	7812      	ldrb	r2, [r2, #0]
 8014dbc:	b2d2      	uxtb	r2, r2
 8014dbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dc4:	1c5a      	adds	r2, r3, #1
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dd6:	7812      	ldrb	r2, [r2, #0]
 8014dd8:	b2d2      	uxtb	r2, r2
 8014dda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014de0:	1c5a      	adds	r2, r3, #1
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	3b04      	subs	r3, #4
 8014df0:	b29a      	uxth	r2, r3
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014df8:	e046      	b.n	8014e88 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	2b03      	cmp	r3, #3
 8014e04:	d81c      	bhi.n	8014e40 <HAL_SPI_Receive+0x460>
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d017      	beq.n	8014e40 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e1c:	7812      	ldrb	r2, [r2, #0]
 8014e1e:	b2d2      	uxtb	r2, r2
 8014e20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e26:	1c5a      	adds	r2, r3, #1
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	3b01      	subs	r3, #1
 8014e36:	b29a      	uxth	r2, r3
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014e3e:	e023      	b.n	8014e88 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014e40:	f7f4 f93c 	bl	80090bc <HAL_GetTick>
 8014e44:	4602      	mov	r2, r0
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	1ad3      	subs	r3, r2, r3
 8014e4a:	683a      	ldr	r2, [r7, #0]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d803      	bhi.n	8014e58 <HAL_SPI_Receive+0x478>
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e56:	d102      	bne.n	8014e5e <HAL_SPI_Receive+0x47e>
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d114      	bne.n	8014e88 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014e5e:	68f8      	ldr	r0, [r7, #12]
 8014e60:	f001 f978 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2201      	movs	r2, #1
 8014e78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	2200      	movs	r2, #0
 8014e80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e84:	2303      	movs	r3, #3
 8014e86:	e019      	b.n	8014ebc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e8e:	b29b      	uxth	r3, r3
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	f47f af41 	bne.w	8014d18 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014e96:	68f8      	ldr	r0, [r7, #12]
 8014e98:	f001 f95c 	bl	8016154 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2201      	movs	r2, #1
 8014ea0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d001      	beq.n	8014eba <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	e000      	b.n	8014ebc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8014eba:	2300      	movs	r3, #0
  }
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3720      	adds	r7, #32
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b08e      	sub	sp, #56	@ 0x38
 8014ec8:	af02      	add	r7, sp, #8
 8014eca:	60f8      	str	r0, [r7, #12]
 8014ecc:	60b9      	str	r1, [r7, #8]
 8014ece:	607a      	str	r2, [r7, #4]
 8014ed0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	3320      	adds	r3, #32
 8014ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	3330      	adds	r3, #48	@ 0x30
 8014ee0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ee6:	095b      	lsrs	r3, r3, #5
 8014ee8:	b29b      	uxth	r3, r3
 8014eea:	3301      	adds	r3, #1
 8014eec:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014eee:	f7f4 f8e5 	bl	80090bc <HAL_GetTick>
 8014ef2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8014ef4:	887b      	ldrh	r3, [r7, #2]
 8014ef6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8014ef8:	887b      	ldrh	r3, [r7, #2]
 8014efa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014f02:	b2db      	uxtb	r3, r3
 8014f04:	2b01      	cmp	r3, #1
 8014f06:	d001      	beq.n	8014f0c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8014f08:	2302      	movs	r3, #2
 8014f0a:	e310      	b.n	801552e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d005      	beq.n	8014f1e <HAL_SPI_TransmitReceive+0x5a>
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d002      	beq.n	8014f1e <HAL_SPI_TransmitReceive+0x5a>
 8014f18:	887b      	ldrh	r3, [r7, #2]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d101      	bne.n	8014f22 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8014f1e:	2301      	movs	r3, #1
 8014f20:	e305      	b.n	801552e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	d101      	bne.n	8014f30 <HAL_SPI_TransmitReceive+0x6c>
 8014f2c:	2302      	movs	r3, #2
 8014f2e:	e2fe      	b.n	801552e <HAL_SPI_TransmitReceive+0x66a>
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2201      	movs	r2, #1
 8014f34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2205      	movs	r2, #5
 8014f3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	2200      	movs	r2, #0
 8014f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	887a      	ldrh	r2, [r7, #2]
 8014f52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	887a      	ldrh	r2, [r7, #2]
 8014f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	68ba      	ldr	r2, [r7, #8]
 8014f62:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	887a      	ldrh	r2, [r7, #2]
 8014f68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	887a      	ldrh	r2, [r7, #2]
 8014f70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2200      	movs	r2, #0
 8014f78:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	68da      	ldr	r2, [r3, #12]
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8014f8e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	4a70      	ldr	r2, [pc, #448]	@ (8015158 <HAL_SPI_TransmitReceive+0x294>)
 8014f96:	4293      	cmp	r3, r2
 8014f98:	d009      	beq.n	8014fae <HAL_SPI_TransmitReceive+0xea>
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	4a6f      	ldr	r2, [pc, #444]	@ (801515c <HAL_SPI_TransmitReceive+0x298>)
 8014fa0:	4293      	cmp	r3, r2
 8014fa2:	d004      	beq.n	8014fae <HAL_SPI_TransmitReceive+0xea>
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	4a6d      	ldr	r2, [pc, #436]	@ (8015160 <HAL_SPI_TransmitReceive+0x29c>)
 8014faa:	4293      	cmp	r3, r2
 8014fac:	d102      	bne.n	8014fb4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8014fae:	2310      	movs	r3, #16
 8014fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014fb2:	e001      	b.n	8014fb8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8014fb4:	2308      	movs	r3, #8
 8014fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	685a      	ldr	r2, [r3, #4]
 8014fbe:	4b69      	ldr	r3, [pc, #420]	@ (8015164 <HAL_SPI_TransmitReceive+0x2a0>)
 8014fc0:	4013      	ands	r3, r2
 8014fc2:	8879      	ldrh	r1, [r7, #2]
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	6812      	ldr	r2, [r2, #0]
 8014fc8:	430b      	orrs	r3, r1
 8014fca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	f042 0201 	orr.w	r2, r2, #1
 8014fda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014fe4:	d107      	bne.n	8014ff6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	68db      	ldr	r3, [r3, #12]
 8014ffa:	2b0f      	cmp	r3, #15
 8014ffc:	f240 80a2 	bls.w	8015144 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8015000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015002:	089b      	lsrs	r3, r3, #2
 8015004:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015006:	e094      	b.n	8015132 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	695b      	ldr	r3, [r3, #20]
 801500e:	f003 0302 	and.w	r3, r3, #2
 8015012:	2b02      	cmp	r3, #2
 8015014:	d120      	bne.n	8015058 <HAL_SPI_TransmitReceive+0x194>
 8015016:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015018:	2b00      	cmp	r3, #0
 801501a:	d01d      	beq.n	8015058 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801501c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801501e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015022:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015024:	429a      	cmp	r2, r3
 8015026:	d217      	bcs.n	8015058 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	6812      	ldr	r2, [r2, #0]
 8015032:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015038:	1d1a      	adds	r2, r3, #4
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015044:	b29b      	uxth	r3, r3
 8015046:	3b01      	subs	r3, #1
 8015048:	b29a      	uxth	r2, r3
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015056:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	695b      	ldr	r3, [r3, #20]
 801505e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015060:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015062:	2b00      	cmp	r3, #0
 8015064:	d065      	beq.n	8015132 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	695b      	ldr	r3, [r3, #20]
 801506c:	f003 0301 	and.w	r3, r3, #1
 8015070:	2b01      	cmp	r3, #1
 8015072:	d118      	bne.n	80150a6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801507c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801507e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015084:	1d1a      	adds	r2, r3, #4
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015090:	b29b      	uxth	r3, r3
 8015092:	3b01      	subs	r3, #1
 8015094:	b29a      	uxth	r2, r3
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80150a4:	e045      	b.n	8015132 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80150a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80150a8:	8bfb      	ldrh	r3, [r7, #30]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d21d      	bcs.n	80150ea <HAL_SPI_TransmitReceive+0x226>
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d018      	beq.n	80150ea <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80150c2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150c8:	1d1a      	adds	r2, r3, #4
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150d4:	b29b      	uxth	r3, r3
 80150d6:	3b01      	subs	r3, #1
 80150d8:	b29a      	uxth	r2, r3
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80150e8:	e023      	b.n	8015132 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80150ea:	f7f3 ffe7 	bl	80090bc <HAL_GetTick>
 80150ee:	4602      	mov	r2, r0
 80150f0:	69bb      	ldr	r3, [r7, #24]
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d803      	bhi.n	8015102 <HAL_SPI_TransmitReceive+0x23e>
 80150fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015100:	d102      	bne.n	8015108 <HAL_SPI_TransmitReceive+0x244>
 8015102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015104:	2b00      	cmp	r3, #0
 8015106:	d114      	bne.n	8015132 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015108:	68f8      	ldr	r0, [r7, #12]
 801510a:	f001 f823 	bl	8016154 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015114:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	2201      	movs	r2, #1
 8015122:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2200      	movs	r2, #0
 801512a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801512e:	2303      	movs	r3, #3
 8015130:	e1fd      	b.n	801552e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015132:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015134:	2b00      	cmp	r3, #0
 8015136:	f47f af67 	bne.w	8015008 <HAL_SPI_TransmitReceive+0x144>
 801513a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801513c:	2b00      	cmp	r3, #0
 801513e:	f47f af63 	bne.w	8015008 <HAL_SPI_TransmitReceive+0x144>
 8015142:	e1ce      	b.n	80154e2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	68db      	ldr	r3, [r3, #12]
 8015148:	2b07      	cmp	r3, #7
 801514a:	f240 81c2 	bls.w	80154d2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 801514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015150:	085b      	lsrs	r3, r3, #1
 8015152:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015154:	e0c9      	b.n	80152ea <HAL_SPI_TransmitReceive+0x426>
 8015156:	bf00      	nop
 8015158:	40013000 	.word	0x40013000
 801515c:	40003800 	.word	0x40003800
 8015160:	40003c00 	.word	0x40003c00
 8015164:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	695b      	ldr	r3, [r3, #20]
 801516e:	f003 0302 	and.w	r3, r3, #2
 8015172:	2b02      	cmp	r3, #2
 8015174:	d11f      	bne.n	80151b6 <HAL_SPI_TransmitReceive+0x2f2>
 8015176:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015178:	2b00      	cmp	r3, #0
 801517a:	d01c      	beq.n	80151b6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801517c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801517e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015182:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015184:	429a      	cmp	r2, r3
 8015186:	d216      	bcs.n	80151b6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801518c:	881a      	ldrh	r2, [r3, #0]
 801518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015190:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015196:	1c9a      	adds	r2, r3, #2
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80151a2:	b29b      	uxth	r3, r3
 80151a4:	3b01      	subs	r3, #1
 80151a6:	b29a      	uxth	r2, r3
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80151b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	695b      	ldr	r3, [r3, #20]
 80151bc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80151be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	f000 8092 	beq.w	80152ea <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	695b      	ldr	r3, [r3, #20]
 80151cc:	f003 0301 	and.w	r3, r3, #1
 80151d0:	2b01      	cmp	r3, #1
 80151d2:	d118      	bne.n	8015206 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151d8:	6a3a      	ldr	r2, [r7, #32]
 80151da:	8812      	ldrh	r2, [r2, #0]
 80151dc:	b292      	uxth	r2, r2
 80151de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151e4:	1c9a      	adds	r2, r3, #2
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151f0:	b29b      	uxth	r3, r3
 80151f2:	3b01      	subs	r3, #1
 80151f4:	b29a      	uxth	r2, r3
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015202:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015204:	e071      	b.n	80152ea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015206:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015208:	8bfb      	ldrh	r3, [r7, #30]
 801520a:	429a      	cmp	r2, r3
 801520c:	d228      	bcs.n	8015260 <HAL_SPI_TransmitReceive+0x39c>
 801520e:	697b      	ldr	r3, [r7, #20]
 8015210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015214:	2b00      	cmp	r3, #0
 8015216:	d023      	beq.n	8015260 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801521c:	6a3a      	ldr	r2, [r7, #32]
 801521e:	8812      	ldrh	r2, [r2, #0]
 8015220:	b292      	uxth	r2, r2
 8015222:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015228:	1c9a      	adds	r2, r3, #2
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015232:	6a3a      	ldr	r2, [r7, #32]
 8015234:	8812      	ldrh	r2, [r2, #0]
 8015236:	b292      	uxth	r2, r2
 8015238:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801523e:	1c9a      	adds	r2, r3, #2
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801524a:	b29b      	uxth	r3, r3
 801524c:	3b02      	subs	r3, #2
 801524e:	b29a      	uxth	r2, r3
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801525c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801525e:	e044      	b.n	80152ea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015260:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015262:	2b01      	cmp	r3, #1
 8015264:	d11d      	bne.n	80152a2 <HAL_SPI_TransmitReceive+0x3de>
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801526c:	2b00      	cmp	r3, #0
 801526e:	d018      	beq.n	80152a2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015274:	6a3a      	ldr	r2, [r7, #32]
 8015276:	8812      	ldrh	r2, [r2, #0]
 8015278:	b292      	uxth	r2, r2
 801527a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015280:	1c9a      	adds	r2, r3, #2
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801528c:	b29b      	uxth	r3, r3
 801528e:	3b01      	subs	r3, #1
 8015290:	b29a      	uxth	r2, r3
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801529e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80152a0:	e023      	b.n	80152ea <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80152a2:	f7f3 ff0b 	bl	80090bc <HAL_GetTick>
 80152a6:	4602      	mov	r2, r0
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	1ad3      	subs	r3, r2, r3
 80152ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80152ae:	429a      	cmp	r2, r3
 80152b0:	d803      	bhi.n	80152ba <HAL_SPI_TransmitReceive+0x3f6>
 80152b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152b8:	d102      	bne.n	80152c0 <HAL_SPI_TransmitReceive+0x3fc>
 80152ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d114      	bne.n	80152ea <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	f000 ff47 	bl	8016154 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	2201      	movs	r2, #1
 80152da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	2200      	movs	r2, #0
 80152e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80152e6:	2303      	movs	r3, #3
 80152e8:	e121      	b.n	801552e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80152ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	f47f af3b 	bne.w	8015168 <HAL_SPI_TransmitReceive+0x2a4>
 80152f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f47f af37 	bne.w	8015168 <HAL_SPI_TransmitReceive+0x2a4>
 80152fa:	e0f2      	b.n	80154e2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	695b      	ldr	r3, [r3, #20]
 8015302:	f003 0302 	and.w	r3, r3, #2
 8015306:	2b02      	cmp	r3, #2
 8015308:	d121      	bne.n	801534e <HAL_SPI_TransmitReceive+0x48a>
 801530a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801530c:	2b00      	cmp	r3, #0
 801530e:	d01e      	beq.n	801534e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015310:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015312:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015316:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015318:	429a      	cmp	r2, r3
 801531a:	d218      	bcs.n	801534e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	3320      	adds	r3, #32
 8015326:	7812      	ldrb	r2, [r2, #0]
 8015328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801532e:	1c5a      	adds	r2, r3, #1
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801533a:	b29b      	uxth	r3, r3
 801533c:	3b01      	subs	r3, #1
 801533e:	b29a      	uxth	r2, r3
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801534c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	695b      	ldr	r3, [r3, #20]
 8015354:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015356:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015358:	2b00      	cmp	r3, #0
 801535a:	f000 80ba 	beq.w	80154d2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	695b      	ldr	r3, [r3, #20]
 8015364:	f003 0301 	and.w	r3, r3, #1
 8015368:	2b01      	cmp	r3, #1
 801536a:	d11b      	bne.n	80153a4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015378:	7812      	ldrb	r2, [r2, #0]
 801537a:	b2d2      	uxtb	r2, r2
 801537c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015382:	1c5a      	adds	r2, r3, #1
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801538e:	b29b      	uxth	r3, r3
 8015390:	3b01      	subs	r3, #1
 8015392:	b29a      	uxth	r2, r3
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153a0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80153a2:	e096      	b.n	80154d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80153a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80153a6:	8bfb      	ldrh	r3, [r7, #30]
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d24a      	bcs.n	8015442 <HAL_SPI_TransmitReceive+0x57e>
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d045      	beq.n	8015442 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153c2:	7812      	ldrb	r2, [r2, #0]
 80153c4:	b2d2      	uxtb	r2, r2
 80153c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153cc:	1c5a      	adds	r2, r3, #1
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153de:	7812      	ldrb	r2, [r2, #0]
 80153e0:	b2d2      	uxtb	r2, r2
 80153e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153e8:	1c5a      	adds	r2, r3, #1
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153fa:	7812      	ldrb	r2, [r2, #0]
 80153fc:	b2d2      	uxtb	r2, r2
 80153fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015404:	1c5a      	adds	r2, r3, #1
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015416:	7812      	ldrb	r2, [r2, #0]
 8015418:	b2d2      	uxtb	r2, r2
 801541a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015420:	1c5a      	adds	r2, r3, #1
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801542c:	b29b      	uxth	r3, r3
 801542e:	3b04      	subs	r3, #4
 8015430:	b29a      	uxth	r2, r3
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801543e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015440:	e047      	b.n	80154d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8015442:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015444:	2b03      	cmp	r3, #3
 8015446:	d820      	bhi.n	801548a <HAL_SPI_TransmitReceive+0x5c6>
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801544e:	2b00      	cmp	r3, #0
 8015450:	d01b      	beq.n	801548a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801545e:	7812      	ldrb	r2, [r2, #0]
 8015460:	b2d2      	uxtb	r2, r2
 8015462:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015468:	1c5a      	adds	r2, r3, #1
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015474:	b29b      	uxth	r3, r3
 8015476:	3b01      	subs	r3, #1
 8015478:	b29a      	uxth	r2, r3
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015486:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015488:	e023      	b.n	80154d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801548a:	f7f3 fe17 	bl	80090bc <HAL_GetTick>
 801548e:	4602      	mov	r2, r0
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	1ad3      	subs	r3, r2, r3
 8015494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015496:	429a      	cmp	r2, r3
 8015498:	d803      	bhi.n	80154a2 <HAL_SPI_TransmitReceive+0x5de>
 801549a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154a0:	d102      	bne.n	80154a8 <HAL_SPI_TransmitReceive+0x5e4>
 80154a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d114      	bne.n	80154d2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f000 fe53 	bl	8016154 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80154b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2201      	movs	r2, #1
 80154c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2200      	movs	r2, #0
 80154ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80154ce:	2303      	movs	r3, #3
 80154d0:	e02d      	b.n	801552e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80154d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	f47f af11 	bne.w	80152fc <HAL_SPI_TransmitReceive+0x438>
 80154da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80154dc:	2b00      	cmp	r3, #0
 80154de:	f47f af0d 	bne.w	80152fc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80154e2:	69bb      	ldr	r3, [r7, #24]
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154e8:	2200      	movs	r2, #0
 80154ea:	2108      	movs	r1, #8
 80154ec:	68f8      	ldr	r0, [r7, #12]
 80154ee:	f000 fed1 	bl	8016294 <SPI_WaitOnFlagUntilTimeout>
 80154f2:	4603      	mov	r3, r0
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d007      	beq.n	8015508 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80154fe:	f043 0220 	orr.w	r2, r3, #32
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015508:	68f8      	ldr	r0, [r7, #12]
 801550a:	f000 fe23 	bl	8016154 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	2201      	movs	r2, #1
 8015512:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2200      	movs	r2, #0
 801551a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015524:	2b00      	cmp	r3, #0
 8015526:	d001      	beq.n	801552c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8015528:	2301      	movs	r3, #1
 801552a:	e000      	b.n	801552e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 801552c:	2300      	movs	r3, #0
  }
}
 801552e:	4618      	mov	r0, r3
 8015530:	3730      	adds	r7, #48	@ 0x30
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop

08015538 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015538:	b480      	push	{r7}
 801553a:	b085      	sub	sp, #20
 801553c:	af00      	add	r7, sp, #0
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	4613      	mov	r3, r2
 8015544:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d002      	beq.n	8015552 <HAL_SPI_Transmit_IT+0x1a>
 801554c:	88fb      	ldrh	r3, [r7, #6]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8015552:	2301      	movs	r3, #1
 8015554:	e08b      	b.n	801566e <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801555c:	b2db      	uxtb	r3, r3
 801555e:	2b01      	cmp	r3, #1
 8015560:	d001      	beq.n	8015566 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8015562:	2302      	movs	r3, #2
 8015564:	e083      	b.n	801566e <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801556c:	2b01      	cmp	r3, #1
 801556e:	d101      	bne.n	8015574 <HAL_SPI_Transmit_IT+0x3c>
 8015570:	2302      	movs	r3, #2
 8015572:	e07c      	b.n	801566e <HAL_SPI_Transmit_IT+0x136>
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	2201      	movs	r2, #1
 8015578:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	2203      	movs	r2, #3
 8015580:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	2200      	movs	r2, #0
 8015588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	68ba      	ldr	r2, [r7, #8]
 8015590:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	88fa      	ldrh	r2, [r7, #6]
 8015596:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	88fa      	ldrh	r2, [r7, #6]
 801559e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	2200      	movs	r2, #0
 80155a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2200      	movs	r2, #0
 80155ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2200      	movs	r2, #0
 80155b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	2200      	movs	r2, #0
 80155bc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	2b0f      	cmp	r3, #15
 80155c4:	d903      	bls.n	80155ce <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	4a2c      	ldr	r2, [pc, #176]	@ (801567c <HAL_SPI_Transmit_IT+0x144>)
 80155ca:	675a      	str	r2, [r3, #116]	@ 0x74
 80155cc:	e00a      	b.n	80155e4 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	2b07      	cmp	r3, #7
 80155d4:	d903      	bls.n	80155de <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	4a29      	ldr	r2, [pc, #164]	@ (8015680 <HAL_SPI_Transmit_IT+0x148>)
 80155da:	675a      	str	r2, [r3, #116]	@ 0x74
 80155dc:	e002      	b.n	80155e4 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	4a28      	ldr	r2, [pc, #160]	@ (8015684 <HAL_SPI_Transmit_IT+0x14c>)
 80155e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	689b      	ldr	r3, [r3, #8]
 80155e8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80155ec:	d108      	bne.n	8015600 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80155fc:	601a      	str	r2, [r3, #0]
 80155fe:	e009      	b.n	8015614 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	68db      	ldr	r3, [r3, #12]
 8015606:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015612:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	685a      	ldr	r2, [r3, #4]
 801561a:	4b1b      	ldr	r3, [pc, #108]	@ (8015688 <HAL_SPI_Transmit_IT+0x150>)
 801561c:	4013      	ands	r3, r2
 801561e:	88f9      	ldrh	r1, [r7, #6]
 8015620:	68fa      	ldr	r2, [r7, #12]
 8015622:	6812      	ldr	r2, [r2, #0]
 8015624:	430b      	orrs	r3, r1
 8015626:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	681a      	ldr	r2, [r3, #0]
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	f042 0201 	orr.w	r2, r2, #1
 8015636:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	2200      	movs	r2, #0
 801563c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	6919      	ldr	r1, [r3, #16]
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	f240 732a 	movw	r3, #1834	@ 0x72a
 801564e:	430b      	orrs	r3, r1
 8015650:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801565a:	d107      	bne.n	801566c <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	681a      	ldr	r2, [r3, #0]
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801566a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801566c:	2300      	movs	r3, #0
}
 801566e:	4618      	mov	r0, r3
 8015670:	3714      	adds	r7, #20
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	080160fb 	.word	0x080160fb
 8015680:	0801609d 	.word	0x0801609d
 8015684:	08016043 	.word	0x08016043
 8015688:	ffff0000 	.word	0xffff0000

0801568c <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 801568c:	b480      	push	{r7}
 801568e:	b085      	sub	sp, #20
 8015690:	af00      	add	r7, sp, #0
 8015692:	60f8      	str	r0, [r7, #12]
 8015694:	60b9      	str	r1, [r7, #8]
 8015696:	4613      	mov	r3, r2
 8015698:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80156a0:	b2db      	uxtb	r3, r3
 80156a2:	2b01      	cmp	r3, #1
 80156a4:	d001      	beq.n	80156aa <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80156a6:	2302      	movs	r3, #2
 80156a8:	e08b      	b.n	80157c2 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d002      	beq.n	80156b6 <HAL_SPI_Receive_IT+0x2a>
 80156b0:	88fb      	ldrh	r3, [r7, #6]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d101      	bne.n	80156ba <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80156b6:	2301      	movs	r3, #1
 80156b8:	e083      	b.n	80157c2 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80156c0:	2b01      	cmp	r3, #1
 80156c2:	d101      	bne.n	80156c8 <HAL_SPI_Receive_IT+0x3c>
 80156c4:	2302      	movs	r3, #2
 80156c6:	e07c      	b.n	80157c2 <HAL_SPI_Receive_IT+0x136>
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2201      	movs	r2, #1
 80156cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	2204      	movs	r2, #4
 80156d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	2200      	movs	r2, #0
 80156dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	68ba      	ldr	r2, [r7, #8]
 80156e4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	88fa      	ldrh	r2, [r7, #6]
 80156ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	88fa      	ldrh	r2, [r7, #6]
 80156f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	2200      	movs	r2, #0
 80156fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	2200      	movs	r2, #0
 8015700:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	2200      	movs	r2, #0
 8015708:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2200      	movs	r2, #0
 8015710:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	68db      	ldr	r3, [r3, #12]
 8015716:	2b0f      	cmp	r3, #15
 8015718:	d903      	bls.n	8015722 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	4a2c      	ldr	r2, [pc, #176]	@ (80157d0 <HAL_SPI_Receive_IT+0x144>)
 801571e:	671a      	str	r2, [r3, #112]	@ 0x70
 8015720:	e00a      	b.n	8015738 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	68db      	ldr	r3, [r3, #12]
 8015726:	2b07      	cmp	r3, #7
 8015728:	d903      	bls.n	8015732 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	4a29      	ldr	r2, [pc, #164]	@ (80157d4 <HAL_SPI_Receive_IT+0x148>)
 801572e:	671a      	str	r2, [r3, #112]	@ 0x70
 8015730:	e002      	b.n	8015738 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	4a28      	ldr	r2, [pc, #160]	@ (80157d8 <HAL_SPI_Receive_IT+0x14c>)
 8015736:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	689b      	ldr	r3, [r3, #8]
 801573c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015740:	d108      	bne.n	8015754 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	681a      	ldr	r2, [r3, #0]
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8015750:	601a      	str	r2, [r3, #0]
 8015752:	e009      	b.n	8015768 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	68db      	ldr	r3, [r3, #12]
 801575a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8015766:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	685a      	ldr	r2, [r3, #4]
 801576e:	4b1b      	ldr	r3, [pc, #108]	@ (80157dc <HAL_SPI_Receive_IT+0x150>)
 8015770:	4013      	ands	r3, r2
 8015772:	88f9      	ldrh	r1, [r7, #6]
 8015774:	68fa      	ldr	r2, [r7, #12]
 8015776:	6812      	ldr	r2, [r2, #0]
 8015778:	430b      	orrs	r3, r1
 801577a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	681a      	ldr	r2, [r3, #0]
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	f042 0201 	orr.w	r2, r2, #1
 801578a:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2200      	movs	r2, #0
 8015790:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	6919      	ldr	r1, [r3, #16]
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	681a      	ldr	r2, [r3, #0]
 801579e:	f240 7349 	movw	r3, #1865	@ 0x749
 80157a2:	430b      	orrs	r3, r1
 80157a4:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	685b      	ldr	r3, [r3, #4]
 80157aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80157ae:	d107      	bne.n	80157c0 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	681a      	ldr	r2, [r3, #0]
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80157be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80157c0:	2300      	movs	r3, #0
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3714      	adds	r7, #20
 80157c6:	46bd      	mov	sp, r7
 80157c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157cc:	4770      	bx	lr
 80157ce:	bf00      	nop
 80157d0:	08015feb 	.word	0x08015feb
 80157d4:	08015f8b 	.word	0x08015f8b
 80157d8:	08015f2d 	.word	0x08015f2d
 80157dc:	ffff0000 	.word	0xffff0000

080157e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	60f8      	str	r0, [r7, #12]
 80157e8:	60b9      	str	r1, [r7, #8]
 80157ea:	4613      	mov	r3, r2
 80157ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80157f4:	b2db      	uxtb	r3, r3
 80157f6:	2b01      	cmp	r3, #1
 80157f8:	d001      	beq.n	80157fe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80157fa:	2302      	movs	r3, #2
 80157fc:	e126      	b.n	8015a4c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d002      	beq.n	801580a <HAL_SPI_Transmit_DMA+0x2a>
 8015804:	88fb      	ldrh	r3, [r7, #6]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d101      	bne.n	801580e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801580a:	2301      	movs	r3, #1
 801580c:	e11e      	b.n	8015a4c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015814:	2b01      	cmp	r3, #1
 8015816:	d101      	bne.n	801581c <HAL_SPI_Transmit_DMA+0x3c>
 8015818:	2302      	movs	r3, #2
 801581a:	e117      	b.n	8015a4c <HAL_SPI_Transmit_DMA+0x26c>
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	2201      	movs	r2, #1
 8015820:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	2203      	movs	r2, #3
 8015828:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	2200      	movs	r2, #0
 8015830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	68ba      	ldr	r2, [r7, #8]
 8015838:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	88fa      	ldrh	r2, [r7, #6]
 801583e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	88fa      	ldrh	r2, [r7, #6]
 8015846:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	2200      	movs	r2, #0
 801584e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	2200      	movs	r2, #0
 8015854:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	2200      	movs	r2, #0
 801585a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	2200      	movs	r2, #0
 8015860:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	2200      	movs	r2, #0
 8015868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	689b      	ldr	r3, [r3, #8]
 8015870:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015874:	d108      	bne.n	8015888 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	681a      	ldr	r2, [r3, #0]
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015884:	601a      	str	r2, [r3, #0]
 8015886:	e009      	b.n	801589c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801589a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	68db      	ldr	r3, [r3, #12]
 80158a0:	2b0f      	cmp	r3, #15
 80158a2:	d905      	bls.n	80158b0 <HAL_SPI_Transmit_DMA+0xd0>
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158a8:	699b      	ldr	r3, [r3, #24]
 80158aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80158ae:	d10f      	bne.n	80158d0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80158b4:	2b07      	cmp	r3, #7
 80158b6:	d911      	bls.n	80158dc <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158bc:	699b      	ldr	r3, [r3, #24]
 80158be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80158c2:	d00b      	beq.n	80158dc <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158c8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80158ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80158ce:	d005      	beq.n	80158dc <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	2200      	movs	r2, #0
 80158d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80158d8:	2301      	movs	r3, #1
 80158da:	e0b7      	b.n	8015a4c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	68db      	ldr	r3, [r3, #12]
 80158e0:	2b07      	cmp	r3, #7
 80158e2:	d820      	bhi.n	8015926 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158e8:	699b      	ldr	r3, [r3, #24]
 80158ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80158ee:	d109      	bne.n	8015904 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	3301      	adds	r3, #1
 80158fa:	105b      	asrs	r3, r3, #1
 80158fc:	b29a      	uxth	r2, r3
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015908:	699b      	ldr	r3, [r3, #24]
 801590a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801590e:	d11e      	bne.n	801594e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015916:	b29b      	uxth	r3, r3
 8015918:	3303      	adds	r3, #3
 801591a:	109b      	asrs	r3, r3, #2
 801591c:	b29a      	uxth	r2, r3
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015924:	e013      	b.n	801594e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	68db      	ldr	r3, [r3, #12]
 801592a:	2b0f      	cmp	r3, #15
 801592c:	d80f      	bhi.n	801594e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015932:	699b      	ldr	r3, [r3, #24]
 8015934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015938:	d109      	bne.n	801594e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015940:	b29b      	uxth	r3, r3
 8015942:	3301      	adds	r3, #1
 8015944:	105b      	asrs	r3, r3, #1
 8015946:	b29a      	uxth	r2, r3
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015952:	4a40      	ldr	r2, [pc, #256]	@ (8015a54 <HAL_SPI_Transmit_DMA+0x274>)
 8015954:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801595a:	4a3f      	ldr	r2, [pc, #252]	@ (8015a58 <HAL_SPI_Transmit_DMA+0x278>)
 801595c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015962:	4a3e      	ldr	r2, [pc, #248]	@ (8015a5c <HAL_SPI_Transmit_DMA+0x27c>)
 8015964:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801596a:	2200      	movs	r2, #0
 801596c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	689a      	ldr	r2, [r3, #8]
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801597c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015986:	4619      	mov	r1, r3
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	3320      	adds	r3, #32
 801598e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015996:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015998:	f7f6 f81e 	bl	800b9d8 <HAL_DMA_Start_IT>
 801599c:	4603      	mov	r3, r0
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d011      	beq.n	80159c6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159a8:	f043 0210 	orr.w	r2, r3, #16
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	2201      	movs	r2, #1
 80159b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2200      	movs	r2, #0
 80159be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80159c2:	2301      	movs	r3, #1
 80159c4:	e042      	b.n	8015a4c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80159ca:	69db      	ldr	r3, [r3, #28]
 80159cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80159d0:	d108      	bne.n	80159e4 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	6859      	ldr	r1, [r3, #4]
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	681a      	ldr	r2, [r3, #0]
 80159dc:	4b20      	ldr	r3, [pc, #128]	@ (8015a60 <HAL_SPI_Transmit_DMA+0x280>)
 80159de:	400b      	ands	r3, r1
 80159e0:	6053      	str	r3, [r2, #4]
 80159e2:	e009      	b.n	80159f8 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	685a      	ldr	r2, [r3, #4]
 80159ea:	4b1d      	ldr	r3, [pc, #116]	@ (8015a60 <HAL_SPI_Transmit_DMA+0x280>)
 80159ec:	4013      	ands	r3, r2
 80159ee:	88f9      	ldrh	r1, [r7, #6]
 80159f0:	68fa      	ldr	r2, [r7, #12]
 80159f2:	6812      	ldr	r2, [r2, #0]
 80159f4:	430b      	orrs	r3, r1
 80159f6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	689a      	ldr	r2, [r3, #8]
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015a06:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	691a      	ldr	r2, [r3, #16]
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015a16:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	f042 0201 	orr.w	r2, r2, #1
 8015a26:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015a30:	d107      	bne.n	8015a42 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	681a      	ldr	r2, [r3, #0]
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015a40:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	2200      	movs	r2, #0
 8015a46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015a4a:	2300      	movs	r3, #0
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3710      	adds	r7, #16
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	08015e97 	.word	0x08015e97
 8015a58:	08015e51 	.word	0x08015e51
 8015a5c:	08015eb3 	.word	0x08015eb3
 8015a60:	ffff0000 	.word	0xffff0000

08015a64 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b08a      	sub	sp, #40	@ 0x28
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	691b      	ldr	r3, [r3, #16]
 8015a72:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	695b      	ldr	r3, [r3, #20]
 8015a7a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015a7c:	6a3a      	ldr	r2, [r7, #32]
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	4013      	ands	r3, r2
 8015a82:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	689b      	ldr	r3, [r3, #8]
 8015a8a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015a96:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	3330      	adds	r3, #48	@ 0x30
 8015a9e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015aa0:	69fb      	ldr	r3, [r7, #28]
 8015aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d010      	beq.n	8015acc <HAL_SPI_IRQHandler+0x68>
 8015aaa:	6a3b      	ldr	r3, [r7, #32]
 8015aac:	f003 0308 	and.w	r3, r3, #8
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d00b      	beq.n	8015acc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	699a      	ldr	r2, [r3, #24]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015ac2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f000 f9b9 	bl	8015e3c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015aca:	e192      	b.n	8015df2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015acc:	69bb      	ldr	r3, [r7, #24]
 8015ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d113      	bne.n	8015afe <HAL_SPI_IRQHandler+0x9a>
 8015ad6:	69bb      	ldr	r3, [r7, #24]
 8015ad8:	f003 0320 	and.w	r3, r3, #32
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d10e      	bne.n	8015afe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015ae0:	69bb      	ldr	r3, [r7, #24]
 8015ae2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d009      	beq.n	8015afe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	4798      	blx	r3
    handled = 1UL;
 8015afa:	2301      	movs	r3, #1
 8015afc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015afe:	69bb      	ldr	r3, [r7, #24]
 8015b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d10f      	bne.n	8015b28 <HAL_SPI_IRQHandler+0xc4>
 8015b08:	69bb      	ldr	r3, [r7, #24]
 8015b0a:	f003 0301 	and.w	r3, r3, #1
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d00a      	beq.n	8015b28 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d105      	bne.n	8015b28 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	4798      	blx	r3
    handled = 1UL;
 8015b24:	2301      	movs	r3, #1
 8015b26:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015b28:	69bb      	ldr	r3, [r7, #24]
 8015b2a:	f003 0320 	and.w	r3, r3, #32
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d10f      	bne.n	8015b52 <HAL_SPI_IRQHandler+0xee>
 8015b32:	69bb      	ldr	r3, [r7, #24]
 8015b34:	f003 0302 	and.w	r3, r3, #2
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d00a      	beq.n	8015b52 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d105      	bne.n	8015b52 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	4798      	blx	r3
    handled = 1UL;
 8015b4e:	2301      	movs	r3, #1
 8015b50:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	f040 8147 	bne.w	8015de8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	f003 0308 	and.w	r3, r3, #8
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	f000 808b 	beq.w	8015c7c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	699a      	ldr	r2, [r3, #24]
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	f042 0208 	orr.w	r2, r2, #8
 8015b74:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	699a      	ldr	r2, [r3, #24]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	f042 0210 	orr.w	r2, r2, #16
 8015b84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	699a      	ldr	r2, [r3, #24]
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015b94:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	691a      	ldr	r2, [r3, #16]
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	f022 0208 	bic.w	r2, r2, #8
 8015ba4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	689b      	ldr	r3, [r3, #8]
 8015bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d13d      	bne.n	8015c30 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015bb4:	e036      	b.n	8015c24 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	2b0f      	cmp	r3, #15
 8015bbc:	d90b      	bls.n	8015bd6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681a      	ldr	r2, [r3, #0]
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015bc6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015bc8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015bce:	1d1a      	adds	r2, r3, #4
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	665a      	str	r2, [r3, #100]	@ 0x64
 8015bd4:	e01d      	b.n	8015c12 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	68db      	ldr	r3, [r3, #12]
 8015bda:	2b07      	cmp	r3, #7
 8015bdc:	d90b      	bls.n	8015bf6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015be2:	68fa      	ldr	r2, [r7, #12]
 8015be4:	8812      	ldrh	r2, [r2, #0]
 8015be6:	b292      	uxth	r2, r2
 8015be8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015bee:	1c9a      	adds	r2, r3, #2
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	665a      	str	r2, [r3, #100]	@ 0x64
 8015bf4:	e00d      	b.n	8015c12 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015c02:	7812      	ldrb	r2, [r2, #0]
 8015c04:	b2d2      	uxtb	r2, r2
 8015c06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015c0c:	1c5a      	adds	r2, r3, #1
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	3b01      	subs	r3, #1
 8015c1c:	b29a      	uxth	r2, r3
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d1c2      	bne.n	8015bb6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f000 fa8f 	bl	8016154 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	2201      	movs	r2, #1
 8015c3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d003      	beq.n	8015c50 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f000 f8ed 	bl	8015e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015c4e:	e0d0      	b.n	8015df2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015c50:	7cfb      	ldrb	r3, [r7, #19]
 8015c52:	2b05      	cmp	r3, #5
 8015c54:	d103      	bne.n	8015c5e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f000 f8d2 	bl	8015e00 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015c5c:	e0c6      	b.n	8015dec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015c5e:	7cfb      	ldrb	r3, [r7, #19]
 8015c60:	2b04      	cmp	r3, #4
 8015c62:	d103      	bne.n	8015c6c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f7f1 fab7 	bl	80071d8 <HAL_SPI_RxCpltCallback>
    return;
 8015c6a:	e0bf      	b.n	8015dec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015c6c:	7cfb      	ldrb	r3, [r7, #19]
 8015c6e:	2b03      	cmp	r3, #3
 8015c70:	f040 80bc 	bne.w	8015dec <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f7f1 fa6f 	bl	8007158 <HAL_SPI_TxCpltCallback>
    return;
 8015c7a:	e0b7      	b.n	8015dec <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015c7c:	69bb      	ldr	r3, [r7, #24]
 8015c7e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	f000 80b5 	beq.w	8015df2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015c88:	69bb      	ldr	r3, [r7, #24]
 8015c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00f      	beq.n	8015cb2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c98:	f043 0204 	orr.w	r2, r3, #4
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	699a      	ldr	r2, [r3, #24]
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015cb0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015cb2:	69bb      	ldr	r3, [r7, #24]
 8015cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d00f      	beq.n	8015cdc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015cc2:	f043 0201 	orr.w	r2, r3, #1
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	699a      	ldr	r2, [r3, #24]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015cda:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015cdc:	69bb      	ldr	r3, [r7, #24]
 8015cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d00f      	beq.n	8015d06 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015cec:	f043 0208 	orr.w	r2, r3, #8
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	699a      	ldr	r2, [r3, #24]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015d04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	f003 0320 	and.w	r3, r3, #32
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d00f      	beq.n	8015d30 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	699a      	ldr	r2, [r3, #24]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f042 0220 	orr.w	r2, r2, #32
 8015d2e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d05a      	beq.n	8015df0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	f022 0201 	bic.w	r2, r2, #1
 8015d48:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	6919      	ldr	r1, [r3, #16]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681a      	ldr	r2, [r3, #0]
 8015d54:	4b28      	ldr	r3, [pc, #160]	@ (8015df8 <HAL_SPI_IRQHandler+0x394>)
 8015d56:	400b      	ands	r3, r1
 8015d58:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015d60:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015d64:	d138      	bne.n	8015dd8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	689a      	ldr	r2, [r3, #8]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015d74:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d013      	beq.n	8015da6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015d82:	4a1e      	ldr	r2, [pc, #120]	@ (8015dfc <HAL_SPI_IRQHandler+0x398>)
 8015d84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7f6 fbac 	bl	800c4e8 <HAL_DMA_Abort_IT>
 8015d90:	4603      	mov	r3, r0
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d007      	beq.n	8015da6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d020      	beq.n	8015df0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015db2:	4a12      	ldr	r2, [pc, #72]	@ (8015dfc <HAL_SPI_IRQHandler+0x398>)
 8015db4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f7f6 fb94 	bl	800c4e8 <HAL_DMA_Abort_IT>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d014      	beq.n	8015df0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015dcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015dd6:	e00b      	b.n	8015df0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2201      	movs	r2, #1
 8015ddc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f000 f821 	bl	8015e28 <HAL_SPI_ErrorCallback>
    return;
 8015de6:	e003      	b.n	8015df0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015de8:	bf00      	nop
 8015dea:	e002      	b.n	8015df2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015dec:	bf00      	nop
 8015dee:	e000      	b.n	8015df2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015df0:	bf00      	nop
  }
}
 8015df2:	3728      	adds	r7, #40	@ 0x28
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}
 8015df8:	fffffc94 	.word	0xfffffc94
 8015dfc:	08015ef9 	.word	0x08015ef9

08015e00 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015e00:	b480      	push	{r7}
 8015e02:	b083      	sub	sp, #12
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015e08:	bf00      	nop
 8015e0a:	370c      	adds	r7, #12
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr

08015e14 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015e14:	b480      	push	{r7}
 8015e16:	b083      	sub	sp, #12
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015e1c:	bf00      	nop
 8015e1e:	370c      	adds	r7, #12
 8015e20:	46bd      	mov	sp, r7
 8015e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e26:	4770      	bx	lr

08015e28 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015e28:	b480      	push	{r7}
 8015e2a:	b083      	sub	sp, #12
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015e30:	bf00      	nop
 8015e32:	370c      	adds	r7, #12
 8015e34:	46bd      	mov	sp, r7
 8015e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3a:	4770      	bx	lr

08015e3c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015e3c:	b480      	push	{r7}
 8015e3e:	b083      	sub	sp, #12
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8015e44:	bf00      	nop
 8015e46:	370c      	adds	r7, #12
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4e:	4770      	bx	lr

08015e50 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b084      	sub	sp, #16
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e5c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015e64:	b2db      	uxtb	r3, r3
 8015e66:	2b07      	cmp	r3, #7
 8015e68:	d011      	beq.n	8015e8e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015e6e:	69db      	ldr	r3, [r3, #28]
 8015e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015e74:	d103      	bne.n	8015e7e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8015e76:	68f8      	ldr	r0, [r7, #12]
 8015e78:	f7f1 f96e 	bl	8007158 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015e7c:	e007      	b.n	8015e8e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	691a      	ldr	r2, [r3, #16]
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	f042 0208 	orr.w	r2, r2, #8
 8015e8c:	611a      	str	r2, [r3, #16]
}
 8015e8e:	bf00      	nop
 8015e90:	3710      	adds	r7, #16
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b084      	sub	sp, #16
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ea2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8015ea4:	68f8      	ldr	r0, [r7, #12]
 8015ea6:	f7ff ffb5 	bl	8015e14 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015eaa:	bf00      	nop
 8015eac:	3710      	adds	r7, #16
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}

08015eb2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8015eb2:	b580      	push	{r7, lr}
 8015eb4:	b084      	sub	sp, #16
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ebe:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f7f7 fc8f 	bl	800d7e4 <HAL_DMA_GetError>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b02      	cmp	r3, #2
 8015eca:	d011      	beq.n	8015ef0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f000 f941 	bl	8016154 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ed8:	f043 0210 	orr.w	r2, r3, #16
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	2201      	movs	r2, #1
 8015ee6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8015eea:	68f8      	ldr	r0, [r7, #12]
 8015eec:	f7ff ff9c 	bl	8015e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015ef0:	bf00      	nop
 8015ef2:	3710      	adds	r7, #16
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2200      	movs	r2, #0
 8015f12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	2201      	movs	r2, #1
 8015f1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8015f1e:	68f8      	ldr	r0, [r7, #12]
 8015f20:	f7ff ff82 	bl	8015e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015f24:	bf00      	nop
 8015f26:	3710      	adds	r7, #16
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b083      	sub	sp, #12
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015f40:	7812      	ldrb	r2, [r2, #0]
 8015f42:	b2d2      	uxtb	r2, r2
 8015f44:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015f4a:	1c5a      	adds	r2, r3, #1
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015f56:	b29b      	uxth	r3, r3
 8015f58:	3b01      	subs	r3, #1
 8015f5a:	b29a      	uxth	r2, r3
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015f68:	b29b      	uxth	r3, r3
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d107      	bne.n	8015f7e <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	691a      	ldr	r2, [r3, #16]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	f022 0201 	bic.w	r2, r2, #1
 8015f7c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015f7e:	bf00      	nop
 8015f80:	370c      	adds	r7, #12
 8015f82:	46bd      	mov	sp, r7
 8015f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f88:	4770      	bx	lr

08015f8a <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8015f8a:	b480      	push	{r7}
 8015f8c:	b085      	sub	sp, #20
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	3330      	adds	r3, #48	@ 0x30
 8015f98:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015f9e:	68fa      	ldr	r2, [r7, #12]
 8015fa0:	8812      	ldrh	r2, [r2, #0]
 8015fa2:	b292      	uxth	r2, r2
 8015fa4:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015faa:	1c9a      	adds	r2, r3, #2
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015fb6:	b29b      	uxth	r3, r3
 8015fb8:	3b01      	subs	r3, #1
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d107      	bne.n	8015fde <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	691a      	ldr	r2, [r3, #16]
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f022 0201 	bic.w	r2, r2, #1
 8015fdc:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015fde:	bf00      	nop
 8015fe0:	3714      	adds	r7, #20
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe8:	4770      	bx	lr

08015fea <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8015fea:	b480      	push	{r7}
 8015fec:	b083      	sub	sp, #12
 8015fee:	af00      	add	r7, sp, #0
 8015ff0:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681a      	ldr	r2, [r3, #0]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ffa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015ffc:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016002:	1d1a      	adds	r2, r3, #4
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801600e:	b29b      	uxth	r3, r3
 8016010:	3b01      	subs	r3, #1
 8016012:	b29a      	uxth	r2, r3
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8016020:	b29b      	uxth	r3, r3
 8016022:	2b00      	cmp	r3, #0
 8016024:	d107      	bne.n	8016036 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	691a      	ldr	r2, [r3, #16]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	f022 0201 	bic.w	r2, r2, #1
 8016034:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8016036:	bf00      	nop
 8016038:	370c      	adds	r7, #12
 801603a:	46bd      	mov	sp, r7
 801603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016040:	4770      	bx	lr

08016042 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8016042:	b480      	push	{r7}
 8016044:	b083      	sub	sp, #12
 8016046:	af00      	add	r7, sp, #0
 8016048:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	3320      	adds	r3, #32
 8016054:	7812      	ldrb	r2, [r2, #0]
 8016056:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801605c:	1c5a      	adds	r2, r3, #1
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016068:	b29b      	uxth	r3, r3
 801606a:	3b01      	subs	r3, #1
 801606c:	b29a      	uxth	r2, r3
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801607a:	b29b      	uxth	r3, r3
 801607c:	2b00      	cmp	r3, #0
 801607e:	d107      	bne.n	8016090 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	691a      	ldr	r2, [r3, #16]
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	f022 0202 	bic.w	r2, r2, #2
 801608e:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8016090:	bf00      	nop
 8016092:	370c      	adds	r7, #12
 8016094:	46bd      	mov	sp, r7
 8016096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609a:	4770      	bx	lr

0801609c <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 801609c:	b480      	push	{r7}
 801609e:	b085      	sub	sp, #20
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	3320      	adds	r3, #32
 80160aa:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80160b0:	881a      	ldrh	r2, [r3, #0]
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80160ba:	1c9a      	adds	r2, r3, #2
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80160c6:	b29b      	uxth	r3, r3
 80160c8:	3b01      	subs	r3, #1
 80160ca:	b29a      	uxth	r2, r3
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80160d8:	b29b      	uxth	r3, r3
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d107      	bne.n	80160ee <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	691a      	ldr	r2, [r3, #16]
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	f022 0202 	bic.w	r2, r2, #2
 80160ec:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80160ee:	bf00      	nop
 80160f0:	3714      	adds	r7, #20
 80160f2:	46bd      	mov	sp, r7
 80160f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f8:	4770      	bx	lr

080160fa <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80160fa:	b480      	push	{r7}
 80160fc:	b083      	sub	sp, #12
 80160fe:	af00      	add	r7, sp, #0
 8016100:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	6812      	ldr	r2, [r2, #0]
 801610c:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016112:	1d1a      	adds	r2, r3, #4
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801611e:	b29b      	uxth	r3, r3
 8016120:	3b01      	subs	r3, #1
 8016122:	b29a      	uxth	r2, r3
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016130:	b29b      	uxth	r3, r3
 8016132:	2b00      	cmp	r3, #0
 8016134:	d107      	bne.n	8016146 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	691a      	ldr	r2, [r3, #16]
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f022 0202 	bic.w	r2, r2, #2
 8016144:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8016146:	bf00      	nop
 8016148:	370c      	adds	r7, #12
 801614a:	46bd      	mov	sp, r7
 801614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016150:	4770      	bx	lr
	...

08016154 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8016154:	b480      	push	{r7}
 8016156:	b085      	sub	sp, #20
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	695b      	ldr	r3, [r3, #20]
 8016162:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	699a      	ldr	r2, [r3, #24]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	f042 0208 	orr.w	r2, r2, #8
 8016172:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	699a      	ldr	r2, [r3, #24]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f042 0210 	orr.w	r2, r2, #16
 8016182:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	681a      	ldr	r2, [r3, #0]
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	f022 0201 	bic.w	r2, r2, #1
 8016192:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	6919      	ldr	r1, [r3, #16]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	681a      	ldr	r2, [r3, #0]
 801619e:	4b3c      	ldr	r3, [pc, #240]	@ (8016290 <SPI_CloseTransfer+0x13c>)
 80161a0:	400b      	ands	r3, r1
 80161a2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	689a      	ldr	r2, [r3, #8]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80161b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	2b04      	cmp	r3, #4
 80161be:	d014      	beq.n	80161ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	f003 0320 	and.w	r3, r3, #32
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d00f      	beq.n	80161ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	699a      	ldr	r2, [r3, #24]
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	f042 0220 	orr.w	r2, r2, #32
 80161e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80161f0:	b2db      	uxtb	r3, r3
 80161f2:	2b03      	cmp	r3, #3
 80161f4:	d014      	beq.n	8016220 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d00f      	beq.n	8016220 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016206:	f043 0204 	orr.w	r2, r3, #4
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	699a      	ldr	r2, [r3, #24]
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801621e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00f      	beq.n	801624a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016230:	f043 0201 	orr.w	r2, r3, #1
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	699a      	ldr	r2, [r3, #24]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016248:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016250:	2b00      	cmp	r3, #0
 8016252:	d00f      	beq.n	8016274 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801625a:	f043 0208 	orr.w	r2, r3, #8
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	699a      	ldr	r2, [r3, #24]
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016272:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	2200      	movs	r2, #0
 8016278:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	2200      	movs	r2, #0
 8016280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8016284:	bf00      	nop
 8016286:	3714      	adds	r7, #20
 8016288:	46bd      	mov	sp, r7
 801628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628e:	4770      	bx	lr
 8016290:	fffffc90 	.word	0xfffffc90

08016294 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b084      	sub	sp, #16
 8016298:	af00      	add	r7, sp, #0
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	603b      	str	r3, [r7, #0]
 80162a0:	4613      	mov	r3, r2
 80162a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162a4:	e010      	b.n	80162c8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80162a6:	f7f2 ff09 	bl	80090bc <HAL_GetTick>
 80162aa:	4602      	mov	r2, r0
 80162ac:	69bb      	ldr	r3, [r7, #24]
 80162ae:	1ad3      	subs	r3, r2, r3
 80162b0:	683a      	ldr	r2, [r7, #0]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d803      	bhi.n	80162be <SPI_WaitOnFlagUntilTimeout+0x2a>
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162bc:	d102      	bne.n	80162c4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d101      	bne.n	80162c8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80162c4:	2303      	movs	r3, #3
 80162c6:	e00f      	b.n	80162e8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	695a      	ldr	r2, [r3, #20]
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	4013      	ands	r3, r2
 80162d2:	68ba      	ldr	r2, [r7, #8]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	bf0c      	ite	eq
 80162d8:	2301      	moveq	r3, #1
 80162da:	2300      	movne	r3, #0
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	461a      	mov	r2, r3
 80162e0:	79fb      	ldrb	r3, [r7, #7]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d0df      	beq.n	80162a6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80162e6:	2300      	movs	r3, #0
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3710      	adds	r7, #16
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}

080162f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80162f0:	b480      	push	{r7}
 80162f2:	b085      	sub	sp, #20
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162fc:	095b      	lsrs	r3, r3, #5
 80162fe:	3301      	adds	r3, #1
 8016300:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	68db      	ldr	r3, [r3, #12]
 8016306:	3301      	adds	r3, #1
 8016308:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	3307      	adds	r3, #7
 801630e:	08db      	lsrs	r3, r3, #3
 8016310:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	fb02 f303 	mul.w	r3, r2, r3
}
 801631a:	4618      	mov	r0, r3
 801631c:	3714      	adds	r7, #20
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr

08016326 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016326:	b580      	push	{r7, lr}
 8016328:	b082      	sub	sp, #8
 801632a:	af00      	add	r7, sp, #0
 801632c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d101      	bne.n	8016338 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016334:	2301      	movs	r3, #1
 8016336:	e049      	b.n	80163cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801633e:	b2db      	uxtb	r3, r3
 8016340:	2b00      	cmp	r3, #0
 8016342:	d106      	bne.n	8016352 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2200      	movs	r2, #0
 8016348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f7f2 fcbf 	bl	8008cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2202      	movs	r2, #2
 8016356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681a      	ldr	r2, [r3, #0]
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	3304      	adds	r3, #4
 8016362:	4619      	mov	r1, r3
 8016364:	4610      	mov	r0, r2
 8016366:	f000 fedb 	bl	8017120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2201      	movs	r2, #1
 801636e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2201      	movs	r2, #1
 8016376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2201      	movs	r2, #1
 801637e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2201      	movs	r2, #1
 8016386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2201      	movs	r2, #1
 801638e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2201      	movs	r2, #1
 8016396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2201      	movs	r2, #1
 801639e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2201      	movs	r2, #1
 80163a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2201      	movs	r2, #1
 80163ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2201      	movs	r2, #1
 80163b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2201      	movs	r2, #1
 80163be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80163ca:	2300      	movs	r3, #0
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3708      	adds	r7, #8
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80163d4:	b480      	push	{r7}
 80163d6:	b085      	sub	sp, #20
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	2b01      	cmp	r3, #1
 80163e6:	d001      	beq.n	80163ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80163e8:	2301      	movs	r3, #1
 80163ea:	e056      	b.n	801649a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2202      	movs	r2, #2
 80163f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	4a2b      	ldr	r2, [pc, #172]	@ (80164a8 <HAL_TIM_Base_Start+0xd4>)
 80163fa:	4293      	cmp	r3, r2
 80163fc:	d02c      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016406:	d027      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	4a27      	ldr	r2, [pc, #156]	@ (80164ac <HAL_TIM_Base_Start+0xd8>)
 801640e:	4293      	cmp	r3, r2
 8016410:	d022      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	4a26      	ldr	r2, [pc, #152]	@ (80164b0 <HAL_TIM_Base_Start+0xdc>)
 8016418:	4293      	cmp	r3, r2
 801641a:	d01d      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	4a24      	ldr	r2, [pc, #144]	@ (80164b4 <HAL_TIM_Base_Start+0xe0>)
 8016422:	4293      	cmp	r3, r2
 8016424:	d018      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	4a23      	ldr	r2, [pc, #140]	@ (80164b8 <HAL_TIM_Base_Start+0xe4>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d013      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4a21      	ldr	r2, [pc, #132]	@ (80164bc <HAL_TIM_Base_Start+0xe8>)
 8016436:	4293      	cmp	r3, r2
 8016438:	d00e      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	4a20      	ldr	r2, [pc, #128]	@ (80164c0 <HAL_TIM_Base_Start+0xec>)
 8016440:	4293      	cmp	r3, r2
 8016442:	d009      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	4a1e      	ldr	r2, [pc, #120]	@ (80164c4 <HAL_TIM_Base_Start+0xf0>)
 801644a:	4293      	cmp	r3, r2
 801644c:	d004      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	4a1d      	ldr	r2, [pc, #116]	@ (80164c8 <HAL_TIM_Base_Start+0xf4>)
 8016454:	4293      	cmp	r3, r2
 8016456:	d115      	bne.n	8016484 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	689a      	ldr	r2, [r3, #8]
 801645e:	4b1b      	ldr	r3, [pc, #108]	@ (80164cc <HAL_TIM_Base_Start+0xf8>)
 8016460:	4013      	ands	r3, r2
 8016462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	2b06      	cmp	r3, #6
 8016468:	d015      	beq.n	8016496 <HAL_TIM_Base_Start+0xc2>
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016470:	d011      	beq.n	8016496 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	681a      	ldr	r2, [r3, #0]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	f042 0201 	orr.w	r2, r2, #1
 8016480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016482:	e008      	b.n	8016496 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	681a      	ldr	r2, [r3, #0]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	f042 0201 	orr.w	r2, r2, #1
 8016492:	601a      	str	r2, [r3, #0]
 8016494:	e000      	b.n	8016498 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016498:	2300      	movs	r3, #0
}
 801649a:	4618      	mov	r0, r3
 801649c:	3714      	adds	r7, #20
 801649e:	46bd      	mov	sp, r7
 80164a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop
 80164a8:	40010000 	.word	0x40010000
 80164ac:	40000400 	.word	0x40000400
 80164b0:	40000800 	.word	0x40000800
 80164b4:	40000c00 	.word	0x40000c00
 80164b8:	40010400 	.word	0x40010400
 80164bc:	40001800 	.word	0x40001800
 80164c0:	40014000 	.word	0x40014000
 80164c4:	4000e000 	.word	0x4000e000
 80164c8:	4000e400 	.word	0x4000e400
 80164cc:	00010007 	.word	0x00010007

080164d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80164d0:	b480      	push	{r7}
 80164d2:	b085      	sub	sp, #20
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80164de:	b2db      	uxtb	r3, r3
 80164e0:	2b01      	cmp	r3, #1
 80164e2:	d001      	beq.n	80164e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80164e4:	2301      	movs	r3, #1
 80164e6:	e05e      	b.n	80165a6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2202      	movs	r2, #2
 80164ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	68da      	ldr	r2, [r3, #12]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	f042 0201 	orr.w	r2, r2, #1
 80164fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	4a2b      	ldr	r2, [pc, #172]	@ (80165b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8016506:	4293      	cmp	r3, r2
 8016508:	d02c      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016512:	d027      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	4a27      	ldr	r2, [pc, #156]	@ (80165b8 <HAL_TIM_Base_Start_IT+0xe8>)
 801651a:	4293      	cmp	r3, r2
 801651c:	d022      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	4a26      	ldr	r2, [pc, #152]	@ (80165bc <HAL_TIM_Base_Start_IT+0xec>)
 8016524:	4293      	cmp	r3, r2
 8016526:	d01d      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	4a24      	ldr	r2, [pc, #144]	@ (80165c0 <HAL_TIM_Base_Start_IT+0xf0>)
 801652e:	4293      	cmp	r3, r2
 8016530:	d018      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4a23      	ldr	r2, [pc, #140]	@ (80165c4 <HAL_TIM_Base_Start_IT+0xf4>)
 8016538:	4293      	cmp	r3, r2
 801653a:	d013      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	4a21      	ldr	r2, [pc, #132]	@ (80165c8 <HAL_TIM_Base_Start_IT+0xf8>)
 8016542:	4293      	cmp	r3, r2
 8016544:	d00e      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	4a20      	ldr	r2, [pc, #128]	@ (80165cc <HAL_TIM_Base_Start_IT+0xfc>)
 801654c:	4293      	cmp	r3, r2
 801654e:	d009      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	4a1e      	ldr	r2, [pc, #120]	@ (80165d0 <HAL_TIM_Base_Start_IT+0x100>)
 8016556:	4293      	cmp	r3, r2
 8016558:	d004      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	4a1d      	ldr	r2, [pc, #116]	@ (80165d4 <HAL_TIM_Base_Start_IT+0x104>)
 8016560:	4293      	cmp	r3, r2
 8016562:	d115      	bne.n	8016590 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	689a      	ldr	r2, [r3, #8]
 801656a:	4b1b      	ldr	r3, [pc, #108]	@ (80165d8 <HAL_TIM_Base_Start_IT+0x108>)
 801656c:	4013      	ands	r3, r2
 801656e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	2b06      	cmp	r3, #6
 8016574:	d015      	beq.n	80165a2 <HAL_TIM_Base_Start_IT+0xd2>
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801657c:	d011      	beq.n	80165a2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	f042 0201 	orr.w	r2, r2, #1
 801658c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801658e:	e008      	b.n	80165a2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	681a      	ldr	r2, [r3, #0]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f042 0201 	orr.w	r2, r2, #1
 801659e:	601a      	str	r2, [r3, #0]
 80165a0:	e000      	b.n	80165a4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80165a4:	2300      	movs	r3, #0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3714      	adds	r7, #20
 80165aa:	46bd      	mov	sp, r7
 80165ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop
 80165b4:	40010000 	.word	0x40010000
 80165b8:	40000400 	.word	0x40000400
 80165bc:	40000800 	.word	0x40000800
 80165c0:	40000c00 	.word	0x40000c00
 80165c4:	40010400 	.word	0x40010400
 80165c8:	40001800 	.word	0x40001800
 80165cc:	40014000 	.word	0x40014000
 80165d0:	4000e000 	.word	0x4000e000
 80165d4:	4000e400 	.word	0x4000e400
 80165d8:	00010007 	.word	0x00010007

080165dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d101      	bne.n	80165ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80165ea:	2301      	movs	r3, #1
 80165ec:	e049      	b.n	8016682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d106      	bne.n	8016608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2200      	movs	r2, #0
 80165fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7f2 fada 	bl	8008bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2202      	movs	r2, #2
 801660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	681a      	ldr	r2, [r3, #0]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	3304      	adds	r3, #4
 8016618:	4619      	mov	r1, r3
 801661a:	4610      	mov	r0, r2
 801661c:	f000 fd80 	bl	8017120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2201      	movs	r2, #1
 8016624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2201      	movs	r2, #1
 801662c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2201      	movs	r2, #1
 8016634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2201      	movs	r2, #1
 801663c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2201      	movs	r2, #1
 8016644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2201      	movs	r2, #1
 801664c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2201      	movs	r2, #1
 8016654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2201      	movs	r2, #1
 801665c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2201      	movs	r2, #1
 8016664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2201      	movs	r2, #1
 801666c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2201      	movs	r2, #1
 8016674:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2201      	movs	r2, #1
 801667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016680:	2300      	movs	r3, #0
}
 8016682:	4618      	mov	r0, r3
 8016684:	3708      	adds	r7, #8
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
	...

0801668c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b084      	sub	sp, #16
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d109      	bne.n	80166b0 <HAL_TIM_PWM_Start+0x24>
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	bf14      	ite	ne
 80166a8:	2301      	movne	r3, #1
 80166aa:	2300      	moveq	r3, #0
 80166ac:	b2db      	uxtb	r3, r3
 80166ae:	e03c      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 80166b0:	683b      	ldr	r3, [r7, #0]
 80166b2:	2b04      	cmp	r3, #4
 80166b4:	d109      	bne.n	80166ca <HAL_TIM_PWM_Start+0x3e>
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	2b01      	cmp	r3, #1
 80166c0:	bf14      	ite	ne
 80166c2:	2301      	movne	r3, #1
 80166c4:	2300      	moveq	r3, #0
 80166c6:	b2db      	uxtb	r3, r3
 80166c8:	e02f      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	2b08      	cmp	r3, #8
 80166ce:	d109      	bne.n	80166e4 <HAL_TIM_PWM_Start+0x58>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80166d6:	b2db      	uxtb	r3, r3
 80166d8:	2b01      	cmp	r3, #1
 80166da:	bf14      	ite	ne
 80166dc:	2301      	movne	r3, #1
 80166de:	2300      	moveq	r3, #0
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	e022      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	2b0c      	cmp	r3, #12
 80166e8:	d109      	bne.n	80166fe <HAL_TIM_PWM_Start+0x72>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80166f0:	b2db      	uxtb	r3, r3
 80166f2:	2b01      	cmp	r3, #1
 80166f4:	bf14      	ite	ne
 80166f6:	2301      	movne	r3, #1
 80166f8:	2300      	moveq	r3, #0
 80166fa:	b2db      	uxtb	r3, r3
 80166fc:	e015      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	2b10      	cmp	r3, #16
 8016702:	d109      	bne.n	8016718 <HAL_TIM_PWM_Start+0x8c>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801670a:	b2db      	uxtb	r3, r3
 801670c:	2b01      	cmp	r3, #1
 801670e:	bf14      	ite	ne
 8016710:	2301      	movne	r3, #1
 8016712:	2300      	moveq	r3, #0
 8016714:	b2db      	uxtb	r3, r3
 8016716:	e008      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801671e:	b2db      	uxtb	r3, r3
 8016720:	2b01      	cmp	r3, #1
 8016722:	bf14      	ite	ne
 8016724:	2301      	movne	r3, #1
 8016726:	2300      	moveq	r3, #0
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b00      	cmp	r3, #0
 801672c:	d001      	beq.n	8016732 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801672e:	2301      	movs	r3, #1
 8016730:	e0ab      	b.n	801688a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d104      	bne.n	8016742 <HAL_TIM_PWM_Start+0xb6>
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2202      	movs	r2, #2
 801673c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016740:	e023      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	2b04      	cmp	r3, #4
 8016746:	d104      	bne.n	8016752 <HAL_TIM_PWM_Start+0xc6>
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2202      	movs	r2, #2
 801674c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016750:	e01b      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	2b08      	cmp	r3, #8
 8016756:	d104      	bne.n	8016762 <HAL_TIM_PWM_Start+0xd6>
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2202      	movs	r2, #2
 801675c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016760:	e013      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	2b0c      	cmp	r3, #12
 8016766:	d104      	bne.n	8016772 <HAL_TIM_PWM_Start+0xe6>
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2202      	movs	r2, #2
 801676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016770:	e00b      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	2b10      	cmp	r3, #16
 8016776:	d104      	bne.n	8016782 <HAL_TIM_PWM_Start+0xf6>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2202      	movs	r2, #2
 801677c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016780:	e003      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2202      	movs	r2, #2
 8016786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	2201      	movs	r2, #1
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	4618      	mov	r0, r3
 8016794:	f001 fa1a 	bl	8017bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	4a3d      	ldr	r2, [pc, #244]	@ (8016894 <HAL_TIM_PWM_Start+0x208>)
 801679e:	4293      	cmp	r3, r2
 80167a0:	d013      	beq.n	80167ca <HAL_TIM_PWM_Start+0x13e>
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	4a3c      	ldr	r2, [pc, #240]	@ (8016898 <HAL_TIM_PWM_Start+0x20c>)
 80167a8:	4293      	cmp	r3, r2
 80167aa:	d00e      	beq.n	80167ca <HAL_TIM_PWM_Start+0x13e>
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	4a3a      	ldr	r2, [pc, #232]	@ (801689c <HAL_TIM_PWM_Start+0x210>)
 80167b2:	4293      	cmp	r3, r2
 80167b4:	d009      	beq.n	80167ca <HAL_TIM_PWM_Start+0x13e>
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	4a39      	ldr	r2, [pc, #228]	@ (80168a0 <HAL_TIM_PWM_Start+0x214>)
 80167bc:	4293      	cmp	r3, r2
 80167be:	d004      	beq.n	80167ca <HAL_TIM_PWM_Start+0x13e>
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4a37      	ldr	r2, [pc, #220]	@ (80168a4 <HAL_TIM_PWM_Start+0x218>)
 80167c6:	4293      	cmp	r3, r2
 80167c8:	d101      	bne.n	80167ce <HAL_TIM_PWM_Start+0x142>
 80167ca:	2301      	movs	r3, #1
 80167cc:	e000      	b.n	80167d0 <HAL_TIM_PWM_Start+0x144>
 80167ce:	2300      	movs	r3, #0
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d007      	beq.n	80167e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80167e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4a2a      	ldr	r2, [pc, #168]	@ (8016894 <HAL_TIM_PWM_Start+0x208>)
 80167ea:	4293      	cmp	r3, r2
 80167ec:	d02c      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80167f6:	d027      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	4a2a      	ldr	r2, [pc, #168]	@ (80168a8 <HAL_TIM_PWM_Start+0x21c>)
 80167fe:	4293      	cmp	r3, r2
 8016800:	d022      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	4a29      	ldr	r2, [pc, #164]	@ (80168ac <HAL_TIM_PWM_Start+0x220>)
 8016808:	4293      	cmp	r3, r2
 801680a:	d01d      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	4a27      	ldr	r2, [pc, #156]	@ (80168b0 <HAL_TIM_PWM_Start+0x224>)
 8016812:	4293      	cmp	r3, r2
 8016814:	d018      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	4a1f      	ldr	r2, [pc, #124]	@ (8016898 <HAL_TIM_PWM_Start+0x20c>)
 801681c:	4293      	cmp	r3, r2
 801681e:	d013      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	4a23      	ldr	r2, [pc, #140]	@ (80168b4 <HAL_TIM_PWM_Start+0x228>)
 8016826:	4293      	cmp	r3, r2
 8016828:	d00e      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	4a1b      	ldr	r2, [pc, #108]	@ (801689c <HAL_TIM_PWM_Start+0x210>)
 8016830:	4293      	cmp	r3, r2
 8016832:	d009      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	4a1f      	ldr	r2, [pc, #124]	@ (80168b8 <HAL_TIM_PWM_Start+0x22c>)
 801683a:	4293      	cmp	r3, r2
 801683c:	d004      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	4a1e      	ldr	r2, [pc, #120]	@ (80168bc <HAL_TIM_PWM_Start+0x230>)
 8016844:	4293      	cmp	r3, r2
 8016846:	d115      	bne.n	8016874 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	689a      	ldr	r2, [r3, #8]
 801684e:	4b1c      	ldr	r3, [pc, #112]	@ (80168c0 <HAL_TIM_PWM_Start+0x234>)
 8016850:	4013      	ands	r3, r2
 8016852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2b06      	cmp	r3, #6
 8016858:	d015      	beq.n	8016886 <HAL_TIM_PWM_Start+0x1fa>
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016860:	d011      	beq.n	8016886 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	681a      	ldr	r2, [r3, #0]
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	f042 0201 	orr.w	r2, r2, #1
 8016870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016872:	e008      	b.n	8016886 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	681a      	ldr	r2, [r3, #0]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	f042 0201 	orr.w	r2, r2, #1
 8016882:	601a      	str	r2, [r3, #0]
 8016884:	e000      	b.n	8016888 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016888:	2300      	movs	r3, #0
}
 801688a:	4618      	mov	r0, r3
 801688c:	3710      	adds	r7, #16
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}
 8016892:	bf00      	nop
 8016894:	40010000 	.word	0x40010000
 8016898:	40010400 	.word	0x40010400
 801689c:	40014000 	.word	0x40014000
 80168a0:	40014400 	.word	0x40014400
 80168a4:	40014800 	.word	0x40014800
 80168a8:	40000400 	.word	0x40000400
 80168ac:	40000800 	.word	0x40000800
 80168b0:	40000c00 	.word	0x40000c00
 80168b4:	40001800 	.word	0x40001800
 80168b8:	4000e000 	.word	0x4000e000
 80168bc:	4000e400 	.word	0x4000e400
 80168c0:	00010007 	.word	0x00010007

080168c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d101      	bne.n	80168d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80168d2:	2301      	movs	r3, #1
 80168d4:	e049      	b.n	801696a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d106      	bne.n	80168f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2200      	movs	r2, #0
 80168e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7f2 f9a0 	bl	8008c30 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2202      	movs	r2, #2
 80168f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681a      	ldr	r2, [r3, #0]
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	3304      	adds	r3, #4
 8016900:	4619      	mov	r1, r3
 8016902:	4610      	mov	r0, r2
 8016904:	f000 fc0c 	bl	8017120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2201      	movs	r2, #1
 801690c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	2201      	movs	r2, #1
 8016914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2201      	movs	r2, #1
 801691c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2201      	movs	r2, #1
 8016924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2201      	movs	r2, #1
 801692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2201      	movs	r2, #1
 8016934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2201      	movs	r2, #1
 801693c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2201      	movs	r2, #1
 8016944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2201      	movs	r2, #1
 801694c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2201      	movs	r2, #1
 8016954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2201      	movs	r2, #1
 801695c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2201      	movs	r2, #1
 8016964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016968:	2300      	movs	r3, #0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016972:	b580      	push	{r7, lr}
 8016974:	b084      	sub	sp, #16
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	691b      	ldr	r3, [r3, #16]
 8016988:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	f003 0302 	and.w	r3, r3, #2
 8016990:	2b00      	cmp	r3, #0
 8016992:	d020      	beq.n	80169d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	f003 0302 	and.w	r3, r3, #2
 801699a:	2b00      	cmp	r3, #0
 801699c:	d01b      	beq.n	80169d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f06f 0202 	mvn.w	r2, #2
 80169a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2201      	movs	r2, #1
 80169ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	699b      	ldr	r3, [r3, #24]
 80169b4:	f003 0303 	and.w	r3, r3, #3
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d003      	beq.n	80169c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f000 fb91 	bl	80170e4 <HAL_TIM_IC_CaptureCallback>
 80169c2:	e005      	b.n	80169d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 fb83 	bl	80170d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f000 fb94 	bl	80170f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	f003 0304 	and.w	r3, r3, #4
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d020      	beq.n	8016a22 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f003 0304 	and.w	r3, r3, #4
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d01b      	beq.n	8016a22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	f06f 0204 	mvn.w	r2, #4
 80169f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2202      	movs	r2, #2
 80169f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	699b      	ldr	r3, [r3, #24]
 8016a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d003      	beq.n	8016a10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	f000 fb6b 	bl	80170e4 <HAL_TIM_IC_CaptureCallback>
 8016a0e:	e005      	b.n	8016a1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f000 fb5d 	bl	80170d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a16:	6878      	ldr	r0, [r7, #4]
 8016a18:	f000 fb6e 	bl	80170f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	f003 0308 	and.w	r3, r3, #8
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d020      	beq.n	8016a6e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	f003 0308 	and.w	r3, r3, #8
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d01b      	beq.n	8016a6e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	f06f 0208 	mvn.w	r2, #8
 8016a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2204      	movs	r2, #4
 8016a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	69db      	ldr	r3, [r3, #28]
 8016a4c:	f003 0303 	and.w	r3, r3, #3
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d003      	beq.n	8016a5c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f000 fb45 	bl	80170e4 <HAL_TIM_IC_CaptureCallback>
 8016a5a:	e005      	b.n	8016a68 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f000 fb37 	bl	80170d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	f000 fb48 	bl	80170f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	f003 0310 	and.w	r3, r3, #16
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d020      	beq.n	8016aba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	f003 0310 	and.w	r3, r3, #16
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d01b      	beq.n	8016aba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	f06f 0210 	mvn.w	r2, #16
 8016a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2208      	movs	r2, #8
 8016a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	69db      	ldr	r3, [r3, #28]
 8016a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d003      	beq.n	8016aa8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f000 fb1f 	bl	80170e4 <HAL_TIM_IC_CaptureCallback>
 8016aa6:	e005      	b.n	8016ab4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f000 fb11 	bl	80170d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f000 fb22 	bl	80170f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	f003 0301 	and.w	r3, r3, #1
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d00c      	beq.n	8016ade <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	f003 0301 	and.w	r3, r3, #1
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d007      	beq.n	8016ade <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	f06f 0201 	mvn.w	r2, #1
 8016ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f7ef faeb 	bl	80060b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016ade:	68bb      	ldr	r3, [r7, #8]
 8016ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d104      	bne.n	8016af2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d00c      	beq.n	8016b0c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d007      	beq.n	8016b0c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f001 f9b8 	bl	8017e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d00c      	beq.n	8016b30 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d007      	beq.n	8016b30 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f001 f9b0 	bl	8017e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d00c      	beq.n	8016b54 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d007      	beq.n	8016b54 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	f000 fadc 	bl	801710c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	f003 0320 	and.w	r3, r3, #32
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00c      	beq.n	8016b78 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	f003 0320 	and.w	r3, r3, #32
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d007      	beq.n	8016b78 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	f06f 0220 	mvn.w	r2, #32
 8016b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	f001 f978 	bl	8017e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016b78:	bf00      	nop
 8016b7a:	3710      	adds	r7, #16
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b086      	sub	sp, #24
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	60b9      	str	r1, [r7, #8]
 8016b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016b96:	2b01      	cmp	r3, #1
 8016b98:	d101      	bne.n	8016b9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8016b9a:	2302      	movs	r3, #2
 8016b9c:	e088      	b.n	8016cb0 <HAL_TIM_IC_ConfigChannel+0x130>
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	2201      	movs	r2, #1
 8016ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d11b      	bne.n	8016be4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bb4:	68bb      	ldr	r3, [r7, #8]
 8016bb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016bbc:	f000 fe32 	bl	8017824 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	699a      	ldr	r2, [r3, #24]
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f022 020c 	bic.w	r2, r2, #12
 8016bce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	6999      	ldr	r1, [r3, #24]
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	689a      	ldr	r2, [r3, #8]
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	430a      	orrs	r2, r1
 8016be0:	619a      	str	r2, [r3, #24]
 8016be2:	e060      	b.n	8016ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2b04      	cmp	r3, #4
 8016be8:	d11c      	bne.n	8016c24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8016bfa:	f000 fec2 	bl	8017982 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	699a      	ldr	r2, [r3, #24]
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	6999      	ldr	r1, [r3, #24]
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	689b      	ldr	r3, [r3, #8]
 8016c18:	021a      	lsls	r2, r3, #8
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	430a      	orrs	r2, r1
 8016c20:	619a      	str	r2, [r3, #24]
 8016c22:	e040      	b.n	8016ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2b08      	cmp	r3, #8
 8016c28:	d11b      	bne.n	8016c62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016c3a:	f000 ff0f 	bl	8017a5c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	69da      	ldr	r2, [r3, #28]
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	f022 020c 	bic.w	r2, r2, #12
 8016c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	69d9      	ldr	r1, [r3, #28]
 8016c54:	68bb      	ldr	r3, [r7, #8]
 8016c56:	689a      	ldr	r2, [r3, #8]
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	430a      	orrs	r2, r1
 8016c5e:	61da      	str	r2, [r3, #28]
 8016c60:	e021      	b.n	8016ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2b0c      	cmp	r3, #12
 8016c66:	d11c      	bne.n	8016ca2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c74:	68bb      	ldr	r3, [r7, #8]
 8016c76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016c78:	f000 ff2c 	bl	8017ad4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	69da      	ldr	r2, [r3, #28]
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	69d9      	ldr	r1, [r3, #28]
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	689b      	ldr	r3, [r3, #8]
 8016c96:	021a      	lsls	r2, r3, #8
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	430a      	orrs	r2, r1
 8016c9e:	61da      	str	r2, [r3, #28]
 8016ca0:	e001      	b.n	8016ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2200      	movs	r2, #0
 8016caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3718      	adds	r7, #24
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b086      	sub	sp, #24
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d101      	bne.n	8016cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016cd2:	2302      	movs	r3, #2
 8016cd4:	e0ff      	b.n	8016ed6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2201      	movs	r2, #1
 8016cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2b14      	cmp	r3, #20
 8016ce2:	f200 80f0 	bhi.w	8016ec6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8016cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cec:	08016d41 	.word	0x08016d41
 8016cf0:	08016ec7 	.word	0x08016ec7
 8016cf4:	08016ec7 	.word	0x08016ec7
 8016cf8:	08016ec7 	.word	0x08016ec7
 8016cfc:	08016d81 	.word	0x08016d81
 8016d00:	08016ec7 	.word	0x08016ec7
 8016d04:	08016ec7 	.word	0x08016ec7
 8016d08:	08016ec7 	.word	0x08016ec7
 8016d0c:	08016dc3 	.word	0x08016dc3
 8016d10:	08016ec7 	.word	0x08016ec7
 8016d14:	08016ec7 	.word	0x08016ec7
 8016d18:	08016ec7 	.word	0x08016ec7
 8016d1c:	08016e03 	.word	0x08016e03
 8016d20:	08016ec7 	.word	0x08016ec7
 8016d24:	08016ec7 	.word	0x08016ec7
 8016d28:	08016ec7 	.word	0x08016ec7
 8016d2c:	08016e45 	.word	0x08016e45
 8016d30:	08016ec7 	.word	0x08016ec7
 8016d34:	08016ec7 	.word	0x08016ec7
 8016d38:	08016ec7 	.word	0x08016ec7
 8016d3c:	08016e85 	.word	0x08016e85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	68b9      	ldr	r1, [r7, #8]
 8016d46:	4618      	mov	r0, r3
 8016d48:	f000 fa96 	bl	8017278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	699a      	ldr	r2, [r3, #24]
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	f042 0208 	orr.w	r2, r2, #8
 8016d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	699a      	ldr	r2, [r3, #24]
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	f022 0204 	bic.w	r2, r2, #4
 8016d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	6999      	ldr	r1, [r3, #24]
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	691a      	ldr	r2, [r3, #16]
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	430a      	orrs	r2, r1
 8016d7c:	619a      	str	r2, [r3, #24]
      break;
 8016d7e:	e0a5      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	68b9      	ldr	r1, [r7, #8]
 8016d86:	4618      	mov	r0, r3
 8016d88:	f000 fb06 	bl	8017398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	699a      	ldr	r2, [r3, #24]
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	699a      	ldr	r2, [r3, #24]
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	6999      	ldr	r1, [r3, #24]
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	691b      	ldr	r3, [r3, #16]
 8016db6:	021a      	lsls	r2, r3, #8
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	430a      	orrs	r2, r1
 8016dbe:	619a      	str	r2, [r3, #24]
      break;
 8016dc0:	e084      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	68b9      	ldr	r1, [r7, #8]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f000 fb6f 	bl	80174ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	69da      	ldr	r2, [r3, #28]
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	f042 0208 	orr.w	r2, r2, #8
 8016ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	69da      	ldr	r2, [r3, #28]
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f022 0204 	bic.w	r2, r2, #4
 8016dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	69d9      	ldr	r1, [r3, #28]
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	691a      	ldr	r2, [r3, #16]
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	430a      	orrs	r2, r1
 8016dfe:	61da      	str	r2, [r3, #28]
      break;
 8016e00:	e064      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	68b9      	ldr	r1, [r7, #8]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f000 fbd7 	bl	80175bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	69da      	ldr	r2, [r3, #28]
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	69da      	ldr	r2, [r3, #28]
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	69d9      	ldr	r1, [r3, #28]
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	691b      	ldr	r3, [r3, #16]
 8016e38:	021a      	lsls	r2, r3, #8
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	430a      	orrs	r2, r1
 8016e40:	61da      	str	r2, [r3, #28]
      break;
 8016e42:	e043      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	68b9      	ldr	r1, [r7, #8]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f000 fc20 	bl	8017690 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f042 0208 	orr.w	r2, r2, #8
 8016e5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	f022 0204 	bic.w	r2, r2, #4
 8016e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	691a      	ldr	r2, [r3, #16]
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	430a      	orrs	r2, r1
 8016e80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e82:	e023      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	68b9      	ldr	r1, [r7, #8]
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f000 fc64 	bl	8017758 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016eae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	691b      	ldr	r3, [r3, #16]
 8016eba:	021a      	lsls	r2, r3, #8
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	430a      	orrs	r2, r1
 8016ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016ec4:	e002      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8016eca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3718      	adds	r7, #24
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop

08016ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b084      	sub	sp, #16
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016eea:	2300      	movs	r3, #0
 8016eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016ef4:	2b01      	cmp	r3, #1
 8016ef6:	d101      	bne.n	8016efc <HAL_TIM_ConfigClockSource+0x1c>
 8016ef8:	2302      	movs	r3, #2
 8016efa:	e0dc      	b.n	80170b6 <HAL_TIM_ConfigClockSource+0x1d6>
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2201      	movs	r2, #1
 8016f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	2202      	movs	r2, #2
 8016f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	689b      	ldr	r3, [r3, #8]
 8016f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016f14:	68ba      	ldr	r2, [r7, #8]
 8016f16:	4b6a      	ldr	r3, [pc, #424]	@ (80170c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016f18:	4013      	ands	r3, r2
 8016f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	68ba      	ldr	r2, [r7, #8]
 8016f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	4a64      	ldr	r2, [pc, #400]	@ (80170c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f32:	4293      	cmp	r3, r2
 8016f34:	f000 80a9 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f38:	4a62      	ldr	r2, [pc, #392]	@ (80170c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f3a:	4293      	cmp	r3, r2
 8016f3c:	f200 80ae 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f40:	4a61      	ldr	r2, [pc, #388]	@ (80170c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f42:	4293      	cmp	r3, r2
 8016f44:	f000 80a1 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f48:	4a5f      	ldr	r2, [pc, #380]	@ (80170c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	f200 80a6 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f50:	4a5e      	ldr	r2, [pc, #376]	@ (80170cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f52:	4293      	cmp	r3, r2
 8016f54:	f000 8099 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f58:	4a5c      	ldr	r2, [pc, #368]	@ (80170cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	f200 809e 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f64:	f000 8091 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f6c:	f200 8096 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f74:	f000 8089 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f7c:	f200 808e 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f84:	d03e      	beq.n	8017004 <HAL_TIM_ConfigClockSource+0x124>
 8016f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f8a:	f200 8087 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f92:	f000 8086 	beq.w	80170a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8016f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f9a:	d87f      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f9c:	2b70      	cmp	r3, #112	@ 0x70
 8016f9e:	d01a      	beq.n	8016fd6 <HAL_TIM_ConfigClockSource+0xf6>
 8016fa0:	2b70      	cmp	r3, #112	@ 0x70
 8016fa2:	d87b      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fa4:	2b60      	cmp	r3, #96	@ 0x60
 8016fa6:	d050      	beq.n	801704a <HAL_TIM_ConfigClockSource+0x16a>
 8016fa8:	2b60      	cmp	r3, #96	@ 0x60
 8016faa:	d877      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fac:	2b50      	cmp	r3, #80	@ 0x50
 8016fae:	d03c      	beq.n	801702a <HAL_TIM_ConfigClockSource+0x14a>
 8016fb0:	2b50      	cmp	r3, #80	@ 0x50
 8016fb2:	d873      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fb4:	2b40      	cmp	r3, #64	@ 0x40
 8016fb6:	d058      	beq.n	801706a <HAL_TIM_ConfigClockSource+0x18a>
 8016fb8:	2b40      	cmp	r3, #64	@ 0x40
 8016fba:	d86f      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fbc:	2b30      	cmp	r3, #48	@ 0x30
 8016fbe:	d064      	beq.n	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fc0:	2b30      	cmp	r3, #48	@ 0x30
 8016fc2:	d86b      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fc4:	2b20      	cmp	r3, #32
 8016fc6:	d060      	beq.n	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fc8:	2b20      	cmp	r3, #32
 8016fca:	d867      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d05c      	beq.n	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fd0:	2b10      	cmp	r3, #16
 8016fd2:	d05a      	beq.n	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fd4:	e062      	b.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016fe6:	f000 fdd1 	bl	8017b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	689b      	ldr	r3, [r3, #8]
 8016ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	68ba      	ldr	r2, [r7, #8]
 8017000:	609a      	str	r2, [r3, #8]
      break;
 8017002:	e04f      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017014:	f000 fdba 	bl	8017b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	689a      	ldr	r2, [r3, #8]
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017026:	609a      	str	r2, [r3, #8]
      break;
 8017028:	e03c      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017036:	461a      	mov	r2, r3
 8017038:	f000 fc74 	bl	8017924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	2150      	movs	r1, #80	@ 0x50
 8017042:	4618      	mov	r0, r3
 8017044:	f000 fd84 	bl	8017b50 <TIM_ITRx_SetConfig>
      break;
 8017048:	e02c      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017056:	461a      	mov	r2, r3
 8017058:	f000 fcd0 	bl	80179fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	2160      	movs	r1, #96	@ 0x60
 8017062:	4618      	mov	r0, r3
 8017064:	f000 fd74 	bl	8017b50 <TIM_ITRx_SetConfig>
      break;
 8017068:	e01c      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017076:	461a      	mov	r2, r3
 8017078:	f000 fc54 	bl	8017924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	2140      	movs	r1, #64	@ 0x40
 8017082:	4618      	mov	r0, r3
 8017084:	f000 fd64 	bl	8017b50 <TIM_ITRx_SetConfig>
      break;
 8017088:	e00c      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681a      	ldr	r2, [r3, #0]
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	4619      	mov	r1, r3
 8017094:	4610      	mov	r0, r2
 8017096:	f000 fd5b 	bl	8017b50 <TIM_ITRx_SetConfig>
      break;
 801709a:	e003      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801709c:	2301      	movs	r3, #1
 801709e:	73fb      	strb	r3, [r7, #15]
      break;
 80170a0:	e000      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80170a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	2201      	movs	r2, #1
 80170a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	2200      	movs	r2, #0
 80170b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80170b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3710      	adds	r7, #16
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd80      	pop	{r7, pc}
 80170be:	bf00      	nop
 80170c0:	ffceff88 	.word	0xffceff88
 80170c4:	00100040 	.word	0x00100040
 80170c8:	00100030 	.word	0x00100030
 80170cc:	00100020 	.word	0x00100020

080170d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b083      	sub	sp, #12
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80170d8:	bf00      	nop
 80170da:	370c      	adds	r7, #12
 80170dc:	46bd      	mov	sp, r7
 80170de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e2:	4770      	bx	lr

080170e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80170e4:	b480      	push	{r7}
 80170e6:	b083      	sub	sp, #12
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80170ec:	bf00      	nop
 80170ee:	370c      	adds	r7, #12
 80170f0:	46bd      	mov	sp, r7
 80170f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f6:	4770      	bx	lr

080170f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80170f8:	b480      	push	{r7}
 80170fa:	b083      	sub	sp, #12
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017100:	bf00      	nop
 8017102:	370c      	adds	r7, #12
 8017104:	46bd      	mov	sp, r7
 8017106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710a:	4770      	bx	lr

0801710c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801710c:	b480      	push	{r7}
 801710e:	b083      	sub	sp, #12
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017114:	bf00      	nop
 8017116:	370c      	adds	r7, #12
 8017118:	46bd      	mov	sp, r7
 801711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711e:	4770      	bx	lr

08017120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017120:	b480      	push	{r7}
 8017122:	b085      	sub	sp, #20
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
 8017128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	4a47      	ldr	r2, [pc, #284]	@ (8017250 <TIM_Base_SetConfig+0x130>)
 8017134:	4293      	cmp	r3, r2
 8017136:	d013      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801713e:	d00f      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	4a44      	ldr	r2, [pc, #272]	@ (8017254 <TIM_Base_SetConfig+0x134>)
 8017144:	4293      	cmp	r3, r2
 8017146:	d00b      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	4a43      	ldr	r2, [pc, #268]	@ (8017258 <TIM_Base_SetConfig+0x138>)
 801714c:	4293      	cmp	r3, r2
 801714e:	d007      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	4a42      	ldr	r2, [pc, #264]	@ (801725c <TIM_Base_SetConfig+0x13c>)
 8017154:	4293      	cmp	r3, r2
 8017156:	d003      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	4a41      	ldr	r2, [pc, #260]	@ (8017260 <TIM_Base_SetConfig+0x140>)
 801715c:	4293      	cmp	r3, r2
 801715e:	d108      	bne.n	8017172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	685b      	ldr	r3, [r3, #4]
 801716c:	68fa      	ldr	r2, [r7, #12]
 801716e:	4313      	orrs	r3, r2
 8017170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	4a36      	ldr	r2, [pc, #216]	@ (8017250 <TIM_Base_SetConfig+0x130>)
 8017176:	4293      	cmp	r3, r2
 8017178:	d027      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017180:	d023      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	4a33      	ldr	r2, [pc, #204]	@ (8017254 <TIM_Base_SetConfig+0x134>)
 8017186:	4293      	cmp	r3, r2
 8017188:	d01f      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	4a32      	ldr	r2, [pc, #200]	@ (8017258 <TIM_Base_SetConfig+0x138>)
 801718e:	4293      	cmp	r3, r2
 8017190:	d01b      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	4a31      	ldr	r2, [pc, #196]	@ (801725c <TIM_Base_SetConfig+0x13c>)
 8017196:	4293      	cmp	r3, r2
 8017198:	d017      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4a30      	ldr	r2, [pc, #192]	@ (8017260 <TIM_Base_SetConfig+0x140>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d013      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4a2f      	ldr	r2, [pc, #188]	@ (8017264 <TIM_Base_SetConfig+0x144>)
 80171a6:	4293      	cmp	r3, r2
 80171a8:	d00f      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	4a2e      	ldr	r2, [pc, #184]	@ (8017268 <TIM_Base_SetConfig+0x148>)
 80171ae:	4293      	cmp	r3, r2
 80171b0:	d00b      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	4a2d      	ldr	r2, [pc, #180]	@ (801726c <TIM_Base_SetConfig+0x14c>)
 80171b6:	4293      	cmp	r3, r2
 80171b8:	d007      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	4a2c      	ldr	r2, [pc, #176]	@ (8017270 <TIM_Base_SetConfig+0x150>)
 80171be:	4293      	cmp	r3, r2
 80171c0:	d003      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	4a2b      	ldr	r2, [pc, #172]	@ (8017274 <TIM_Base_SetConfig+0x154>)
 80171c6:	4293      	cmp	r3, r2
 80171c8:	d108      	bne.n	80171dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80171d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	68db      	ldr	r3, [r3, #12]
 80171d6:	68fa      	ldr	r2, [r7, #12]
 80171d8:	4313      	orrs	r3, r2
 80171da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	695b      	ldr	r3, [r3, #20]
 80171e6:	4313      	orrs	r3, r2
 80171e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	689a      	ldr	r2, [r3, #8]
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	4a14      	ldr	r2, [pc, #80]	@ (8017250 <TIM_Base_SetConfig+0x130>)
 80171fe:	4293      	cmp	r3, r2
 8017200:	d00f      	beq.n	8017222 <TIM_Base_SetConfig+0x102>
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	4a16      	ldr	r2, [pc, #88]	@ (8017260 <TIM_Base_SetConfig+0x140>)
 8017206:	4293      	cmp	r3, r2
 8017208:	d00b      	beq.n	8017222 <TIM_Base_SetConfig+0x102>
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	4a15      	ldr	r2, [pc, #84]	@ (8017264 <TIM_Base_SetConfig+0x144>)
 801720e:	4293      	cmp	r3, r2
 8017210:	d007      	beq.n	8017222 <TIM_Base_SetConfig+0x102>
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	4a14      	ldr	r2, [pc, #80]	@ (8017268 <TIM_Base_SetConfig+0x148>)
 8017216:	4293      	cmp	r3, r2
 8017218:	d003      	beq.n	8017222 <TIM_Base_SetConfig+0x102>
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	4a13      	ldr	r2, [pc, #76]	@ (801726c <TIM_Base_SetConfig+0x14c>)
 801721e:	4293      	cmp	r3, r2
 8017220:	d103      	bne.n	801722a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	691a      	ldr	r2, [r3, #16]
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f043 0204 	orr.w	r2, r3, #4
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	2201      	movs	r2, #1
 801723a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	68fa      	ldr	r2, [r7, #12]
 8017240:	601a      	str	r2, [r3, #0]
}
 8017242:	bf00      	nop
 8017244:	3714      	adds	r7, #20
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr
 801724e:	bf00      	nop
 8017250:	40010000 	.word	0x40010000
 8017254:	40000400 	.word	0x40000400
 8017258:	40000800 	.word	0x40000800
 801725c:	40000c00 	.word	0x40000c00
 8017260:	40010400 	.word	0x40010400
 8017264:	40014000 	.word	0x40014000
 8017268:	40014400 	.word	0x40014400
 801726c:	40014800 	.word	0x40014800
 8017270:	4000e000 	.word	0x4000e000
 8017274:	4000e400 	.word	0x4000e400

08017278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017278:	b480      	push	{r7}
 801727a:	b087      	sub	sp, #28
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	6a1b      	ldr	r3, [r3, #32]
 8017286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6a1b      	ldr	r3, [r3, #32]
 801728c:	f023 0201 	bic.w	r2, r3, #1
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	699b      	ldr	r3, [r3, #24]
 801729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80172a0:	68fa      	ldr	r2, [r7, #12]
 80172a2:	4b37      	ldr	r3, [pc, #220]	@ (8017380 <TIM_OC1_SetConfig+0x108>)
 80172a4:	4013      	ands	r3, r2
 80172a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f023 0303 	bic.w	r3, r3, #3
 80172ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	68fa      	ldr	r2, [r7, #12]
 80172b6:	4313      	orrs	r3, r2
 80172b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	f023 0302 	bic.w	r3, r3, #2
 80172c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	689b      	ldr	r3, [r3, #8]
 80172c6:	697a      	ldr	r2, [r7, #20]
 80172c8:	4313      	orrs	r3, r2
 80172ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	4a2d      	ldr	r2, [pc, #180]	@ (8017384 <TIM_OC1_SetConfig+0x10c>)
 80172d0:	4293      	cmp	r3, r2
 80172d2:	d00f      	beq.n	80172f4 <TIM_OC1_SetConfig+0x7c>
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	4a2c      	ldr	r2, [pc, #176]	@ (8017388 <TIM_OC1_SetConfig+0x110>)
 80172d8:	4293      	cmp	r3, r2
 80172da:	d00b      	beq.n	80172f4 <TIM_OC1_SetConfig+0x7c>
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	4a2b      	ldr	r2, [pc, #172]	@ (801738c <TIM_OC1_SetConfig+0x114>)
 80172e0:	4293      	cmp	r3, r2
 80172e2:	d007      	beq.n	80172f4 <TIM_OC1_SetConfig+0x7c>
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	4a2a      	ldr	r2, [pc, #168]	@ (8017390 <TIM_OC1_SetConfig+0x118>)
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d003      	beq.n	80172f4 <TIM_OC1_SetConfig+0x7c>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	4a29      	ldr	r2, [pc, #164]	@ (8017394 <TIM_OC1_SetConfig+0x11c>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d10c      	bne.n	801730e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80172f4:	697b      	ldr	r3, [r7, #20]
 80172f6:	f023 0308 	bic.w	r3, r3, #8
 80172fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	68db      	ldr	r3, [r3, #12]
 8017300:	697a      	ldr	r2, [r7, #20]
 8017302:	4313      	orrs	r3, r2
 8017304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017306:	697b      	ldr	r3, [r7, #20]
 8017308:	f023 0304 	bic.w	r3, r3, #4
 801730c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	4a1c      	ldr	r2, [pc, #112]	@ (8017384 <TIM_OC1_SetConfig+0x10c>)
 8017312:	4293      	cmp	r3, r2
 8017314:	d00f      	beq.n	8017336 <TIM_OC1_SetConfig+0xbe>
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	4a1b      	ldr	r2, [pc, #108]	@ (8017388 <TIM_OC1_SetConfig+0x110>)
 801731a:	4293      	cmp	r3, r2
 801731c:	d00b      	beq.n	8017336 <TIM_OC1_SetConfig+0xbe>
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	4a1a      	ldr	r2, [pc, #104]	@ (801738c <TIM_OC1_SetConfig+0x114>)
 8017322:	4293      	cmp	r3, r2
 8017324:	d007      	beq.n	8017336 <TIM_OC1_SetConfig+0xbe>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4a19      	ldr	r2, [pc, #100]	@ (8017390 <TIM_OC1_SetConfig+0x118>)
 801732a:	4293      	cmp	r3, r2
 801732c:	d003      	beq.n	8017336 <TIM_OC1_SetConfig+0xbe>
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	4a18      	ldr	r2, [pc, #96]	@ (8017394 <TIM_OC1_SetConfig+0x11c>)
 8017332:	4293      	cmp	r3, r2
 8017334:	d111      	bne.n	801735a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801733c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801733e:	693b      	ldr	r3, [r7, #16]
 8017340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	695b      	ldr	r3, [r3, #20]
 801734a:	693a      	ldr	r2, [r7, #16]
 801734c:	4313      	orrs	r3, r2
 801734e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	699b      	ldr	r3, [r3, #24]
 8017354:	693a      	ldr	r2, [r7, #16]
 8017356:	4313      	orrs	r3, r2
 8017358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	693a      	ldr	r2, [r7, #16]
 801735e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	68fa      	ldr	r2, [r7, #12]
 8017364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	685a      	ldr	r2, [r3, #4]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	697a      	ldr	r2, [r7, #20]
 8017372:	621a      	str	r2, [r3, #32]
}
 8017374:	bf00      	nop
 8017376:	371c      	adds	r7, #28
 8017378:	46bd      	mov	sp, r7
 801737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737e:	4770      	bx	lr
 8017380:	fffeff8f 	.word	0xfffeff8f
 8017384:	40010000 	.word	0x40010000
 8017388:	40010400 	.word	0x40010400
 801738c:	40014000 	.word	0x40014000
 8017390:	40014400 	.word	0x40014400
 8017394:	40014800 	.word	0x40014800

08017398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017398:	b480      	push	{r7}
 801739a:	b087      	sub	sp, #28
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	6a1b      	ldr	r3, [r3, #32]
 80173a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	6a1b      	ldr	r3, [r3, #32]
 80173ac:	f023 0210 	bic.w	r2, r3, #16
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	685b      	ldr	r3, [r3, #4]
 80173b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	699b      	ldr	r3, [r3, #24]
 80173be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80173c0:	68fa      	ldr	r2, [r7, #12]
 80173c2:	4b34      	ldr	r3, [pc, #208]	@ (8017494 <TIM_OC2_SetConfig+0xfc>)
 80173c4:	4013      	ands	r3, r2
 80173c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80173ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	021b      	lsls	r3, r3, #8
 80173d6:	68fa      	ldr	r2, [r7, #12]
 80173d8:	4313      	orrs	r3, r2
 80173da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	f023 0320 	bic.w	r3, r3, #32
 80173e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	689b      	ldr	r3, [r3, #8]
 80173e8:	011b      	lsls	r3, r3, #4
 80173ea:	697a      	ldr	r2, [r7, #20]
 80173ec:	4313      	orrs	r3, r2
 80173ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	4a29      	ldr	r2, [pc, #164]	@ (8017498 <TIM_OC2_SetConfig+0x100>)
 80173f4:	4293      	cmp	r3, r2
 80173f6:	d003      	beq.n	8017400 <TIM_OC2_SetConfig+0x68>
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	4a28      	ldr	r2, [pc, #160]	@ (801749c <TIM_OC2_SetConfig+0x104>)
 80173fc:	4293      	cmp	r3, r2
 80173fe:	d10d      	bne.n	801741c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017400:	697b      	ldr	r3, [r7, #20]
 8017402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	68db      	ldr	r3, [r3, #12]
 801740c:	011b      	lsls	r3, r3, #4
 801740e:	697a      	ldr	r2, [r7, #20]
 8017410:	4313      	orrs	r3, r2
 8017412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801741a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	4a1e      	ldr	r2, [pc, #120]	@ (8017498 <TIM_OC2_SetConfig+0x100>)
 8017420:	4293      	cmp	r3, r2
 8017422:	d00f      	beq.n	8017444 <TIM_OC2_SetConfig+0xac>
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	4a1d      	ldr	r2, [pc, #116]	@ (801749c <TIM_OC2_SetConfig+0x104>)
 8017428:	4293      	cmp	r3, r2
 801742a:	d00b      	beq.n	8017444 <TIM_OC2_SetConfig+0xac>
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	4a1c      	ldr	r2, [pc, #112]	@ (80174a0 <TIM_OC2_SetConfig+0x108>)
 8017430:	4293      	cmp	r3, r2
 8017432:	d007      	beq.n	8017444 <TIM_OC2_SetConfig+0xac>
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	4a1b      	ldr	r2, [pc, #108]	@ (80174a4 <TIM_OC2_SetConfig+0x10c>)
 8017438:	4293      	cmp	r3, r2
 801743a:	d003      	beq.n	8017444 <TIM_OC2_SetConfig+0xac>
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	4a1a      	ldr	r2, [pc, #104]	@ (80174a8 <TIM_OC2_SetConfig+0x110>)
 8017440:	4293      	cmp	r3, r2
 8017442:	d113      	bne.n	801746c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017444:	693b      	ldr	r3, [r7, #16]
 8017446:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801744a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801744c:	693b      	ldr	r3, [r7, #16]
 801744e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	695b      	ldr	r3, [r3, #20]
 8017458:	009b      	lsls	r3, r3, #2
 801745a:	693a      	ldr	r2, [r7, #16]
 801745c:	4313      	orrs	r3, r2
 801745e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	699b      	ldr	r3, [r3, #24]
 8017464:	009b      	lsls	r3, r3, #2
 8017466:	693a      	ldr	r2, [r7, #16]
 8017468:	4313      	orrs	r3, r2
 801746a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	693a      	ldr	r2, [r7, #16]
 8017470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	68fa      	ldr	r2, [r7, #12]
 8017476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	685a      	ldr	r2, [r3, #4]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	697a      	ldr	r2, [r7, #20]
 8017484:	621a      	str	r2, [r3, #32]
}
 8017486:	bf00      	nop
 8017488:	371c      	adds	r7, #28
 801748a:	46bd      	mov	sp, r7
 801748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017490:	4770      	bx	lr
 8017492:	bf00      	nop
 8017494:	feff8fff 	.word	0xfeff8fff
 8017498:	40010000 	.word	0x40010000
 801749c:	40010400 	.word	0x40010400
 80174a0:	40014000 	.word	0x40014000
 80174a4:	40014400 	.word	0x40014400
 80174a8:	40014800 	.word	0x40014800

080174ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80174ac:	b480      	push	{r7}
 80174ae:	b087      	sub	sp, #28
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6a1b      	ldr	r3, [r3, #32]
 80174ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6a1b      	ldr	r3, [r3, #32]
 80174c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	69db      	ldr	r3, [r3, #28]
 80174d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80174d4:	68fa      	ldr	r2, [r7, #12]
 80174d6:	4b33      	ldr	r3, [pc, #204]	@ (80175a4 <TIM_OC3_SetConfig+0xf8>)
 80174d8:	4013      	ands	r3, r2
 80174da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	f023 0303 	bic.w	r3, r3, #3
 80174e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80174e4:	683b      	ldr	r3, [r7, #0]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	68fa      	ldr	r2, [r7, #12]
 80174ea:	4313      	orrs	r3, r2
 80174ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80174f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	689b      	ldr	r3, [r3, #8]
 80174fa:	021b      	lsls	r3, r3, #8
 80174fc:	697a      	ldr	r2, [r7, #20]
 80174fe:	4313      	orrs	r3, r2
 8017500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	4a28      	ldr	r2, [pc, #160]	@ (80175a8 <TIM_OC3_SetConfig+0xfc>)
 8017506:	4293      	cmp	r3, r2
 8017508:	d003      	beq.n	8017512 <TIM_OC3_SetConfig+0x66>
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	4a27      	ldr	r2, [pc, #156]	@ (80175ac <TIM_OC3_SetConfig+0x100>)
 801750e:	4293      	cmp	r3, r2
 8017510:	d10d      	bne.n	801752e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017512:	697b      	ldr	r3, [r7, #20]
 8017514:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	68db      	ldr	r3, [r3, #12]
 801751e:	021b      	lsls	r3, r3, #8
 8017520:	697a      	ldr	r2, [r7, #20]
 8017522:	4313      	orrs	r3, r2
 8017524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801752c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	4a1d      	ldr	r2, [pc, #116]	@ (80175a8 <TIM_OC3_SetConfig+0xfc>)
 8017532:	4293      	cmp	r3, r2
 8017534:	d00f      	beq.n	8017556 <TIM_OC3_SetConfig+0xaa>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	4a1c      	ldr	r2, [pc, #112]	@ (80175ac <TIM_OC3_SetConfig+0x100>)
 801753a:	4293      	cmp	r3, r2
 801753c:	d00b      	beq.n	8017556 <TIM_OC3_SetConfig+0xaa>
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	4a1b      	ldr	r2, [pc, #108]	@ (80175b0 <TIM_OC3_SetConfig+0x104>)
 8017542:	4293      	cmp	r3, r2
 8017544:	d007      	beq.n	8017556 <TIM_OC3_SetConfig+0xaa>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4a1a      	ldr	r2, [pc, #104]	@ (80175b4 <TIM_OC3_SetConfig+0x108>)
 801754a:	4293      	cmp	r3, r2
 801754c:	d003      	beq.n	8017556 <TIM_OC3_SetConfig+0xaa>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	4a19      	ldr	r2, [pc, #100]	@ (80175b8 <TIM_OC3_SetConfig+0x10c>)
 8017552:	4293      	cmp	r3, r2
 8017554:	d113      	bne.n	801757e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017556:	693b      	ldr	r3, [r7, #16]
 8017558:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801755c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	695b      	ldr	r3, [r3, #20]
 801756a:	011b      	lsls	r3, r3, #4
 801756c:	693a      	ldr	r2, [r7, #16]
 801756e:	4313      	orrs	r3, r2
 8017570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	699b      	ldr	r3, [r3, #24]
 8017576:	011b      	lsls	r3, r3, #4
 8017578:	693a      	ldr	r2, [r7, #16]
 801757a:	4313      	orrs	r3, r2
 801757c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	693a      	ldr	r2, [r7, #16]
 8017582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	68fa      	ldr	r2, [r7, #12]
 8017588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	685a      	ldr	r2, [r3, #4]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	697a      	ldr	r2, [r7, #20]
 8017596:	621a      	str	r2, [r3, #32]
}
 8017598:	bf00      	nop
 801759a:	371c      	adds	r7, #28
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr
 80175a4:	fffeff8f 	.word	0xfffeff8f
 80175a8:	40010000 	.word	0x40010000
 80175ac:	40010400 	.word	0x40010400
 80175b0:	40014000 	.word	0x40014000
 80175b4:	40014400 	.word	0x40014400
 80175b8:	40014800 	.word	0x40014800

080175bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80175bc:	b480      	push	{r7}
 80175be:	b087      	sub	sp, #28
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	6a1b      	ldr	r3, [r3, #32]
 80175ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	6a1b      	ldr	r3, [r3, #32]
 80175d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	685b      	ldr	r3, [r3, #4]
 80175dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	69db      	ldr	r3, [r3, #28]
 80175e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80175e4:	68fa      	ldr	r2, [r7, #12]
 80175e6:	4b24      	ldr	r3, [pc, #144]	@ (8017678 <TIM_OC4_SetConfig+0xbc>)
 80175e8:	4013      	ands	r3, r2
 80175ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80175f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	021b      	lsls	r3, r3, #8
 80175fa:	68fa      	ldr	r2, [r7, #12]
 80175fc:	4313      	orrs	r3, r2
 80175fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017600:	693b      	ldr	r3, [r7, #16]
 8017602:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	689b      	ldr	r3, [r3, #8]
 801760c:	031b      	lsls	r3, r3, #12
 801760e:	693a      	ldr	r2, [r7, #16]
 8017610:	4313      	orrs	r3, r2
 8017612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	4a19      	ldr	r2, [pc, #100]	@ (801767c <TIM_OC4_SetConfig+0xc0>)
 8017618:	4293      	cmp	r3, r2
 801761a:	d00f      	beq.n	801763c <TIM_OC4_SetConfig+0x80>
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	4a18      	ldr	r2, [pc, #96]	@ (8017680 <TIM_OC4_SetConfig+0xc4>)
 8017620:	4293      	cmp	r3, r2
 8017622:	d00b      	beq.n	801763c <TIM_OC4_SetConfig+0x80>
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	4a17      	ldr	r2, [pc, #92]	@ (8017684 <TIM_OC4_SetConfig+0xc8>)
 8017628:	4293      	cmp	r3, r2
 801762a:	d007      	beq.n	801763c <TIM_OC4_SetConfig+0x80>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	4a16      	ldr	r2, [pc, #88]	@ (8017688 <TIM_OC4_SetConfig+0xcc>)
 8017630:	4293      	cmp	r3, r2
 8017632:	d003      	beq.n	801763c <TIM_OC4_SetConfig+0x80>
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	4a15      	ldr	r2, [pc, #84]	@ (801768c <TIM_OC4_SetConfig+0xd0>)
 8017638:	4293      	cmp	r3, r2
 801763a:	d109      	bne.n	8017650 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	695b      	ldr	r3, [r3, #20]
 8017648:	019b      	lsls	r3, r3, #6
 801764a:	697a      	ldr	r2, [r7, #20]
 801764c:	4313      	orrs	r3, r2
 801764e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	697a      	ldr	r2, [r7, #20]
 8017654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	68fa      	ldr	r2, [r7, #12]
 801765a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	685a      	ldr	r2, [r3, #4]
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	693a      	ldr	r2, [r7, #16]
 8017668:	621a      	str	r2, [r3, #32]
}
 801766a:	bf00      	nop
 801766c:	371c      	adds	r7, #28
 801766e:	46bd      	mov	sp, r7
 8017670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017674:	4770      	bx	lr
 8017676:	bf00      	nop
 8017678:	feff8fff 	.word	0xfeff8fff
 801767c:	40010000 	.word	0x40010000
 8017680:	40010400 	.word	0x40010400
 8017684:	40014000 	.word	0x40014000
 8017688:	40014400 	.word	0x40014400
 801768c:	40014800 	.word	0x40014800

08017690 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017690:	b480      	push	{r7}
 8017692:	b087      	sub	sp, #28
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	6a1b      	ldr	r3, [r3, #32]
 801769e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	6a1b      	ldr	r3, [r3, #32]
 80176a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	685b      	ldr	r3, [r3, #4]
 80176b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80176b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80176b8:	68fa      	ldr	r2, [r7, #12]
 80176ba:	4b21      	ldr	r3, [pc, #132]	@ (8017740 <TIM_OC5_SetConfig+0xb0>)
 80176bc:	4013      	ands	r3, r2
 80176be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	68fa      	ldr	r2, [r7, #12]
 80176c6:	4313      	orrs	r3, r2
 80176c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80176ca:	693b      	ldr	r3, [r7, #16]
 80176cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80176d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	689b      	ldr	r3, [r3, #8]
 80176d6:	041b      	lsls	r3, r3, #16
 80176d8:	693a      	ldr	r2, [r7, #16]
 80176da:	4313      	orrs	r3, r2
 80176dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	4a18      	ldr	r2, [pc, #96]	@ (8017744 <TIM_OC5_SetConfig+0xb4>)
 80176e2:	4293      	cmp	r3, r2
 80176e4:	d00f      	beq.n	8017706 <TIM_OC5_SetConfig+0x76>
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	4a17      	ldr	r2, [pc, #92]	@ (8017748 <TIM_OC5_SetConfig+0xb8>)
 80176ea:	4293      	cmp	r3, r2
 80176ec:	d00b      	beq.n	8017706 <TIM_OC5_SetConfig+0x76>
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	4a16      	ldr	r2, [pc, #88]	@ (801774c <TIM_OC5_SetConfig+0xbc>)
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d007      	beq.n	8017706 <TIM_OC5_SetConfig+0x76>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	4a15      	ldr	r2, [pc, #84]	@ (8017750 <TIM_OC5_SetConfig+0xc0>)
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d003      	beq.n	8017706 <TIM_OC5_SetConfig+0x76>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	4a14      	ldr	r2, [pc, #80]	@ (8017754 <TIM_OC5_SetConfig+0xc4>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d109      	bne.n	801771a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017706:	697b      	ldr	r3, [r7, #20]
 8017708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801770c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801770e:	683b      	ldr	r3, [r7, #0]
 8017710:	695b      	ldr	r3, [r3, #20]
 8017712:	021b      	lsls	r3, r3, #8
 8017714:	697a      	ldr	r2, [r7, #20]
 8017716:	4313      	orrs	r3, r2
 8017718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	697a      	ldr	r2, [r7, #20]
 801771e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	68fa      	ldr	r2, [r7, #12]
 8017724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	685a      	ldr	r2, [r3, #4]
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	693a      	ldr	r2, [r7, #16]
 8017732:	621a      	str	r2, [r3, #32]
}
 8017734:	bf00      	nop
 8017736:	371c      	adds	r7, #28
 8017738:	46bd      	mov	sp, r7
 801773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773e:	4770      	bx	lr
 8017740:	fffeff8f 	.word	0xfffeff8f
 8017744:	40010000 	.word	0x40010000
 8017748:	40010400 	.word	0x40010400
 801774c:	40014000 	.word	0x40014000
 8017750:	40014400 	.word	0x40014400
 8017754:	40014800 	.word	0x40014800

08017758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017758:	b480      	push	{r7}
 801775a:	b087      	sub	sp, #28
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	6a1b      	ldr	r3, [r3, #32]
 8017766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	6a1b      	ldr	r3, [r3, #32]
 801776c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	685b      	ldr	r3, [r3, #4]
 8017778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017780:	68fa      	ldr	r2, [r7, #12]
 8017782:	4b22      	ldr	r3, [pc, #136]	@ (801780c <TIM_OC6_SetConfig+0xb4>)
 8017784:	4013      	ands	r3, r2
 8017786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	021b      	lsls	r3, r3, #8
 801778e:	68fa      	ldr	r2, [r7, #12]
 8017790:	4313      	orrs	r3, r2
 8017792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801779a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	689b      	ldr	r3, [r3, #8]
 80177a0:	051b      	lsls	r3, r3, #20
 80177a2:	693a      	ldr	r2, [r7, #16]
 80177a4:	4313      	orrs	r3, r2
 80177a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	4a19      	ldr	r2, [pc, #100]	@ (8017810 <TIM_OC6_SetConfig+0xb8>)
 80177ac:	4293      	cmp	r3, r2
 80177ae:	d00f      	beq.n	80177d0 <TIM_OC6_SetConfig+0x78>
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	4a18      	ldr	r2, [pc, #96]	@ (8017814 <TIM_OC6_SetConfig+0xbc>)
 80177b4:	4293      	cmp	r3, r2
 80177b6:	d00b      	beq.n	80177d0 <TIM_OC6_SetConfig+0x78>
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	4a17      	ldr	r2, [pc, #92]	@ (8017818 <TIM_OC6_SetConfig+0xc0>)
 80177bc:	4293      	cmp	r3, r2
 80177be:	d007      	beq.n	80177d0 <TIM_OC6_SetConfig+0x78>
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	4a16      	ldr	r2, [pc, #88]	@ (801781c <TIM_OC6_SetConfig+0xc4>)
 80177c4:	4293      	cmp	r3, r2
 80177c6:	d003      	beq.n	80177d0 <TIM_OC6_SetConfig+0x78>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	4a15      	ldr	r2, [pc, #84]	@ (8017820 <TIM_OC6_SetConfig+0xc8>)
 80177cc:	4293      	cmp	r3, r2
 80177ce:	d109      	bne.n	80177e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80177d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80177d8:	683b      	ldr	r3, [r7, #0]
 80177da:	695b      	ldr	r3, [r3, #20]
 80177dc:	029b      	lsls	r3, r3, #10
 80177de:	697a      	ldr	r2, [r7, #20]
 80177e0:	4313      	orrs	r3, r2
 80177e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	697a      	ldr	r2, [r7, #20]
 80177e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	68fa      	ldr	r2, [r7, #12]
 80177ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	685a      	ldr	r2, [r3, #4]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	693a      	ldr	r2, [r7, #16]
 80177fc:	621a      	str	r2, [r3, #32]
}
 80177fe:	bf00      	nop
 8017800:	371c      	adds	r7, #28
 8017802:	46bd      	mov	sp, r7
 8017804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017808:	4770      	bx	lr
 801780a:	bf00      	nop
 801780c:	feff8fff 	.word	0xfeff8fff
 8017810:	40010000 	.word	0x40010000
 8017814:	40010400 	.word	0x40010400
 8017818:	40014000 	.word	0x40014000
 801781c:	40014400 	.word	0x40014400
 8017820:	40014800 	.word	0x40014800

08017824 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017824:	b480      	push	{r7}
 8017826:	b087      	sub	sp, #28
 8017828:	af00      	add	r7, sp, #0
 801782a:	60f8      	str	r0, [r7, #12]
 801782c:	60b9      	str	r1, [r7, #8]
 801782e:	607a      	str	r2, [r7, #4]
 8017830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	6a1b      	ldr	r3, [r3, #32]
 8017836:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	6a1b      	ldr	r3, [r3, #32]
 801783c:	f023 0201 	bic.w	r2, r3, #1
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	699b      	ldr	r3, [r3, #24]
 8017848:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	4a2c      	ldr	r2, [pc, #176]	@ (8017900 <TIM_TI1_SetConfig+0xdc>)
 801784e:	4293      	cmp	r3, r2
 8017850:	d023      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017858:	d01f      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	4a29      	ldr	r2, [pc, #164]	@ (8017904 <TIM_TI1_SetConfig+0xe0>)
 801785e:	4293      	cmp	r3, r2
 8017860:	d01b      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	4a28      	ldr	r2, [pc, #160]	@ (8017908 <TIM_TI1_SetConfig+0xe4>)
 8017866:	4293      	cmp	r3, r2
 8017868:	d017      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	4a27      	ldr	r2, [pc, #156]	@ (801790c <TIM_TI1_SetConfig+0xe8>)
 801786e:	4293      	cmp	r3, r2
 8017870:	d013      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	4a26      	ldr	r2, [pc, #152]	@ (8017910 <TIM_TI1_SetConfig+0xec>)
 8017876:	4293      	cmp	r3, r2
 8017878:	d00f      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	4a25      	ldr	r2, [pc, #148]	@ (8017914 <TIM_TI1_SetConfig+0xf0>)
 801787e:	4293      	cmp	r3, r2
 8017880:	d00b      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	4a24      	ldr	r2, [pc, #144]	@ (8017918 <TIM_TI1_SetConfig+0xf4>)
 8017886:	4293      	cmp	r3, r2
 8017888:	d007      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	4a23      	ldr	r2, [pc, #140]	@ (801791c <TIM_TI1_SetConfig+0xf8>)
 801788e:	4293      	cmp	r3, r2
 8017890:	d003      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	4a22      	ldr	r2, [pc, #136]	@ (8017920 <TIM_TI1_SetConfig+0xfc>)
 8017896:	4293      	cmp	r3, r2
 8017898:	d101      	bne.n	801789e <TIM_TI1_SetConfig+0x7a>
 801789a:	2301      	movs	r3, #1
 801789c:	e000      	b.n	80178a0 <TIM_TI1_SetConfig+0x7c>
 801789e:	2300      	movs	r3, #0
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d008      	beq.n	80178b6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80178a4:	697b      	ldr	r3, [r7, #20]
 80178a6:	f023 0303 	bic.w	r3, r3, #3
 80178aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80178ac:	697a      	ldr	r2, [r7, #20]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	4313      	orrs	r3, r2
 80178b2:	617b      	str	r3, [r7, #20]
 80178b4:	e003      	b.n	80178be <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	f043 0301 	orr.w	r3, r3, #1
 80178bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80178c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	011b      	lsls	r3, r3, #4
 80178ca:	b2db      	uxtb	r3, r3
 80178cc:	697a      	ldr	r2, [r7, #20]
 80178ce:	4313      	orrs	r3, r2
 80178d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	f023 030a 	bic.w	r3, r3, #10
 80178d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	f003 030a 	and.w	r3, r3, #10
 80178e0:	693a      	ldr	r2, [r7, #16]
 80178e2:	4313      	orrs	r3, r2
 80178e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	697a      	ldr	r2, [r7, #20]
 80178ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	693a      	ldr	r2, [r7, #16]
 80178f0:	621a      	str	r2, [r3, #32]
}
 80178f2:	bf00      	nop
 80178f4:	371c      	adds	r7, #28
 80178f6:	46bd      	mov	sp, r7
 80178f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fc:	4770      	bx	lr
 80178fe:	bf00      	nop
 8017900:	40010000 	.word	0x40010000
 8017904:	40000400 	.word	0x40000400
 8017908:	40000800 	.word	0x40000800
 801790c:	40000c00 	.word	0x40000c00
 8017910:	40010400 	.word	0x40010400
 8017914:	40001800 	.word	0x40001800
 8017918:	40014000 	.word	0x40014000
 801791c:	4000e000 	.word	0x4000e000
 8017920:	4000e400 	.word	0x4000e400

08017924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017924:	b480      	push	{r7}
 8017926:	b087      	sub	sp, #28
 8017928:	af00      	add	r7, sp, #0
 801792a:	60f8      	str	r0, [r7, #12]
 801792c:	60b9      	str	r1, [r7, #8]
 801792e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	6a1b      	ldr	r3, [r3, #32]
 8017934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	6a1b      	ldr	r3, [r3, #32]
 801793a:	f023 0201 	bic.w	r2, r3, #1
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	699b      	ldr	r3, [r3, #24]
 8017946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017948:	693b      	ldr	r3, [r7, #16]
 801794a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801794e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	011b      	lsls	r3, r3, #4
 8017954:	693a      	ldr	r2, [r7, #16]
 8017956:	4313      	orrs	r3, r2
 8017958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801795a:	697b      	ldr	r3, [r7, #20]
 801795c:	f023 030a 	bic.w	r3, r3, #10
 8017960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017962:	697a      	ldr	r2, [r7, #20]
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	4313      	orrs	r3, r2
 8017968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	693a      	ldr	r2, [r7, #16]
 801796e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	697a      	ldr	r2, [r7, #20]
 8017974:	621a      	str	r2, [r3, #32]
}
 8017976:	bf00      	nop
 8017978:	371c      	adds	r7, #28
 801797a:	46bd      	mov	sp, r7
 801797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017980:	4770      	bx	lr

08017982 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017982:	b480      	push	{r7}
 8017984:	b087      	sub	sp, #28
 8017986:	af00      	add	r7, sp, #0
 8017988:	60f8      	str	r0, [r7, #12]
 801798a:	60b9      	str	r1, [r7, #8]
 801798c:	607a      	str	r2, [r7, #4]
 801798e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	6a1b      	ldr	r3, [r3, #32]
 8017994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	6a1b      	ldr	r3, [r3, #32]
 801799a:	f023 0210 	bic.w	r2, r3, #16
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	699b      	ldr	r3, [r3, #24]
 80179a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80179a8:	693b      	ldr	r3, [r7, #16]
 80179aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80179ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	021b      	lsls	r3, r3, #8
 80179b4:	693a      	ldr	r2, [r7, #16]
 80179b6:	4313      	orrs	r3, r2
 80179b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80179ba:	693b      	ldr	r3, [r7, #16]
 80179bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80179c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80179c2:	683b      	ldr	r3, [r7, #0]
 80179c4:	031b      	lsls	r3, r3, #12
 80179c6:	b29b      	uxth	r3, r3
 80179c8:	693a      	ldr	r2, [r7, #16]
 80179ca:	4313      	orrs	r3, r2
 80179cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80179d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	011b      	lsls	r3, r3, #4
 80179da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80179de:	697a      	ldr	r2, [r7, #20]
 80179e0:	4313      	orrs	r3, r2
 80179e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	693a      	ldr	r2, [r7, #16]
 80179e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	697a      	ldr	r2, [r7, #20]
 80179ee:	621a      	str	r2, [r3, #32]
}
 80179f0:	bf00      	nop
 80179f2:	371c      	adds	r7, #28
 80179f4:	46bd      	mov	sp, r7
 80179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fa:	4770      	bx	lr

080179fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80179fc:	b480      	push	{r7}
 80179fe:	b087      	sub	sp, #28
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	60f8      	str	r0, [r7, #12]
 8017a04:	60b9      	str	r1, [r7, #8]
 8017a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	6a1b      	ldr	r3, [r3, #32]
 8017a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	6a1b      	ldr	r3, [r3, #32]
 8017a12:	f023 0210 	bic.w	r2, r3, #16
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	699b      	ldr	r3, [r3, #24]
 8017a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017a20:	693b      	ldr	r3, [r7, #16]
 8017a22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	031b      	lsls	r3, r3, #12
 8017a2c:	693a      	ldr	r2, [r7, #16]
 8017a2e:	4313      	orrs	r3, r2
 8017a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017a38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017a3a:	68bb      	ldr	r3, [r7, #8]
 8017a3c:	011b      	lsls	r3, r3, #4
 8017a3e:	697a      	ldr	r2, [r7, #20]
 8017a40:	4313      	orrs	r3, r2
 8017a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	693a      	ldr	r2, [r7, #16]
 8017a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	697a      	ldr	r2, [r7, #20]
 8017a4e:	621a      	str	r2, [r3, #32]
}
 8017a50:	bf00      	nop
 8017a52:	371c      	adds	r7, #28
 8017a54:	46bd      	mov	sp, r7
 8017a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5a:	4770      	bx	lr

08017a5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017a5c:	b480      	push	{r7}
 8017a5e:	b087      	sub	sp, #28
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	60f8      	str	r0, [r7, #12]
 8017a64:	60b9      	str	r1, [r7, #8]
 8017a66:	607a      	str	r2, [r7, #4]
 8017a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	6a1b      	ldr	r3, [r3, #32]
 8017a6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	6a1b      	ldr	r3, [r3, #32]
 8017a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	69db      	ldr	r3, [r3, #28]
 8017a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017a82:	693b      	ldr	r3, [r7, #16]
 8017a84:	f023 0303 	bic.w	r3, r3, #3
 8017a88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017a8a:	693a      	ldr	r2, [r7, #16]
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	4313      	orrs	r3, r2
 8017a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	011b      	lsls	r3, r3, #4
 8017a9e:	b2db      	uxtb	r3, r3
 8017aa0:	693a      	ldr	r2, [r7, #16]
 8017aa2:	4313      	orrs	r3, r2
 8017aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017aa6:	697b      	ldr	r3, [r7, #20]
 8017aa8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017aac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	021b      	lsls	r3, r3, #8
 8017ab2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017ab6:	697a      	ldr	r2, [r7, #20]
 8017ab8:	4313      	orrs	r3, r2
 8017aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	693a      	ldr	r2, [r7, #16]
 8017ac0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	697a      	ldr	r2, [r7, #20]
 8017ac6:	621a      	str	r2, [r3, #32]
}
 8017ac8:	bf00      	nop
 8017aca:	371c      	adds	r7, #28
 8017acc:	46bd      	mov	sp, r7
 8017ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad2:	4770      	bx	lr

08017ad4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	b087      	sub	sp, #28
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	60f8      	str	r0, [r7, #12]
 8017adc:	60b9      	str	r1, [r7, #8]
 8017ade:	607a      	str	r2, [r7, #4]
 8017ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	6a1b      	ldr	r3, [r3, #32]
 8017ae6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	6a1b      	ldr	r3, [r3, #32]
 8017aec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	69db      	ldr	r3, [r3, #28]
 8017af8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017afa:	693b      	ldr	r3, [r7, #16]
 8017afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017b00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	021b      	lsls	r3, r3, #8
 8017b06:	693a      	ldr	r2, [r7, #16]
 8017b08:	4313      	orrs	r3, r2
 8017b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017b0c:	693b      	ldr	r3, [r7, #16]
 8017b0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017b12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	031b      	lsls	r3, r3, #12
 8017b18:	b29b      	uxth	r3, r3
 8017b1a:	693a      	ldr	r2, [r7, #16]
 8017b1c:	4313      	orrs	r3, r2
 8017b1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017b20:	697b      	ldr	r3, [r7, #20]
 8017b22:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017b26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	031b      	lsls	r3, r3, #12
 8017b2c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017b30:	697a      	ldr	r2, [r7, #20]
 8017b32:	4313      	orrs	r3, r2
 8017b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	693a      	ldr	r2, [r7, #16]
 8017b3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	697a      	ldr	r2, [r7, #20]
 8017b40:	621a      	str	r2, [r3, #32]
}
 8017b42:	bf00      	nop
 8017b44:	371c      	adds	r7, #28
 8017b46:	46bd      	mov	sp, r7
 8017b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4c:	4770      	bx	lr
	...

08017b50 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017b50:	b480      	push	{r7}
 8017b52:	b085      	sub	sp, #20
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	689b      	ldr	r3, [r3, #8]
 8017b5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017b60:	68fa      	ldr	r2, [r7, #12]
 8017b62:	4b09      	ldr	r3, [pc, #36]	@ (8017b88 <TIM_ITRx_SetConfig+0x38>)
 8017b64:	4013      	ands	r3, r2
 8017b66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017b68:	683a      	ldr	r2, [r7, #0]
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	4313      	orrs	r3, r2
 8017b6e:	f043 0307 	orr.w	r3, r3, #7
 8017b72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	68fa      	ldr	r2, [r7, #12]
 8017b78:	609a      	str	r2, [r3, #8]
}
 8017b7a:	bf00      	nop
 8017b7c:	3714      	adds	r7, #20
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b84:	4770      	bx	lr
 8017b86:	bf00      	nop
 8017b88:	ffcfff8f 	.word	0xffcfff8f

08017b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017b8c:	b480      	push	{r7}
 8017b8e:	b087      	sub	sp, #28
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	60f8      	str	r0, [r7, #12]
 8017b94:	60b9      	str	r1, [r7, #8]
 8017b96:	607a      	str	r2, [r7, #4]
 8017b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	689b      	ldr	r3, [r3, #8]
 8017b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	021a      	lsls	r2, r3, #8
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	431a      	orrs	r2, r3
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	4313      	orrs	r3, r2
 8017bb4:	697a      	ldr	r2, [r7, #20]
 8017bb6:	4313      	orrs	r3, r2
 8017bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	697a      	ldr	r2, [r7, #20]
 8017bbe:	609a      	str	r2, [r3, #8]
}
 8017bc0:	bf00      	nop
 8017bc2:	371c      	adds	r7, #28
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bca:	4770      	bx	lr

08017bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017bcc:	b480      	push	{r7}
 8017bce:	b087      	sub	sp, #28
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	60f8      	str	r0, [r7, #12]
 8017bd4:	60b9      	str	r1, [r7, #8]
 8017bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	f003 031f 	and.w	r3, r3, #31
 8017bde:	2201      	movs	r2, #1
 8017be0:	fa02 f303 	lsl.w	r3, r2, r3
 8017be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	6a1a      	ldr	r2, [r3, #32]
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	43db      	mvns	r3, r3
 8017bee:	401a      	ands	r2, r3
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	6a1a      	ldr	r2, [r3, #32]
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	f003 031f 	and.w	r3, r3, #31
 8017bfe:	6879      	ldr	r1, [r7, #4]
 8017c00:	fa01 f303 	lsl.w	r3, r1, r3
 8017c04:	431a      	orrs	r2, r3
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	621a      	str	r2, [r3, #32]
}
 8017c0a:	bf00      	nop
 8017c0c:	371c      	adds	r7, #28
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c14:	4770      	bx	lr
	...

08017c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017c18:	b480      	push	{r7}
 8017c1a:	b085      	sub	sp, #20
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
 8017c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	d101      	bne.n	8017c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017c2c:	2302      	movs	r3, #2
 8017c2e:	e077      	b.n	8017d20 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	2201      	movs	r2, #1
 8017c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2202      	movs	r2, #2
 8017c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	685b      	ldr	r3, [r3, #4]
 8017c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	689b      	ldr	r3, [r3, #8]
 8017c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a35      	ldr	r2, [pc, #212]	@ (8017d2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d004      	beq.n	8017c64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	4a34      	ldr	r2, [pc, #208]	@ (8017d30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017c60:	4293      	cmp	r3, r2
 8017c62:	d108      	bne.n	8017c76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017c6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	68fa      	ldr	r2, [r7, #12]
 8017c72:	4313      	orrs	r3, r2
 8017c74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017c7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	68fa      	ldr	r2, [r7, #12]
 8017c84:	4313      	orrs	r3, r2
 8017c86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	68fa      	ldr	r2, [r7, #12]
 8017c8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	4a25      	ldr	r2, [pc, #148]	@ (8017d2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c96:	4293      	cmp	r3, r2
 8017c98:	d02c      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017ca2:	d027      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	4a22      	ldr	r2, [pc, #136]	@ (8017d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017caa:	4293      	cmp	r3, r2
 8017cac:	d022      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	4a21      	ldr	r2, [pc, #132]	@ (8017d38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017cb4:	4293      	cmp	r3, r2
 8017cb6:	d01d      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8017d3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017cbe:	4293      	cmp	r3, r2
 8017cc0:	d018      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8017d30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017cc8:	4293      	cmp	r3, r2
 8017cca:	d013      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8017d40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	d00e      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	4a1a      	ldr	r2, [pc, #104]	@ (8017d44 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	d009      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	4a18      	ldr	r2, [pc, #96]	@ (8017d48 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d004      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	4a17      	ldr	r2, [pc, #92]	@ (8017d4c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d10c      	bne.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017cf4:	68bb      	ldr	r3, [r7, #8]
 8017cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017cfc:	683b      	ldr	r3, [r7, #0]
 8017cfe:	689b      	ldr	r3, [r3, #8]
 8017d00:	68ba      	ldr	r2, [r7, #8]
 8017d02:	4313      	orrs	r3, r2
 8017d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	68ba      	ldr	r2, [r7, #8]
 8017d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	2201      	movs	r2, #1
 8017d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	2200      	movs	r2, #0
 8017d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017d1e:	2300      	movs	r3, #0
}
 8017d20:	4618      	mov	r0, r3
 8017d22:	3714      	adds	r7, #20
 8017d24:	46bd      	mov	sp, r7
 8017d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2a:	4770      	bx	lr
 8017d2c:	40010000 	.word	0x40010000
 8017d30:	40010400 	.word	0x40010400
 8017d34:	40000400 	.word	0x40000400
 8017d38:	40000800 	.word	0x40000800
 8017d3c:	40000c00 	.word	0x40000c00
 8017d40:	40001800 	.word	0x40001800
 8017d44:	40014000 	.word	0x40014000
 8017d48:	4000e000 	.word	0x4000e000
 8017d4c:	4000e400 	.word	0x4000e400

08017d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017d50:	b480      	push	{r7}
 8017d52:	b085      	sub	sp, #20
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017d64:	2b01      	cmp	r3, #1
 8017d66:	d101      	bne.n	8017d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017d68:	2302      	movs	r3, #2
 8017d6a:	e073      	b.n	8017e54 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	2201      	movs	r2, #1
 8017d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017d7a:	683b      	ldr	r3, [r7, #0]
 8017d7c:	68db      	ldr	r3, [r3, #12]
 8017d7e:	4313      	orrs	r3, r2
 8017d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017d88:	683b      	ldr	r3, [r7, #0]
 8017d8a:	689b      	ldr	r3, [r3, #8]
 8017d8c:	4313      	orrs	r3, r2
 8017d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	685b      	ldr	r3, [r3, #4]
 8017d9a:	4313      	orrs	r3, r2
 8017d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4313      	orrs	r3, r2
 8017daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017db2:	683b      	ldr	r3, [r7, #0]
 8017db4:	691b      	ldr	r3, [r3, #16]
 8017db6:	4313      	orrs	r3, r2
 8017db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017dc0:	683b      	ldr	r3, [r7, #0]
 8017dc2:	695b      	ldr	r3, [r3, #20]
 8017dc4:	4313      	orrs	r3, r2
 8017dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017dd2:	4313      	orrs	r3, r2
 8017dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	699b      	ldr	r3, [r3, #24]
 8017de0:	041b      	lsls	r3, r3, #16
 8017de2:	4313      	orrs	r3, r2
 8017de4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	69db      	ldr	r3, [r3, #28]
 8017df0:	4313      	orrs	r3, r2
 8017df2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4a19      	ldr	r2, [pc, #100]	@ (8017e60 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017dfa:	4293      	cmp	r3, r2
 8017dfc:	d004      	beq.n	8017e08 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	4a18      	ldr	r2, [pc, #96]	@ (8017e64 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d11c      	bne.n	8017e42 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017e0e:	683b      	ldr	r3, [r7, #0]
 8017e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e12:	051b      	lsls	r3, r3, #20
 8017e14:	4313      	orrs	r3, r2
 8017e16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	6a1b      	ldr	r3, [r3, #32]
 8017e22:	4313      	orrs	r3, r2
 8017e24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e30:	4313      	orrs	r3, r2
 8017e32:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e3e:	4313      	orrs	r3, r2
 8017e40:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	68fa      	ldr	r2, [r7, #12]
 8017e48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017e52:	2300      	movs	r3, #0
}
 8017e54:	4618      	mov	r0, r3
 8017e56:	3714      	adds	r7, #20
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5e:	4770      	bx	lr
 8017e60:	40010000 	.word	0x40010000
 8017e64:	40010400 	.word	0x40010400

08017e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017e70:	bf00      	nop
 8017e72:	370c      	adds	r7, #12
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b083      	sub	sp, #12
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017e84:	bf00      	nop
 8017e86:	370c      	adds	r7, #12
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8e:	4770      	bx	lr

08017e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017e90:	b480      	push	{r7}
 8017e92:	b083      	sub	sp, #12
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017e98:	bf00      	nop
 8017e9a:	370c      	adds	r7, #12
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea2:	4770      	bx	lr

08017ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b082      	sub	sp, #8
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d101      	bne.n	8017eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	e042      	b.n	8017f3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d106      	bne.n	8017ece <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f7f0 ffd5 	bl	8008e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2224      	movs	r2, #36	@ 0x24
 8017ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	681a      	ldr	r2, [r3, #0]
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	f022 0201 	bic.w	r2, r2, #1
 8017ee4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d002      	beq.n	8017ef4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017eee:	6878      	ldr	r0, [r7, #4]
 8017ef0:	f001 fbf8 	bl	80196e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f000 fd89 	bl	8018a0c <UART_SetConfig>
 8017efa:	4603      	mov	r3, r0
 8017efc:	2b01      	cmp	r3, #1
 8017efe:	d101      	bne.n	8017f04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017f00:	2301      	movs	r3, #1
 8017f02:	e01b      	b.n	8017f3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	685a      	ldr	r2, [r3, #4]
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	689a      	ldr	r2, [r3, #8]
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	f042 0201 	orr.w	r2, r2, #1
 8017f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f001 fc77 	bl	8019828 <UART_CheckIdleState>
 8017f3a:	4603      	mov	r3, r0
}
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	3708      	adds	r7, #8
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}

08017f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b08a      	sub	sp, #40	@ 0x28
 8017f48:	af02      	add	r7, sp, #8
 8017f4a:	60f8      	str	r0, [r7, #12]
 8017f4c:	60b9      	str	r1, [r7, #8]
 8017f4e:	603b      	str	r3, [r7, #0]
 8017f50:	4613      	mov	r3, r2
 8017f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f5a:	2b20      	cmp	r3, #32
 8017f5c:	d17b      	bne.n	8018056 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d002      	beq.n	8017f6a <HAL_UART_Transmit+0x26>
 8017f64:	88fb      	ldrh	r3, [r7, #6]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d101      	bne.n	8017f6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017f6a:	2301      	movs	r3, #1
 8017f6c:	e074      	b.n	8018058 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	2200      	movs	r2, #0
 8017f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	2221      	movs	r2, #33	@ 0x21
 8017f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017f7e:	f7f1 f89d 	bl	80090bc <HAL_GetTick>
 8017f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	88fa      	ldrh	r2, [r7, #6]
 8017f88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	88fa      	ldrh	r2, [r7, #6]
 8017f90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	689b      	ldr	r3, [r3, #8]
 8017f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017f9c:	d108      	bne.n	8017fb0 <HAL_UART_Transmit+0x6c>
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	691b      	ldr	r3, [r3, #16]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d104      	bne.n	8017fb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	61bb      	str	r3, [r7, #24]
 8017fae:	e003      	b.n	8017fb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017fb8:	e030      	b.n	801801c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	9300      	str	r3, [sp, #0]
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	2180      	movs	r1, #128	@ 0x80
 8017fc4:	68f8      	ldr	r0, [r7, #12]
 8017fc6:	f001 fcd9 	bl	801997c <UART_WaitOnFlagUntilTimeout>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d005      	beq.n	8017fdc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	2220      	movs	r2, #32
 8017fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017fd8:	2303      	movs	r3, #3
 8017fda:	e03d      	b.n	8018058 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017fdc:	69fb      	ldr	r3, [r7, #28]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d10b      	bne.n	8017ffa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017fe2:	69bb      	ldr	r3, [r7, #24]
 8017fe4:	881b      	ldrh	r3, [r3, #0]
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017ff0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017ff2:	69bb      	ldr	r3, [r7, #24]
 8017ff4:	3302      	adds	r3, #2
 8017ff6:	61bb      	str	r3, [r7, #24]
 8017ff8:	e007      	b.n	801800a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	781a      	ldrb	r2, [r3, #0]
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8018004:	69fb      	ldr	r3, [r7, #28]
 8018006:	3301      	adds	r3, #1
 8018008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018010:	b29b      	uxth	r3, r3
 8018012:	3b01      	subs	r3, #1
 8018014:	b29a      	uxth	r2, r3
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018022:	b29b      	uxth	r3, r3
 8018024:	2b00      	cmp	r3, #0
 8018026:	d1c8      	bne.n	8017fba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	9300      	str	r3, [sp, #0]
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	2200      	movs	r2, #0
 8018030:	2140      	movs	r1, #64	@ 0x40
 8018032:	68f8      	ldr	r0, [r7, #12]
 8018034:	f001 fca2 	bl	801997c <UART_WaitOnFlagUntilTimeout>
 8018038:	4603      	mov	r3, r0
 801803a:	2b00      	cmp	r3, #0
 801803c:	d005      	beq.n	801804a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	2220      	movs	r2, #32
 8018042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8018046:	2303      	movs	r3, #3
 8018048:	e006      	b.n	8018058 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	2220      	movs	r2, #32
 801804e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018052:	2300      	movs	r3, #0
 8018054:	e000      	b.n	8018058 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8018056:	2302      	movs	r3, #2
  }
}
 8018058:	4618      	mov	r0, r3
 801805a:	3720      	adds	r7, #32
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018060:	b480      	push	{r7}
 8018062:	b091      	sub	sp, #68	@ 0x44
 8018064:	af00      	add	r7, sp, #0
 8018066:	60f8      	str	r0, [r7, #12]
 8018068:	60b9      	str	r1, [r7, #8]
 801806a:	4613      	mov	r3, r2
 801806c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018074:	2b20      	cmp	r3, #32
 8018076:	d178      	bne.n	801816a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d002      	beq.n	8018084 <HAL_UART_Transmit_IT+0x24>
 801807e:	88fb      	ldrh	r3, [r7, #6]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d101      	bne.n	8018088 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8018084:	2301      	movs	r3, #1
 8018086:	e071      	b.n	801816c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	68ba      	ldr	r2, [r7, #8]
 801808c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	88fa      	ldrh	r2, [r7, #6]
 8018092:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	88fa      	ldrh	r2, [r7, #6]
 801809a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	2200      	movs	r2, #0
 80180a2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	2200      	movs	r2, #0
 80180a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	2221      	movs	r2, #33	@ 0x21
 80180b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80180b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80180bc:	d12a      	bne.n	8018114 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	689b      	ldr	r3, [r3, #8]
 80180c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80180c6:	d107      	bne.n	80180d8 <HAL_UART_Transmit_IT+0x78>
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	691b      	ldr	r3, [r3, #16]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d103      	bne.n	80180d8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	4a29      	ldr	r2, [pc, #164]	@ (8018178 <HAL_UART_Transmit_IT+0x118>)
 80180d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80180d6:	e002      	b.n	80180de <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	4a28      	ldr	r2, [pc, #160]	@ (801817c <HAL_UART_Transmit_IT+0x11c>)
 80180dc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	3308      	adds	r3, #8
 80180e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180e8:	e853 3f00 	ldrex	r3, [r3]
 80180ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80180ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80180f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	3308      	adds	r3, #8
 80180fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80180fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8018100:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018102:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018106:	e841 2300 	strex	r3, r2, [r1]
 801810a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801810c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801810e:	2b00      	cmp	r3, #0
 8018110:	d1e5      	bne.n	80180de <HAL_UART_Transmit_IT+0x7e>
 8018112:	e028      	b.n	8018166 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	689b      	ldr	r3, [r3, #8]
 8018118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801811c:	d107      	bne.n	801812e <HAL_UART_Transmit_IT+0xce>
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	691b      	ldr	r3, [r3, #16]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d103      	bne.n	801812e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	4a15      	ldr	r2, [pc, #84]	@ (8018180 <HAL_UART_Transmit_IT+0x120>)
 801812a:	679a      	str	r2, [r3, #120]	@ 0x78
 801812c:	e002      	b.n	8018134 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	4a14      	ldr	r2, [pc, #80]	@ (8018184 <HAL_UART_Transmit_IT+0x124>)
 8018132:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	e853 3f00 	ldrex	r3, [r3]
 8018140:	613b      	str	r3, [r7, #16]
   return(result);
 8018142:	693b      	ldr	r3, [r7, #16]
 8018144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	461a      	mov	r2, r3
 8018150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018152:	623b      	str	r3, [r7, #32]
 8018154:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018156:	69f9      	ldr	r1, [r7, #28]
 8018158:	6a3a      	ldr	r2, [r7, #32]
 801815a:	e841 2300 	strex	r3, r2, [r1]
 801815e:	61bb      	str	r3, [r7, #24]
   return(result);
 8018160:	69bb      	ldr	r3, [r7, #24]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d1e6      	bne.n	8018134 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8018166:	2300      	movs	r3, #0
 8018168:	e000      	b.n	801816c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 801816a:	2302      	movs	r3, #2
  }
}
 801816c:	4618      	mov	r0, r3
 801816e:	3744      	adds	r7, #68	@ 0x44
 8018170:	46bd      	mov	sp, r7
 8018172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018176:	4770      	bx	lr
 8018178:	08019fe7 	.word	0x08019fe7
 801817c:	08019f07 	.word	0x08019f07
 8018180:	08019e45 	.word	0x08019e45
 8018184:	08019d8d 	.word	0x08019d8d

08018188 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b08a      	sub	sp, #40	@ 0x28
 801818c:	af00      	add	r7, sp, #0
 801818e:	60f8      	str	r0, [r7, #12]
 8018190:	60b9      	str	r1, [r7, #8]
 8018192:	4613      	mov	r3, r2
 8018194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801819c:	2b20      	cmp	r3, #32
 801819e:	d137      	bne.n	8018210 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80181a0:	68bb      	ldr	r3, [r7, #8]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d002      	beq.n	80181ac <HAL_UART_Receive_IT+0x24>
 80181a6:	88fb      	ldrh	r3, [r7, #6]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d101      	bne.n	80181b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80181ac:	2301      	movs	r3, #1
 80181ae:	e030      	b.n	8018212 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	2200      	movs	r2, #0
 80181b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	4a18      	ldr	r2, [pc, #96]	@ (801821c <HAL_UART_Receive_IT+0x94>)
 80181bc:	4293      	cmp	r3, r2
 80181be:	d01f      	beq.n	8018200 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	685b      	ldr	r3, [r3, #4]
 80181c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d018      	beq.n	8018200 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181d4:	697b      	ldr	r3, [r7, #20]
 80181d6:	e853 3f00 	ldrex	r3, [r3]
 80181da:	613b      	str	r3, [r7, #16]
   return(result);
 80181dc:	693b      	ldr	r3, [r7, #16]
 80181de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80181e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	461a      	mov	r2, r3
 80181ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181ec:	623b      	str	r3, [r7, #32]
 80181ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181f0:	69f9      	ldr	r1, [r7, #28]
 80181f2:	6a3a      	ldr	r2, [r7, #32]
 80181f4:	e841 2300 	strex	r3, r2, [r1]
 80181f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80181fa:	69bb      	ldr	r3, [r7, #24]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d1e6      	bne.n	80181ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018200:	88fb      	ldrh	r3, [r7, #6]
 8018202:	461a      	mov	r2, r3
 8018204:	68b9      	ldr	r1, [r7, #8]
 8018206:	68f8      	ldr	r0, [r7, #12]
 8018208:	f001 fc26 	bl	8019a58 <UART_Start_Receive_IT>
 801820c:	4603      	mov	r3, r0
 801820e:	e000      	b.n	8018212 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018210:	2302      	movs	r3, #2
  }
}
 8018212:	4618      	mov	r0, r3
 8018214:	3728      	adds	r7, #40	@ 0x28
 8018216:	46bd      	mov	sp, r7
 8018218:	bd80      	pop	{r7, pc}
 801821a:	bf00      	nop
 801821c:	58000c00 	.word	0x58000c00

08018220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b0ba      	sub	sp, #232	@ 0xe8
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	69db      	ldr	r3, [r3, #28]
 801822e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	689b      	ldr	r3, [r3, #8]
 8018242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801824a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801824e:	4013      	ands	r3, r2
 8018250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8018254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018258:	2b00      	cmp	r3, #0
 801825a:	d11b      	bne.n	8018294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801825c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018260:	f003 0320 	and.w	r3, r3, #32
 8018264:	2b00      	cmp	r3, #0
 8018266:	d015      	beq.n	8018294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801826c:	f003 0320 	and.w	r3, r3, #32
 8018270:	2b00      	cmp	r3, #0
 8018272:	d105      	bne.n	8018280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801827c:	2b00      	cmp	r3, #0
 801827e:	d009      	beq.n	8018294 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018284:	2b00      	cmp	r3, #0
 8018286:	f000 8393 	beq.w	80189b0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801828e:	6878      	ldr	r0, [r7, #4]
 8018290:	4798      	blx	r3
      }
      return;
 8018292:	e38d      	b.n	80189b0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018298:	2b00      	cmp	r3, #0
 801829a:	f000 8123 	beq.w	80184e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801829e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80182a2:	4b8d      	ldr	r3, [pc, #564]	@ (80184d8 <HAL_UART_IRQHandler+0x2b8>)
 80182a4:	4013      	ands	r3, r2
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d106      	bne.n	80182b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80182aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80182ae:	4b8b      	ldr	r3, [pc, #556]	@ (80184dc <HAL_UART_IRQHandler+0x2bc>)
 80182b0:	4013      	ands	r3, r2
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	f000 8116 	beq.w	80184e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80182b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182bc:	f003 0301 	and.w	r3, r3, #1
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d011      	beq.n	80182e8 <HAL_UART_IRQHandler+0xc8>
 80182c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d00b      	beq.n	80182e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	2201      	movs	r2, #1
 80182d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182de:	f043 0201 	orr.w	r2, r3, #1
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80182e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182ec:	f003 0302 	and.w	r3, r3, #2
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d011      	beq.n	8018318 <HAL_UART_IRQHandler+0xf8>
 80182f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80182f8:	f003 0301 	and.w	r3, r3, #1
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d00b      	beq.n	8018318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2202      	movs	r2, #2
 8018306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801830e:	f043 0204 	orr.w	r2, r3, #4
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801831c:	f003 0304 	and.w	r3, r3, #4
 8018320:	2b00      	cmp	r3, #0
 8018322:	d011      	beq.n	8018348 <HAL_UART_IRQHandler+0x128>
 8018324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018328:	f003 0301 	and.w	r3, r3, #1
 801832c:	2b00      	cmp	r3, #0
 801832e:	d00b      	beq.n	8018348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	2204      	movs	r2, #4
 8018336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801833e:	f043 0202 	orr.w	r2, r3, #2
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801834c:	f003 0308 	and.w	r3, r3, #8
 8018350:	2b00      	cmp	r3, #0
 8018352:	d017      	beq.n	8018384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018358:	f003 0320 	and.w	r3, r3, #32
 801835c:	2b00      	cmp	r3, #0
 801835e:	d105      	bne.n	801836c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018364:	4b5c      	ldr	r3, [pc, #368]	@ (80184d8 <HAL_UART_IRQHandler+0x2b8>)
 8018366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018368:	2b00      	cmp	r3, #0
 801836a:	d00b      	beq.n	8018384 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	2208      	movs	r2, #8
 8018372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801837a:	f043 0208 	orr.w	r2, r3, #8
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801838c:	2b00      	cmp	r3, #0
 801838e:	d012      	beq.n	80183b6 <HAL_UART_IRQHandler+0x196>
 8018390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8018398:	2b00      	cmp	r3, #0
 801839a:	d00c      	beq.n	80183b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80183a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183ac:	f043 0220 	orr.w	r2, r3, #32
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183bc:	2b00      	cmp	r3, #0
 80183be:	f000 82f9 	beq.w	80189b4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80183c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80183c6:	f003 0320 	and.w	r3, r3, #32
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d013      	beq.n	80183f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80183ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80183d2:	f003 0320 	and.w	r3, r3, #32
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d105      	bne.n	80183e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80183da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80183de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d007      	beq.n	80183f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d003      	beq.n	80183f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	689b      	ldr	r3, [r3, #8]
 8018406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801840a:	2b40      	cmp	r3, #64	@ 0x40
 801840c:	d005      	beq.n	801841a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801840e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8018412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018416:	2b00      	cmp	r3, #0
 8018418:	d054      	beq.n	80184c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801841a:	6878      	ldr	r0, [r7, #4]
 801841c:	f001 fc3e 	bl	8019c9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	689b      	ldr	r3, [r3, #8]
 8018426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801842a:	2b40      	cmp	r3, #64	@ 0x40
 801842c:	d146      	bne.n	80184bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	3308      	adds	r3, #8
 8018434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801843c:	e853 3f00 	ldrex	r3, [r3]
 8018440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8018444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801844c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	3308      	adds	r3, #8
 8018456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801845a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801845e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801846a:	e841 2300 	strex	r3, r2, [r1]
 801846e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8018472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018476:	2b00      	cmp	r3, #0
 8018478:	d1d9      	bne.n	801842e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018480:	2b00      	cmp	r3, #0
 8018482:	d017      	beq.n	80184b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801848a:	4a15      	ldr	r2, [pc, #84]	@ (80184e0 <HAL_UART_IRQHandler+0x2c0>)
 801848c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018494:	4618      	mov	r0, r3
 8018496:	f7f4 f827 	bl	800c4e8 <HAL_DMA_Abort_IT>
 801849a:	4603      	mov	r3, r0
 801849c:	2b00      	cmp	r3, #0
 801849e:	d019      	beq.n	80184d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184a8:	687a      	ldr	r2, [r7, #4]
 80184aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80184ae:	4610      	mov	r0, r2
 80184b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184b2:	e00f      	b.n	80184d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80184b4:	6878      	ldr	r0, [r7, #4]
 80184b6:	f000 fa93 	bl	80189e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184ba:	e00b      	b.n	80184d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80184bc:	6878      	ldr	r0, [r7, #4]
 80184be:	f000 fa8f 	bl	80189e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184c2:	e007      	b.n	80184d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80184c4:	6878      	ldr	r0, [r7, #4]
 80184c6:	f000 fa8b 	bl	80189e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2200      	movs	r2, #0
 80184ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80184d2:	e26f      	b.n	80189b4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184d4:	bf00      	nop
    return;
 80184d6:	e26d      	b.n	80189b4 <HAL_UART_IRQHandler+0x794>
 80184d8:	10000001 	.word	0x10000001
 80184dc:	04000120 	.word	0x04000120
 80184e0:	08019d69 	.word	0x08019d69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80184e8:	2b01      	cmp	r3, #1
 80184ea:	f040 8203 	bne.w	80188f4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80184ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80184f2:	f003 0310 	and.w	r3, r3, #16
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	f000 81fc 	beq.w	80188f4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80184fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018500:	f003 0310 	and.w	r3, r3, #16
 8018504:	2b00      	cmp	r3, #0
 8018506:	f000 81f5 	beq.w	80188f4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2210      	movs	r2, #16
 8018510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	689b      	ldr	r3, [r3, #8]
 8018518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801851c:	2b40      	cmp	r3, #64	@ 0x40
 801851e:	f040 816d 	bne.w	80187fc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	4aa4      	ldr	r2, [pc, #656]	@ (80187bc <HAL_UART_IRQHandler+0x59c>)
 801852c:	4293      	cmp	r3, r2
 801852e:	d068      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	4aa1      	ldr	r2, [pc, #644]	@ (80187c0 <HAL_UART_IRQHandler+0x5a0>)
 801853a:	4293      	cmp	r3, r2
 801853c:	d061      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	4a9f      	ldr	r2, [pc, #636]	@ (80187c4 <HAL_UART_IRQHandler+0x5a4>)
 8018548:	4293      	cmp	r3, r2
 801854a:	d05a      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	4a9c      	ldr	r2, [pc, #624]	@ (80187c8 <HAL_UART_IRQHandler+0x5a8>)
 8018556:	4293      	cmp	r3, r2
 8018558:	d053      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	4a9a      	ldr	r2, [pc, #616]	@ (80187cc <HAL_UART_IRQHandler+0x5ac>)
 8018564:	4293      	cmp	r3, r2
 8018566:	d04c      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	4a97      	ldr	r2, [pc, #604]	@ (80187d0 <HAL_UART_IRQHandler+0x5b0>)
 8018572:	4293      	cmp	r3, r2
 8018574:	d045      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	4a95      	ldr	r2, [pc, #596]	@ (80187d4 <HAL_UART_IRQHandler+0x5b4>)
 8018580:	4293      	cmp	r3, r2
 8018582:	d03e      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	4a92      	ldr	r2, [pc, #584]	@ (80187d8 <HAL_UART_IRQHandler+0x5b8>)
 801858e:	4293      	cmp	r3, r2
 8018590:	d037      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	4a90      	ldr	r2, [pc, #576]	@ (80187dc <HAL_UART_IRQHandler+0x5bc>)
 801859c:	4293      	cmp	r3, r2
 801859e:	d030      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	4a8d      	ldr	r2, [pc, #564]	@ (80187e0 <HAL_UART_IRQHandler+0x5c0>)
 80185aa:	4293      	cmp	r3, r2
 80185ac:	d029      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4a8b      	ldr	r2, [pc, #556]	@ (80187e4 <HAL_UART_IRQHandler+0x5c4>)
 80185b8:	4293      	cmp	r3, r2
 80185ba:	d022      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	4a88      	ldr	r2, [pc, #544]	@ (80187e8 <HAL_UART_IRQHandler+0x5c8>)
 80185c6:	4293      	cmp	r3, r2
 80185c8:	d01b      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4a86      	ldr	r2, [pc, #536]	@ (80187ec <HAL_UART_IRQHandler+0x5cc>)
 80185d4:	4293      	cmp	r3, r2
 80185d6:	d014      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	4a83      	ldr	r2, [pc, #524]	@ (80187f0 <HAL_UART_IRQHandler+0x5d0>)
 80185e2:	4293      	cmp	r3, r2
 80185e4:	d00d      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	4a81      	ldr	r2, [pc, #516]	@ (80187f4 <HAL_UART_IRQHandler+0x5d4>)
 80185f0:	4293      	cmp	r3, r2
 80185f2:	d006      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	4a7e      	ldr	r2, [pc, #504]	@ (80187f8 <HAL_UART_IRQHandler+0x5d8>)
 80185fe:	4293      	cmp	r3, r2
 8018600:	d106      	bne.n	8018610 <HAL_UART_IRQHandler+0x3f0>
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	685b      	ldr	r3, [r3, #4]
 801860c:	b29b      	uxth	r3, r3
 801860e:	e005      	b.n	801861c <HAL_UART_IRQHandler+0x3fc>
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	685b      	ldr	r3, [r3, #4]
 801861a:	b29b      	uxth	r3, r3
 801861c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8018624:	2b00      	cmp	r3, #0
 8018626:	f000 80ad 	beq.w	8018784 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018634:	429a      	cmp	r2, r3
 8018636:	f080 80a5 	bcs.w	8018784 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801864a:	69db      	ldr	r3, [r3, #28]
 801864c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018650:	f000 8087 	beq.w	8018762 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801865c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018660:	e853 3f00 	ldrex	r3, [r3]
 8018664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801866c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	461a      	mov	r2, r3
 801867a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801867e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8018682:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018686:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801868a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801868e:	e841 2300 	strex	r3, r2, [r1]
 8018692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8018696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801869a:	2b00      	cmp	r3, #0
 801869c:	d1da      	bne.n	8018654 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	3308      	adds	r3, #8
 80186a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80186a8:	e853 3f00 	ldrex	r3, [r3]
 80186ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80186ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80186b0:	f023 0301 	bic.w	r3, r3, #1
 80186b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	3308      	adds	r3, #8
 80186be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80186c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80186c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80186ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80186ce:	e841 2300 	strex	r3, r2, [r1]
 80186d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80186d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d1e1      	bne.n	801869e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	3308      	adds	r3, #8
 80186e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80186e4:	e853 3f00 	ldrex	r3, [r3]
 80186e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80186ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80186ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80186f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	3308      	adds	r3, #8
 80186fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80186fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018700:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018702:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018704:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018706:	e841 2300 	strex	r3, r2, [r1]
 801870a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801870c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801870e:	2b00      	cmp	r3, #0
 8018710:	d1e3      	bne.n	80186da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	2220      	movs	r2, #32
 8018716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	2200      	movs	r2, #0
 801871e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018728:	e853 3f00 	ldrex	r3, [r3]
 801872c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801872e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018730:	f023 0310 	bic.w	r3, r3, #16
 8018734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	461a      	mov	r2, r3
 801873e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018744:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801874a:	e841 2300 	strex	r3, r2, [r1]
 801874e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018752:	2b00      	cmp	r3, #0
 8018754:	d1e4      	bne.n	8018720 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801875c:	4618      	mov	r0, r3
 801875e:	f7f3 fba5 	bl	800beac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2202      	movs	r2, #2
 8018766:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018774:	b29b      	uxth	r3, r3
 8018776:	1ad3      	subs	r3, r2, r3
 8018778:	b29b      	uxth	r3, r3
 801877a:	4619      	mov	r1, r3
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	f000 f939 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8018782:	e119      	b.n	80189b8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801878a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801878e:	429a      	cmp	r2, r3
 8018790:	f040 8112 	bne.w	80189b8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801879a:	69db      	ldr	r3, [r3, #28]
 801879c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80187a0:	f040 810a 	bne.w	80189b8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2202      	movs	r2, #2
 80187a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80187b0:	4619      	mov	r1, r3
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f000 f91e 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
      return;
 80187b8:	e0fe      	b.n	80189b8 <HAL_UART_IRQHandler+0x798>
 80187ba:	bf00      	nop
 80187bc:	40020010 	.word	0x40020010
 80187c0:	40020028 	.word	0x40020028
 80187c4:	40020040 	.word	0x40020040
 80187c8:	40020058 	.word	0x40020058
 80187cc:	40020070 	.word	0x40020070
 80187d0:	40020088 	.word	0x40020088
 80187d4:	400200a0 	.word	0x400200a0
 80187d8:	400200b8 	.word	0x400200b8
 80187dc:	40020410 	.word	0x40020410
 80187e0:	40020428 	.word	0x40020428
 80187e4:	40020440 	.word	0x40020440
 80187e8:	40020458 	.word	0x40020458
 80187ec:	40020470 	.word	0x40020470
 80187f0:	40020488 	.word	0x40020488
 80187f4:	400204a0 	.word	0x400204a0
 80187f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018808:	b29b      	uxth	r3, r3
 801880a:	1ad3      	subs	r3, r2, r3
 801880c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018816:	b29b      	uxth	r3, r3
 8018818:	2b00      	cmp	r3, #0
 801881a:	f000 80cf 	beq.w	80189bc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801881e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018822:	2b00      	cmp	r3, #0
 8018824:	f000 80ca 	beq.w	80189bc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018830:	e853 3f00 	ldrex	r3, [r3]
 8018834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801883c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	461a      	mov	r2, r3
 8018846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801884a:	647b      	str	r3, [r7, #68]	@ 0x44
 801884c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801884e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018852:	e841 2300 	strex	r3, r2, [r1]
 8018856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801885a:	2b00      	cmp	r3, #0
 801885c:	d1e4      	bne.n	8018828 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	3308      	adds	r3, #8
 8018864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018868:	e853 3f00 	ldrex	r3, [r3]
 801886c:	623b      	str	r3, [r7, #32]
   return(result);
 801886e:	6a3a      	ldr	r2, [r7, #32]
 8018870:	4b55      	ldr	r3, [pc, #340]	@ (80189c8 <HAL_UART_IRQHandler+0x7a8>)
 8018872:	4013      	ands	r3, r2
 8018874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	3308      	adds	r3, #8
 801887e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018882:	633a      	str	r2, [r7, #48]	@ 0x30
 8018884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801888a:	e841 2300 	strex	r3, r2, [r1]
 801888e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018892:	2b00      	cmp	r3, #0
 8018894:	d1e3      	bne.n	801885e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	2220      	movs	r2, #32
 801889a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	2200      	movs	r2, #0
 80188a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2200      	movs	r2, #0
 80188a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188b0:	693b      	ldr	r3, [r7, #16]
 80188b2:	e853 3f00 	ldrex	r3, [r3]
 80188b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	f023 0310 	bic.w	r3, r3, #16
 80188be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	461a      	mov	r2, r3
 80188c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80188cc:	61fb      	str	r3, [r7, #28]
 80188ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188d0:	69b9      	ldr	r1, [r7, #24]
 80188d2:	69fa      	ldr	r2, [r7, #28]
 80188d4:	e841 2300 	strex	r3, r2, [r1]
 80188d8:	617b      	str	r3, [r7, #20]
   return(result);
 80188da:	697b      	ldr	r3, [r7, #20]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d1e4      	bne.n	80188aa <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2202      	movs	r2, #2
 80188e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80188e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80188ea:	4619      	mov	r1, r3
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f000 f881 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80188f2:	e063      	b.n	80189bc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80188f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d00e      	beq.n	801891e <HAL_UART_IRQHandler+0x6fe>
 8018900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018908:	2b00      	cmp	r3, #0
 801890a:	d008      	beq.n	801891e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018916:	6878      	ldr	r0, [r7, #4]
 8018918:	f002 f926 	bl	801ab68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801891c:	e051      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801891e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018926:	2b00      	cmp	r3, #0
 8018928:	d014      	beq.n	8018954 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801892a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801892e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018932:	2b00      	cmp	r3, #0
 8018934:	d105      	bne.n	8018942 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801893a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801893e:	2b00      	cmp	r3, #0
 8018940:	d008      	beq.n	8018954 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018946:	2b00      	cmp	r3, #0
 8018948:	d03a      	beq.n	80189c0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	4798      	blx	r3
    }
    return;
 8018952:	e035      	b.n	80189c0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801895c:	2b00      	cmp	r3, #0
 801895e:	d009      	beq.n	8018974 <HAL_UART_IRQHandler+0x754>
 8018960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018968:	2b00      	cmp	r3, #0
 801896a:	d003      	beq.n	8018974 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801896c:	6878      	ldr	r0, [r7, #4]
 801896e:	f001 fbaf 	bl	801a0d0 <UART_EndTransmit_IT>
    return;
 8018972:	e026      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8018974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801897c:	2b00      	cmp	r3, #0
 801897e:	d009      	beq.n	8018994 <HAL_UART_IRQHandler+0x774>
 8018980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018984:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018988:	2b00      	cmp	r3, #0
 801898a:	d003      	beq.n	8018994 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801898c:	6878      	ldr	r0, [r7, #4]
 801898e:	f002 f8ff 	bl	801ab90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018992:	e016      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801899c:	2b00      	cmp	r3, #0
 801899e:	d010      	beq.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
 80189a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	da0c      	bge.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f002 f8e7 	bl	801ab7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80189ae:	e008      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189b0:	bf00      	nop
 80189b2:	e006      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80189b4:	bf00      	nop
 80189b6:	e004      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189b8:	bf00      	nop
 80189ba:	e002      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189bc:	bf00      	nop
 80189be:	e000      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80189c0:	bf00      	nop
  }
}
 80189c2:	37e8      	adds	r7, #232	@ 0xe8
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}
 80189c8:	effffffe 	.word	0xeffffffe

080189cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80189cc:	b480      	push	{r7}
 80189ce:	b083      	sub	sp, #12
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80189d4:	bf00      	nop
 80189d6:	370c      	adds	r7, #12
 80189d8:	46bd      	mov	sp, r7
 80189da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189de:	4770      	bx	lr

080189e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80189e0:	b480      	push	{r7}
 80189e2:	b083      	sub	sp, #12
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80189e8:	bf00      	nop
 80189ea:	370c      	adds	r7, #12
 80189ec:	46bd      	mov	sp, r7
 80189ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f2:	4770      	bx	lr

080189f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80189f4:	b480      	push	{r7}
 80189f6:	b083      	sub	sp, #12
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
 80189fc:	460b      	mov	r3, r1
 80189fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018a00:	bf00      	nop
 8018a02:	370c      	adds	r7, #12
 8018a04:	46bd      	mov	sp, r7
 8018a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0a:	4770      	bx	lr

08018a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018a10:	b092      	sub	sp, #72	@ 0x48
 8018a12:	af00      	add	r7, sp, #0
 8018a14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018a16:	2300      	movs	r3, #0
 8018a18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018a1c:	697b      	ldr	r3, [r7, #20]
 8018a1e:	689a      	ldr	r2, [r3, #8]
 8018a20:	697b      	ldr	r3, [r7, #20]
 8018a22:	691b      	ldr	r3, [r3, #16]
 8018a24:	431a      	orrs	r2, r3
 8018a26:	697b      	ldr	r3, [r7, #20]
 8018a28:	695b      	ldr	r3, [r3, #20]
 8018a2a:	431a      	orrs	r2, r3
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	69db      	ldr	r3, [r3, #28]
 8018a30:	4313      	orrs	r3, r2
 8018a32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018a34:	697b      	ldr	r3, [r7, #20]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	681a      	ldr	r2, [r3, #0]
 8018a3a:	4bbe      	ldr	r3, [pc, #760]	@ (8018d34 <UART_SetConfig+0x328>)
 8018a3c:	4013      	ands	r3, r2
 8018a3e:	697a      	ldr	r2, [r7, #20]
 8018a40:	6812      	ldr	r2, [r2, #0]
 8018a42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a44:	430b      	orrs	r3, r1
 8018a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018a48:	697b      	ldr	r3, [r7, #20]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	685b      	ldr	r3, [r3, #4]
 8018a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	68da      	ldr	r2, [r3, #12]
 8018a56:	697b      	ldr	r3, [r7, #20]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	430a      	orrs	r2, r1
 8018a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	699b      	ldr	r3, [r3, #24]
 8018a62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018a64:	697b      	ldr	r3, [r7, #20]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	4ab3      	ldr	r2, [pc, #716]	@ (8018d38 <UART_SetConfig+0x32c>)
 8018a6a:	4293      	cmp	r3, r2
 8018a6c:	d004      	beq.n	8018a78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	6a1b      	ldr	r3, [r3, #32]
 8018a72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018a74:	4313      	orrs	r3, r2
 8018a76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	689a      	ldr	r2, [r3, #8]
 8018a7e:	4baf      	ldr	r3, [pc, #700]	@ (8018d3c <UART_SetConfig+0x330>)
 8018a80:	4013      	ands	r3, r2
 8018a82:	697a      	ldr	r2, [r7, #20]
 8018a84:	6812      	ldr	r2, [r2, #0]
 8018a86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a88:	430b      	orrs	r3, r1
 8018a8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018a8c:	697b      	ldr	r3, [r7, #20]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a92:	f023 010f 	bic.w	r1, r3, #15
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018a9a:	697b      	ldr	r3, [r7, #20]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	430a      	orrs	r2, r1
 8018aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	4aa6      	ldr	r2, [pc, #664]	@ (8018d40 <UART_SetConfig+0x334>)
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	d177      	bne.n	8018b9c <UART_SetConfig+0x190>
 8018aac:	4ba5      	ldr	r3, [pc, #660]	@ (8018d44 <UART_SetConfig+0x338>)
 8018aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ab4:	2b28      	cmp	r3, #40	@ 0x28
 8018ab6:	d86d      	bhi.n	8018b94 <UART_SetConfig+0x188>
 8018ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8018ac0 <UART_SetConfig+0xb4>)
 8018aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018abe:	bf00      	nop
 8018ac0:	08018b65 	.word	0x08018b65
 8018ac4:	08018b95 	.word	0x08018b95
 8018ac8:	08018b95 	.word	0x08018b95
 8018acc:	08018b95 	.word	0x08018b95
 8018ad0:	08018b95 	.word	0x08018b95
 8018ad4:	08018b95 	.word	0x08018b95
 8018ad8:	08018b95 	.word	0x08018b95
 8018adc:	08018b95 	.word	0x08018b95
 8018ae0:	08018b6d 	.word	0x08018b6d
 8018ae4:	08018b95 	.word	0x08018b95
 8018ae8:	08018b95 	.word	0x08018b95
 8018aec:	08018b95 	.word	0x08018b95
 8018af0:	08018b95 	.word	0x08018b95
 8018af4:	08018b95 	.word	0x08018b95
 8018af8:	08018b95 	.word	0x08018b95
 8018afc:	08018b95 	.word	0x08018b95
 8018b00:	08018b75 	.word	0x08018b75
 8018b04:	08018b95 	.word	0x08018b95
 8018b08:	08018b95 	.word	0x08018b95
 8018b0c:	08018b95 	.word	0x08018b95
 8018b10:	08018b95 	.word	0x08018b95
 8018b14:	08018b95 	.word	0x08018b95
 8018b18:	08018b95 	.word	0x08018b95
 8018b1c:	08018b95 	.word	0x08018b95
 8018b20:	08018b7d 	.word	0x08018b7d
 8018b24:	08018b95 	.word	0x08018b95
 8018b28:	08018b95 	.word	0x08018b95
 8018b2c:	08018b95 	.word	0x08018b95
 8018b30:	08018b95 	.word	0x08018b95
 8018b34:	08018b95 	.word	0x08018b95
 8018b38:	08018b95 	.word	0x08018b95
 8018b3c:	08018b95 	.word	0x08018b95
 8018b40:	08018b85 	.word	0x08018b85
 8018b44:	08018b95 	.word	0x08018b95
 8018b48:	08018b95 	.word	0x08018b95
 8018b4c:	08018b95 	.word	0x08018b95
 8018b50:	08018b95 	.word	0x08018b95
 8018b54:	08018b95 	.word	0x08018b95
 8018b58:	08018b95 	.word	0x08018b95
 8018b5c:	08018b95 	.word	0x08018b95
 8018b60:	08018b8d 	.word	0x08018b8d
 8018b64:	2301      	movs	r3, #1
 8018b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b6a:	e326      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b6c:	2304      	movs	r3, #4
 8018b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b72:	e322      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b74:	2308      	movs	r3, #8
 8018b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b7a:	e31e      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b7c:	2310      	movs	r3, #16
 8018b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b82:	e31a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b84:	2320      	movs	r3, #32
 8018b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b8a:	e316      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b8c:	2340      	movs	r3, #64	@ 0x40
 8018b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b92:	e312      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b94:	2380      	movs	r3, #128	@ 0x80
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e30e      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b9c:	697b      	ldr	r3, [r7, #20]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	4a69      	ldr	r2, [pc, #420]	@ (8018d48 <UART_SetConfig+0x33c>)
 8018ba2:	4293      	cmp	r3, r2
 8018ba4:	d130      	bne.n	8018c08 <UART_SetConfig+0x1fc>
 8018ba6:	4b67      	ldr	r3, [pc, #412]	@ (8018d44 <UART_SetConfig+0x338>)
 8018ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018baa:	f003 0307 	and.w	r3, r3, #7
 8018bae:	2b05      	cmp	r3, #5
 8018bb0:	d826      	bhi.n	8018c00 <UART_SetConfig+0x1f4>
 8018bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8018bb8 <UART_SetConfig+0x1ac>)
 8018bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bb8:	08018bd1 	.word	0x08018bd1
 8018bbc:	08018bd9 	.word	0x08018bd9
 8018bc0:	08018be1 	.word	0x08018be1
 8018bc4:	08018be9 	.word	0x08018be9
 8018bc8:	08018bf1 	.word	0x08018bf1
 8018bcc:	08018bf9 	.word	0x08018bf9
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bd6:	e2f0      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018bd8:	2304      	movs	r3, #4
 8018bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bde:	e2ec      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018be0:	2308      	movs	r3, #8
 8018be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018be6:	e2e8      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018be8:	2310      	movs	r3, #16
 8018bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bee:	e2e4      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018bf0:	2320      	movs	r3, #32
 8018bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bf6:	e2e0      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018bf8:	2340      	movs	r3, #64	@ 0x40
 8018bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bfe:	e2dc      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c00:	2380      	movs	r3, #128	@ 0x80
 8018c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c06:	e2d8      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c08:	697b      	ldr	r3, [r7, #20]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8018d4c <UART_SetConfig+0x340>)
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	d130      	bne.n	8018c74 <UART_SetConfig+0x268>
 8018c12:	4b4c      	ldr	r3, [pc, #304]	@ (8018d44 <UART_SetConfig+0x338>)
 8018c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c16:	f003 0307 	and.w	r3, r3, #7
 8018c1a:	2b05      	cmp	r3, #5
 8018c1c:	d826      	bhi.n	8018c6c <UART_SetConfig+0x260>
 8018c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8018c24 <UART_SetConfig+0x218>)
 8018c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c24:	08018c3d 	.word	0x08018c3d
 8018c28:	08018c45 	.word	0x08018c45
 8018c2c:	08018c4d 	.word	0x08018c4d
 8018c30:	08018c55 	.word	0x08018c55
 8018c34:	08018c5d 	.word	0x08018c5d
 8018c38:	08018c65 	.word	0x08018c65
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c42:	e2ba      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c44:	2304      	movs	r3, #4
 8018c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c4a:	e2b6      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c4c:	2308      	movs	r3, #8
 8018c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c52:	e2b2      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c54:	2310      	movs	r3, #16
 8018c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c5a:	e2ae      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c5c:	2320      	movs	r3, #32
 8018c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c62:	e2aa      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c64:	2340      	movs	r3, #64	@ 0x40
 8018c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c6a:	e2a6      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c6c:	2380      	movs	r3, #128	@ 0x80
 8018c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c72:	e2a2      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	4a35      	ldr	r2, [pc, #212]	@ (8018d50 <UART_SetConfig+0x344>)
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	d130      	bne.n	8018ce0 <UART_SetConfig+0x2d4>
 8018c7e:	4b31      	ldr	r3, [pc, #196]	@ (8018d44 <UART_SetConfig+0x338>)
 8018c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c82:	f003 0307 	and.w	r3, r3, #7
 8018c86:	2b05      	cmp	r3, #5
 8018c88:	d826      	bhi.n	8018cd8 <UART_SetConfig+0x2cc>
 8018c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8018c90 <UART_SetConfig+0x284>)
 8018c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c90:	08018ca9 	.word	0x08018ca9
 8018c94:	08018cb1 	.word	0x08018cb1
 8018c98:	08018cb9 	.word	0x08018cb9
 8018c9c:	08018cc1 	.word	0x08018cc1
 8018ca0:	08018cc9 	.word	0x08018cc9
 8018ca4:	08018cd1 	.word	0x08018cd1
 8018ca8:	2300      	movs	r3, #0
 8018caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cae:	e284      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cb0:	2304      	movs	r3, #4
 8018cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cb6:	e280      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cb8:	2308      	movs	r3, #8
 8018cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cbe:	e27c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cc0:	2310      	movs	r3, #16
 8018cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cc6:	e278      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cc8:	2320      	movs	r3, #32
 8018cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cce:	e274      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cd0:	2340      	movs	r3, #64	@ 0x40
 8018cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cd6:	e270      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cd8:	2380      	movs	r3, #128	@ 0x80
 8018cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cde:	e26c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8018d54 <UART_SetConfig+0x348>)
 8018ce6:	4293      	cmp	r3, r2
 8018ce8:	d142      	bne.n	8018d70 <UART_SetConfig+0x364>
 8018cea:	4b16      	ldr	r3, [pc, #88]	@ (8018d44 <UART_SetConfig+0x338>)
 8018cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018cee:	f003 0307 	and.w	r3, r3, #7
 8018cf2:	2b05      	cmp	r3, #5
 8018cf4:	d838      	bhi.n	8018d68 <UART_SetConfig+0x35c>
 8018cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8018cfc <UART_SetConfig+0x2f0>)
 8018cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cfc:	08018d15 	.word	0x08018d15
 8018d00:	08018d1d 	.word	0x08018d1d
 8018d04:	08018d25 	.word	0x08018d25
 8018d08:	08018d2d 	.word	0x08018d2d
 8018d0c:	08018d59 	.word	0x08018d59
 8018d10:	08018d61 	.word	0x08018d61
 8018d14:	2300      	movs	r3, #0
 8018d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d1a:	e24e      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d1c:	2304      	movs	r3, #4
 8018d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d22:	e24a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d24:	2308      	movs	r3, #8
 8018d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d2a:	e246      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d2c:	2310      	movs	r3, #16
 8018d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d32:	e242      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d34:	cfff69f3 	.word	0xcfff69f3
 8018d38:	58000c00 	.word	0x58000c00
 8018d3c:	11fff4ff 	.word	0x11fff4ff
 8018d40:	40011000 	.word	0x40011000
 8018d44:	58024400 	.word	0x58024400
 8018d48:	40004400 	.word	0x40004400
 8018d4c:	40004800 	.word	0x40004800
 8018d50:	40004c00 	.word	0x40004c00
 8018d54:	40005000 	.word	0x40005000
 8018d58:	2320      	movs	r3, #32
 8018d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d5e:	e22c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d60:	2340      	movs	r3, #64	@ 0x40
 8018d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d66:	e228      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d68:	2380      	movs	r3, #128	@ 0x80
 8018d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d6e:	e224      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d70:	697b      	ldr	r3, [r7, #20]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	4ab1      	ldr	r2, [pc, #708]	@ (801903c <UART_SetConfig+0x630>)
 8018d76:	4293      	cmp	r3, r2
 8018d78:	d176      	bne.n	8018e68 <UART_SetConfig+0x45c>
 8018d7a:	4bb1      	ldr	r3, [pc, #708]	@ (8019040 <UART_SetConfig+0x634>)
 8018d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018d82:	2b28      	cmp	r3, #40	@ 0x28
 8018d84:	d86c      	bhi.n	8018e60 <UART_SetConfig+0x454>
 8018d86:	a201      	add	r2, pc, #4	@ (adr r2, 8018d8c <UART_SetConfig+0x380>)
 8018d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d8c:	08018e31 	.word	0x08018e31
 8018d90:	08018e61 	.word	0x08018e61
 8018d94:	08018e61 	.word	0x08018e61
 8018d98:	08018e61 	.word	0x08018e61
 8018d9c:	08018e61 	.word	0x08018e61
 8018da0:	08018e61 	.word	0x08018e61
 8018da4:	08018e61 	.word	0x08018e61
 8018da8:	08018e61 	.word	0x08018e61
 8018dac:	08018e39 	.word	0x08018e39
 8018db0:	08018e61 	.word	0x08018e61
 8018db4:	08018e61 	.word	0x08018e61
 8018db8:	08018e61 	.word	0x08018e61
 8018dbc:	08018e61 	.word	0x08018e61
 8018dc0:	08018e61 	.word	0x08018e61
 8018dc4:	08018e61 	.word	0x08018e61
 8018dc8:	08018e61 	.word	0x08018e61
 8018dcc:	08018e41 	.word	0x08018e41
 8018dd0:	08018e61 	.word	0x08018e61
 8018dd4:	08018e61 	.word	0x08018e61
 8018dd8:	08018e61 	.word	0x08018e61
 8018ddc:	08018e61 	.word	0x08018e61
 8018de0:	08018e61 	.word	0x08018e61
 8018de4:	08018e61 	.word	0x08018e61
 8018de8:	08018e61 	.word	0x08018e61
 8018dec:	08018e49 	.word	0x08018e49
 8018df0:	08018e61 	.word	0x08018e61
 8018df4:	08018e61 	.word	0x08018e61
 8018df8:	08018e61 	.word	0x08018e61
 8018dfc:	08018e61 	.word	0x08018e61
 8018e00:	08018e61 	.word	0x08018e61
 8018e04:	08018e61 	.word	0x08018e61
 8018e08:	08018e61 	.word	0x08018e61
 8018e0c:	08018e51 	.word	0x08018e51
 8018e10:	08018e61 	.word	0x08018e61
 8018e14:	08018e61 	.word	0x08018e61
 8018e18:	08018e61 	.word	0x08018e61
 8018e1c:	08018e61 	.word	0x08018e61
 8018e20:	08018e61 	.word	0x08018e61
 8018e24:	08018e61 	.word	0x08018e61
 8018e28:	08018e61 	.word	0x08018e61
 8018e2c:	08018e59 	.word	0x08018e59
 8018e30:	2301      	movs	r3, #1
 8018e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e36:	e1c0      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e38:	2304      	movs	r3, #4
 8018e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e3e:	e1bc      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e40:	2308      	movs	r3, #8
 8018e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e46:	e1b8      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e48:	2310      	movs	r3, #16
 8018e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e4e:	e1b4      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e50:	2320      	movs	r3, #32
 8018e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e56:	e1b0      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e58:	2340      	movs	r3, #64	@ 0x40
 8018e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e5e:	e1ac      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e60:	2380      	movs	r3, #128	@ 0x80
 8018e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e66:	e1a8      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e68:	697b      	ldr	r3, [r7, #20]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	4a75      	ldr	r2, [pc, #468]	@ (8019044 <UART_SetConfig+0x638>)
 8018e6e:	4293      	cmp	r3, r2
 8018e70:	d130      	bne.n	8018ed4 <UART_SetConfig+0x4c8>
 8018e72:	4b73      	ldr	r3, [pc, #460]	@ (8019040 <UART_SetConfig+0x634>)
 8018e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e76:	f003 0307 	and.w	r3, r3, #7
 8018e7a:	2b05      	cmp	r3, #5
 8018e7c:	d826      	bhi.n	8018ecc <UART_SetConfig+0x4c0>
 8018e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8018e84 <UART_SetConfig+0x478>)
 8018e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e84:	08018e9d 	.word	0x08018e9d
 8018e88:	08018ea5 	.word	0x08018ea5
 8018e8c:	08018ead 	.word	0x08018ead
 8018e90:	08018eb5 	.word	0x08018eb5
 8018e94:	08018ebd 	.word	0x08018ebd
 8018e98:	08018ec5 	.word	0x08018ec5
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ea2:	e18a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ea4:	2304      	movs	r3, #4
 8018ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eaa:	e186      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018eac:	2308      	movs	r3, #8
 8018eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eb2:	e182      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018eb4:	2310      	movs	r3, #16
 8018eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eba:	e17e      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ebc:	2320      	movs	r3, #32
 8018ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ec2:	e17a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ec4:	2340      	movs	r3, #64	@ 0x40
 8018ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eca:	e176      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ecc:	2380      	movs	r3, #128	@ 0x80
 8018ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ed2:	e172      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ed4:	697b      	ldr	r3, [r7, #20]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	4a5b      	ldr	r2, [pc, #364]	@ (8019048 <UART_SetConfig+0x63c>)
 8018eda:	4293      	cmp	r3, r2
 8018edc:	d130      	bne.n	8018f40 <UART_SetConfig+0x534>
 8018ede:	4b58      	ldr	r3, [pc, #352]	@ (8019040 <UART_SetConfig+0x634>)
 8018ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ee2:	f003 0307 	and.w	r3, r3, #7
 8018ee6:	2b05      	cmp	r3, #5
 8018ee8:	d826      	bhi.n	8018f38 <UART_SetConfig+0x52c>
 8018eea:	a201      	add	r2, pc, #4	@ (adr r2, 8018ef0 <UART_SetConfig+0x4e4>)
 8018eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ef0:	08018f09 	.word	0x08018f09
 8018ef4:	08018f11 	.word	0x08018f11
 8018ef8:	08018f19 	.word	0x08018f19
 8018efc:	08018f21 	.word	0x08018f21
 8018f00:	08018f29 	.word	0x08018f29
 8018f04:	08018f31 	.word	0x08018f31
 8018f08:	2300      	movs	r3, #0
 8018f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f0e:	e154      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f10:	2304      	movs	r3, #4
 8018f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f16:	e150      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f18:	2308      	movs	r3, #8
 8018f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f1e:	e14c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f20:	2310      	movs	r3, #16
 8018f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f26:	e148      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f28:	2320      	movs	r3, #32
 8018f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f2e:	e144      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f30:	2340      	movs	r3, #64	@ 0x40
 8018f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f36:	e140      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f38:	2380      	movs	r3, #128	@ 0x80
 8018f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f3e:	e13c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	4a41      	ldr	r2, [pc, #260]	@ (801904c <UART_SetConfig+0x640>)
 8018f46:	4293      	cmp	r3, r2
 8018f48:	f040 8082 	bne.w	8019050 <UART_SetConfig+0x644>
 8018f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8019040 <UART_SetConfig+0x634>)
 8018f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018f54:	2b28      	cmp	r3, #40	@ 0x28
 8018f56:	d86d      	bhi.n	8019034 <UART_SetConfig+0x628>
 8018f58:	a201      	add	r2, pc, #4	@ (adr r2, 8018f60 <UART_SetConfig+0x554>)
 8018f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f5e:	bf00      	nop
 8018f60:	08019005 	.word	0x08019005
 8018f64:	08019035 	.word	0x08019035
 8018f68:	08019035 	.word	0x08019035
 8018f6c:	08019035 	.word	0x08019035
 8018f70:	08019035 	.word	0x08019035
 8018f74:	08019035 	.word	0x08019035
 8018f78:	08019035 	.word	0x08019035
 8018f7c:	08019035 	.word	0x08019035
 8018f80:	0801900d 	.word	0x0801900d
 8018f84:	08019035 	.word	0x08019035
 8018f88:	08019035 	.word	0x08019035
 8018f8c:	08019035 	.word	0x08019035
 8018f90:	08019035 	.word	0x08019035
 8018f94:	08019035 	.word	0x08019035
 8018f98:	08019035 	.word	0x08019035
 8018f9c:	08019035 	.word	0x08019035
 8018fa0:	08019015 	.word	0x08019015
 8018fa4:	08019035 	.word	0x08019035
 8018fa8:	08019035 	.word	0x08019035
 8018fac:	08019035 	.word	0x08019035
 8018fb0:	08019035 	.word	0x08019035
 8018fb4:	08019035 	.word	0x08019035
 8018fb8:	08019035 	.word	0x08019035
 8018fbc:	08019035 	.word	0x08019035
 8018fc0:	0801901d 	.word	0x0801901d
 8018fc4:	08019035 	.word	0x08019035
 8018fc8:	08019035 	.word	0x08019035
 8018fcc:	08019035 	.word	0x08019035
 8018fd0:	08019035 	.word	0x08019035
 8018fd4:	08019035 	.word	0x08019035
 8018fd8:	08019035 	.word	0x08019035
 8018fdc:	08019035 	.word	0x08019035
 8018fe0:	08019025 	.word	0x08019025
 8018fe4:	08019035 	.word	0x08019035
 8018fe8:	08019035 	.word	0x08019035
 8018fec:	08019035 	.word	0x08019035
 8018ff0:	08019035 	.word	0x08019035
 8018ff4:	08019035 	.word	0x08019035
 8018ff8:	08019035 	.word	0x08019035
 8018ffc:	08019035 	.word	0x08019035
 8019000:	0801902d 	.word	0x0801902d
 8019004:	2301      	movs	r3, #1
 8019006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801900a:	e0d6      	b.n	80191ba <UART_SetConfig+0x7ae>
 801900c:	2304      	movs	r3, #4
 801900e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019012:	e0d2      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019014:	2308      	movs	r3, #8
 8019016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801901a:	e0ce      	b.n	80191ba <UART_SetConfig+0x7ae>
 801901c:	2310      	movs	r3, #16
 801901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019022:	e0ca      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019024:	2320      	movs	r3, #32
 8019026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801902a:	e0c6      	b.n	80191ba <UART_SetConfig+0x7ae>
 801902c:	2340      	movs	r3, #64	@ 0x40
 801902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019032:	e0c2      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019034:	2380      	movs	r3, #128	@ 0x80
 8019036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801903a:	e0be      	b.n	80191ba <UART_SetConfig+0x7ae>
 801903c:	40011400 	.word	0x40011400
 8019040:	58024400 	.word	0x58024400
 8019044:	40007800 	.word	0x40007800
 8019048:	40007c00 	.word	0x40007c00
 801904c:	40011800 	.word	0x40011800
 8019050:	697b      	ldr	r3, [r7, #20]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	4aad      	ldr	r2, [pc, #692]	@ (801930c <UART_SetConfig+0x900>)
 8019056:	4293      	cmp	r3, r2
 8019058:	d176      	bne.n	8019148 <UART_SetConfig+0x73c>
 801905a:	4bad      	ldr	r3, [pc, #692]	@ (8019310 <UART_SetConfig+0x904>)
 801905c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801905e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019062:	2b28      	cmp	r3, #40	@ 0x28
 8019064:	d86c      	bhi.n	8019140 <UART_SetConfig+0x734>
 8019066:	a201      	add	r2, pc, #4	@ (adr r2, 801906c <UART_SetConfig+0x660>)
 8019068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801906c:	08019111 	.word	0x08019111
 8019070:	08019141 	.word	0x08019141
 8019074:	08019141 	.word	0x08019141
 8019078:	08019141 	.word	0x08019141
 801907c:	08019141 	.word	0x08019141
 8019080:	08019141 	.word	0x08019141
 8019084:	08019141 	.word	0x08019141
 8019088:	08019141 	.word	0x08019141
 801908c:	08019119 	.word	0x08019119
 8019090:	08019141 	.word	0x08019141
 8019094:	08019141 	.word	0x08019141
 8019098:	08019141 	.word	0x08019141
 801909c:	08019141 	.word	0x08019141
 80190a0:	08019141 	.word	0x08019141
 80190a4:	08019141 	.word	0x08019141
 80190a8:	08019141 	.word	0x08019141
 80190ac:	08019121 	.word	0x08019121
 80190b0:	08019141 	.word	0x08019141
 80190b4:	08019141 	.word	0x08019141
 80190b8:	08019141 	.word	0x08019141
 80190bc:	08019141 	.word	0x08019141
 80190c0:	08019141 	.word	0x08019141
 80190c4:	08019141 	.word	0x08019141
 80190c8:	08019141 	.word	0x08019141
 80190cc:	08019129 	.word	0x08019129
 80190d0:	08019141 	.word	0x08019141
 80190d4:	08019141 	.word	0x08019141
 80190d8:	08019141 	.word	0x08019141
 80190dc:	08019141 	.word	0x08019141
 80190e0:	08019141 	.word	0x08019141
 80190e4:	08019141 	.word	0x08019141
 80190e8:	08019141 	.word	0x08019141
 80190ec:	08019131 	.word	0x08019131
 80190f0:	08019141 	.word	0x08019141
 80190f4:	08019141 	.word	0x08019141
 80190f8:	08019141 	.word	0x08019141
 80190fc:	08019141 	.word	0x08019141
 8019100:	08019141 	.word	0x08019141
 8019104:	08019141 	.word	0x08019141
 8019108:	08019141 	.word	0x08019141
 801910c:	08019139 	.word	0x08019139
 8019110:	2301      	movs	r3, #1
 8019112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019116:	e050      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019118:	2304      	movs	r3, #4
 801911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801911e:	e04c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019120:	2308      	movs	r3, #8
 8019122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019126:	e048      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019128:	2310      	movs	r3, #16
 801912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801912e:	e044      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019130:	2320      	movs	r3, #32
 8019132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019136:	e040      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019138:	2340      	movs	r3, #64	@ 0x40
 801913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801913e:	e03c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019140:	2380      	movs	r3, #128	@ 0x80
 8019142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019146:	e038      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019148:	697b      	ldr	r3, [r7, #20]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	4a71      	ldr	r2, [pc, #452]	@ (8019314 <UART_SetConfig+0x908>)
 801914e:	4293      	cmp	r3, r2
 8019150:	d130      	bne.n	80191b4 <UART_SetConfig+0x7a8>
 8019152:	4b6f      	ldr	r3, [pc, #444]	@ (8019310 <UART_SetConfig+0x904>)
 8019154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019156:	f003 0307 	and.w	r3, r3, #7
 801915a:	2b05      	cmp	r3, #5
 801915c:	d826      	bhi.n	80191ac <UART_SetConfig+0x7a0>
 801915e:	a201      	add	r2, pc, #4	@ (adr r2, 8019164 <UART_SetConfig+0x758>)
 8019160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019164:	0801917d 	.word	0x0801917d
 8019168:	08019185 	.word	0x08019185
 801916c:	0801918d 	.word	0x0801918d
 8019170:	08019195 	.word	0x08019195
 8019174:	0801919d 	.word	0x0801919d
 8019178:	080191a5 	.word	0x080191a5
 801917c:	2302      	movs	r3, #2
 801917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019182:	e01a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019184:	2304      	movs	r3, #4
 8019186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801918a:	e016      	b.n	80191ba <UART_SetConfig+0x7ae>
 801918c:	2308      	movs	r3, #8
 801918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019192:	e012      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019194:	2310      	movs	r3, #16
 8019196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801919a:	e00e      	b.n	80191ba <UART_SetConfig+0x7ae>
 801919c:	2320      	movs	r3, #32
 801919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191a2:	e00a      	b.n	80191ba <UART_SetConfig+0x7ae>
 80191a4:	2340      	movs	r3, #64	@ 0x40
 80191a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191aa:	e006      	b.n	80191ba <UART_SetConfig+0x7ae>
 80191ac:	2380      	movs	r3, #128	@ 0x80
 80191ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191b2:	e002      	b.n	80191ba <UART_SetConfig+0x7ae>
 80191b4:	2380      	movs	r3, #128	@ 0x80
 80191b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80191ba:	697b      	ldr	r3, [r7, #20]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	4a55      	ldr	r2, [pc, #340]	@ (8019314 <UART_SetConfig+0x908>)
 80191c0:	4293      	cmp	r3, r2
 80191c2:	f040 80f8 	bne.w	80193b6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80191c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80191ca:	2b20      	cmp	r3, #32
 80191cc:	dc46      	bgt.n	801925c <UART_SetConfig+0x850>
 80191ce:	2b02      	cmp	r3, #2
 80191d0:	db75      	blt.n	80192be <UART_SetConfig+0x8b2>
 80191d2:	3b02      	subs	r3, #2
 80191d4:	2b1e      	cmp	r3, #30
 80191d6:	d872      	bhi.n	80192be <UART_SetConfig+0x8b2>
 80191d8:	a201      	add	r2, pc, #4	@ (adr r2, 80191e0 <UART_SetConfig+0x7d4>)
 80191da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191de:	bf00      	nop
 80191e0:	08019263 	.word	0x08019263
 80191e4:	080192bf 	.word	0x080192bf
 80191e8:	0801926b 	.word	0x0801926b
 80191ec:	080192bf 	.word	0x080192bf
 80191f0:	080192bf 	.word	0x080192bf
 80191f4:	080192bf 	.word	0x080192bf
 80191f8:	0801927b 	.word	0x0801927b
 80191fc:	080192bf 	.word	0x080192bf
 8019200:	080192bf 	.word	0x080192bf
 8019204:	080192bf 	.word	0x080192bf
 8019208:	080192bf 	.word	0x080192bf
 801920c:	080192bf 	.word	0x080192bf
 8019210:	080192bf 	.word	0x080192bf
 8019214:	080192bf 	.word	0x080192bf
 8019218:	0801928b 	.word	0x0801928b
 801921c:	080192bf 	.word	0x080192bf
 8019220:	080192bf 	.word	0x080192bf
 8019224:	080192bf 	.word	0x080192bf
 8019228:	080192bf 	.word	0x080192bf
 801922c:	080192bf 	.word	0x080192bf
 8019230:	080192bf 	.word	0x080192bf
 8019234:	080192bf 	.word	0x080192bf
 8019238:	080192bf 	.word	0x080192bf
 801923c:	080192bf 	.word	0x080192bf
 8019240:	080192bf 	.word	0x080192bf
 8019244:	080192bf 	.word	0x080192bf
 8019248:	080192bf 	.word	0x080192bf
 801924c:	080192bf 	.word	0x080192bf
 8019250:	080192bf 	.word	0x080192bf
 8019254:	080192bf 	.word	0x080192bf
 8019258:	080192b1 	.word	0x080192b1
 801925c:	2b40      	cmp	r3, #64	@ 0x40
 801925e:	d02a      	beq.n	80192b6 <UART_SetConfig+0x8aa>
 8019260:	e02d      	b.n	80192be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8019262:	f7fa fb37 	bl	80138d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8019266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019268:	e02f      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801926a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801926e:	4618      	mov	r0, r3
 8019270:	f7fa fb46 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019278:	e027      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801927a:	f107 0318 	add.w	r3, r7, #24
 801927e:	4618      	mov	r0, r3
 8019280:	f7fa fc92 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019284:	69fb      	ldr	r3, [r7, #28]
 8019286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019288:	e01f      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801928a:	4b21      	ldr	r3, [pc, #132]	@ (8019310 <UART_SetConfig+0x904>)
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	f003 0320 	and.w	r3, r3, #32
 8019292:	2b00      	cmp	r3, #0
 8019294:	d009      	beq.n	80192aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019296:	4b1e      	ldr	r3, [pc, #120]	@ (8019310 <UART_SetConfig+0x904>)
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	08db      	lsrs	r3, r3, #3
 801929c:	f003 0303 	and.w	r3, r3, #3
 80192a0:	4a1d      	ldr	r2, [pc, #116]	@ (8019318 <UART_SetConfig+0x90c>)
 80192a2:	fa22 f303 	lsr.w	r3, r2, r3
 80192a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80192a8:	e00f      	b.n	80192ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80192aa:	4b1b      	ldr	r3, [pc, #108]	@ (8019318 <UART_SetConfig+0x90c>)
 80192ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192ae:	e00c      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80192b0:	4b1a      	ldr	r3, [pc, #104]	@ (801931c <UART_SetConfig+0x910>)
 80192b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192b4:	e009      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80192b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80192ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192bc:	e005      	b.n	80192ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80192be:	2300      	movs	r3, #0
 80192c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80192c2:	2301      	movs	r3, #1
 80192c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80192c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80192ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	f000 81ee 	beq.w	80196ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80192d2:	697b      	ldr	r3, [r7, #20]
 80192d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192d6:	4a12      	ldr	r2, [pc, #72]	@ (8019320 <UART_SetConfig+0x914>)
 80192d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80192dc:	461a      	mov	r2, r3
 80192de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80192e4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80192e6:	697b      	ldr	r3, [r7, #20]
 80192e8:	685a      	ldr	r2, [r3, #4]
 80192ea:	4613      	mov	r3, r2
 80192ec:	005b      	lsls	r3, r3, #1
 80192ee:	4413      	add	r3, r2
 80192f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d305      	bcc.n	8019302 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	685b      	ldr	r3, [r3, #4]
 80192fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80192fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192fe:	429a      	cmp	r2, r3
 8019300:	d910      	bls.n	8019324 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8019302:	2301      	movs	r3, #1
 8019304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019308:	e1d1      	b.n	80196ae <UART_SetConfig+0xca2>
 801930a:	bf00      	nop
 801930c:	40011c00 	.word	0x40011c00
 8019310:	58024400 	.word	0x58024400
 8019314:	58000c00 	.word	0x58000c00
 8019318:	03d09000 	.word	0x03d09000
 801931c:	003d0900 	.word	0x003d0900
 8019320:	0801ebec 	.word	0x0801ebec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019326:	2200      	movs	r2, #0
 8019328:	60bb      	str	r3, [r7, #8]
 801932a:	60fa      	str	r2, [r7, #12]
 801932c:	697b      	ldr	r3, [r7, #20]
 801932e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019330:	4ac0      	ldr	r2, [pc, #768]	@ (8019634 <UART_SetConfig+0xc28>)
 8019332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019336:	b29b      	uxth	r3, r3
 8019338:	2200      	movs	r2, #0
 801933a:	603b      	str	r3, [r7, #0]
 801933c:	607a      	str	r2, [r7, #4]
 801933e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019346:	f7e7 f833 	bl	80003b0 <__aeabi_uldivmod>
 801934a:	4602      	mov	r2, r0
 801934c:	460b      	mov	r3, r1
 801934e:	4610      	mov	r0, r2
 8019350:	4619      	mov	r1, r3
 8019352:	f04f 0200 	mov.w	r2, #0
 8019356:	f04f 0300 	mov.w	r3, #0
 801935a:	020b      	lsls	r3, r1, #8
 801935c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019360:	0202      	lsls	r2, r0, #8
 8019362:	6979      	ldr	r1, [r7, #20]
 8019364:	6849      	ldr	r1, [r1, #4]
 8019366:	0849      	lsrs	r1, r1, #1
 8019368:	2000      	movs	r0, #0
 801936a:	460c      	mov	r4, r1
 801936c:	4605      	mov	r5, r0
 801936e:	eb12 0804 	adds.w	r8, r2, r4
 8019372:	eb43 0905 	adc.w	r9, r3, r5
 8019376:	697b      	ldr	r3, [r7, #20]
 8019378:	685b      	ldr	r3, [r3, #4]
 801937a:	2200      	movs	r2, #0
 801937c:	469a      	mov	sl, r3
 801937e:	4693      	mov	fp, r2
 8019380:	4652      	mov	r2, sl
 8019382:	465b      	mov	r3, fp
 8019384:	4640      	mov	r0, r8
 8019386:	4649      	mov	r1, r9
 8019388:	f7e7 f812 	bl	80003b0 <__aeabi_uldivmod>
 801938c:	4602      	mov	r2, r0
 801938e:	460b      	mov	r3, r1
 8019390:	4613      	mov	r3, r2
 8019392:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801939a:	d308      	bcc.n	80193ae <UART_SetConfig+0x9a2>
 801939c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801939e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80193a2:	d204      	bcs.n	80193ae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80193a4:	697b      	ldr	r3, [r7, #20]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80193aa:	60da      	str	r2, [r3, #12]
 80193ac:	e17f      	b.n	80196ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80193ae:	2301      	movs	r3, #1
 80193b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80193b4:	e17b      	b.n	80196ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	69db      	ldr	r3, [r3, #28]
 80193ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80193be:	f040 80bd 	bne.w	801953c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80193c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193c6:	2b20      	cmp	r3, #32
 80193c8:	dc48      	bgt.n	801945c <UART_SetConfig+0xa50>
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	db7b      	blt.n	80194c6 <UART_SetConfig+0xaba>
 80193ce:	2b20      	cmp	r3, #32
 80193d0:	d879      	bhi.n	80194c6 <UART_SetConfig+0xaba>
 80193d2:	a201      	add	r2, pc, #4	@ (adr r2, 80193d8 <UART_SetConfig+0x9cc>)
 80193d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193d8:	08019463 	.word	0x08019463
 80193dc:	0801946b 	.word	0x0801946b
 80193e0:	080194c7 	.word	0x080194c7
 80193e4:	080194c7 	.word	0x080194c7
 80193e8:	08019473 	.word	0x08019473
 80193ec:	080194c7 	.word	0x080194c7
 80193f0:	080194c7 	.word	0x080194c7
 80193f4:	080194c7 	.word	0x080194c7
 80193f8:	08019483 	.word	0x08019483
 80193fc:	080194c7 	.word	0x080194c7
 8019400:	080194c7 	.word	0x080194c7
 8019404:	080194c7 	.word	0x080194c7
 8019408:	080194c7 	.word	0x080194c7
 801940c:	080194c7 	.word	0x080194c7
 8019410:	080194c7 	.word	0x080194c7
 8019414:	080194c7 	.word	0x080194c7
 8019418:	08019493 	.word	0x08019493
 801941c:	080194c7 	.word	0x080194c7
 8019420:	080194c7 	.word	0x080194c7
 8019424:	080194c7 	.word	0x080194c7
 8019428:	080194c7 	.word	0x080194c7
 801942c:	080194c7 	.word	0x080194c7
 8019430:	080194c7 	.word	0x080194c7
 8019434:	080194c7 	.word	0x080194c7
 8019438:	080194c7 	.word	0x080194c7
 801943c:	080194c7 	.word	0x080194c7
 8019440:	080194c7 	.word	0x080194c7
 8019444:	080194c7 	.word	0x080194c7
 8019448:	080194c7 	.word	0x080194c7
 801944c:	080194c7 	.word	0x080194c7
 8019450:	080194c7 	.word	0x080194c7
 8019454:	080194c7 	.word	0x080194c7
 8019458:	080194b9 	.word	0x080194b9
 801945c:	2b40      	cmp	r3, #64	@ 0x40
 801945e:	d02e      	beq.n	80194be <UART_SetConfig+0xab2>
 8019460:	e031      	b.n	80194c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019462:	f7f8 fb99 	bl	8011b98 <HAL_RCC_GetPCLK1Freq>
 8019466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019468:	e033      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801946a:	f7f8 fbab 	bl	8011bc4 <HAL_RCC_GetPCLK2Freq>
 801946e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019470:	e02f      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019476:	4618      	mov	r0, r3
 8019478:	f7fa fa42 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801947c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801947e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019480:	e027      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019482:	f107 0318 	add.w	r3, r7, #24
 8019486:	4618      	mov	r0, r3
 8019488:	f7fa fb8e 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801948c:	69fb      	ldr	r3, [r7, #28]
 801948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019490:	e01f      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019492:	4b69      	ldr	r3, [pc, #420]	@ (8019638 <UART_SetConfig+0xc2c>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	f003 0320 	and.w	r3, r3, #32
 801949a:	2b00      	cmp	r3, #0
 801949c:	d009      	beq.n	80194b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801949e:	4b66      	ldr	r3, [pc, #408]	@ (8019638 <UART_SetConfig+0xc2c>)
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	08db      	lsrs	r3, r3, #3
 80194a4:	f003 0303 	and.w	r3, r3, #3
 80194a8:	4a64      	ldr	r2, [pc, #400]	@ (801963c <UART_SetConfig+0xc30>)
 80194aa:	fa22 f303 	lsr.w	r3, r2, r3
 80194ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80194b0:	e00f      	b.n	80194d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80194b2:	4b62      	ldr	r3, [pc, #392]	@ (801963c <UART_SetConfig+0xc30>)
 80194b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194b6:	e00c      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80194b8:	4b61      	ldr	r3, [pc, #388]	@ (8019640 <UART_SetConfig+0xc34>)
 80194ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194bc:	e009      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80194be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80194c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194c4:	e005      	b.n	80194d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80194c6:	2300      	movs	r3, #0
 80194c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80194ca:	2301      	movs	r3, #1
 80194cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80194d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80194d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	f000 80ea 	beq.w	80196ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194de:	4a55      	ldr	r2, [pc, #340]	@ (8019634 <UART_SetConfig+0xc28>)
 80194e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80194e4:	461a      	mov	r2, r3
 80194e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80194ec:	005a      	lsls	r2, r3, #1
 80194ee:	697b      	ldr	r3, [r7, #20]
 80194f0:	685b      	ldr	r3, [r3, #4]
 80194f2:	085b      	lsrs	r3, r3, #1
 80194f4:	441a      	add	r2, r3
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	685b      	ldr	r3, [r3, #4]
 80194fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80194fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019502:	2b0f      	cmp	r3, #15
 8019504:	d916      	bls.n	8019534 <UART_SetConfig+0xb28>
 8019506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801950c:	d212      	bcs.n	8019534 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019510:	b29b      	uxth	r3, r3
 8019512:	f023 030f 	bic.w	r3, r3, #15
 8019516:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801951a:	085b      	lsrs	r3, r3, #1
 801951c:	b29b      	uxth	r3, r3
 801951e:	f003 0307 	and.w	r3, r3, #7
 8019522:	b29a      	uxth	r2, r3
 8019524:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019526:	4313      	orrs	r3, r2
 8019528:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019530:	60da      	str	r2, [r3, #12]
 8019532:	e0bc      	b.n	80196ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019534:	2301      	movs	r3, #1
 8019536:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801953a:	e0b8      	b.n	80196ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801953c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019540:	2b20      	cmp	r3, #32
 8019542:	dc4b      	bgt.n	80195dc <UART_SetConfig+0xbd0>
 8019544:	2b00      	cmp	r3, #0
 8019546:	f2c0 8087 	blt.w	8019658 <UART_SetConfig+0xc4c>
 801954a:	2b20      	cmp	r3, #32
 801954c:	f200 8084 	bhi.w	8019658 <UART_SetConfig+0xc4c>
 8019550:	a201      	add	r2, pc, #4	@ (adr r2, 8019558 <UART_SetConfig+0xb4c>)
 8019552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019556:	bf00      	nop
 8019558:	080195e3 	.word	0x080195e3
 801955c:	080195eb 	.word	0x080195eb
 8019560:	08019659 	.word	0x08019659
 8019564:	08019659 	.word	0x08019659
 8019568:	080195f3 	.word	0x080195f3
 801956c:	08019659 	.word	0x08019659
 8019570:	08019659 	.word	0x08019659
 8019574:	08019659 	.word	0x08019659
 8019578:	08019603 	.word	0x08019603
 801957c:	08019659 	.word	0x08019659
 8019580:	08019659 	.word	0x08019659
 8019584:	08019659 	.word	0x08019659
 8019588:	08019659 	.word	0x08019659
 801958c:	08019659 	.word	0x08019659
 8019590:	08019659 	.word	0x08019659
 8019594:	08019659 	.word	0x08019659
 8019598:	08019613 	.word	0x08019613
 801959c:	08019659 	.word	0x08019659
 80195a0:	08019659 	.word	0x08019659
 80195a4:	08019659 	.word	0x08019659
 80195a8:	08019659 	.word	0x08019659
 80195ac:	08019659 	.word	0x08019659
 80195b0:	08019659 	.word	0x08019659
 80195b4:	08019659 	.word	0x08019659
 80195b8:	08019659 	.word	0x08019659
 80195bc:	08019659 	.word	0x08019659
 80195c0:	08019659 	.word	0x08019659
 80195c4:	08019659 	.word	0x08019659
 80195c8:	08019659 	.word	0x08019659
 80195cc:	08019659 	.word	0x08019659
 80195d0:	08019659 	.word	0x08019659
 80195d4:	08019659 	.word	0x08019659
 80195d8:	0801964b 	.word	0x0801964b
 80195dc:	2b40      	cmp	r3, #64	@ 0x40
 80195de:	d037      	beq.n	8019650 <UART_SetConfig+0xc44>
 80195e0:	e03a      	b.n	8019658 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80195e2:	f7f8 fad9 	bl	8011b98 <HAL_RCC_GetPCLK1Freq>
 80195e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80195e8:	e03c      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80195ea:	f7f8 faeb 	bl	8011bc4 <HAL_RCC_GetPCLK2Freq>
 80195ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80195f0:	e038      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80195f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80195f6:	4618      	mov	r0, r3
 80195f8:	f7fa f982 	bl	8013900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80195fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019600:	e030      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019602:	f107 0318 	add.w	r3, r7, #24
 8019606:	4618      	mov	r0, r3
 8019608:	f7fa face 	bl	8013ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801960c:	69fb      	ldr	r3, [r7, #28]
 801960e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019610:	e028      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019612:	4b09      	ldr	r3, [pc, #36]	@ (8019638 <UART_SetConfig+0xc2c>)
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	f003 0320 	and.w	r3, r3, #32
 801961a:	2b00      	cmp	r3, #0
 801961c:	d012      	beq.n	8019644 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801961e:	4b06      	ldr	r3, [pc, #24]	@ (8019638 <UART_SetConfig+0xc2c>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	08db      	lsrs	r3, r3, #3
 8019624:	f003 0303 	and.w	r3, r3, #3
 8019628:	4a04      	ldr	r2, [pc, #16]	@ (801963c <UART_SetConfig+0xc30>)
 801962a:	fa22 f303 	lsr.w	r3, r2, r3
 801962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019630:	e018      	b.n	8019664 <UART_SetConfig+0xc58>
 8019632:	bf00      	nop
 8019634:	0801ebec 	.word	0x0801ebec
 8019638:	58024400 	.word	0x58024400
 801963c:	03d09000 	.word	0x03d09000
 8019640:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8019644:	4b24      	ldr	r3, [pc, #144]	@ (80196d8 <UART_SetConfig+0xccc>)
 8019646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019648:	e00c      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801964a:	4b24      	ldr	r3, [pc, #144]	@ (80196dc <UART_SetConfig+0xcd0>)
 801964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801964e:	e009      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019650:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019656:	e005      	b.n	8019664 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019658:	2300      	movs	r3, #0
 801965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801965c:	2301      	movs	r3, #1
 801965e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019662:	bf00      	nop
    }

    if (pclk != 0U)
 8019664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019666:	2b00      	cmp	r3, #0
 8019668:	d021      	beq.n	80196ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801966a:	697b      	ldr	r3, [r7, #20]
 801966c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801966e:	4a1c      	ldr	r2, [pc, #112]	@ (80196e0 <UART_SetConfig+0xcd4>)
 8019670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019674:	461a      	mov	r2, r3
 8019676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019678:	fbb3 f2f2 	udiv	r2, r3, r2
 801967c:	697b      	ldr	r3, [r7, #20]
 801967e:	685b      	ldr	r3, [r3, #4]
 8019680:	085b      	lsrs	r3, r3, #1
 8019682:	441a      	add	r2, r3
 8019684:	697b      	ldr	r3, [r7, #20]
 8019686:	685b      	ldr	r3, [r3, #4]
 8019688:	fbb2 f3f3 	udiv	r3, r2, r3
 801968c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019690:	2b0f      	cmp	r3, #15
 8019692:	d909      	bls.n	80196a8 <UART_SetConfig+0xc9c>
 8019694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801969a:	d205      	bcs.n	80196a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801969e:	b29a      	uxth	r2, r3
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	60da      	str	r2, [r3, #12]
 80196a6:	e002      	b.n	80196ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80196a8:	2301      	movs	r3, #1
 80196aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80196ae:	697b      	ldr	r3, [r7, #20]
 80196b0:	2201      	movs	r2, #1
 80196b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80196b6:	697b      	ldr	r3, [r7, #20]
 80196b8:	2201      	movs	r2, #1
 80196ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80196be:	697b      	ldr	r3, [r7, #20]
 80196c0:	2200      	movs	r2, #0
 80196c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80196c4:	697b      	ldr	r3, [r7, #20]
 80196c6:	2200      	movs	r2, #0
 80196c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80196ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80196ce:	4618      	mov	r0, r3
 80196d0:	3748      	adds	r7, #72	@ 0x48
 80196d2:	46bd      	mov	sp, r7
 80196d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80196d8:	03d09000 	.word	0x03d09000
 80196dc:	003d0900 	.word	0x003d0900
 80196e0:	0801ebec 	.word	0x0801ebec

080196e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80196e4:	b480      	push	{r7}
 80196e6:	b083      	sub	sp, #12
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196f0:	f003 0308 	and.w	r3, r3, #8
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d00a      	beq.n	801970e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	685b      	ldr	r3, [r3, #4]
 80196fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	430a      	orrs	r2, r1
 801970c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019712:	f003 0301 	and.w	r3, r3, #1
 8019716:	2b00      	cmp	r3, #0
 8019718:	d00a      	beq.n	8019730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	685b      	ldr	r3, [r3, #4]
 8019720:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	430a      	orrs	r2, r1
 801972e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019734:	f003 0302 	and.w	r3, r3, #2
 8019738:	2b00      	cmp	r3, #0
 801973a:	d00a      	beq.n	8019752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	685b      	ldr	r3, [r3, #4]
 8019742:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	430a      	orrs	r2, r1
 8019750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019756:	f003 0304 	and.w	r3, r3, #4
 801975a:	2b00      	cmp	r3, #0
 801975c:	d00a      	beq.n	8019774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	685b      	ldr	r3, [r3, #4]
 8019764:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	430a      	orrs	r2, r1
 8019772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019778:	f003 0310 	and.w	r3, r3, #16
 801977c:	2b00      	cmp	r3, #0
 801977e:	d00a      	beq.n	8019796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	689b      	ldr	r3, [r3, #8]
 8019786:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	430a      	orrs	r2, r1
 8019794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801979a:	f003 0320 	and.w	r3, r3, #32
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d00a      	beq.n	80197b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	689b      	ldr	r3, [r3, #8]
 80197a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	430a      	orrs	r2, r1
 80197b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d01a      	beq.n	80197fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	685b      	ldr	r3, [r3, #4]
 80197ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	430a      	orrs	r2, r1
 80197d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80197e2:	d10a      	bne.n	80197fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	430a      	orrs	r2, r1
 80197f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019802:	2b00      	cmp	r3, #0
 8019804:	d00a      	beq.n	801981c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	685b      	ldr	r3, [r3, #4]
 801980c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	430a      	orrs	r2, r1
 801981a:	605a      	str	r2, [r3, #4]
  }
}
 801981c:	bf00      	nop
 801981e:	370c      	adds	r7, #12
 8019820:	46bd      	mov	sp, r7
 8019822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019826:	4770      	bx	lr

08019828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b098      	sub	sp, #96	@ 0x60
 801982c:	af02      	add	r7, sp, #8
 801982e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2200      	movs	r2, #0
 8019834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019838:	f7ef fc40 	bl	80090bc <HAL_GetTick>
 801983c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	f003 0308 	and.w	r3, r3, #8
 8019848:	2b08      	cmp	r3, #8
 801984a:	d12f      	bne.n	80198ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801984c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019850:	9300      	str	r3, [sp, #0]
 8019852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019854:	2200      	movs	r2, #0
 8019856:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801985a:	6878      	ldr	r0, [r7, #4]
 801985c:	f000 f88e 	bl	801997c <UART_WaitOnFlagUntilTimeout>
 8019860:	4603      	mov	r3, r0
 8019862:	2b00      	cmp	r3, #0
 8019864:	d022      	beq.n	80198ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801986c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801986e:	e853 3f00 	ldrex	r3, [r3]
 8019872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801987a:	653b      	str	r3, [r7, #80]	@ 0x50
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	461a      	mov	r2, r3
 8019882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019884:	647b      	str	r3, [r7, #68]	@ 0x44
 8019886:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801988a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801988c:	e841 2300 	strex	r3, r2, [r1]
 8019890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019894:	2b00      	cmp	r3, #0
 8019896:	d1e6      	bne.n	8019866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2220      	movs	r2, #32
 801989c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	2200      	movs	r2, #0
 80198a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80198a8:	2303      	movs	r3, #3
 80198aa:	e063      	b.n	8019974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	f003 0304 	and.w	r3, r3, #4
 80198b6:	2b04      	cmp	r3, #4
 80198b8:	d149      	bne.n	801994e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80198ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80198be:	9300      	str	r3, [sp, #0]
 80198c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198c2:	2200      	movs	r2, #0
 80198c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80198c8:	6878      	ldr	r0, [r7, #4]
 80198ca:	f000 f857 	bl	801997c <UART_WaitOnFlagUntilTimeout>
 80198ce:	4603      	mov	r3, r0
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d03c      	beq.n	801994e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198dc:	e853 3f00 	ldrex	r3, [r3]
 80198e0:	623b      	str	r3, [r7, #32]
   return(result);
 80198e2:	6a3b      	ldr	r3, [r7, #32]
 80198e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80198e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	461a      	mov	r2, r3
 80198f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80198f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80198f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80198fa:	e841 2300 	strex	r3, r2, [r1]
 80198fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019902:	2b00      	cmp	r3, #0
 8019904:	d1e6      	bne.n	80198d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	3308      	adds	r3, #8
 801990c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801990e:	693b      	ldr	r3, [r7, #16]
 8019910:	e853 3f00 	ldrex	r3, [r3]
 8019914:	60fb      	str	r3, [r7, #12]
   return(result);
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	f023 0301 	bic.w	r3, r3, #1
 801991c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	3308      	adds	r3, #8
 8019924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019926:	61fa      	str	r2, [r7, #28]
 8019928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801992a:	69b9      	ldr	r1, [r7, #24]
 801992c:	69fa      	ldr	r2, [r7, #28]
 801992e:	e841 2300 	strex	r3, r2, [r1]
 8019932:	617b      	str	r3, [r7, #20]
   return(result);
 8019934:	697b      	ldr	r3, [r7, #20]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d1e5      	bne.n	8019906 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	2220      	movs	r2, #32
 801993e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2200      	movs	r2, #0
 8019946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801994a:	2303      	movs	r3, #3
 801994c:	e012      	b.n	8019974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	2220      	movs	r2, #32
 8019952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	2220      	movs	r2, #32
 801995a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	2200      	movs	r2, #0
 8019962:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	2200      	movs	r2, #0
 8019968:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	2200      	movs	r2, #0
 801996e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019972:	2300      	movs	r3, #0
}
 8019974:	4618      	mov	r0, r3
 8019976:	3758      	adds	r7, #88	@ 0x58
 8019978:	46bd      	mov	sp, r7
 801997a:	bd80      	pop	{r7, pc}

0801997c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b084      	sub	sp, #16
 8019980:	af00      	add	r7, sp, #0
 8019982:	60f8      	str	r0, [r7, #12]
 8019984:	60b9      	str	r1, [r7, #8]
 8019986:	603b      	str	r3, [r7, #0]
 8019988:	4613      	mov	r3, r2
 801998a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801998c:	e04f      	b.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801998e:	69bb      	ldr	r3, [r7, #24]
 8019990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019994:	d04b      	beq.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019996:	f7ef fb91 	bl	80090bc <HAL_GetTick>
 801999a:	4602      	mov	r2, r0
 801999c:	683b      	ldr	r3, [r7, #0]
 801999e:	1ad3      	subs	r3, r2, r3
 80199a0:	69ba      	ldr	r2, [r7, #24]
 80199a2:	429a      	cmp	r2, r3
 80199a4:	d302      	bcc.n	80199ac <UART_WaitOnFlagUntilTimeout+0x30>
 80199a6:	69bb      	ldr	r3, [r7, #24]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d101      	bne.n	80199b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80199ac:	2303      	movs	r3, #3
 80199ae:	e04e      	b.n	8019a4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	f003 0304 	and.w	r3, r3, #4
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d037      	beq.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	2b80      	cmp	r3, #128	@ 0x80
 80199c2:	d034      	beq.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	2b40      	cmp	r3, #64	@ 0x40
 80199c8:	d031      	beq.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	69db      	ldr	r3, [r3, #28]
 80199d0:	f003 0308 	and.w	r3, r3, #8
 80199d4:	2b08      	cmp	r3, #8
 80199d6:	d110      	bne.n	80199fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2208      	movs	r2, #8
 80199de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80199e0:	68f8      	ldr	r0, [r7, #12]
 80199e2:	f000 f95b 	bl	8019c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	2208      	movs	r2, #8
 80199ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	2200      	movs	r2, #0
 80199f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80199f6:	2301      	movs	r3, #1
 80199f8:	e029      	b.n	8019a4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	69db      	ldr	r3, [r3, #28]
 8019a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019a08:	d111      	bne.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019a14:	68f8      	ldr	r0, [r7, #12]
 8019a16:	f000 f941 	bl	8019c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	2220      	movs	r2, #32
 8019a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	2200      	movs	r2, #0
 8019a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8019a2a:	2303      	movs	r3, #3
 8019a2c:	e00f      	b.n	8019a4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	69da      	ldr	r2, [r3, #28]
 8019a34:	68bb      	ldr	r3, [r7, #8]
 8019a36:	4013      	ands	r3, r2
 8019a38:	68ba      	ldr	r2, [r7, #8]
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	bf0c      	ite	eq
 8019a3e:	2301      	moveq	r3, #1
 8019a40:	2300      	movne	r3, #0
 8019a42:	b2db      	uxtb	r3, r3
 8019a44:	461a      	mov	r2, r3
 8019a46:	79fb      	ldrb	r3, [r7, #7]
 8019a48:	429a      	cmp	r2, r3
 8019a4a:	d0a0      	beq.n	801998e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019a4c:	2300      	movs	r3, #0
}
 8019a4e:	4618      	mov	r0, r3
 8019a50:	3710      	adds	r7, #16
 8019a52:	46bd      	mov	sp, r7
 8019a54:	bd80      	pop	{r7, pc}
	...

08019a58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019a58:	b480      	push	{r7}
 8019a5a:	b0a3      	sub	sp, #140	@ 0x8c
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	60f8      	str	r0, [r7, #12]
 8019a60:	60b9      	str	r1, [r7, #8]
 8019a62:	4613      	mov	r3, r2
 8019a64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	68ba      	ldr	r2, [r7, #8]
 8019a6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	88fa      	ldrh	r2, [r7, #6]
 8019a70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	88fa      	ldrh	r2, [r7, #6]
 8019a78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2200      	movs	r2, #0
 8019a80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	689b      	ldr	r3, [r3, #8]
 8019a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019a8a:	d10e      	bne.n	8019aaa <UART_Start_Receive_IT+0x52>
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	691b      	ldr	r3, [r3, #16]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d105      	bne.n	8019aa0 <UART_Start_Receive_IT+0x48>
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a9e:	e02d      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	22ff      	movs	r2, #255	@ 0xff
 8019aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019aa8:	e028      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	689b      	ldr	r3, [r3, #8]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d10d      	bne.n	8019ace <UART_Start_Receive_IT+0x76>
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	691b      	ldr	r3, [r3, #16]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d104      	bne.n	8019ac4 <UART_Start_Receive_IT+0x6c>
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	22ff      	movs	r2, #255	@ 0xff
 8019abe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ac2:	e01b      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	227f      	movs	r2, #127	@ 0x7f
 8019ac8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019acc:	e016      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	689b      	ldr	r3, [r3, #8]
 8019ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019ad6:	d10d      	bne.n	8019af4 <UART_Start_Receive_IT+0x9c>
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	691b      	ldr	r3, [r3, #16]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d104      	bne.n	8019aea <UART_Start_Receive_IT+0x92>
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	227f      	movs	r2, #127	@ 0x7f
 8019ae4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ae8:	e008      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	223f      	movs	r2, #63	@ 0x3f
 8019aee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019af2:	e003      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	2200      	movs	r2, #0
 8019af8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	2200      	movs	r2, #0
 8019b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	2222      	movs	r2, #34	@ 0x22
 8019b08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	3308      	adds	r3, #8
 8019b12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019b16:	e853 3f00 	ldrex	r3, [r3]
 8019b1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019b1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019b1e:	f043 0301 	orr.w	r3, r3, #1
 8019b22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	3308      	adds	r3, #8
 8019b2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019b30:	673a      	str	r2, [r7, #112]	@ 0x70
 8019b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019b36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019b38:	e841 2300 	strex	r3, r2, [r1]
 8019b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d1e3      	bne.n	8019b0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019b4c:	d14f      	bne.n	8019bee <UART_Start_Receive_IT+0x196>
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b54:	88fa      	ldrh	r2, [r7, #6]
 8019b56:	429a      	cmp	r2, r3
 8019b58:	d349      	bcc.n	8019bee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	689b      	ldr	r3, [r3, #8]
 8019b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b62:	d107      	bne.n	8019b74 <UART_Start_Receive_IT+0x11c>
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	691b      	ldr	r3, [r3, #16]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d103      	bne.n	8019b74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	4a47      	ldr	r2, [pc, #284]	@ (8019c8c <UART_Start_Receive_IT+0x234>)
 8019b70:	675a      	str	r2, [r3, #116]	@ 0x74
 8019b72:	e002      	b.n	8019b7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	4a46      	ldr	r2, [pc, #280]	@ (8019c90 <UART_Start_Receive_IT+0x238>)
 8019b78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	691b      	ldr	r3, [r3, #16]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d01a      	beq.n	8019bb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b8a:	e853 3f00 	ldrex	r3, [r3]
 8019b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019b96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	461a      	mov	r2, r3
 8019ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ba6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ba8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019baa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019bac:	e841 2300 	strex	r3, r2, [r1]
 8019bb0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d1e4      	bne.n	8019b82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	3308      	adds	r3, #8
 8019bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bc2:	e853 3f00 	ldrex	r3, [r3]
 8019bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019bce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	3308      	adds	r3, #8
 8019bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019bd8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019bda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019be0:	e841 2300 	strex	r3, r2, [r1]
 8019be4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d1e5      	bne.n	8019bb8 <UART_Start_Receive_IT+0x160>
 8019bec:	e046      	b.n	8019c7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	689b      	ldr	r3, [r3, #8]
 8019bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019bf6:	d107      	bne.n	8019c08 <UART_Start_Receive_IT+0x1b0>
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	691b      	ldr	r3, [r3, #16]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d103      	bne.n	8019c08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	4a24      	ldr	r2, [pc, #144]	@ (8019c94 <UART_Start_Receive_IT+0x23c>)
 8019c04:	675a      	str	r2, [r3, #116]	@ 0x74
 8019c06:	e002      	b.n	8019c0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	4a23      	ldr	r2, [pc, #140]	@ (8019c98 <UART_Start_Receive_IT+0x240>)
 8019c0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	691b      	ldr	r3, [r3, #16]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d019      	beq.n	8019c4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c1e:	e853 3f00 	ldrex	r3, [r3]
 8019c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c26:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019c2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	461a      	mov	r2, r3
 8019c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c36:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c3c:	e841 2300 	strex	r3, r2, [r1]
 8019c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d1e6      	bne.n	8019c16 <UART_Start_Receive_IT+0x1be>
 8019c48:	e018      	b.n	8019c7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c50:	697b      	ldr	r3, [r7, #20]
 8019c52:	e853 3f00 	ldrex	r3, [r3]
 8019c56:	613b      	str	r3, [r7, #16]
   return(result);
 8019c58:	693b      	ldr	r3, [r7, #16]
 8019c5a:	f043 0320 	orr.w	r3, r3, #32
 8019c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	461a      	mov	r2, r3
 8019c66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c68:	623b      	str	r3, [r7, #32]
 8019c6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c6c:	69f9      	ldr	r1, [r7, #28]
 8019c6e:	6a3a      	ldr	r2, [r7, #32]
 8019c70:	e841 2300 	strex	r3, r2, [r1]
 8019c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8019c76:	69bb      	ldr	r3, [r7, #24]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d1e6      	bne.n	8019c4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019c7c:	2300      	movs	r3, #0
}
 8019c7e:	4618      	mov	r0, r3
 8019c80:	378c      	adds	r7, #140	@ 0x8c
 8019c82:	46bd      	mov	sp, r7
 8019c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c88:	4770      	bx	lr
 8019c8a:	bf00      	nop
 8019c8c:	0801a7fd 	.word	0x0801a7fd
 8019c90:	0801a499 	.word	0x0801a499
 8019c94:	0801a2e1 	.word	0x0801a2e1
 8019c98:	0801a129 	.word	0x0801a129

08019c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019c9c:	b480      	push	{r7}
 8019c9e:	b095      	sub	sp, #84	@ 0x54
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cac:	e853 3f00 	ldrex	r3, [r3]
 8019cb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	461a      	mov	r2, r3
 8019cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8019cc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019cc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019cca:	e841 2300 	strex	r3, r2, [r1]
 8019cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d1e6      	bne.n	8019ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	3308      	adds	r3, #8
 8019cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cde:	6a3b      	ldr	r3, [r7, #32]
 8019ce0:	e853 3f00 	ldrex	r3, [r3]
 8019ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8019ce6:	69fa      	ldr	r2, [r7, #28]
 8019ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8019d64 <UART_EndRxTransfer+0xc8>)
 8019cea:	4013      	ands	r3, r2
 8019cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	3308      	adds	r3, #8
 8019cf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019cfe:	e841 2300 	strex	r3, r2, [r1]
 8019d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d1e5      	bne.n	8019cd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d0e:	2b01      	cmp	r3, #1
 8019d10:	d118      	bne.n	8019d44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	e853 3f00 	ldrex	r3, [r3]
 8019d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	f023 0310 	bic.w	r3, r3, #16
 8019d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	461a      	mov	r2, r3
 8019d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d30:	61bb      	str	r3, [r7, #24]
 8019d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d34:	6979      	ldr	r1, [r7, #20]
 8019d36:	69ba      	ldr	r2, [r7, #24]
 8019d38:	e841 2300 	strex	r3, r2, [r1]
 8019d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8019d3e:	693b      	ldr	r3, [r7, #16]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d1e6      	bne.n	8019d12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	2220      	movs	r2, #32
 8019d48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2200      	movs	r2, #0
 8019d50:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	2200      	movs	r2, #0
 8019d56:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019d58:	bf00      	nop
 8019d5a:	3754      	adds	r7, #84	@ 0x54
 8019d5c:	46bd      	mov	sp, r7
 8019d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d62:	4770      	bx	lr
 8019d64:	effffffe 	.word	0xeffffffe

08019d68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b084      	sub	sp, #16
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019d74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	2200      	movs	r2, #0
 8019d7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019d7e:	68f8      	ldr	r0, [r7, #12]
 8019d80:	f7fe fe2e 	bl	80189e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019d84:	bf00      	nop
 8019d86:	3710      	adds	r7, #16
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bd80      	pop	{r7, pc}

08019d8c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019d8c:	b480      	push	{r7}
 8019d8e:	b08f      	sub	sp, #60	@ 0x3c
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019d9a:	2b21      	cmp	r3, #33	@ 0x21
 8019d9c:	d14c      	bne.n	8019e38 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019da4:	b29b      	uxth	r3, r3
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d132      	bne.n	8019e10 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019db0:	6a3b      	ldr	r3, [r7, #32]
 8019db2:	e853 3f00 	ldrex	r3, [r3]
 8019db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8019db8:	69fb      	ldr	r3, [r7, #28]
 8019dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019dca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019dd0:	e841 2300 	strex	r3, r2, [r1]
 8019dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d1e6      	bne.n	8019daa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	e853 3f00 	ldrex	r3, [r3]
 8019de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8019dea:	68bb      	ldr	r3, [r7, #8]
 8019dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	461a      	mov	r2, r3
 8019df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dfa:	61bb      	str	r3, [r7, #24]
 8019dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dfe:	6979      	ldr	r1, [r7, #20]
 8019e00:	69ba      	ldr	r2, [r7, #24]
 8019e02:	e841 2300 	strex	r3, r2, [r1]
 8019e06:	613b      	str	r3, [r7, #16]
   return(result);
 8019e08:	693b      	ldr	r3, [r7, #16]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d1e6      	bne.n	8019ddc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019e0e:	e013      	b.n	8019e38 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e14:	781a      	ldrb	r2, [r3, #0]
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e20:	1c5a      	adds	r2, r3, #1
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	3b01      	subs	r3, #1
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019e38:	bf00      	nop
 8019e3a:	373c      	adds	r7, #60	@ 0x3c
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e42:	4770      	bx	lr

08019e44 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019e44:	b480      	push	{r7}
 8019e46:	b091      	sub	sp, #68	@ 0x44
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019e52:	2b21      	cmp	r3, #33	@ 0x21
 8019e54:	d151      	bne.n	8019efa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d132      	bne.n	8019ec8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e6a:	e853 3f00 	ldrex	r3, [r3]
 8019e6e:	623b      	str	r3, [r7, #32]
   return(result);
 8019e70:	6a3b      	ldr	r3, [r7, #32]
 8019e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	461a      	mov	r2, r3
 8019e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019e88:	e841 2300 	strex	r3, r2, [r1]
 8019e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d1e6      	bne.n	8019e62 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e9a:	693b      	ldr	r3, [r7, #16]
 8019e9c:	e853 3f00 	ldrex	r3, [r3]
 8019ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	461a      	mov	r2, r3
 8019eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019eb2:	61fb      	str	r3, [r7, #28]
 8019eb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019eb6:	69b9      	ldr	r1, [r7, #24]
 8019eb8:	69fa      	ldr	r2, [r7, #28]
 8019eba:	e841 2300 	strex	r3, r2, [r1]
 8019ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8019ec0:	697b      	ldr	r3, [r7, #20]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d1e6      	bne.n	8019e94 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019ec6:	e018      	b.n	8019efa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ed0:	881b      	ldrh	r3, [r3, #0]
 8019ed2:	461a      	mov	r2, r3
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019edc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ee2:	1c9a      	adds	r2, r3, #2
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	3b01      	subs	r3, #1
 8019ef2:	b29a      	uxth	r2, r3
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019efa:	bf00      	nop
 8019efc:	3744      	adds	r7, #68	@ 0x44
 8019efe:	46bd      	mov	sp, r7
 8019f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f04:	4770      	bx	lr

08019f06 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019f06:	b480      	push	{r7}
 8019f08:	b091      	sub	sp, #68	@ 0x44
 8019f0a:	af00      	add	r7, sp, #0
 8019f0c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019f14:	2b21      	cmp	r3, #33	@ 0x21
 8019f16:	d160      	bne.n	8019fda <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019f1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f20:	e057      	b.n	8019fd2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d133      	bne.n	8019f96 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	3308      	adds	r3, #8
 8019f34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f38:	e853 3f00 	ldrex	r3, [r3]
 8019f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8019f3e:	6a3b      	ldr	r3, [r7, #32]
 8019f40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	3308      	adds	r3, #8
 8019f4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8019f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f56:	e841 2300 	strex	r3, r2, [r1]
 8019f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d1e5      	bne.n	8019f2e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f68:	693b      	ldr	r3, [r7, #16]
 8019f6a:	e853 3f00 	ldrex	r3, [r3]
 8019f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	461a      	mov	r2, r3
 8019f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f80:	61fb      	str	r3, [r7, #28]
 8019f82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f84:	69b9      	ldr	r1, [r7, #24]
 8019f86:	69fa      	ldr	r2, [r7, #28]
 8019f88:	e841 2300 	strex	r3, r2, [r1]
 8019f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d1e6      	bne.n	8019f62 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019f94:	e021      	b.n	8019fda <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	69db      	ldr	r3, [r3, #28]
 8019f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d013      	beq.n	8019fcc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fa8:	781a      	ldrb	r2, [r3, #0]
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fb4:	1c5a      	adds	r2, r3, #1
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	3b01      	subs	r3, #1
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019fcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019fce:	3b01      	subs	r3, #1
 8019fd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019fd2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d1a4      	bne.n	8019f22 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019fd8:	e7ff      	b.n	8019fda <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019fda:	bf00      	nop
 8019fdc:	3744      	adds	r7, #68	@ 0x44
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe4:	4770      	bx	lr

08019fe6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019fe6:	b480      	push	{r7}
 8019fe8:	b091      	sub	sp, #68	@ 0x44
 8019fea:	af00      	add	r7, sp, #0
 8019fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019ff4:	2b21      	cmp	r3, #33	@ 0x21
 8019ff6:	d165      	bne.n	801a0c4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019ffe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a000:	e05c      	b.n	801a0bc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a008:	b29b      	uxth	r3, r3
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d133      	bne.n	801a076 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	3308      	adds	r3, #8
 801a014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a016:	6a3b      	ldr	r3, [r7, #32]
 801a018:	e853 3f00 	ldrex	r3, [r3]
 801a01c:	61fb      	str	r3, [r7, #28]
   return(result);
 801a01e:	69fb      	ldr	r3, [r7, #28]
 801a020:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a024:	637b      	str	r3, [r7, #52]	@ 0x34
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	3308      	adds	r3, #8
 801a02c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a02e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a030:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a036:	e841 2300 	strex	r3, r2, [r1]
 801a03a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d1e5      	bne.n	801a00e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	e853 3f00 	ldrex	r3, [r3]
 801a04e:	60bb      	str	r3, [r7, #8]
   return(result);
 801a050:	68bb      	ldr	r3, [r7, #8]
 801a052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a056:	633b      	str	r3, [r7, #48]	@ 0x30
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	461a      	mov	r2, r3
 801a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a060:	61bb      	str	r3, [r7, #24]
 801a062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a064:	6979      	ldr	r1, [r7, #20]
 801a066:	69ba      	ldr	r2, [r7, #24]
 801a068:	e841 2300 	strex	r3, r2, [r1]
 801a06c:	613b      	str	r3, [r7, #16]
   return(result);
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d1e6      	bne.n	801a042 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801a074:	e026      	b.n	801a0c4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	69db      	ldr	r3, [r3, #28]
 801a07c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a080:	2b00      	cmp	r3, #0
 801a082:	d018      	beq.n	801a0b6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a088:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a08c:	881b      	ldrh	r3, [r3, #0]
 801a08e:	461a      	mov	r2, r3
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a098:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a09e:	1c9a      	adds	r2, r3, #2
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a0aa:	b29b      	uxth	r3, r3
 801a0ac:	3b01      	subs	r3, #1
 801a0ae:	b29a      	uxth	r2, r3
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a0b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0b8:	3b01      	subs	r3, #1
 801a0ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a0bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d19f      	bne.n	801a002 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a0c2:	e7ff      	b.n	801a0c4 <UART_TxISR_16BIT_FIFOEN+0xde>
 801a0c4:	bf00      	nop
 801a0c6:	3744      	adds	r7, #68	@ 0x44
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ce:	4770      	bx	lr

0801a0d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b088      	sub	sp, #32
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	e853 3f00 	ldrex	r3, [r3]
 801a0e4:	60bb      	str	r3, [r7, #8]
   return(result);
 801a0e6:	68bb      	ldr	r3, [r7, #8]
 801a0e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a0ec:	61fb      	str	r3, [r7, #28]
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	461a      	mov	r2, r3
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	61bb      	str	r3, [r7, #24]
 801a0f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0fa:	6979      	ldr	r1, [r7, #20]
 801a0fc:	69ba      	ldr	r2, [r7, #24]
 801a0fe:	e841 2300 	strex	r3, r2, [r1]
 801a102:	613b      	str	r3, [r7, #16]
   return(result);
 801a104:	693b      	ldr	r3, [r7, #16]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d1e6      	bne.n	801a0d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	2220      	movs	r2, #32
 801a10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2200      	movs	r2, #0
 801a116:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a118:	6878      	ldr	r0, [r7, #4]
 801a11a:	f7fe fc57 	bl	80189cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a11e:	bf00      	nop
 801a120:	3720      	adds	r7, #32
 801a122:	46bd      	mov	sp, r7
 801a124:	bd80      	pop	{r7, pc}
	...

0801a128 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a128:	b580      	push	{r7, lr}
 801a12a:	b09c      	sub	sp, #112	@ 0x70
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a136:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a140:	2b22      	cmp	r3, #34	@ 0x22
 801a142:	f040 80be 	bne.w	801a2c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a14c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a150:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a154:	b2d9      	uxtb	r1, r3
 801a156:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a15a:	b2da      	uxtb	r2, r3
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a160:	400a      	ands	r2, r1
 801a162:	b2d2      	uxtb	r2, r2
 801a164:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a16a:	1c5a      	adds	r2, r3, #1
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a176:	b29b      	uxth	r3, r3
 801a178:	3b01      	subs	r3, #1
 801a17a:	b29a      	uxth	r2, r3
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a188:	b29b      	uxth	r3, r3
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	f040 80a1 	bne.w	801a2d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a198:	e853 3f00 	ldrex	r3, [r3]
 801a19c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a19e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a1a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a1a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	461a      	mov	r2, r3
 801a1ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a1b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1b6:	e841 2300 	strex	r3, r2, [r1]
 801a1ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a1bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d1e6      	bne.n	801a190 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	3308      	adds	r3, #8
 801a1c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1cc:	e853 3f00 	ldrex	r3, [r3]
 801a1d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1d4:	f023 0301 	bic.w	r3, r3, #1
 801a1d8:	667b      	str	r3, [r7, #100]	@ 0x64
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	3308      	adds	r3, #8
 801a1e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a1e2:	647a      	str	r2, [r7, #68]	@ 0x44
 801a1e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a1e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a1ea:	e841 2300 	strex	r3, r2, [r1]
 801a1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a1f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d1e5      	bne.n	801a1c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	2220      	movs	r2, #32
 801a1fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	2200      	movs	r2, #0
 801a202:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2200      	movs	r2, #0
 801a208:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4a33      	ldr	r2, [pc, #204]	@ (801a2dc <UART_RxISR_8BIT+0x1b4>)
 801a210:	4293      	cmp	r3, r2
 801a212:	d01f      	beq.n	801a254 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	685b      	ldr	r3, [r3, #4]
 801a21a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d018      	beq.n	801a254 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a22a:	e853 3f00 	ldrex	r3, [r3]
 801a22e:	623b      	str	r3, [r7, #32]
   return(result);
 801a230:	6a3b      	ldr	r3, [r7, #32]
 801a232:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a236:	663b      	str	r3, [r7, #96]	@ 0x60
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	461a      	mov	r2, r3
 801a23e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a240:	633b      	str	r3, [r7, #48]	@ 0x30
 801a242:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a248:	e841 2300 	strex	r3, r2, [r1]
 801a24c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a250:	2b00      	cmp	r3, #0
 801a252:	d1e6      	bne.n	801a222 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a258:	2b01      	cmp	r3, #1
 801a25a:	d12e      	bne.n	801a2ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	2200      	movs	r2, #0
 801a260:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a268:	693b      	ldr	r3, [r7, #16]
 801a26a:	e853 3f00 	ldrex	r3, [r3]
 801a26e:	60fb      	str	r3, [r7, #12]
   return(result);
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	f023 0310 	bic.w	r3, r3, #16
 801a276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	461a      	mov	r2, r3
 801a27e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a280:	61fb      	str	r3, [r7, #28]
 801a282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a284:	69b9      	ldr	r1, [r7, #24]
 801a286:	69fa      	ldr	r2, [r7, #28]
 801a288:	e841 2300 	strex	r3, r2, [r1]
 801a28c:	617b      	str	r3, [r7, #20]
   return(result);
 801a28e:	697b      	ldr	r3, [r7, #20]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d1e6      	bne.n	801a262 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	69db      	ldr	r3, [r3, #28]
 801a29a:	f003 0310 	and.w	r3, r3, #16
 801a29e:	2b10      	cmp	r3, #16
 801a2a0:	d103      	bne.n	801a2aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	2210      	movs	r2, #16
 801a2a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a2b0:	4619      	mov	r1, r3
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f7fe fb9e 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a2b8:	e00b      	b.n	801a2d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f7ec f920 	bl	8006500 <HAL_UART_RxCpltCallback>
}
 801a2c0:	e007      	b.n	801a2d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	699a      	ldr	r2, [r3, #24]
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	f042 0208 	orr.w	r2, r2, #8
 801a2d0:	619a      	str	r2, [r3, #24]
}
 801a2d2:	bf00      	nop
 801a2d4:	3770      	adds	r7, #112	@ 0x70
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	bd80      	pop	{r7, pc}
 801a2da:	bf00      	nop
 801a2dc:	58000c00 	.word	0x58000c00

0801a2e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b09c      	sub	sp, #112	@ 0x70
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a2ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a2f8:	2b22      	cmp	r3, #34	@ 0x22
 801a2fa:	f040 80be 	bne.w	801a47a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a304:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a30c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a30e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a312:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a316:	4013      	ands	r3, r2
 801a318:	b29a      	uxth	r2, r3
 801a31a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a31c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a322:	1c9a      	adds	r2, r3, #2
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a32e:	b29b      	uxth	r3, r3
 801a330:	3b01      	subs	r3, #1
 801a332:	b29a      	uxth	r2, r3
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a340:	b29b      	uxth	r3, r3
 801a342:	2b00      	cmp	r3, #0
 801a344:	f040 80a1 	bne.w	801a48a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a34e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a350:	e853 3f00 	ldrex	r3, [r3]
 801a354:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a35c:	667b      	str	r3, [r7, #100]	@ 0x64
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	461a      	mov	r2, r3
 801a364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a366:	657b      	str	r3, [r7, #84]	@ 0x54
 801a368:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a36a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a36c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a36e:	e841 2300 	strex	r3, r2, [r1]
 801a372:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a376:	2b00      	cmp	r3, #0
 801a378:	d1e6      	bne.n	801a348 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	3308      	adds	r3, #8
 801a380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a384:	e853 3f00 	ldrex	r3, [r3]
 801a388:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a38c:	f023 0301 	bic.w	r3, r3, #1
 801a390:	663b      	str	r3, [r7, #96]	@ 0x60
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	3308      	adds	r3, #8
 801a398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a39a:	643a      	str	r2, [r7, #64]	@ 0x40
 801a39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a39e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a3a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3a2:	e841 2300 	strex	r3, r2, [r1]
 801a3a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d1e5      	bne.n	801a37a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	2220      	movs	r2, #32
 801a3b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	2200      	movs	r2, #0
 801a3c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	4a33      	ldr	r2, [pc, #204]	@ (801a494 <UART_RxISR_16BIT+0x1b4>)
 801a3c8:	4293      	cmp	r3, r2
 801a3ca:	d01f      	beq.n	801a40c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	685b      	ldr	r3, [r3, #4]
 801a3d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d018      	beq.n	801a40c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3e0:	6a3b      	ldr	r3, [r7, #32]
 801a3e2:	e853 3f00 	ldrex	r3, [r3]
 801a3e6:	61fb      	str	r3, [r7, #28]
   return(result);
 801a3e8:	69fb      	ldr	r3, [r7, #28]
 801a3ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a3ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	461a      	mov	r2, r3
 801a3f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a3fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a400:	e841 2300 	strex	r3, r2, [r1]
 801a404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d1e6      	bne.n	801a3da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a410:	2b01      	cmp	r3, #1
 801a412:	d12e      	bne.n	801a472 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	2200      	movs	r2, #0
 801a418:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	e853 3f00 	ldrex	r3, [r3]
 801a426:	60bb      	str	r3, [r7, #8]
   return(result);
 801a428:	68bb      	ldr	r3, [r7, #8]
 801a42a:	f023 0310 	bic.w	r3, r3, #16
 801a42e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	461a      	mov	r2, r3
 801a436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a438:	61bb      	str	r3, [r7, #24]
 801a43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a43c:	6979      	ldr	r1, [r7, #20]
 801a43e:	69ba      	ldr	r2, [r7, #24]
 801a440:	e841 2300 	strex	r3, r2, [r1]
 801a444:	613b      	str	r3, [r7, #16]
   return(result);
 801a446:	693b      	ldr	r3, [r7, #16]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d1e6      	bne.n	801a41a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	69db      	ldr	r3, [r3, #28]
 801a452:	f003 0310 	and.w	r3, r3, #16
 801a456:	2b10      	cmp	r3, #16
 801a458:	d103      	bne.n	801a462 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	2210      	movs	r2, #16
 801a460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a468:	4619      	mov	r1, r3
 801a46a:	6878      	ldr	r0, [r7, #4]
 801a46c:	f7fe fac2 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a470:	e00b      	b.n	801a48a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a472:	6878      	ldr	r0, [r7, #4]
 801a474:	f7ec f844 	bl	8006500 <HAL_UART_RxCpltCallback>
}
 801a478:	e007      	b.n	801a48a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	699a      	ldr	r2, [r3, #24]
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	f042 0208 	orr.w	r2, r2, #8
 801a488:	619a      	str	r2, [r3, #24]
}
 801a48a:	bf00      	nop
 801a48c:	3770      	adds	r7, #112	@ 0x70
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd80      	pop	{r7, pc}
 801a492:	bf00      	nop
 801a494:	58000c00 	.word	0x58000c00

0801a498 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a498:	b580      	push	{r7, lr}
 801a49a:	b0ac      	sub	sp, #176	@ 0xb0
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	69db      	ldr	r3, [r3, #28]
 801a4b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	689b      	ldr	r3, [r3, #8]
 801a4c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a4ce:	2b22      	cmp	r3, #34	@ 0x22
 801a4d0:	f040 8181 	bne.w	801a7d6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a4da:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a4de:	e124      	b.n	801a72a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4e6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a4ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a4ee:	b2d9      	uxtb	r1, r3
 801a4f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a4f4:	b2da      	uxtb	r2, r3
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a4fa:	400a      	ands	r2, r1
 801a4fc:	b2d2      	uxtb	r2, r2
 801a4fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a504:	1c5a      	adds	r2, r3, #1
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a510:	b29b      	uxth	r3, r3
 801a512:	3b01      	subs	r3, #1
 801a514:	b29a      	uxth	r2, r3
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	69db      	ldr	r3, [r3, #28]
 801a522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a52a:	f003 0307 	and.w	r3, r3, #7
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d053      	beq.n	801a5da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a536:	f003 0301 	and.w	r3, r3, #1
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d011      	beq.n	801a562 <UART_RxISR_8BIT_FIFOEN+0xca>
 801a53e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a546:	2b00      	cmp	r3, #0
 801a548:	d00b      	beq.n	801a562 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	2201      	movs	r2, #1
 801a550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a558:	f043 0201 	orr.w	r2, r3, #1
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a566:	f003 0302 	and.w	r3, r3, #2
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d011      	beq.n	801a592 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a56e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a572:	f003 0301 	and.w	r3, r3, #1
 801a576:	2b00      	cmp	r3, #0
 801a578:	d00b      	beq.n	801a592 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	2202      	movs	r2, #2
 801a580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a588:	f043 0204 	orr.w	r2, r3, #4
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a596:	f003 0304 	and.w	r3, r3, #4
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d011      	beq.n	801a5c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a59e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a5a2:	f003 0301 	and.w	r3, r3, #1
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d00b      	beq.n	801a5c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	2204      	movs	r2, #4
 801a5b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5b8:	f043 0202 	orr.w	r2, r3, #2
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d006      	beq.n	801a5da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a5cc:	6878      	ldr	r0, [r7, #4]
 801a5ce:	f7fe fa07 	bl	80189e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a5e0:	b29b      	uxth	r3, r3
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	f040 80a1 	bne.w	801a72a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a5f0:	e853 3f00 	ldrex	r3, [r3]
 801a5f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a5f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a5f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a5fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	461a      	mov	r2, r3
 801a606:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a60a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a60c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a60e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a610:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a612:	e841 2300 	strex	r3, r2, [r1]
 801a616:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a618:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d1e4      	bne.n	801a5e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	3308      	adds	r3, #8
 801a624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a628:	e853 3f00 	ldrex	r3, [r3]
 801a62c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a62e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a630:	4b6f      	ldr	r3, [pc, #444]	@ (801a7f0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a632:	4013      	ands	r3, r2
 801a634:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	3308      	adds	r3, #8
 801a63e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a642:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a644:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a646:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a648:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a64a:	e841 2300 	strex	r3, r2, [r1]
 801a64e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a652:	2b00      	cmp	r3, #0
 801a654:	d1e3      	bne.n	801a61e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	2220      	movs	r2, #32
 801a65a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	2200      	movs	r2, #0
 801a662:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	2200      	movs	r2, #0
 801a668:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	4a61      	ldr	r2, [pc, #388]	@ (801a7f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a670:	4293      	cmp	r3, r2
 801a672:	d021      	beq.n	801a6b8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d01a      	beq.n	801a6b8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a68a:	e853 3f00 	ldrex	r3, [r3]
 801a68e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a692:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	461a      	mov	r2, r3
 801a6a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a6a4:	657b      	str	r3, [r7, #84]	@ 0x54
 801a6a6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a6aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a6ac:	e841 2300 	strex	r3, r2, [r1]
 801a6b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a6b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d1e4      	bne.n	801a682 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6bc:	2b01      	cmp	r3, #1
 801a6be:	d130      	bne.n	801a722 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6ce:	e853 3f00 	ldrex	r3, [r3]
 801a6d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6d6:	f023 0310 	bic.w	r3, r3, #16
 801a6da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	461a      	mov	r2, r3
 801a6e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a6e8:	643b      	str	r3, [r7, #64]	@ 0x40
 801a6ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a6ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a6f0:	e841 2300 	strex	r3, r2, [r1]
 801a6f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d1e4      	bne.n	801a6c6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	69db      	ldr	r3, [r3, #28]
 801a702:	f003 0310 	and.w	r3, r3, #16
 801a706:	2b10      	cmp	r3, #16
 801a708:	d103      	bne.n	801a712 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	2210      	movs	r2, #16
 801a710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a718:	4619      	mov	r1, r3
 801a71a:	6878      	ldr	r0, [r7, #4]
 801a71c:	f7fe f96a 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a720:	e00e      	b.n	801a740 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	f7eb feec 	bl	8006500 <HAL_UART_RxCpltCallback>
        break;
 801a728:	e00a      	b.n	801a740 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a72a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d006      	beq.n	801a740 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a736:	f003 0320 	and.w	r3, r3, #32
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	f47f aed0 	bne.w	801a4e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a746:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a74a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d049      	beq.n	801a7e6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a758:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d242      	bcs.n	801a7e6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	3308      	adds	r3, #8
 801a766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a768:	6a3b      	ldr	r3, [r7, #32]
 801a76a:	e853 3f00 	ldrex	r3, [r3]
 801a76e:	61fb      	str	r3, [r7, #28]
   return(result);
 801a770:	69fb      	ldr	r3, [r7, #28]
 801a772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	3308      	adds	r3, #8
 801a780:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a78c:	e841 2300 	strex	r3, r2, [r1]
 801a790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a794:	2b00      	cmp	r3, #0
 801a796:	d1e3      	bne.n	801a760 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	4a17      	ldr	r2, [pc, #92]	@ (801a7f8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a79c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	e853 3f00 	ldrex	r3, [r3]
 801a7aa:	60bb      	str	r3, [r7, #8]
   return(result);
 801a7ac:	68bb      	ldr	r3, [r7, #8]
 801a7ae:	f043 0320 	orr.w	r3, r3, #32
 801a7b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	461a      	mov	r2, r3
 801a7bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a7c0:	61bb      	str	r3, [r7, #24]
 801a7c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7c4:	6979      	ldr	r1, [r7, #20]
 801a7c6:	69ba      	ldr	r2, [r7, #24]
 801a7c8:	e841 2300 	strex	r3, r2, [r1]
 801a7cc:	613b      	str	r3, [r7, #16]
   return(result);
 801a7ce:	693b      	ldr	r3, [r7, #16]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d1e4      	bne.n	801a79e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a7d4:	e007      	b.n	801a7e6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	699a      	ldr	r2, [r3, #24]
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	f042 0208 	orr.w	r2, r2, #8
 801a7e4:	619a      	str	r2, [r3, #24]
}
 801a7e6:	bf00      	nop
 801a7e8:	37b0      	adds	r7, #176	@ 0xb0
 801a7ea:	46bd      	mov	sp, r7
 801a7ec:	bd80      	pop	{r7, pc}
 801a7ee:	bf00      	nop
 801a7f0:	effffffe 	.word	0xeffffffe
 801a7f4:	58000c00 	.word	0x58000c00
 801a7f8:	0801a129 	.word	0x0801a129

0801a7fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a7fc:	b580      	push	{r7, lr}
 801a7fe:	b0ae      	sub	sp, #184	@ 0xb8
 801a800:	af00      	add	r7, sp, #0
 801a802:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a80a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	69db      	ldr	r3, [r3, #28]
 801a814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	689b      	ldr	r3, [r3, #8]
 801a828:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a832:	2b22      	cmp	r3, #34	@ 0x22
 801a834:	f040 8185 	bne.w	801ab42 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a83e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a842:	e128      	b.n	801aa96 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a84a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a856:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a85a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a85e:	4013      	ands	r3, r2
 801a860:	b29a      	uxth	r2, r3
 801a862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a866:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a86c:	1c9a      	adds	r2, r3, #2
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a878:	b29b      	uxth	r3, r3
 801a87a:	3b01      	subs	r3, #1
 801a87c:	b29a      	uxth	r2, r3
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	69db      	ldr	r3, [r3, #28]
 801a88a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a88e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a892:	f003 0307 	and.w	r3, r3, #7
 801a896:	2b00      	cmp	r3, #0
 801a898:	d053      	beq.n	801a942 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a89a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a89e:	f003 0301 	and.w	r3, r3, #1
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d011      	beq.n	801a8ca <UART_RxISR_16BIT_FIFOEN+0xce>
 801a8a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a8aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d00b      	beq.n	801a8ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	2201      	movs	r2, #1
 801a8b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8c0:	f043 0201 	orr.w	r2, r3, #1
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a8ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8ce:	f003 0302 	and.w	r3, r3, #2
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d011      	beq.n	801a8fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a8d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a8da:	f003 0301 	and.w	r3, r3, #1
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d00b      	beq.n	801a8fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	2202      	movs	r2, #2
 801a8e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8f0:	f043 0204 	orr.w	r2, r3, #4
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a8fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8fe:	f003 0304 	and.w	r3, r3, #4
 801a902:	2b00      	cmp	r3, #0
 801a904:	d011      	beq.n	801a92a <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a90a:	f003 0301 	and.w	r3, r3, #1
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d00b      	beq.n	801a92a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	2204      	movs	r2, #4
 801a918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a920:	f043 0202 	orr.w	r2, r3, #2
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a930:	2b00      	cmp	r3, #0
 801a932:	d006      	beq.n	801a942 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a934:	6878      	ldr	r0, [r7, #4]
 801a936:	f7fe f853 	bl	80189e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	2200      	movs	r2, #0
 801a93e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a948:	b29b      	uxth	r3, r3
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	f040 80a3 	bne.w	801aa96 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a958:	e853 3f00 	ldrex	r3, [r3]
 801a95c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a95e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	461a      	mov	r2, r3
 801a96e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a976:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a978:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a97a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a97e:	e841 2300 	strex	r3, r2, [r1]
 801a982:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a986:	2b00      	cmp	r3, #0
 801a988:	d1e2      	bne.n	801a950 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	3308      	adds	r3, #8
 801a990:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a994:	e853 3f00 	ldrex	r3, [r3]
 801a998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a99a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a99c:	4b6f      	ldr	r3, [pc, #444]	@ (801ab5c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a99e:	4013      	ands	r3, r2
 801a9a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	3308      	adds	r3, #8
 801a9aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a9ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a9b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a9b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a9b6:	e841 2300 	strex	r3, r2, [r1]
 801a9ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a9bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d1e3      	bne.n	801a98a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2220      	movs	r2, #32
 801a9c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	4a61      	ldr	r2, [pc, #388]	@ (801ab60 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	d021      	beq.n	801aa24 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d01a      	beq.n	801aa24 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a9f6:	e853 3f00 	ldrex	r3, [r3]
 801a9fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a9fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a9fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801aa02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	461a      	mov	r2, r3
 801aa0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801aa10:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aa12:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801aa16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa18:	e841 2300 	strex	r3, r2, [r1]
 801aa1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801aa1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d1e4      	bne.n	801a9ee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	d130      	bne.n	801aa8e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2200      	movs	r2, #0
 801aa30:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa3a:	e853 3f00 	ldrex	r3, [r3]
 801aa3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801aa40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa42:	f023 0310 	bic.w	r3, r3, #16
 801aa46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	461a      	mov	r2, r3
 801aa50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801aa54:	647b      	str	r3, [r7, #68]	@ 0x44
 801aa56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801aa5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa5c:	e841 2300 	strex	r3, r2, [r1]
 801aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801aa62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d1e4      	bne.n	801aa32 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	69db      	ldr	r3, [r3, #28]
 801aa6e:	f003 0310 	and.w	r3, r3, #16
 801aa72:	2b10      	cmp	r3, #16
 801aa74:	d103      	bne.n	801aa7e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2210      	movs	r2, #16
 801aa7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aa84:	4619      	mov	r1, r3
 801aa86:	6878      	ldr	r0, [r7, #4]
 801aa88:	f7fd ffb4 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801aa8c:	e00e      	b.n	801aaac <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801aa8e:	6878      	ldr	r0, [r7, #4]
 801aa90:	f7eb fd36 	bl	8006500 <HAL_UART_RxCpltCallback>
        break;
 801aa94:	e00a      	b.n	801aaac <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aa96:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d006      	beq.n	801aaac <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801aa9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801aaa2:	f003 0320 	and.w	r3, r3, #32
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	f47f aecc 	bne.w	801a844 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aab2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801aab6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d049      	beq.n	801ab52 <UART_RxISR_16BIT_FIFOEN+0x356>
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801aac4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d242      	bcs.n	801ab52 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	3308      	adds	r3, #8
 801aad2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aad6:	e853 3f00 	ldrex	r3, [r3]
 801aada:	623b      	str	r3, [r7, #32]
   return(result);
 801aadc:	6a3b      	ldr	r3, [r7, #32]
 801aade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801aae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	3308      	adds	r3, #8
 801aaec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801aaf0:	633a      	str	r2, [r7, #48]	@ 0x30
 801aaf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aaf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aaf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aaf8:	e841 2300 	strex	r3, r2, [r1]
 801aafc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801aafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d1e3      	bne.n	801aacc <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	4a17      	ldr	r2, [pc, #92]	@ (801ab64 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801ab08:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab10:	693b      	ldr	r3, [r7, #16]
 801ab12:	e853 3f00 	ldrex	r3, [r3]
 801ab16:	60fb      	str	r3, [r7, #12]
   return(result);
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	f043 0320 	orr.w	r3, r3, #32
 801ab1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	461a      	mov	r2, r3
 801ab28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ab2c:	61fb      	str	r3, [r7, #28]
 801ab2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab30:	69b9      	ldr	r1, [r7, #24]
 801ab32:	69fa      	ldr	r2, [r7, #28]
 801ab34:	e841 2300 	strex	r3, r2, [r1]
 801ab38:	617b      	str	r3, [r7, #20]
   return(result);
 801ab3a:	697b      	ldr	r3, [r7, #20]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d1e4      	bne.n	801ab0a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ab40:	e007      	b.n	801ab52 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	699a      	ldr	r2, [r3, #24]
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	f042 0208 	orr.w	r2, r2, #8
 801ab50:	619a      	str	r2, [r3, #24]
}
 801ab52:	bf00      	nop
 801ab54:	37b8      	adds	r7, #184	@ 0xb8
 801ab56:	46bd      	mov	sp, r7
 801ab58:	bd80      	pop	{r7, pc}
 801ab5a:	bf00      	nop
 801ab5c:	effffffe 	.word	0xeffffffe
 801ab60:	58000c00 	.word	0x58000c00
 801ab64:	0801a2e1 	.word	0x0801a2e1

0801ab68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ab68:	b480      	push	{r7}
 801ab6a:	b083      	sub	sp, #12
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ab70:	bf00      	nop
 801ab72:	370c      	adds	r7, #12
 801ab74:	46bd      	mov	sp, r7
 801ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7a:	4770      	bx	lr

0801ab7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801ab7c:	b480      	push	{r7}
 801ab7e:	b083      	sub	sp, #12
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801ab84:	bf00      	nop
 801ab86:	370c      	adds	r7, #12
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8e:	4770      	bx	lr

0801ab90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801ab90:	b480      	push	{r7}
 801ab92:	b083      	sub	sp, #12
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801ab98:	bf00      	nop
 801ab9a:	370c      	adds	r7, #12
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba2:	4770      	bx	lr

0801aba4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801aba4:	b480      	push	{r7}
 801aba6:	b085      	sub	sp, #20
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801abb2:	2b01      	cmp	r3, #1
 801abb4:	d101      	bne.n	801abba <HAL_UARTEx_DisableFifoMode+0x16>
 801abb6:	2302      	movs	r3, #2
 801abb8:	e027      	b.n	801ac0a <HAL_UARTEx_DisableFifoMode+0x66>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	2201      	movs	r2, #1
 801abbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2224      	movs	r2, #36	@ 0x24
 801abc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	681a      	ldr	r2, [r3, #0]
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	f022 0201 	bic.w	r2, r2, #1
 801abe0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801abe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	2200      	movs	r2, #0
 801abee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	68fa      	ldr	r2, [r7, #12]
 801abf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2220      	movs	r2, #32
 801abfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2200      	movs	r2, #0
 801ac04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac08:	2300      	movs	r3, #0
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3714      	adds	r7, #20
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac14:	4770      	bx	lr

0801ac16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac16:	b580      	push	{r7, lr}
 801ac18:	b084      	sub	sp, #16
 801ac1a:	af00      	add	r7, sp, #0
 801ac1c:	6078      	str	r0, [r7, #4]
 801ac1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ac26:	2b01      	cmp	r3, #1
 801ac28:	d101      	bne.n	801ac2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ac2a:	2302      	movs	r3, #2
 801ac2c:	e02d      	b.n	801ac8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	2201      	movs	r2, #1
 801ac32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	2224      	movs	r2, #36	@ 0x24
 801ac3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	681a      	ldr	r2, [r3, #0]
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	f022 0201 	bic.w	r2, r2, #1
 801ac54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	689b      	ldr	r3, [r3, #8]
 801ac5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	683a      	ldr	r2, [r7, #0]
 801ac66:	430a      	orrs	r2, r1
 801ac68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac6a:	6878      	ldr	r0, [r7, #4]
 801ac6c:	f000 f850 	bl	801ad10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	68fa      	ldr	r2, [r7, #12]
 801ac76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	2220      	movs	r2, #32
 801ac7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2200      	movs	r2, #0
 801ac84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac88:	2300      	movs	r3, #0
}
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	3710      	adds	r7, #16
 801ac8e:	46bd      	mov	sp, r7
 801ac90:	bd80      	pop	{r7, pc}

0801ac92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac92:	b580      	push	{r7, lr}
 801ac94:	b084      	sub	sp, #16
 801ac96:	af00      	add	r7, sp, #0
 801ac98:	6078      	str	r0, [r7, #4]
 801ac9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801aca2:	2b01      	cmp	r3, #1
 801aca4:	d101      	bne.n	801acaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801aca6:	2302      	movs	r3, #2
 801aca8:	e02d      	b.n	801ad06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	2201      	movs	r2, #1
 801acae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	2224      	movs	r2, #36	@ 0x24
 801acb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	681a      	ldr	r2, [r3, #0]
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	f022 0201 	bic.w	r2, r2, #1
 801acd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	689b      	ldr	r3, [r3, #8]
 801acd8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	683a      	ldr	r2, [r7, #0]
 801ace2:	430a      	orrs	r2, r1
 801ace4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ace6:	6878      	ldr	r0, [r7, #4]
 801ace8:	f000 f812 	bl	801ad10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	68fa      	ldr	r2, [r7, #12]
 801acf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	2220      	movs	r2, #32
 801acf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	2200      	movs	r2, #0
 801ad00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ad04:	2300      	movs	r3, #0
}
 801ad06:	4618      	mov	r0, r3
 801ad08:	3710      	adds	r7, #16
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	bd80      	pop	{r7, pc}
	...

0801ad10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ad10:	b480      	push	{r7}
 801ad12:	b085      	sub	sp, #20
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d108      	bne.n	801ad32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2201      	movs	r2, #1
 801ad24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2201      	movs	r2, #1
 801ad2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ad30:	e031      	b.n	801ad96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ad32:	2310      	movs	r3, #16
 801ad34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ad36:	2310      	movs	r3, #16
 801ad38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	689b      	ldr	r3, [r3, #8]
 801ad40:	0e5b      	lsrs	r3, r3, #25
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	f003 0307 	and.w	r3, r3, #7
 801ad48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	689b      	ldr	r3, [r3, #8]
 801ad50:	0f5b      	lsrs	r3, r3, #29
 801ad52:	b2db      	uxtb	r3, r3
 801ad54:	f003 0307 	and.w	r3, r3, #7
 801ad58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad5a:	7bbb      	ldrb	r3, [r7, #14]
 801ad5c:	7b3a      	ldrb	r2, [r7, #12]
 801ad5e:	4911      	ldr	r1, [pc, #68]	@ (801ada4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad60:	5c8a      	ldrb	r2, [r1, r2]
 801ad62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ad66:	7b3a      	ldrb	r2, [r7, #12]
 801ad68:	490f      	ldr	r1, [pc, #60]	@ (801ada8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad6c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad70:	b29a      	uxth	r2, r3
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad78:	7bfb      	ldrb	r3, [r7, #15]
 801ad7a:	7b7a      	ldrb	r2, [r7, #13]
 801ad7c:	4909      	ldr	r1, [pc, #36]	@ (801ada4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad7e:	5c8a      	ldrb	r2, [r1, r2]
 801ad80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ad84:	7b7a      	ldrb	r2, [r7, #13]
 801ad86:	4908      	ldr	r1, [pc, #32]	@ (801ada8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad8a:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad8e:	b29a      	uxth	r2, r3
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801ad96:	bf00      	nop
 801ad98:	3714      	adds	r7, #20
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada0:	4770      	bx	lr
 801ada2:	bf00      	nop
 801ada4:	0801ec04 	.word	0x0801ec04
 801ada8:	0801ec0c 	.word	0x0801ec0c

0801adac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801adb0:	4904      	ldr	r1, [pc, #16]	@ (801adc4 <MX_FATFS_Init+0x18>)
 801adb2:	4805      	ldr	r0, [pc, #20]	@ (801adc8 <MX_FATFS_Init+0x1c>)
 801adb4:	f003 f8d8 	bl	801df68 <FATFS_LinkDriver>
 801adb8:	4603      	mov	r3, r0
 801adba:	461a      	mov	r2, r3
 801adbc:	4b03      	ldr	r3, [pc, #12]	@ (801adcc <MX_FATFS_Init+0x20>)
 801adbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801adc0:	bf00      	nop
 801adc2:	bd80      	pop	{r7, pc}
 801adc4:	2400054c 	.word	0x2400054c
 801adc8:	24000014 	.word	0x24000014
 801adcc:	24000548 	.word	0x24000548

0801add0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801add0:	b480      	push	{r7}
 801add2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801add4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801add6:	4618      	mov	r0, r3
 801add8:	46bd      	mov	sp, r7
 801adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adde:	4770      	bx	lr

0801ade0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b082      	sub	sp, #8
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	4603      	mov	r3, r0
 801ade8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801adea:	79fb      	ldrb	r3, [r7, #7]
 801adec:	4618      	mov	r0, r3
 801adee:	f7e9 fc01 	bl	80045f4 <SD_disk_initialize>
 801adf2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801adf4:	4618      	mov	r0, r3
 801adf6:	3708      	adds	r7, #8
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}

0801adfc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b082      	sub	sp, #8
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	4603      	mov	r3, r0
 801ae04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801ae06:	79fb      	ldrb	r3, [r7, #7]
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f7e9 fcdf 	bl	80047cc <SD_disk_status>
 801ae0e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ae10:	4618      	mov	r0, r3
 801ae12:	3708      	adds	r7, #8
 801ae14:	46bd      	mov	sp, r7
 801ae16:	bd80      	pop	{r7, pc}

0801ae18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b084      	sub	sp, #16
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	60b9      	str	r1, [r7, #8]
 801ae20:	607a      	str	r2, [r7, #4]
 801ae22:	603b      	str	r3, [r7, #0]
 801ae24:	4603      	mov	r3, r0
 801ae26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801ae28:	7bf8      	ldrb	r0, [r7, #15]
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	687a      	ldr	r2, [r7, #4]
 801ae2e:	68b9      	ldr	r1, [r7, #8]
 801ae30:	f7e9 fce2 	bl	80047f8 <SD_disk_read>
 801ae34:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	3710      	adds	r7, #16
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	bd80      	pop	{r7, pc}

0801ae3e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801ae3e:	b580      	push	{r7, lr}
 801ae40:	b084      	sub	sp, #16
 801ae42:	af00      	add	r7, sp, #0
 801ae44:	60b9      	str	r1, [r7, #8]
 801ae46:	607a      	str	r2, [r7, #4]
 801ae48:	603b      	str	r3, [r7, #0]
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ae4e:	7bf8      	ldrb	r0, [r7, #15]
 801ae50:	683b      	ldr	r3, [r7, #0]
 801ae52:	687a      	ldr	r2, [r7, #4]
 801ae54:	68b9      	ldr	r1, [r7, #8]
 801ae56:	f7e9 fd39 	bl	80048cc <SD_disk_write>
 801ae5a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	3710      	adds	r7, #16
 801ae60:	46bd      	mov	sp, r7
 801ae62:	bd80      	pop	{r7, pc}

0801ae64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b082      	sub	sp, #8
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	603a      	str	r2, [r7, #0]
 801ae6e:	71fb      	strb	r3, [r7, #7]
 801ae70:	460b      	mov	r3, r1
 801ae72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801ae74:	79b9      	ldrb	r1, [r7, #6]
 801ae76:	79fb      	ldrb	r3, [r7, #7]
 801ae78:	683a      	ldr	r2, [r7, #0]
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	f7e9 fdaa 	bl	80049d4 <SD_disk_ioctl>
 801ae80:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	3708      	adds	r7, #8
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}
	...

0801ae8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b084      	sub	sp, #16
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	4603      	mov	r3, r0
 801ae94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801ae96:	79fb      	ldrb	r3, [r7, #7]
 801ae98:	4a08      	ldr	r2, [pc, #32]	@ (801aebc <disk_status+0x30>)
 801ae9a:	009b      	lsls	r3, r3, #2
 801ae9c:	4413      	add	r3, r2
 801ae9e:	685b      	ldr	r3, [r3, #4]
 801aea0:	685b      	ldr	r3, [r3, #4]
 801aea2:	79fa      	ldrb	r2, [r7, #7]
 801aea4:	4905      	ldr	r1, [pc, #20]	@ (801aebc <disk_status+0x30>)
 801aea6:	440a      	add	r2, r1
 801aea8:	7a12      	ldrb	r2, [r2, #8]
 801aeaa:	4610      	mov	r0, r2
 801aeac:	4798      	blx	r3
 801aeae:	4603      	mov	r3, r0
 801aeb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	3710      	adds	r7, #16
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	bd80      	pop	{r7, pc}
 801aebc:	24000768 	.word	0x24000768

0801aec0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b084      	sub	sp, #16
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	4603      	mov	r3, r0
 801aec8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801aeca:	2300      	movs	r3, #0
 801aecc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801aece:	79fb      	ldrb	r3, [r7, #7]
 801aed0:	4a0e      	ldr	r2, [pc, #56]	@ (801af0c <disk_initialize+0x4c>)
 801aed2:	5cd3      	ldrb	r3, [r2, r3]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d114      	bne.n	801af02 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801aed8:	79fb      	ldrb	r3, [r7, #7]
 801aeda:	4a0c      	ldr	r2, [pc, #48]	@ (801af0c <disk_initialize+0x4c>)
 801aedc:	009b      	lsls	r3, r3, #2
 801aede:	4413      	add	r3, r2
 801aee0:	685b      	ldr	r3, [r3, #4]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	79fa      	ldrb	r2, [r7, #7]
 801aee6:	4909      	ldr	r1, [pc, #36]	@ (801af0c <disk_initialize+0x4c>)
 801aee8:	440a      	add	r2, r1
 801aeea:	7a12      	ldrb	r2, [r2, #8]
 801aeec:	4610      	mov	r0, r2
 801aeee:	4798      	blx	r3
 801aef0:	4603      	mov	r3, r0
 801aef2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801aef4:	7bfb      	ldrb	r3, [r7, #15]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d103      	bne.n	801af02 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801aefa:	79fb      	ldrb	r3, [r7, #7]
 801aefc:	4a03      	ldr	r2, [pc, #12]	@ (801af0c <disk_initialize+0x4c>)
 801aefe:	2101      	movs	r1, #1
 801af00:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801af02:	7bfb      	ldrb	r3, [r7, #15]
}
 801af04:	4618      	mov	r0, r3
 801af06:	3710      	adds	r7, #16
 801af08:	46bd      	mov	sp, r7
 801af0a:	bd80      	pop	{r7, pc}
 801af0c:	24000768 	.word	0x24000768

0801af10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801af10:	b590      	push	{r4, r7, lr}
 801af12:	b087      	sub	sp, #28
 801af14:	af00      	add	r7, sp, #0
 801af16:	60b9      	str	r1, [r7, #8]
 801af18:	607a      	str	r2, [r7, #4]
 801af1a:	603b      	str	r3, [r7, #0]
 801af1c:	4603      	mov	r3, r0
 801af1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801af20:	7bfb      	ldrb	r3, [r7, #15]
 801af22:	4a0a      	ldr	r2, [pc, #40]	@ (801af4c <disk_read+0x3c>)
 801af24:	009b      	lsls	r3, r3, #2
 801af26:	4413      	add	r3, r2
 801af28:	685b      	ldr	r3, [r3, #4]
 801af2a:	689c      	ldr	r4, [r3, #8]
 801af2c:	7bfb      	ldrb	r3, [r7, #15]
 801af2e:	4a07      	ldr	r2, [pc, #28]	@ (801af4c <disk_read+0x3c>)
 801af30:	4413      	add	r3, r2
 801af32:	7a18      	ldrb	r0, [r3, #8]
 801af34:	683b      	ldr	r3, [r7, #0]
 801af36:	687a      	ldr	r2, [r7, #4]
 801af38:	68b9      	ldr	r1, [r7, #8]
 801af3a:	47a0      	blx	r4
 801af3c:	4603      	mov	r3, r0
 801af3e:	75fb      	strb	r3, [r7, #23]
  return res;
 801af40:	7dfb      	ldrb	r3, [r7, #23]
}
 801af42:	4618      	mov	r0, r3
 801af44:	371c      	adds	r7, #28
 801af46:	46bd      	mov	sp, r7
 801af48:	bd90      	pop	{r4, r7, pc}
 801af4a:	bf00      	nop
 801af4c:	24000768 	.word	0x24000768

0801af50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801af50:	b590      	push	{r4, r7, lr}
 801af52:	b087      	sub	sp, #28
 801af54:	af00      	add	r7, sp, #0
 801af56:	60b9      	str	r1, [r7, #8]
 801af58:	607a      	str	r2, [r7, #4]
 801af5a:	603b      	str	r3, [r7, #0]
 801af5c:	4603      	mov	r3, r0
 801af5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801af60:	7bfb      	ldrb	r3, [r7, #15]
 801af62:	4a0a      	ldr	r2, [pc, #40]	@ (801af8c <disk_write+0x3c>)
 801af64:	009b      	lsls	r3, r3, #2
 801af66:	4413      	add	r3, r2
 801af68:	685b      	ldr	r3, [r3, #4]
 801af6a:	68dc      	ldr	r4, [r3, #12]
 801af6c:	7bfb      	ldrb	r3, [r7, #15]
 801af6e:	4a07      	ldr	r2, [pc, #28]	@ (801af8c <disk_write+0x3c>)
 801af70:	4413      	add	r3, r2
 801af72:	7a18      	ldrb	r0, [r3, #8]
 801af74:	683b      	ldr	r3, [r7, #0]
 801af76:	687a      	ldr	r2, [r7, #4]
 801af78:	68b9      	ldr	r1, [r7, #8]
 801af7a:	47a0      	blx	r4
 801af7c:	4603      	mov	r3, r0
 801af7e:	75fb      	strb	r3, [r7, #23]
  return res;
 801af80:	7dfb      	ldrb	r3, [r7, #23]
}
 801af82:	4618      	mov	r0, r3
 801af84:	371c      	adds	r7, #28
 801af86:	46bd      	mov	sp, r7
 801af88:	bd90      	pop	{r4, r7, pc}
 801af8a:	bf00      	nop
 801af8c:	24000768 	.word	0x24000768

0801af90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b084      	sub	sp, #16
 801af94:	af00      	add	r7, sp, #0
 801af96:	4603      	mov	r3, r0
 801af98:	603a      	str	r2, [r7, #0]
 801af9a:	71fb      	strb	r3, [r7, #7]
 801af9c:	460b      	mov	r3, r1
 801af9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801afa0:	79fb      	ldrb	r3, [r7, #7]
 801afa2:	4a09      	ldr	r2, [pc, #36]	@ (801afc8 <disk_ioctl+0x38>)
 801afa4:	009b      	lsls	r3, r3, #2
 801afa6:	4413      	add	r3, r2
 801afa8:	685b      	ldr	r3, [r3, #4]
 801afaa:	691b      	ldr	r3, [r3, #16]
 801afac:	79fa      	ldrb	r2, [r7, #7]
 801afae:	4906      	ldr	r1, [pc, #24]	@ (801afc8 <disk_ioctl+0x38>)
 801afb0:	440a      	add	r2, r1
 801afb2:	7a10      	ldrb	r0, [r2, #8]
 801afb4:	79b9      	ldrb	r1, [r7, #6]
 801afb6:	683a      	ldr	r2, [r7, #0]
 801afb8:	4798      	blx	r3
 801afba:	4603      	mov	r3, r0
 801afbc:	73fb      	strb	r3, [r7, #15]
  return res;
 801afbe:	7bfb      	ldrb	r3, [r7, #15]
}
 801afc0:	4618      	mov	r0, r3
 801afc2:	3710      	adds	r7, #16
 801afc4:	46bd      	mov	sp, r7
 801afc6:	bd80      	pop	{r7, pc}
 801afc8:	24000768 	.word	0x24000768

0801afcc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801afcc:	b480      	push	{r7}
 801afce:	b085      	sub	sp, #20
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	3301      	adds	r3, #1
 801afd8:	781b      	ldrb	r3, [r3, #0]
 801afda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801afdc:	89fb      	ldrh	r3, [r7, #14]
 801afde:	021b      	lsls	r3, r3, #8
 801afe0:	b21a      	sxth	r2, r3
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	781b      	ldrb	r3, [r3, #0]
 801afe6:	b21b      	sxth	r3, r3
 801afe8:	4313      	orrs	r3, r2
 801afea:	b21b      	sxth	r3, r3
 801afec:	81fb      	strh	r3, [r7, #14]
	return rv;
 801afee:	89fb      	ldrh	r3, [r7, #14]
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	3714      	adds	r7, #20
 801aff4:	46bd      	mov	sp, r7
 801aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801affa:	4770      	bx	lr

0801affc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801affc:	b480      	push	{r7}
 801affe:	b085      	sub	sp, #20
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	3303      	adds	r3, #3
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	021b      	lsls	r3, r3, #8
 801b010:	687a      	ldr	r2, [r7, #4]
 801b012:	3202      	adds	r2, #2
 801b014:	7812      	ldrb	r2, [r2, #0]
 801b016:	4313      	orrs	r3, r2
 801b018:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	021b      	lsls	r3, r3, #8
 801b01e:	687a      	ldr	r2, [r7, #4]
 801b020:	3201      	adds	r2, #1
 801b022:	7812      	ldrb	r2, [r2, #0]
 801b024:	4313      	orrs	r3, r2
 801b026:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	021b      	lsls	r3, r3, #8
 801b02c:	687a      	ldr	r2, [r7, #4]
 801b02e:	7812      	ldrb	r2, [r2, #0]
 801b030:	4313      	orrs	r3, r2
 801b032:	60fb      	str	r3, [r7, #12]
	return rv;
 801b034:	68fb      	ldr	r3, [r7, #12]
}
 801b036:	4618      	mov	r0, r3
 801b038:	3714      	adds	r7, #20
 801b03a:	46bd      	mov	sp, r7
 801b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b040:	4770      	bx	lr

0801b042 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b042:	b480      	push	{r7}
 801b044:	b083      	sub	sp, #12
 801b046:	af00      	add	r7, sp, #0
 801b048:	6078      	str	r0, [r7, #4]
 801b04a:	460b      	mov	r3, r1
 801b04c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	1c5a      	adds	r2, r3, #1
 801b052:	607a      	str	r2, [r7, #4]
 801b054:	887a      	ldrh	r2, [r7, #2]
 801b056:	b2d2      	uxtb	r2, r2
 801b058:	701a      	strb	r2, [r3, #0]
 801b05a:	887b      	ldrh	r3, [r7, #2]
 801b05c:	0a1b      	lsrs	r3, r3, #8
 801b05e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	1c5a      	adds	r2, r3, #1
 801b064:	607a      	str	r2, [r7, #4]
 801b066:	887a      	ldrh	r2, [r7, #2]
 801b068:	b2d2      	uxtb	r2, r2
 801b06a:	701a      	strb	r2, [r3, #0]
}
 801b06c:	bf00      	nop
 801b06e:	370c      	adds	r7, #12
 801b070:	46bd      	mov	sp, r7
 801b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b076:	4770      	bx	lr

0801b078 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b078:	b480      	push	{r7}
 801b07a:	b083      	sub	sp, #12
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
 801b080:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	1c5a      	adds	r2, r3, #1
 801b086:	607a      	str	r2, [r7, #4]
 801b088:	683a      	ldr	r2, [r7, #0]
 801b08a:	b2d2      	uxtb	r2, r2
 801b08c:	701a      	strb	r2, [r3, #0]
 801b08e:	683b      	ldr	r3, [r7, #0]
 801b090:	0a1b      	lsrs	r3, r3, #8
 801b092:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	1c5a      	adds	r2, r3, #1
 801b098:	607a      	str	r2, [r7, #4]
 801b09a:	683a      	ldr	r2, [r7, #0]
 801b09c:	b2d2      	uxtb	r2, r2
 801b09e:	701a      	strb	r2, [r3, #0]
 801b0a0:	683b      	ldr	r3, [r7, #0]
 801b0a2:	0a1b      	lsrs	r3, r3, #8
 801b0a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	1c5a      	adds	r2, r3, #1
 801b0aa:	607a      	str	r2, [r7, #4]
 801b0ac:	683a      	ldr	r2, [r7, #0]
 801b0ae:	b2d2      	uxtb	r2, r2
 801b0b0:	701a      	strb	r2, [r3, #0]
 801b0b2:	683b      	ldr	r3, [r7, #0]
 801b0b4:	0a1b      	lsrs	r3, r3, #8
 801b0b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	1c5a      	adds	r2, r3, #1
 801b0bc:	607a      	str	r2, [r7, #4]
 801b0be:	683a      	ldr	r2, [r7, #0]
 801b0c0:	b2d2      	uxtb	r2, r2
 801b0c2:	701a      	strb	r2, [r3, #0]
}
 801b0c4:	bf00      	nop
 801b0c6:	370c      	adds	r7, #12
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ce:	4770      	bx	lr

0801b0d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b0d0:	b480      	push	{r7}
 801b0d2:	b087      	sub	sp, #28
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	60f8      	str	r0, [r7, #12]
 801b0d8:	60b9      	str	r1, [r7, #8]
 801b0da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d00d      	beq.n	801b106 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b0ea:	693a      	ldr	r2, [r7, #16]
 801b0ec:	1c53      	adds	r3, r2, #1
 801b0ee:	613b      	str	r3, [r7, #16]
 801b0f0:	697b      	ldr	r3, [r7, #20]
 801b0f2:	1c59      	adds	r1, r3, #1
 801b0f4:	6179      	str	r1, [r7, #20]
 801b0f6:	7812      	ldrb	r2, [r2, #0]
 801b0f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	3b01      	subs	r3, #1
 801b0fe:	607b      	str	r3, [r7, #4]
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d1f1      	bne.n	801b0ea <mem_cpy+0x1a>
	}
}
 801b106:	bf00      	nop
 801b108:	371c      	adds	r7, #28
 801b10a:	46bd      	mov	sp, r7
 801b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b110:	4770      	bx	lr

0801b112 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b112:	b480      	push	{r7}
 801b114:	b087      	sub	sp, #28
 801b116:	af00      	add	r7, sp, #0
 801b118:	60f8      	str	r0, [r7, #12]
 801b11a:	60b9      	str	r1, [r7, #8]
 801b11c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b122:	697b      	ldr	r3, [r7, #20]
 801b124:	1c5a      	adds	r2, r3, #1
 801b126:	617a      	str	r2, [r7, #20]
 801b128:	68ba      	ldr	r2, [r7, #8]
 801b12a:	b2d2      	uxtb	r2, r2
 801b12c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	3b01      	subs	r3, #1
 801b132:	607b      	str	r3, [r7, #4]
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d1f3      	bne.n	801b122 <mem_set+0x10>
}
 801b13a:	bf00      	nop
 801b13c:	bf00      	nop
 801b13e:	371c      	adds	r7, #28
 801b140:	46bd      	mov	sp, r7
 801b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b146:	4770      	bx	lr

0801b148 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b148:	b480      	push	{r7}
 801b14a:	b089      	sub	sp, #36	@ 0x24
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	60f8      	str	r0, [r7, #12]
 801b150:	60b9      	str	r1, [r7, #8]
 801b152:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	61fb      	str	r3, [r7, #28]
 801b158:	68bb      	ldr	r3, [r7, #8]
 801b15a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b15c:	2300      	movs	r3, #0
 801b15e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b160:	69fb      	ldr	r3, [r7, #28]
 801b162:	1c5a      	adds	r2, r3, #1
 801b164:	61fa      	str	r2, [r7, #28]
 801b166:	781b      	ldrb	r3, [r3, #0]
 801b168:	4619      	mov	r1, r3
 801b16a:	69bb      	ldr	r3, [r7, #24]
 801b16c:	1c5a      	adds	r2, r3, #1
 801b16e:	61ba      	str	r2, [r7, #24]
 801b170:	781b      	ldrb	r3, [r3, #0]
 801b172:	1acb      	subs	r3, r1, r3
 801b174:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	3b01      	subs	r3, #1
 801b17a:	607b      	str	r3, [r7, #4]
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d002      	beq.n	801b188 <mem_cmp+0x40>
 801b182:	697b      	ldr	r3, [r7, #20]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d0eb      	beq.n	801b160 <mem_cmp+0x18>

	return r;
 801b188:	697b      	ldr	r3, [r7, #20]
}
 801b18a:	4618      	mov	r0, r3
 801b18c:	3724      	adds	r7, #36	@ 0x24
 801b18e:	46bd      	mov	sp, r7
 801b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b194:	4770      	bx	lr

0801b196 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b196:	b480      	push	{r7}
 801b198:	b083      	sub	sp, #12
 801b19a:	af00      	add	r7, sp, #0
 801b19c:	6078      	str	r0, [r7, #4]
 801b19e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b1a0:	e002      	b.n	801b1a8 <chk_chr+0x12>
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	3301      	adds	r3, #1
 801b1a6:	607b      	str	r3, [r7, #4]
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d005      	beq.n	801b1bc <chk_chr+0x26>
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	781b      	ldrb	r3, [r3, #0]
 801b1b4:	461a      	mov	r2, r3
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	4293      	cmp	r3, r2
 801b1ba:	d1f2      	bne.n	801b1a2 <chk_chr+0xc>
	return *str;
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	781b      	ldrb	r3, [r3, #0]
}
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	370c      	adds	r7, #12
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ca:	4770      	bx	lr

0801b1cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b1cc:	b480      	push	{r7}
 801b1ce:	b085      	sub	sp, #20
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
 801b1d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	60bb      	str	r3, [r7, #8]
 801b1da:	68bb      	ldr	r3, [r7, #8]
 801b1dc:	60fb      	str	r3, [r7, #12]
 801b1de:	e029      	b.n	801b234 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b1e0:	4a27      	ldr	r2, [pc, #156]	@ (801b280 <chk_lock+0xb4>)
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	011b      	lsls	r3, r3, #4
 801b1e6:	4413      	add	r3, r2
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d01d      	beq.n	801b22a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b1ee:	4a24      	ldr	r2, [pc, #144]	@ (801b280 <chk_lock+0xb4>)
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	011b      	lsls	r3, r3, #4
 801b1f4:	4413      	add	r3, r2
 801b1f6:	681a      	ldr	r2, [r3, #0]
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	429a      	cmp	r2, r3
 801b1fe:	d116      	bne.n	801b22e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b200:	4a1f      	ldr	r2, [pc, #124]	@ (801b280 <chk_lock+0xb4>)
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	011b      	lsls	r3, r3, #4
 801b206:	4413      	add	r3, r2
 801b208:	3304      	adds	r3, #4
 801b20a:	681a      	ldr	r2, [r3, #0]
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b210:	429a      	cmp	r2, r3
 801b212:	d10c      	bne.n	801b22e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b214:	4a1a      	ldr	r2, [pc, #104]	@ (801b280 <chk_lock+0xb4>)
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	011b      	lsls	r3, r3, #4
 801b21a:	4413      	add	r3, r2
 801b21c:	3308      	adds	r3, #8
 801b21e:	681a      	ldr	r2, [r3, #0]
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b224:	429a      	cmp	r2, r3
 801b226:	d102      	bne.n	801b22e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b228:	e007      	b.n	801b23a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b22a:	2301      	movs	r3, #1
 801b22c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	3301      	adds	r3, #1
 801b232:	60fb      	str	r3, [r7, #12]
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d0d2      	beq.n	801b1e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	2b01      	cmp	r3, #1
 801b23e:	d109      	bne.n	801b254 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b240:	68bb      	ldr	r3, [r7, #8]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d102      	bne.n	801b24c <chk_lock+0x80>
 801b246:	683b      	ldr	r3, [r7, #0]
 801b248:	2b02      	cmp	r3, #2
 801b24a:	d101      	bne.n	801b250 <chk_lock+0x84>
 801b24c:	2300      	movs	r3, #0
 801b24e:	e010      	b.n	801b272 <chk_lock+0xa6>
 801b250:	2312      	movs	r3, #18
 801b252:	e00e      	b.n	801b272 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d108      	bne.n	801b26c <chk_lock+0xa0>
 801b25a:	4a09      	ldr	r2, [pc, #36]	@ (801b280 <chk_lock+0xb4>)
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	011b      	lsls	r3, r3, #4
 801b260:	4413      	add	r3, r2
 801b262:	330c      	adds	r3, #12
 801b264:	881b      	ldrh	r3, [r3, #0]
 801b266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b26a:	d101      	bne.n	801b270 <chk_lock+0xa4>
 801b26c:	2310      	movs	r3, #16
 801b26e:	e000      	b.n	801b272 <chk_lock+0xa6>
 801b270:	2300      	movs	r3, #0
}
 801b272:	4618      	mov	r0, r3
 801b274:	3714      	adds	r7, #20
 801b276:	46bd      	mov	sp, r7
 801b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27c:	4770      	bx	lr
 801b27e:	bf00      	nop
 801b280:	24000558 	.word	0x24000558

0801b284 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b284:	b480      	push	{r7}
 801b286:	b083      	sub	sp, #12
 801b288:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b28a:	2300      	movs	r3, #0
 801b28c:	607b      	str	r3, [r7, #4]
 801b28e:	e002      	b.n	801b296 <enq_lock+0x12>
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	3301      	adds	r3, #1
 801b294:	607b      	str	r3, [r7, #4]
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d106      	bne.n	801b2aa <enq_lock+0x26>
 801b29c:	4a09      	ldr	r2, [pc, #36]	@ (801b2c4 <enq_lock+0x40>)
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	011b      	lsls	r3, r3, #4
 801b2a2:	4413      	add	r3, r2
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d1f2      	bne.n	801b290 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	2b01      	cmp	r3, #1
 801b2ae:	bf14      	ite	ne
 801b2b0:	2301      	movne	r3, #1
 801b2b2:	2300      	moveq	r3, #0
 801b2b4:	b2db      	uxtb	r3, r3
}
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	370c      	adds	r7, #12
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c0:	4770      	bx	lr
 801b2c2:	bf00      	nop
 801b2c4:	24000558 	.word	0x24000558

0801b2c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b2c8:	b480      	push	{r7}
 801b2ca:	b085      	sub	sp, #20
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
 801b2d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	60fb      	str	r3, [r7, #12]
 801b2d6:	e01f      	b.n	801b318 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b2d8:	4a41      	ldr	r2, [pc, #260]	@ (801b3e0 <inc_lock+0x118>)
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	011b      	lsls	r3, r3, #4
 801b2de:	4413      	add	r3, r2
 801b2e0:	681a      	ldr	r2, [r3, #0]
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	429a      	cmp	r2, r3
 801b2e8:	d113      	bne.n	801b312 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b2ea:	4a3d      	ldr	r2, [pc, #244]	@ (801b3e0 <inc_lock+0x118>)
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	011b      	lsls	r3, r3, #4
 801b2f0:	4413      	add	r3, r2
 801b2f2:	3304      	adds	r3, #4
 801b2f4:	681a      	ldr	r2, [r3, #0]
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b2fa:	429a      	cmp	r2, r3
 801b2fc:	d109      	bne.n	801b312 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b2fe:	4a38      	ldr	r2, [pc, #224]	@ (801b3e0 <inc_lock+0x118>)
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	011b      	lsls	r3, r3, #4
 801b304:	4413      	add	r3, r2
 801b306:	3308      	adds	r3, #8
 801b308:	681a      	ldr	r2, [r3, #0]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b30e:	429a      	cmp	r2, r3
 801b310:	d006      	beq.n	801b320 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	3301      	adds	r3, #1
 801b316:	60fb      	str	r3, [r7, #12]
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d0dc      	beq.n	801b2d8 <inc_lock+0x10>
 801b31e:	e000      	b.n	801b322 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b320:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	2b01      	cmp	r3, #1
 801b326:	d132      	bne.n	801b38e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b328:	2300      	movs	r3, #0
 801b32a:	60fb      	str	r3, [r7, #12]
 801b32c:	e002      	b.n	801b334 <inc_lock+0x6c>
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	3301      	adds	r3, #1
 801b332:	60fb      	str	r3, [r7, #12]
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d106      	bne.n	801b348 <inc_lock+0x80>
 801b33a:	4a29      	ldr	r2, [pc, #164]	@ (801b3e0 <inc_lock+0x118>)
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	011b      	lsls	r3, r3, #4
 801b340:	4413      	add	r3, r2
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d1f2      	bne.n	801b32e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	2b01      	cmp	r3, #1
 801b34c:	d101      	bne.n	801b352 <inc_lock+0x8a>
 801b34e:	2300      	movs	r3, #0
 801b350:	e040      	b.n	801b3d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	681a      	ldr	r2, [r3, #0]
 801b356:	4922      	ldr	r1, [pc, #136]	@ (801b3e0 <inc_lock+0x118>)
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	011b      	lsls	r3, r3, #4
 801b35c:	440b      	add	r3, r1
 801b35e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	689a      	ldr	r2, [r3, #8]
 801b364:	491e      	ldr	r1, [pc, #120]	@ (801b3e0 <inc_lock+0x118>)
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	011b      	lsls	r3, r3, #4
 801b36a:	440b      	add	r3, r1
 801b36c:	3304      	adds	r3, #4
 801b36e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	695a      	ldr	r2, [r3, #20]
 801b374:	491a      	ldr	r1, [pc, #104]	@ (801b3e0 <inc_lock+0x118>)
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	011b      	lsls	r3, r3, #4
 801b37a:	440b      	add	r3, r1
 801b37c:	3308      	adds	r3, #8
 801b37e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b380:	4a17      	ldr	r2, [pc, #92]	@ (801b3e0 <inc_lock+0x118>)
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	011b      	lsls	r3, r3, #4
 801b386:	4413      	add	r3, r2
 801b388:	330c      	adds	r3, #12
 801b38a:	2200      	movs	r2, #0
 801b38c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d009      	beq.n	801b3a8 <inc_lock+0xe0>
 801b394:	4a12      	ldr	r2, [pc, #72]	@ (801b3e0 <inc_lock+0x118>)
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	011b      	lsls	r3, r3, #4
 801b39a:	4413      	add	r3, r2
 801b39c:	330c      	adds	r3, #12
 801b39e:	881b      	ldrh	r3, [r3, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d001      	beq.n	801b3a8 <inc_lock+0xe0>
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	e015      	b.n	801b3d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b3a8:	683b      	ldr	r3, [r7, #0]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d108      	bne.n	801b3c0 <inc_lock+0xf8>
 801b3ae:	4a0c      	ldr	r2, [pc, #48]	@ (801b3e0 <inc_lock+0x118>)
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	011b      	lsls	r3, r3, #4
 801b3b4:	4413      	add	r3, r2
 801b3b6:	330c      	adds	r3, #12
 801b3b8:	881b      	ldrh	r3, [r3, #0]
 801b3ba:	3301      	adds	r3, #1
 801b3bc:	b29a      	uxth	r2, r3
 801b3be:	e001      	b.n	801b3c4 <inc_lock+0xfc>
 801b3c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b3c4:	4906      	ldr	r1, [pc, #24]	@ (801b3e0 <inc_lock+0x118>)
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	011b      	lsls	r3, r3, #4
 801b3ca:	440b      	add	r3, r1
 801b3cc:	330c      	adds	r3, #12
 801b3ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	3301      	adds	r3, #1
}
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	3714      	adds	r7, #20
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3de:	4770      	bx	lr
 801b3e0:	24000558 	.word	0x24000558

0801b3e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b3e4:	b480      	push	{r7}
 801b3e6:	b085      	sub	sp, #20
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	3b01      	subs	r3, #1
 801b3f0:	607b      	str	r3, [r7, #4]
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d125      	bne.n	801b444 <dec_lock+0x60>
		n = Files[i].ctr;
 801b3f8:	4a17      	ldr	r2, [pc, #92]	@ (801b458 <dec_lock+0x74>)
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	011b      	lsls	r3, r3, #4
 801b3fe:	4413      	add	r3, r2
 801b400:	330c      	adds	r3, #12
 801b402:	881b      	ldrh	r3, [r3, #0]
 801b404:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b406:	89fb      	ldrh	r3, [r7, #14]
 801b408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b40c:	d101      	bne.n	801b412 <dec_lock+0x2e>
 801b40e:	2300      	movs	r3, #0
 801b410:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b412:	89fb      	ldrh	r3, [r7, #14]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d002      	beq.n	801b41e <dec_lock+0x3a>
 801b418:	89fb      	ldrh	r3, [r7, #14]
 801b41a:	3b01      	subs	r3, #1
 801b41c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b41e:	4a0e      	ldr	r2, [pc, #56]	@ (801b458 <dec_lock+0x74>)
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	011b      	lsls	r3, r3, #4
 801b424:	4413      	add	r3, r2
 801b426:	330c      	adds	r3, #12
 801b428:	89fa      	ldrh	r2, [r7, #14]
 801b42a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b42c:	89fb      	ldrh	r3, [r7, #14]
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d105      	bne.n	801b43e <dec_lock+0x5a>
 801b432:	4a09      	ldr	r2, [pc, #36]	@ (801b458 <dec_lock+0x74>)
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	011b      	lsls	r3, r3, #4
 801b438:	4413      	add	r3, r2
 801b43a:	2200      	movs	r2, #0
 801b43c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b43e:	2300      	movs	r3, #0
 801b440:	737b      	strb	r3, [r7, #13]
 801b442:	e001      	b.n	801b448 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b444:	2302      	movs	r3, #2
 801b446:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b448:	7b7b      	ldrb	r3, [r7, #13]
}
 801b44a:	4618      	mov	r0, r3
 801b44c:	3714      	adds	r7, #20
 801b44e:	46bd      	mov	sp, r7
 801b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b454:	4770      	bx	lr
 801b456:	bf00      	nop
 801b458:	24000558 	.word	0x24000558

0801b45c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b45c:	b480      	push	{r7}
 801b45e:	b085      	sub	sp, #20
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b464:	2300      	movs	r3, #0
 801b466:	60fb      	str	r3, [r7, #12]
 801b468:	e010      	b.n	801b48c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b46a:	4a0d      	ldr	r2, [pc, #52]	@ (801b4a0 <clear_lock+0x44>)
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	011b      	lsls	r3, r3, #4
 801b470:	4413      	add	r3, r2
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	687a      	ldr	r2, [r7, #4]
 801b476:	429a      	cmp	r2, r3
 801b478:	d105      	bne.n	801b486 <clear_lock+0x2a>
 801b47a:	4a09      	ldr	r2, [pc, #36]	@ (801b4a0 <clear_lock+0x44>)
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	011b      	lsls	r3, r3, #4
 801b480:	4413      	add	r3, r2
 801b482:	2200      	movs	r2, #0
 801b484:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	3301      	adds	r3, #1
 801b48a:	60fb      	str	r3, [r7, #12]
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d0eb      	beq.n	801b46a <clear_lock+0xe>
	}
}
 801b492:	bf00      	nop
 801b494:	bf00      	nop
 801b496:	3714      	adds	r7, #20
 801b498:	46bd      	mov	sp, r7
 801b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b49e:	4770      	bx	lr
 801b4a0:	24000558 	.word	0x24000558

0801b4a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b086      	sub	sp, #24
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b4ac:	2300      	movs	r3, #0
 801b4ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	78db      	ldrb	r3, [r3, #3]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d034      	beq.n	801b522 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	7858      	ldrb	r0, [r3, #1]
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4c8:	2301      	movs	r3, #1
 801b4ca:	697a      	ldr	r2, [r7, #20]
 801b4cc:	f7ff fd40 	bl	801af50 <disk_write>
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d002      	beq.n	801b4dc <sync_window+0x38>
			res = FR_DISK_ERR;
 801b4d6:	2301      	movs	r3, #1
 801b4d8:	73fb      	strb	r3, [r7, #15]
 801b4da:	e022      	b.n	801b522 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	2200      	movs	r2, #0
 801b4e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4e6:	697a      	ldr	r2, [r7, #20]
 801b4e8:	1ad2      	subs	r2, r2, r3
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	6a1b      	ldr	r3, [r3, #32]
 801b4ee:	429a      	cmp	r2, r3
 801b4f0:	d217      	bcs.n	801b522 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	789b      	ldrb	r3, [r3, #2]
 801b4f6:	613b      	str	r3, [r7, #16]
 801b4f8:	e010      	b.n	801b51c <sync_window+0x78>
					wsect += fs->fsize;
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6a1b      	ldr	r3, [r3, #32]
 801b4fe:	697a      	ldr	r2, [r7, #20]
 801b500:	4413      	add	r3, r2
 801b502:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	7858      	ldrb	r0, [r3, #1]
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b50e:	2301      	movs	r3, #1
 801b510:	697a      	ldr	r2, [r7, #20]
 801b512:	f7ff fd1d 	bl	801af50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b516:	693b      	ldr	r3, [r7, #16]
 801b518:	3b01      	subs	r3, #1
 801b51a:	613b      	str	r3, [r7, #16]
 801b51c:	693b      	ldr	r3, [r7, #16]
 801b51e:	2b01      	cmp	r3, #1
 801b520:	d8eb      	bhi.n	801b4fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b522:	7bfb      	ldrb	r3, [r7, #15]
}
 801b524:	4618      	mov	r0, r3
 801b526:	3718      	adds	r7, #24
 801b528:	46bd      	mov	sp, r7
 801b52a:	bd80      	pop	{r7, pc}

0801b52c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b084      	sub	sp, #16
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
 801b534:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b536:	2300      	movs	r3, #0
 801b538:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b53e:	683a      	ldr	r2, [r7, #0]
 801b540:	429a      	cmp	r2, r3
 801b542:	d01b      	beq.n	801b57c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b544:	6878      	ldr	r0, [r7, #4]
 801b546:	f7ff ffad 	bl	801b4a4 <sync_window>
 801b54a:	4603      	mov	r3, r0
 801b54c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b54e:	7bfb      	ldrb	r3, [r7, #15]
 801b550:	2b00      	cmp	r3, #0
 801b552:	d113      	bne.n	801b57c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	7858      	ldrb	r0, [r3, #1]
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b55e:	2301      	movs	r3, #1
 801b560:	683a      	ldr	r2, [r7, #0]
 801b562:	f7ff fcd5 	bl	801af10 <disk_read>
 801b566:	4603      	mov	r3, r0
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d004      	beq.n	801b576 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b56c:	f04f 33ff 	mov.w	r3, #4294967295
 801b570:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b572:	2301      	movs	r3, #1
 801b574:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	683a      	ldr	r2, [r7, #0]
 801b57a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b57e:	4618      	mov	r0, r3
 801b580:	3710      	adds	r7, #16
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}
	...

0801b588 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b084      	sub	sp, #16
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b590:	6878      	ldr	r0, [r7, #4]
 801b592:	f7ff ff87 	bl	801b4a4 <sync_window>
 801b596:	4603      	mov	r3, r0
 801b598:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b59a:	7bfb      	ldrb	r3, [r7, #15]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d159      	bne.n	801b654 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	2b03      	cmp	r3, #3
 801b5a6:	d149      	bne.n	801b63c <sync_fs+0xb4>
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	791b      	ldrb	r3, [r3, #4]
 801b5ac:	2b01      	cmp	r3, #1
 801b5ae:	d145      	bne.n	801b63c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	899b      	ldrh	r3, [r3, #12]
 801b5ba:	461a      	mov	r2, r3
 801b5bc:	2100      	movs	r1, #0
 801b5be:	f7ff fda8 	bl	801b112 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	3338      	adds	r3, #56	@ 0x38
 801b5c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b5ca:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7ff fd37 	bl	801b042 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	3338      	adds	r3, #56	@ 0x38
 801b5d8:	4921      	ldr	r1, [pc, #132]	@ (801b660 <sync_fs+0xd8>)
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7ff fd4c 	bl	801b078 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	3338      	adds	r3, #56	@ 0x38
 801b5e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b5e8:	491e      	ldr	r1, [pc, #120]	@ (801b664 <sync_fs+0xdc>)
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7ff fd44 	bl	801b078 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	3338      	adds	r3, #56	@ 0x38
 801b5f4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	699b      	ldr	r3, [r3, #24]
 801b5fc:	4619      	mov	r1, r3
 801b5fe:	4610      	mov	r0, r2
 801b600:	f7ff fd3a 	bl	801b078 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	3338      	adds	r3, #56	@ 0x38
 801b608:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	695b      	ldr	r3, [r3, #20]
 801b610:	4619      	mov	r1, r3
 801b612:	4610      	mov	r0, r2
 801b614:	f7ff fd30 	bl	801b078 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b61c:	1c5a      	adds	r2, r3, #1
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	7858      	ldrb	r0, [r3, #1]
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b630:	2301      	movs	r3, #1
 801b632:	f7ff fc8d 	bl	801af50 <disk_write>
			fs->fsi_flag = 0;
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	2200      	movs	r2, #0
 801b63a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	785b      	ldrb	r3, [r3, #1]
 801b640:	2200      	movs	r2, #0
 801b642:	2100      	movs	r1, #0
 801b644:	4618      	mov	r0, r3
 801b646:	f7ff fca3 	bl	801af90 <disk_ioctl>
 801b64a:	4603      	mov	r3, r0
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d001      	beq.n	801b654 <sync_fs+0xcc>
 801b650:	2301      	movs	r3, #1
 801b652:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b654:	7bfb      	ldrb	r3, [r7, #15]
}
 801b656:	4618      	mov	r0, r3
 801b658:	3710      	adds	r7, #16
 801b65a:	46bd      	mov	sp, r7
 801b65c:	bd80      	pop	{r7, pc}
 801b65e:	bf00      	nop
 801b660:	41615252 	.word	0x41615252
 801b664:	61417272 	.word	0x61417272

0801b668 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b668:	b480      	push	{r7}
 801b66a:	b083      	sub	sp, #12
 801b66c:	af00      	add	r7, sp, #0
 801b66e:	6078      	str	r0, [r7, #4]
 801b670:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b672:	683b      	ldr	r3, [r7, #0]
 801b674:	3b02      	subs	r3, #2
 801b676:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	69db      	ldr	r3, [r3, #28]
 801b67c:	3b02      	subs	r3, #2
 801b67e:	683a      	ldr	r2, [r7, #0]
 801b680:	429a      	cmp	r2, r3
 801b682:	d301      	bcc.n	801b688 <clust2sect+0x20>
 801b684:	2300      	movs	r3, #0
 801b686:	e008      	b.n	801b69a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	895b      	ldrh	r3, [r3, #10]
 801b68c:	461a      	mov	r2, r3
 801b68e:	683b      	ldr	r3, [r7, #0]
 801b690:	fb03 f202 	mul.w	r2, r3, r2
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b698:	4413      	add	r3, r2
}
 801b69a:	4618      	mov	r0, r3
 801b69c:	370c      	adds	r7, #12
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a4:	4770      	bx	lr

0801b6a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b6a6:	b580      	push	{r7, lr}
 801b6a8:	b086      	sub	sp, #24
 801b6aa:	af00      	add	r7, sp, #0
 801b6ac:	6078      	str	r0, [r7, #4]
 801b6ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b6b6:	683b      	ldr	r3, [r7, #0]
 801b6b8:	2b01      	cmp	r3, #1
 801b6ba:	d904      	bls.n	801b6c6 <get_fat+0x20>
 801b6bc:	693b      	ldr	r3, [r7, #16]
 801b6be:	69db      	ldr	r3, [r3, #28]
 801b6c0:	683a      	ldr	r2, [r7, #0]
 801b6c2:	429a      	cmp	r2, r3
 801b6c4:	d302      	bcc.n	801b6cc <get_fat+0x26>
		val = 1;	/* Internal error */
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	617b      	str	r3, [r7, #20]
 801b6ca:	e0ba      	b.n	801b842 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b6cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b6d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b6d2:	693b      	ldr	r3, [r7, #16]
 801b6d4:	781b      	ldrb	r3, [r3, #0]
 801b6d6:	2b03      	cmp	r3, #3
 801b6d8:	f000 8082 	beq.w	801b7e0 <get_fat+0x13a>
 801b6dc:	2b03      	cmp	r3, #3
 801b6de:	f300 80a6 	bgt.w	801b82e <get_fat+0x188>
 801b6e2:	2b01      	cmp	r3, #1
 801b6e4:	d002      	beq.n	801b6ec <get_fat+0x46>
 801b6e6:	2b02      	cmp	r3, #2
 801b6e8:	d055      	beq.n	801b796 <get_fat+0xf0>
 801b6ea:	e0a0      	b.n	801b82e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b6ec:	683b      	ldr	r3, [r7, #0]
 801b6ee:	60fb      	str	r3, [r7, #12]
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	085b      	lsrs	r3, r3, #1
 801b6f4:	68fa      	ldr	r2, [r7, #12]
 801b6f6:	4413      	add	r3, r2
 801b6f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b6fa:	693b      	ldr	r3, [r7, #16]
 801b6fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b6fe:	693b      	ldr	r3, [r7, #16]
 801b700:	899b      	ldrh	r3, [r3, #12]
 801b702:	4619      	mov	r1, r3
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	fbb3 f3f1 	udiv	r3, r3, r1
 801b70a:	4413      	add	r3, r2
 801b70c:	4619      	mov	r1, r3
 801b70e:	6938      	ldr	r0, [r7, #16]
 801b710:	f7ff ff0c 	bl	801b52c <move_window>
 801b714:	4603      	mov	r3, r0
 801b716:	2b00      	cmp	r3, #0
 801b718:	f040 808c 	bne.w	801b834 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	1c5a      	adds	r2, r3, #1
 801b720:	60fa      	str	r2, [r7, #12]
 801b722:	693a      	ldr	r2, [r7, #16]
 801b724:	8992      	ldrh	r2, [r2, #12]
 801b726:	fbb3 f1f2 	udiv	r1, r3, r2
 801b72a:	fb01 f202 	mul.w	r2, r1, r2
 801b72e:	1a9b      	subs	r3, r3, r2
 801b730:	693a      	ldr	r2, [r7, #16]
 801b732:	4413      	add	r3, r2
 801b734:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b738:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b73a:	693b      	ldr	r3, [r7, #16]
 801b73c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b73e:	693b      	ldr	r3, [r7, #16]
 801b740:	899b      	ldrh	r3, [r3, #12]
 801b742:	4619      	mov	r1, r3
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	fbb3 f3f1 	udiv	r3, r3, r1
 801b74a:	4413      	add	r3, r2
 801b74c:	4619      	mov	r1, r3
 801b74e:	6938      	ldr	r0, [r7, #16]
 801b750:	f7ff feec 	bl	801b52c <move_window>
 801b754:	4603      	mov	r3, r0
 801b756:	2b00      	cmp	r3, #0
 801b758:	d16e      	bne.n	801b838 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b75a:	693b      	ldr	r3, [r7, #16]
 801b75c:	899b      	ldrh	r3, [r3, #12]
 801b75e:	461a      	mov	r2, r3
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	fbb3 f1f2 	udiv	r1, r3, r2
 801b766:	fb01 f202 	mul.w	r2, r1, r2
 801b76a:	1a9b      	subs	r3, r3, r2
 801b76c:	693a      	ldr	r2, [r7, #16]
 801b76e:	4413      	add	r3, r2
 801b770:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b774:	021b      	lsls	r3, r3, #8
 801b776:	68ba      	ldr	r2, [r7, #8]
 801b778:	4313      	orrs	r3, r2
 801b77a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	f003 0301 	and.w	r3, r3, #1
 801b782:	2b00      	cmp	r3, #0
 801b784:	d002      	beq.n	801b78c <get_fat+0xe6>
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	091b      	lsrs	r3, r3, #4
 801b78a:	e002      	b.n	801b792 <get_fat+0xec>
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b792:	617b      	str	r3, [r7, #20]
			break;
 801b794:	e055      	b.n	801b842 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b796:	693b      	ldr	r3, [r7, #16]
 801b798:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b79a:	693b      	ldr	r3, [r7, #16]
 801b79c:	899b      	ldrh	r3, [r3, #12]
 801b79e:	085b      	lsrs	r3, r3, #1
 801b7a0:	b29b      	uxth	r3, r3
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	683b      	ldr	r3, [r7, #0]
 801b7a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7aa:	4413      	add	r3, r2
 801b7ac:	4619      	mov	r1, r3
 801b7ae:	6938      	ldr	r0, [r7, #16]
 801b7b0:	f7ff febc 	bl	801b52c <move_window>
 801b7b4:	4603      	mov	r3, r0
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d140      	bne.n	801b83c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b7ba:	693b      	ldr	r3, [r7, #16]
 801b7bc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b7c0:	683b      	ldr	r3, [r7, #0]
 801b7c2:	005b      	lsls	r3, r3, #1
 801b7c4:	693a      	ldr	r2, [r7, #16]
 801b7c6:	8992      	ldrh	r2, [r2, #12]
 801b7c8:	fbb3 f0f2 	udiv	r0, r3, r2
 801b7cc:	fb00 f202 	mul.w	r2, r0, r2
 801b7d0:	1a9b      	subs	r3, r3, r2
 801b7d2:	440b      	add	r3, r1
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	f7ff fbf9 	bl	801afcc <ld_word>
 801b7da:	4603      	mov	r3, r0
 801b7dc:	617b      	str	r3, [r7, #20]
			break;
 801b7de:	e030      	b.n	801b842 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b7e0:	693b      	ldr	r3, [r7, #16]
 801b7e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b7e4:	693b      	ldr	r3, [r7, #16]
 801b7e6:	899b      	ldrh	r3, [r3, #12]
 801b7e8:	089b      	lsrs	r3, r3, #2
 801b7ea:	b29b      	uxth	r3, r3
 801b7ec:	4619      	mov	r1, r3
 801b7ee:	683b      	ldr	r3, [r7, #0]
 801b7f0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7f4:	4413      	add	r3, r2
 801b7f6:	4619      	mov	r1, r3
 801b7f8:	6938      	ldr	r0, [r7, #16]
 801b7fa:	f7ff fe97 	bl	801b52c <move_window>
 801b7fe:	4603      	mov	r3, r0
 801b800:	2b00      	cmp	r3, #0
 801b802:	d11d      	bne.n	801b840 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b804:	693b      	ldr	r3, [r7, #16]
 801b806:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b80a:	683b      	ldr	r3, [r7, #0]
 801b80c:	009b      	lsls	r3, r3, #2
 801b80e:	693a      	ldr	r2, [r7, #16]
 801b810:	8992      	ldrh	r2, [r2, #12]
 801b812:	fbb3 f0f2 	udiv	r0, r3, r2
 801b816:	fb00 f202 	mul.w	r2, r0, r2
 801b81a:	1a9b      	subs	r3, r3, r2
 801b81c:	440b      	add	r3, r1
 801b81e:	4618      	mov	r0, r3
 801b820:	f7ff fbec 	bl	801affc <ld_dword>
 801b824:	4603      	mov	r3, r0
 801b826:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b82a:	617b      	str	r3, [r7, #20]
			break;
 801b82c:	e009      	b.n	801b842 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b82e:	2301      	movs	r3, #1
 801b830:	617b      	str	r3, [r7, #20]
 801b832:	e006      	b.n	801b842 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b834:	bf00      	nop
 801b836:	e004      	b.n	801b842 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b838:	bf00      	nop
 801b83a:	e002      	b.n	801b842 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b83c:	bf00      	nop
 801b83e:	e000      	b.n	801b842 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b840:	bf00      	nop
		}
	}

	return val;
 801b842:	697b      	ldr	r3, [r7, #20]
}
 801b844:	4618      	mov	r0, r3
 801b846:	3718      	adds	r7, #24
 801b848:	46bd      	mov	sp, r7
 801b84a:	bd80      	pop	{r7, pc}

0801b84c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b84c:	b590      	push	{r4, r7, lr}
 801b84e:	b089      	sub	sp, #36	@ 0x24
 801b850:	af00      	add	r7, sp, #0
 801b852:	60f8      	str	r0, [r7, #12]
 801b854:	60b9      	str	r1, [r7, #8]
 801b856:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b858:	2302      	movs	r3, #2
 801b85a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b85c:	68bb      	ldr	r3, [r7, #8]
 801b85e:	2b01      	cmp	r3, #1
 801b860:	f240 8109 	bls.w	801ba76 <put_fat+0x22a>
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	69db      	ldr	r3, [r3, #28]
 801b868:	68ba      	ldr	r2, [r7, #8]
 801b86a:	429a      	cmp	r2, r3
 801b86c:	f080 8103 	bcs.w	801ba76 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	781b      	ldrb	r3, [r3, #0]
 801b874:	2b03      	cmp	r3, #3
 801b876:	f000 80b6 	beq.w	801b9e6 <put_fat+0x19a>
 801b87a:	2b03      	cmp	r3, #3
 801b87c:	f300 80fb 	bgt.w	801ba76 <put_fat+0x22a>
 801b880:	2b01      	cmp	r3, #1
 801b882:	d003      	beq.n	801b88c <put_fat+0x40>
 801b884:	2b02      	cmp	r3, #2
 801b886:	f000 8083 	beq.w	801b990 <put_fat+0x144>
 801b88a:	e0f4      	b.n	801ba76 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b88c:	68bb      	ldr	r3, [r7, #8]
 801b88e:	61bb      	str	r3, [r7, #24]
 801b890:	69bb      	ldr	r3, [r7, #24]
 801b892:	085b      	lsrs	r3, r3, #1
 801b894:	69ba      	ldr	r2, [r7, #24]
 801b896:	4413      	add	r3, r2
 801b898:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	899b      	ldrh	r3, [r3, #12]
 801b8a2:	4619      	mov	r1, r3
 801b8a4:	69bb      	ldr	r3, [r7, #24]
 801b8a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8aa:	4413      	add	r3, r2
 801b8ac:	4619      	mov	r1, r3
 801b8ae:	68f8      	ldr	r0, [r7, #12]
 801b8b0:	f7ff fe3c 	bl	801b52c <move_window>
 801b8b4:	4603      	mov	r3, r0
 801b8b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b8b8:	7ffb      	ldrb	r3, [r7, #31]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	f040 80d4 	bne.w	801ba68 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b8c6:	69bb      	ldr	r3, [r7, #24]
 801b8c8:	1c5a      	adds	r2, r3, #1
 801b8ca:	61ba      	str	r2, [r7, #24]
 801b8cc:	68fa      	ldr	r2, [r7, #12]
 801b8ce:	8992      	ldrh	r2, [r2, #12]
 801b8d0:	fbb3 f0f2 	udiv	r0, r3, r2
 801b8d4:	fb00 f202 	mul.w	r2, r0, r2
 801b8d8:	1a9b      	subs	r3, r3, r2
 801b8da:	440b      	add	r3, r1
 801b8dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b8de:	68bb      	ldr	r3, [r7, #8]
 801b8e0:	f003 0301 	and.w	r3, r3, #1
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d00d      	beq.n	801b904 <put_fat+0xb8>
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	781b      	ldrb	r3, [r3, #0]
 801b8ec:	b25b      	sxtb	r3, r3
 801b8ee:	f003 030f 	and.w	r3, r3, #15
 801b8f2:	b25a      	sxtb	r2, r3
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	b2db      	uxtb	r3, r3
 801b8f8:	011b      	lsls	r3, r3, #4
 801b8fa:	b25b      	sxtb	r3, r3
 801b8fc:	4313      	orrs	r3, r2
 801b8fe:	b25b      	sxtb	r3, r3
 801b900:	b2db      	uxtb	r3, r3
 801b902:	e001      	b.n	801b908 <put_fat+0xbc>
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	b2db      	uxtb	r3, r3
 801b908:	697a      	ldr	r2, [r7, #20]
 801b90a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	2201      	movs	r2, #1
 801b910:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	899b      	ldrh	r3, [r3, #12]
 801b91a:	4619      	mov	r1, r3
 801b91c:	69bb      	ldr	r3, [r7, #24]
 801b91e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b922:	4413      	add	r3, r2
 801b924:	4619      	mov	r1, r3
 801b926:	68f8      	ldr	r0, [r7, #12]
 801b928:	f7ff fe00 	bl	801b52c <move_window>
 801b92c:	4603      	mov	r3, r0
 801b92e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b930:	7ffb      	ldrb	r3, [r7, #31]
 801b932:	2b00      	cmp	r3, #0
 801b934:	f040 809a 	bne.w	801ba6c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	899b      	ldrh	r3, [r3, #12]
 801b942:	461a      	mov	r2, r3
 801b944:	69bb      	ldr	r3, [r7, #24]
 801b946:	fbb3 f0f2 	udiv	r0, r3, r2
 801b94a:	fb00 f202 	mul.w	r2, r0, r2
 801b94e:	1a9b      	subs	r3, r3, r2
 801b950:	440b      	add	r3, r1
 801b952:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b954:	68bb      	ldr	r3, [r7, #8]
 801b956:	f003 0301 	and.w	r3, r3, #1
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d003      	beq.n	801b966 <put_fat+0x11a>
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	091b      	lsrs	r3, r3, #4
 801b962:	b2db      	uxtb	r3, r3
 801b964:	e00e      	b.n	801b984 <put_fat+0x138>
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	781b      	ldrb	r3, [r3, #0]
 801b96a:	b25b      	sxtb	r3, r3
 801b96c:	f023 030f 	bic.w	r3, r3, #15
 801b970:	b25a      	sxtb	r2, r3
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	0a1b      	lsrs	r3, r3, #8
 801b976:	b25b      	sxtb	r3, r3
 801b978:	f003 030f 	and.w	r3, r3, #15
 801b97c:	b25b      	sxtb	r3, r3
 801b97e:	4313      	orrs	r3, r2
 801b980:	b25b      	sxtb	r3, r3
 801b982:	b2db      	uxtb	r3, r3
 801b984:	697a      	ldr	r2, [r7, #20]
 801b986:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	2201      	movs	r2, #1
 801b98c:	70da      	strb	r2, [r3, #3]
			break;
 801b98e:	e072      	b.n	801ba76 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	899b      	ldrh	r3, [r3, #12]
 801b998:	085b      	lsrs	r3, r3, #1
 801b99a:	b29b      	uxth	r3, r3
 801b99c:	4619      	mov	r1, r3
 801b99e:	68bb      	ldr	r3, [r7, #8]
 801b9a0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b9a4:	4413      	add	r3, r2
 801b9a6:	4619      	mov	r1, r3
 801b9a8:	68f8      	ldr	r0, [r7, #12]
 801b9aa:	f7ff fdbf 	bl	801b52c <move_window>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b9b2:	7ffb      	ldrb	r3, [r7, #31]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d15b      	bne.n	801ba70 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b9be:	68bb      	ldr	r3, [r7, #8]
 801b9c0:	005b      	lsls	r3, r3, #1
 801b9c2:	68fa      	ldr	r2, [r7, #12]
 801b9c4:	8992      	ldrh	r2, [r2, #12]
 801b9c6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9ca:	fb00 f202 	mul.w	r2, r0, r2
 801b9ce:	1a9b      	subs	r3, r3, r2
 801b9d0:	440b      	add	r3, r1
 801b9d2:	687a      	ldr	r2, [r7, #4]
 801b9d4:	b292      	uxth	r2, r2
 801b9d6:	4611      	mov	r1, r2
 801b9d8:	4618      	mov	r0, r3
 801b9da:	f7ff fb32 	bl	801b042 <st_word>
			fs->wflag = 1;
 801b9de:	68fb      	ldr	r3, [r7, #12]
 801b9e0:	2201      	movs	r2, #1
 801b9e2:	70da      	strb	r2, [r3, #3]
			break;
 801b9e4:	e047      	b.n	801ba76 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	899b      	ldrh	r3, [r3, #12]
 801b9ee:	089b      	lsrs	r3, r3, #2
 801b9f0:	b29b      	uxth	r3, r3
 801b9f2:	4619      	mov	r1, r3
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b9fa:	4413      	add	r3, r2
 801b9fc:	4619      	mov	r1, r3
 801b9fe:	68f8      	ldr	r0, [r7, #12]
 801ba00:	f7ff fd94 	bl	801b52c <move_window>
 801ba04:	4603      	mov	r3, r0
 801ba06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ba08:	7ffb      	ldrb	r3, [r7, #31]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d132      	bne.n	801ba74 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba1a:	68bb      	ldr	r3, [r7, #8]
 801ba1c:	009b      	lsls	r3, r3, #2
 801ba1e:	68fa      	ldr	r2, [r7, #12]
 801ba20:	8992      	ldrh	r2, [r2, #12]
 801ba22:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba26:	fb00 f202 	mul.w	r2, r0, r2
 801ba2a:	1a9b      	subs	r3, r3, r2
 801ba2c:	440b      	add	r3, r1
 801ba2e:	4618      	mov	r0, r3
 801ba30:	f7ff fae4 	bl	801affc <ld_dword>
 801ba34:	4603      	mov	r3, r0
 801ba36:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801ba3a:	4323      	orrs	r3, r4
 801ba3c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba44:	68bb      	ldr	r3, [r7, #8]
 801ba46:	009b      	lsls	r3, r3, #2
 801ba48:	68fa      	ldr	r2, [r7, #12]
 801ba4a:	8992      	ldrh	r2, [r2, #12]
 801ba4c:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba50:	fb00 f202 	mul.w	r2, r0, r2
 801ba54:	1a9b      	subs	r3, r3, r2
 801ba56:	440b      	add	r3, r1
 801ba58:	6879      	ldr	r1, [r7, #4]
 801ba5a:	4618      	mov	r0, r3
 801ba5c:	f7ff fb0c 	bl	801b078 <st_dword>
			fs->wflag = 1;
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	2201      	movs	r2, #1
 801ba64:	70da      	strb	r2, [r3, #3]
			break;
 801ba66:	e006      	b.n	801ba76 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba68:	bf00      	nop
 801ba6a:	e004      	b.n	801ba76 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba6c:	bf00      	nop
 801ba6e:	e002      	b.n	801ba76 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba70:	bf00      	nop
 801ba72:	e000      	b.n	801ba76 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba74:	bf00      	nop
		}
	}
	return res;
 801ba76:	7ffb      	ldrb	r3, [r7, #31]
}
 801ba78:	4618      	mov	r0, r3
 801ba7a:	3724      	adds	r7, #36	@ 0x24
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bd90      	pop	{r4, r7, pc}

0801ba80 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b088      	sub	sp, #32
 801ba84:	af00      	add	r7, sp, #0
 801ba86:	60f8      	str	r0, [r7, #12]
 801ba88:	60b9      	str	r1, [r7, #8]
 801ba8a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	2b01      	cmp	r3, #1
 801ba9a:	d904      	bls.n	801baa6 <remove_chain+0x26>
 801ba9c:	69bb      	ldr	r3, [r7, #24]
 801ba9e:	69db      	ldr	r3, [r3, #28]
 801baa0:	68ba      	ldr	r2, [r7, #8]
 801baa2:	429a      	cmp	r2, r3
 801baa4:	d301      	bcc.n	801baaa <remove_chain+0x2a>
 801baa6:	2302      	movs	r3, #2
 801baa8:	e04b      	b.n	801bb42 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	2b00      	cmp	r3, #0
 801baae:	d00c      	beq.n	801baca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801bab0:	f04f 32ff 	mov.w	r2, #4294967295
 801bab4:	6879      	ldr	r1, [r7, #4]
 801bab6:	69b8      	ldr	r0, [r7, #24]
 801bab8:	f7ff fec8 	bl	801b84c <put_fat>
 801babc:	4603      	mov	r3, r0
 801babe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801bac0:	7ffb      	ldrb	r3, [r7, #31]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d001      	beq.n	801baca <remove_chain+0x4a>
 801bac6:	7ffb      	ldrb	r3, [r7, #31]
 801bac8:	e03b      	b.n	801bb42 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801baca:	68b9      	ldr	r1, [r7, #8]
 801bacc:	68f8      	ldr	r0, [r7, #12]
 801bace:	f7ff fdea 	bl	801b6a6 <get_fat>
 801bad2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801bad4:	697b      	ldr	r3, [r7, #20]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d031      	beq.n	801bb3e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	2b01      	cmp	r3, #1
 801bade:	d101      	bne.n	801bae4 <remove_chain+0x64>
 801bae0:	2302      	movs	r3, #2
 801bae2:	e02e      	b.n	801bb42 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801baea:	d101      	bne.n	801baf0 <remove_chain+0x70>
 801baec:	2301      	movs	r3, #1
 801baee:	e028      	b.n	801bb42 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801baf0:	2200      	movs	r2, #0
 801baf2:	68b9      	ldr	r1, [r7, #8]
 801baf4:	69b8      	ldr	r0, [r7, #24]
 801baf6:	f7ff fea9 	bl	801b84c <put_fat>
 801bafa:	4603      	mov	r3, r0
 801bafc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801bafe:	7ffb      	ldrb	r3, [r7, #31]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d001      	beq.n	801bb08 <remove_chain+0x88>
 801bb04:	7ffb      	ldrb	r3, [r7, #31]
 801bb06:	e01c      	b.n	801bb42 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801bb08:	69bb      	ldr	r3, [r7, #24]
 801bb0a:	699a      	ldr	r2, [r3, #24]
 801bb0c:	69bb      	ldr	r3, [r7, #24]
 801bb0e:	69db      	ldr	r3, [r3, #28]
 801bb10:	3b02      	subs	r3, #2
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d20b      	bcs.n	801bb2e <remove_chain+0xae>
			fs->free_clst++;
 801bb16:	69bb      	ldr	r3, [r7, #24]
 801bb18:	699b      	ldr	r3, [r3, #24]
 801bb1a:	1c5a      	adds	r2, r3, #1
 801bb1c:	69bb      	ldr	r3, [r7, #24]
 801bb1e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801bb20:	69bb      	ldr	r3, [r7, #24]
 801bb22:	791b      	ldrb	r3, [r3, #4]
 801bb24:	f043 0301 	orr.w	r3, r3, #1
 801bb28:	b2da      	uxtb	r2, r3
 801bb2a:	69bb      	ldr	r3, [r7, #24]
 801bb2c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801bb32:	69bb      	ldr	r3, [r7, #24]
 801bb34:	69db      	ldr	r3, [r3, #28]
 801bb36:	68ba      	ldr	r2, [r7, #8]
 801bb38:	429a      	cmp	r2, r3
 801bb3a:	d3c6      	bcc.n	801baca <remove_chain+0x4a>
 801bb3c:	e000      	b.n	801bb40 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801bb3e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bb40:	2300      	movs	r3, #0
}
 801bb42:	4618      	mov	r0, r3
 801bb44:	3720      	adds	r7, #32
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd80      	pop	{r7, pc}

0801bb4a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801bb4a:	b580      	push	{r7, lr}
 801bb4c:	b088      	sub	sp, #32
 801bb4e:	af00      	add	r7, sp, #0
 801bb50:	6078      	str	r0, [r7, #4]
 801bb52:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801bb5a:	683b      	ldr	r3, [r7, #0]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d10d      	bne.n	801bb7c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bb60:	693b      	ldr	r3, [r7, #16]
 801bb62:	695b      	ldr	r3, [r3, #20]
 801bb64:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bb66:	69bb      	ldr	r3, [r7, #24]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d004      	beq.n	801bb76 <create_chain+0x2c>
 801bb6c:	693b      	ldr	r3, [r7, #16]
 801bb6e:	69db      	ldr	r3, [r3, #28]
 801bb70:	69ba      	ldr	r2, [r7, #24]
 801bb72:	429a      	cmp	r2, r3
 801bb74:	d31b      	bcc.n	801bbae <create_chain+0x64>
 801bb76:	2301      	movs	r3, #1
 801bb78:	61bb      	str	r3, [r7, #24]
 801bb7a:	e018      	b.n	801bbae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bb7c:	6839      	ldr	r1, [r7, #0]
 801bb7e:	6878      	ldr	r0, [r7, #4]
 801bb80:	f7ff fd91 	bl	801b6a6 <get_fat>
 801bb84:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	2b01      	cmp	r3, #1
 801bb8a:	d801      	bhi.n	801bb90 <create_chain+0x46>
 801bb8c:	2301      	movs	r3, #1
 801bb8e:	e070      	b.n	801bc72 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb96:	d101      	bne.n	801bb9c <create_chain+0x52>
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	e06a      	b.n	801bc72 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bb9c:	693b      	ldr	r3, [r7, #16]
 801bb9e:	69db      	ldr	r3, [r3, #28]
 801bba0:	68fa      	ldr	r2, [r7, #12]
 801bba2:	429a      	cmp	r2, r3
 801bba4:	d201      	bcs.n	801bbaa <create_chain+0x60>
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	e063      	b.n	801bc72 <create_chain+0x128>
		scl = clst;
 801bbaa:	683b      	ldr	r3, [r7, #0]
 801bbac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bbae:	69bb      	ldr	r3, [r7, #24]
 801bbb0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bbb2:	69fb      	ldr	r3, [r7, #28]
 801bbb4:	3301      	adds	r3, #1
 801bbb6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bbb8:	693b      	ldr	r3, [r7, #16]
 801bbba:	69db      	ldr	r3, [r3, #28]
 801bbbc:	69fa      	ldr	r2, [r7, #28]
 801bbbe:	429a      	cmp	r2, r3
 801bbc0:	d307      	bcc.n	801bbd2 <create_chain+0x88>
				ncl = 2;
 801bbc2:	2302      	movs	r3, #2
 801bbc4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bbc6:	69fa      	ldr	r2, [r7, #28]
 801bbc8:	69bb      	ldr	r3, [r7, #24]
 801bbca:	429a      	cmp	r2, r3
 801bbcc:	d901      	bls.n	801bbd2 <create_chain+0x88>
 801bbce:	2300      	movs	r3, #0
 801bbd0:	e04f      	b.n	801bc72 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bbd2:	69f9      	ldr	r1, [r7, #28]
 801bbd4:	6878      	ldr	r0, [r7, #4]
 801bbd6:	f7ff fd66 	bl	801b6a6 <get_fat>
 801bbda:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d00e      	beq.n	801bc00 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	2b01      	cmp	r3, #1
 801bbe6:	d003      	beq.n	801bbf0 <create_chain+0xa6>
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbee:	d101      	bne.n	801bbf4 <create_chain+0xaa>
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	e03e      	b.n	801bc72 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bbf4:	69fa      	ldr	r2, [r7, #28]
 801bbf6:	69bb      	ldr	r3, [r7, #24]
 801bbf8:	429a      	cmp	r2, r3
 801bbfa:	d1da      	bne.n	801bbb2 <create_chain+0x68>
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	e038      	b.n	801bc72 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bc00:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bc02:	f04f 32ff 	mov.w	r2, #4294967295
 801bc06:	69f9      	ldr	r1, [r7, #28]
 801bc08:	6938      	ldr	r0, [r7, #16]
 801bc0a:	f7ff fe1f 	bl	801b84c <put_fat>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bc12:	7dfb      	ldrb	r3, [r7, #23]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d109      	bne.n	801bc2c <create_chain+0xe2>
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d006      	beq.n	801bc2c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bc1e:	69fa      	ldr	r2, [r7, #28]
 801bc20:	6839      	ldr	r1, [r7, #0]
 801bc22:	6938      	ldr	r0, [r7, #16]
 801bc24:	f7ff fe12 	bl	801b84c <put_fat>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bc2c:	7dfb      	ldrb	r3, [r7, #23]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d116      	bne.n	801bc60 <create_chain+0x116>
		fs->last_clst = ncl;
 801bc32:	693b      	ldr	r3, [r7, #16]
 801bc34:	69fa      	ldr	r2, [r7, #28]
 801bc36:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bc38:	693b      	ldr	r3, [r7, #16]
 801bc3a:	699a      	ldr	r2, [r3, #24]
 801bc3c:	693b      	ldr	r3, [r7, #16]
 801bc3e:	69db      	ldr	r3, [r3, #28]
 801bc40:	3b02      	subs	r3, #2
 801bc42:	429a      	cmp	r2, r3
 801bc44:	d804      	bhi.n	801bc50 <create_chain+0x106>
 801bc46:	693b      	ldr	r3, [r7, #16]
 801bc48:	699b      	ldr	r3, [r3, #24]
 801bc4a:	1e5a      	subs	r2, r3, #1
 801bc4c:	693b      	ldr	r3, [r7, #16]
 801bc4e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801bc50:	693b      	ldr	r3, [r7, #16]
 801bc52:	791b      	ldrb	r3, [r3, #4]
 801bc54:	f043 0301 	orr.w	r3, r3, #1
 801bc58:	b2da      	uxtb	r2, r3
 801bc5a:	693b      	ldr	r3, [r7, #16]
 801bc5c:	711a      	strb	r2, [r3, #4]
 801bc5e:	e007      	b.n	801bc70 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bc60:	7dfb      	ldrb	r3, [r7, #23]
 801bc62:	2b01      	cmp	r3, #1
 801bc64:	d102      	bne.n	801bc6c <create_chain+0x122>
 801bc66:	f04f 33ff 	mov.w	r3, #4294967295
 801bc6a:	e000      	b.n	801bc6e <create_chain+0x124>
 801bc6c:	2301      	movs	r3, #1
 801bc6e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bc70:	69fb      	ldr	r3, [r7, #28]
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	3720      	adds	r7, #32
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}

0801bc7a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bc7a:	b480      	push	{r7}
 801bc7c:	b087      	sub	sp, #28
 801bc7e:	af00      	add	r7, sp, #0
 801bc80:	6078      	str	r0, [r7, #4]
 801bc82:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc8e:	3304      	adds	r3, #4
 801bc90:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	899b      	ldrh	r3, [r3, #12]
 801bc96:	461a      	mov	r2, r3
 801bc98:	683b      	ldr	r3, [r7, #0]
 801bc9a:	fbb3 f3f2 	udiv	r3, r3, r2
 801bc9e:	68fa      	ldr	r2, [r7, #12]
 801bca0:	8952      	ldrh	r2, [r2, #10]
 801bca2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bca6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bca8:	693b      	ldr	r3, [r7, #16]
 801bcaa:	1d1a      	adds	r2, r3, #4
 801bcac:	613a      	str	r2, [r7, #16]
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801bcb2:	68bb      	ldr	r3, [r7, #8]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d101      	bne.n	801bcbc <clmt_clust+0x42>
 801bcb8:	2300      	movs	r3, #0
 801bcba:	e010      	b.n	801bcde <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801bcbc:	697a      	ldr	r2, [r7, #20]
 801bcbe:	68bb      	ldr	r3, [r7, #8]
 801bcc0:	429a      	cmp	r2, r3
 801bcc2:	d307      	bcc.n	801bcd4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801bcc4:	697a      	ldr	r2, [r7, #20]
 801bcc6:	68bb      	ldr	r3, [r7, #8]
 801bcc8:	1ad3      	subs	r3, r2, r3
 801bcca:	617b      	str	r3, [r7, #20]
 801bccc:	693b      	ldr	r3, [r7, #16]
 801bcce:	3304      	adds	r3, #4
 801bcd0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bcd2:	e7e9      	b.n	801bca8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801bcd4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bcd6:	693b      	ldr	r3, [r7, #16]
 801bcd8:	681a      	ldr	r2, [r3, #0]
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	4413      	add	r3, r2
}
 801bcde:	4618      	mov	r0, r3
 801bce0:	371c      	adds	r7, #28
 801bce2:	46bd      	mov	sp, r7
 801bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce8:	4770      	bx	lr

0801bcea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bcea:	b580      	push	{r7, lr}
 801bcec:	b086      	sub	sp, #24
 801bcee:	af00      	add	r7, sp, #0
 801bcf0:	6078      	str	r0, [r7, #4]
 801bcf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bd00:	d204      	bcs.n	801bd0c <dir_sdi+0x22>
 801bd02:	683b      	ldr	r3, [r7, #0]
 801bd04:	f003 031f 	and.w	r3, r3, #31
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d001      	beq.n	801bd10 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bd0c:	2302      	movs	r3, #2
 801bd0e:	e071      	b.n	801bdf4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	683a      	ldr	r2, [r7, #0]
 801bd14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	689b      	ldr	r3, [r3, #8]
 801bd1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bd1c:	697b      	ldr	r3, [r7, #20]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d106      	bne.n	801bd30 <dir_sdi+0x46>
 801bd22:	693b      	ldr	r3, [r7, #16]
 801bd24:	781b      	ldrb	r3, [r3, #0]
 801bd26:	2b02      	cmp	r3, #2
 801bd28:	d902      	bls.n	801bd30 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bd2a:	693b      	ldr	r3, [r7, #16]
 801bd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bd30:	697b      	ldr	r3, [r7, #20]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d10c      	bne.n	801bd50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	095b      	lsrs	r3, r3, #5
 801bd3a:	693a      	ldr	r2, [r7, #16]
 801bd3c:	8912      	ldrh	r2, [r2, #8]
 801bd3e:	4293      	cmp	r3, r2
 801bd40:	d301      	bcc.n	801bd46 <dir_sdi+0x5c>
 801bd42:	2302      	movs	r3, #2
 801bd44:	e056      	b.n	801bdf4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801bd46:	693b      	ldr	r3, [r7, #16]
 801bd48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	61da      	str	r2, [r3, #28]
 801bd4e:	e02d      	b.n	801bdac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bd50:	693b      	ldr	r3, [r7, #16]
 801bd52:	895b      	ldrh	r3, [r3, #10]
 801bd54:	461a      	mov	r2, r3
 801bd56:	693b      	ldr	r3, [r7, #16]
 801bd58:	899b      	ldrh	r3, [r3, #12]
 801bd5a:	fb02 f303 	mul.w	r3, r2, r3
 801bd5e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd60:	e019      	b.n	801bd96 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	6979      	ldr	r1, [r7, #20]
 801bd66:	4618      	mov	r0, r3
 801bd68:	f7ff fc9d 	bl	801b6a6 <get_fat>
 801bd6c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd74:	d101      	bne.n	801bd7a <dir_sdi+0x90>
 801bd76:	2301      	movs	r3, #1
 801bd78:	e03c      	b.n	801bdf4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bd7a:	697b      	ldr	r3, [r7, #20]
 801bd7c:	2b01      	cmp	r3, #1
 801bd7e:	d904      	bls.n	801bd8a <dir_sdi+0xa0>
 801bd80:	693b      	ldr	r3, [r7, #16]
 801bd82:	69db      	ldr	r3, [r3, #28]
 801bd84:	697a      	ldr	r2, [r7, #20]
 801bd86:	429a      	cmp	r2, r3
 801bd88:	d301      	bcc.n	801bd8e <dir_sdi+0xa4>
 801bd8a:	2302      	movs	r3, #2
 801bd8c:	e032      	b.n	801bdf4 <dir_sdi+0x10a>
			ofs -= csz;
 801bd8e:	683a      	ldr	r2, [r7, #0]
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	1ad3      	subs	r3, r2, r3
 801bd94:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd96:	683a      	ldr	r2, [r7, #0]
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	429a      	cmp	r2, r3
 801bd9c:	d2e1      	bcs.n	801bd62 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801bd9e:	6979      	ldr	r1, [r7, #20]
 801bda0:	6938      	ldr	r0, [r7, #16]
 801bda2:	f7ff fc61 	bl	801b668 <clust2sect>
 801bda6:	4602      	mov	r2, r0
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	697a      	ldr	r2, [r7, #20]
 801bdb0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	69db      	ldr	r3, [r3, #28]
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d101      	bne.n	801bdbe <dir_sdi+0xd4>
 801bdba:	2302      	movs	r3, #2
 801bdbc:	e01a      	b.n	801bdf4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	69da      	ldr	r2, [r3, #28]
 801bdc2:	693b      	ldr	r3, [r7, #16]
 801bdc4:	899b      	ldrh	r3, [r3, #12]
 801bdc6:	4619      	mov	r1, r3
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	fbb3 f3f1 	udiv	r3, r3, r1
 801bdce:	441a      	add	r2, r3
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bdd4:	693b      	ldr	r3, [r7, #16]
 801bdd6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bdda:	693b      	ldr	r3, [r7, #16]
 801bddc:	899b      	ldrh	r3, [r3, #12]
 801bdde:	461a      	mov	r2, r3
 801bde0:	683b      	ldr	r3, [r7, #0]
 801bde2:	fbb3 f0f2 	udiv	r0, r3, r2
 801bde6:	fb00 f202 	mul.w	r2, r0, r2
 801bdea:	1a9b      	subs	r3, r3, r2
 801bdec:	18ca      	adds	r2, r1, r3
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bdf2:	2300      	movs	r3, #0
}
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	3718      	adds	r7, #24
 801bdf8:	46bd      	mov	sp, r7
 801bdfa:	bd80      	pop	{r7, pc}

0801bdfc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801bdfc:	b580      	push	{r7, lr}
 801bdfe:	b086      	sub	sp, #24
 801be00:	af00      	add	r7, sp, #0
 801be02:	6078      	str	r0, [r7, #4]
 801be04:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	695b      	ldr	r3, [r3, #20]
 801be10:	3320      	adds	r3, #32
 801be12:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	69db      	ldr	r3, [r3, #28]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d003      	beq.n	801be24 <dir_next+0x28>
 801be1c:	68bb      	ldr	r3, [r7, #8]
 801be1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801be22:	d301      	bcc.n	801be28 <dir_next+0x2c>
 801be24:	2304      	movs	r3, #4
 801be26:	e0bb      	b.n	801bfa0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	899b      	ldrh	r3, [r3, #12]
 801be2c:	461a      	mov	r2, r3
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	fbb3 f1f2 	udiv	r1, r3, r2
 801be34:	fb01 f202 	mul.w	r2, r1, r2
 801be38:	1a9b      	subs	r3, r3, r2
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	f040 809d 	bne.w	801bf7a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	69db      	ldr	r3, [r3, #28]
 801be44:	1c5a      	adds	r2, r3, #1
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	699b      	ldr	r3, [r3, #24]
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d10b      	bne.n	801be6a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	095b      	lsrs	r3, r3, #5
 801be56:	68fa      	ldr	r2, [r7, #12]
 801be58:	8912      	ldrh	r2, [r2, #8]
 801be5a:	4293      	cmp	r3, r2
 801be5c:	f0c0 808d 	bcc.w	801bf7a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	2200      	movs	r2, #0
 801be64:	61da      	str	r2, [r3, #28]
 801be66:	2304      	movs	r3, #4
 801be68:	e09a      	b.n	801bfa0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	899b      	ldrh	r3, [r3, #12]
 801be6e:	461a      	mov	r2, r3
 801be70:	68bb      	ldr	r3, [r7, #8]
 801be72:	fbb3 f3f2 	udiv	r3, r3, r2
 801be76:	68fa      	ldr	r2, [r7, #12]
 801be78:	8952      	ldrh	r2, [r2, #10]
 801be7a:	3a01      	subs	r2, #1
 801be7c:	4013      	ands	r3, r2
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d17b      	bne.n	801bf7a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801be82:	687a      	ldr	r2, [r7, #4]
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	699b      	ldr	r3, [r3, #24]
 801be88:	4619      	mov	r1, r3
 801be8a:	4610      	mov	r0, r2
 801be8c:	f7ff fc0b 	bl	801b6a6 <get_fat>
 801be90:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801be92:	697b      	ldr	r3, [r7, #20]
 801be94:	2b01      	cmp	r3, #1
 801be96:	d801      	bhi.n	801be9c <dir_next+0xa0>
 801be98:	2302      	movs	r3, #2
 801be9a:	e081      	b.n	801bfa0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801be9c:	697b      	ldr	r3, [r7, #20]
 801be9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bea2:	d101      	bne.n	801bea8 <dir_next+0xac>
 801bea4:	2301      	movs	r3, #1
 801bea6:	e07b      	b.n	801bfa0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	69db      	ldr	r3, [r3, #28]
 801beac:	697a      	ldr	r2, [r7, #20]
 801beae:	429a      	cmp	r2, r3
 801beb0:	d359      	bcc.n	801bf66 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d104      	bne.n	801bec2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	2200      	movs	r2, #0
 801bebc:	61da      	str	r2, [r3, #28]
 801bebe:	2304      	movs	r3, #4
 801bec0:	e06e      	b.n	801bfa0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801bec2:	687a      	ldr	r2, [r7, #4]
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	699b      	ldr	r3, [r3, #24]
 801bec8:	4619      	mov	r1, r3
 801beca:	4610      	mov	r0, r2
 801becc:	f7ff fe3d 	bl	801bb4a <create_chain>
 801bed0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801bed2:	697b      	ldr	r3, [r7, #20]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d101      	bne.n	801bedc <dir_next+0xe0>
 801bed8:	2307      	movs	r3, #7
 801beda:	e061      	b.n	801bfa0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801bedc:	697b      	ldr	r3, [r7, #20]
 801bede:	2b01      	cmp	r3, #1
 801bee0:	d101      	bne.n	801bee6 <dir_next+0xea>
 801bee2:	2302      	movs	r3, #2
 801bee4:	e05c      	b.n	801bfa0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bee6:	697b      	ldr	r3, [r7, #20]
 801bee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801beec:	d101      	bne.n	801bef2 <dir_next+0xf6>
 801beee:	2301      	movs	r3, #1
 801bef0:	e056      	b.n	801bfa0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801bef2:	68f8      	ldr	r0, [r7, #12]
 801bef4:	f7ff fad6 	bl	801b4a4 <sync_window>
 801bef8:	4603      	mov	r3, r0
 801befa:	2b00      	cmp	r3, #0
 801befc:	d001      	beq.n	801bf02 <dir_next+0x106>
 801befe:	2301      	movs	r3, #1
 801bf00:	e04e      	b.n	801bfa0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	899b      	ldrh	r3, [r3, #12]
 801bf0c:	461a      	mov	r2, r3
 801bf0e:	2100      	movs	r1, #0
 801bf10:	f7ff f8ff 	bl	801b112 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf14:	2300      	movs	r3, #0
 801bf16:	613b      	str	r3, [r7, #16]
 801bf18:	6979      	ldr	r1, [r7, #20]
 801bf1a:	68f8      	ldr	r0, [r7, #12]
 801bf1c:	f7ff fba4 	bl	801b668 <clust2sect>
 801bf20:	4602      	mov	r2, r0
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf26:	e012      	b.n	801bf4e <dir_next+0x152>
						fs->wflag = 1;
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	2201      	movs	r2, #1
 801bf2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bf2e:	68f8      	ldr	r0, [r7, #12]
 801bf30:	f7ff fab8 	bl	801b4a4 <sync_window>
 801bf34:	4603      	mov	r3, r0
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d001      	beq.n	801bf3e <dir_next+0x142>
 801bf3a:	2301      	movs	r3, #1
 801bf3c:	e030      	b.n	801bfa0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf3e:	693b      	ldr	r3, [r7, #16]
 801bf40:	3301      	adds	r3, #1
 801bf42:	613b      	str	r3, [r7, #16]
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bf48:	1c5a      	adds	r2, r3, #1
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	895b      	ldrh	r3, [r3, #10]
 801bf52:	461a      	mov	r2, r3
 801bf54:	693b      	ldr	r3, [r7, #16]
 801bf56:	4293      	cmp	r3, r2
 801bf58:	d3e6      	bcc.n	801bf28 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bf5e:	693b      	ldr	r3, [r7, #16]
 801bf60:	1ad2      	subs	r2, r2, r3
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	697a      	ldr	r2, [r7, #20]
 801bf6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bf6c:	6979      	ldr	r1, [r7, #20]
 801bf6e:	68f8      	ldr	r0, [r7, #12]
 801bf70:	f7ff fb7a 	bl	801b668 <clust2sect>
 801bf74:	4602      	mov	r2, r0
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	68ba      	ldr	r2, [r7, #8]
 801bf7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	899b      	ldrh	r3, [r3, #12]
 801bf8a:	461a      	mov	r2, r3
 801bf8c:	68bb      	ldr	r3, [r7, #8]
 801bf8e:	fbb3 f0f2 	udiv	r0, r3, r2
 801bf92:	fb00 f202 	mul.w	r2, r0, r2
 801bf96:	1a9b      	subs	r3, r3, r2
 801bf98:	18ca      	adds	r2, r1, r3
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bf9e:	2300      	movs	r3, #0
}
 801bfa0:	4618      	mov	r0, r3
 801bfa2:	3718      	adds	r7, #24
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}

0801bfa8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	6078      	str	r0, [r7, #4]
 801bfb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bfb8:	2100      	movs	r1, #0
 801bfba:	6878      	ldr	r0, [r7, #4]
 801bfbc:	f7ff fe95 	bl	801bcea <dir_sdi>
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bfc4:	7dfb      	ldrb	r3, [r7, #23]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d12b      	bne.n	801c022 <dir_alloc+0x7a>
		n = 0;
 801bfca:	2300      	movs	r3, #0
 801bfcc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	69db      	ldr	r3, [r3, #28]
 801bfd2:	4619      	mov	r1, r3
 801bfd4:	68f8      	ldr	r0, [r7, #12]
 801bfd6:	f7ff faa9 	bl	801b52c <move_window>
 801bfda:	4603      	mov	r3, r0
 801bfdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bfde:	7dfb      	ldrb	r3, [r7, #23]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d11d      	bne.n	801c020 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	6a1b      	ldr	r3, [r3, #32]
 801bfe8:	781b      	ldrb	r3, [r3, #0]
 801bfea:	2be5      	cmp	r3, #229	@ 0xe5
 801bfec:	d004      	beq.n	801bff8 <dir_alloc+0x50>
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	6a1b      	ldr	r3, [r3, #32]
 801bff2:	781b      	ldrb	r3, [r3, #0]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d107      	bne.n	801c008 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	3301      	adds	r3, #1
 801bffc:	613b      	str	r3, [r7, #16]
 801bffe:	693a      	ldr	r2, [r7, #16]
 801c000:	683b      	ldr	r3, [r7, #0]
 801c002:	429a      	cmp	r2, r3
 801c004:	d102      	bne.n	801c00c <dir_alloc+0x64>
 801c006:	e00c      	b.n	801c022 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c008:	2300      	movs	r3, #0
 801c00a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c00c:	2101      	movs	r1, #1
 801c00e:	6878      	ldr	r0, [r7, #4]
 801c010:	f7ff fef4 	bl	801bdfc <dir_next>
 801c014:	4603      	mov	r3, r0
 801c016:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c018:	7dfb      	ldrb	r3, [r7, #23]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d0d7      	beq.n	801bfce <dir_alloc+0x26>
 801c01e:	e000      	b.n	801c022 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c020:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c022:	7dfb      	ldrb	r3, [r7, #23]
 801c024:	2b04      	cmp	r3, #4
 801c026:	d101      	bne.n	801c02c <dir_alloc+0x84>
 801c028:	2307      	movs	r3, #7
 801c02a:	75fb      	strb	r3, [r7, #23]
	return res;
 801c02c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c02e:	4618      	mov	r0, r3
 801c030:	3718      	adds	r7, #24
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}

0801c036 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c036:	b580      	push	{r7, lr}
 801c038:	b084      	sub	sp, #16
 801c03a:	af00      	add	r7, sp, #0
 801c03c:	6078      	str	r0, [r7, #4]
 801c03e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c040:	683b      	ldr	r3, [r7, #0]
 801c042:	331a      	adds	r3, #26
 801c044:	4618      	mov	r0, r3
 801c046:	f7fe ffc1 	bl	801afcc <ld_word>
 801c04a:	4603      	mov	r3, r0
 801c04c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	781b      	ldrb	r3, [r3, #0]
 801c052:	2b03      	cmp	r3, #3
 801c054:	d109      	bne.n	801c06a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c056:	683b      	ldr	r3, [r7, #0]
 801c058:	3314      	adds	r3, #20
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7fe ffb6 	bl	801afcc <ld_word>
 801c060:	4603      	mov	r3, r0
 801c062:	041b      	lsls	r3, r3, #16
 801c064:	68fa      	ldr	r2, [r7, #12]
 801c066:	4313      	orrs	r3, r2
 801c068:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c06a:	68fb      	ldr	r3, [r7, #12]
}
 801c06c:	4618      	mov	r0, r3
 801c06e:	3710      	adds	r7, #16
 801c070:	46bd      	mov	sp, r7
 801c072:	bd80      	pop	{r7, pc}

0801c074 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b084      	sub	sp, #16
 801c078:	af00      	add	r7, sp, #0
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c080:	68bb      	ldr	r3, [r7, #8]
 801c082:	331a      	adds	r3, #26
 801c084:	687a      	ldr	r2, [r7, #4]
 801c086:	b292      	uxth	r2, r2
 801c088:	4611      	mov	r1, r2
 801c08a:	4618      	mov	r0, r3
 801c08c:	f7fe ffd9 	bl	801b042 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	2b03      	cmp	r3, #3
 801c096:	d109      	bne.n	801c0ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	f103 0214 	add.w	r2, r3, #20
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	0c1b      	lsrs	r3, r3, #16
 801c0a2:	b29b      	uxth	r3, r3
 801c0a4:	4619      	mov	r1, r3
 801c0a6:	4610      	mov	r0, r2
 801c0a8:	f7fe ffcb 	bl	801b042 <st_word>
	}
}
 801c0ac:	bf00      	nop
 801c0ae:	3710      	adds	r7, #16
 801c0b0:	46bd      	mov	sp, r7
 801c0b2:	bd80      	pop	{r7, pc}

0801c0b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c0b4:	b590      	push	{r4, r7, lr}
 801c0b6:	b087      	sub	sp, #28
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c0be:	683b      	ldr	r3, [r7, #0]
 801c0c0:	331a      	adds	r3, #26
 801c0c2:	4618      	mov	r0, r3
 801c0c4:	f7fe ff82 	bl	801afcc <ld_word>
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d001      	beq.n	801c0d2 <cmp_lfn+0x1e>
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	e059      	b.n	801c186 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c0d2:	683b      	ldr	r3, [r7, #0]
 801c0d4:	781b      	ldrb	r3, [r3, #0]
 801c0d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c0da:	1e5a      	subs	r2, r3, #1
 801c0dc:	4613      	mov	r3, r2
 801c0de:	005b      	lsls	r3, r3, #1
 801c0e0:	4413      	add	r3, r2
 801c0e2:	009b      	lsls	r3, r3, #2
 801c0e4:	4413      	add	r3, r2
 801c0e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c0e8:	2301      	movs	r3, #1
 801c0ea:	81fb      	strh	r3, [r7, #14]
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	613b      	str	r3, [r7, #16]
 801c0f0:	e033      	b.n	801c15a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c0f2:	4a27      	ldr	r2, [pc, #156]	@ (801c190 <cmp_lfn+0xdc>)
 801c0f4:	693b      	ldr	r3, [r7, #16]
 801c0f6:	4413      	add	r3, r2
 801c0f8:	781b      	ldrb	r3, [r3, #0]
 801c0fa:	461a      	mov	r2, r3
 801c0fc:	683b      	ldr	r3, [r7, #0]
 801c0fe:	4413      	add	r3, r2
 801c100:	4618      	mov	r0, r3
 801c102:	f7fe ff63 	bl	801afcc <ld_word>
 801c106:	4603      	mov	r3, r0
 801c108:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c10a:	89fb      	ldrh	r3, [r7, #14]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d01a      	beq.n	801c146 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c110:	697b      	ldr	r3, [r7, #20]
 801c112:	2bfe      	cmp	r3, #254	@ 0xfe
 801c114:	d812      	bhi.n	801c13c <cmp_lfn+0x88>
 801c116:	89bb      	ldrh	r3, [r7, #12]
 801c118:	4618      	mov	r0, r3
 801c11a:	f001 ff71 	bl	801e000 <ff_wtoupper>
 801c11e:	4603      	mov	r3, r0
 801c120:	461c      	mov	r4, r3
 801c122:	697b      	ldr	r3, [r7, #20]
 801c124:	1c5a      	adds	r2, r3, #1
 801c126:	617a      	str	r2, [r7, #20]
 801c128:	005b      	lsls	r3, r3, #1
 801c12a:	687a      	ldr	r2, [r7, #4]
 801c12c:	4413      	add	r3, r2
 801c12e:	881b      	ldrh	r3, [r3, #0]
 801c130:	4618      	mov	r0, r3
 801c132:	f001 ff65 	bl	801e000 <ff_wtoupper>
 801c136:	4603      	mov	r3, r0
 801c138:	429c      	cmp	r4, r3
 801c13a:	d001      	beq.n	801c140 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c13c:	2300      	movs	r3, #0
 801c13e:	e022      	b.n	801c186 <cmp_lfn+0xd2>
			}
			wc = uc;
 801c140:	89bb      	ldrh	r3, [r7, #12]
 801c142:	81fb      	strh	r3, [r7, #14]
 801c144:	e006      	b.n	801c154 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c146:	89bb      	ldrh	r3, [r7, #12]
 801c148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c14c:	4293      	cmp	r3, r2
 801c14e:	d001      	beq.n	801c154 <cmp_lfn+0xa0>
 801c150:	2300      	movs	r3, #0
 801c152:	e018      	b.n	801c186 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c154:	693b      	ldr	r3, [r7, #16]
 801c156:	3301      	adds	r3, #1
 801c158:	613b      	str	r3, [r7, #16]
 801c15a:	693b      	ldr	r3, [r7, #16]
 801c15c:	2b0c      	cmp	r3, #12
 801c15e:	d9c8      	bls.n	801c0f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c160:	683b      	ldr	r3, [r7, #0]
 801c162:	781b      	ldrb	r3, [r3, #0]
 801c164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d00b      	beq.n	801c184 <cmp_lfn+0xd0>
 801c16c:	89fb      	ldrh	r3, [r7, #14]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d008      	beq.n	801c184 <cmp_lfn+0xd0>
 801c172:	697b      	ldr	r3, [r7, #20]
 801c174:	005b      	lsls	r3, r3, #1
 801c176:	687a      	ldr	r2, [r7, #4]
 801c178:	4413      	add	r3, r2
 801c17a:	881b      	ldrh	r3, [r3, #0]
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d001      	beq.n	801c184 <cmp_lfn+0xd0>
 801c180:	2300      	movs	r3, #0
 801c182:	e000      	b.n	801c186 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c184:	2301      	movs	r3, #1
}
 801c186:	4618      	mov	r0, r3
 801c188:	371c      	adds	r7, #28
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bd90      	pop	{r4, r7, pc}
 801c18e:	bf00      	nop
 801c190:	0801ec94 	.word	0x0801ec94

0801c194 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c194:	b580      	push	{r7, lr}
 801c196:	b086      	sub	sp, #24
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
 801c19c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c19e:	683b      	ldr	r3, [r7, #0]
 801c1a0:	331a      	adds	r3, #26
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7fe ff12 	bl	801afcc <ld_word>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d001      	beq.n	801c1b2 <pick_lfn+0x1e>
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	e04d      	b.n	801c24e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c1b2:	683b      	ldr	r3, [r7, #0]
 801c1b4:	781b      	ldrb	r3, [r3, #0]
 801c1b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c1ba:	1e5a      	subs	r2, r3, #1
 801c1bc:	4613      	mov	r3, r2
 801c1be:	005b      	lsls	r3, r3, #1
 801c1c0:	4413      	add	r3, r2
 801c1c2:	009b      	lsls	r3, r3, #2
 801c1c4:	4413      	add	r3, r2
 801c1c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c1c8:	2301      	movs	r3, #1
 801c1ca:	81fb      	strh	r3, [r7, #14]
 801c1cc:	2300      	movs	r3, #0
 801c1ce:	613b      	str	r3, [r7, #16]
 801c1d0:	e028      	b.n	801c224 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c1d2:	4a21      	ldr	r2, [pc, #132]	@ (801c258 <pick_lfn+0xc4>)
 801c1d4:	693b      	ldr	r3, [r7, #16]
 801c1d6:	4413      	add	r3, r2
 801c1d8:	781b      	ldrb	r3, [r3, #0]
 801c1da:	461a      	mov	r2, r3
 801c1dc:	683b      	ldr	r3, [r7, #0]
 801c1de:	4413      	add	r3, r2
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f7fe fef3 	bl	801afcc <ld_word>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c1ea:	89fb      	ldrh	r3, [r7, #14]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d00f      	beq.n	801c210 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c1f0:	697b      	ldr	r3, [r7, #20]
 801c1f2:	2bfe      	cmp	r3, #254	@ 0xfe
 801c1f4:	d901      	bls.n	801c1fa <pick_lfn+0x66>
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	e029      	b.n	801c24e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c1fa:	89bb      	ldrh	r3, [r7, #12]
 801c1fc:	81fb      	strh	r3, [r7, #14]
 801c1fe:	697b      	ldr	r3, [r7, #20]
 801c200:	1c5a      	adds	r2, r3, #1
 801c202:	617a      	str	r2, [r7, #20]
 801c204:	005b      	lsls	r3, r3, #1
 801c206:	687a      	ldr	r2, [r7, #4]
 801c208:	4413      	add	r3, r2
 801c20a:	89fa      	ldrh	r2, [r7, #14]
 801c20c:	801a      	strh	r2, [r3, #0]
 801c20e:	e006      	b.n	801c21e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c210:	89bb      	ldrh	r3, [r7, #12]
 801c212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c216:	4293      	cmp	r3, r2
 801c218:	d001      	beq.n	801c21e <pick_lfn+0x8a>
 801c21a:	2300      	movs	r3, #0
 801c21c:	e017      	b.n	801c24e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c21e:	693b      	ldr	r3, [r7, #16]
 801c220:	3301      	adds	r3, #1
 801c222:	613b      	str	r3, [r7, #16]
 801c224:	693b      	ldr	r3, [r7, #16]
 801c226:	2b0c      	cmp	r3, #12
 801c228:	d9d3      	bls.n	801c1d2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c22a:	683b      	ldr	r3, [r7, #0]
 801c22c:	781b      	ldrb	r3, [r3, #0]
 801c22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c232:	2b00      	cmp	r3, #0
 801c234:	d00a      	beq.n	801c24c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c236:	697b      	ldr	r3, [r7, #20]
 801c238:	2bfe      	cmp	r3, #254	@ 0xfe
 801c23a:	d901      	bls.n	801c240 <pick_lfn+0xac>
 801c23c:	2300      	movs	r3, #0
 801c23e:	e006      	b.n	801c24e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c240:	697b      	ldr	r3, [r7, #20]
 801c242:	005b      	lsls	r3, r3, #1
 801c244:	687a      	ldr	r2, [r7, #4]
 801c246:	4413      	add	r3, r2
 801c248:	2200      	movs	r2, #0
 801c24a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c24c:	2301      	movs	r3, #1
}
 801c24e:	4618      	mov	r0, r3
 801c250:	3718      	adds	r7, #24
 801c252:	46bd      	mov	sp, r7
 801c254:	bd80      	pop	{r7, pc}
 801c256:	bf00      	nop
 801c258:	0801ec94 	.word	0x0801ec94

0801c25c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c25c:	b580      	push	{r7, lr}
 801c25e:	b088      	sub	sp, #32
 801c260:	af00      	add	r7, sp, #0
 801c262:	60f8      	str	r0, [r7, #12]
 801c264:	60b9      	str	r1, [r7, #8]
 801c266:	4611      	mov	r1, r2
 801c268:	461a      	mov	r2, r3
 801c26a:	460b      	mov	r3, r1
 801c26c:	71fb      	strb	r3, [r7, #7]
 801c26e:	4613      	mov	r3, r2
 801c270:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c272:	68bb      	ldr	r3, [r7, #8]
 801c274:	330d      	adds	r3, #13
 801c276:	79ba      	ldrb	r2, [r7, #6]
 801c278:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c27a:	68bb      	ldr	r3, [r7, #8]
 801c27c:	330b      	adds	r3, #11
 801c27e:	220f      	movs	r2, #15
 801c280:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c282:	68bb      	ldr	r3, [r7, #8]
 801c284:	330c      	adds	r3, #12
 801c286:	2200      	movs	r2, #0
 801c288:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c28a:	68bb      	ldr	r3, [r7, #8]
 801c28c:	331a      	adds	r3, #26
 801c28e:	2100      	movs	r1, #0
 801c290:	4618      	mov	r0, r3
 801c292:	f7fe fed6 	bl	801b042 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c296:	79fb      	ldrb	r3, [r7, #7]
 801c298:	1e5a      	subs	r2, r3, #1
 801c29a:	4613      	mov	r3, r2
 801c29c:	005b      	lsls	r3, r3, #1
 801c29e:	4413      	add	r3, r2
 801c2a0:	009b      	lsls	r3, r3, #2
 801c2a2:	4413      	add	r3, r2
 801c2a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	82fb      	strh	r3, [r7, #22]
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c2ae:	8afb      	ldrh	r3, [r7, #22]
 801c2b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2b4:	4293      	cmp	r3, r2
 801c2b6:	d007      	beq.n	801c2c8 <put_lfn+0x6c>
 801c2b8:	69fb      	ldr	r3, [r7, #28]
 801c2ba:	1c5a      	adds	r2, r3, #1
 801c2bc:	61fa      	str	r2, [r7, #28]
 801c2be:	005b      	lsls	r3, r3, #1
 801c2c0:	68fa      	ldr	r2, [r7, #12]
 801c2c2:	4413      	add	r3, r2
 801c2c4:	881b      	ldrh	r3, [r3, #0]
 801c2c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c2c8:	4a17      	ldr	r2, [pc, #92]	@ (801c328 <put_lfn+0xcc>)
 801c2ca:	69bb      	ldr	r3, [r7, #24]
 801c2cc:	4413      	add	r3, r2
 801c2ce:	781b      	ldrb	r3, [r3, #0]
 801c2d0:	461a      	mov	r2, r3
 801c2d2:	68bb      	ldr	r3, [r7, #8]
 801c2d4:	4413      	add	r3, r2
 801c2d6:	8afa      	ldrh	r2, [r7, #22]
 801c2d8:	4611      	mov	r1, r2
 801c2da:	4618      	mov	r0, r3
 801c2dc:	f7fe feb1 	bl	801b042 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c2e0:	8afb      	ldrh	r3, [r7, #22]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d102      	bne.n	801c2ec <put_lfn+0x90>
 801c2e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c2ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c2ec:	69bb      	ldr	r3, [r7, #24]
 801c2ee:	3301      	adds	r3, #1
 801c2f0:	61bb      	str	r3, [r7, #24]
 801c2f2:	69bb      	ldr	r3, [r7, #24]
 801c2f4:	2b0c      	cmp	r3, #12
 801c2f6:	d9da      	bls.n	801c2ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c2f8:	8afb      	ldrh	r3, [r7, #22]
 801c2fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2fe:	4293      	cmp	r3, r2
 801c300:	d006      	beq.n	801c310 <put_lfn+0xb4>
 801c302:	69fb      	ldr	r3, [r7, #28]
 801c304:	005b      	lsls	r3, r3, #1
 801c306:	68fa      	ldr	r2, [r7, #12]
 801c308:	4413      	add	r3, r2
 801c30a:	881b      	ldrh	r3, [r3, #0]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d103      	bne.n	801c318 <put_lfn+0xbc>
 801c310:	79fb      	ldrb	r3, [r7, #7]
 801c312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c316:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c318:	68bb      	ldr	r3, [r7, #8]
 801c31a:	79fa      	ldrb	r2, [r7, #7]
 801c31c:	701a      	strb	r2, [r3, #0]
}
 801c31e:	bf00      	nop
 801c320:	3720      	adds	r7, #32
 801c322:	46bd      	mov	sp, r7
 801c324:	bd80      	pop	{r7, pc}
 801c326:	bf00      	nop
 801c328:	0801ec94 	.word	0x0801ec94

0801c32c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b08c      	sub	sp, #48	@ 0x30
 801c330:	af00      	add	r7, sp, #0
 801c332:	60f8      	str	r0, [r7, #12]
 801c334:	60b9      	str	r1, [r7, #8]
 801c336:	607a      	str	r2, [r7, #4]
 801c338:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c33a:	220b      	movs	r2, #11
 801c33c:	68b9      	ldr	r1, [r7, #8]
 801c33e:	68f8      	ldr	r0, [r7, #12]
 801c340:	f7fe fec6 	bl	801b0d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c344:	683b      	ldr	r3, [r7, #0]
 801c346:	2b05      	cmp	r3, #5
 801c348:	d929      	bls.n	801c39e <gen_numname+0x72>
		sr = seq;
 801c34a:	683b      	ldr	r3, [r7, #0]
 801c34c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c34e:	e020      	b.n	801c392 <gen_numname+0x66>
			wc = *lfn++;
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	1c9a      	adds	r2, r3, #2
 801c354:	607a      	str	r2, [r7, #4]
 801c356:	881b      	ldrh	r3, [r3, #0]
 801c358:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c35a:	2300      	movs	r3, #0
 801c35c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c35e:	e015      	b.n	801c38c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c360:	69fb      	ldr	r3, [r7, #28]
 801c362:	005a      	lsls	r2, r3, #1
 801c364:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c366:	f003 0301 	and.w	r3, r3, #1
 801c36a:	4413      	add	r3, r2
 801c36c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c36e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c370:	085b      	lsrs	r3, r3, #1
 801c372:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c374:	69fb      	ldr	r3, [r7, #28]
 801c376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d003      	beq.n	801c386 <gen_numname+0x5a>
 801c37e:	69fa      	ldr	r2, [r7, #28]
 801c380:	4b30      	ldr	r3, [pc, #192]	@ (801c444 <gen_numname+0x118>)
 801c382:	4053      	eors	r3, r2
 801c384:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c388:	3301      	adds	r3, #1
 801c38a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c38e:	2b0f      	cmp	r3, #15
 801c390:	d9e6      	bls.n	801c360 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	881b      	ldrh	r3, [r3, #0]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d1da      	bne.n	801c350 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c39a:	69fb      	ldr	r3, [r7, #28]
 801c39c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c39e:	2307      	movs	r3, #7
 801c3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	b2db      	uxtb	r3, r3
 801c3a6:	f003 030f 	and.w	r3, r3, #15
 801c3aa:	b2db      	uxtb	r3, r3
 801c3ac:	3330      	adds	r3, #48	@ 0x30
 801c3ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3b6:	2b39      	cmp	r3, #57	@ 0x39
 801c3b8:	d904      	bls.n	801c3c4 <gen_numname+0x98>
 801c3ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3be:	3307      	adds	r3, #7
 801c3c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3c6:	1e5a      	subs	r2, r3, #1
 801c3c8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c3ca:	3330      	adds	r3, #48	@ 0x30
 801c3cc:	443b      	add	r3, r7
 801c3ce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c3d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	091b      	lsrs	r3, r3, #4
 801c3da:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c3dc:	683b      	ldr	r3, [r7, #0]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d1df      	bne.n	801c3a2 <gen_numname+0x76>
	ns[i] = '~';
 801c3e2:	f107 0214 	add.w	r2, r7, #20
 801c3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3e8:	4413      	add	r3, r2
 801c3ea:	227e      	movs	r2, #126	@ 0x7e
 801c3ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3f2:	e002      	b.n	801c3fa <gen_numname+0xce>
 801c3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3f6:	3301      	adds	r3, #1
 801c3f8:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3fe:	429a      	cmp	r2, r3
 801c400:	d205      	bcs.n	801c40e <gen_numname+0xe2>
 801c402:	68fa      	ldr	r2, [r7, #12]
 801c404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c406:	4413      	add	r3, r2
 801c408:	781b      	ldrb	r3, [r3, #0]
 801c40a:	2b20      	cmp	r3, #32
 801c40c:	d1f2      	bne.n	801c3f4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c410:	2b07      	cmp	r3, #7
 801c412:	d807      	bhi.n	801c424 <gen_numname+0xf8>
 801c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c416:	1c5a      	adds	r2, r3, #1
 801c418:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c41a:	3330      	adds	r3, #48	@ 0x30
 801c41c:	443b      	add	r3, r7
 801c41e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c422:	e000      	b.n	801c426 <gen_numname+0xfa>
 801c424:	2120      	movs	r1, #32
 801c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c428:	1c5a      	adds	r2, r3, #1
 801c42a:	627a      	str	r2, [r7, #36]	@ 0x24
 801c42c:	68fa      	ldr	r2, [r7, #12]
 801c42e:	4413      	add	r3, r2
 801c430:	460a      	mov	r2, r1
 801c432:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c436:	2b07      	cmp	r3, #7
 801c438:	d9e9      	bls.n	801c40e <gen_numname+0xe2>
}
 801c43a:	bf00      	nop
 801c43c:	bf00      	nop
 801c43e:	3730      	adds	r7, #48	@ 0x30
 801c440:	46bd      	mov	sp, r7
 801c442:	bd80      	pop	{r7, pc}
 801c444:	00011021 	.word	0x00011021

0801c448 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c448:	b480      	push	{r7}
 801c44a:	b085      	sub	sp, #20
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c450:	2300      	movs	r3, #0
 801c452:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c454:	230b      	movs	r3, #11
 801c456:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c458:	7bfb      	ldrb	r3, [r7, #15]
 801c45a:	b2da      	uxtb	r2, r3
 801c45c:	0852      	lsrs	r2, r2, #1
 801c45e:	01db      	lsls	r3, r3, #7
 801c460:	4313      	orrs	r3, r2
 801c462:	b2da      	uxtb	r2, r3
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	1c59      	adds	r1, r3, #1
 801c468:	6079      	str	r1, [r7, #4]
 801c46a:	781b      	ldrb	r3, [r3, #0]
 801c46c:	4413      	add	r3, r2
 801c46e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c470:	68bb      	ldr	r3, [r7, #8]
 801c472:	3b01      	subs	r3, #1
 801c474:	60bb      	str	r3, [r7, #8]
 801c476:	68bb      	ldr	r3, [r7, #8]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d1ed      	bne.n	801c458 <sum_sfn+0x10>
	return sum;
 801c47c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c47e:	4618      	mov	r0, r3
 801c480:	3714      	adds	r7, #20
 801c482:	46bd      	mov	sp, r7
 801c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c488:	4770      	bx	lr

0801c48a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c48a:	b580      	push	{r7, lr}
 801c48c:	b086      	sub	sp, #24
 801c48e:	af00      	add	r7, sp, #0
 801c490:	6078      	str	r0, [r7, #4]
 801c492:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c494:	2304      	movs	r3, #4
 801c496:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c49e:	23ff      	movs	r3, #255	@ 0xff
 801c4a0:	757b      	strb	r3, [r7, #21]
 801c4a2:	23ff      	movs	r3, #255	@ 0xff
 801c4a4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c4a6:	e081      	b.n	801c5ac <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	69db      	ldr	r3, [r3, #28]
 801c4ac:	4619      	mov	r1, r3
 801c4ae:	6938      	ldr	r0, [r7, #16]
 801c4b0:	f7ff f83c 	bl	801b52c <move_window>
 801c4b4:	4603      	mov	r3, r0
 801c4b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c4b8:	7dfb      	ldrb	r3, [r7, #23]
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d17c      	bne.n	801c5b8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	6a1b      	ldr	r3, [r3, #32]
 801c4c2:	781b      	ldrb	r3, [r3, #0]
 801c4c4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c4c6:	7dbb      	ldrb	r3, [r7, #22]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d102      	bne.n	801c4d2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c4cc:	2304      	movs	r3, #4
 801c4ce:	75fb      	strb	r3, [r7, #23]
 801c4d0:	e077      	b.n	801c5c2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	6a1b      	ldr	r3, [r3, #32]
 801c4d6:	330b      	adds	r3, #11
 801c4d8:	781b      	ldrb	r3, [r3, #0]
 801c4da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c4de:	73fb      	strb	r3, [r7, #15]
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	7bfa      	ldrb	r2, [r7, #15]
 801c4e4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c4e6:	7dbb      	ldrb	r3, [r7, #22]
 801c4e8:	2be5      	cmp	r3, #229	@ 0xe5
 801c4ea:	d00e      	beq.n	801c50a <dir_read+0x80>
 801c4ec:	7dbb      	ldrb	r3, [r7, #22]
 801c4ee:	2b2e      	cmp	r3, #46	@ 0x2e
 801c4f0:	d00b      	beq.n	801c50a <dir_read+0x80>
 801c4f2:	7bfb      	ldrb	r3, [r7, #15]
 801c4f4:	f023 0320 	bic.w	r3, r3, #32
 801c4f8:	2b08      	cmp	r3, #8
 801c4fa:	bf0c      	ite	eq
 801c4fc:	2301      	moveq	r3, #1
 801c4fe:	2300      	movne	r3, #0
 801c500:	b2db      	uxtb	r3, r3
 801c502:	461a      	mov	r2, r3
 801c504:	683b      	ldr	r3, [r7, #0]
 801c506:	4293      	cmp	r3, r2
 801c508:	d002      	beq.n	801c510 <dir_read+0x86>
				ord = 0xFF;
 801c50a:	23ff      	movs	r3, #255	@ 0xff
 801c50c:	757b      	strb	r3, [r7, #21]
 801c50e:	e044      	b.n	801c59a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c510:	7bfb      	ldrb	r3, [r7, #15]
 801c512:	2b0f      	cmp	r3, #15
 801c514:	d12f      	bne.n	801c576 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c516:	7dbb      	ldrb	r3, [r7, #22]
 801c518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d00d      	beq.n	801c53c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	6a1b      	ldr	r3, [r3, #32]
 801c524:	7b5b      	ldrb	r3, [r3, #13]
 801c526:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c528:	7dbb      	ldrb	r3, [r7, #22]
 801c52a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c52e:	75bb      	strb	r3, [r7, #22]
 801c530:	7dbb      	ldrb	r3, [r7, #22]
 801c532:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	695a      	ldr	r2, [r3, #20]
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c53c:	7dba      	ldrb	r2, [r7, #22]
 801c53e:	7d7b      	ldrb	r3, [r7, #21]
 801c540:	429a      	cmp	r2, r3
 801c542:	d115      	bne.n	801c570 <dir_read+0xe6>
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	6a1b      	ldr	r3, [r3, #32]
 801c548:	330d      	adds	r3, #13
 801c54a:	781b      	ldrb	r3, [r3, #0]
 801c54c:	7d3a      	ldrb	r2, [r7, #20]
 801c54e:	429a      	cmp	r2, r3
 801c550:	d10e      	bne.n	801c570 <dir_read+0xe6>
 801c552:	693b      	ldr	r3, [r7, #16]
 801c554:	691a      	ldr	r2, [r3, #16]
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	6a1b      	ldr	r3, [r3, #32]
 801c55a:	4619      	mov	r1, r3
 801c55c:	4610      	mov	r0, r2
 801c55e:	f7ff fe19 	bl	801c194 <pick_lfn>
 801c562:	4603      	mov	r3, r0
 801c564:	2b00      	cmp	r3, #0
 801c566:	d003      	beq.n	801c570 <dir_read+0xe6>
 801c568:	7d7b      	ldrb	r3, [r7, #21]
 801c56a:	3b01      	subs	r3, #1
 801c56c:	b2db      	uxtb	r3, r3
 801c56e:	e000      	b.n	801c572 <dir_read+0xe8>
 801c570:	23ff      	movs	r3, #255	@ 0xff
 801c572:	757b      	strb	r3, [r7, #21]
 801c574:	e011      	b.n	801c59a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c576:	7d7b      	ldrb	r3, [r7, #21]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d109      	bne.n	801c590 <dir_read+0x106>
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	6a1b      	ldr	r3, [r3, #32]
 801c580:	4618      	mov	r0, r3
 801c582:	f7ff ff61 	bl	801c448 <sum_sfn>
 801c586:	4603      	mov	r3, r0
 801c588:	461a      	mov	r2, r3
 801c58a:	7d3b      	ldrb	r3, [r7, #20]
 801c58c:	4293      	cmp	r3, r2
 801c58e:	d015      	beq.n	801c5bc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	f04f 32ff 	mov.w	r2, #4294967295
 801c596:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c598:	e010      	b.n	801c5bc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c59a:	2100      	movs	r1, #0
 801c59c:	6878      	ldr	r0, [r7, #4]
 801c59e:	f7ff fc2d 	bl	801bdfc <dir_next>
 801c5a2:	4603      	mov	r3, r0
 801c5a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c5a6:	7dfb      	ldrb	r3, [r7, #23]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d109      	bne.n	801c5c0 <dir_read+0x136>
	while (dp->sect) {
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	69db      	ldr	r3, [r3, #28]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	f47f af79 	bne.w	801c4a8 <dir_read+0x1e>
 801c5b6:	e004      	b.n	801c5c2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c5b8:	bf00      	nop
 801c5ba:	e002      	b.n	801c5c2 <dir_read+0x138>
					break;
 801c5bc:	bf00      	nop
 801c5be:	e000      	b.n	801c5c2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c5c0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c5c2:	7dfb      	ldrb	r3, [r7, #23]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d002      	beq.n	801c5ce <dir_read+0x144>
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	2200      	movs	r2, #0
 801c5cc:	61da      	str	r2, [r3, #28]
	return res;
 801c5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	3718      	adds	r7, #24
 801c5d4:	46bd      	mov	sp, r7
 801c5d6:	bd80      	pop	{r7, pc}

0801c5d8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	b086      	sub	sp, #24
 801c5dc:	af00      	add	r7, sp, #0
 801c5de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c5e6:	2100      	movs	r1, #0
 801c5e8:	6878      	ldr	r0, [r7, #4]
 801c5ea:	f7ff fb7e 	bl	801bcea <dir_sdi>
 801c5ee:	4603      	mov	r3, r0
 801c5f0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c5f2:	7dfb      	ldrb	r3, [r7, #23]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d001      	beq.n	801c5fc <dir_find+0x24>
 801c5f8:	7dfb      	ldrb	r3, [r7, #23]
 801c5fa:	e0a9      	b.n	801c750 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c5fc:	23ff      	movs	r3, #255	@ 0xff
 801c5fe:	753b      	strb	r3, [r7, #20]
 801c600:	7d3b      	ldrb	r3, [r7, #20]
 801c602:	757b      	strb	r3, [r7, #21]
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	f04f 32ff 	mov.w	r2, #4294967295
 801c60a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	69db      	ldr	r3, [r3, #28]
 801c610:	4619      	mov	r1, r3
 801c612:	6938      	ldr	r0, [r7, #16]
 801c614:	f7fe ff8a 	bl	801b52c <move_window>
 801c618:	4603      	mov	r3, r0
 801c61a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c61c:	7dfb      	ldrb	r3, [r7, #23]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	f040 8090 	bne.w	801c744 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	6a1b      	ldr	r3, [r3, #32]
 801c628:	781b      	ldrb	r3, [r3, #0]
 801c62a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c62c:	7dbb      	ldrb	r3, [r7, #22]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d102      	bne.n	801c638 <dir_find+0x60>
 801c632:	2304      	movs	r3, #4
 801c634:	75fb      	strb	r3, [r7, #23]
 801c636:	e08a      	b.n	801c74e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	6a1b      	ldr	r3, [r3, #32]
 801c63c:	330b      	adds	r3, #11
 801c63e:	781b      	ldrb	r3, [r3, #0]
 801c640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c644:	73fb      	strb	r3, [r7, #15]
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	7bfa      	ldrb	r2, [r7, #15]
 801c64a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c64c:	7dbb      	ldrb	r3, [r7, #22]
 801c64e:	2be5      	cmp	r3, #229	@ 0xe5
 801c650:	d007      	beq.n	801c662 <dir_find+0x8a>
 801c652:	7bfb      	ldrb	r3, [r7, #15]
 801c654:	f003 0308 	and.w	r3, r3, #8
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d009      	beq.n	801c670 <dir_find+0x98>
 801c65c:	7bfb      	ldrb	r3, [r7, #15]
 801c65e:	2b0f      	cmp	r3, #15
 801c660:	d006      	beq.n	801c670 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c662:	23ff      	movs	r3, #255	@ 0xff
 801c664:	757b      	strb	r3, [r7, #21]
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	f04f 32ff 	mov.w	r2, #4294967295
 801c66c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c66e:	e05e      	b.n	801c72e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c670:	7bfb      	ldrb	r3, [r7, #15]
 801c672:	2b0f      	cmp	r3, #15
 801c674:	d136      	bne.n	801c6e4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c67c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c680:	2b00      	cmp	r3, #0
 801c682:	d154      	bne.n	801c72e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c684:	7dbb      	ldrb	r3, [r7, #22]
 801c686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d00d      	beq.n	801c6aa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	6a1b      	ldr	r3, [r3, #32]
 801c692:	7b5b      	ldrb	r3, [r3, #13]
 801c694:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c696:	7dbb      	ldrb	r3, [r7, #22]
 801c698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c69c:	75bb      	strb	r3, [r7, #22]
 801c69e:	7dbb      	ldrb	r3, [r7, #22]
 801c6a0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	695a      	ldr	r2, [r3, #20]
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c6aa:	7dba      	ldrb	r2, [r7, #22]
 801c6ac:	7d7b      	ldrb	r3, [r7, #21]
 801c6ae:	429a      	cmp	r2, r3
 801c6b0:	d115      	bne.n	801c6de <dir_find+0x106>
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	6a1b      	ldr	r3, [r3, #32]
 801c6b6:	330d      	adds	r3, #13
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	7d3a      	ldrb	r2, [r7, #20]
 801c6bc:	429a      	cmp	r2, r3
 801c6be:	d10e      	bne.n	801c6de <dir_find+0x106>
 801c6c0:	693b      	ldr	r3, [r7, #16]
 801c6c2:	691a      	ldr	r2, [r3, #16]
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	6a1b      	ldr	r3, [r3, #32]
 801c6c8:	4619      	mov	r1, r3
 801c6ca:	4610      	mov	r0, r2
 801c6cc:	f7ff fcf2 	bl	801c0b4 <cmp_lfn>
 801c6d0:	4603      	mov	r3, r0
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d003      	beq.n	801c6de <dir_find+0x106>
 801c6d6:	7d7b      	ldrb	r3, [r7, #21]
 801c6d8:	3b01      	subs	r3, #1
 801c6da:	b2db      	uxtb	r3, r3
 801c6dc:	e000      	b.n	801c6e0 <dir_find+0x108>
 801c6de:	23ff      	movs	r3, #255	@ 0xff
 801c6e0:	757b      	strb	r3, [r7, #21]
 801c6e2:	e024      	b.n	801c72e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c6e4:	7d7b      	ldrb	r3, [r7, #21]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d109      	bne.n	801c6fe <dir_find+0x126>
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	6a1b      	ldr	r3, [r3, #32]
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f7ff feaa 	bl	801c448 <sum_sfn>
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	461a      	mov	r2, r3
 801c6f8:	7d3b      	ldrb	r3, [r7, #20]
 801c6fa:	4293      	cmp	r3, r2
 801c6fc:	d024      	beq.n	801c748 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c704:	f003 0301 	and.w	r3, r3, #1
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d10a      	bne.n	801c722 <dir_find+0x14a>
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	6a18      	ldr	r0, [r3, #32]
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	3324      	adds	r3, #36	@ 0x24
 801c714:	220b      	movs	r2, #11
 801c716:	4619      	mov	r1, r3
 801c718:	f7fe fd16 	bl	801b148 <mem_cmp>
 801c71c:	4603      	mov	r3, r0
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d014      	beq.n	801c74c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c722:	23ff      	movs	r3, #255	@ 0xff
 801c724:	757b      	strb	r3, [r7, #21]
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	f04f 32ff 	mov.w	r2, #4294967295
 801c72c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c72e:	2100      	movs	r1, #0
 801c730:	6878      	ldr	r0, [r7, #4]
 801c732:	f7ff fb63 	bl	801bdfc <dir_next>
 801c736:	4603      	mov	r3, r0
 801c738:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c73a:	7dfb      	ldrb	r3, [r7, #23]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	f43f af65 	beq.w	801c60c <dir_find+0x34>
 801c742:	e004      	b.n	801c74e <dir_find+0x176>
		if (res != FR_OK) break;
 801c744:	bf00      	nop
 801c746:	e002      	b.n	801c74e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c748:	bf00      	nop
 801c74a:	e000      	b.n	801c74e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c74c:	bf00      	nop

	return res;
 801c74e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c750:	4618      	mov	r0, r3
 801c752:	3718      	adds	r7, #24
 801c754:	46bd      	mov	sp, r7
 801c756:	bd80      	pop	{r7, pc}

0801c758 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b08c      	sub	sp, #48	@ 0x30
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c76c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c770:	2b00      	cmp	r3, #0
 801c772:	d001      	beq.n	801c778 <dir_register+0x20>
 801c774:	2306      	movs	r3, #6
 801c776:	e0e0      	b.n	801c93a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c778:	2300      	movs	r3, #0
 801c77a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c77c:	e002      	b.n	801c784 <dir_register+0x2c>
 801c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c780:	3301      	adds	r3, #1
 801c782:	627b      	str	r3, [r7, #36]	@ 0x24
 801c784:	69fb      	ldr	r3, [r7, #28]
 801c786:	691a      	ldr	r2, [r3, #16]
 801c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c78a:	005b      	lsls	r3, r3, #1
 801c78c:	4413      	add	r3, r2
 801c78e:	881b      	ldrh	r3, [r3, #0]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d1f4      	bne.n	801c77e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c79a:	f107 030c 	add.w	r3, r7, #12
 801c79e:	220c      	movs	r2, #12
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	f7fe fc95 	bl	801b0d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c7a6:	7dfb      	ldrb	r3, [r7, #23]
 801c7a8:	f003 0301 	and.w	r3, r3, #1
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d032      	beq.n	801c816 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	2240      	movs	r2, #64	@ 0x40
 801c7b4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c7b8:	2301      	movs	r3, #1
 801c7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c7bc:	e016      	b.n	801c7ec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c7c4:	69fb      	ldr	r3, [r7, #28]
 801c7c6:	691a      	ldr	r2, [r3, #16]
 801c7c8:	f107 010c 	add.w	r1, r7, #12
 801c7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7ce:	f7ff fdad 	bl	801c32c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c7d2:	6878      	ldr	r0, [r7, #4]
 801c7d4:	f7ff ff00 	bl	801c5d8 <dir_find>
 801c7d8:	4603      	mov	r3, r0
 801c7da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c7de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d106      	bne.n	801c7f4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7e8:	3301      	adds	r3, #1
 801c7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7ee:	2b63      	cmp	r3, #99	@ 0x63
 801c7f0:	d9e5      	bls.n	801c7be <dir_register+0x66>
 801c7f2:	e000      	b.n	801c7f6 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c7f4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7f8:	2b64      	cmp	r3, #100	@ 0x64
 801c7fa:	d101      	bne.n	801c800 <dir_register+0xa8>
 801c7fc:	2307      	movs	r3, #7
 801c7fe:	e09c      	b.n	801c93a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c800:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c804:	2b04      	cmp	r3, #4
 801c806:	d002      	beq.n	801c80e <dir_register+0xb6>
 801c808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c80c:	e095      	b.n	801c93a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c80e:	7dfa      	ldrb	r2, [r7, #23]
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c816:	7dfb      	ldrb	r3, [r7, #23]
 801c818:	f003 0302 	and.w	r3, r3, #2
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d007      	beq.n	801c830 <dir_register+0xd8>
 801c820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c822:	330c      	adds	r3, #12
 801c824:	4a47      	ldr	r2, [pc, #284]	@ (801c944 <dir_register+0x1ec>)
 801c826:	fba2 2303 	umull	r2, r3, r2, r3
 801c82a:	089b      	lsrs	r3, r3, #2
 801c82c:	3301      	adds	r3, #1
 801c82e:	e000      	b.n	801c832 <dir_register+0xda>
 801c830:	2301      	movs	r3, #1
 801c832:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c834:	6a39      	ldr	r1, [r7, #32]
 801c836:	6878      	ldr	r0, [r7, #4]
 801c838:	f7ff fbb6 	bl	801bfa8 <dir_alloc>
 801c83c:	4603      	mov	r3, r0
 801c83e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c846:	2b00      	cmp	r3, #0
 801c848:	d148      	bne.n	801c8dc <dir_register+0x184>
 801c84a:	6a3b      	ldr	r3, [r7, #32]
 801c84c:	3b01      	subs	r3, #1
 801c84e:	623b      	str	r3, [r7, #32]
 801c850:	6a3b      	ldr	r3, [r7, #32]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d042      	beq.n	801c8dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	695a      	ldr	r2, [r3, #20]
 801c85a:	6a3b      	ldr	r3, [r7, #32]
 801c85c:	015b      	lsls	r3, r3, #5
 801c85e:	1ad3      	subs	r3, r2, r3
 801c860:	4619      	mov	r1, r3
 801c862:	6878      	ldr	r0, [r7, #4]
 801c864:	f7ff fa41 	bl	801bcea <dir_sdi>
 801c868:	4603      	mov	r3, r0
 801c86a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c86e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c872:	2b00      	cmp	r3, #0
 801c874:	d132      	bne.n	801c8dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	3324      	adds	r3, #36	@ 0x24
 801c87a:	4618      	mov	r0, r3
 801c87c:	f7ff fde4 	bl	801c448 <sum_sfn>
 801c880:	4603      	mov	r3, r0
 801c882:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	69db      	ldr	r3, [r3, #28]
 801c888:	4619      	mov	r1, r3
 801c88a:	69f8      	ldr	r0, [r7, #28]
 801c88c:	f7fe fe4e 	bl	801b52c <move_window>
 801c890:	4603      	mov	r3, r0
 801c892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d11d      	bne.n	801c8da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c89e:	69fb      	ldr	r3, [r7, #28]
 801c8a0:	6918      	ldr	r0, [r3, #16]
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	6a19      	ldr	r1, [r3, #32]
 801c8a6:	6a3b      	ldr	r3, [r7, #32]
 801c8a8:	b2da      	uxtb	r2, r3
 801c8aa:	7efb      	ldrb	r3, [r7, #27]
 801c8ac:	f7ff fcd6 	bl	801c25c <put_lfn>
				fs->wflag = 1;
 801c8b0:	69fb      	ldr	r3, [r7, #28]
 801c8b2:	2201      	movs	r2, #1
 801c8b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c8b6:	2100      	movs	r1, #0
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	f7ff fa9f 	bl	801bdfc <dir_next>
 801c8be:	4603      	mov	r3, r0
 801c8c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c8c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d107      	bne.n	801c8dc <dir_register+0x184>
 801c8cc:	6a3b      	ldr	r3, [r7, #32]
 801c8ce:	3b01      	subs	r3, #1
 801c8d0:	623b      	str	r3, [r7, #32]
 801c8d2:	6a3b      	ldr	r3, [r7, #32]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d1d5      	bne.n	801c884 <dir_register+0x12c>
 801c8d8:	e000      	b.n	801c8dc <dir_register+0x184>
				if (res != FR_OK) break;
 801c8da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d128      	bne.n	801c936 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	69db      	ldr	r3, [r3, #28]
 801c8e8:	4619      	mov	r1, r3
 801c8ea:	69f8      	ldr	r0, [r7, #28]
 801c8ec:	f7fe fe1e 	bl	801b52c <move_window>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d11b      	bne.n	801c936 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	6a1b      	ldr	r3, [r3, #32]
 801c902:	2220      	movs	r2, #32
 801c904:	2100      	movs	r1, #0
 801c906:	4618      	mov	r0, r3
 801c908:	f7fe fc03 	bl	801b112 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	6a18      	ldr	r0, [r3, #32]
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	3324      	adds	r3, #36	@ 0x24
 801c914:	220b      	movs	r2, #11
 801c916:	4619      	mov	r1, r3
 801c918:	f7fe fbda 	bl	801b0d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	6a1b      	ldr	r3, [r3, #32]
 801c926:	330c      	adds	r3, #12
 801c928:	f002 0218 	and.w	r2, r2, #24
 801c92c:	b2d2      	uxtb	r2, r2
 801c92e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c930:	69fb      	ldr	r3, [r7, #28]
 801c932:	2201      	movs	r2, #1
 801c934:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c93a:	4618      	mov	r0, r3
 801c93c:	3730      	adds	r7, #48	@ 0x30
 801c93e:	46bd      	mov	sp, r7
 801c940:	bd80      	pop	{r7, pc}
 801c942:	bf00      	nop
 801c944:	4ec4ec4f 	.word	0x4ec4ec4f

0801c948 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	b086      	sub	sp, #24
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	695b      	ldr	r3, [r3, #20]
 801c95a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c960:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c964:	d007      	beq.n	801c976 <dir_remove+0x2e>
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c96a:	4619      	mov	r1, r3
 801c96c:	6878      	ldr	r0, [r7, #4]
 801c96e:	f7ff f9bc 	bl	801bcea <dir_sdi>
 801c972:	4603      	mov	r3, r0
 801c974:	e000      	b.n	801c978 <dir_remove+0x30>
 801c976:	2300      	movs	r3, #0
 801c978:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c97a:	7dfb      	ldrb	r3, [r7, #23]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d128      	bne.n	801c9d2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	69db      	ldr	r3, [r3, #28]
 801c984:	4619      	mov	r1, r3
 801c986:	6938      	ldr	r0, [r7, #16]
 801c988:	f7fe fdd0 	bl	801b52c <move_window>
 801c98c:	4603      	mov	r3, r0
 801c98e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c990:	7dfb      	ldrb	r3, [r7, #23]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d115      	bne.n	801c9c2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	6a1b      	ldr	r3, [r3, #32]
 801c99a:	22e5      	movs	r2, #229	@ 0xe5
 801c99c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c99e:	693b      	ldr	r3, [r7, #16]
 801c9a0:	2201      	movs	r2, #1
 801c9a2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	695b      	ldr	r3, [r3, #20]
 801c9a8:	68fa      	ldr	r2, [r7, #12]
 801c9aa:	429a      	cmp	r2, r3
 801c9ac:	d90b      	bls.n	801c9c6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c9ae:	2100      	movs	r1, #0
 801c9b0:	6878      	ldr	r0, [r7, #4]
 801c9b2:	f7ff fa23 	bl	801bdfc <dir_next>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c9ba:	7dfb      	ldrb	r3, [r7, #23]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d0df      	beq.n	801c980 <dir_remove+0x38>
 801c9c0:	e002      	b.n	801c9c8 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c9c2:	bf00      	nop
 801c9c4:	e000      	b.n	801c9c8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9c6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c9c8:	7dfb      	ldrb	r3, [r7, #23]
 801c9ca:	2b04      	cmp	r3, #4
 801c9cc:	d101      	bne.n	801c9d2 <dir_remove+0x8a>
 801c9ce:	2302      	movs	r3, #2
 801c9d0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	3718      	adds	r7, #24
 801c9d8:	46bd      	mov	sp, r7
 801c9da:	bd80      	pop	{r7, pc}

0801c9dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b08a      	sub	sp, #40	@ 0x28
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
 801c9e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c9e6:	683b      	ldr	r3, [r7, #0]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	613b      	str	r3, [r7, #16]
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	691b      	ldr	r3, [r3, #16]
 801c9f2:	60fb      	str	r3, [r7, #12]
 801c9f4:	2300      	movs	r3, #0
 801c9f6:	617b      	str	r3, [r7, #20]
 801c9f8:	697b      	ldr	r3, [r7, #20]
 801c9fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c9fc:	69bb      	ldr	r3, [r7, #24]
 801c9fe:	1c5a      	adds	r2, r3, #1
 801ca00:	61ba      	str	r2, [r7, #24]
 801ca02:	693a      	ldr	r2, [r7, #16]
 801ca04:	4413      	add	r3, r2
 801ca06:	781b      	ldrb	r3, [r3, #0]
 801ca08:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801ca0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca0c:	2b1f      	cmp	r3, #31
 801ca0e:	d940      	bls.n	801ca92 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ca10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca12:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca14:	d006      	beq.n	801ca24 <create_name+0x48>
 801ca16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca18:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca1a:	d110      	bne.n	801ca3e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ca1c:	e002      	b.n	801ca24 <create_name+0x48>
 801ca1e:	69bb      	ldr	r3, [r7, #24]
 801ca20:	3301      	adds	r3, #1
 801ca22:	61bb      	str	r3, [r7, #24]
 801ca24:	693a      	ldr	r2, [r7, #16]
 801ca26:	69bb      	ldr	r3, [r7, #24]
 801ca28:	4413      	add	r3, r2
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca2e:	d0f6      	beq.n	801ca1e <create_name+0x42>
 801ca30:	693a      	ldr	r2, [r7, #16]
 801ca32:	69bb      	ldr	r3, [r7, #24]
 801ca34:	4413      	add	r3, r2
 801ca36:	781b      	ldrb	r3, [r3, #0]
 801ca38:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca3a:	d0f0      	beq.n	801ca1e <create_name+0x42>
			break;
 801ca3c:	e02a      	b.n	801ca94 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ca3e:	697b      	ldr	r3, [r7, #20]
 801ca40:	2bfe      	cmp	r3, #254	@ 0xfe
 801ca42:	d901      	bls.n	801ca48 <create_name+0x6c>
 801ca44:	2306      	movs	r3, #6
 801ca46:	e17d      	b.n	801cd44 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ca48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ca4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca50:	2101      	movs	r1, #1
 801ca52:	4618      	mov	r0, r3
 801ca54:	f001 fa98 	bl	801df88 <ff_convert>
 801ca58:	4603      	mov	r3, r0
 801ca5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ca5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d101      	bne.n	801ca66 <create_name+0x8a>
 801ca62:	2306      	movs	r3, #6
 801ca64:	e16e      	b.n	801cd44 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ca66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca68:	2b7f      	cmp	r3, #127	@ 0x7f
 801ca6a:	d809      	bhi.n	801ca80 <create_name+0xa4>
 801ca6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca6e:	4619      	mov	r1, r3
 801ca70:	488d      	ldr	r0, [pc, #564]	@ (801cca8 <create_name+0x2cc>)
 801ca72:	f7fe fb90 	bl	801b196 <chk_chr>
 801ca76:	4603      	mov	r3, r0
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d001      	beq.n	801ca80 <create_name+0xa4>
 801ca7c:	2306      	movs	r3, #6
 801ca7e:	e161      	b.n	801cd44 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ca80:	697b      	ldr	r3, [r7, #20]
 801ca82:	1c5a      	adds	r2, r3, #1
 801ca84:	617a      	str	r2, [r7, #20]
 801ca86:	005b      	lsls	r3, r3, #1
 801ca88:	68fa      	ldr	r2, [r7, #12]
 801ca8a:	4413      	add	r3, r2
 801ca8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca8e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ca90:	e7b4      	b.n	801c9fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ca92:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ca94:	693a      	ldr	r2, [r7, #16]
 801ca96:	69bb      	ldr	r3, [r7, #24]
 801ca98:	441a      	add	r2, r3
 801ca9a:	683b      	ldr	r3, [r7, #0]
 801ca9c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ca9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801caa0:	2b1f      	cmp	r3, #31
 801caa2:	d801      	bhi.n	801caa8 <create_name+0xcc>
 801caa4:	2304      	movs	r3, #4
 801caa6:	e000      	b.n	801caaa <create_name+0xce>
 801caa8:	2300      	movs	r3, #0
 801caaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801caae:	e011      	b.n	801cad4 <create_name+0xf8>
		w = lfn[di - 1];
 801cab0:	697a      	ldr	r2, [r7, #20]
 801cab2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cab6:	4413      	add	r3, r2
 801cab8:	005b      	lsls	r3, r3, #1
 801caba:	68fa      	ldr	r2, [r7, #12]
 801cabc:	4413      	add	r3, r2
 801cabe:	881b      	ldrh	r3, [r3, #0]
 801cac0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801cac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cac4:	2b20      	cmp	r3, #32
 801cac6:	d002      	beq.n	801cace <create_name+0xf2>
 801cac8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801caca:	2b2e      	cmp	r3, #46	@ 0x2e
 801cacc:	d106      	bne.n	801cadc <create_name+0x100>
		di--;
 801cace:	697b      	ldr	r3, [r7, #20]
 801cad0:	3b01      	subs	r3, #1
 801cad2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801cad4:	697b      	ldr	r3, [r7, #20]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d1ea      	bne.n	801cab0 <create_name+0xd4>
 801cada:	e000      	b.n	801cade <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801cadc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801cade:	697b      	ldr	r3, [r7, #20]
 801cae0:	005b      	lsls	r3, r3, #1
 801cae2:	68fa      	ldr	r2, [r7, #12]
 801cae4:	4413      	add	r3, r2
 801cae6:	2200      	movs	r2, #0
 801cae8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801caea:	697b      	ldr	r3, [r7, #20]
 801caec:	2b00      	cmp	r3, #0
 801caee:	d101      	bne.n	801caf4 <create_name+0x118>
 801caf0:	2306      	movs	r3, #6
 801caf2:	e127      	b.n	801cd44 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	3324      	adds	r3, #36	@ 0x24
 801caf8:	220b      	movs	r2, #11
 801cafa:	2120      	movs	r1, #32
 801cafc:	4618      	mov	r0, r3
 801cafe:	f7fe fb08 	bl	801b112 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801cb02:	2300      	movs	r3, #0
 801cb04:	61bb      	str	r3, [r7, #24]
 801cb06:	e002      	b.n	801cb0e <create_name+0x132>
 801cb08:	69bb      	ldr	r3, [r7, #24]
 801cb0a:	3301      	adds	r3, #1
 801cb0c:	61bb      	str	r3, [r7, #24]
 801cb0e:	69bb      	ldr	r3, [r7, #24]
 801cb10:	005b      	lsls	r3, r3, #1
 801cb12:	68fa      	ldr	r2, [r7, #12]
 801cb14:	4413      	add	r3, r2
 801cb16:	881b      	ldrh	r3, [r3, #0]
 801cb18:	2b20      	cmp	r3, #32
 801cb1a:	d0f5      	beq.n	801cb08 <create_name+0x12c>
 801cb1c:	69bb      	ldr	r3, [r7, #24]
 801cb1e:	005b      	lsls	r3, r3, #1
 801cb20:	68fa      	ldr	r2, [r7, #12]
 801cb22:	4413      	add	r3, r2
 801cb24:	881b      	ldrh	r3, [r3, #0]
 801cb26:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb28:	d0ee      	beq.n	801cb08 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801cb2a:	69bb      	ldr	r3, [r7, #24]
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d009      	beq.n	801cb44 <create_name+0x168>
 801cb30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb34:	f043 0303 	orr.w	r3, r3, #3
 801cb38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801cb3c:	e002      	b.n	801cb44 <create_name+0x168>
 801cb3e:	697b      	ldr	r3, [r7, #20]
 801cb40:	3b01      	subs	r3, #1
 801cb42:	617b      	str	r3, [r7, #20]
 801cb44:	697b      	ldr	r3, [r7, #20]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d009      	beq.n	801cb5e <create_name+0x182>
 801cb4a:	697a      	ldr	r2, [r7, #20]
 801cb4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cb50:	4413      	add	r3, r2
 801cb52:	005b      	lsls	r3, r3, #1
 801cb54:	68fa      	ldr	r2, [r7, #12]
 801cb56:	4413      	add	r3, r2
 801cb58:	881b      	ldrh	r3, [r3, #0]
 801cb5a:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb5c:	d1ef      	bne.n	801cb3e <create_name+0x162>

	i = b = 0; ni = 8;
 801cb5e:	2300      	movs	r3, #0
 801cb60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cb64:	2300      	movs	r3, #0
 801cb66:	623b      	str	r3, [r7, #32]
 801cb68:	2308      	movs	r3, #8
 801cb6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801cb6c:	69bb      	ldr	r3, [r7, #24]
 801cb6e:	1c5a      	adds	r2, r3, #1
 801cb70:	61ba      	str	r2, [r7, #24]
 801cb72:	005b      	lsls	r3, r3, #1
 801cb74:	68fa      	ldr	r2, [r7, #12]
 801cb76:	4413      	add	r3, r2
 801cb78:	881b      	ldrh	r3, [r3, #0]
 801cb7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801cb7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	f000 8090 	beq.w	801cca4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801cb84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb86:	2b20      	cmp	r3, #32
 801cb88:	d006      	beq.n	801cb98 <create_name+0x1bc>
 801cb8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb8c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb8e:	d10a      	bne.n	801cba6 <create_name+0x1ca>
 801cb90:	69ba      	ldr	r2, [r7, #24]
 801cb92:	697b      	ldr	r3, [r7, #20]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d006      	beq.n	801cba6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801cb98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb9c:	f043 0303 	orr.w	r3, r3, #3
 801cba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cba4:	e07d      	b.n	801cca2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801cba6:	6a3a      	ldr	r2, [r7, #32]
 801cba8:	69fb      	ldr	r3, [r7, #28]
 801cbaa:	429a      	cmp	r2, r3
 801cbac:	d203      	bcs.n	801cbb6 <create_name+0x1da>
 801cbae:	69ba      	ldr	r2, [r7, #24]
 801cbb0:	697b      	ldr	r3, [r7, #20]
 801cbb2:	429a      	cmp	r2, r3
 801cbb4:	d123      	bne.n	801cbfe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801cbb6:	69fb      	ldr	r3, [r7, #28]
 801cbb8:	2b0b      	cmp	r3, #11
 801cbba:	d106      	bne.n	801cbca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801cbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbc0:	f043 0303 	orr.w	r3, r3, #3
 801cbc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbc8:	e075      	b.n	801ccb6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801cbca:	69ba      	ldr	r2, [r7, #24]
 801cbcc:	697b      	ldr	r3, [r7, #20]
 801cbce:	429a      	cmp	r2, r3
 801cbd0:	d005      	beq.n	801cbde <create_name+0x202>
 801cbd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbd6:	f043 0303 	orr.w	r3, r3, #3
 801cbda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801cbde:	69ba      	ldr	r2, [r7, #24]
 801cbe0:	697b      	ldr	r3, [r7, #20]
 801cbe2:	429a      	cmp	r2, r3
 801cbe4:	d866      	bhi.n	801ccb4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801cbe6:	697b      	ldr	r3, [r7, #20]
 801cbe8:	61bb      	str	r3, [r7, #24]
 801cbea:	2308      	movs	r3, #8
 801cbec:	623b      	str	r3, [r7, #32]
 801cbee:	230b      	movs	r3, #11
 801cbf0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801cbf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cbf6:	009b      	lsls	r3, r3, #2
 801cbf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cbfc:	e051      	b.n	801cca2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801cbfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc00:	2b7f      	cmp	r3, #127	@ 0x7f
 801cc02:	d914      	bls.n	801cc2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801cc04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc06:	2100      	movs	r1, #0
 801cc08:	4618      	mov	r0, r3
 801cc0a:	f001 f9bd 	bl	801df88 <ff_convert>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801cc12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d004      	beq.n	801cc22 <create_name+0x246>
 801cc18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc1a:	3b80      	subs	r3, #128	@ 0x80
 801cc1c:	4a23      	ldr	r2, [pc, #140]	@ (801ccac <create_name+0x2d0>)
 801cc1e:	5cd3      	ldrb	r3, [r2, r3]
 801cc20:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801cc22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc26:	f043 0302 	orr.w	r3, r3, #2
 801cc2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801cc2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d007      	beq.n	801cc44 <create_name+0x268>
 801cc34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc36:	4619      	mov	r1, r3
 801cc38:	481d      	ldr	r0, [pc, #116]	@ (801ccb0 <create_name+0x2d4>)
 801cc3a:	f7fe faac 	bl	801b196 <chk_chr>
 801cc3e:	4603      	mov	r3, r0
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d008      	beq.n	801cc56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801cc44:	235f      	movs	r3, #95	@ 0x5f
 801cc46:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801cc48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc4c:	f043 0303 	orr.w	r3, r3, #3
 801cc50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cc54:	e01b      	b.n	801cc8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801cc56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc58:	2b40      	cmp	r3, #64	@ 0x40
 801cc5a:	d909      	bls.n	801cc70 <create_name+0x294>
 801cc5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc5e:	2b5a      	cmp	r3, #90	@ 0x5a
 801cc60:	d806      	bhi.n	801cc70 <create_name+0x294>
					b |= 2;
 801cc62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc66:	f043 0302 	orr.w	r3, r3, #2
 801cc6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc6e:	e00e      	b.n	801cc8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801cc70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc72:	2b60      	cmp	r3, #96	@ 0x60
 801cc74:	d90b      	bls.n	801cc8e <create_name+0x2b2>
 801cc76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc78:	2b7a      	cmp	r3, #122	@ 0x7a
 801cc7a:	d808      	bhi.n	801cc8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801cc7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc80:	f043 0301 	orr.w	r3, r3, #1
 801cc84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc8a:	3b20      	subs	r3, #32
 801cc8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801cc8e:	6a3b      	ldr	r3, [r7, #32]
 801cc90:	1c5a      	adds	r2, r3, #1
 801cc92:	623a      	str	r2, [r7, #32]
 801cc94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cc96:	b2d1      	uxtb	r1, r2
 801cc98:	687a      	ldr	r2, [r7, #4]
 801cc9a:	4413      	add	r3, r2
 801cc9c:	460a      	mov	r2, r1
 801cc9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801cca2:	e763      	b.n	801cb6c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801cca4:	bf00      	nop
 801cca6:	e006      	b.n	801ccb6 <create_name+0x2da>
 801cca8:	0801eb84 	.word	0x0801eb84
 801ccac:	0801ec14 	.word	0x0801ec14
 801ccb0:	0801eb90 	.word	0x0801eb90
			if (si > di) break;			/* No extension */
 801ccb4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ccbc:	2be5      	cmp	r3, #229	@ 0xe5
 801ccbe:	d103      	bne.n	801ccc8 <create_name+0x2ec>
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	2205      	movs	r2, #5
 801ccc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801ccc8:	69fb      	ldr	r3, [r7, #28]
 801ccca:	2b08      	cmp	r3, #8
 801cccc:	d104      	bne.n	801ccd8 <create_name+0x2fc>
 801ccce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccd2:	009b      	lsls	r3, r3, #2
 801ccd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801ccd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccdc:	f003 030c 	and.w	r3, r3, #12
 801cce0:	2b0c      	cmp	r3, #12
 801cce2:	d005      	beq.n	801ccf0 <create_name+0x314>
 801cce4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cce8:	f003 0303 	and.w	r3, r3, #3
 801ccec:	2b03      	cmp	r3, #3
 801ccee:	d105      	bne.n	801ccfc <create_name+0x320>
 801ccf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ccf4:	f043 0302 	orr.w	r3, r3, #2
 801ccf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801ccfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd00:	f003 0302 	and.w	r3, r3, #2
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d117      	bne.n	801cd38 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801cd08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd0c:	f003 0303 	and.w	r3, r3, #3
 801cd10:	2b01      	cmp	r3, #1
 801cd12:	d105      	bne.n	801cd20 <create_name+0x344>
 801cd14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd18:	f043 0310 	orr.w	r3, r3, #16
 801cd1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801cd20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd24:	f003 030c 	and.w	r3, r3, #12
 801cd28:	2b04      	cmp	r3, #4
 801cd2a:	d105      	bne.n	801cd38 <create_name+0x35c>
 801cd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd30:	f043 0308 	orr.w	r3, r3, #8
 801cd34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cd3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801cd42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801cd44:	4618      	mov	r0, r3
 801cd46:	3728      	adds	r7, #40	@ 0x28
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}

0801cd4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b086      	sub	sp, #24
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	6078      	str	r0, [r7, #4]
 801cd54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801cd5a:	693b      	ldr	r3, [r7, #16]
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801cd60:	e002      	b.n	801cd68 <follow_path+0x1c>
 801cd62:	683b      	ldr	r3, [r7, #0]
 801cd64:	3301      	adds	r3, #1
 801cd66:	603b      	str	r3, [r7, #0]
 801cd68:	683b      	ldr	r3, [r7, #0]
 801cd6a:	781b      	ldrb	r3, [r3, #0]
 801cd6c:	2b2f      	cmp	r3, #47	@ 0x2f
 801cd6e:	d0f8      	beq.n	801cd62 <follow_path+0x16>
 801cd70:	683b      	ldr	r3, [r7, #0]
 801cd72:	781b      	ldrb	r3, [r3, #0]
 801cd74:	2b5c      	cmp	r3, #92	@ 0x5c
 801cd76:	d0f4      	beq.n	801cd62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801cd78:	693b      	ldr	r3, [r7, #16]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801cd7e:	683b      	ldr	r3, [r7, #0]
 801cd80:	781b      	ldrb	r3, [r3, #0]
 801cd82:	2b1f      	cmp	r3, #31
 801cd84:	d80a      	bhi.n	801cd9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	2280      	movs	r2, #128	@ 0x80
 801cd8a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801cd8e:	2100      	movs	r1, #0
 801cd90:	6878      	ldr	r0, [r7, #4]
 801cd92:	f7fe ffaa 	bl	801bcea <dir_sdi>
 801cd96:	4603      	mov	r3, r0
 801cd98:	75fb      	strb	r3, [r7, #23]
 801cd9a:	e048      	b.n	801ce2e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cd9c:	463b      	mov	r3, r7
 801cd9e:	4619      	mov	r1, r3
 801cda0:	6878      	ldr	r0, [r7, #4]
 801cda2:	f7ff fe1b 	bl	801c9dc <create_name>
 801cda6:	4603      	mov	r3, r0
 801cda8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cdaa:	7dfb      	ldrb	r3, [r7, #23]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d139      	bne.n	801ce24 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cdb0:	6878      	ldr	r0, [r7, #4]
 801cdb2:	f7ff fc11 	bl	801c5d8 <dir_find>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cdc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cdc2:	7dfb      	ldrb	r3, [r7, #23]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d00a      	beq.n	801cdde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cdc8:	7dfb      	ldrb	r3, [r7, #23]
 801cdca:	2b04      	cmp	r3, #4
 801cdcc:	d12c      	bne.n	801ce28 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cdce:	7afb      	ldrb	r3, [r7, #11]
 801cdd0:	f003 0304 	and.w	r3, r3, #4
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d127      	bne.n	801ce28 <follow_path+0xdc>
 801cdd8:	2305      	movs	r3, #5
 801cdda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cddc:	e024      	b.n	801ce28 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cdde:	7afb      	ldrb	r3, [r7, #11]
 801cde0:	f003 0304 	and.w	r3, r3, #4
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d121      	bne.n	801ce2c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cde8:	693b      	ldr	r3, [r7, #16]
 801cdea:	799b      	ldrb	r3, [r3, #6]
 801cdec:	f003 0310 	and.w	r3, r3, #16
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d102      	bne.n	801cdfa <follow_path+0xae>
				res = FR_NO_PATH; break;
 801cdf4:	2305      	movs	r3, #5
 801cdf6:	75fb      	strb	r3, [r7, #23]
 801cdf8:	e019      	b.n	801ce2e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	695b      	ldr	r3, [r3, #20]
 801ce04:	68fa      	ldr	r2, [r7, #12]
 801ce06:	8992      	ldrh	r2, [r2, #12]
 801ce08:	fbb3 f0f2 	udiv	r0, r3, r2
 801ce0c:	fb00 f202 	mul.w	r2, r0, r2
 801ce10:	1a9b      	subs	r3, r3, r2
 801ce12:	440b      	add	r3, r1
 801ce14:	4619      	mov	r1, r3
 801ce16:	68f8      	ldr	r0, [r7, #12]
 801ce18:	f7ff f90d 	bl	801c036 <ld_clust>
 801ce1c:	4602      	mov	r2, r0
 801ce1e:	693b      	ldr	r3, [r7, #16]
 801ce20:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ce22:	e7bb      	b.n	801cd9c <follow_path+0x50>
			if (res != FR_OK) break;
 801ce24:	bf00      	nop
 801ce26:	e002      	b.n	801ce2e <follow_path+0xe2>
				break;
 801ce28:	bf00      	nop
 801ce2a:	e000      	b.n	801ce2e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ce2c:	bf00      	nop
			}
		}
	}

	return res;
 801ce2e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ce30:	4618      	mov	r0, r3
 801ce32:	3718      	adds	r7, #24
 801ce34:	46bd      	mov	sp, r7
 801ce36:	bd80      	pop	{r7, pc}

0801ce38 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801ce38:	b480      	push	{r7}
 801ce3a:	b087      	sub	sp, #28
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801ce40:	f04f 33ff 	mov.w	r3, #4294967295
 801ce44:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d031      	beq.n	801ceb2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	617b      	str	r3, [r7, #20]
 801ce54:	e002      	b.n	801ce5c <get_ldnumber+0x24>
 801ce56:	697b      	ldr	r3, [r7, #20]
 801ce58:	3301      	adds	r3, #1
 801ce5a:	617b      	str	r3, [r7, #20]
 801ce5c:	697b      	ldr	r3, [r7, #20]
 801ce5e:	781b      	ldrb	r3, [r3, #0]
 801ce60:	2b1f      	cmp	r3, #31
 801ce62:	d903      	bls.n	801ce6c <get_ldnumber+0x34>
 801ce64:	697b      	ldr	r3, [r7, #20]
 801ce66:	781b      	ldrb	r3, [r3, #0]
 801ce68:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce6a:	d1f4      	bne.n	801ce56 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ce6c:	697b      	ldr	r3, [r7, #20]
 801ce6e:	781b      	ldrb	r3, [r3, #0]
 801ce70:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce72:	d11c      	bne.n	801ceae <get_ldnumber+0x76>
			tp = *path;
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	1c5a      	adds	r2, r3, #1
 801ce7e:	60fa      	str	r2, [r7, #12]
 801ce80:	781b      	ldrb	r3, [r3, #0]
 801ce82:	3b30      	subs	r3, #48	@ 0x30
 801ce84:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ce86:	68bb      	ldr	r3, [r7, #8]
 801ce88:	2b09      	cmp	r3, #9
 801ce8a:	d80e      	bhi.n	801ceaa <get_ldnumber+0x72>
 801ce8c:	68fa      	ldr	r2, [r7, #12]
 801ce8e:	697b      	ldr	r3, [r7, #20]
 801ce90:	429a      	cmp	r2, r3
 801ce92:	d10a      	bne.n	801ceaa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ce94:	68bb      	ldr	r3, [r7, #8]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d107      	bne.n	801ceaa <get_ldnumber+0x72>
					vol = (int)i;
 801ce9a:	68bb      	ldr	r3, [r7, #8]
 801ce9c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ce9e:	697b      	ldr	r3, [r7, #20]
 801cea0:	3301      	adds	r3, #1
 801cea2:	617b      	str	r3, [r7, #20]
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	697a      	ldr	r2, [r7, #20]
 801cea8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ceaa:	693b      	ldr	r3, [r7, #16]
 801ceac:	e002      	b.n	801ceb4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801ceae:	2300      	movs	r3, #0
 801ceb0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ceb2:	693b      	ldr	r3, [r7, #16]
}
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	371c      	adds	r7, #28
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cebe:	4770      	bx	lr

0801cec0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801cec0:	b580      	push	{r7, lr}
 801cec2:	b082      	sub	sp, #8
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	6078      	str	r0, [r7, #4]
 801cec8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	2200      	movs	r2, #0
 801cece:	70da      	strb	r2, [r3, #3]
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	f04f 32ff 	mov.w	r2, #4294967295
 801ced6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ced8:	6839      	ldr	r1, [r7, #0]
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f7fe fb26 	bl	801b52c <move_window>
 801cee0:	4603      	mov	r3, r0
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d001      	beq.n	801ceea <check_fs+0x2a>
 801cee6:	2304      	movs	r3, #4
 801cee8:	e038      	b.n	801cf5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	3338      	adds	r3, #56	@ 0x38
 801ceee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cef2:	4618      	mov	r0, r3
 801cef4:	f7fe f86a 	bl	801afcc <ld_word>
 801cef8:	4603      	mov	r3, r0
 801cefa:	461a      	mov	r2, r3
 801cefc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cf00:	429a      	cmp	r2, r3
 801cf02:	d001      	beq.n	801cf08 <check_fs+0x48>
 801cf04:	2303      	movs	r3, #3
 801cf06:	e029      	b.n	801cf5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf0e:	2be9      	cmp	r3, #233	@ 0xe9
 801cf10:	d009      	beq.n	801cf26 <check_fs+0x66>
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf18:	2beb      	cmp	r3, #235	@ 0xeb
 801cf1a:	d11e      	bne.n	801cf5a <check_fs+0x9a>
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cf22:	2b90      	cmp	r3, #144	@ 0x90
 801cf24:	d119      	bne.n	801cf5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	3338      	adds	r3, #56	@ 0x38
 801cf2a:	3336      	adds	r3, #54	@ 0x36
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	f7fe f865 	bl	801affc <ld_dword>
 801cf32:	4603      	mov	r3, r0
 801cf34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cf38:	4a0a      	ldr	r2, [pc, #40]	@ (801cf64 <check_fs+0xa4>)
 801cf3a:	4293      	cmp	r3, r2
 801cf3c:	d101      	bne.n	801cf42 <check_fs+0x82>
 801cf3e:	2300      	movs	r3, #0
 801cf40:	e00c      	b.n	801cf5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	3338      	adds	r3, #56	@ 0x38
 801cf46:	3352      	adds	r3, #82	@ 0x52
 801cf48:	4618      	mov	r0, r3
 801cf4a:	f7fe f857 	bl	801affc <ld_dword>
 801cf4e:	4603      	mov	r3, r0
 801cf50:	4a05      	ldr	r2, [pc, #20]	@ (801cf68 <check_fs+0xa8>)
 801cf52:	4293      	cmp	r3, r2
 801cf54:	d101      	bne.n	801cf5a <check_fs+0x9a>
 801cf56:	2300      	movs	r3, #0
 801cf58:	e000      	b.n	801cf5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cf5a:	2302      	movs	r3, #2
}
 801cf5c:	4618      	mov	r0, r3
 801cf5e:	3708      	adds	r7, #8
 801cf60:	46bd      	mov	sp, r7
 801cf62:	bd80      	pop	{r7, pc}
 801cf64:	00544146 	.word	0x00544146
 801cf68:	33544146 	.word	0x33544146

0801cf6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	b096      	sub	sp, #88	@ 0x58
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	60f8      	str	r0, [r7, #12]
 801cf74:	60b9      	str	r1, [r7, #8]
 801cf76:	4613      	mov	r3, r2
 801cf78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cf7a:	68bb      	ldr	r3, [r7, #8]
 801cf7c:	2200      	movs	r2, #0
 801cf7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cf80:	68f8      	ldr	r0, [r7, #12]
 801cf82:	f7ff ff59 	bl	801ce38 <get_ldnumber>
 801cf86:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cf88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	da01      	bge.n	801cf92 <find_volume+0x26>
 801cf8e:	230b      	movs	r3, #11
 801cf90:	e265      	b.n	801d45e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cf92:	4a9f      	ldr	r2, [pc, #636]	@ (801d210 <find_volume+0x2a4>)
 801cf94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf9a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d101      	bne.n	801cfa6 <find_volume+0x3a>
 801cfa2:	230c      	movs	r3, #12
 801cfa4:	e25b      	b.n	801d45e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cfa6:	68bb      	ldr	r3, [r7, #8]
 801cfa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cfaa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cfac:	79fb      	ldrb	r3, [r7, #7]
 801cfae:	f023 0301 	bic.w	r3, r3, #1
 801cfb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	781b      	ldrb	r3, [r3, #0]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d01a      	beq.n	801cff2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfbe:	785b      	ldrb	r3, [r3, #1]
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	f7fd ff63 	bl	801ae8c <disk_status>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cfcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfd0:	f003 0301 	and.w	r3, r3, #1
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d10c      	bne.n	801cff2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cfd8:	79fb      	ldrb	r3, [r7, #7]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d007      	beq.n	801cfee <find_volume+0x82>
 801cfde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfe2:	f003 0304 	and.w	r3, r3, #4
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d001      	beq.n	801cfee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cfea:	230a      	movs	r3, #10
 801cfec:	e237      	b.n	801d45e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cfee:	2300      	movs	r3, #0
 801cff0:	e235      	b.n	801d45e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cff4:	2200      	movs	r2, #0
 801cff6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cffa:	b2da      	uxtb	r2, r3
 801cffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cffe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801d000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d002:	785b      	ldrb	r3, [r3, #1]
 801d004:	4618      	mov	r0, r3
 801d006:	f7fd ff5b 	bl	801aec0 <disk_initialize>
 801d00a:	4603      	mov	r3, r0
 801d00c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801d010:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d014:	f003 0301 	and.w	r3, r3, #1
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d001      	beq.n	801d020 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801d01c:	2303      	movs	r3, #3
 801d01e:	e21e      	b.n	801d45e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801d020:	79fb      	ldrb	r3, [r7, #7]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d007      	beq.n	801d036 <find_volume+0xca>
 801d026:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d02a:	f003 0304 	and.w	r3, r3, #4
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d001      	beq.n	801d036 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801d032:	230a      	movs	r3, #10
 801d034:	e213      	b.n	801d45e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801d036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d038:	7858      	ldrb	r0, [r3, #1]
 801d03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d03c:	330c      	adds	r3, #12
 801d03e:	461a      	mov	r2, r3
 801d040:	2102      	movs	r1, #2
 801d042:	f7fd ffa5 	bl	801af90 <disk_ioctl>
 801d046:	4603      	mov	r3, r0
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d001      	beq.n	801d050 <find_volume+0xe4>
 801d04c:	2301      	movs	r3, #1
 801d04e:	e206      	b.n	801d45e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801d050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d052:	899b      	ldrh	r3, [r3, #12]
 801d054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d058:	d80d      	bhi.n	801d076 <find_volume+0x10a>
 801d05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d05c:	899b      	ldrh	r3, [r3, #12]
 801d05e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d062:	d308      	bcc.n	801d076 <find_volume+0x10a>
 801d064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d066:	899b      	ldrh	r3, [r3, #12]
 801d068:	461a      	mov	r2, r3
 801d06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d06c:	899b      	ldrh	r3, [r3, #12]
 801d06e:	3b01      	subs	r3, #1
 801d070:	4013      	ands	r3, r2
 801d072:	2b00      	cmp	r3, #0
 801d074:	d001      	beq.n	801d07a <find_volume+0x10e>
 801d076:	2301      	movs	r3, #1
 801d078:	e1f1      	b.n	801d45e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801d07a:	2300      	movs	r3, #0
 801d07c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801d07e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d080:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d082:	f7ff ff1d 	bl	801cec0 <check_fs>
 801d086:	4603      	mov	r3, r0
 801d088:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d08c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d090:	2b02      	cmp	r3, #2
 801d092:	d149      	bne.n	801d128 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d094:	2300      	movs	r3, #0
 801d096:	643b      	str	r3, [r7, #64]	@ 0x40
 801d098:	e01e      	b.n	801d0d8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d09c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801d0a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0a2:	011b      	lsls	r3, r3, #4
 801d0a4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d0a8:	4413      	add	r3, r2
 801d0aa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0ae:	3304      	adds	r3, #4
 801d0b0:	781b      	ldrb	r3, [r3, #0]
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d006      	beq.n	801d0c4 <find_volume+0x158>
 801d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0b8:	3308      	adds	r3, #8
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	f7fd ff9e 	bl	801affc <ld_dword>
 801d0c0:	4602      	mov	r2, r0
 801d0c2:	e000      	b.n	801d0c6 <find_volume+0x15a>
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0c8:	009b      	lsls	r3, r3, #2
 801d0ca:	3358      	adds	r3, #88	@ 0x58
 801d0cc:	443b      	add	r3, r7
 801d0ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0d4:	3301      	adds	r3, #1
 801d0d6:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0da:	2b03      	cmp	r3, #3
 801d0dc:	d9dd      	bls.n	801d09a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d0de:	2300      	movs	r3, #0
 801d0e0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d0e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d002      	beq.n	801d0ee <find_volume+0x182>
 801d0e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0ea:	3b01      	subs	r3, #1
 801d0ec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d0ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0f0:	009b      	lsls	r3, r3, #2
 801d0f2:	3358      	adds	r3, #88	@ 0x58
 801d0f4:	443b      	add	r3, r7
 801d0f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d0fa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d005      	beq.n	801d10e <find_volume+0x1a2>
 801d102:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d104:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d106:	f7ff fedb 	bl	801cec0 <check_fs>
 801d10a:	4603      	mov	r3, r0
 801d10c:	e000      	b.n	801d110 <find_volume+0x1a4>
 801d10e:	2303      	movs	r3, #3
 801d110:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d114:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d118:	2b01      	cmp	r3, #1
 801d11a:	d905      	bls.n	801d128 <find_volume+0x1bc>
 801d11c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d11e:	3301      	adds	r3, #1
 801d120:	643b      	str	r3, [r7, #64]	@ 0x40
 801d122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d124:	2b03      	cmp	r3, #3
 801d126:	d9e2      	bls.n	801d0ee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d128:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d12c:	2b04      	cmp	r3, #4
 801d12e:	d101      	bne.n	801d134 <find_volume+0x1c8>
 801d130:	2301      	movs	r3, #1
 801d132:	e194      	b.n	801d45e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d134:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d138:	2b01      	cmp	r3, #1
 801d13a:	d901      	bls.n	801d140 <find_volume+0x1d4>
 801d13c:	230d      	movs	r3, #13
 801d13e:	e18e      	b.n	801d45e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d142:	3338      	adds	r3, #56	@ 0x38
 801d144:	330b      	adds	r3, #11
 801d146:	4618      	mov	r0, r3
 801d148:	f7fd ff40 	bl	801afcc <ld_word>
 801d14c:	4603      	mov	r3, r0
 801d14e:	461a      	mov	r2, r3
 801d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d152:	899b      	ldrh	r3, [r3, #12]
 801d154:	429a      	cmp	r2, r3
 801d156:	d001      	beq.n	801d15c <find_volume+0x1f0>
 801d158:	230d      	movs	r3, #13
 801d15a:	e180      	b.n	801d45e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d15e:	3338      	adds	r3, #56	@ 0x38
 801d160:	3316      	adds	r3, #22
 801d162:	4618      	mov	r0, r3
 801d164:	f7fd ff32 	bl	801afcc <ld_word>
 801d168:	4603      	mov	r3, r0
 801d16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d106      	bne.n	801d180 <find_volume+0x214>
 801d172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d174:	3338      	adds	r3, #56	@ 0x38
 801d176:	3324      	adds	r3, #36	@ 0x24
 801d178:	4618      	mov	r0, r3
 801d17a:	f7fd ff3f 	bl	801affc <ld_dword>
 801d17e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d184:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d188:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d18e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d192:	789b      	ldrb	r3, [r3, #2]
 801d194:	2b01      	cmp	r3, #1
 801d196:	d005      	beq.n	801d1a4 <find_volume+0x238>
 801d198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d19a:	789b      	ldrb	r3, [r3, #2]
 801d19c:	2b02      	cmp	r3, #2
 801d19e:	d001      	beq.n	801d1a4 <find_volume+0x238>
 801d1a0:	230d      	movs	r3, #13
 801d1a2:	e15c      	b.n	801d45e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1a6:	789b      	ldrb	r3, [r3, #2]
 801d1a8:	461a      	mov	r2, r3
 801d1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1ac:	fb02 f303 	mul.w	r3, r2, r3
 801d1b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d1b8:	461a      	mov	r2, r3
 801d1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1c0:	895b      	ldrh	r3, [r3, #10]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d008      	beq.n	801d1d8 <find_volume+0x26c>
 801d1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1c8:	895b      	ldrh	r3, [r3, #10]
 801d1ca:	461a      	mov	r2, r3
 801d1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ce:	895b      	ldrh	r3, [r3, #10]
 801d1d0:	3b01      	subs	r3, #1
 801d1d2:	4013      	ands	r3, r2
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d001      	beq.n	801d1dc <find_volume+0x270>
 801d1d8:	230d      	movs	r3, #13
 801d1da:	e140      	b.n	801d45e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1de:	3338      	adds	r3, #56	@ 0x38
 801d1e0:	3311      	adds	r3, #17
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	f7fd fef2 	bl	801afcc <ld_word>
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	461a      	mov	r2, r3
 801d1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1f2:	891b      	ldrh	r3, [r3, #8]
 801d1f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1f6:	8992      	ldrh	r2, [r2, #12]
 801d1f8:	0952      	lsrs	r2, r2, #5
 801d1fa:	b292      	uxth	r2, r2
 801d1fc:	fbb3 f1f2 	udiv	r1, r3, r2
 801d200:	fb01 f202 	mul.w	r2, r1, r2
 801d204:	1a9b      	subs	r3, r3, r2
 801d206:	b29b      	uxth	r3, r3
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d003      	beq.n	801d214 <find_volume+0x2a8>
 801d20c:	230d      	movs	r3, #13
 801d20e:	e126      	b.n	801d45e <find_volume+0x4f2>
 801d210:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d216:	3338      	adds	r3, #56	@ 0x38
 801d218:	3313      	adds	r3, #19
 801d21a:	4618      	mov	r0, r3
 801d21c:	f7fd fed6 	bl	801afcc <ld_word>
 801d220:	4603      	mov	r3, r0
 801d222:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d226:	2b00      	cmp	r3, #0
 801d228:	d106      	bne.n	801d238 <find_volume+0x2cc>
 801d22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d22c:	3338      	adds	r3, #56	@ 0x38
 801d22e:	3320      	adds	r3, #32
 801d230:	4618      	mov	r0, r3
 801d232:	f7fd fee3 	bl	801affc <ld_dword>
 801d236:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d23a:	3338      	adds	r3, #56	@ 0x38
 801d23c:	330e      	adds	r3, #14
 801d23e:	4618      	mov	r0, r3
 801d240:	f7fd fec4 	bl	801afcc <ld_word>
 801d244:	4603      	mov	r3, r0
 801d246:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d248:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d101      	bne.n	801d252 <find_volume+0x2e6>
 801d24e:	230d      	movs	r3, #13
 801d250:	e105      	b.n	801d45e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d252:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d256:	4413      	add	r3, r2
 801d258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d25a:	8911      	ldrh	r1, [r2, #8]
 801d25c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d25e:	8992      	ldrh	r2, [r2, #12]
 801d260:	0952      	lsrs	r2, r2, #5
 801d262:	b292      	uxth	r2, r2
 801d264:	fbb1 f2f2 	udiv	r2, r1, r2
 801d268:	b292      	uxth	r2, r2
 801d26a:	4413      	add	r3, r2
 801d26c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d26e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d272:	429a      	cmp	r2, r3
 801d274:	d201      	bcs.n	801d27a <find_volume+0x30e>
 801d276:	230d      	movs	r3, #13
 801d278:	e0f1      	b.n	801d45e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d27a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d27e:	1ad3      	subs	r3, r2, r3
 801d280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d282:	8952      	ldrh	r2, [r2, #10]
 801d284:	fbb3 f3f2 	udiv	r3, r3, r2
 801d288:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	d101      	bne.n	801d294 <find_volume+0x328>
 801d290:	230d      	movs	r3, #13
 801d292:	e0e4      	b.n	801d45e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d294:	2303      	movs	r3, #3
 801d296:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d29c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d2a0:	4293      	cmp	r3, r2
 801d2a2:	d802      	bhi.n	801d2aa <find_volume+0x33e>
 801d2a4:	2302      	movs	r3, #2
 801d2a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d2b0:	4293      	cmp	r3, r2
 801d2b2:	d802      	bhi.n	801d2ba <find_volume+0x34e>
 801d2b4:	2301      	movs	r3, #1
 801d2b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2bc:	1c9a      	adds	r2, r3, #2
 801d2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2c0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2c6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d2c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d2ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d2cc:	441a      	add	r2, r3
 801d2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2d0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d2d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2d6:	441a      	add	r2, r3
 801d2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2da:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d2e0:	2b03      	cmp	r3, #3
 801d2e2:	d11e      	bne.n	801d322 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e6:	3338      	adds	r3, #56	@ 0x38
 801d2e8:	332a      	adds	r3, #42	@ 0x2a
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	f7fd fe6e 	bl	801afcc <ld_word>
 801d2f0:	4603      	mov	r3, r0
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d001      	beq.n	801d2fa <find_volume+0x38e>
 801d2f6:	230d      	movs	r3, #13
 801d2f8:	e0b1      	b.n	801d45e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2fc:	891b      	ldrh	r3, [r3, #8]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d001      	beq.n	801d306 <find_volume+0x39a>
 801d302:	230d      	movs	r3, #13
 801d304:	e0ab      	b.n	801d45e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d308:	3338      	adds	r3, #56	@ 0x38
 801d30a:	332c      	adds	r3, #44	@ 0x2c
 801d30c:	4618      	mov	r0, r3
 801d30e:	f7fd fe75 	bl	801affc <ld_dword>
 801d312:	4602      	mov	r2, r0
 801d314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d316:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d31a:	69db      	ldr	r3, [r3, #28]
 801d31c:	009b      	lsls	r3, r3, #2
 801d31e:	647b      	str	r3, [r7, #68]	@ 0x44
 801d320:	e01f      	b.n	801d362 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d324:	891b      	ldrh	r3, [r3, #8]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d101      	bne.n	801d32e <find_volume+0x3c2>
 801d32a:	230d      	movs	r3, #13
 801d32c:	e097      	b.n	801d45e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d334:	441a      	add	r2, r3
 801d336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d338:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d33a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d33e:	2b02      	cmp	r3, #2
 801d340:	d103      	bne.n	801d34a <find_volume+0x3de>
 801d342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d344:	69db      	ldr	r3, [r3, #28]
 801d346:	005b      	lsls	r3, r3, #1
 801d348:	e00a      	b.n	801d360 <find_volume+0x3f4>
 801d34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d34c:	69da      	ldr	r2, [r3, #28]
 801d34e:	4613      	mov	r3, r2
 801d350:	005b      	lsls	r3, r3, #1
 801d352:	4413      	add	r3, r2
 801d354:	085a      	lsrs	r2, r3, #1
 801d356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d358:	69db      	ldr	r3, [r3, #28]
 801d35a:	f003 0301 	and.w	r3, r3, #1
 801d35e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d360:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d364:	6a1a      	ldr	r2, [r3, #32]
 801d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d368:	899b      	ldrh	r3, [r3, #12]
 801d36a:	4619      	mov	r1, r3
 801d36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d36e:	440b      	add	r3, r1
 801d370:	3b01      	subs	r3, #1
 801d372:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d374:	8989      	ldrh	r1, [r1, #12]
 801d376:	fbb3 f3f1 	udiv	r3, r3, r1
 801d37a:	429a      	cmp	r2, r3
 801d37c:	d201      	bcs.n	801d382 <find_volume+0x416>
 801d37e:	230d      	movs	r3, #13
 801d380:	e06d      	b.n	801d45e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d384:	f04f 32ff 	mov.w	r2, #4294967295
 801d388:	619a      	str	r2, [r3, #24]
 801d38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d38c:	699a      	ldr	r2, [r3, #24]
 801d38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d390:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d394:	2280      	movs	r2, #128	@ 0x80
 801d396:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d398:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d39c:	2b03      	cmp	r3, #3
 801d39e:	d149      	bne.n	801d434 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a2:	3338      	adds	r3, #56	@ 0x38
 801d3a4:	3330      	adds	r3, #48	@ 0x30
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f7fd fe10 	bl	801afcc <ld_word>
 801d3ac:	4603      	mov	r3, r0
 801d3ae:	2b01      	cmp	r3, #1
 801d3b0:	d140      	bne.n	801d434 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d3b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d3b4:	3301      	adds	r3, #1
 801d3b6:	4619      	mov	r1, r3
 801d3b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d3ba:	f7fe f8b7 	bl	801b52c <move_window>
 801d3be:	4603      	mov	r3, r0
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d137      	bne.n	801d434 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3c6:	2200      	movs	r2, #0
 801d3c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3cc:	3338      	adds	r3, #56	@ 0x38
 801d3ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f7fd fdfa 	bl	801afcc <ld_word>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	461a      	mov	r2, r3
 801d3dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d3e0:	429a      	cmp	r2, r3
 801d3e2:	d127      	bne.n	801d434 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3e6:	3338      	adds	r3, #56	@ 0x38
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f7fd fe07 	bl	801affc <ld_dword>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	4a1d      	ldr	r2, [pc, #116]	@ (801d468 <find_volume+0x4fc>)
 801d3f2:	4293      	cmp	r3, r2
 801d3f4:	d11e      	bne.n	801d434 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3f8:	3338      	adds	r3, #56	@ 0x38
 801d3fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d3fe:	4618      	mov	r0, r3
 801d400:	f7fd fdfc 	bl	801affc <ld_dword>
 801d404:	4603      	mov	r3, r0
 801d406:	4a19      	ldr	r2, [pc, #100]	@ (801d46c <find_volume+0x500>)
 801d408:	4293      	cmp	r3, r2
 801d40a:	d113      	bne.n	801d434 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d40e:	3338      	adds	r3, #56	@ 0x38
 801d410:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d414:	4618      	mov	r0, r3
 801d416:	f7fd fdf1 	bl	801affc <ld_dword>
 801d41a:	4602      	mov	r2, r0
 801d41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d41e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d422:	3338      	adds	r3, #56	@ 0x38
 801d424:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d428:	4618      	mov	r0, r3
 801d42a:	f7fd fde7 	bl	801affc <ld_dword>
 801d42e:	4602      	mov	r2, r0
 801d430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d432:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d436:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d43a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d43c:	4b0c      	ldr	r3, [pc, #48]	@ (801d470 <find_volume+0x504>)
 801d43e:	881b      	ldrh	r3, [r3, #0]
 801d440:	3301      	adds	r3, #1
 801d442:	b29a      	uxth	r2, r3
 801d444:	4b0a      	ldr	r3, [pc, #40]	@ (801d470 <find_volume+0x504>)
 801d446:	801a      	strh	r2, [r3, #0]
 801d448:	4b09      	ldr	r3, [pc, #36]	@ (801d470 <find_volume+0x504>)
 801d44a:	881a      	ldrh	r2, [r3, #0]
 801d44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d44e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d452:	4a08      	ldr	r2, [pc, #32]	@ (801d474 <find_volume+0x508>)
 801d454:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d456:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d458:	f7fe f800 	bl	801b45c <clear_lock>
#endif
	return FR_OK;
 801d45c:	2300      	movs	r3, #0
}
 801d45e:	4618      	mov	r0, r3
 801d460:	3758      	adds	r7, #88	@ 0x58
 801d462:	46bd      	mov	sp, r7
 801d464:	bd80      	pop	{r7, pc}
 801d466:	bf00      	nop
 801d468:	41615252 	.word	0x41615252
 801d46c:	61417272 	.word	0x61417272
 801d470:	24000554 	.word	0x24000554
 801d474:	24000568 	.word	0x24000568

0801d478 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d478:	b580      	push	{r7, lr}
 801d47a:	b084      	sub	sp, #16
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
 801d480:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d482:	2309      	movs	r3, #9
 801d484:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d01c      	beq.n	801d4c6 <validate+0x4e>
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	2b00      	cmp	r3, #0
 801d492:	d018      	beq.n	801d4c6 <validate+0x4e>
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	781b      	ldrb	r3, [r3, #0]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d013      	beq.n	801d4c6 <validate+0x4e>
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	889a      	ldrh	r2, [r3, #4]
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	88db      	ldrh	r3, [r3, #6]
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	d10c      	bne.n	801d4c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	785b      	ldrb	r3, [r3, #1]
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f7fd fcea 	bl	801ae8c <disk_status>
 801d4b8:	4603      	mov	r3, r0
 801d4ba:	f003 0301 	and.w	r3, r3, #1
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d101      	bne.n	801d4c6 <validate+0x4e>
			res = FR_OK;
 801d4c2:	2300      	movs	r3, #0
 801d4c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d4c6:	7bfb      	ldrb	r3, [r7, #15]
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	d102      	bne.n	801d4d2 <validate+0x5a>
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	e000      	b.n	801d4d4 <validate+0x5c>
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	683a      	ldr	r2, [r7, #0]
 801d4d6:	6013      	str	r3, [r2, #0]
	return res;
 801d4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d4da:	4618      	mov	r0, r3
 801d4dc:	3710      	adds	r7, #16
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bd80      	pop	{r7, pc}
	...

0801d4e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d4e4:	b580      	push	{r7, lr}
 801d4e6:	b088      	sub	sp, #32
 801d4e8:	af00      	add	r7, sp, #0
 801d4ea:	60f8      	str	r0, [r7, #12]
 801d4ec:	60b9      	str	r1, [r7, #8]
 801d4ee:	4613      	mov	r3, r2
 801d4f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d4f2:	68bb      	ldr	r3, [r7, #8]
 801d4f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d4f6:	f107 0310 	add.w	r3, r7, #16
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7ff fc9c 	bl	801ce38 <get_ldnumber>
 801d500:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d502:	69fb      	ldr	r3, [r7, #28]
 801d504:	2b00      	cmp	r3, #0
 801d506:	da01      	bge.n	801d50c <f_mount+0x28>
 801d508:	230b      	movs	r3, #11
 801d50a:	e02b      	b.n	801d564 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d50c:	4a17      	ldr	r2, [pc, #92]	@ (801d56c <f_mount+0x88>)
 801d50e:	69fb      	ldr	r3, [r7, #28]
 801d510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d514:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d516:	69bb      	ldr	r3, [r7, #24]
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d005      	beq.n	801d528 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d51c:	69b8      	ldr	r0, [r7, #24]
 801d51e:	f7fd ff9d 	bl	801b45c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d522:	69bb      	ldr	r3, [r7, #24]
 801d524:	2200      	movs	r2, #0
 801d526:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d002      	beq.n	801d534 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	2200      	movs	r2, #0
 801d532:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d534:	68fa      	ldr	r2, [r7, #12]
 801d536:	490d      	ldr	r1, [pc, #52]	@ (801d56c <f_mount+0x88>)
 801d538:	69fb      	ldr	r3, [r7, #28]
 801d53a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	2b00      	cmp	r3, #0
 801d542:	d002      	beq.n	801d54a <f_mount+0x66>
 801d544:	79fb      	ldrb	r3, [r7, #7]
 801d546:	2b01      	cmp	r3, #1
 801d548:	d001      	beq.n	801d54e <f_mount+0x6a>
 801d54a:	2300      	movs	r3, #0
 801d54c:	e00a      	b.n	801d564 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d54e:	f107 010c 	add.w	r1, r7, #12
 801d552:	f107 0308 	add.w	r3, r7, #8
 801d556:	2200      	movs	r2, #0
 801d558:	4618      	mov	r0, r3
 801d55a:	f7ff fd07 	bl	801cf6c <find_volume>
 801d55e:	4603      	mov	r3, r0
 801d560:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d562:	7dfb      	ldrb	r3, [r7, #23]
}
 801d564:	4618      	mov	r0, r3
 801d566:	3720      	adds	r7, #32
 801d568:	46bd      	mov	sp, r7
 801d56a:	bd80      	pop	{r7, pc}
 801d56c:	24000550 	.word	0x24000550

0801d570 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	b09a      	sub	sp, #104	@ 0x68
 801d574:	af00      	add	r7, sp, #0
 801d576:	60f8      	str	r0, [r7, #12]
 801d578:	60b9      	str	r1, [r7, #8]
 801d57a:	4613      	mov	r3, r2
 801d57c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	2b00      	cmp	r3, #0
 801d582:	d101      	bne.n	801d588 <f_open+0x18>
 801d584:	2309      	movs	r3, #9
 801d586:	e1b7      	b.n	801d8f8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d588:	79fb      	ldrb	r3, [r7, #7]
 801d58a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d58e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d590:	79fa      	ldrb	r2, [r7, #7]
 801d592:	f107 0114 	add.w	r1, r7, #20
 801d596:	f107 0308 	add.w	r3, r7, #8
 801d59a:	4618      	mov	r0, r3
 801d59c:	f7ff fce6 	bl	801cf6c <find_volume>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d5a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	f040 819b 	bne.w	801d8e6 <f_open+0x376>
		dj.obj.fs = fs;
 801d5b0:	697b      	ldr	r3, [r7, #20]
 801d5b2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d5b4:	68ba      	ldr	r2, [r7, #8]
 801d5b6:	f107 0318 	add.w	r3, r7, #24
 801d5ba:	4611      	mov	r1, r2
 801d5bc:	4618      	mov	r0, r3
 801d5be:	f7ff fbc5 	bl	801cd4c <follow_path>
 801d5c2:	4603      	mov	r3, r0
 801d5c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d5c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d118      	bne.n	801d602 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d5d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d5d4:	b25b      	sxtb	r3, r3
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	da03      	bge.n	801d5e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d5da:	2306      	movs	r3, #6
 801d5dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d5e0:	e00f      	b.n	801d602 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d5e2:	79fb      	ldrb	r3, [r7, #7]
 801d5e4:	2b01      	cmp	r3, #1
 801d5e6:	bf8c      	ite	hi
 801d5e8:	2301      	movhi	r3, #1
 801d5ea:	2300      	movls	r3, #0
 801d5ec:	b2db      	uxtb	r3, r3
 801d5ee:	461a      	mov	r2, r3
 801d5f0:	f107 0318 	add.w	r3, r7, #24
 801d5f4:	4611      	mov	r1, r2
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	f7fd fde8 	bl	801b1cc <chk_lock>
 801d5fc:	4603      	mov	r3, r0
 801d5fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d602:	79fb      	ldrb	r3, [r7, #7]
 801d604:	f003 031c 	and.w	r3, r3, #28
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d07f      	beq.n	801d70c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d60c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d610:	2b00      	cmp	r3, #0
 801d612:	d017      	beq.n	801d644 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d614:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d618:	2b04      	cmp	r3, #4
 801d61a:	d10e      	bne.n	801d63a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d61c:	f7fd fe32 	bl	801b284 <enq_lock>
 801d620:	4603      	mov	r3, r0
 801d622:	2b00      	cmp	r3, #0
 801d624:	d006      	beq.n	801d634 <f_open+0xc4>
 801d626:	f107 0318 	add.w	r3, r7, #24
 801d62a:	4618      	mov	r0, r3
 801d62c:	f7ff f894 	bl	801c758 <dir_register>
 801d630:	4603      	mov	r3, r0
 801d632:	e000      	b.n	801d636 <f_open+0xc6>
 801d634:	2312      	movs	r3, #18
 801d636:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d63a:	79fb      	ldrb	r3, [r7, #7]
 801d63c:	f043 0308 	orr.w	r3, r3, #8
 801d640:	71fb      	strb	r3, [r7, #7]
 801d642:	e010      	b.n	801d666 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d644:	7fbb      	ldrb	r3, [r7, #30]
 801d646:	f003 0311 	and.w	r3, r3, #17
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d003      	beq.n	801d656 <f_open+0xe6>
					res = FR_DENIED;
 801d64e:	2307      	movs	r3, #7
 801d650:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d654:	e007      	b.n	801d666 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d656:	79fb      	ldrb	r3, [r7, #7]
 801d658:	f003 0304 	and.w	r3, r3, #4
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d002      	beq.n	801d666 <f_open+0xf6>
 801d660:	2308      	movs	r3, #8
 801d662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d666:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d168      	bne.n	801d740 <f_open+0x1d0>
 801d66e:	79fb      	ldrb	r3, [r7, #7]
 801d670:	f003 0308 	and.w	r3, r3, #8
 801d674:	2b00      	cmp	r3, #0
 801d676:	d063      	beq.n	801d740 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d678:	f7fd fbaa 	bl	801add0 <get_fattime>
 801d67c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d680:	330e      	adds	r3, #14
 801d682:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d684:	4618      	mov	r0, r3
 801d686:	f7fd fcf7 	bl	801b078 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d68c:	3316      	adds	r3, #22
 801d68e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d690:	4618      	mov	r0, r3
 801d692:	f7fd fcf1 	bl	801b078 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d698:	330b      	adds	r3, #11
 801d69a:	2220      	movs	r2, #32
 801d69c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d69e:	697b      	ldr	r3, [r7, #20]
 801d6a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6a2:	4611      	mov	r1, r2
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	f7fe fcc6 	bl	801c036 <ld_clust>
 801d6aa:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d6ac:	697b      	ldr	r3, [r7, #20]
 801d6ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f7fe fcde 	bl	801c074 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6ba:	331c      	adds	r3, #28
 801d6bc:	2100      	movs	r1, #0
 801d6be:	4618      	mov	r0, r3
 801d6c0:	f7fd fcda 	bl	801b078 <st_dword>
					fs->wflag = 1;
 801d6c4:	697b      	ldr	r3, [r7, #20]
 801d6c6:	2201      	movs	r2, #1
 801d6c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d6ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d037      	beq.n	801d740 <f_open+0x1d0>
						dw = fs->winsect;
 801d6d0:	697b      	ldr	r3, [r7, #20]
 801d6d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d6d4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d6d6:	f107 0318 	add.w	r3, r7, #24
 801d6da:	2200      	movs	r2, #0
 801d6dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d6de:	4618      	mov	r0, r3
 801d6e0:	f7fe f9ce 	bl	801ba80 <remove_chain>
 801d6e4:	4603      	mov	r3, r0
 801d6e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d6ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d126      	bne.n	801d740 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d6f2:	697b      	ldr	r3, [r7, #20]
 801d6f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	f7fd ff18 	bl	801b52c <move_window>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d702:	697b      	ldr	r3, [r7, #20]
 801d704:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d706:	3a01      	subs	r2, #1
 801d708:	615a      	str	r2, [r3, #20]
 801d70a:	e019      	b.n	801d740 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d70c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d710:	2b00      	cmp	r3, #0
 801d712:	d115      	bne.n	801d740 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d714:	7fbb      	ldrb	r3, [r7, #30]
 801d716:	f003 0310 	and.w	r3, r3, #16
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d003      	beq.n	801d726 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d71e:	2304      	movs	r3, #4
 801d720:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d724:	e00c      	b.n	801d740 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d726:	79fb      	ldrb	r3, [r7, #7]
 801d728:	f003 0302 	and.w	r3, r3, #2
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d007      	beq.n	801d740 <f_open+0x1d0>
 801d730:	7fbb      	ldrb	r3, [r7, #30]
 801d732:	f003 0301 	and.w	r3, r3, #1
 801d736:	2b00      	cmp	r3, #0
 801d738:	d002      	beq.n	801d740 <f_open+0x1d0>
						res = FR_DENIED;
 801d73a:	2307      	movs	r3, #7
 801d73c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d740:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d744:	2b00      	cmp	r3, #0
 801d746:	d126      	bne.n	801d796 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d748:	79fb      	ldrb	r3, [r7, #7]
 801d74a:	f003 0308 	and.w	r3, r3, #8
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d003      	beq.n	801d75a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d752:	79fb      	ldrb	r3, [r7, #7]
 801d754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d758:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d75a:	697b      	ldr	r3, [r7, #20]
 801d75c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d762:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d768:	79fb      	ldrb	r3, [r7, #7]
 801d76a:	2b01      	cmp	r3, #1
 801d76c:	bf8c      	ite	hi
 801d76e:	2301      	movhi	r3, #1
 801d770:	2300      	movls	r3, #0
 801d772:	b2db      	uxtb	r3, r3
 801d774:	461a      	mov	r2, r3
 801d776:	f107 0318 	add.w	r3, r7, #24
 801d77a:	4611      	mov	r1, r2
 801d77c:	4618      	mov	r0, r3
 801d77e:	f7fd fda3 	bl	801b2c8 <inc_lock>
 801d782:	4602      	mov	r2, r0
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d788:	68fb      	ldr	r3, [r7, #12]
 801d78a:	691b      	ldr	r3, [r3, #16]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d102      	bne.n	801d796 <f_open+0x226>
 801d790:	2302      	movs	r3, #2
 801d792:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d796:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	f040 80a3 	bne.w	801d8e6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d7a0:	697b      	ldr	r3, [r7, #20]
 801d7a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d7a4:	4611      	mov	r1, r2
 801d7a6:	4618      	mov	r0, r3
 801d7a8:	f7fe fc45 	bl	801c036 <ld_clust>
 801d7ac:	4602      	mov	r2, r0
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7b4:	331c      	adds	r3, #28
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	f7fd fc20 	bl	801affc <ld_dword>
 801d7bc:	4602      	mov	r2, r0
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	2200      	movs	r2, #0
 801d7c6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d7c8:	697a      	ldr	r2, [r7, #20]
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d7ce:	697b      	ldr	r3, [r7, #20]
 801d7d0:	88da      	ldrh	r2, [r3, #6]
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	79fa      	ldrb	r2, [r7, #7]
 801d7da:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d7dc:	68fb      	ldr	r3, [r7, #12]
 801d7de:	2200      	movs	r2, #0
 801d7e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	3330      	adds	r3, #48	@ 0x30
 801d7f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d7f6:	2100      	movs	r1, #0
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	f7fd fc8a 	bl	801b112 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d7fe:	79fb      	ldrb	r3, [r7, #7]
 801d800:	f003 0320 	and.w	r3, r3, #32
 801d804:	2b00      	cmp	r3, #0
 801d806:	d06e      	beq.n	801d8e6 <f_open+0x376>
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	68db      	ldr	r3, [r3, #12]
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d06a      	beq.n	801d8e6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	68da      	ldr	r2, [r3, #12]
 801d814:	68fb      	ldr	r3, [r7, #12]
 801d816:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d818:	697b      	ldr	r3, [r7, #20]
 801d81a:	895b      	ldrh	r3, [r3, #10]
 801d81c:	461a      	mov	r2, r3
 801d81e:	697b      	ldr	r3, [r7, #20]
 801d820:	899b      	ldrh	r3, [r3, #12]
 801d822:	fb02 f303 	mul.w	r3, r2, r3
 801d826:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	689b      	ldr	r3, [r3, #8]
 801d82c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	68db      	ldr	r3, [r3, #12]
 801d832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d834:	e016      	b.n	801d864 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d83a:	4618      	mov	r0, r3
 801d83c:	f7fd ff33 	bl	801b6a6 <get_fat>
 801d840:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d844:	2b01      	cmp	r3, #1
 801d846:	d802      	bhi.n	801d84e <f_open+0x2de>
 801d848:	2302      	movs	r3, #2
 801d84a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d84e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d850:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d854:	d102      	bne.n	801d85c <f_open+0x2ec>
 801d856:	2301      	movs	r3, #1
 801d858:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d85c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d85e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d860:	1ad3      	subs	r3, r2, r3
 801d862:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d864:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d103      	bne.n	801d874 <f_open+0x304>
 801d86c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d86e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d870:	429a      	cmp	r2, r3
 801d872:	d8e0      	bhi.n	801d836 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d874:	68fb      	ldr	r3, [r7, #12]
 801d876:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d878:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d87a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d131      	bne.n	801d8e6 <f_open+0x376>
 801d882:	697b      	ldr	r3, [r7, #20]
 801d884:	899b      	ldrh	r3, [r3, #12]
 801d886:	461a      	mov	r2, r3
 801d888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d88a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d88e:	fb01 f202 	mul.w	r2, r1, r2
 801d892:	1a9b      	subs	r3, r3, r2
 801d894:	2b00      	cmp	r3, #0
 801d896:	d026      	beq.n	801d8e6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d898:	697b      	ldr	r3, [r7, #20]
 801d89a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7fd fee3 	bl	801b668 <clust2sect>
 801d8a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d8a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d103      	bne.n	801d8b2 <f_open+0x342>
						res = FR_INT_ERR;
 801d8aa:	2302      	movs	r3, #2
 801d8ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d8b0:	e019      	b.n	801d8e6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d8b2:	697b      	ldr	r3, [r7, #20]
 801d8b4:	899b      	ldrh	r3, [r3, #12]
 801d8b6:	461a      	mov	r2, r3
 801d8b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d8ba:	fbb3 f2f2 	udiv	r2, r3, r2
 801d8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8c0:	441a      	add	r2, r3
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d8c6:	697b      	ldr	r3, [r7, #20]
 801d8c8:	7858      	ldrb	r0, [r3, #1]
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	6a1a      	ldr	r2, [r3, #32]
 801d8d4:	2301      	movs	r3, #1
 801d8d6:	f7fd fb1b 	bl	801af10 <disk_read>
 801d8da:	4603      	mov	r3, r0
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d002      	beq.n	801d8e6 <f_open+0x376>
 801d8e0:	2301      	movs	r3, #1
 801d8e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d8e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d002      	beq.n	801d8f4 <f_open+0x384>
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d8f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	3768      	adds	r7, #104	@ 0x68
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bd80      	pop	{r7, pc}

0801d900 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d900:	b580      	push	{r7, lr}
 801d902:	b08c      	sub	sp, #48	@ 0x30
 801d904:	af00      	add	r7, sp, #0
 801d906:	60f8      	str	r0, [r7, #12]
 801d908:	60b9      	str	r1, [r7, #8]
 801d90a:	607a      	str	r2, [r7, #4]
 801d90c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d90e:	68bb      	ldr	r3, [r7, #8]
 801d910:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d912:	683b      	ldr	r3, [r7, #0]
 801d914:	2200      	movs	r2, #0
 801d916:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	f107 0210 	add.w	r2, r7, #16
 801d91e:	4611      	mov	r1, r2
 801d920:	4618      	mov	r0, r3
 801d922:	f7ff fda9 	bl	801d478 <validate>
 801d926:	4603      	mov	r3, r0
 801d928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d92c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d930:	2b00      	cmp	r3, #0
 801d932:	d107      	bne.n	801d944 <f_write+0x44>
 801d934:	68fb      	ldr	r3, [r7, #12]
 801d936:	7d5b      	ldrb	r3, [r3, #21]
 801d938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d93c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d940:	2b00      	cmp	r3, #0
 801d942:	d002      	beq.n	801d94a <f_write+0x4a>
 801d944:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d948:	e16a      	b.n	801dc20 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	7d1b      	ldrb	r3, [r3, #20]
 801d94e:	f003 0302 	and.w	r3, r3, #2
 801d952:	2b00      	cmp	r3, #0
 801d954:	d101      	bne.n	801d95a <f_write+0x5a>
 801d956:	2307      	movs	r3, #7
 801d958:	e162      	b.n	801dc20 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	699a      	ldr	r2, [r3, #24]
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	441a      	add	r2, r3
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	699b      	ldr	r3, [r3, #24]
 801d966:	429a      	cmp	r2, r3
 801d968:	f080 814c 	bcs.w	801dc04 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	699b      	ldr	r3, [r3, #24]
 801d970:	43db      	mvns	r3, r3
 801d972:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d974:	e146      	b.n	801dc04 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	699b      	ldr	r3, [r3, #24]
 801d97a:	693a      	ldr	r2, [r7, #16]
 801d97c:	8992      	ldrh	r2, [r2, #12]
 801d97e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d982:	fb01 f202 	mul.w	r2, r1, r2
 801d986:	1a9b      	subs	r3, r3, r2
 801d988:	2b00      	cmp	r3, #0
 801d98a:	f040 80f1 	bne.w	801db70 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	699b      	ldr	r3, [r3, #24]
 801d992:	693a      	ldr	r2, [r7, #16]
 801d994:	8992      	ldrh	r2, [r2, #12]
 801d996:	fbb3 f3f2 	udiv	r3, r3, r2
 801d99a:	693a      	ldr	r2, [r7, #16]
 801d99c:	8952      	ldrh	r2, [r2, #10]
 801d99e:	3a01      	subs	r2, #1
 801d9a0:	4013      	ands	r3, r2
 801d9a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d9a4:	69bb      	ldr	r3, [r7, #24]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d143      	bne.n	801da32 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	699b      	ldr	r3, [r3, #24]
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d10c      	bne.n	801d9cc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	689b      	ldr	r3, [r3, #8]
 801d9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d11a      	bne.n	801d9f4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	2100      	movs	r1, #0
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	f7fe f8c1 	bl	801bb4a <create_chain>
 801d9c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9ca:	e013      	b.n	801d9f4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d007      	beq.n	801d9e4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	699b      	ldr	r3, [r3, #24]
 801d9d8:	4619      	mov	r1, r3
 801d9da:	68f8      	ldr	r0, [r7, #12]
 801d9dc:	f7fe f94d 	bl	801bc7a <clmt_clust>
 801d9e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9e2:	e007      	b.n	801d9f4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d9e4:	68fa      	ldr	r2, [r7, #12]
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	69db      	ldr	r3, [r3, #28]
 801d9ea:	4619      	mov	r1, r3
 801d9ec:	4610      	mov	r0, r2
 801d9ee:	f7fe f8ac 	bl	801bb4a <create_chain>
 801d9f2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	f000 8109 	beq.w	801dc0e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9fe:	2b01      	cmp	r3, #1
 801da00:	d104      	bne.n	801da0c <f_write+0x10c>
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	2202      	movs	r2, #2
 801da06:	755a      	strb	r2, [r3, #21]
 801da08:	2302      	movs	r3, #2
 801da0a:	e109      	b.n	801dc20 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da12:	d104      	bne.n	801da1e <f_write+0x11e>
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	2201      	movs	r2, #1
 801da18:	755a      	strb	r2, [r3, #21]
 801da1a:	2301      	movs	r3, #1
 801da1c:	e100      	b.n	801dc20 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da22:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	689b      	ldr	r3, [r3, #8]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d102      	bne.n	801da32 <f_write+0x132>
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da30:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	7d1b      	ldrb	r3, [r3, #20]
 801da36:	b25b      	sxtb	r3, r3
 801da38:	2b00      	cmp	r3, #0
 801da3a:	da18      	bge.n	801da6e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801da3c:	693b      	ldr	r3, [r7, #16]
 801da3e:	7858      	ldrb	r0, [r3, #1]
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	6a1a      	ldr	r2, [r3, #32]
 801da4a:	2301      	movs	r3, #1
 801da4c:	f7fd fa80 	bl	801af50 <disk_write>
 801da50:	4603      	mov	r3, r0
 801da52:	2b00      	cmp	r3, #0
 801da54:	d004      	beq.n	801da60 <f_write+0x160>
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	2201      	movs	r2, #1
 801da5a:	755a      	strb	r2, [r3, #21]
 801da5c:	2301      	movs	r3, #1
 801da5e:	e0df      	b.n	801dc20 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	7d1b      	ldrb	r3, [r3, #20]
 801da64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da68:	b2da      	uxtb	r2, r3
 801da6a:	68fb      	ldr	r3, [r7, #12]
 801da6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801da6e:	693a      	ldr	r2, [r7, #16]
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	69db      	ldr	r3, [r3, #28]
 801da74:	4619      	mov	r1, r3
 801da76:	4610      	mov	r0, r2
 801da78:	f7fd fdf6 	bl	801b668 <clust2sect>
 801da7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801da7e:	697b      	ldr	r3, [r7, #20]
 801da80:	2b00      	cmp	r3, #0
 801da82:	d104      	bne.n	801da8e <f_write+0x18e>
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	2202      	movs	r2, #2
 801da88:	755a      	strb	r2, [r3, #21]
 801da8a:	2302      	movs	r3, #2
 801da8c:	e0c8      	b.n	801dc20 <f_write+0x320>
			sect += csect;
 801da8e:	697a      	ldr	r2, [r7, #20]
 801da90:	69bb      	ldr	r3, [r7, #24]
 801da92:	4413      	add	r3, r2
 801da94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801da96:	693b      	ldr	r3, [r7, #16]
 801da98:	899b      	ldrh	r3, [r3, #12]
 801da9a:	461a      	mov	r2, r3
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	fbb3 f3f2 	udiv	r3, r3, r2
 801daa2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801daa4:	6a3b      	ldr	r3, [r7, #32]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d043      	beq.n	801db32 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801daaa:	69ba      	ldr	r2, [r7, #24]
 801daac:	6a3b      	ldr	r3, [r7, #32]
 801daae:	4413      	add	r3, r2
 801dab0:	693a      	ldr	r2, [r7, #16]
 801dab2:	8952      	ldrh	r2, [r2, #10]
 801dab4:	4293      	cmp	r3, r2
 801dab6:	d905      	bls.n	801dac4 <f_write+0x1c4>
					cc = fs->csize - csect;
 801dab8:	693b      	ldr	r3, [r7, #16]
 801daba:	895b      	ldrh	r3, [r3, #10]
 801dabc:	461a      	mov	r2, r3
 801dabe:	69bb      	ldr	r3, [r7, #24]
 801dac0:	1ad3      	subs	r3, r2, r3
 801dac2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801dac4:	693b      	ldr	r3, [r7, #16]
 801dac6:	7858      	ldrb	r0, [r3, #1]
 801dac8:	6a3b      	ldr	r3, [r7, #32]
 801daca:	697a      	ldr	r2, [r7, #20]
 801dacc:	69f9      	ldr	r1, [r7, #28]
 801dace:	f7fd fa3f 	bl	801af50 <disk_write>
 801dad2:	4603      	mov	r3, r0
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d004      	beq.n	801dae2 <f_write+0x1e2>
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	2201      	movs	r2, #1
 801dadc:	755a      	strb	r2, [r3, #21]
 801dade:	2301      	movs	r3, #1
 801dae0:	e09e      	b.n	801dc20 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801dae2:	68fb      	ldr	r3, [r7, #12]
 801dae4:	6a1a      	ldr	r2, [r3, #32]
 801dae6:	697b      	ldr	r3, [r7, #20]
 801dae8:	1ad3      	subs	r3, r2, r3
 801daea:	6a3a      	ldr	r2, [r7, #32]
 801daec:	429a      	cmp	r2, r3
 801daee:	d918      	bls.n	801db22 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	6a1a      	ldr	r2, [r3, #32]
 801dafa:	697b      	ldr	r3, [r7, #20]
 801dafc:	1ad3      	subs	r3, r2, r3
 801dafe:	693a      	ldr	r2, [r7, #16]
 801db00:	8992      	ldrh	r2, [r2, #12]
 801db02:	fb02 f303 	mul.w	r3, r2, r3
 801db06:	69fa      	ldr	r2, [r7, #28]
 801db08:	18d1      	adds	r1, r2, r3
 801db0a:	693b      	ldr	r3, [r7, #16]
 801db0c:	899b      	ldrh	r3, [r3, #12]
 801db0e:	461a      	mov	r2, r3
 801db10:	f7fd fade 	bl	801b0d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	7d1b      	ldrb	r3, [r3, #20]
 801db18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801db1c:	b2da      	uxtb	r2, r3
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801db22:	693b      	ldr	r3, [r7, #16]
 801db24:	899b      	ldrh	r3, [r3, #12]
 801db26:	461a      	mov	r2, r3
 801db28:	6a3b      	ldr	r3, [r7, #32]
 801db2a:	fb02 f303 	mul.w	r3, r2, r3
 801db2e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801db30:	e04b      	b.n	801dbca <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	6a1b      	ldr	r3, [r3, #32]
 801db36:	697a      	ldr	r2, [r7, #20]
 801db38:	429a      	cmp	r2, r3
 801db3a:	d016      	beq.n	801db6a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	699a      	ldr	r2, [r3, #24]
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db44:	429a      	cmp	r2, r3
 801db46:	d210      	bcs.n	801db6a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801db48:	693b      	ldr	r3, [r7, #16]
 801db4a:	7858      	ldrb	r0, [r3, #1]
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db52:	2301      	movs	r3, #1
 801db54:	697a      	ldr	r2, [r7, #20]
 801db56:	f7fd f9db 	bl	801af10 <disk_read>
 801db5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d004      	beq.n	801db6a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	2201      	movs	r2, #1
 801db64:	755a      	strb	r2, [r3, #21]
 801db66:	2301      	movs	r3, #1
 801db68:	e05a      	b.n	801dc20 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	697a      	ldr	r2, [r7, #20]
 801db6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801db70:	693b      	ldr	r3, [r7, #16]
 801db72:	899b      	ldrh	r3, [r3, #12]
 801db74:	4618      	mov	r0, r3
 801db76:	68fb      	ldr	r3, [r7, #12]
 801db78:	699b      	ldr	r3, [r3, #24]
 801db7a:	693a      	ldr	r2, [r7, #16]
 801db7c:	8992      	ldrh	r2, [r2, #12]
 801db7e:	fbb3 f1f2 	udiv	r1, r3, r2
 801db82:	fb01 f202 	mul.w	r2, r1, r2
 801db86:	1a9b      	subs	r3, r3, r2
 801db88:	1ac3      	subs	r3, r0, r3
 801db8a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801db8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	429a      	cmp	r2, r3
 801db92:	d901      	bls.n	801db98 <f_write+0x298>
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	699b      	ldr	r3, [r3, #24]
 801dba2:	693a      	ldr	r2, [r7, #16]
 801dba4:	8992      	ldrh	r2, [r2, #12]
 801dba6:	fbb3 f0f2 	udiv	r0, r3, r2
 801dbaa:	fb00 f202 	mul.w	r2, r0, r2
 801dbae:	1a9b      	subs	r3, r3, r2
 801dbb0:	440b      	add	r3, r1
 801dbb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dbb4:	69f9      	ldr	r1, [r7, #28]
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7fd fa8a 	bl	801b0d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	7d1b      	ldrb	r3, [r3, #20]
 801dbc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801dbc4:	b2da      	uxtb	r2, r3
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801dbca:	69fa      	ldr	r2, [r7, #28]
 801dbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbce:	4413      	add	r3, r2
 801dbd0:	61fb      	str	r3, [r7, #28]
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	699a      	ldr	r2, [r3, #24]
 801dbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbd8:	441a      	add	r2, r3
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	619a      	str	r2, [r3, #24]
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	68da      	ldr	r2, [r3, #12]
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	699b      	ldr	r3, [r3, #24]
 801dbe6:	429a      	cmp	r2, r3
 801dbe8:	bf38      	it	cc
 801dbea:	461a      	movcc	r2, r3
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	60da      	str	r2, [r3, #12]
 801dbf0:	683b      	ldr	r3, [r7, #0]
 801dbf2:	681a      	ldr	r2, [r3, #0]
 801dbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbf6:	441a      	add	r2, r3
 801dbf8:	683b      	ldr	r3, [r7, #0]
 801dbfa:	601a      	str	r2, [r3, #0]
 801dbfc:	687a      	ldr	r2, [r7, #4]
 801dbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc00:	1ad3      	subs	r3, r2, r3
 801dc02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	f47f aeb5 	bne.w	801d976 <f_write+0x76>
 801dc0c:	e000      	b.n	801dc10 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801dc0e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801dc10:	68fb      	ldr	r3, [r7, #12]
 801dc12:	7d1b      	ldrb	r3, [r3, #20]
 801dc14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc18:	b2da      	uxtb	r2, r3
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801dc1e:	2300      	movs	r3, #0
}
 801dc20:	4618      	mov	r0, r3
 801dc22:	3730      	adds	r7, #48	@ 0x30
 801dc24:	46bd      	mov	sp, r7
 801dc26:	bd80      	pop	{r7, pc}

0801dc28 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dc28:	b580      	push	{r7, lr}
 801dc2a:	b086      	sub	sp, #24
 801dc2c:	af00      	add	r7, sp, #0
 801dc2e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	f107 0208 	add.w	r2, r7, #8
 801dc36:	4611      	mov	r1, r2
 801dc38:	4618      	mov	r0, r3
 801dc3a:	f7ff fc1d 	bl	801d478 <validate>
 801dc3e:	4603      	mov	r3, r0
 801dc40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801dc42:	7dfb      	ldrb	r3, [r7, #23]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d168      	bne.n	801dd1a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	7d1b      	ldrb	r3, [r3, #20]
 801dc4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d062      	beq.n	801dd1a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	7d1b      	ldrb	r3, [r3, #20]
 801dc58:	b25b      	sxtb	r3, r3
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	da15      	bge.n	801dc8a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dc5e:	68bb      	ldr	r3, [r7, #8]
 801dc60:	7858      	ldrb	r0, [r3, #1]
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	6a1a      	ldr	r2, [r3, #32]
 801dc6c:	2301      	movs	r3, #1
 801dc6e:	f7fd f96f 	bl	801af50 <disk_write>
 801dc72:	4603      	mov	r3, r0
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d001      	beq.n	801dc7c <f_sync+0x54>
 801dc78:	2301      	movs	r3, #1
 801dc7a:	e04f      	b.n	801dd1c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	7d1b      	ldrb	r3, [r3, #20]
 801dc80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc84:	b2da      	uxtb	r2, r3
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dc8a:	f7fd f8a1 	bl	801add0 <get_fattime>
 801dc8e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dc90:	68ba      	ldr	r2, [r7, #8]
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dc96:	4619      	mov	r1, r3
 801dc98:	4610      	mov	r0, r2
 801dc9a:	f7fd fc47 	bl	801b52c <move_window>
 801dc9e:	4603      	mov	r3, r0
 801dca0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dca2:	7dfb      	ldrb	r3, [r7, #23]
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d138      	bne.n	801dd1a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	330b      	adds	r3, #11
 801dcb2:	781a      	ldrb	r2, [r3, #0]
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	330b      	adds	r3, #11
 801dcb8:	f042 0220 	orr.w	r2, r2, #32
 801dcbc:	b2d2      	uxtb	r2, r2
 801dcbe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	6818      	ldr	r0, [r3, #0]
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	689b      	ldr	r3, [r3, #8]
 801dcc8:	461a      	mov	r2, r3
 801dcca:	68f9      	ldr	r1, [r7, #12]
 801dccc:	f7fe f9d2 	bl	801c074 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	f103 021c 	add.w	r2, r3, #28
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	68db      	ldr	r3, [r3, #12]
 801dcda:	4619      	mov	r1, r3
 801dcdc:	4610      	mov	r0, r2
 801dcde:	f7fd f9cb 	bl	801b078 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	3316      	adds	r3, #22
 801dce6:	6939      	ldr	r1, [r7, #16]
 801dce8:	4618      	mov	r0, r3
 801dcea:	f7fd f9c5 	bl	801b078 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	3312      	adds	r3, #18
 801dcf2:	2100      	movs	r1, #0
 801dcf4:	4618      	mov	r0, r3
 801dcf6:	f7fd f9a4 	bl	801b042 <st_word>
					fs->wflag = 1;
 801dcfa:	68bb      	ldr	r3, [r7, #8]
 801dcfc:	2201      	movs	r2, #1
 801dcfe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dd00:	68bb      	ldr	r3, [r7, #8]
 801dd02:	4618      	mov	r0, r3
 801dd04:	f7fd fc40 	bl	801b588 <sync_fs>
 801dd08:	4603      	mov	r3, r0
 801dd0a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	7d1b      	ldrb	r3, [r3, #20]
 801dd10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dd14:	b2da      	uxtb	r2, r3
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	3718      	adds	r7, #24
 801dd20:	46bd      	mov	sp, r7
 801dd22:	bd80      	pop	{r7, pc}

0801dd24 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b084      	sub	sp, #16
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dd2c:	6878      	ldr	r0, [r7, #4]
 801dd2e:	f7ff ff7b 	bl	801dc28 <f_sync>
 801dd32:	4603      	mov	r3, r0
 801dd34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dd36:	7bfb      	ldrb	r3, [r7, #15]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d118      	bne.n	801dd6e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	f107 0208 	add.w	r2, r7, #8
 801dd42:	4611      	mov	r1, r2
 801dd44:	4618      	mov	r0, r3
 801dd46:	f7ff fb97 	bl	801d478 <validate>
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dd4e:	7bfb      	ldrb	r3, [r7, #15]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d10c      	bne.n	801dd6e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	691b      	ldr	r3, [r3, #16]
 801dd58:	4618      	mov	r0, r3
 801dd5a:	f7fd fb43 	bl	801b3e4 <dec_lock>
 801dd5e:	4603      	mov	r3, r0
 801dd60:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dd62:	7bfb      	ldrb	r3, [r7, #15]
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d102      	bne.n	801dd6e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801dd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd70:	4618      	mov	r0, r3
 801dd72:	3710      	adds	r7, #16
 801dd74:	46bd      	mov	sp, r7
 801dd76:	bd80      	pop	{r7, pc}

0801dd78 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dd78:	b580      	push	{r7, lr}
 801dd7a:	b0a0      	sub	sp, #128	@ 0x80
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801dd80:	2300      	movs	r3, #0
 801dd82:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801dd84:	f107 010c 	add.w	r1, r7, #12
 801dd88:	1d3b      	adds	r3, r7, #4
 801dd8a:	2202      	movs	r2, #2
 801dd8c:	4618      	mov	r0, r3
 801dd8e:	f7ff f8ed 	bl	801cf6c <find_volume>
 801dd92:	4603      	mov	r3, r0
 801dd94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801dd9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	f040 808e 	bne.w	801dec2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801dda6:	687a      	ldr	r2, [r7, #4]
 801dda8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddac:	4611      	mov	r1, r2
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f7fe ffcc 	bl	801cd4c <follow_path>
 801ddb4:	4603      	mov	r3, r0
 801ddb6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801ddba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d108      	bne.n	801ddd4 <f_unlink+0x5c>
 801ddc2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddc6:	2102      	movs	r1, #2
 801ddc8:	4618      	mov	r0, r3
 801ddca:	f7fd f9ff 	bl	801b1cc <chk_lock>
 801ddce:	4603      	mov	r3, r0
 801ddd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801ddd4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d172      	bne.n	801dec2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801dddc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801dde0:	b25b      	sxtb	r3, r3
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	da03      	bge.n	801ddee <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801dde6:	2306      	movs	r3, #6
 801dde8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801ddec:	e008      	b.n	801de00 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801ddee:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801ddf2:	f003 0301 	and.w	r3, r3, #1
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d002      	beq.n	801de00 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801ddfa:	2307      	movs	r3, #7
 801ddfc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801de00:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de04:	2b00      	cmp	r3, #0
 801de06:	d134      	bne.n	801de72 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801de0c:	4611      	mov	r1, r2
 801de0e:	4618      	mov	r0, r3
 801de10:	f7fe f911 	bl	801c036 <ld_clust>
 801de14:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801de16:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801de1a:	f003 0310 	and.w	r3, r3, #16
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d027      	beq.n	801de72 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801de26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de28:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801de2a:	f107 0310 	add.w	r3, r7, #16
 801de2e:	2100      	movs	r1, #0
 801de30:	4618      	mov	r0, r3
 801de32:	f7fd ff5a 	bl	801bcea <dir_sdi>
 801de36:	4603      	mov	r3, r0
 801de38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801de3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de40:	2b00      	cmp	r3, #0
 801de42:	d116      	bne.n	801de72 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801de44:	f107 0310 	add.w	r3, r7, #16
 801de48:	2100      	movs	r1, #0
 801de4a:	4618      	mov	r0, r3
 801de4c:	f7fe fb1d 	bl	801c48a <dir_read>
 801de50:	4603      	mov	r3, r0
 801de52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801de56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d102      	bne.n	801de64 <f_unlink+0xec>
 801de5e:	2307      	movs	r3, #7
 801de60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801de64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de68:	2b04      	cmp	r3, #4
 801de6a:	d102      	bne.n	801de72 <f_unlink+0xfa>
 801de6c:	2300      	movs	r3, #0
 801de6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801de72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de76:	2b00      	cmp	r3, #0
 801de78:	d123      	bne.n	801dec2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801de7a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de7e:	4618      	mov	r0, r3
 801de80:	f7fe fd62 	bl	801c948 <dir_remove>
 801de84:	4603      	mov	r3, r0
 801de86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801de8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d10c      	bne.n	801deac <f_unlink+0x134>
 801de92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de94:	2b00      	cmp	r3, #0
 801de96:	d009      	beq.n	801deac <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801de98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de9c:	2200      	movs	r2, #0
 801de9e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801dea0:	4618      	mov	r0, r3
 801dea2:	f7fd fded 	bl	801ba80 <remove_chain>
 801dea6:	4603      	mov	r3, r0
 801dea8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801deac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	d106      	bne.n	801dec2 <f_unlink+0x14a>
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	4618      	mov	r0, r3
 801deb8:	f7fd fb66 	bl	801b588 <sync_fs>
 801debc:	4603      	mov	r3, r0
 801debe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801dec2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801dec6:	4618      	mov	r0, r3
 801dec8:	3780      	adds	r7, #128	@ 0x80
 801deca:	46bd      	mov	sp, r7
 801decc:	bd80      	pop	{r7, pc}
	...

0801ded0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801ded0:	b480      	push	{r7}
 801ded2:	b087      	sub	sp, #28
 801ded4:	af00      	add	r7, sp, #0
 801ded6:	60f8      	str	r0, [r7, #12]
 801ded8:	60b9      	str	r1, [r7, #8]
 801deda:	4613      	mov	r3, r2
 801dedc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801dede:	2301      	movs	r3, #1
 801dee0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801dee2:	2300      	movs	r3, #0
 801dee4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801dee6:	4b1f      	ldr	r3, [pc, #124]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801dee8:	7a5b      	ldrb	r3, [r3, #9]
 801deea:	b2db      	uxtb	r3, r3
 801deec:	2b00      	cmp	r3, #0
 801deee:	d131      	bne.n	801df54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801def0:	4b1c      	ldr	r3, [pc, #112]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801def2:	7a5b      	ldrb	r3, [r3, #9]
 801def4:	b2db      	uxtb	r3, r3
 801def6:	461a      	mov	r2, r3
 801def8:	4b1a      	ldr	r3, [pc, #104]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801defa:	2100      	movs	r1, #0
 801defc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801defe:	4b19      	ldr	r3, [pc, #100]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df00:	7a5b      	ldrb	r3, [r3, #9]
 801df02:	b2db      	uxtb	r3, r3
 801df04:	4a17      	ldr	r2, [pc, #92]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df06:	009b      	lsls	r3, r3, #2
 801df08:	4413      	add	r3, r2
 801df0a:	68fa      	ldr	r2, [r7, #12]
 801df0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801df0e:	4b15      	ldr	r3, [pc, #84]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df10:	7a5b      	ldrb	r3, [r3, #9]
 801df12:	b2db      	uxtb	r3, r3
 801df14:	461a      	mov	r2, r3
 801df16:	4b13      	ldr	r3, [pc, #76]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df18:	4413      	add	r3, r2
 801df1a:	79fa      	ldrb	r2, [r7, #7]
 801df1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801df1e:	4b11      	ldr	r3, [pc, #68]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df20:	7a5b      	ldrb	r3, [r3, #9]
 801df22:	b2db      	uxtb	r3, r3
 801df24:	1c5a      	adds	r2, r3, #1
 801df26:	b2d1      	uxtb	r1, r2
 801df28:	4a0e      	ldr	r2, [pc, #56]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df2a:	7251      	strb	r1, [r2, #9]
 801df2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801df2e:	7dbb      	ldrb	r3, [r7, #22]
 801df30:	3330      	adds	r3, #48	@ 0x30
 801df32:	b2da      	uxtb	r2, r3
 801df34:	68bb      	ldr	r3, [r7, #8]
 801df36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801df38:	68bb      	ldr	r3, [r7, #8]
 801df3a:	3301      	adds	r3, #1
 801df3c:	223a      	movs	r2, #58	@ 0x3a
 801df3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801df40:	68bb      	ldr	r3, [r7, #8]
 801df42:	3302      	adds	r3, #2
 801df44:	222f      	movs	r2, #47	@ 0x2f
 801df46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801df48:	68bb      	ldr	r3, [r7, #8]
 801df4a:	3303      	adds	r3, #3
 801df4c:	2200      	movs	r2, #0
 801df4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801df50:	2300      	movs	r3, #0
 801df52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801df54:	7dfb      	ldrb	r3, [r7, #23]
}
 801df56:	4618      	mov	r0, r3
 801df58:	371c      	adds	r7, #28
 801df5a:	46bd      	mov	sp, r7
 801df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df60:	4770      	bx	lr
 801df62:	bf00      	nop
 801df64:	24000768 	.word	0x24000768

0801df68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	b082      	sub	sp, #8
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	6078      	str	r0, [r7, #4]
 801df70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801df72:	2200      	movs	r2, #0
 801df74:	6839      	ldr	r1, [r7, #0]
 801df76:	6878      	ldr	r0, [r7, #4]
 801df78:	f7ff ffaa 	bl	801ded0 <FATFS_LinkDriverEx>
 801df7c:	4603      	mov	r3, r0
}
 801df7e:	4618      	mov	r0, r3
 801df80:	3708      	adds	r7, #8
 801df82:	46bd      	mov	sp, r7
 801df84:	bd80      	pop	{r7, pc}
	...

0801df88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801df88:	b480      	push	{r7}
 801df8a:	b085      	sub	sp, #20
 801df8c:	af00      	add	r7, sp, #0
 801df8e:	4603      	mov	r3, r0
 801df90:	6039      	str	r1, [r7, #0]
 801df92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801df94:	88fb      	ldrh	r3, [r7, #6]
 801df96:	2b7f      	cmp	r3, #127	@ 0x7f
 801df98:	d802      	bhi.n	801dfa0 <ff_convert+0x18>
		c = chr;
 801df9a:	88fb      	ldrh	r3, [r7, #6]
 801df9c:	81fb      	strh	r3, [r7, #14]
 801df9e:	e025      	b.n	801dfec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801dfa0:	683b      	ldr	r3, [r7, #0]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d00b      	beq.n	801dfbe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dfa6:	88fb      	ldrh	r3, [r7, #6]
 801dfa8:	2bff      	cmp	r3, #255	@ 0xff
 801dfaa:	d805      	bhi.n	801dfb8 <ff_convert+0x30>
 801dfac:	88fb      	ldrh	r3, [r7, #6]
 801dfae:	3b80      	subs	r3, #128	@ 0x80
 801dfb0:	4a12      	ldr	r2, [pc, #72]	@ (801dffc <ff_convert+0x74>)
 801dfb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfb6:	e000      	b.n	801dfba <ff_convert+0x32>
 801dfb8:	2300      	movs	r3, #0
 801dfba:	81fb      	strh	r3, [r7, #14]
 801dfbc:	e016      	b.n	801dfec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801dfbe:	2300      	movs	r3, #0
 801dfc0:	81fb      	strh	r3, [r7, #14]
 801dfc2:	e009      	b.n	801dfd8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801dfc4:	89fb      	ldrh	r3, [r7, #14]
 801dfc6:	4a0d      	ldr	r2, [pc, #52]	@ (801dffc <ff_convert+0x74>)
 801dfc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfcc:	88fa      	ldrh	r2, [r7, #6]
 801dfce:	429a      	cmp	r2, r3
 801dfd0:	d006      	beq.n	801dfe0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801dfd2:	89fb      	ldrh	r3, [r7, #14]
 801dfd4:	3301      	adds	r3, #1
 801dfd6:	81fb      	strh	r3, [r7, #14]
 801dfd8:	89fb      	ldrh	r3, [r7, #14]
 801dfda:	2b7f      	cmp	r3, #127	@ 0x7f
 801dfdc:	d9f2      	bls.n	801dfc4 <ff_convert+0x3c>
 801dfde:	e000      	b.n	801dfe2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801dfe0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801dfe2:	89fb      	ldrh	r3, [r7, #14]
 801dfe4:	3380      	adds	r3, #128	@ 0x80
 801dfe6:	b29b      	uxth	r3, r3
 801dfe8:	b2db      	uxtb	r3, r3
 801dfea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801dfec:	89fb      	ldrh	r3, [r7, #14]
}
 801dfee:	4618      	mov	r0, r3
 801dff0:	3714      	adds	r7, #20
 801dff2:	46bd      	mov	sp, r7
 801dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff8:	4770      	bx	lr
 801dffa:	bf00      	nop
 801dffc:	0801eca4 	.word	0x0801eca4

0801e000 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801e000:	b480      	push	{r7}
 801e002:	b087      	sub	sp, #28
 801e004:	af00      	add	r7, sp, #0
 801e006:	4603      	mov	r3, r0
 801e008:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801e00a:	88fb      	ldrh	r3, [r7, #6]
 801e00c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e010:	d201      	bcs.n	801e016 <ff_wtoupper+0x16>
 801e012:	4b3e      	ldr	r3, [pc, #248]	@ (801e10c <ff_wtoupper+0x10c>)
 801e014:	e000      	b.n	801e018 <ff_wtoupper+0x18>
 801e016:	4b3e      	ldr	r3, [pc, #248]	@ (801e110 <ff_wtoupper+0x110>)
 801e018:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801e01a:	697b      	ldr	r3, [r7, #20]
 801e01c:	1c9a      	adds	r2, r3, #2
 801e01e:	617a      	str	r2, [r7, #20]
 801e020:	881b      	ldrh	r3, [r3, #0]
 801e022:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801e024:	8a7b      	ldrh	r3, [r7, #18]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d068      	beq.n	801e0fc <ff_wtoupper+0xfc>
 801e02a:	88fa      	ldrh	r2, [r7, #6]
 801e02c:	8a7b      	ldrh	r3, [r7, #18]
 801e02e:	429a      	cmp	r2, r3
 801e030:	d364      	bcc.n	801e0fc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801e032:	697b      	ldr	r3, [r7, #20]
 801e034:	1c9a      	adds	r2, r3, #2
 801e036:	617a      	str	r2, [r7, #20]
 801e038:	881b      	ldrh	r3, [r3, #0]
 801e03a:	823b      	strh	r3, [r7, #16]
 801e03c:	8a3b      	ldrh	r3, [r7, #16]
 801e03e:	0a1b      	lsrs	r3, r3, #8
 801e040:	81fb      	strh	r3, [r7, #14]
 801e042:	8a3b      	ldrh	r3, [r7, #16]
 801e044:	b2db      	uxtb	r3, r3
 801e046:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801e048:	88fa      	ldrh	r2, [r7, #6]
 801e04a:	8a79      	ldrh	r1, [r7, #18]
 801e04c:	8a3b      	ldrh	r3, [r7, #16]
 801e04e:	440b      	add	r3, r1
 801e050:	429a      	cmp	r2, r3
 801e052:	da49      	bge.n	801e0e8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801e054:	89fb      	ldrh	r3, [r7, #14]
 801e056:	2b08      	cmp	r3, #8
 801e058:	d84f      	bhi.n	801e0fa <ff_wtoupper+0xfa>
 801e05a:	a201      	add	r2, pc, #4	@ (adr r2, 801e060 <ff_wtoupper+0x60>)
 801e05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e060:	0801e085 	.word	0x0801e085
 801e064:	0801e097 	.word	0x0801e097
 801e068:	0801e0ad 	.word	0x0801e0ad
 801e06c:	0801e0b5 	.word	0x0801e0b5
 801e070:	0801e0bd 	.word	0x0801e0bd
 801e074:	0801e0c5 	.word	0x0801e0c5
 801e078:	0801e0cd 	.word	0x0801e0cd
 801e07c:	0801e0d5 	.word	0x0801e0d5
 801e080:	0801e0dd 	.word	0x0801e0dd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801e084:	88fa      	ldrh	r2, [r7, #6]
 801e086:	8a7b      	ldrh	r3, [r7, #18]
 801e088:	1ad3      	subs	r3, r2, r3
 801e08a:	005b      	lsls	r3, r3, #1
 801e08c:	697a      	ldr	r2, [r7, #20]
 801e08e:	4413      	add	r3, r2
 801e090:	881b      	ldrh	r3, [r3, #0]
 801e092:	80fb      	strh	r3, [r7, #6]
 801e094:	e027      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801e096:	88fa      	ldrh	r2, [r7, #6]
 801e098:	8a7b      	ldrh	r3, [r7, #18]
 801e09a:	1ad3      	subs	r3, r2, r3
 801e09c:	b29b      	uxth	r3, r3
 801e09e:	f003 0301 	and.w	r3, r3, #1
 801e0a2:	b29b      	uxth	r3, r3
 801e0a4:	88fa      	ldrh	r2, [r7, #6]
 801e0a6:	1ad3      	subs	r3, r2, r3
 801e0a8:	80fb      	strh	r3, [r7, #6]
 801e0aa:	e01c      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801e0ac:	88fb      	ldrh	r3, [r7, #6]
 801e0ae:	3b10      	subs	r3, #16
 801e0b0:	80fb      	strh	r3, [r7, #6]
 801e0b2:	e018      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e0b4:	88fb      	ldrh	r3, [r7, #6]
 801e0b6:	3b20      	subs	r3, #32
 801e0b8:	80fb      	strh	r3, [r7, #6]
 801e0ba:	e014      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e0bc:	88fb      	ldrh	r3, [r7, #6]
 801e0be:	3b30      	subs	r3, #48	@ 0x30
 801e0c0:	80fb      	strh	r3, [r7, #6]
 801e0c2:	e010      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e0c4:	88fb      	ldrh	r3, [r7, #6]
 801e0c6:	3b1a      	subs	r3, #26
 801e0c8:	80fb      	strh	r3, [r7, #6]
 801e0ca:	e00c      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e0cc:	88fb      	ldrh	r3, [r7, #6]
 801e0ce:	3308      	adds	r3, #8
 801e0d0:	80fb      	strh	r3, [r7, #6]
 801e0d2:	e008      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e0d4:	88fb      	ldrh	r3, [r7, #6]
 801e0d6:	3b50      	subs	r3, #80	@ 0x50
 801e0d8:	80fb      	strh	r3, [r7, #6]
 801e0da:	e004      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e0dc:	88fb      	ldrh	r3, [r7, #6]
 801e0de:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e0e2:	80fb      	strh	r3, [r7, #6]
 801e0e4:	bf00      	nop
			}
			break;
 801e0e6:	e008      	b.n	801e0fa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e0e8:	89fb      	ldrh	r3, [r7, #14]
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	d195      	bne.n	801e01a <ff_wtoupper+0x1a>
 801e0ee:	8a3b      	ldrh	r3, [r7, #16]
 801e0f0:	005b      	lsls	r3, r3, #1
 801e0f2:	697a      	ldr	r2, [r7, #20]
 801e0f4:	4413      	add	r3, r2
 801e0f6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e0f8:	e78f      	b.n	801e01a <ff_wtoupper+0x1a>
			break;
 801e0fa:	bf00      	nop
	}

	return chr;
 801e0fc:	88fb      	ldrh	r3, [r7, #6]
}
 801e0fe:	4618      	mov	r0, r3
 801e100:	371c      	adds	r7, #28
 801e102:	46bd      	mov	sp, r7
 801e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e108:	4770      	bx	lr
 801e10a:	bf00      	nop
 801e10c:	0801eda4 	.word	0x0801eda4
 801e110:	0801ef98 	.word	0x0801ef98

0801e114 <memset>:
 801e114:	4402      	add	r2, r0
 801e116:	4603      	mov	r3, r0
 801e118:	4293      	cmp	r3, r2
 801e11a:	d100      	bne.n	801e11e <memset+0xa>
 801e11c:	4770      	bx	lr
 801e11e:	f803 1b01 	strb.w	r1, [r3], #1
 801e122:	e7f9      	b.n	801e118 <memset+0x4>

0801e124 <__errno>:
 801e124:	4b01      	ldr	r3, [pc, #4]	@ (801e12c <__errno+0x8>)
 801e126:	6818      	ldr	r0, [r3, #0]
 801e128:	4770      	bx	lr
 801e12a:	bf00      	nop
 801e12c:	24000028 	.word	0x24000028

0801e130 <__libc_init_array>:
 801e130:	b570      	push	{r4, r5, r6, lr}
 801e132:	4d0d      	ldr	r5, [pc, #52]	@ (801e168 <__libc_init_array+0x38>)
 801e134:	4c0d      	ldr	r4, [pc, #52]	@ (801e16c <__libc_init_array+0x3c>)
 801e136:	1b64      	subs	r4, r4, r5
 801e138:	10a4      	asrs	r4, r4, #2
 801e13a:	2600      	movs	r6, #0
 801e13c:	42a6      	cmp	r6, r4
 801e13e:	d109      	bne.n	801e154 <__libc_init_array+0x24>
 801e140:	4d0b      	ldr	r5, [pc, #44]	@ (801e170 <__libc_init_array+0x40>)
 801e142:	4c0c      	ldr	r4, [pc, #48]	@ (801e174 <__libc_init_array+0x44>)
 801e144:	f000 fd00 	bl	801eb48 <_init>
 801e148:	1b64      	subs	r4, r4, r5
 801e14a:	10a4      	asrs	r4, r4, #2
 801e14c:	2600      	movs	r6, #0
 801e14e:	42a6      	cmp	r6, r4
 801e150:	d105      	bne.n	801e15e <__libc_init_array+0x2e>
 801e152:	bd70      	pop	{r4, r5, r6, pc}
 801e154:	f855 3b04 	ldr.w	r3, [r5], #4
 801e158:	4798      	blx	r3
 801e15a:	3601      	adds	r6, #1
 801e15c:	e7ee      	b.n	801e13c <__libc_init_array+0xc>
 801e15e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e162:	4798      	blx	r3
 801e164:	3601      	adds	r6, #1
 801e166:	e7f2      	b.n	801e14e <__libc_init_array+0x1e>
 801e168:	08020988 	.word	0x08020988
 801e16c:	08020988 	.word	0x08020988
 801e170:	08020988 	.word	0x08020988
 801e174:	0802098c 	.word	0x0802098c

0801e178 <atan2>:
 801e178:	f000 bbae 	b.w	801e8d8 <__ieee754_atan2>
 801e17c:	0000      	movs	r0, r0
	...

0801e180 <sqrt>:
 801e180:	b508      	push	{r3, lr}
 801e182:	ed2d 8b04 	vpush	{d8-d9}
 801e186:	eeb0 8b40 	vmov.f64	d8, d0
 801e18a:	f000 fba1 	bl	801e8d0 <__ieee754_sqrt>
 801e18e:	eeb4 8b48 	vcmp.f64	d8, d8
 801e192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e196:	d60c      	bvs.n	801e1b2 <sqrt+0x32>
 801e198:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e1b8 <sqrt+0x38>
 801e19c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1a4:	d505      	bpl.n	801e1b2 <sqrt+0x32>
 801e1a6:	f7ff ffbd 	bl	801e124 <__errno>
 801e1aa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e1ae:	2321      	movs	r3, #33	@ 0x21
 801e1b0:	6003      	str	r3, [r0, #0]
 801e1b2:	ecbd 8b04 	vpop	{d8-d9}
 801e1b6:	bd08      	pop	{r3, pc}
	...

0801e1c0 <atan>:
 801e1c0:	b538      	push	{r3, r4, r5, lr}
 801e1c2:	eeb0 7b40 	vmov.f64	d7, d0
 801e1c6:	ee17 5a90 	vmov	r5, s15
 801e1ca:	4b73      	ldr	r3, [pc, #460]	@ (801e398 <atan+0x1d8>)
 801e1cc:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e1d0:	429c      	cmp	r4, r3
 801e1d2:	d913      	bls.n	801e1fc <atan+0x3c>
 801e1d4:	4b71      	ldr	r3, [pc, #452]	@ (801e39c <atan+0x1dc>)
 801e1d6:	429c      	cmp	r4, r3
 801e1d8:	d803      	bhi.n	801e1e2 <atan+0x22>
 801e1da:	d107      	bne.n	801e1ec <atan+0x2c>
 801e1dc:	ee10 3a10 	vmov	r3, s0
 801e1e0:	b123      	cbz	r3, 801e1ec <atan+0x2c>
 801e1e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e1e6:	eeb0 0b47 	vmov.f64	d0, d7
 801e1ea:	bd38      	pop	{r3, r4, r5, pc}
 801e1ec:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e328 <atan+0x168>
 801e1f0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e330 <atan+0x170>
 801e1f4:	2d00      	cmp	r5, #0
 801e1f6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e1fa:	e7f4      	b.n	801e1e6 <atan+0x26>
 801e1fc:	4b68      	ldr	r3, [pc, #416]	@ (801e3a0 <atan+0x1e0>)
 801e1fe:	429c      	cmp	r4, r3
 801e200:	d811      	bhi.n	801e226 <atan+0x66>
 801e202:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e206:	429c      	cmp	r4, r3
 801e208:	d80a      	bhi.n	801e220 <atan+0x60>
 801e20a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e20e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e338 <atan+0x178>
 801e212:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e216:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e21e:	dce2      	bgt.n	801e1e6 <atan+0x26>
 801e220:	f04f 33ff 	mov.w	r3, #4294967295
 801e224:	e013      	b.n	801e24e <atan+0x8e>
 801e226:	f000 f8c5 	bl	801e3b4 <fabs>
 801e22a:	4b5e      	ldr	r3, [pc, #376]	@ (801e3a4 <atan+0x1e4>)
 801e22c:	429c      	cmp	r4, r3
 801e22e:	d84f      	bhi.n	801e2d0 <atan+0x110>
 801e230:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e234:	429c      	cmp	r4, r3
 801e236:	d841      	bhi.n	801e2bc <atan+0xfc>
 801e238:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e23c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e240:	2300      	movs	r3, #0
 801e242:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e246:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e24a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e24e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e340 <atan+0x180>
 801e252:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e256:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e25a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e348 <atan+0x188>
 801e25e:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e262:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e350 <atan+0x190>
 801e266:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e26a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e358 <atan+0x198>
 801e26e:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e272:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e360 <atan+0x1a0>
 801e276:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e27a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e368 <atan+0x1a8>
 801e27e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e370 <atan+0x1b0>
 801e282:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e286:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e378 <atan+0x1b8>
 801e28a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e28e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e380 <atan+0x1c0>
 801e292:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e296:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e388 <atan+0x1c8>
 801e29a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e29e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e390 <atan+0x1d0>
 801e2a2:	1c5a      	adds	r2, r3, #1
 801e2a4:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2a8:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e2ac:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e2b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e2b4:	d121      	bne.n	801e2fa <atan+0x13a>
 801e2b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e2ba:	e794      	b.n	801e1e6 <atan+0x26>
 801e2bc:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e2c0:	2301      	movs	r3, #1
 801e2c2:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2c6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e2ca:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e2ce:	e7be      	b.n	801e24e <atan+0x8e>
 801e2d0:	4b35      	ldr	r3, [pc, #212]	@ (801e3a8 <atan+0x1e8>)
 801e2d2:	429c      	cmp	r4, r3
 801e2d4:	d20b      	bcs.n	801e2ee <atan+0x12e>
 801e2d6:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e2da:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e2de:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2e2:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e2e6:	2302      	movs	r3, #2
 801e2e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e2ec:	e7af      	b.n	801e24e <atan+0x8e>
 801e2ee:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e2f2:	2303      	movs	r3, #3
 801e2f4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e2f8:	e7a9      	b.n	801e24e <atan+0x8e>
 801e2fa:	4a2c      	ldr	r2, [pc, #176]	@ (801e3ac <atan+0x1ec>)
 801e2fc:	492c      	ldr	r1, [pc, #176]	@ (801e3b0 <atan+0x1f0>)
 801e2fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e302:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e306:	ed93 5b00 	vldr	d5, [r3]
 801e30a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e30e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e312:	ed92 7b00 	vldr	d7, [r2]
 801e316:	2d00      	cmp	r5, #0
 801e318:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e31c:	bfb8      	it	lt
 801e31e:	eeb1 7b47 	vneglt.f64	d7, d7
 801e322:	e760      	b.n	801e1e6 <atan+0x26>
 801e324:	f3af 8000 	nop.w
 801e328:	54442d18 	.word	0x54442d18
 801e32c:	bff921fb 	.word	0xbff921fb
 801e330:	54442d18 	.word	0x54442d18
 801e334:	3ff921fb 	.word	0x3ff921fb
 801e338:	8800759c 	.word	0x8800759c
 801e33c:	7e37e43c 	.word	0x7e37e43c
 801e340:	e322da11 	.word	0xe322da11
 801e344:	3f90ad3a 	.word	0x3f90ad3a
 801e348:	24760deb 	.word	0x24760deb
 801e34c:	3fa97b4b 	.word	0x3fa97b4b
 801e350:	a0d03d51 	.word	0xa0d03d51
 801e354:	3fb10d66 	.word	0x3fb10d66
 801e358:	c54c206e 	.word	0xc54c206e
 801e35c:	3fb745cd 	.word	0x3fb745cd
 801e360:	920083ff 	.word	0x920083ff
 801e364:	3fc24924 	.word	0x3fc24924
 801e368:	5555550d 	.word	0x5555550d
 801e36c:	3fd55555 	.word	0x3fd55555
 801e370:	52defd9a 	.word	0x52defd9a
 801e374:	bfadde2d 	.word	0xbfadde2d
 801e378:	2c6a6c2f 	.word	0x2c6a6c2f
 801e37c:	bfa2b444 	.word	0xbfa2b444
 801e380:	af749a6d 	.word	0xaf749a6d
 801e384:	bfb3b0f2 	.word	0xbfb3b0f2
 801e388:	fe231671 	.word	0xfe231671
 801e38c:	bfbc71c6 	.word	0xbfbc71c6
 801e390:	9998ebc4 	.word	0x9998ebc4
 801e394:	bfc99999 	.word	0xbfc99999
 801e398:	440fffff 	.word	0x440fffff
 801e39c:	7ff00000 	.word	0x7ff00000
 801e3a0:	3fdbffff 	.word	0x3fdbffff
 801e3a4:	3ff2ffff 	.word	0x3ff2ffff
 801e3a8:	40038000 	.word	0x40038000
 801e3ac:	0801f078 	.word	0x0801f078
 801e3b0:	0801f058 	.word	0x0801f058

0801e3b4 <fabs>:
 801e3b4:	ec51 0b10 	vmov	r0, r1, d0
 801e3b8:	4602      	mov	r2, r0
 801e3ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e3be:	ec43 2b10 	vmov	d0, r2, r3
 801e3c2:	4770      	bx	lr

0801e3c4 <checkint>:
 801e3c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e3c8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e3cc:	429a      	cmp	r2, r3
 801e3ce:	b570      	push	{r4, r5, r6, lr}
 801e3d0:	dd2a      	ble.n	801e428 <checkint+0x64>
 801e3d2:	f240 4333 	movw	r3, #1075	@ 0x433
 801e3d6:	429a      	cmp	r2, r3
 801e3d8:	dc24      	bgt.n	801e424 <checkint+0x60>
 801e3da:	1a9b      	subs	r3, r3, r2
 801e3dc:	f1a3 0620 	sub.w	r6, r3, #32
 801e3e0:	f04f 32ff 	mov.w	r2, #4294967295
 801e3e4:	fa02 f403 	lsl.w	r4, r2, r3
 801e3e8:	fa02 f606 	lsl.w	r6, r2, r6
 801e3ec:	f1c3 0520 	rsb	r5, r3, #32
 801e3f0:	fa22 f505 	lsr.w	r5, r2, r5
 801e3f4:	4334      	orrs	r4, r6
 801e3f6:	432c      	orrs	r4, r5
 801e3f8:	409a      	lsls	r2, r3
 801e3fa:	ea20 0202 	bic.w	r2, r0, r2
 801e3fe:	ea21 0404 	bic.w	r4, r1, r4
 801e402:	4322      	orrs	r2, r4
 801e404:	f1a3 0420 	sub.w	r4, r3, #32
 801e408:	f1c3 0220 	rsb	r2, r3, #32
 801e40c:	d10c      	bne.n	801e428 <checkint+0x64>
 801e40e:	40d8      	lsrs	r0, r3
 801e410:	fa01 f302 	lsl.w	r3, r1, r2
 801e414:	4318      	orrs	r0, r3
 801e416:	40e1      	lsrs	r1, r4
 801e418:	4308      	orrs	r0, r1
 801e41a:	f000 0001 	and.w	r0, r0, #1
 801e41e:	f1d0 0002 	rsbs	r0, r0, #2
 801e422:	bd70      	pop	{r4, r5, r6, pc}
 801e424:	2002      	movs	r0, #2
 801e426:	e7fc      	b.n	801e422 <checkint+0x5e>
 801e428:	2000      	movs	r0, #0
 801e42a:	e7fa      	b.n	801e422 <checkint+0x5e>
 801e42c:	0000      	movs	r0, r0
	...

0801e430 <pow>:
 801e430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e434:	ee10 4a90 	vmov	r4, s1
 801e438:	ed2d 8b0a 	vpush	{d8-d12}
 801e43c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e440:	ee11 aa90 	vmov	sl, s3
 801e444:	f108 32ff 	add.w	r2, r8, #4294967295
 801e448:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e44c:	429a      	cmp	r2, r3
 801e44e:	ee10 5a10 	vmov	r5, s0
 801e452:	ee11 0a10 	vmov	r0, s2
 801e456:	b087      	sub	sp, #28
 801e458:	46c4      	mov	ip, r8
 801e45a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e45e:	d806      	bhi.n	801e46e <pow+0x3e>
 801e460:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e464:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e468:	2b7f      	cmp	r3, #127	@ 0x7f
 801e46a:	f240 8157 	bls.w	801e71c <pow+0x2ec>
 801e46e:	1802      	adds	r2, r0, r0
 801e470:	eb4a 010a 	adc.w	r1, sl, sl
 801e474:	f06f 0b01 	mvn.w	fp, #1
 801e478:	1e57      	subs	r7, r2, #1
 801e47a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e47e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e482:	45bb      	cmp	fp, r7
 801e484:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e488:	d242      	bcs.n	801e510 <pow+0xe0>
 801e48a:	ea52 0301 	orrs.w	r3, r2, r1
 801e48e:	f04f 0300 	mov.w	r3, #0
 801e492:	d10c      	bne.n	801e4ae <pow+0x7e>
 801e494:	196d      	adds	r5, r5, r5
 801e496:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e49a:	4164      	adcs	r4, r4
 801e49c:	42ab      	cmp	r3, r5
 801e49e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e4a2:	41a3      	sbcs	r3, r4
 801e4a4:	f0c0 808f 	bcc.w	801e5c6 <pow+0x196>
 801e4a8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e4ac:	e02b      	b.n	801e506 <pow+0xd6>
 801e4ae:	4ed4      	ldr	r6, [pc, #848]	@ (801e800 <pow+0x3d0>)
 801e4b0:	42b4      	cmp	r4, r6
 801e4b2:	bf08      	it	eq
 801e4b4:	429d      	cmpeq	r5, r3
 801e4b6:	d109      	bne.n	801e4cc <pow+0x9c>
 801e4b8:	1800      	adds	r0, r0, r0
 801e4ba:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e4be:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e4c2:	4283      	cmp	r3, r0
 801e4c4:	4bcf      	ldr	r3, [pc, #828]	@ (801e804 <pow+0x3d4>)
 801e4c6:	eb73 030a 	sbcs.w	r3, r3, sl
 801e4ca:	e7eb      	b.n	801e4a4 <pow+0x74>
 801e4cc:	196d      	adds	r5, r5, r5
 801e4ce:	48ce      	ldr	r0, [pc, #824]	@ (801e808 <pow+0x3d8>)
 801e4d0:	4164      	adcs	r4, r4
 801e4d2:	42ab      	cmp	r3, r5
 801e4d4:	eb70 0604 	sbcs.w	r6, r0, r4
 801e4d8:	d375      	bcc.n	801e5c6 <pow+0x196>
 801e4da:	4281      	cmp	r1, r0
 801e4dc:	bf08      	it	eq
 801e4de:	429a      	cmpeq	r2, r3
 801e4e0:	d171      	bne.n	801e5c6 <pow+0x196>
 801e4e2:	4aca      	ldr	r2, [pc, #808]	@ (801e80c <pow+0x3dc>)
 801e4e4:	4294      	cmp	r4, r2
 801e4e6:	bf08      	it	eq
 801e4e8:	429d      	cmpeq	r5, r3
 801e4ea:	d0dd      	beq.n	801e4a8 <pow+0x78>
 801e4ec:	4294      	cmp	r4, r2
 801e4ee:	ea6f 0a0a 	mvn.w	sl, sl
 801e4f2:	bf34      	ite	cc
 801e4f4:	2400      	movcc	r4, #0
 801e4f6:	2401      	movcs	r4, #1
 801e4f8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e4fc:	4554      	cmp	r4, sl
 801e4fe:	f040 81dc 	bne.w	801e8ba <pow+0x48a>
 801e502:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e506:	b007      	add	sp, #28
 801e508:	ecbd 8b0a 	vpop	{d8-d12}
 801e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e510:	196f      	adds	r7, r5, r5
 801e512:	eb44 0904 	adc.w	r9, r4, r4
 801e516:	1e7a      	subs	r2, r7, #1
 801e518:	f169 0300 	sbc.w	r3, r9, #0
 801e51c:	4593      	cmp	fp, r2
 801e51e:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e522:	d225      	bcs.n	801e570 <pow+0x140>
 801e524:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e528:	2c00      	cmp	r4, #0
 801e52a:	da13      	bge.n	801e554 <pow+0x124>
 801e52c:	4651      	mov	r1, sl
 801e52e:	f7ff ff49 	bl	801e3c4 <checkint>
 801e532:	2801      	cmp	r0, #1
 801e534:	d10e      	bne.n	801e554 <pow+0x124>
 801e536:	eeb1 0b40 	vneg.f64	d0, d0
 801e53a:	ea57 0909 	orrs.w	r9, r7, r9
 801e53e:	d10b      	bne.n	801e558 <pow+0x128>
 801e540:	f1ba 0f00 	cmp.w	sl, #0
 801e544:	dadf      	bge.n	801e506 <pow+0xd6>
 801e546:	b007      	add	sp, #28
 801e548:	ecbd 8b0a 	vpop	{d8-d12}
 801e54c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e550:	f000 bab6 	b.w	801eac0 <__math_divzero>
 801e554:	2000      	movs	r0, #0
 801e556:	e7f0      	b.n	801e53a <pow+0x10a>
 801e558:	f1ba 0f00 	cmp.w	sl, #0
 801e55c:	dad3      	bge.n	801e506 <pow+0xd6>
 801e55e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e562:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e566:	ed8d 7b00 	vstr	d7, [sp]
 801e56a:	ed9d 0b00 	vldr	d0, [sp]
 801e56e:	e7ca      	b.n	801e506 <pow+0xd6>
 801e570:	2c00      	cmp	r4, #0
 801e572:	da2b      	bge.n	801e5cc <pow+0x19c>
 801e574:	4651      	mov	r1, sl
 801e576:	f7ff ff25 	bl	801e3c4 <checkint>
 801e57a:	b930      	cbnz	r0, 801e58a <pow+0x15a>
 801e57c:	b007      	add	sp, #28
 801e57e:	ecbd 8b0a 	vpop	{d8-d12}
 801e582:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e586:	f000 bab3 	b.w	801eaf0 <__math_invalid>
 801e58a:	1e41      	subs	r1, r0, #1
 801e58c:	4248      	negs	r0, r1
 801e58e:	4148      	adcs	r0, r1
 801e590:	0480      	lsls	r0, r0, #18
 801e592:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e596:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e59a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e59e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e5a2:	2b7f      	cmp	r3, #127	@ 0x7f
 801e5a4:	d92d      	bls.n	801e602 <pow+0x1d2>
 801e5a6:	4b96      	ldr	r3, [pc, #600]	@ (801e800 <pow+0x3d0>)
 801e5a8:	2000      	movs	r0, #0
 801e5aa:	429c      	cmp	r4, r3
 801e5ac:	bf08      	it	eq
 801e5ae:	4285      	cmpeq	r5, r0
 801e5b0:	f43f af7a 	beq.w	801e4a8 <pow+0x78>
 801e5b4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e5b8:	428a      	cmp	r2, r1
 801e5ba:	d80c      	bhi.n	801e5d6 <pow+0x1a6>
 801e5bc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e5c0:	42a8      	cmp	r0, r5
 801e5c2:	41a3      	sbcs	r3, r4
 801e5c4:	d204      	bcs.n	801e5d0 <pow+0x1a0>
 801e5c6:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e5ca:	e79c      	b.n	801e506 <pow+0xd6>
 801e5cc:	2000      	movs	r0, #0
 801e5ce:	e7e4      	b.n	801e59a <pow+0x16a>
 801e5d0:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e5d4:	e797      	b.n	801e506 <pow+0xd6>
 801e5d6:	2d01      	cmp	r5, #1
 801e5d8:	eb74 0303 	sbcs.w	r3, r4, r3
 801e5dc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e5e0:	bf34      	ite	cc
 801e5e2:	2301      	movcc	r3, #1
 801e5e4:	2300      	movcs	r3, #0
 801e5e6:	4296      	cmp	r6, r2
 801e5e8:	bf8c      	ite	hi
 801e5ea:	2600      	movhi	r6, #0
 801e5ec:	2601      	movls	r6, #1
 801e5ee:	42b3      	cmp	r3, r6
 801e5f0:	f000 809c 	beq.w	801e72c <pow+0x2fc>
 801e5f4:	b007      	add	sp, #28
 801e5f6:	ecbd 8b0a 	vpop	{d8-d12}
 801e5fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5fe:	f000 ba57 	b.w	801eab0 <__math_oflow>
 801e602:	f1bc 0f00 	cmp.w	ip, #0
 801e606:	d10a      	bne.n	801e61e <pow+0x1ee>
 801e608:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e7f0 <pow+0x3c0>
 801e60c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e610:	ec53 2b17 	vmov	r2, r3, d7
 801e614:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e618:	4615      	mov	r5, r2
 801e61a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e61e:	4a7c      	ldr	r2, [pc, #496]	@ (801e810 <pow+0x3e0>)
 801e620:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e624:	4422      	add	r2, r4
 801e626:	1513      	asrs	r3, r2, #20
 801e628:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e62c:	ee03 3a10 	vmov	s6, r3
 801e630:	0d12      	lsrs	r2, r2, #20
 801e632:	4b78      	ldr	r3, [pc, #480]	@ (801e814 <pow+0x3e4>)
 801e634:	0512      	lsls	r2, r2, #20
 801e636:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e63a:	1aa7      	subs	r7, r4, r2
 801e63c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e640:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e644:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e648:	1e2e      	subs	r6, r5, #0
 801e64a:	ec47 6b14 	vmov	d4, r6, r7
 801e64e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e652:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e656:	ed93 5b00 	vldr	d5, [r3]
 801e65a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e65e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e662:	ed93 5b02 	vldr	d5, [r3, #8]
 801e666:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e66a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e66e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e672:	ed93 5b04 	vldr	d5, [r3, #16]
 801e676:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e67a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e67e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e682:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e686:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e68a:	eeb0 9b40 	vmov.f64	d9, d0
 801e68e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e692:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e696:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e69a:	ed93 5b06 	vldr	d5, [r3, #24]
 801e69e:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e6a2:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e6a6:	ed93 4b08 	vldr	d4, [r3, #32]
 801e6aa:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e6ae:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e6b2:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e6b6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e6ba:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e6be:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e6c2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e6c6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e6ca:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e6ce:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e6d2:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e6d6:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e6da:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e6de:	ee16 3a90 	vmov	r3, s13
 801e6e2:	eeb0 5b46 	vmov.f64	d5, d6
 801e6e6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e6ea:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e6ee:	18b2      	adds	r2, r6, r2
 801e6f0:	2a3e      	cmp	r2, #62	@ 0x3e
 801e6f2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e6f6:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e6fa:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e6fe:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e702:	d91b      	bls.n	801e73c <pow+0x30c>
 801e704:	2a00      	cmp	r2, #0
 801e706:	da0b      	bge.n	801e720 <pow+0x2f0>
 801e708:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e70c:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e710:	2800      	cmp	r0, #0
 801e712:	f43f aef8 	beq.w	801e506 <pow+0xd6>
 801e716:	eeb1 0b40 	vneg.f64	d0, d0
 801e71a:	e6f4      	b.n	801e506 <pow+0xd6>
 801e71c:	2000      	movs	r0, #0
 801e71e:	e77e      	b.n	801e61e <pow+0x1ee>
 801e720:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e724:	d909      	bls.n	801e73a <pow+0x30a>
 801e726:	2b00      	cmp	r3, #0
 801e728:	f6bf af64 	bge.w	801e5f4 <pow+0x1c4>
 801e72c:	b007      	add	sp, #28
 801e72e:	ecbd 8b0a 	vpop	{d8-d12}
 801e732:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e736:	f000 b9b3 	b.w	801eaa0 <__math_uflow>
 801e73a:	2600      	movs	r6, #0
 801e73c:	4936      	ldr	r1, [pc, #216]	@ (801e818 <pow+0x3e8>)
 801e73e:	ed91 4b02 	vldr	d4, [r1, #8]
 801e742:	ed91 3b00 	vldr	d3, [r1]
 801e746:	eeb0 7b44 	vmov.f64	d7, d4
 801e74a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e74e:	ee17 5a10 	vmov	r5, s14
 801e752:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e756:	ed91 4b04 	vldr	d4, [r1, #16]
 801e75a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e75e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e762:	ed91 4b06 	vldr	d4, [r1, #24]
 801e766:	18dc      	adds	r4, r3, r3
 801e768:	f104 030f 	add.w	r3, r4, #15
 801e76c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e770:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e774:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e778:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e77c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e780:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e784:	ed91 4b08 	vldr	d4, [r1, #32]
 801e788:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e78c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e790:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e794:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e798:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e79c:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e7a0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e7a4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e7a8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e7ac:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e7b0:	1940      	adds	r0, r0, r5
 801e7b2:	2700      	movs	r7, #0
 801e7b4:	eb17 020c 	adds.w	r2, r7, ip
 801e7b8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e7bc:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7c0:	2e00      	cmp	r6, #0
 801e7c2:	d175      	bne.n	801e8b0 <pow+0x480>
 801e7c4:	42bd      	cmp	r5, r7
 801e7c6:	db29      	blt.n	801e81c <pow+0x3ec>
 801e7c8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e7cc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e7d0:	4610      	mov	r0, r2
 801e7d2:	ec41 0b10 	vmov	d0, r0, r1
 801e7d6:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e7da:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e7f8 <pow+0x3c8>
 801e7de:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e7e2:	b007      	add	sp, #28
 801e7e4:	ecbd 8b0a 	vpop	{d8-d12}
 801e7e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7ec:	f000 b998 	b.w	801eb20 <__math_check_oflow>
 801e7f0:	00000000 	.word	0x00000000
 801e7f4:	43300000 	.word	0x43300000
 801e7f8:	00000000 	.word	0x00000000
 801e7fc:	7f000000 	.word	0x7f000000
 801e800:	3ff00000 	.word	0x3ff00000
 801e804:	fff00000 	.word	0xfff00000
 801e808:	ffe00000 	.word	0xffe00000
 801e80c:	7fe00000 	.word	0x7fe00000
 801e810:	c0196aab 	.word	0xc0196aab
 801e814:	0801f098 	.word	0x0801f098
 801e818:	08020110 	.word	0x08020110
 801e81c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e820:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e824:	4610      	mov	r0, r2
 801e826:	ec41 0b15 	vmov	d5, r0, r1
 801e82a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e82e:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e832:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e836:	eeb0 4bc7 	vabs.f64	d4, d7
 801e83a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e842:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e8c0 <pow+0x490>
 801e846:	d52a      	bpl.n	801e89e <pow+0x46e>
 801e848:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e84c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e854:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e858:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e85c:	bf58      	it	pl
 801e85e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e862:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e866:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e86a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e86e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e872:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e876:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e87a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e882:	d104      	bne.n	801e88e <pow+0x45e>
 801e884:	4632      	mov	r2, r6
 801e886:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e88a:	ec43 2b17 	vmov	d7, r2, r3
 801e88e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e892:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e896:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e89a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e89e:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e8a2:	b007      	add	sp, #28
 801e8a4:	ecbd 8b0a 	vpop	{d8-d12}
 801e8a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8ac:	f000 b92f 	b.w	801eb0e <__math_check_uflow>
 801e8b0:	ec43 2b10 	vmov	d0, r2, r3
 801e8b4:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e8b8:	e625      	b.n	801e506 <pow+0xd6>
 801e8ba:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e8c8 <pow+0x498>
 801e8be:	e622      	b.n	801e506 <pow+0xd6>
 801e8c0:	00000000 	.word	0x00000000
 801e8c4:	00100000 	.word	0x00100000
	...

0801e8d0 <__ieee754_sqrt>:
 801e8d0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e8d4:	4770      	bx	lr
	...

0801e8d8 <__ieee754_atan2>:
 801e8d8:	ee11 1a10 	vmov	r1, s2
 801e8dc:	eeb0 7b40 	vmov.f64	d7, d0
 801e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8e2:	ee11 5a90 	vmov	r5, s3
 801e8e6:	424b      	negs	r3, r1
 801e8e8:	4f59      	ldr	r7, [pc, #356]	@ (801ea50 <__ieee754_atan2+0x178>)
 801e8ea:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e8ee:	430b      	orrs	r3, r1
 801e8f0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e8f4:	42bb      	cmp	r3, r7
 801e8f6:	d80d      	bhi.n	801e914 <__ieee754_atan2+0x3c>
 801e8f8:	ee10 ca10 	vmov	ip, s0
 801e8fc:	ee17 6a90 	vmov	r6, s15
 801e900:	f1cc 0000 	rsb	r0, ip, #0
 801e904:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e908:	ea40 000c 	orr.w	r0, r0, ip
 801e90c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e910:	42b8      	cmp	r0, r7
 801e912:	d904      	bls.n	801e91e <__ieee754_atan2+0x46>
 801e914:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e918:	eeb0 0b47 	vmov.f64	d0, d7
 801e91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e91e:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e922:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e926:	4308      	orrs	r0, r1
 801e928:	d103      	bne.n	801e932 <__ieee754_atan2+0x5a>
 801e92a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e92e:	f7ff bc47 	b.w	801e1c0 <atan>
 801e932:	17ac      	asrs	r4, r5, #30
 801e934:	f004 0402 	and.w	r4, r4, #2
 801e938:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e93c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e940:	d107      	bne.n	801e952 <__ieee754_atan2+0x7a>
 801e942:	2c02      	cmp	r4, #2
 801e944:	d05c      	beq.n	801ea00 <__ieee754_atan2+0x128>
 801e946:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801ea18 <__ieee754_atan2+0x140>
 801e94a:	2c03      	cmp	r4, #3
 801e94c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e950:	e7e2      	b.n	801e918 <__ieee754_atan2+0x40>
 801e952:	4311      	orrs	r1, r2
 801e954:	d107      	bne.n	801e966 <__ieee754_atan2+0x8e>
 801e956:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801ea20 <__ieee754_atan2+0x148>
 801e95a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801ea28 <__ieee754_atan2+0x150>
 801e95e:	2e00      	cmp	r6, #0
 801e960:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e964:	e7d8      	b.n	801e918 <__ieee754_atan2+0x40>
 801e966:	42ba      	cmp	r2, r7
 801e968:	d10f      	bne.n	801e98a <__ieee754_atan2+0xb2>
 801e96a:	4293      	cmp	r3, r2
 801e96c:	f104 34ff 	add.w	r4, r4, #4294967295
 801e970:	d107      	bne.n	801e982 <__ieee754_atan2+0xaa>
 801e972:	2c02      	cmp	r4, #2
 801e974:	d847      	bhi.n	801ea06 <__ieee754_atan2+0x12e>
 801e976:	4b37      	ldr	r3, [pc, #220]	@ (801ea54 <__ieee754_atan2+0x17c>)
 801e978:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e97c:	ed93 7b00 	vldr	d7, [r3]
 801e980:	e7ca      	b.n	801e918 <__ieee754_atan2+0x40>
 801e982:	2c02      	cmp	r4, #2
 801e984:	d842      	bhi.n	801ea0c <__ieee754_atan2+0x134>
 801e986:	4b34      	ldr	r3, [pc, #208]	@ (801ea58 <__ieee754_atan2+0x180>)
 801e988:	e7f6      	b.n	801e978 <__ieee754_atan2+0xa0>
 801e98a:	42bb      	cmp	r3, r7
 801e98c:	d0e3      	beq.n	801e956 <__ieee754_atan2+0x7e>
 801e98e:	1a9b      	subs	r3, r3, r2
 801e990:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e994:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e998:	da1a      	bge.n	801e9d0 <__ieee754_atan2+0xf8>
 801e99a:	2d00      	cmp	r5, #0
 801e99c:	da01      	bge.n	801e9a2 <__ieee754_atan2+0xca>
 801e99e:	323c      	adds	r2, #60	@ 0x3c
 801e9a0:	db19      	blt.n	801e9d6 <__ieee754_atan2+0xfe>
 801e9a2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e9a6:	f7ff fd05 	bl	801e3b4 <fabs>
 801e9aa:	f7ff fc09 	bl	801e1c0 <atan>
 801e9ae:	eeb0 7b40 	vmov.f64	d7, d0
 801e9b2:	2c01      	cmp	r4, #1
 801e9b4:	d012      	beq.n	801e9dc <__ieee754_atan2+0x104>
 801e9b6:	2c02      	cmp	r4, #2
 801e9b8:	d019      	beq.n	801e9ee <__ieee754_atan2+0x116>
 801e9ba:	2c00      	cmp	r4, #0
 801e9bc:	d0ac      	beq.n	801e918 <__ieee754_atan2+0x40>
 801e9be:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801ea30 <__ieee754_atan2+0x158>
 801e9c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9c6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801ea38 <__ieee754_atan2+0x160>
 801e9ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9ce:	e7a3      	b.n	801e918 <__ieee754_atan2+0x40>
 801e9d0:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801ea20 <__ieee754_atan2+0x148>
 801e9d4:	e7ed      	b.n	801e9b2 <__ieee754_atan2+0xda>
 801e9d6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801ea40 <__ieee754_atan2+0x168>
 801e9da:	e7ea      	b.n	801e9b2 <__ieee754_atan2+0xda>
 801e9dc:	ee17 1a90 	vmov	r1, s15
 801e9e0:	ec53 2b17 	vmov	r2, r3, d7
 801e9e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e9e8:	ec43 2b17 	vmov	d7, r2, r3
 801e9ec:	e794      	b.n	801e918 <__ieee754_atan2+0x40>
 801e9ee:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801ea30 <__ieee754_atan2+0x158>
 801e9f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9f6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801ea38 <__ieee754_atan2+0x160>
 801e9fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e9fe:	e78b      	b.n	801e918 <__ieee754_atan2+0x40>
 801ea00:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801ea38 <__ieee754_atan2+0x160>
 801ea04:	e788      	b.n	801e918 <__ieee754_atan2+0x40>
 801ea06:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801ea48 <__ieee754_atan2+0x170>
 801ea0a:	e785      	b.n	801e918 <__ieee754_atan2+0x40>
 801ea0c:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801ea40 <__ieee754_atan2+0x168>
 801ea10:	e782      	b.n	801e918 <__ieee754_atan2+0x40>
 801ea12:	bf00      	nop
 801ea14:	f3af 8000 	nop.w
 801ea18:	54442d18 	.word	0x54442d18
 801ea1c:	c00921fb 	.word	0xc00921fb
 801ea20:	54442d18 	.word	0x54442d18
 801ea24:	3ff921fb 	.word	0x3ff921fb
 801ea28:	54442d18 	.word	0x54442d18
 801ea2c:	bff921fb 	.word	0xbff921fb
 801ea30:	33145c07 	.word	0x33145c07
 801ea34:	3ca1a626 	.word	0x3ca1a626
 801ea38:	54442d18 	.word	0x54442d18
 801ea3c:	400921fb 	.word	0x400921fb
	...
 801ea48:	54442d18 	.word	0x54442d18
 801ea4c:	3fe921fb 	.word	0x3fe921fb
 801ea50:	7ff00000 	.word	0x7ff00000
 801ea54:	080200f8 	.word	0x080200f8
 801ea58:	080200e0 	.word	0x080200e0

0801ea5c <with_errno>:
 801ea5c:	b510      	push	{r4, lr}
 801ea5e:	ed2d 8b02 	vpush	{d8}
 801ea62:	eeb0 8b40 	vmov.f64	d8, d0
 801ea66:	4604      	mov	r4, r0
 801ea68:	f7ff fb5c 	bl	801e124 <__errno>
 801ea6c:	eeb0 0b48 	vmov.f64	d0, d8
 801ea70:	ecbd 8b02 	vpop	{d8}
 801ea74:	6004      	str	r4, [r0, #0]
 801ea76:	bd10      	pop	{r4, pc}

0801ea78 <xflow>:
 801ea78:	b082      	sub	sp, #8
 801ea7a:	b158      	cbz	r0, 801ea94 <xflow+0x1c>
 801ea7c:	eeb1 7b40 	vneg.f64	d7, d0
 801ea80:	ed8d 7b00 	vstr	d7, [sp]
 801ea84:	ed9d 7b00 	vldr	d7, [sp]
 801ea88:	2022      	movs	r0, #34	@ 0x22
 801ea8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ea8e:	b002      	add	sp, #8
 801ea90:	f7ff bfe4 	b.w	801ea5c <with_errno>
 801ea94:	eeb0 7b40 	vmov.f64	d7, d0
 801ea98:	e7f2      	b.n	801ea80 <xflow+0x8>
 801ea9a:	0000      	movs	r0, r0
 801ea9c:	0000      	movs	r0, r0
	...

0801eaa0 <__math_uflow>:
 801eaa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801eaa8 <__math_uflow+0x8>
 801eaa4:	f7ff bfe8 	b.w	801ea78 <xflow>
 801eaa8:	00000000 	.word	0x00000000
 801eaac:	10000000 	.word	0x10000000

0801eab0 <__math_oflow>:
 801eab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801eab8 <__math_oflow+0x8>
 801eab4:	f7ff bfe0 	b.w	801ea78 <xflow>
 801eab8:	00000000 	.word	0x00000000
 801eabc:	70000000 	.word	0x70000000

0801eac0 <__math_divzero>:
 801eac0:	b082      	sub	sp, #8
 801eac2:	2800      	cmp	r0, #0
 801eac4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801eac8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801eacc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801ead0:	ed8d 7b00 	vstr	d7, [sp]
 801ead4:	ed9d 0b00 	vldr	d0, [sp]
 801ead8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801eae8 <__math_divzero+0x28>
 801eadc:	2022      	movs	r0, #34	@ 0x22
 801eade:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801eae2:	b002      	add	sp, #8
 801eae4:	f7ff bfba 	b.w	801ea5c <with_errno>
	...

0801eaf0 <__math_invalid>:
 801eaf0:	eeb0 7b40 	vmov.f64	d7, d0
 801eaf4:	eeb4 7b47 	vcmp.f64	d7, d7
 801eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eafc:	ee30 6b40 	vsub.f64	d6, d0, d0
 801eb00:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801eb04:	d602      	bvs.n	801eb0c <__math_invalid+0x1c>
 801eb06:	2021      	movs	r0, #33	@ 0x21
 801eb08:	f7ff bfa8 	b.w	801ea5c <with_errno>
 801eb0c:	4770      	bx	lr

0801eb0e <__math_check_uflow>:
 801eb0e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801eb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb16:	d102      	bne.n	801eb1e <__math_check_uflow+0x10>
 801eb18:	2022      	movs	r0, #34	@ 0x22
 801eb1a:	f7ff bf9f 	b.w	801ea5c <with_errno>
 801eb1e:	4770      	bx	lr

0801eb20 <__math_check_oflow>:
 801eb20:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801eb40 <__math_check_oflow+0x20>
 801eb24:	eeb0 7bc0 	vabs.f64	d7, d0
 801eb28:	eeb4 7b46 	vcmp.f64	d7, d6
 801eb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb30:	dd02      	ble.n	801eb38 <__math_check_oflow+0x18>
 801eb32:	2022      	movs	r0, #34	@ 0x22
 801eb34:	f7ff bf92 	b.w	801ea5c <with_errno>
 801eb38:	4770      	bx	lr
 801eb3a:	bf00      	nop
 801eb3c:	f3af 8000 	nop.w
 801eb40:	ffffffff 	.word	0xffffffff
 801eb44:	7fefffff 	.word	0x7fefffff

0801eb48 <_init>:
 801eb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb4a:	bf00      	nop
 801eb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb4e:	bc08      	pop	{r3}
 801eb50:	469e      	mov	lr, r3
 801eb52:	4770      	bx	lr

0801eb54 <_fini>:
 801eb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb56:	bf00      	nop
 801eb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb5a:	bc08      	pop	{r3}
 801eb5c:	469e      	mov	lr, r3
 801eb5e:	4770      	bx	lr
