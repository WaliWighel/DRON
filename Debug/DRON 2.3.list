
DRON 2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001df90  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  0801e260  0801e260  00024260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020078  08020078  00026078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020080  08020080  00026080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020084  08020084  00026084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020088  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020100  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020100  000278ac  2**0
                  ALLOC
  9 .IRAM         000041de  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031bd7  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ee3  00000000  00000000  0007b315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024c8  00000000  00000000  000811f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c7c  00000000  00000000  000836c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003cb44  00000000  00000000  0008533c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038abc  00000000  00000000  000c1e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e088  00000000  00000000  000fa93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002689c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a17c  00000000  00000000  00268a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e248 	.word	0x0801e248

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e248 	.word	0x0801e248

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:
static I2C_HandleTypeDef *hi2c_BMP180;
extern struct BMP180_Struct BMP180;
//extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
//extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00d fba8 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a1c      	ldr	r2, [pc, #112]	@ (800074c <BMP180_init+0x7c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	uint8_t data;
	BMP180_read_calliberation_data();
 80006de:	f000 f947 	bl	8000970 <BMP180_read_calliberation_data>
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <BMP180_init+0x7c>)
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2301      	movs	r3, #1
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	f107 030e 	add.w	r3, r7, #14
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	22d0      	movs	r2, #208	@ 0xd0
 80006f8:	21ee      	movs	r1, #238	@ 0xee
 80006fa:	f00d fb89 	bl	800de10 <HAL_I2C_Mem_Read>
	data = data | 0x40;
 80006fe:	7bbb      	ldrb	r3, [r7, #14]
 8000700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000704:	b2db      	uxtb	r3, r3
 8000706:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, 0xF4, 1, &data, 1, 1);//set oversampling to 2
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <BMP180_init+0x7c>)
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	2301      	movs	r3, #1
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	f107 030e 	add.w	r3, r7, #14
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	22f4      	movs	r2, #244	@ 0xf4
 800071e:	21ee      	movs	r1, #238	@ 0xee
 8000720:	f00d fa62 	bl	800dbe8 <HAL_I2C_Mem_Write>

	uint8_t status = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 8000728:	f7ff ffba 	bl	80006a0 <BMP180_read_ID>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	2b55      	cmp	r3, #85	@ 0x55
 8000734:	d002      	beq.n	800073c <BMP180_init+0x6c>
		status = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	e001      	b.n	8000740 <BMP180_init+0x70>
	}
	else{
		status = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	24000094 	.word	0x24000094

08000750 <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_temp+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	2364      	movs	r3, #100	@ 0x64
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2302      	movs	r3, #2
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	22f6      	movs	r2, #246	@ 0xf6
 800076a:	21ee      	movs	r1, #238	@ 0xee
 800076c:	f00d fb50 	bl	800de10 <HAL_I2C_Mem_Read>
	BMP180.Callibration_Regs.UT = ((data[0]<<8) | data[1]);
 8000770:	793b      	ldrb	r3, [r7, #4]
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	797a      	ldrb	r2, [r7, #5]
 8000776:	4313      	orrs	r3, r2
 8000778:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <BMP180_READ_temp+0x40>)
 800077a:	6253      	str	r3, [r2, #36]	@ 0x24
	return BMP180.Callibration_Regs.UT;
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <BMP180_READ_temp+0x40>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000780:	b29b      	uxth	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094
 8000790:	0000009c 	.word	0x0000009c

08000794 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <BMP180_READ_pres+0x3c>)
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	2303      	movs	r3, #3
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	22f6      	movs	r2, #246	@ 0xf6
 80007b0:	21ee      	movs	r1, #238	@ 0xee
 80007b2:	f00d fb2d 	bl	800de10 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 80007b6:	793b      	ldrb	r3, [r7, #4]
 80007b8:	041a      	lsls	r2, r3, #16
 80007ba:	797b      	ldrb	r3, [r7, #5]
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	4313      	orrs	r3, r2
 80007c0:	79ba      	ldrb	r2, [r7, #6]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	115b      	asrs	r3, r3, #5
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	24000094 	.word	0x24000094

080007d4 <BMP180_READ_temp_IT>:

void BMP180_READ_temp_IT(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180.Data_Temp_IT, 2);
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <BMP180_READ_temp_IT+0x2c>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	2302      	movs	r3, #2
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <BMP180_READ_temp_IT+0x30>)
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	22f6      	movs	r2, #246	@ 0xf6
 80007ea:	21ee      	movs	r1, #238	@ 0xee
 80007ec:	f00d fcb4 	bl	800e158 <HAL_I2C_Mem_Read_IT>
	BMP180.BMP180_IRQ = 1;
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <BMP180_READ_temp_IT+0x34>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	24000094 	.word	0x24000094
 8000804:	000000f7 	.word	0x000000f7
 8000808:	0000009c 	.word	0x0000009c

0800080c <BMP180_READ_pres_IT>:

void BMP180_READ_pres_IT(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180.Data_Press_IT, 3);
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <BMP180_READ_pres_IT+0x2c>)
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2303      	movs	r3, #3
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <BMP180_READ_pres_IT+0x30>)
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	22f6      	movs	r2, #246	@ 0xf6
 8000822:	21ee      	movs	r1, #238	@ 0xee
 8000824:	f00d fc98 	bl	800e158 <HAL_I2C_Mem_Read_IT>
	BMP180.BMP180_IRQ = 2;
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <BMP180_READ_pres_IT+0x34>)
 800082a:	2202      	movs	r2, #2
 800082c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	24000094 	.word	0x24000094
 800083c:	000000f4 	.word	0x000000f4
 8000840:	0000009c 	.word	0x0000009c

08000844 <BMP180_GET_temp_IT>:

uint16_t BMP180_GET_temp_IT(void){
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	BMP180.Callibration_Regs.UT = ((BMP180.Data_Temp_IT[0]<<8) | BMP180.Data_Temp_IT[1]);
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <BMP180_GET_temp_IT+0x28>)
 800084a:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	4a06      	ldr	r2, [pc, #24]	@ (800086c <BMP180_GET_temp_IT+0x28>)
 8000852:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8000856:	4313      	orrs	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <BMP180_GET_temp_IT+0x28>)
 800085a:	6253      	str	r3, [r2, #36]	@ 0x24
	return BMP180.Callibration_Regs.UT;
 800085c:	4b03      	ldr	r3, [pc, #12]	@ (800086c <BMP180_GET_temp_IT+0x28>)
 800085e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000860:	b29b      	uxth	r3, r3
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	0000009c 	.word	0x0000009c

08000870 <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	return (((BMP180.Data_Press_IT[0]<<16)|(BMP180.Data_Press_IT[1]<<8)|BMP180.Data_Press_IT[2]) >> 5);
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <BMP180_GET_pres_IT+0x2c>)
 8000876:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800087a:	041a      	lsls	r2, r3, #16
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <BMP180_GET_pres_IT+0x2c>)
 800087e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	4313      	orrs	r3, r2
 8000886:	4a05      	ldr	r2, [pc, #20]	@ (800089c <BMP180_GET_pres_IT+0x2c>)
 8000888:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 800088c:	4313      	orrs	r3, r2
 800088e:	115b      	asrs	r3, r3, #5
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	0000009c 	.word	0x0000009c

080008a0 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80008a6:	232e      	movs	r3, #46	@ 0x2e
 80008a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <BMP180_start_measurment_temp+0x2c>)
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	2364      	movs	r3, #100	@ 0x64
 80008b0:	9302      	str	r3, [sp, #8]
 80008b2:	2301      	movs	r3, #1
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	22f4      	movs	r2, #244	@ 0xf4
 80008be:	21ee      	movs	r1, #238	@ 0xee
 80008c0:	f00d f992 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000094 	.word	0x24000094

080008d0 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 80008d6:	23f4      	movs	r3, #244	@ 0xf4
 80008d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <BMP180_start_measurment_pres+0x2c>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	2364      	movs	r3, #100	@ 0x64
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	2301      	movs	r3, #1
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	22f4      	movs	r2, #244	@ 0xf4
 80008ee:	21ee      	movs	r1, #238	@ 0xee
 80008f0:	f00d f97a 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000094 	.word	0x24000094

08000900 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 8000906:	23f4      	movs	r3, #244	@ 0xf4
 8000908:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <BMP180_start_measurment_pres_IT+0x30>)
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	22f4      	movs	r2, #244	@ 0xf4
 800091a:	21ee      	movs	r1, #238	@ 0xee
 800091c:	f00d fb92 	bl	800e044 <HAL_I2C_Mem_Write_IT>
	BMP180.I2C_Tx_IRQ = 2;
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <BMP180_start_measurment_pres_IT+0x34>)
 8000922:	2202      	movs	r2, #2
 8000924:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000094 	.word	0x24000094
 8000934:	0000009c 	.word	0x0000009c

08000938 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 800093e:	232e      	movs	r3, #46	@ 0x2e
 8000940:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <BMP180_start_measurment_temp_IT+0x30>)
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2301      	movs	r3, #1
 8000950:	22f4      	movs	r2, #244	@ 0xf4
 8000952:	21ee      	movs	r1, #238	@ 0xee
 8000954:	f00d fb76 	bl	800e044 <HAL_I2C_Mem_Write_IT>
	BMP180.I2C_Tx_IRQ = 1;
 8000958:	4b04      	ldr	r3, [pc, #16]	@ (800096c <BMP180_start_measurment_temp_IT+0x34>)
 800095a:	2201      	movs	r2, #1
 800095c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	24000094 	.word	0x24000094
 800096c:	0000009c 	.word	0x0000009c

08000970 <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000988:	23aa      	movs	r3, #170	@ 0xaa
 800098a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 800098c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a7c <BMP180_read_calliberation_data+0x10c>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	8afa      	ldrh	r2, [r7, #22]
 8000992:	2364      	movs	r3, #100	@ 0x64
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2316      	movs	r3, #22
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	463b      	mov	r3, r7
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2301      	movs	r3, #1
 80009a0:	21ee      	movs	r1, #238	@ 0xee
 80009a2:	f00d fa35 	bl	800de10 <HAL_I2C_Mem_Read>

	BMP180.Callibration_Regs.AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80009a6:	783b      	ldrb	r3, [r7, #0]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	787b      	ldrb	r3, [r7, #1]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 80009b6:	80da      	strh	r2, [r3, #6]
	BMP180.Callibration_Regs.AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80009b8:	78bb      	ldrb	r3, [r7, #2]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	78fb      	ldrb	r3, [r7, #3]
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 80009c8:	811a      	strh	r2, [r3, #8]
	BMP180.Callibration_Regs.AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80009ca:	793b      	ldrb	r3, [r7, #4]
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 80009da:	815a      	strh	r2, [r3, #10]
	BMP180.Callibration_Regs.AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 80009ee:	801a      	strh	r2, [r3, #0]
	BMP180.Callibration_Regs.AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 80009f0:	7a3b      	ldrb	r3, [r7, #8]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	7a7b      	ldrb	r3, [r7, #9]
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a02:	805a      	strh	r2, [r3, #2]
	BMP180.Callibration_Regs.AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000a04:	7abb      	ldrb	r3, [r7, #10]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	7afb      	ldrb	r3, [r7, #11]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a16:	809a      	strh	r2, [r3, #4]
	BMP180.Callibration_Regs.B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000a18:	7b3b      	ldrb	r3, [r7, #12]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	b21a      	sxth	r2, r3
 8000a1e:	7b7b      	ldrb	r3, [r7, #13]
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a28:	819a      	strh	r2, [r3, #12]
	BMP180.Callibration_Regs.B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000a2a:	7bbb      	ldrb	r3, [r7, #14]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	b21a      	sxth	r2, r3
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a3a:	81da      	strh	r2, [r3, #14]
	BMP180.Callibration_Regs.MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000a3c:	7c3b      	ldrb	r3, [r7, #16]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	7c7b      	ldrb	r3, [r7, #17]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a4c:	821a      	strh	r2, [r3, #16]
	BMP180.Callibration_Regs.MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 8000a4e:	7cbb      	ldrb	r3, [r7, #18]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	7cfb      	ldrb	r3, [r7, #19]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a5e:	825a      	strh	r2, [r3, #18]
	BMP180.Callibration_Regs.MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 8000a60:	7d3b      	ldrb	r3, [r7, #20]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	7d7b      	ldrb	r3, [r7, #21]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <BMP180_read_calliberation_data+0x110>)
 8000a70:	829a      	strh	r2, [r3, #20]
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000094 	.word	0x24000094
 8000a80:	0000009c 	.word	0x0000009c

08000a84 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
	float temp;
	BMP180.Callibration_Regs.X1 = ((temperature - BMP180.Callibration_Regs.AC6) * BMP180.Callibration_Regs.AC5)/32768;
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	4a20      	ldr	r2, [pc, #128]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000a92:	8892      	ldrh	r2, [r2, #4]
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000a98:	8852      	ldrh	r2, [r2, #2]
 8000a9a:	fb02 f303 	mul.w	r3, r2, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da03      	bge.n	8000aaa <BMP180_GET_temp+0x26>
 8000aa2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000aa6:	441a      	add	r2, r3
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	13db      	asrs	r3, r3, #15
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (BMP180.Callibration_Regs.MC * 2048)/(BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.MD);
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ab4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ab8:	02da      	lsls	r2, r3, #11
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000abe:	4915      	ldr	r1, [pc, #84]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ac0:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8000ac4:	440b      	add	r3, r1
 8000ac6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000acc:	62d3      	str	r3, [r2, #44]	@ 0x2c
	BMP180.Callibration_Regs.B5 = BMP180.Callibration_Regs.X1 + BMP180.Callibration_Regs.X2;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ada:	6313      	str	r3, [r2, #48]	@ 0x30
	temp = (BMP180.Callibration_Regs.B5 + 8)/16;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <BMP180_GET_temp+0x90>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	3308      	adds	r3, #8
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	da00      	bge.n	8000ae8 <BMP180_GET_temp+0x64>
 8000ae6:	330f      	adds	r3, #15
 8000ae8:	111b      	asrs	r3, r3, #4
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af2:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp/10.0;
 8000af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000afa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000afe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b02:	eef0 7a66 	vmov.f32	s15, s13
}
 8000b06:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	0000009c 	.word	0x0000009c

08000b18 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
	float pres;
	BMP180.Callibration_Regs.UP = BMP180_READ_pres();
 8000b22:	f7ff fe37 	bl	8000794 <BMP180_READ_pres>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a98      	ldr	r2, [pc, #608]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b2a:	6213      	str	r3, [r2, #32]
	BMP180.Callibration_Regs.X1 = (((BMP180.Callibration_Regs.UT-BMP180.Callibration_Regs.AC6) * BMP180.Callibration_Regs.AC5)/32768);//
 8000b2c:	4b97      	ldr	r3, [pc, #604]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b30:	4a96      	ldr	r2, [pc, #600]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b32:	8892      	ldrh	r2, [r2, #4]
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	4a95      	ldr	r2, [pc, #596]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b38:	8852      	ldrh	r2, [r2, #2]
 8000b3a:	fb02 f303 	mul.w	r3, r2, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da03      	bge.n	8000b4a <BMP180_GET_pres+0x32>
 8000b42:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000b46:	441a      	add	r2, r3
 8000b48:	4613      	mov	r3, r2
 8000b4a:	13db      	asrs	r3, r3, #15
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = ((BMP180.Callibration_Regs.MC*(2048)) / (BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.MD));
 8000b52:	4b8e      	ldr	r3, [pc, #568]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b54:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000b58:	02da      	lsls	r2, r3, #11
 8000b5a:	4b8c      	ldr	r3, [pc, #560]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5e:	498b      	ldr	r1, [pc, #556]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b60:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8000b64:	440b      	add	r3, r1
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	4a88      	ldr	r2, [pc, #544]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	BMP180.Callibration_Regs.B5 = BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2;
 8000b6e:	4b87      	ldr	r3, [pc, #540]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b72:	4b86      	ldr	r3, [pc, #536]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b76:	4413      	add	r3, r2
 8000b78:	4a84      	ldr	r2, [pc, #528]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b7a:	6313      	str	r3, [r2, #48]	@ 0x30
	BMP180.Callibration_Regs.B6 = BMP180.Callibration_Regs.B5-4000;
 8000b7c:	4b83      	ldr	r3, [pc, #524]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000b84:	4a81      	ldr	r2, [pc, #516]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b86:	6353      	str	r3, [r2, #52]	@ 0x34
	BMP180.Callibration_Regs.X1 = (BMP180.Callibration_Regs.B2 * (BMP180.Callibration_Regs.B6*BMP180.Callibration_Regs.B6/(4096)))/(2048);
 8000b88:	4b80      	ldr	r3, [pc, #512]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4b7e      	ldr	r3, [pc, #504]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b94:	4a7d      	ldr	r2, [pc, #500]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000b96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da01      	bge.n	8000ba4 <BMP180_GET_pres+0x8c>
 8000ba0:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000ba4:	131b      	asrs	r3, r3, #12
 8000ba6:	fb01 f303 	mul.w	r3, r1, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da01      	bge.n	8000bb2 <BMP180_GET_pres+0x9a>
 8000bae:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000bb2:	12db      	asrs	r3, r3, #11
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b75      	ldr	r3, [pc, #468]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = BMP180.Callibration_Regs.AC2*BMP180.Callibration_Regs.B6/(2048);
 8000bba:	4b74      	ldr	r3, [pc, #464]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b72      	ldr	r3, [pc, #456]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	da01      	bge.n	8000bd2 <BMP180_GET_pres+0xba>
 8000bce:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000bd2:	12db      	asrs	r3, r3, #11
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	BMP180.Callibration_Regs.X3 = BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2;
 8000bda:	4b6c      	ldr	r3, [pc, #432]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bde:	4b6b      	ldr	r3, [pc, #428]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be2:	4413      	add	r3, r2
 8000be4:	4a69      	ldr	r2, [pc, #420]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000be6:	63d3      	str	r3, [r2, #60]	@ 0x3c
	BMP180.Callibration_Regs.B3 = (((BMP180.Callibration_Regs.AC1*4+BMP180.Callibration_Regs.X3)<<3)+2)/4;
 8000be8:	4b68      	ldr	r3, [pc, #416]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bee:	009a      	lsls	r2, r3, #2
 8000bf0:	4b66      	ldr	r3, [pc, #408]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da00      	bge.n	8000c00 <BMP180_GET_pres+0xe8>
 8000bfe:	3303      	adds	r3, #3
 8000c00:	109b      	asrs	r3, r3, #2
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b61      	ldr	r3, [pc, #388]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c06:	639a      	str	r2, [r3, #56]	@ 0x38
	BMP180.Callibration_Regs.X1 = BMP180.Callibration_Regs.AC3*BMP180.Callibration_Regs.B6/8192;
 8000c08:	4b60      	ldr	r3, [pc, #384]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b5e      	ldr	r3, [pc, #376]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da03      	bge.n	8000c24 <BMP180_GET_pres+0x10c>
 8000c1c:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000c20:	441a      	add	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	135b      	asrs	r3, r3, #13
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b58      	ldr	r3, [pc, #352]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (BMP180.Callibration_Regs.B1 * (BMP180.Callibration_Regs.B6*BMP180.Callibration_Regs.B6/(4096)))/(65536);
 8000c2c:	4b57      	ldr	r3, [pc, #348]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4b55      	ldr	r3, [pc, #340]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c38:	4a54      	ldr	r2, [pc, #336]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	da01      	bge.n	8000c48 <BMP180_GET_pres+0x130>
 8000c44:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000c48:	131b      	asrs	r3, r3, #12
 8000c4a:	fb01 f303 	mul.w	r3, r1, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da03      	bge.n	8000c5a <BMP180_GET_pres+0x142>
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	441a      	add	r2, r3
 8000c58:	4613      	mov	r3, r2
 8000c5a:	141b      	asrs	r3, r3, #16
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c60:	62da      	str	r2, [r3, #44]	@ 0x2c
	BMP180.Callibration_Regs.X3 = ((BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2)+2)/4;
 8000c62:	4b4a      	ldr	r3, [pc, #296]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c66:	4b49      	ldr	r3, [pc, #292]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da00      	bge.n	8000c74 <BMP180_GET_pres+0x15c>
 8000c72:	3303      	adds	r3, #3
 8000c74:	109b      	asrs	r3, r3, #2
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b44      	ldr	r3, [pc, #272]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	BMP180.Callibration_Regs.B4 = BMP180.Callibration_Regs.AC4* (uint32_t)(BMP180.Callibration_Regs.X3+32768)/(32768);
 8000c7c:	4b43      	ldr	r3, [pc, #268]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b42      	ldr	r3, [pc, #264]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c86:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c8a:	fb02 f303 	mul.w	r3, r2, r3
 8000c8e:	0bdb      	lsrs	r3, r3, #15
 8000c90:	4a3e      	ldr	r2, [pc, #248]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c92:	6193      	str	r3, [r2, #24]
	BMP180.Callibration_Regs.B7 = ((uint32_t)BMP180.Callibration_Regs.UP-BMP180.Callibration_Regs.B3)*(50000>>3);
 8000c94:	4b3d      	ldr	r3, [pc, #244]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	4a3c      	ldr	r2, [pc, #240]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000c9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	4a39      	ldr	r2, [pc, #228]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000ca8:	61d3      	str	r3, [r2, #28]
	if (BMP180.Callibration_Regs.B7 < 0x80000000){
 8000caa:	4b38      	ldr	r3, [pc, #224]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0d      	blt.n	8000cce <BMP180_GET_pres+0x1b6>
		pres = (BMP180.Callibration_Regs.B7*2)/BMP180.Callibration_Regs.B4;
 8000cb2:	4b36      	ldr	r3, [pc, #216]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	005a      	lsls	r2, r3, #1
 8000cb8:	4b34      	ldr	r3, [pc, #208]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	ee07 3a90 	vmov	s15, r3
 8000cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc8:	edc7 7a03 	vstr	s15, [r7, #12]
 8000ccc:	e00c      	b.n	8000ce8 <BMP180_GET_pres+0x1d0>
	}
	else{
		pres = (BMP180.Callibration_Regs.B7/BMP180.Callibration_Regs.B4)*2;
 8000cce:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cd0:	69da      	ldr	r2, [r3, #28]
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	BMP180.Callibration_Regs.X1 = (pres/(256))*(pres/(256));
 8000ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cec:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000d90 <BMP180_GET_pres+0x278>
 8000cf0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cf4:	edd7 6a03 	vldr	s13, [r7, #12]
 8000cf8:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 8000d90 <BMP180_GET_pres+0x278>
 8000cfc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d08:	ee17 2a90 	vmov	r2, s15
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X1 = (BMP180.Callibration_Regs.X1*3038)/(65536);
 8000d10:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000d18:	fb02 f303 	mul.w	r3, r2, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da03      	bge.n	8000d28 <BMP180_GET_pres+0x210>
 8000d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d24:	441a      	add	r2, r3
 8000d26:	4613      	mov	r3, r2
 8000d28:	141b      	asrs	r3, r3, #16
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d2e:	629a      	str	r2, [r3, #40]	@ 0x28
	BMP180.Callibration_Regs.X2 = (-7357*pres)/(65536);
 8000d30:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d34:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d94 <BMP180_GET_pres+0x27c>
 8000d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d3c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000d98 <BMP180_GET_pres+0x280>
 8000d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 2a90 	vmov	r2, s15
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pres = pres + (BMP180.Callibration_Regs.X1+BMP180.Callibration_Regs.X2+3791)/(16);
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <BMP180_GET_pres+0x274>)
 8000d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d58:	4413      	add	r3, r2
 8000d5a:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	da00      	bge.n	8000d64 <BMP180_GET_pres+0x24c>
 8000d62:	330f      	adds	r3, #15
 8000d64:	111b      	asrs	r3, r3, #4
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d76:	edc7 7a03 	vstr	s15, [r7, #12]
	return pres;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	ee07 3a90 	vmov	s15, r3
}
 8000d80:	eeb0 0a67 	vmov.f32	s0, s15
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	0000009c 	.word	0x0000009c
 8000d90:	43800000 	.word	0x43800000
 8000d94:	c5e5e800 	.word	0xc5e5e800
 8000d98:	47800000 	.word	0x47800000

08000d9c <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	float temperature, pressure, pres;
	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000da4:	f7ff fd7c 	bl	80008a0 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000da8:	200a      	movs	r0, #10
 8000daa:	f007 fd11 	bl	80087d0 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000dae:	f7ff fccf 	bl	8000750 <BMP180_READ_temp>
 8000db2:	4603      	mov	r3, r0
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dbc:	edc7 7a05 	vstr	s15, [r7, #20]
	BMP180.temp = BMP180_GET_temp(temperature);
 8000dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc8:	ee17 3a90 	vmov	r3, s15
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fe58 	bl	8000a84 <BMP180_GET_temp>
 8000dd4:	eef0 7a40 	vmov.f32	s15, s0
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <BMP180_CALIBRATION+0x84>)
 8000dda:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	BMP180_start_measurment_pres();
 8000dde:	f7ff fd77 	bl	80008d0 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000de2:	201e      	movs	r0, #30
 8000de4:	f007 fcf4 	bl	80087d0 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000de8:	f7ff fcd4 	bl	8000794 <BMP180_READ_pres>
 8000dec:	ee07 0a90 	vmov	s15, r0
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	edc7 7a04 	vstr	s15, [r7, #16]
	pres = BMP180_GET_pres(pressure);
 8000df8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e00:	ee17 3a90 	vmov	r3, s15
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe86 	bl	8000b18 <BMP180_GET_pres>
 8000e0c:	ed87 0a03 	vstr	s0, [r7, #12]
	//}
	*firstpres = pres;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	601a      	str	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	0000009c 	.word	0x0000009c

08000e24 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <BMP180_GET_height+0x38>)
 8000e32:	603b      	str	r3, [r7, #0]
	height = (BMP180.ampritude/factor);
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <BMP180_GET_height+0x3c>)
 8000e36:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8000e3a:	ed97 7a00 	vldr	s14, [r7]
 8000e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e42:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	ee07 3a90 	vmov	s15, r3
}
 8000e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	4134cccd 	.word	0x4134cccd
 8000e60:	0000009c 	.word	0x0000009c

08000e64 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d907      	bls.n	8000e88 <ESC_1_SPEED+0x24>
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	bf28      	it	cs
 8000e82:	4613      	movcs	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	e001      	b.n	8000e8c <ESC_1_SPEED+0x28>
 8000e88:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e8c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <ESC_1_SPEED+0x40>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	88fa      	ldrh	r2, [r7, #6]
 8000e96:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	24000098 	.word	0x24000098

08000ea8 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d907      	bls.n	8000ecc <ESC_2_SPEED+0x24>
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	bf28      	it	cs
 8000ec6:	4613      	movcs	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	e001      	b.n	8000ed0 <ESC_2_SPEED+0x28>
 8000ecc:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ed0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ed2:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <ESC_2_SPEED+0x40>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	24000098 	.word	0x24000098

08000eec <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d907      	bls.n	8000f10 <ESC_3_SPEED+0x24>
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f06:	4293      	cmp	r3, r2
 8000f08:	bf28      	it	cs
 8000f0a:	4613      	movcs	r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	e001      	b.n	8000f14 <ESC_3_SPEED+0x28>
 8000f10:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f14:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000f16:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <ESC_3_SPEED+0x40>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	88fa      	ldrh	r2, [r7, #6]
 8000f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	24000098 	.word	0x24000098

08000f30 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d907      	bls.n	8000f54 <ESC_4_SPEED+0x24>
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	bf28      	it	cs
 8000f4e:	4613      	movcs	r3, r2
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	e001      	b.n	8000f58 <ESC_4_SPEED+0x28>
 8000f54:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f58:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <ESC_4_SPEED+0x40>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	88fa      	ldrh	r2, [r7, #6]
 8000f62:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	24000098 	.word	0x24000098

08000f74 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f7c:	4a20      	ldr	r2, [pc, #128]	@ (8001000 <ESC_INT+0x8c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f82:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f014 fef3 	bl	8015d74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2104      	movs	r1, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f014 feed 	bl	8015d74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f014 fee7 	bl	8015d74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	210c      	movs	r1, #12
 8000fac:	4618      	mov	r0, r3
 8000fae:	f014 fee1 	bl	8015d74 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <ESC_INT+0x8c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <ESC_INT+0x8c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <ESC_INT+0x8c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fd4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <ESC_INT+0x8c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fe0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	4806      	ldr	r0, [pc, #24]	@ (8001004 <ESC_INT+0x90>)
 8000fea:	f00c fd2d 	bl	800da48 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fee:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ff2:	f007 fbed 	bl	80087d0 <HAL_Delay>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24000098 	.word	0x24000098
 8001004:	58021800 	.word	0x58021800

08001008 <HMC5883L_Init>:
extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;
extern float Mag_Y, Mag_X, Mag_Z, heading;
//float HMC5883L_Scale = 0.92;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			15 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x70;
 800101a:	2370      	movs	r3, #112	@ 0x70
 800101c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 800101e:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 030f 	add.w	r3, r7, #15
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2200      	movs	r2, #0
 8001034:	213c      	movs	r1, #60	@ 0x3c
 8001036:	f00c fdd7 	bl	800dbe8 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xA0;
 800103a:	23a0      	movs	r3, #160	@ 0xa0
 800103c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800103e:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2201      	movs	r2, #1
 8001054:	213c      	movs	r1, #60	@ 0x3c
 8001056:	f00c fdc7 	bl	800dbe8 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f107 030f 	add.w	r3, r7, #15
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	2202      	movs	r2, #2
 8001074:	213c      	movs	r1, #60	@ 0x3c
 8001076:	f00c fdb7 	bl	800dbe8 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f007 fba6 	bl	80087d0 <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <HMC5883L_Init+0xb8>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	f107 030e 	add.w	r3, r7, #14
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	220a      	movs	r2, #10
 800109a:	213c      	movs	r1, #60	@ 0x3c
 800109c:	f00c feb8 	bl	800de10 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	2b48      	cmp	r3, #72	@ 0x48
 80010a4:	d002      	beq.n	80010ac <HMC5883L_Init+0xa4>
		status = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	e001      	b.n	80010b0 <HMC5883L_Init+0xa8>
	}
	else{
		status = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f007 fb8d 	bl	80087d0 <HAL_Delay>

	return status;
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2400009c 	.word	0x2400009c

080010c4 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 80010ca:	23b6      	movs	r3, #182	@ 0xb6
 80010cc:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HMC5883L_Get_Z_Start+0x40>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2306      	movs	r3, #6
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	463b      	mov	r3, r7
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	213c      	movs	r1, #60	@ 0x3c
 80010e4:	f00c fe94 	bl	800de10 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 80010e8:	78bb      	ldrb	r3, [r7, #2]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2400009c 	.word	0x2400009c

08001108 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HMC5883L_Get_Z_Start_IT+0x28>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	2306      	movs	r3, #6
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <HMC5883L_Get_Z_Start_IT+0x2c>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	213c      	movs	r1, #60	@ 0x3c
 8001120:	f00d f81a 	bl	800e158 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <HMC5883L_Get_Z_Start_IT+0x30>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2400009c 	.word	0x2400009c
 8001134:	0000006c 	.word	0x0000006c
 8001138:	000041d0 	.word	0x000041d0
 800113c:	00000000 	.word	0x00000000

08001140 <HMC5883L_Get_Z_End_IT>:

void HMC5883L_Get_Z_End_IT(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
//	Mag_Z = (((int16_t)HMC5883L_Data_IT[2]<<8) | HMC5883L_Data_IT[3]) * 2.56;// 2.56 - scale
//	Mag_X = (((int16_t)HMC5883L_Data_IT[0]<<8) | HMC5883L_Data_IT[1]) * 2.56;
//	Mag_Y = (((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5]) * 2.56;
		Mag_X = (((int16_t)HMC5883L_Data_IT[1]<<8) | HMC5883L_Data_IT[0]) * 2.56;//important fake HMC5883L, msb -> lsb
 8001144:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	4a31      	ldr	r2, [pc, #196]	@ (8001210 <HMC5883L_Get_Z_End_IT+0xd0>)
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	4313      	orrs	r3, r2
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001158:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80011f8 <HMC5883L_Get_Z_End_IT+0xb8>
 800115c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001160:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001164:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001166:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (((int16_t)HMC5883L_Data_IT[3]<<8) | HMC5883L_Data_IT[2]) * 2.56;// 2.56 - scale
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <HMC5883L_Get_Z_End_IT+0xd0>)
 800116c:	78db      	ldrb	r3, [r3, #3]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001172:	7892      	ldrb	r2, [r2, #2]
 8001174:	4313      	orrs	r3, r2
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800117e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80011f8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001182:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001186:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800118a:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <HMC5883L_Get_Z_End_IT+0xd8>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Y = (((int16_t)HMC5883L_Data_IT[5]<<8) | HMC5883L_Data_IT[4]) * 2.56;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001192:	795b      	ldrb	r3, [r3, #5]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	4a1e      	ldr	r2, [pc, #120]	@ (8001210 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001198:	7912      	ldrb	r2, [r2, #4]
 800119a:	4313      	orrs	r3, r2
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011a4:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80011f8 <HMC5883L_Get_Z_End_IT+0xb8>
 80011a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HMC5883L_Get_Z_End_IT+0xdc>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
	heading = (atan2(Mag_X, Mag_Y))*180/M_PI;
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <HMC5883L_Get_Z_End_IT+0xd4>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HMC5883L_Get_Z_End_IT+0xdc>)
 80011c2:	edd3 6a00 	vldr	s13, [r3]
 80011c6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80011ca:	eeb0 1b46 	vmov.f64	d1, d6
 80011ce:	eeb0 0b47 	vmov.f64	d0, d7
 80011d2:	f01c fb53 	bl	801d87c <atan2>
 80011d6:	eeb0 7b40 	vmov.f64	d7, d0
 80011da:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001200 <HMC5883L_Get_Z_End_IT+0xc0>
 80011de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011e2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8001208 <HMC5883L_Get_Z_End_IT+0xc8>
 80011e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	47ae147b 	.word	0x47ae147b
 80011fc:	40047ae1 	.word	0x40047ae1
 8001200:	00000000 	.word	0x00000000
 8001204:	40668000 	.word	0x40668000
 8001208:	54442d18 	.word	0x54442d18
 800120c:	400921fb 	.word	0x400921fb
 8001210:	0000006c 	.word	0x0000006c
 8001214:	0000005c 	.word	0x0000005c
 8001218:	00000054 	.word	0x00000054
 800121c:	00000058 	.word	0x00000058
 8001220:	00000060 	.word	0x00000060

08001224 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	e014      	b.n	8001268 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 800123e:	f7ff ff41 	bl	80010c4 <HMC5883L_Get_Z_Start>
 8001242:	4603      	mov	r3, r0
 8001244:	b21b      	sxth	r3, r3
 8001246:	17da      	asrs	r2, r3, #31
 8001248:	461c      	mov	r4, r3
 800124a:	4615      	mov	r5, r2
 800124c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001250:	eb12 0804 	adds.w	r8, r2, r4
 8001254:	eb43 0905 	adc.w	r9, r3, r5
 8001258:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f007 fab7 	bl	80087d0 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b09      	cmp	r3, #9
 800126c:	dde7      	ble.n	800123e <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 800126e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001272:	f04f 020a 	mov.w	r2, #10
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	f7ff f849 	bl	8000310 <__aeabi_ldivmod>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	b213      	sxth	r3, r2
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001290 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 8001298:	4a13      	ldr	r2, [pc, #76]	@ (80012e8 <MPU6050_INIT+0x58>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 800129e:	f000 f825 	bl	80012ec <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80012a2:	f000 f88f 	bl	80013c4 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 f838 	bl	800131c <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80012ac:	2008      	movs	r0, #8
 80012ae:	f000 f851 	bl	8001354 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80012b2:	2008      	movs	r0, #8
 80012b4:	f000 f86a 	bl	800138c <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80012b8:	f000 fc92 	bl	8001be0 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80012bc:	f000 f89a 	bl	80013f4 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80012c0:	200a      	movs	r0, #10
 80012c2:	f007 fa85 	bl	80087d0 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80012c6:	f000 fc73 	bl	8001bb0 <MPU6050_READ_ID>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b68      	cmp	r3, #104	@ 0x68
 80012d2:	d002      	beq.n	80012da <MPU6050_INIT+0x4a>
		status = 0;//error
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e001      	b.n	80012de <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240000a0 	.word	0x240000a0

080012ec <MPU6050_RESET>:


void MPU6050_RESET(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MPU6050_RESET+0x2c>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	226b      	movs	r2, #107	@ 0x6b
 800130a:	21d0      	movs	r1, #208	@ 0xd0
 800130c:	f00c fc6c 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	240000a0 	.word	0x240000a0

0800131c <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af04      	add	r7, sp, #16
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MPU6050_CONFIG_DLPF+0x34>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	221a      	movs	r2, #26
 8001340:	21d0      	movs	r1, #208	@ 0xd0
 8001342:	f00c fc51 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	240000a0 	.word	0x240000a0

08001354 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af04      	add	r7, sp, #16
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MPU6050_CONFIG_GYRO+0x34>)
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f107 030f 	add.w	r3, r7, #15
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	221b      	movs	r2, #27
 8001378:	21d0      	movs	r1, #208	@ 0xd0
 800137a:	f00c fc35 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	240000a0 	.word	0x240000a0

0800138c <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af04      	add	r7, sp, #16
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MPU6050_CONFIG_ACCEL+0x34>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	221c      	movs	r2, #28
 80013b0:	21d0      	movs	r1, #208	@ 0xd0
 80013b2:	f00c fc19 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	240000a0 	.word	0x240000a0

080013c4 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	2219      	movs	r2, #25
 80013e2:	21d0      	movs	r1, #208	@ 0xd0
 80013e4:	f00c fc00 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	240000a0 	.word	0x240000a0

080013f4 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	2301      	movs	r3, #1
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	226a      	movs	r2, #106	@ 0x6a
 8001412:	21d0      	movs	r1, #208	@ 0xd0
 8001414:	f00c fbe8 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	240000a0 	.word	0x240000a0

08001424 <MPU6050_CALIBRATION>:
//}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 1000; i++){ //5 sec
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e071      	b.n	8001538 <MPU6050_CALIBRATION+0x114>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/MPU6050.Acc.Acc_Scale;
 8001454:	f000 fb28 	bl	8001aa8 <MPU6050_GET_ACCEL_FULLVALUE_X>
 8001458:	4603      	mov	r3, r0
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001462:	4b59      	ldr	r3, [pc, #356]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001464:	ed93 7a06 	vldr	s14, [r3, #24]
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	edc7 7a07 	vstr	s15, [r7, #28]
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/MPU6050.Acc.Acc_Scale;
 8001478:	f000 fb36 	bl	8001ae8 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800147c:	4603      	mov	r3, r0
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001486:	4b50      	ldr	r3, [pc, #320]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001488:	ed93 7a06 	vldr	s14, [r3, #24]
 800148c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001490:	ed97 7a06 	vldr	s14, [r7, #24]
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001498:	edc7 7a06 	vstr	s15, [r7, #24]
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/MPU6050.Acc.Acc_Scale;
 800149c:	f000 fb38 	bl	8001b10 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80014a0:	4603      	mov	r3, r0
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014aa:	4b47      	ldr	r3, [pc, #284]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80014ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80014b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	edc7 7a05 	vstr	s15, [r7, #20]

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/MPU6050.Gyr.Gyr_Scale;
 80014c0:	f000 fb3a 	bl	8001b38 <MPU6050_GET_GYRO_FULLVALUE_X>
 80014c4:	4603      	mov	r3, r0
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ce:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80014d0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	edc7 7a04 	vstr	s15, [r7, #16]
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/MPU6050.Gyr.Gyr_Scale;
 80014e4:	f000 fb3c 	bl	8001b60 <MPU6050_GET_GYRO_FULLVALUE_Y>
 80014e8:	4603      	mov	r3, r0
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f2:	4b35      	ldr	r3, [pc, #212]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80014f4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	edc7 7a03 	vstr	s15, [r7, #12]
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/MPU6050.Gyr.Gyr_Scale;
 8001508:	f000 fb3e 	bl	8001b88 <MPU6050_GET_GYRO_FULLVALUE_Z>
 800150c:	4603      	mov	r3, r0
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001516:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001518:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800151c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001520:	ed97 7a02 	vldr	s14, [r7, #8]
 8001524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001528:	edc7 7a02 	vstr	s15, [r7, #8]
		  HAL_Delay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f007 f94f 	bl	80087d0 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3301      	adds	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800153e:	db89      	blt.n	8001454 <MPU6050_CALIBRATION+0x30>
	}
	MPU6050.Acc.acc_x_cal = accelx/1000;
 8001540:	ed97 7a07 	vldr	s14, [r7, #28]
 8001544:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 8001548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 800154e:	edc3 7a07 	vstr	s15, [r3, #28]
	MPU6050.Acc.acc_y_cal = accely/1000;
 8001552:	ed97 7a06 	vldr	s14, [r7, #24]
 8001556:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 800155a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155e:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001560:	edc3 7a08 	vstr	s15, [r3, #32]
	MPU6050.Acc.acc_z_cal = accelz/1000;
 8001564:	ed97 7a05 	vldr	s14, [r7, #20]
 8001568:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 800156c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001572:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Acc.acc_z_cal = 1 - MPU6050.Acc.acc_z_cal;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001578:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800157c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001586:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MPU6050.Gyr.gyr_x_cal = gyrox/1000;
 800158a:	ed97 7a04 	vldr	s14, [r7, #16]
 800158e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 8001592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001596:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 8001598:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	MPU6050.Gyr.gyr_y_cal = gyroy/1000;
 800159c:	ed97 7a03 	vldr	s14, [r7, #12]
 80015a0:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 80015a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80015aa:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	MPU6050.Gyr.gyr_z_cal = gyroz/1000;
 80015ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80015b2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80015cc <MPU6050_CALIBRATION+0x1a8>
 80015b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ba:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <MPU6050_CALIBRATION+0x1a4>)
 80015bc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	00000000 	.word	0x00000000
 80015cc:	447a0000 	.word	0x447a0000

080015d0 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
	float ang1 = sqrt((MPU6050.Acc.ax*MPU6050.Acc.ax)+(MPU6050.Acc.az*MPU6050.Acc.az));
 80015d6:	4b42      	ldr	r3, [pc, #264]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e6:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80015ec:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80015ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80015f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fe:	eeb0 0b47 	vmov.f64	d0, d7
 8001602:	f01c f93d 	bl	801d880 <sqrt>
 8001606:	eeb0 7b40 	vmov.f64	d7, d0
 800160a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800160e:	edc7 7a01 	vstr	s15, [r7, #4]
	float ang2 = sqrt((MPU6050.Acc.ay*MPU6050.Acc.ay)+(MPU6050.Acc.az*MPU6050.Acc.az));
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001614:	ed93 7a01 	vldr	s14, [r3, #4]
 8001618:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800161a:	edd3 7a01 	vldr	s15, [r3, #4]
 800161e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001622:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001624:	edd3 6a02 	vldr	s13, [r3, #8]
 8001628:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800162a:	edd3 7a02 	vldr	s15, [r3, #8]
 800162e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800163a:	eeb0 0b47 	vmov.f64	d0, d7
 800163e:	f01c f91f 	bl	801d880 <sqrt>
 8001642:	eeb0 7b40 	vmov.f64	d7, d0
 8001646:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800164a:	edc7 7a00 	vstr	s15, [r7]

	MPU6050.Acc.ay_ang = ((-1*(atan(MPU6050.Acc.ax/ang2)))*180)/M_PI;
 800164e:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001650:	edd3 6a00 	vldr	s13, [r3]
 8001654:	ed97 7a00 	vldr	s14, [r7]
 8001658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001660:	eeb0 0b47 	vmov.f64	d0, d7
 8001664:	f01c f92c 	bl	801d8c0 <atan>
 8001668:	eeb0 7b40 	vmov.f64	d7, d0
 800166c:	eeb1 7b47 	vneg.f64	d7, d7
 8001670:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 80016d0 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 8001674:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001678:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 80016d8 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 800167c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001680:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001684:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 8001686:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU6050.Acc.ax_ang = ((atan(MPU6050.Acc.ay/ang1))*180)/M_PI;
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 800168c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001690:	ed97 7a01 	vldr	s14, [r7, #4]
 8001694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001698:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800169c:	eeb0 0b47 	vmov.f64	d0, d7
 80016a0:	f01c f90e 	bl	801d8c0 <atan>
 80016a4:	eeb0 7b40 	vmov.f64	d7, d0
 80016a8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80016d0 <MPU6050_GET_ACCEL_TO_ANGLE+0x100>
 80016ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016b0:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80016d8 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 80016b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>)
 80016be:	edc3 7a03 	vstr	s15, [r3, #12]
//	axan = -1*(atan(ax/ang2));
//	ayan= atan(ay/ang1);
//
//	*ay_ang = (axan*180)/M_PI;
//	*ax_ang = (ayan*180)/M_PI;
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	f3af 8000 	nop.w
 80016d0:	00000000 	.word	0x00000000
 80016d4:	40668000 	.word	0x40668000
 80016d8:	54442d18 	.word	0x54442d18
 80016dc:	400921fb 	.word	0x400921fb
 80016e0:	00000000 	.word	0x00000000

080016e4 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, MPU6050.I2C_Data, 14);
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	230e      	movs	r3, #14
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	223b      	movs	r2, #59	@ 0x3b
 80016fa:	21d0      	movs	r1, #208	@ 0xd0
 80016fc:	f00c fd2c 	bl	800e158 <HAL_I2C_Mem_Read_IT>
	MPU6050.MPU6050_IRQ = 1;
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x34>)
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	240000a0 	.word	0x240000a0
 8001714:	00000044 	.word	0x00000044
 8001718:	00000000 	.word	0x00000000

0800171c <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(void){
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
	MPU6050.Acc.ax = (((int16_t)(MPU6050.I2C_Data[0]<<8) | MPU6050.I2C_Data[1])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_x_cal;
 8001720:	4b53      	ldr	r3, [pc, #332]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001722:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21b      	sxth	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800172e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001732:	4313      	orrs	r3, r2
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800173c:	4b4c      	ldr	r3, [pc, #304]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800173e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001746:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001748:	edd3 7a07 	vldr	s15, [r3, #28]
 800174c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001750:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
	MPU6050.Acc.ay = (((int16_t)(MPU6050.I2C_Data[2]<<8) | MPU6050.I2C_Data[3])/MPU6050.Acc.Acc_Scale) - MPU6050.Acc.acc_y_cal;
 8001756:	4b46      	ldr	r3, [pc, #280]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001758:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21b      	sxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001764:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001768:	4313      	orrs	r3, r2
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001772:	4b3f      	ldr	r3, [pc, #252]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001774:	edd3 7a06 	vldr	s15, [r3, #24]
 8001778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800177c:	4b3c      	ldr	r3, [pc, #240]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800177e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001786:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001788:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU6050.Acc.az = (((int16_t)(MPU6050.I2C_Data[4]<<8) | MPU6050.I2C_Data[5])/MPU6050.Acc.Acc_Scale) + MPU6050.Acc.acc_z_cal;
 800178c:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800178e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b21b      	sxth	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800179a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800179e:	4313      	orrs	r3, r2
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80017ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017b4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80017b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017be:	edc3 7a02 	vstr	s15, [r3, #8]

	MPU6050.Gyr.gx = (((int16_t)(MPU6050.I2C_Data[8]<<8) | MPU6050.I2C_Data[9])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_x_cal;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017c4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017d0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80017d4:	4313      	orrs	r3, r2
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017e0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80017e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017e8:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017ea:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017f4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	MPU6050.Gyr.gy = (((int16_t)(MPU6050.I2C_Data[10]<<8) | MPU6050.I2C_Data[11])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_y_cal;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 80017fa:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21b      	sxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001806:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 800180a:	4313      	orrs	r3, r2
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001816:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800181a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001820:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800182a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	MPU6050.Gyr.gz = (((int16_t)(MPU6050.I2C_Data[12]<<8) | MPU6050.I2C_Data[13])/MPU6050.Gyr.Gyr_Scale) - MPU6050.Gyr.gyr_z_cal;
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001830:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21b      	sxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800183c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001840:	4313      	orrs	r3, r2
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 800184c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001856:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <MPU6050_GET_CALANDSCL_IT+0x154>)
 8001860:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	00000000 	.word	0x00000000

08001874 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float megz_ang){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	ed87 0a00 	vstr	s0, [r7]
	Complementary_getFilter(Complementary_Filter_st, MPU6050.Acc.ax_ang, MPU6050.Acc.ay_ang, megz_ang, MPU6050.Gyr.gx, MPU6050.Gyr.gy, MPU6050.Gyr.gz);
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001882:	edd3 7a03 	vldr	s15, [r3, #12]
 8001886:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001888:	ed93 7a04 	vldr	s14, [r3, #16]
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 800188e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001892:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 8001894:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <MPU6050_GET_ACCANDGYR_FILTRED+0x50>)
 800189a:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 800189e:	eef0 2a65 	vmov.f32	s5, s11
 80018a2:	eeb0 2a46 	vmov.f32	s4, s12
 80018a6:	eef0 1a66 	vmov.f32	s3, s13
 80018aa:	ed97 1a00 	vldr	s2, [r7]
 80018ae:	eef0 0a47 	vmov.f32	s1, s14
 80018b2:	eeb0 0a67 	vmov.f32	s0, s15
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f9aa 	bl	8001c10 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	00000000 	.word	0x00000000

080018c8 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MPU6050_GET_ACCEL_YH+0x2c>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2301      	movs	r3, #1
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	223d      	movs	r2, #61	@ 0x3d
 80018e2:	21d0      	movs	r1, #208	@ 0xd0
 80018e4:	f00c fa94 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	240000a0 	.word	0x240000a0

080018f8 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MPU6050_GET_ACCEL_YL+0x2c>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	2301      	movs	r3, #1
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	2301      	movs	r3, #1
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	223e      	movs	r2, #62	@ 0x3e
 8001912:	21d0      	movs	r1, #208	@ 0xd0
 8001914:	f00c fa7c 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 8001918:	79fb      	ldrb	r3, [r7, #7]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	240000a0 	.word	0x240000a0

08001928 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	2301      	movs	r3, #1
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	2301      	movs	r3, #1
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2301      	movs	r3, #1
 8001940:	223f      	movs	r2, #63	@ 0x3f
 8001942:	21d0      	movs	r1, #208	@ 0xd0
 8001944:	f00c fa64 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 8001948:	79fb      	ldrb	r3, [r7, #7]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	240000a0 	.word	0x240000a0

08001958 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MPU6050_GET_ACCEL_ZL+0x2c>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2301      	movs	r3, #1
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	2240      	movs	r2, #64	@ 0x40
 8001972:	21d0      	movs	r1, #208	@ 0xd0
 8001974:	f00c fa4c 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 8001978:	79fb      	ldrb	r3, [r7, #7]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	240000a0 	.word	0x240000a0

08001988 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MPU6050_GET_GYRO_XH+0x2c>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	2301      	movs	r3, #1
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	2243      	movs	r2, #67	@ 0x43
 80019a2:	21d0      	movs	r1, #208	@ 0xd0
 80019a4:	f00c fa34 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	240000a0 	.word	0x240000a0

080019b8 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <MPU6050_GET_GYRO_XL+0x2c>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	2301      	movs	r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	2244      	movs	r2, #68	@ 0x44
 80019d2:	21d0      	movs	r1, #208	@ 0xd0
 80019d4:	f00c fa1c 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	240000a0 	.word	0x240000a0

080019e8 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MPU6050_GET_GYRO_YH+0x2c>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	2301      	movs	r3, #1
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2301      	movs	r3, #1
 8001a00:	2245      	movs	r2, #69	@ 0x45
 8001a02:	21d0      	movs	r1, #208	@ 0xd0
 8001a04:	f00c fa04 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	240000a0 	.word	0x240000a0

08001a18 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <MPU6050_GET_GYRO_YL+0x2c>)
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	2301      	movs	r3, #1
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2301      	movs	r3, #1
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2246      	movs	r2, #70	@ 0x46
 8001a32:	21d0      	movs	r1, #208	@ 0xd0
 8001a34:	f00c f9ec 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	240000a0 	.word	0x240000a0

08001a48 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <MPU6050_GET_GYRO_ZH+0x2c>)
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2301      	movs	r3, #1
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2247      	movs	r2, #71	@ 0x47
 8001a62:	21d0      	movs	r1, #208	@ 0xd0
 8001a64:	f00c f9d4 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	240000a0 	.word	0x240000a0

08001a78 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MPU6050_GET_GYRO_ZL+0x2c>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	2301      	movs	r3, #1
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	2248      	movs	r2, #72	@ 0x48
 8001a92:	21d0      	movs	r1, #208	@ 0xd0
 8001a94:	f00c f9bc 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 8001a98:	79fb      	ldrb	r3, [r7, #7]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	240000a0 	.word	0x240000a0

08001aa8 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	223b      	movs	r2, #59	@ 0x3b
 8001ac2:	21d0      	movs	r1, #208	@ 0xd0
 8001ac4:	f00c f9a4 	bl	800de10 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001ac8:	793b      	ldrb	r3, [r7, #4]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	797b      	ldrb	r3, [r7, #5]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	240000a0 	.word	0x240000a0

08001ae8 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001aee:	f7ff feeb 	bl	80018c8 <MPU6050_GET_ACCEL_YH>
 8001af2:	4603      	mov	r3, r0
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b21c      	sxth	r4, r3
 8001af8:	f7ff fefe 	bl	80018f8 <MPU6050_GET_ACCEL_YL>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4323      	orrs	r3, r4
 8001b02:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}

08001b10 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b16:	f7ff ff07 	bl	8001928 <MPU6050_GET_ACCEL_ZH>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21c      	sxth	r4, r3
 8001b20:	f7ff ff1a 	bl	8001958 <MPU6050_GET_ACCEL_ZL>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4323      	orrs	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b3e:	f7ff ff23 	bl	8001988 <MPU6050_GET_GYRO_XH>
 8001b42:	4603      	mov	r3, r0
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	b21c      	sxth	r4, r3
 8001b48:	f7ff ff36 	bl	80019b8 <MPU6050_GET_GYRO_XL>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4323      	orrs	r3, r4
 8001b52:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}

08001b60 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001b66:	f7ff ff3f 	bl	80019e8 <MPU6050_GET_GYRO_YH>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21c      	sxth	r4, r3
 8001b70:	f7ff ff52 	bl	8001a18 <MPU6050_GET_GYRO_YL>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	4323      	orrs	r3, r4
 8001b7a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001b8e:	f7ff ff5b 	bl	8001a48 <MPU6050_GET_GYRO_ZH>
 8001b92:	4603      	mov	r3, r0
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21c      	sxth	r4, r3
 8001b98:	f7ff ff6e 	bl	8001a78 <MPU6050_GET_GYRO_ZL>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	4323      	orrs	r3, r4
 8001ba2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}

08001bb0 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <MPU6050_READ_ID+0x2c>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2275      	movs	r2, #117	@ 0x75
 8001bca:	21d0      	movs	r1, #208	@ 0xd0
 8001bcc:	f00c f920 	bl	800de10 <HAL_I2C_Mem_Read>
	return data;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	b25b      	sxtb	r3, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	240000a0 	.word	0x240000a0

08001be0 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001be6:	2302      	movs	r3, #2
 8001be8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	2237      	movs	r2, #55	@ 0x37
 8001bfe:	21d0      	movs	r1, #208	@ 0xd0
 8001c00:	f00b fff2 	bl	800dbe8 <HAL_I2C_Mem_Write>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	240000a0 	.word	0x240000a0

08001c10 <Complementary_getFilter>:
	*VerVel += (VerAcc*looptime);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	@ 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	61f8      	str	r0, [r7, #28]
 8001c18:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c1c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c20:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c24:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c28:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c2c:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c38:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001cf8 <Complementary_getFilter+0xe8>
 8001c3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c40:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <Complementary_getFilter+0xf8>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c5c:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d00 <Complementary_getFilter+0xf0>
 8001c60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001c72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c7a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001cf8 <Complementary_getFilter+0xe8>
 8001c7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <Complementary_getFilter+0xf8>)
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c9e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d00 <Complementary_getFilter+0xf0>
 8001ca2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ca6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001caa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (((gz_ang*looptime)+Complementary_Filter_st->oz));//todo add magnetomiter?
 8001cb4:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <Complementary_getFilter+0xf8>)
 8001cb6:	ed93 7a00 	vldr	s14, [r3]
 8001cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001cea:	bf00      	nop
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	47ae147b 	.word	0x47ae147b
 8001cfc:	3f947ae1 	.word	0x3f947ae1
 8001d00:	f5c28f5c 	.word	0xf5c28f5c
 8001d04:	3fef5c28 	.word	0x3fef5c28
 8001d08:	0801e2cc 	.word	0x0801e2cc

08001d0c <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f006 fd5a 	bl	80087d0 <HAL_Delay>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <nRF24_SendSpi+0x28>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	f011 ffd5 	bl	8013cec <HAL_SPI_Transmit>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	240000a4 	.word	0x240000a4

08001d50 <nRF24_SendSpi_IT>:
static void nRF24_SendSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit_IT(hspi_nrf, Data, Length);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <nRF24_SendSpi_IT+0x24>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	b292      	uxth	r2, r2
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f012 ff5a 	bl	8014c20 <HAL_SPI_Transmit_IT>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	240000a4 	.word	0x240000a4

08001d78 <nRF24_ReadSpi>:


static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <nRF24_ReadSpi+0x28>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	f012 f999 	bl	80140c8 <HAL_SPI_Receive>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	240000a4 	.word	0x240000a4

08001da4 <nRF24_ReadSpi_IT>:
static void nRF24_ReadSpi_IT(uint8_t *Data, uint8_t Length)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive_IT(hspi_nrf, Data, Length);
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <nRF24_ReadSpi_IT+0x24>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	b292      	uxth	r2, r2
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f012 ffda 	bl	8014d74 <HAL_SPI_Receive_IT>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	240000a4 	.word	0x240000a4

08001dcc <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <nRF24_ReadRegister+0x44>)
 8001de0:	f00b fe32 	bl	800da48 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	2101      	movs	r1, #1
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff9b 	bl	8001d24 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001dee:	f107 030f 	add.w	r3, r7, #15
 8001df2:	2101      	movs	r1, #1
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ffbf 	bl	8001d78 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <nRF24_ReadRegister+0x44>)
 8001e00:	f00b fe22 	bl	800da48 <HAL_GPIO_WritePin>

	return result;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	58020400 	.word	0x58020400

08001e14 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	480a      	ldr	r0, [pc, #40]	@ (8001e58 <nRF24_ReadRegisters+0x44>)
 8001e2e:	f00b fe0b 	bl	800da48 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff74 	bl	8001d24 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f7ff ff99 	bl	8001d78 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e46:	2201      	movs	r2, #1
 8001e48:	2180      	movs	r1, #128	@ 0x80
 8001e4a:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <nRF24_ReadRegisters+0x44>)
 8001e4c:	f00b fdfc 	bl	800da48 <HAL_GPIO_WritePin>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	58020400 	.word	0x58020400

08001e5c <nRF24_ReadRegisters_IT>:

static void nRF24_ReadRegisters_IT(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e70:	2200      	movs	r2, #0
 8001e72:	2180      	movs	r1, #128	@ 0x80
 8001e74:	480a      	ldr	r0, [pc, #40]	@ (8001ea0 <nRF24_ReadRegisters_IT+0x44>)
 8001e76:	f00b fde7 	bl	800da48 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff50 	bl	8001d24 <nRF24_SendSpi>
	nRF24_ReadSpi_IT(ret, len);
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	4619      	mov	r1, r3
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f7ff ff8b 	bl	8001da4 <nRF24_ReadSpi_IT>

	NRF24.SPI_Rx_Inte = 1;
 8001e8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <nRF24_ReadRegisters_IT+0x48>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	//NRF24_CSN_HIGH;
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	58020400 	.word	0x58020400
 8001ea4:	000000fc 	.word	0x000000fc

08001ea8 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f043 0320 	orr.w	r3, r3, #32
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	4809      	ldr	r0, [pc, #36]	@ (8001ef0 <nRF24_WriteRegister+0x48>)
 8001ecc:	f00b fdbc 	bl	800da48 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff24 	bl	8001d24 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001edc:	2201      	movs	r2, #1
 8001ede:	2180      	movs	r1, #128	@ 0x80
 8001ee0:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <nRF24_WriteRegister+0x48>)
 8001ee2:	f00b fdb1 	bl	800da48 <HAL_GPIO_WritePin>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	58020400 	.word	0x58020400

08001ef4 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
 8001f00:	4613      	mov	r3, r2
 8001f02:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	480b      	ldr	r0, [pc, #44]	@ (8001f40 <nRF24_WriteRegisters+0x4c>)
 8001f14:	f00b fd98 	bl	800da48 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff01 	bl	8001d24 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001f22:	79bb      	ldrb	r3, [r7, #6]
 8001f24:	4619      	mov	r1, r3
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f7ff fefc 	bl	8001d24 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2180      	movs	r1, #128	@ 0x80
 8001f30:	4803      	ldr	r0, [pc, #12]	@ (8001f40 <nRF24_WriteRegisters+0x4c>)
 8001f32:	f00b fd89 	bl	800da48 <HAL_GPIO_WritePin>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	58020400 	.word	0x58020400

08001f44 <nRF24_WriteRegisters_IT>:

static void nRF24_WriteRegisters_IT(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	4613      	mov	r3, r2
 8001f52:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f043 0320 	orr.w	r3, r3, #32
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	480a      	ldr	r0, [pc, #40]	@ (8001f8c <nRF24_WriteRegisters_IT+0x48>)
 8001f64:	f00b fd70 	bl	800da48 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fed9 	bl	8001d24 <nRF24_SendSpi>
	nRF24_SendSpi_IT(val, len);
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	4619      	mov	r1, r3
 8001f76:	6838      	ldr	r0, [r7, #0]
 8001f78:	f7ff feea 	bl	8001d50 <nRF24_SendSpi_IT>

	NRF24.SPI_Tx_Inte = 1;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <nRF24_WriteRegisters_IT+0x4c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	//NRF24_CSN_HIGH;
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58020400 	.word	0x58020400
 8001f90:	000000fc 	.word	0x000000fc

08001f94 <nRF24_RX_Mode>:



void nRF24_RX_Mode(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <nRF24_RX_Mode+0x60>)
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	uint8_t config = nRF24_ReadConfig();
 8001fa2:	f000 f85d 	bl	8002060 <nRF24_ReadConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001faa:	4913      	ldr	r1, [pc, #76]	@ (8001ff8 <nRF24_RX_Mode+0x64>)
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 fa06 	bl	80023be <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f853 	bl	8002070 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001fca:	2070      	movs	r0, #112	@ 0x70
 8001fcc:	f000 f8ab 	bl	8002126 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001fd0:	f000 f8b8 	bl	8002144 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001fd4:	f000 f8d0 	bl	8002178 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2140      	movs	r1, #64	@ 0x40
 8001fdc:	4807      	ldr	r0, [pc, #28]	@ (8001ffc <nRF24_RX_Mode+0x68>)
 8001fde:	f00b fd33 	bl	800da48 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8001fe2:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <nRF24_RX_Mode+0x60>)
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	000000fc 	.word	0x000000fc
 8001ff8:	240000a8 	.word	0x240000a8
 8001ffc:	58020400 	.word	0x58020400

08002000 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	NRF24.Status = NRF24_InUse;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <nRF24_TX_Mode+0x58>)
 8002008:	2205      	movs	r2, #5
 800200a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24_CE_LOW;
 800200e:	2200      	movs	r2, #0
 8002010:	2140      	movs	r1, #64	@ 0x40
 8002012:	4812      	ldr	r0, [pc, #72]	@ (800205c <nRF24_TX_Mode+0x5c>)
 8002014:	f00b fd18 	bl	800da48 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8002018:	f000 f822 	bl	8002060 <nRF24_ReadConfig>
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f81c 	bl	8002070 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002038:	2070      	movs	r0, #112	@ 0x70
 800203a:	f000 f874 	bl	8002126 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800203e:	f000 f881 	bl	8002144 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002042:	f000 f899 	bl	8002178 <nRF24_FlushTX>
	//important wait 2ms for next interactionw with NRF24
	//nRF24_Delay(1);
	NRF24.NRF24_MODE = NRF24_Switching_Modes;
 8002046:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <nRF24_TX_Mode+0x58>)
 8002048:	2203      	movs	r2, #3
 800204a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	000000fc 	.word	0x000000fc
 800205c:	58020400 	.word	0x58020400

08002060 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff feb1 	bl	8001dcc <nRF24_ReadRegister>
 800206a:	4603      	mov	r3, r0
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}

08002070 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4619      	mov	r1, r3
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff ff12 	bl	8001ea8 <nRF24_WriteRegister>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002096:	2006      	movs	r0, #6
 8002098:	f7ff fe98 	bl	8001dcc <nRF24_ReadRegister>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	f023 0307 	bic.w	r3, r3, #7
 80020a6:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	b25a      	sxtb	r2, r3
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b25b      	sxtb	r3, r3
 80020b6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4619      	mov	r1, r3
 80020bc:	2006      	movs	r0, #6
 80020be:	f7ff fef3 	bl	8001ea8 <nRF24_WriteRegister>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80020d4:	2006      	movs	r0, #6
 80020d6:	f7ff fe79 	bl	8001dcc <nRF24_ReadRegister>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80020e4:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d104      	bne.n	80020f6 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	f043 0320 	orr.w	r3, r3, #32
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e006      	b.n	8002104 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d103      	bne.n	8002104 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	4619      	mov	r1, r3
 8002108:	2006      	movs	r0, #6
 800210a:	f7ff fecd 	bl	8001ea8 <nRF24_WriteRegister>
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800211a:	2007      	movs	r0, #7
 800211c:	f7ff fe56 	bl	8001dcc <nRF24_ReadRegister>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}

08002126 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	4619      	mov	r1, r3
 8002134:	2007      	movs	r0, #7
 8002136:	f7ff feb7 	bl	8001ea8 <nRF24_WriteRegister>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800214a:	23e2      	movs	r3, #226	@ 0xe2
 800214c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800214e:	2200      	movs	r2, #0
 8002150:	2180      	movs	r1, #128	@ 0x80
 8002152:	4808      	ldr	r0, [pc, #32]	@ (8002174 <nRF24_FlushRX+0x30>)
 8002154:	f00b fc78 	bl	800da48 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fde1 	bl	8001d24 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002162:	2201      	movs	r2, #1
 8002164:	2180      	movs	r1, #128	@ 0x80
 8002166:	4803      	ldr	r0, [pc, #12]	@ (8002174 <nRF24_FlushRX+0x30>)
 8002168:	f00b fc6e 	bl	800da48 <HAL_GPIO_WritePin>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	58020400 	.word	0x58020400

08002178 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800217e:	23e1      	movs	r3, #225	@ 0xe1
 8002180:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002182:	2200      	movs	r2, #0
 8002184:	2180      	movs	r1, #128	@ 0x80
 8002186:	4808      	ldr	r0, [pc, #32]	@ (80021a8 <nRF24_FlushTX+0x30>)
 8002188:	f00b fc5e 	bl	800da48 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fdc7 	bl	8001d24 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002196:	2201      	movs	r2, #1
 8002198:	2180      	movs	r1, #128	@ 0x80
 800219a:	4803      	ldr	r0, [pc, #12]	@ (80021a8 <nRF24_FlushTX+0x30>)
 800219c:	f00b fc54 	bl	800da48 <HAL_GPIO_WritePin>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	58020400 	.word	0x58020400

080021ac <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021b6:	f7ff ff53 	bl	8002060 <nRF24_ReadConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e003      	b.n	80021d6 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	f023 0308 	bic.w	r3, r3, #8
 80021d4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff49 	bl	8002070 <nRF24_WriteConfig>
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021f0:	f7ff ff36 	bl	8002060 <nRF24_ReadConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d104      	bne.n	8002208 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e003      	b.n	8002210 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	f023 0304 	bic.w	r3, r3, #4
 800220e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff2c 	bl	8002070 <nRF24_WriteConfig>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	460a      	mov	r2, r1
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	4613      	mov	r3, r2
 800222e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	b25a      	sxtb	r2, r3
 8002236:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	b25b      	sxtb	r3, r3
 8002240:	4313      	orrs	r3, r2
 8002242:	b25b      	sxtb	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4619      	mov	r1, r3
 8002248:	2004      	movs	r0, #4
 800224a:	f7ff fe2d 	bl	8001ea8 <nRF24_WriteRegister>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	2005      	movs	r0, #5
 800226c:	f7ff fe1c 	bl	8001ea8 <nRF24_WriteRegister>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	460a      	mov	r2, r1
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	4613      	mov	r3, r2
 8002286:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d901      	bls.n	8002292 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 800228e:	2305      	movs	r3, #5
 8002290:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	3311      	adds	r3, #17
 8002296:	b2da      	uxtb	r2, r3
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff fe00 	bl	8001ea8 <nRF24_WriteRegister>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	460a      	mov	r2, r1
 80022ba:	71fb      	strb	r3, [r7, #7]
 80022bc:	4613      	mov	r3, r2
 80022be:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d901      	bls.n	80022ca <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80022c6:	2305      	movs	r3, #5
 80022c8:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80022ca:	2002      	movs	r0, #2
 80022cc:	f7ff fd7e 	bl	8001dcc <nRF24_ReadRegister>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10a      	bne.n	80022f0 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2201      	movs	r2, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	b25a      	sxtb	r2, r3
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b25b      	sxtb	r3, r3
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	e00b      	b.n	8002308 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2201      	movs	r2, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	b25a      	sxtb	r2, r3
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4013      	ands	r3, r2
 8002304:	b25b      	sxtb	r3, r3
 8002306:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4619      	mov	r1, r3
 800230c:	2002      	movs	r0, #2
 800230e:	f7ff fdcb 	bl	8001ea8 <nRF24_WriteRegister>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	460a      	mov	r2, r1
 8002324:	71fb      	strb	r3, [r7, #7]
 8002326:	4613      	mov	r3, r2
 8002328:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b05      	cmp	r3, #5
 800232e:	d901      	bls.n	8002334 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002330:	2305      	movs	r3, #5
 8002332:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff fd49 	bl	8001dcc <nRF24_ReadRegister>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d10a      	bne.n	800235a <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2201      	movs	r2, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	b25a      	sxtb	r2, r3
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4313      	orrs	r3, r2
 8002354:	b25b      	sxtb	r3, r3
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e00b      	b.n	8002372 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2201      	movs	r2, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	b25b      	sxtb	r3, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	b25a      	sxtb	r2, r3
 8002368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236c:	4013      	ands	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	4619      	mov	r1, r3
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff fd96 	bl	8001ea8 <nRF24_WriteRegister>
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d901      	bls.n	8002398 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002394:	2305      	movs	r3, #5
 8002396:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d801      	bhi.n	80023a2 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800239e:	2303      	movs	r3, #3
 80023a0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	3b02      	subs	r3, #2
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	2003      	movs	r0, #3
 80023b2:	f7ff fd79 	bl	8001ea8 <nRF24_WriteRegister>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	6039      	str	r1, [r7, #0]
 80023c8:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <nRF24_SetRXAddress+0x18>
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d11d      	bne.n	8002412 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e00d      	b.n	80023f8 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	441a      	add	r2, r3
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	f1c3 0302 	rsb	r3, r3, #2
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	3310      	adds	r3, #16
 80023ec:	443b      	add	r3, r7
 80023ee:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	3301      	adds	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d9ee      	bls.n	80023dc <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	330a      	adds	r3, #10
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f107 010c 	add.w	r1, r7, #12
 8002408:	2203      	movs	r2, #3
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fd72 	bl	8001ef4 <nRF24_WriteRegisters>
	{
 8002410:	e00a      	b.n	8002428 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	330a      	adds	r3, #10
 8002416:	b2da      	uxtb	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	3302      	adds	r3, #2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7ff fd41 	bl	8001ea8 <nRF24_WriteRegister>
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	2203      	movs	r2, #3
 800243e:	4619      	mov	r1, r3
 8002440:	200a      	movs	r0, #10
 8002442:	f7ff fce7 	bl	8001e14 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e00c      	b.n	8002466 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	f1c3 0302 	rsb	r3, r3, #2
 8002454:	3210      	adds	r2, #16
 8002456:	443a      	add	r2, r7
 8002458:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800245c:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <nRF24_SetTXAddress+0x88>)
 800245e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	3301      	adds	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d9ef      	bls.n	800244c <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e00d      	b.n	800248e <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	441a      	add	r2, r3
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f1c3 0302 	rsb	r3, r3, #2
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	3310      	adds	r3, #16
 8002482:	443b      	add	r3, r7
 8002484:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d9ee      	bls.n	8002472 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	2203      	movs	r2, #3
 800249a:	4619      	mov	r1, r3
 800249c:	200a      	movs	r0, #10
 800249e:	f7ff fd29 	bl	8001ef4 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	2203      	movs	r2, #3
 80024a8:	4619      	mov	r1, r3
 80024aa:	2010      	movs	r0, #16
 80024ac:	f7ff fd22 	bl	8001ef4 <nRF24_WriteRegisters>

}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	240000a8 	.word	0x240000a8

080024bc <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80024c2:	f7ff fe28 	bl	8002116 <nRF24_ReadStatus>
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80024d0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fe26 	bl	8002126 <nRF24_WriteStatus>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024ec:	f7ff fdb8 	bl	8002060 <nRF24_ReadConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d104      	bne.n	8002504 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e003      	b.n	800250c <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800250a:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fdae 	bl	8002070 <nRF24_WriteConfig>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002526:	f7ff fd9b 	bl	8002060 <nRF24_ReadConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d104      	bne.n	800253e <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e003      	b.n	8002546 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	f023 0320 	bic.w	r3, r3, #32
 8002544:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd91 	bl	8002070 <nRF24_WriteConfig>
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002560:	f7ff fd7e 	bl	8002060 <nRF24_ReadConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	f043 0310 	orr.w	r3, r3, #16
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e003      	b.n	8002580 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fd74 	bl	8002070 <nRF24_WriteConfig>
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002598:	2220      	movs	r2, #32
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	20a0      	movs	r0, #160	@ 0xa0
 800259e:	f7ff fca9 	bl	8001ef4 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <nRF24_WriteTXPayload_IT>:

void nRF24_WriteTXPayload_IT(uint8_t * data)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <nRF24_WriteTXPayload_IT+0x24>)
 80025b6:	2205      	movs	r2, #5
 80025b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_WriteRegisters_IT(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80025bc:	2220      	movs	r2, #32
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	20a0      	movs	r0, #160	@ 0xa0
 80025c2:	f7ff fcbf 	bl	8001f44 <nRF24_WriteRegisters_IT>
	//nRF24_WaitTX();
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	000000fc 	.word	0x000000fc

080025d4 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80025da:	2201      	movs	r2, #1
 80025dc:	2140      	movs	r1, #64	@ 0x40
 80025de:	4810      	ldr	r0, [pc, #64]	@ (8002620 <nRF24_WaitTX+0x4c>)
 80025e0:	f00b fa32 	bl	800da48 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7ff fb91 	bl	8001d0c <nRF24_Delay>
	NRF24_CE_LOW;
 80025ea:	2200      	movs	r2, #0
 80025ec:	2140      	movs	r1, #64	@ 0x40
 80025ee:	480c      	ldr	r0, [pc, #48]	@ (8002620 <nRF24_WaitTX+0x4c>)
 80025f0:	f00b fa2a 	bl	800da48 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 80025f4:	2001      	movs	r0, #1
 80025f6:	f7ff fb89 	bl	8001d0c <nRF24_Delay>
		status = nRF24_ReadStatus();
 80025fa:	f7ff fd8c 	bl	8002116 <nRF24_ReadStatus>
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <nRF24_WaitTX+0x42>
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ee      	beq.n	80025f4 <nRF24_WaitTX+0x20>

}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	58020400 	.word	0x58020400

08002624 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800262c:	2220      	movs	r2, #32
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	2061      	movs	r0, #97	@ 0x61
 8002632:	f7ff fbef 	bl	8001e14 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002636:	2140      	movs	r1, #64	@ 0x40
 8002638:	2007      	movs	r0, #7
 800263a:	f7ff fc35 	bl	8001ea8 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800263e:	f7ff fd6a 	bl	8002116 <nRF24_ReadStatus>
 8002642:	4603      	mov	r3, r0
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 800264c:	2120      	movs	r1, #32
 800264e:	2007      	movs	r0, #7
 8002650:	f7ff fc2a 	bl	8001ea8 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <nRF24_ReadRXPaylaod_IT>:

void nRF24_ReadRXPaylaod_IT(uint8_t *data){
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	NRF24.Status = NRF24_InUse;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <nRF24_ReadRXPaylaod_IT+0x24>)
 8002666:	2205      	movs	r2, #5
 8002668:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	nRF24_ReadRegisters_IT(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800266c:	2220      	movs	r2, #32
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	2061      	movs	r0, #97	@ 0x61
 8002672:	f7ff fbf3 	bl	8001e5c <nRF24_ReadRegisters_IT>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	000000fc 	.word	0x000000fc

08002684 <nRF24_ReadRXPaylaod_IT_End>:

void nRF24_ReadRXPaylaod_IT_End(void){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	NRF24_CSN_HIGH;
 8002688:	2201      	movs	r2, #1
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	480b      	ldr	r0, [pc, #44]	@ (80026bc <nRF24_ReadRXPaylaod_IT_End+0x38>)
 800268e:	f00b f9db 	bl	800da48 <HAL_GPIO_WritePin>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	2007      	movs	r0, #7
 8002696:	f7ff fc07 	bl	8001ea8 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800269a:	f7ff fd3c 	bl	8002116 <nRF24_ReadStatus>
 800269e:	4603      	mov	r3, r0
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <nRF24_ReadRXPaylaod_IT_End+0x2c>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80026a8:	2120      	movs	r1, #32
 80026aa:	2007      	movs	r0, #7
 80026ac:	f7ff fbfc 	bl	8001ea8 <nRF24_WriteRegister>
	}
	NRF24.Status = NRF24_Ready;
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <nRF24_ReadRXPaylaod_IT_End+0x3c>)
 80026b2:	2204      	movs	r2, #4
 80026b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	58020400 	.word	0x58020400
 80026c0:	000000fc 	.word	0x000000fc

080026c4 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 80026ce:	f000 f811 	bl	80026f4 <nRF24_ReadFifoStatus>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	fa42 f303 	asr.w	r3, r2, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80026f8:	2017      	movs	r0, #23
 80026fa:	f7ff fb67 	bl	8001dcc <nRF24_ReadRegister>
 80026fe:	4603      	mov	r3, r0
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}

08002704 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800270c:	4a25      	ldr	r2, [pc, #148]	@ (80027a4 <nRF24_Init+0xa0>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002712:	2200      	movs	r2, #0
 8002714:	2140      	movs	r1, #64	@ 0x40
 8002716:	4824      	ldr	r0, [pc, #144]	@ (80027a8 <nRF24_Init+0xa4>)
 8002718:	f00b f996 	bl	800da48 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800271c:	2201      	movs	r2, #1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	4821      	ldr	r0, [pc, #132]	@ (80027a8 <nRF24_Init+0xa4>)
 8002722:	f00b f991 	bl	800da48 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 8002726:	200a      	movs	r0, #10
 8002728:	f006 f852 	bl	80087d0 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800272c:	2003      	movs	r0, #3
 800272e:	f7ff fcad 	bl	800208c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 8002732:	2001      	movs	r0, #1
 8002734:	f7ff fcc9 	bl	80020ca <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff fd37 	bl	80021ac <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff fd51 	bl	80021e6 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 8002744:	2100      	movs	r1, #0
 8002746:	2000      	movs	r0, #0
 8002748:	f7ff fd6a 	bl	8002220 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 800274c:	2100      	movs	r1, #0
 800274e:	201c      	movs	r0, #28
 8002750:	f7ff fbaa 	bl	8001ea8 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002754:	2120      	movs	r1, #32
 8002756:	2000      	movs	r0, #0
 8002758:	f7ff fd8e 	bl	8002278 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 800275c:	200f      	movs	r0, #15
 800275e:	f7ff fd7a 	bl	8002256 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002762:	2101      	movs	r1, #1
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff fda3 	bl	80022b0 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800276a:	2101      	movs	r1, #1
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fdd4 	bl	800231a <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002772:	2003      	movs	r0, #3
 8002774:	f7ff fe06 	bl	8002384 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f006 f829 	bl	80087d0 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 800277e:	2001      	movs	r0, #1
 8002780:	f7ff feaf 	bl	80024e2 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fec9 	bl	800251c <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fee3 	bl	8002556 <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002790:	2001      	movs	r0, #1
 8002792:	f006 f81d 	bl	80087d0 <HAL_Delay>

	nRF24_ClearInterrupts();
 8002796:	f7ff fe91 	bl	80024bc <nRF24_ClearInterrupts>


}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	240000a4 	.word	0x240000a4
 80027a8:	58020400 	.word	0x58020400

080027ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027b0:	f3bf 8f4f 	dsb	sy
}
 80027b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <__NVIC_SystemReset+0x24>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027be:	4904      	ldr	r1, [pc, #16]	@ (80027d0 <__NVIC_SystemReset+0x24>)
 80027c0:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <__NVIC_SystemReset+0x28>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80027c6:	f3bf 8f4f 	dsb	sy
}
 80027ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <__NVIC_SystemReset+0x20>
 80027d0:	e000ed00 	.word	0xe000ed00
 80027d4:	05fa0004 	.word	0x05fa0004

080027d8 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]
 80027e2:	2300      	movs	r3, #0
 80027e4:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80027e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <interpretcommand+0x8c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80027ec:	2300      	movs	r3, #0
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e02e      	b.n	8002850 <interpretcommand+0x78>

		if(words[j] == ' '){
 80027f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002868 <interpretcommand+0x90>)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d102      	bne.n	8002804 <interpretcommand+0x2c>
			vcount++;
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	3301      	adds	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <interpretcommand+0x44>
			command[j] = words[j];
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <interpretcommand+0x90>)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	7819      	ldrb	r1, [r3, #0]
 8002812:	4a16      	ldr	r2, [pc, #88]	@ (800286c <interpretcommand+0x94>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	460a      	mov	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d113      	bne.n	800284a <interpretcommand+0x72>
			value1[J1] = words[j];
 8002822:	7dbb      	ldrb	r3, [r7, #22]
 8002824:	4910      	ldr	r1, [pc, #64]	@ (8002868 <interpretcommand+0x90>)
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	440a      	add	r2, r1
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	3318      	adds	r3, #24
 800282e:	443b      	add	r3, r7
 8002830:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002834:	7dba      	ldrb	r2, [r7, #22]
 8002836:	7dbb      	ldrb	r3, [r7, #22]
 8002838:	3218      	adds	r2, #24
 800283a:	443a      	add	r2, r7
 800283c:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002840:	4a0b      	ldr	r2, [pc, #44]	@ (8002870 <interpretcommand+0x98>)
 8002842:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002844:	7dbb      	ldrb	r3, [r7, #22]
 8002846:	3301      	adds	r3, #1
 8002848:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	3301      	adds	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b4f      	cmp	r3, #79	@ 0x4f
 8002854:	ddcd      	ble.n	80027f2 <interpretcommand+0x1a>
		}
	}
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	000041ba 	.word	0x000041ba
 8002868:	000041b0 	.word	0x000041b0
 800286c:	000041ac 	.word	0x000041ac
 8002870:	0000419c 	.word	0x0000419c

08002874 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b50      	cmp	r3, #80	@ 0x50
 8002884:	d14c      	bne.n	8002920 <executecommand+0xac>
	{
		MYDRON.PID_Pitch.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002886:	4bd5      	ldr	r3, [pc, #852]	@ (8002bdc <executecommand+0x368>)
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002892:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002be0 <executecommand+0x36c>
 8002896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800289a:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002be4 <executecommand+0x370>
 800289e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028a2:	4bce      	ldr	r3, [pc, #824]	@ (8002bdc <executecommand+0x368>)
 80028a4:	789b      	ldrb	r3, [r3, #2]
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ae:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002be0 <executecommand+0x36c>
 80028b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028b6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c2:	4bc6      	ldr	r3, [pc, #792]	@ (8002bdc <executecommand+0x368>)
 80028c4:	78db      	ldrb	r3, [r3, #3]
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ce:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002be0 <executecommand+0x36c>
 80028d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028da:	4bc0      	ldr	r3, [pc, #768]	@ (8002bdc <executecommand+0x368>)
 80028dc:	791b      	ldrb	r3, [r3, #4]
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e6:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002be0 <executecommand+0x36c>
 80028ea:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028ee:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80028f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028fa:	4bb8      	ldr	r3, [pc, #736]	@ (8002bdc <executecommand+0x368>)
 80028fc:	795b      	ldrb	r3, [r3, #5]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002906:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002be0 <executecommand+0x36c>
 800290a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800290e:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002be4 <executecommand+0x370>
 8002912:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291a:	4bb3      	ldr	r3, [pc, #716]	@ (8002be8 <executecommand+0x374>)
 800291c:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	}

	if(command[0] == 'I')
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b49      	cmp	r3, #73	@ 0x49
 8002926:	d14f      	bne.n	80029c8 <executecommand+0x154>
	{
		MYDRON.PID_Pitch.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002928:	4bac      	ldr	r3, [pc, #688]	@ (8002bdc <executecommand+0x368>)
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002934:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002be0 <executecommand+0x36c>
 8002938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800293c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002be4 <executecommand+0x370>
 8002940:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002944:	4ba5      	ldr	r3, [pc, #660]	@ (8002bdc <executecommand+0x368>)
 8002946:	789b      	ldrb	r3, [r3, #2]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002be0 <executecommand+0x36c>
 8002954:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002958:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800295c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002964:	4b9d      	ldr	r3, [pc, #628]	@ (8002bdc <executecommand+0x368>)
 8002966:	78db      	ldrb	r3, [r3, #3]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002be0 <executecommand+0x36c>
 8002974:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800297c:	4b97      	ldr	r3, [pc, #604]	@ (8002bdc <executecommand+0x368>)
 800297e:	791b      	ldrb	r3, [r3, #4]
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002988:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002be0 <executecommand+0x36c>
 800298c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002990:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002994:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800299c:	4b8f      	ldr	r3, [pc, #572]	@ (8002bdc <executecommand+0x368>)
 800299e:	795b      	ldrb	r3, [r3, #5]
 80029a0:	ee07 3a90 	vmov	s15, r3
 80029a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002be0 <executecommand+0x36c>
 80029ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029b0:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002be4 <executecommand+0x370>
 80029b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	4b8a      	ldr	r3, [pc, #552]	@ (8002be8 <executecommand+0x374>)
 80029be:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
		MYDRON.Pitch.Angle_Error_Sum = 0;
 80029c2:	4b89      	ldr	r3, [pc, #548]	@ (8002be8 <executecommand+0x374>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	if(command[0] == 'D')
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b44      	cmp	r3, #68	@ 0x44
 80029ce:	d14c      	bne.n	8002a6a <executecommand+0x1f6>
	{
		MYDRON.PID_Pitch.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80029d0:	4b82      	ldr	r3, [pc, #520]	@ (8002bdc <executecommand+0x368>)
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029dc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002be0 <executecommand+0x36c>
 80029e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e4:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8002bec <executecommand+0x378>
 80029e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ec:	4b7b      	ldr	r3, [pc, #492]	@ (8002bdc <executecommand+0x368>)
 80029ee:	789b      	ldrb	r3, [r3, #2]
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f8:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002be0 <executecommand+0x36c>
 80029fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a00:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002be4 <executecommand+0x370>
 8002a04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0c:	4b73      	ldr	r3, [pc, #460]	@ (8002bdc <executecommand+0x368>)
 8002a0e:	78db      	ldrb	r3, [r3, #3]
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a18:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002be0 <executecommand+0x36c>
 8002a1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a20:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bdc <executecommand+0x368>)
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002be0 <executecommand+0x36c>
 8002a3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a44:	4b65      	ldr	r3, [pc, #404]	@ (8002bdc <executecommand+0x368>)
 8002a46:	795b      	ldrb	r3, [r3, #5]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a50:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002be0 <executecommand+0x36c>
 8002a54:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a58:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a5c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a64:	4b60      	ldr	r3, [pc, #384]	@ (8002be8 <executecommand+0x374>)
 8002a66:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
	}
	if(command[0] == 'p')
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b70      	cmp	r3, #112	@ 0x70
 8002a70:	d14c      	bne.n	8002b0c <executecommand+0x298>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a72:	4b5a      	ldr	r3, [pc, #360]	@ (8002bdc <executecommand+0x368>)
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002be0 <executecommand+0x36c>
 8002a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a86:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002be4 <executecommand+0x370>
 8002a8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a8e:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <executecommand+0x368>)
 8002a90:	789b      	ldrb	r3, [r3, #2]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002be0 <executecommand+0x36c>
 8002a9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002aa2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002aa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aae:	4b4b      	ldr	r3, [pc, #300]	@ (8002bdc <executecommand+0x368>)
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002be0 <executecommand+0x36c>
 8002abe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac6:	4b45      	ldr	r3, [pc, #276]	@ (8002bdc <executecommand+0x368>)
 8002ac8:	791b      	ldrb	r3, [r3, #4]
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002be0 <executecommand+0x36c>
 8002ad6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ada:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ade:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bdc <executecommand+0x368>)
 8002ae8:	795b      	ldrb	r3, [r3, #5]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002be0 <executecommand+0x36c>
 8002af6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002afa:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002be4 <executecommand+0x370>
 8002afe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	4b38      	ldr	r3, [pc, #224]	@ (8002be8 <executecommand+0x374>)
 8002b08:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
	}

	if(command[0] == 'i')
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b69      	cmp	r3, #105	@ 0x69
 8002b12:	d14f      	bne.n	8002bb4 <executecommand+0x340>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002b14:	4b31      	ldr	r3, [pc, #196]	@ (8002bdc <executecommand+0x368>)
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b20:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002be0 <executecommand+0x36c>
 8002b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b28:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002be4 <executecommand+0x370>
 8002b2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b30:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <executecommand+0x368>)
 8002b32:	789b      	ldrb	r3, [r3, #2]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002be0 <executecommand+0x36c>
 8002b40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b44:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b50:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <executecommand+0x368>)
 8002b52:	78db      	ldrb	r3, [r3, #3]
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002be0 <executecommand+0x36c>
 8002b60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b68:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <executecommand+0x368>)
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b74:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002be0 <executecommand+0x36c>
 8002b78:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b7c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b88:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <executecommand+0x368>)
 8002b8a:	795b      	ldrb	r3, [r3, #5]
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b94:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002be0 <executecommand+0x36c>
 8002b98:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b9c:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002be4 <executecommand+0x370>
 8002ba0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <executecommand+0x374>)
 8002baa:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
		MYDRON.Pitch.Angular_Rate_Error_Sum = 0;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <executecommand+0x374>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	if(command[0] == 'd')
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b64      	cmp	r3, #100	@ 0x64
 8002bba:	d158      	bne.n	8002c6e <executecommand+0x3fa>
	{
		MYDRON.PID_Pitch.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bbc:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <executecommand+0x368>)
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002be0 <executecommand+0x36c>
 8002bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bd0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002bec <executecommand+0x378>
 8002bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bd8:	e00a      	b.n	8002bf0 <executecommand+0x37c>
 8002bda:	bf00      	nop
 8002bdc:	0000419c 	.word	0x0000419c
 8002be0:	42400000 	.word	0x42400000
 8002be4:	42c80000 	.word	0x42c80000
 8002be8:	00000188 	.word	0x00000188
 8002bec:	447a0000 	.word	0x447a0000
 8002bf0:	4bd3      	ldr	r3, [pc, #844]	@ (8002f40 <executecommand+0x6cc>)
 8002bf2:	789b      	ldrb	r3, [r3, #2]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfc:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002f44 <executecommand+0x6d0>
 8002c00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c04:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002f48 <executecommand+0x6d4>
 8002c08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c10:	4bcb      	ldr	r3, [pc, #812]	@ (8002f40 <executecommand+0x6cc>)
 8002c12:	78db      	ldrb	r3, [r3, #3]
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1c:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002f44 <executecommand+0x6d0>
 8002c20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c24:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c30:	4bc3      	ldr	r3, [pc, #780]	@ (8002f40 <executecommand+0x6cc>)
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3c:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002f44 <executecommand+0x6d0>
 8002c40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c48:	4bbd      	ldr	r3, [pc, #756]	@ (8002f40 <executecommand+0x6cc>)
 8002c4a:	795b      	ldrb	r3, [r3, #5]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c54:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002f44 <executecommand+0x6d0>
 8002c58:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c5c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c60:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c68:	4bb8      	ldr	r3, [pc, #736]	@ (8002f4c <executecommand+0x6d8>)
 8002c6a:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc
	}
	if(command[0] == 'F')
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b46      	cmp	r3, #70	@ 0x46
 8002c74:	d150      	bne.n	8002d18 <executecommand+0x4a4>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c76:	4bb2      	ldr	r3, [pc, #712]	@ (8002f40 <executecommand+0x6cc>)
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c82:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002f44 <executecommand+0x6d0>
 8002c86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c8a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002f50 <executecommand+0x6dc>
 8002c8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c92:	4bab      	ldr	r3, [pc, #684]	@ (8002f40 <executecommand+0x6cc>)
 8002c94:	789b      	ldrb	r3, [r3, #2]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002f44 <executecommand+0x6d0>
 8002ca2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ca6:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002f48 <executecommand+0x6d4>
 8002caa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb2:	4ba3      	ldr	r3, [pc, #652]	@ (8002f40 <executecommand+0x6cc>)
 8002cb4:	78db      	ldrb	r3, [r3, #3]
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbe:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002f44 <executecommand+0x6d0>
 8002cc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cc6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8002f40 <executecommand+0x6cc>)
 8002cd4:	791b      	ldrb	r3, [r3, #4]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cde:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002f44 <executecommand+0x6d0>
 8002ce2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cea:	4b95      	ldr	r3, [pc, #596]	@ (8002f40 <executecommand+0x6cc>)
 8002cec:	795b      	ldrb	r3, [r3, #5]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf6:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002f44 <executecommand+0x6d0>
 8002cfa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002cfe:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0e:	ee17 3a90 	vmov	r3, s15
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	4b8f      	ldr	r3, [pc, #572]	@ (8002f54 <executecommand+0x6e0>)
 8002d16:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b66      	cmp	r3, #102	@ 0x66
 8002d1e:	d150      	bne.n	8002dc2 <executecommand+0x54e>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002d20:	4b87      	ldr	r3, [pc, #540]	@ (8002f40 <executecommand+0x6cc>)
 8002d22:	785b      	ldrb	r3, [r3, #1]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2c:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002f44 <executecommand+0x6d0>
 8002d30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d34:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002f50 <executecommand+0x6dc>
 8002d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d3c:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <executecommand+0x6cc>)
 8002d3e:	789b      	ldrb	r3, [r3, #2]
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d48:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002f44 <executecommand+0x6d0>
 8002d4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d50:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002f48 <executecommand+0x6d4>
 8002d54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5c:	4b78      	ldr	r3, [pc, #480]	@ (8002f40 <executecommand+0x6cc>)
 8002d5e:	78db      	ldrb	r3, [r3, #3]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d68:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002f44 <executecommand+0x6d0>
 8002d6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d70:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d7c:	4b70      	ldr	r3, [pc, #448]	@ (8002f40 <executecommand+0x6cc>)
 8002d7e:	791b      	ldrb	r3, [r3, #4]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d88:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002f44 <executecommand+0x6d0>
 8002d8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d94:	4b6a      	ldr	r3, [pc, #424]	@ (8002f40 <executecommand+0x6cc>)
 8002d96:	795b      	ldrb	r3, [r3, #5]
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da0:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002f44 <executecommand+0x6d0>
 8002da4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002da8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002dac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db8:	ee17 3a90 	vmov	r3, s15
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4b66      	ldr	r3, [pc, #408]	@ (8002f58 <executecommand+0x6e4>)
 8002dc0:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b61      	cmp	r3, #97	@ 0x61
 8002dc8:	d14c      	bne.n	8002e64 <executecommand+0x5f0>
		{
			MYDRON.PID_Rool.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002dca:	4b5d      	ldr	r3, [pc, #372]	@ (8002f40 <executecommand+0x6cc>)
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd6:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002f44 <executecommand+0x6d0>
 8002dda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dde:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002f48 <executecommand+0x6d4>
 8002de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de6:	4b56      	ldr	r3, [pc, #344]	@ (8002f40 <executecommand+0x6cc>)
 8002de8:	789b      	ldrb	r3, [r3, #2]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002f44 <executecommand+0x6d0>
 8002df6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002dfa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002dfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e06:	4b4e      	ldr	r3, [pc, #312]	@ (8002f40 <executecommand+0x6cc>)
 8002e08:	78db      	ldrb	r3, [r3, #3]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002f44 <executecommand+0x6d0>
 8002e16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e1e:	4b48      	ldr	r3, [pc, #288]	@ (8002f40 <executecommand+0x6cc>)
 8002e20:	791b      	ldrb	r3, [r3, #4]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002f44 <executecommand+0x6d0>
 8002e2e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e32:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3e:	4b40      	ldr	r3, [pc, #256]	@ (8002f40 <executecommand+0x6cc>)
 8002e40:	795b      	ldrb	r3, [r3, #5]
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4a:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002f44 <executecommand+0x6d0>
 8002e4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e52:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002f48 <executecommand+0x6d4>
 8002e56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f4c <executecommand+0x6d8>)
 8002e60:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		}

		if(command[0] == 'b')
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b62      	cmp	r3, #98	@ 0x62
 8002e6a:	d14f      	bne.n	8002f0c <executecommand+0x698>
		{
			MYDRON.PID_Rool.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002e6c:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <executecommand+0x6cc>)
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	ee07 3a90 	vmov	s15, r3
 8002e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e78:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002f44 <executecommand+0x6d0>
 8002e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e80:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002f48 <executecommand+0x6d4>
 8002e84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e88:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <executecommand+0x6cc>)
 8002e8a:	789b      	ldrb	r3, [r3, #2]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e94:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002f44 <executecommand+0x6d0>
 8002e98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e9c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea8:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <executecommand+0x6cc>)
 8002eaa:	78db      	ldrb	r3, [r3, #3]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002f44 <executecommand+0x6d0>
 8002eb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <executecommand+0x6cc>)
 8002ec2:	791b      	ldrb	r3, [r3, #4]
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ecc:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002f44 <executecommand+0x6d0>
 8002ed0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ed4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ed8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee0:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <executecommand+0x6cc>)
 8002ee2:	795b      	ldrb	r3, [r3, #5]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eec:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002f44 <executecommand+0x6d0>
 8002ef0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ef4:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002f48 <executecommand+0x6d4>
 8002ef8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <executecommand+0x6d8>)
 8002f02:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
			MYDRON.Pitch.Angle_Error_Sum = 0;
 8002f06:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <executecommand+0x6d8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if(command[0] == 'c')
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b63      	cmp	r3, #99	@ 0x63
 8002f12:	d160      	bne.n	8002fd6 <executecommand+0x762>
		{
			MYDRON.PID_Rool.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002f14:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <executecommand+0x6cc>)
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f20:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002f44 <executecommand+0x6d0>
 8002f24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f28:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002f50 <executecommand+0x6dc>
 8002f2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <executecommand+0x6cc>)
 8002f32:	789b      	ldrb	r3, [r3, #2]
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3c:	e012      	b.n	8002f64 <executecommand+0x6f0>
 8002f3e:	bf00      	nop
 8002f40:	0000419c 	.word	0x0000419c
 8002f44:	42400000 	.word	0x42400000
 8002f48:	42c80000 	.word	0x42c80000
 8002f4c:	00000188 	.word	0x00000188
 8002f50:	447a0000 	.word	0x447a0000
 8002f54:	00004194 	.word	0x00004194
 8002f58:	00004196 	.word	0x00004196
 8002f5c:	42400000 	.word	0x42400000
 8002f60:	42c80000 	.word	0x42c80000
 8002f64:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002f5c <executecommand+0x6e8>
 8002f68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f6c:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002f60 <executecommand+0x6ec>
 8002f70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f78:	4bd5      	ldr	r3, [pc, #852]	@ (80032d0 <executecommand+0xa5c>)
 8002f7a:	78db      	ldrb	r3, [r3, #3]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f84:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80032d4 <executecommand+0xa60>
 8002f88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f8c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f98:	4bcd      	ldr	r3, [pc, #820]	@ (80032d0 <executecommand+0xa5c>)
 8002f9a:	791b      	ldrb	r3, [r3, #4]
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa4:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80032d4 <executecommand+0xa60>
 8002fa8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb0:	4bc7      	ldr	r3, [pc, #796]	@ (80032d0 <executecommand+0xa5c>)
 8002fb2:	795b      	ldrb	r3, [r3, #5]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbc:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80032d4 <executecommand+0xa60>
 8002fc0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fc4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fc8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd0:	4bc1      	ldr	r3, [pc, #772]	@ (80032d8 <executecommand+0xa64>)
 8002fd2:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
		}
		if(command[0] == 'e')
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b65      	cmp	r3, #101	@ 0x65
 8002fdc:	d14c      	bne.n	8003078 <executecommand+0x804>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002fde:	4bbc      	ldr	r3, [pc, #752]	@ (80032d0 <executecommand+0xa5c>)
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80032d4 <executecommand+0xa60>
 8002fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80032dc <executecommand+0xa68>
 8002ff6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ffa:	4bb5      	ldr	r3, [pc, #724]	@ (80032d0 <executecommand+0xa5c>)
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80032d4 <executecommand+0xa60>
 800300a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800300e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003012:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301a:	4bad      	ldr	r3, [pc, #692]	@ (80032d0 <executecommand+0xa5c>)
 800301c:	78db      	ldrb	r3, [r3, #3]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80032d4 <executecommand+0xa60>
 800302a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800302e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003032:	4ba7      	ldr	r3, [pc, #668]	@ (80032d0 <executecommand+0xa5c>)
 8003034:	791b      	ldrb	r3, [r3, #4]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303e:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80032d4 <executecommand+0xa60>
 8003042:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003046:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800304a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800304e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003052:	4b9f      	ldr	r3, [pc, #636]	@ (80032d0 <executecommand+0xa5c>)
 8003054:	795b      	ldrb	r3, [r3, #5]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80032d4 <executecommand+0xa60>
 8003062:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003066:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80032dc <executecommand+0xa68>
 800306a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800306e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003072:	4b99      	ldr	r3, [pc, #612]	@ (80032d8 <executecommand+0xa64>)
 8003074:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
		}

		if(command[0] == 'g')
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b67      	cmp	r3, #103	@ 0x67
 800307e:	d14f      	bne.n	8003120 <executecommand+0x8ac>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003080:	4b93      	ldr	r3, [pc, #588]	@ (80032d0 <executecommand+0xa5c>)
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80032d4 <executecommand+0xa60>
 8003090:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003094:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80032dc <executecommand+0xa68>
 8003098:	ee27 7a87 	vmul.f32	s14, s15, s14
 800309c:	4b8c      	ldr	r3, [pc, #560]	@ (80032d0 <executecommand+0xa5c>)
 800309e:	789b      	ldrb	r3, [r3, #2]
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a8:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80032d4 <executecommand+0xa60>
 80030ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030b0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030bc:	4b84      	ldr	r3, [pc, #528]	@ (80032d0 <executecommand+0xa5c>)
 80030be:	78db      	ldrb	r3, [r3, #3]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c8:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80032d4 <executecommand+0xa60>
 80030cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d4:	4b7e      	ldr	r3, [pc, #504]	@ (80032d0 <executecommand+0xa5c>)
 80030d6:	791b      	ldrb	r3, [r3, #4]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e0:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80032d4 <executecommand+0xa60>
 80030e4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030e8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80030ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f4:	4b76      	ldr	r3, [pc, #472]	@ (80032d0 <executecommand+0xa5c>)
 80030f6:	795b      	ldrb	r3, [r3, #5]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003100:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80032d4 <executecommand+0xa60>
 8003104:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003108:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80032dc <executecommand+0xa68>
 800310c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003114:	4b70      	ldr	r3, [pc, #448]	@ (80032d8 <executecommand+0xa64>)
 8003116:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
			MYDRON.Rool.Angular_Rate_Error_Sum = 0;
 800311a:	4b6f      	ldr	r3, [pc, #444]	@ (80032d8 <executecommand+0xa64>)
 800311c:	2200      	movs	r2, #0
 800311e:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		if(command[0] == 'h')
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b68      	cmp	r3, #104	@ 0x68
 8003126:	d14c      	bne.n	80031c2 <executecommand+0x94e>
		{
			MYDRON.PID_Rool.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003128:	4b69      	ldr	r3, [pc, #420]	@ (80032d0 <executecommand+0xa5c>)
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003134:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80032d4 <executecommand+0xa60>
 8003138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313c:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80032e0 <executecommand+0xa6c>
 8003140:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003144:	4b62      	ldr	r3, [pc, #392]	@ (80032d0 <executecommand+0xa5c>)
 8003146:	789b      	ldrb	r3, [r3, #2]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003150:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80032d4 <executecommand+0xa60>
 8003154:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003158:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80032dc <executecommand+0xa68>
 800315c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003164:	4b5a      	ldr	r3, [pc, #360]	@ (80032d0 <executecommand+0xa5c>)
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003170:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032d4 <executecommand+0xa60>
 8003174:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003178:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800317c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003184:	4b52      	ldr	r3, [pc, #328]	@ (80032d0 <executecommand+0xa5c>)
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003190:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80032d4 <executecommand+0xa60>
 8003194:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319c:	4b4c      	ldr	r3, [pc, #304]	@ (80032d0 <executecommand+0xa5c>)
 800319e:	795b      	ldrb	r3, [r3, #5]
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a8:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80032d4 <executecommand+0xa60>
 80031ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031b0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	4b46      	ldr	r3, [pc, #280]	@ (80032d8 <executecommand+0xa64>)
 80031be:	edc3 7a44 	vstr	s15, [r3, #272]	@ 0x110





		if(command[0] == 'j')
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b6a      	cmp	r3, #106	@ 0x6a
 80031c8:	d14c      	bne.n	8003264 <executecommand+0x9f0>
			{
				MYDRON.PID_Yaw.Angle_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80031ca:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <executecommand+0xa5c>)
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80032d4 <executecommand+0xa60>
 80031da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031de:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80032dc <executecommand+0xa68>
 80031e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e6:	4b3a      	ldr	r3, [pc, #232]	@ (80032d0 <executecommand+0xa5c>)
 80031e8:	789b      	ldrb	r3, [r3, #2]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032d4 <executecommand+0xa60>
 80031f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031fa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80031fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003206:	4b32      	ldr	r3, [pc, #200]	@ (80032d0 <executecommand+0xa5c>)
 8003208:	78db      	ldrb	r3, [r3, #3]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80032d4 <executecommand+0xa60>
 8003216:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800321a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321e:	4b2c      	ldr	r3, [pc, #176]	@ (80032d0 <executecommand+0xa5c>)
 8003220:	791b      	ldrb	r3, [r3, #4]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80032d4 <executecommand+0xa60>
 800322e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003232:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003236:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800323a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800323e:	4b24      	ldr	r3, [pc, #144]	@ (80032d0 <executecommand+0xa5c>)
 8003240:	795b      	ldrb	r3, [r3, #5]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80032d4 <executecommand+0xa60>
 800324e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003252:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80032dc <executecommand+0xa68>
 8003256:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	4b1e      	ldr	r3, [pc, #120]	@ (80032d8 <executecommand+0xa64>)
 8003260:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
			}

			if(command[0] == 'k')
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b6b      	cmp	r3, #107	@ 0x6b
 800326a:	d15e      	bne.n	800332a <executecommand+0xab6>
			{
				MYDRON.PID_Yaw.Angle_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800326c:	4b18      	ldr	r3, [pc, #96]	@ (80032d0 <executecommand+0xa5c>)
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003278:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80032d4 <executecommand+0xa60>
 800327c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003280:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80032dc <executecommand+0xa68>
 8003284:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003288:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <executecommand+0xa5c>)
 800328a:	789b      	ldrb	r3, [r3, #2]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003294:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80032d4 <executecommand+0xa60>
 8003298:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800329c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80032a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a8:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <executecommand+0xa5c>)
 80032aa:	78db      	ldrb	r3, [r3, #3]
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80032d4 <executecommand+0xa60>
 80032b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <executecommand+0xa5c>)
 80032c2:	791b      	ldrb	r3, [r3, #4]
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032cc:	e00c      	b.n	80032e8 <executecommand+0xa74>
 80032ce:	bf00      	nop
 80032d0:	0000419c 	.word	0x0000419c
 80032d4:	42400000 	.word	0x42400000
 80032d8:	00000188 	.word	0x00000188
 80032dc:	42c80000 	.word	0x42c80000
 80032e0:	447a0000 	.word	0x447a0000
 80032e4:	42400000 	.word	0x42400000
 80032e8:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80032e4 <executecommand+0xa70>
 80032ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032f0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fc:	4bbb      	ldr	r3, [pc, #748]	@ (80035ec <executecommand+0xd78>)
 80032fe:	795b      	ldrb	r3, [r3, #5]
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003308:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 80035f0 <executecommand+0xd7c>
 800330c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003310:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 80035f4 <executecommand+0xd80>
 8003314:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331c:	4bb6      	ldr	r3, [pc, #728]	@ (80035f8 <executecommand+0xd84>)
 800331e:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
				MYDRON.Yaw.Angle_Error_Sum = 0;
 8003322:	4bb5      	ldr	r3, [pc, #724]	@ (80035f8 <executecommand+0xd84>)
 8003324:	2200      	movs	r2, #0
 8003326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			}

			if(command[0] == 'l')
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b6c      	cmp	r3, #108	@ 0x6c
 8003330:	d14c      	bne.n	80033cc <executecommand+0xb58>
			{
				MYDRON.PID_Yaw.Angle_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003332:	4bae      	ldr	r3, [pc, #696]	@ (80035ec <executecommand+0xd78>)
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333e:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80035f0 <executecommand+0xd7c>
 8003342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003346:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80035fc <executecommand+0xd88>
 800334a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800334e:	4ba7      	ldr	r3, [pc, #668]	@ (80035ec <executecommand+0xd78>)
 8003350:	789b      	ldrb	r3, [r3, #2]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80035f0 <executecommand+0xd7c>
 800335e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003362:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80035f4 <executecommand+0xd80>
 8003366:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800336a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800336e:	4b9f      	ldr	r3, [pc, #636]	@ (80035ec <executecommand+0xd78>)
 8003370:	78db      	ldrb	r3, [r3, #3]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80035f0 <executecommand+0xd7c>
 800337e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003382:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003386:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800338a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800338e:	4b97      	ldr	r3, [pc, #604]	@ (80035ec <executecommand+0xd78>)
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339a:	eddf 6a95 	vldr	s13, [pc, #596]	@ 80035f0 <executecommand+0xd7c>
 800339e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a6:	4b91      	ldr	r3, [pc, #580]	@ (80035ec <executecommand+0xd78>)
 80033a8:	795b      	ldrb	r3, [r3, #5]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b2:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 80035f0 <executecommand+0xd7c>
 80033b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ba:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c6:	4b8c      	ldr	r3, [pc, #560]	@ (80035f8 <executecommand+0xd84>)
 80033c8:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130
			}
			if(command[0] == 'm')
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b6d      	cmp	r3, #109	@ 0x6d
 80033d2:	d14c      	bne.n	800346e <executecommand+0xbfa>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[0] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80033d4:	4b85      	ldr	r3, [pc, #532]	@ (80035ec <executecommand+0xd78>)
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80035f0 <executecommand+0xd7c>
 80033e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033e8:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80035f4 <executecommand+0xd80>
 80033ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033f0:	4b7e      	ldr	r3, [pc, #504]	@ (80035ec <executecommand+0xd78>)
 80033f2:	789b      	ldrb	r3, [r3, #2]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fc:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80035f0 <executecommand+0xd7c>
 8003400:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003404:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800340c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003410:	4b76      	ldr	r3, [pc, #472]	@ (80035ec <executecommand+0xd78>)
 8003412:	78db      	ldrb	r3, [r3, #3]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341c:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80035f0 <executecommand+0xd7c>
 8003420:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003428:	4b70      	ldr	r3, [pc, #448]	@ (80035ec <executecommand+0xd78>)
 800342a:	791b      	ldrb	r3, [r3, #4]
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003434:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80035f0 <executecommand+0xd7c>
 8003438:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800343c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003440:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003448:	4b68      	ldr	r3, [pc, #416]	@ (80035ec <executecommand+0xd78>)
 800344a:	795b      	ldrb	r3, [r3, #5]
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003454:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80035f0 <executecommand+0xd7c>
 8003458:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800345c:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80035f4 <executecommand+0xd80>
 8003460:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	4b63      	ldr	r3, [pc, #396]	@ (80035f8 <executecommand+0xd84>)
 800346a:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
			}

			if(command[0] == 'n')
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b6e      	cmp	r3, #110	@ 0x6e
 8003474:	d150      	bne.n	8003518 <executecommand+0xca4>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[1] = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003476:	4b5d      	ldr	r3, [pc, #372]	@ (80035ec <executecommand+0xd78>)
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80035f0 <executecommand+0xd7c>
 8003486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800348a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80035f4 <executecommand+0xd80>
 800348e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003492:	4b56      	ldr	r3, [pc, #344]	@ (80035ec <executecommand+0xd78>)
 8003494:	789b      	ldrb	r3, [r3, #2]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80035f0 <executecommand+0xd7c>
 80034a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034a6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b2:	4b4e      	ldr	r3, [pc, #312]	@ (80035ec <executecommand+0xd78>)
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80035f0 <executecommand+0xd7c>
 80034c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ca:	4b48      	ldr	r3, [pc, #288]	@ (80035ec <executecommand+0xd78>)
 80034cc:	791b      	ldrb	r3, [r3, #4]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80035f0 <executecommand+0xd7c>
 80034da:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034de:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ea:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <executecommand+0xd78>)
 80034ec:	795b      	ldrb	r3, [r3, #5]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f6:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80035f0 <executecommand+0xd7c>
 80034fa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 80035f4 <executecommand+0xd80>
 8003502:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350a:	4b3b      	ldr	r3, [pc, #236]	@ (80035f8 <executecommand+0xd84>)
 800350c:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
				MYDRON.Yaw.Angular_Rate_Error_Sum = 0;
 8003510:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <executecommand+0xd84>)
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			}

			if(command[0] == 'o')
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b6f      	cmp	r3, #111	@ 0x6f
 800351e:	d14c      	bne.n	80035ba <executecommand+0xd46>
			{
				MYDRON.PID_Yaw.Angular_Rate_Factors[2] = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003520:	4b32      	ldr	r3, [pc, #200]	@ (80035ec <executecommand+0xd78>)
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80035f0 <executecommand+0xd7c>
 8003530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003534:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80035fc <executecommand+0xd88>
 8003538:	ee27 7a87 	vmul.f32	s14, s15, s14
 800353c:	4b2b      	ldr	r3, [pc, #172]	@ (80035ec <executecommand+0xd78>)
 800353e:	789b      	ldrb	r3, [r3, #2]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003548:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80035f0 <executecommand+0xd7c>
 800354c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003550:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80035f4 <executecommand+0xd80>
 8003554:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355c:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <executecommand+0xd78>)
 800355e:	78db      	ldrb	r3, [r3, #3]
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003568:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80035f0 <executecommand+0xd7c>
 800356c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003570:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003574:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800357c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <executecommand+0xd78>)
 800357e:	791b      	ldrb	r3, [r3, #4]
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003588:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80035f0 <executecommand+0xd7c>
 800358c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003594:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <executecommand+0xd78>)
 8003596:	795b      	ldrb	r3, [r3, #5]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80035f0 <executecommand+0xd7c>
 80035a4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80035a8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80035ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b4:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <executecommand+0xd84>)
 80035b6:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144
			}

	if(command[0] == 'r'){
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b72      	cmp	r3, #114	@ 0x72
 80035c0:	d101      	bne.n	80035c6 <executecommand+0xd52>
		NVIC_SystemReset();
 80035c2:	f7ff f8f3 	bl	80027ac <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e007      	b.n	80035dc <executecommand+0xd68>
		UASRT_PID_VAL[i] = 0;
 80035cc:	4a07      	ldr	r2, [pc, #28]	@ (80035ec <executecommand+0xd78>)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4413      	add	r3, r2
 80035d2:	2200      	movs	r2, #0
 80035d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3301      	adds	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b0e      	cmp	r3, #14
 80035e0:	ddf4      	ble.n	80035cc <executecommand+0xd58>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	0000419c 	.word	0x0000419c
 80035f0:	42400000 	.word	0x42400000
 80035f4:	42c80000 	.word	0x42c80000
 80035f8:	00000188 	.word	0x00000188
 80035fc:	447a0000 	.word	0x447a0000

08003600 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	2224      	movs	r2, #36	@ 0x24
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f01a f8f5 	bl	801d7fc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003612:	4b2e      	ldr	r3, [pc, #184]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003614:	4a2e      	ldr	r2, [pc, #184]	@ (80036d0 <MX_ADC2_Init+0xd0>)
 8003616:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003618:	4b2c      	ldr	r3, [pc, #176]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800361a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800361e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003620:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003622:	2208      	movs	r2, #8
 8003624:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003626:	4b29      	ldr	r3, [pc, #164]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003628:	2200      	movs	r2, #0
 800362a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800362c:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800362e:	2204      	movs	r2, #4
 8003630:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003632:	4b26      	ldr	r3, [pc, #152]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003634:	2200      	movs	r2, #0
 8003636:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003638:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800363a:	2200      	movs	r2, #0
 800363c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800363e:	4b23      	ldr	r3, [pc, #140]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003640:	2201      	movs	r2, #1
 8003642:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003644:	4b21      	ldr	r3, [pc, #132]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800364c:	4b1f      	ldr	r3, [pc, #124]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800364e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003654:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800365e:	2203      	movs	r2, #3
 8003660:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003662:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003664:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003668:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800366a:	4b18      	ldr	r3, [pc, #96]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800366c:	2200      	movs	r2, #0
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003670:	4b16      	ldr	r3, [pc, #88]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003678:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <MX_ADC2_Init+0xcc>)
 800367a:	2201      	movs	r2, #1
 800367c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800367e:	4813      	ldr	r0, [pc, #76]	@ (80036cc <MX_ADC2_Init+0xcc>)
 8003680:	f005 fbf0 	bl	8008e64 <HAL_ADC_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800368a:	f004 f8e5 	bl	8007858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <MX_ADC2_Init+0xd4>)
 8003690:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003692:	2306      	movs	r3, #6
 8003694:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8003696:	2307      	movs	r3, #7
 8003698:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800369a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800369e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036a0:	2304      	movs	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4806      	ldr	r0, [pc, #24]	@ (80036cc <MX_ADC2_Init+0xcc>)
 80036b4:	f006 f91c 	bl	80098f0 <HAL_ADC_ConfigChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80036be:	f004 f8cb 	bl	8007858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80036c2:	bf00      	nop
 80036c4:	3728      	adds	r7, #40	@ 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	240000ac 	.word	0x240000ac
 80036d0:	40022100 	.word	0x40022100
 80036d4:	19200040 	.word	0x19200040

080036d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a34      	ldr	r2, [pc, #208]	@ (80037c8 <HAL_ADC_MspInit+0xf0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d162      	bne.n	80037c0 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80036fa:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 80036fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003700:	4a32      	ldr	r2, [pc, #200]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 8003702:	f043 0320 	orr.w	r3, r3, #32
 8003706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800370a:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 800370c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003718:	4b2c      	ldr	r3, [pc, #176]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 800371a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800371e:	4a2b      	ldr	r2, [pc, #172]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 8003720:	f043 0320 	orr.w	r3, r3, #32
 8003724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003728:	4b28      	ldr	r3, [pc, #160]	@ (80037cc <HAL_ADC_MspInit+0xf4>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003736:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800373a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800373c:	2303      	movs	r3, #3
 800373e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	4821      	ldr	r0, [pc, #132]	@ (80037d0 <HAL_ADC_MspInit+0xf8>)
 800374c:	f009 ffbc 	bl	800d6c8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003750:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003752:	4a21      	ldr	r2, [pc, #132]	@ (80037d8 <HAL_ADC_MspInit+0x100>)
 8003754:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003756:	4b1f      	ldr	r3, [pc, #124]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003758:	220a      	movs	r2, #10
 800375a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375c:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003762:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003764:	2200      	movs	r2, #0
 8003766:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003768:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 800376a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800376e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003776:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003778:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 800377a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800377e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003780:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003786:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003788:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 800378a:	2200      	movs	r2, #0
 800378c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378e:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003794:	480f      	ldr	r0, [pc, #60]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 8003796:	f007 f945 	bl	800aa24 <HAL_DMA_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80037a0:	f004 f85a 	bl	8007858 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 80037a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80037aa:	4a0a      	ldr	r2, [pc, #40]	@ (80037d4 <HAL_ADC_MspInit+0xfc>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	2012      	movs	r0, #18
 80037b6:	f007 f888 	bl	800a8ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80037ba:	2012      	movs	r0, #18
 80037bc:	f007 f89f 	bl	800a8fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	@ 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40022100 	.word	0x40022100
 80037cc:	58024400 	.word	0x58024400
 80037d0:	58021400 	.word	0x58021400
 80037d4:	2400011c 	.word	0x2400011c
 80037d8:	40020410 	.word	0x40020410

080037dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037e2:	4b19      	ldr	r3, [pc, #100]	@ (8003848 <MX_DMA_Init+0x6c>)
 80037e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037e8:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <MX_DMA_Init+0x6c>)
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037f2:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <MX_DMA_Init+0x6c>)
 80037f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003800:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <MX_DMA_Init+0x6c>)
 8003802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003806:	4a10      	ldr	r2, [pc, #64]	@ (8003848 <MX_DMA_Init+0x6c>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <MX_DMA_Init+0x6c>)
 8003812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2100      	movs	r1, #0
 8003822:	200b      	movs	r0, #11
 8003824:	f007 f851 	bl	800a8ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003828:	200b      	movs	r0, #11
 800382a:	f007 f868 	bl	800a8fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	2038      	movs	r0, #56	@ 0x38
 8003834:	f007 f849 	bl	800a8ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003838:	2038      	movs	r0, #56	@ 0x38
 800383a:	f007 f860 	bl	800a8fe <HAL_NVIC_EnableIRQ>

}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
 800384c:	00000000 	.word	0x00000000

08003850 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003850:	b580      	push	{r7, lr}
 8003852:	b08e      	sub	sp, #56	@ 0x38
 8003854:	af00      	add	r7, sp, #0
 8003856:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(MYDRON.Pitch.Angle_Error);
 800386c:	4b8c      	ldr	r3, [pc, #560]	@ (8003aa0 <Thrust_filter+0x250>)
 800386e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003872:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003876:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(MYDRON.Rool.Angle_Error);
 800387a:	4b89      	ldr	r3, [pc, #548]	@ (8003aa0 <Thrust_filter+0x250>)
 800387c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003880:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003884:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003888:	ed97 7b08 	vldr	d7, [r7, #32]
 800388c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003890:	eeb0 0a67 	vmov.f32	s0, s15
 8003894:	f003 fb24 	bl	8006ee0 <WartoscBezwgledna>
 8003898:	eef0 7a40 	vmov.f32	s15, s0
 800389c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038a0:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80038a4:	ed97 7b06 	vldr	d7, [r7, #24]
 80038a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038ac:	eeb0 0a67 	vmov.f32	s0, s15
 80038b0:	f003 fb16 	bl	8006ee0 <WartoscBezwgledna>
 80038b4:	eef0 7a40 	vmov.f32	s15, s0
 80038b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038bc:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80038c0:	ed97 6b08 	vldr	d6, [r7, #32]
 80038c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80038c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80038cc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038d4:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80038d8:	eeb0 0b47 	vmov.f64	d0, d7
 80038dc:	f01a f928 	bl	801db30 <pow>
 80038e0:	ed87 0b04 	vstr	d0, [r7, #16]
	if(MYDRON.Thrust.Wanted > 10500){
 80038e4:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa0 <Thrust_filter+0x250>)
 80038e6:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 80038ea:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038ee:	4293      	cmp	r3, r2
 80038f0:	dd04      	ble.n	80038fc <Thrust_filter+0xac>
		MYDRON.Thrust.Wanted = 10500;
 80038f2:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa0 <Thrust_filter+0x250>)
 80038f4:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038f8:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	}

	thrust_error = MYDRON.Thrust.Wanted - MYDRON.Thrust.Now;
 80038fc:	4b68      	ldr	r3, [pc, #416]	@ (8003aa0 <Thrust_filter+0x250>)
 80038fe:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8003902:	b29a      	uxth	r2, r3
 8003904:	4b66      	ldr	r3, [pc, #408]	@ (8003aa0 <Thrust_filter+0x250>)
 8003906:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	b29b      	uxth	r3, r3
 800390e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003910:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003914:	2b00      	cmp	r3, #0
 8003916:	da13      	bge.n	8003940 <Thrust_filter+0xf0>
		thrust_error = WartoscBezwgledna(thrust_error);
 8003918:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003924:	eeb0 0a67 	vmov.f32	s0, s15
 8003928:	f003 fada 	bl	8006ee0 <WartoscBezwgledna>
 800392c:	eef0 7a40 	vmov.f32	s15, s0
 8003930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003934:	ee17 3a90 	vmov	r3, s15
 8003938:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003940:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 809d 	beq.w	8003a84 <Thrust_filter+0x234>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800394a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003956:	eeb0 0b47 	vmov.f64	d0, d7
 800395a:	f019 ff91 	bl	801d880 <sqrt>
 800395e:	eeb0 7b40 	vmov.f64	d7, d0
 8003962:	eeb0 0b47 	vmov.f64	d0, d7
 8003966:	f019 ff8b 	bl	801d880 <sqrt>
 800396a:	eeb0 7b40 	vmov.f64	d7, d0
 800396e:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8003a90 <Thrust_filter+0x240>
 8003972:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003976:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800397a:	ed97 7b00 	vldr	d7, [r7]
 800397e:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8003a98 <Thrust_filter+0x248>
 8003982:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003986:	ed97 7b02 	vldr	d7, [r7, #8]
 800398a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800398e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003992:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003996:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 800399a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <Thrust_filter+0x15e>
			thrust_add = thrust_add*(-1);
 80039a2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039a6:	eeb1 7b47 	vneg.f64	d7, d7
 80039aa:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80039ae:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039b2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039be:	d513      	bpl.n	80039e8 <Thrust_filter+0x198>
 80039c0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039c4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d0:	dd0a      	ble.n	80039e8 <Thrust_filter+0x198>
			MYDRON.Thrust.Values = MYDRON.Thrust.Values + thrust_add;
 80039d2:	4b33      	ldr	r3, [pc, #204]	@ (8003aa0 <Thrust_filter+0x250>)
 80039d4:	ed93 6b26 	vldr	d6, [r3, #152]	@ 0x98
 80039d8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039e0:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <Thrust_filter+0x250>)
 80039e2:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 80039e6:	e012      	b.n	8003a0e <Thrust_filter+0x1be>
		}
		else{
			MYDRON.Thrust.Now = MYDRON.Thrust.Now + thrust_add;
 80039e8:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa0 <Thrust_filter+0x250>)
 80039ea:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039f6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a02:	ee17 3a90 	vmov	r3, s15
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a0a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		}

		if(MYDRON.Thrust.Values >= 1 || MYDRON.Thrust.Values <= -1){
 8003a0e:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a10:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8003a14:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003a18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a20:	da09      	bge.n	8003a36 <Thrust_filter+0x1e6>
 8003a22:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a24:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8003a28:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003a2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	d81a      	bhi.n	8003a6c <Thrust_filter+0x21c>
			MYDRON.Thrust.Now = MYDRON.Thrust.Now + MYDRON.Thrust.Values;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a38:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a44:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a46:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8003a4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a52:	ee17 3a90 	vmov	r3, s15
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a5a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			MYDRON.Thrust.Values = 0;
 8003a5e:	4910      	ldr	r1, [pc, #64]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		}
		if(MYDRON.Thrust.Now > 10000){//ograniczenie THRUST
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a6e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8003a72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d904      	bls.n	8003a84 <Thrust_filter+0x234>
			MYDRON.Thrust.Now = 10000;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <Thrust_filter+0x250>)
 8003a7c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a80:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		}
	}
}
 8003a84:	bf00      	nop
 8003a86:	3738      	adds	r7, #56	@ 0x38
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	f3af 8000 	nop.w
 8003a90:	00000000 	.word	0x00000000
 8003a94:	409f4000 	.word	0x409f4000
 8003a98:	30553261 	.word	0x30553261
 8003a9c:	3f43a92a 	.word	0x3f43a92a
 8003aa0:	00000188 	.word	0x00000188

08003aa4 <PID_call>:
//
//	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_call(Dron Paramiters){
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	b490      	push	{r4, r7}
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	f107 0408 	add.w	r4, r7, #8
 8003aae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Paramiters.PID_Pitch.Angle_Value = (Paramiters.Pitch.Angle_Error * Paramiters.PID_Pitch.Angle_Factors[0]) + (Paramiters.Pitch.Angle_Error_Sum * Paramiters.PID_Pitch.Angle_Factors[1] * looptime) + ((Paramiters.Pitch.Angle_Error - Paramiters.Pitch.Old_Angle_Error) * Paramiters.PID_Pitch.Angle_Factors[2]);
 8003ab2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ab6:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8003aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	ee07 3a90 	vmov	s15, r3
 8003ac4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ac8:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8003acc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ad0:	4b67      	ldr	r3, [pc, #412]	@ (8003c70 <PID_call+0x1cc>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ae6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003aea:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8003aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af6:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
	Paramiters.PID_Rool.Angle_Value = (Paramiters.Rool.Angle_Error * Paramiters.PID_Rool.Angle_Factors[0]) + (Paramiters.Rool.Angle_Error_Sum * Paramiters.PID_Rool.Angle_Factors[1] * looptime) + ((Paramiters.Rool.Angle_Error - Paramiters.Rool.Old_Angle_Error) * Paramiters.PID_Rool.Angle_Factors[2]);
 8003afa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003afe:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8003b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b10:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8003b14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b18:	4b55      	ldr	r3, [pc, #340]	@ (8003c70 <PID_call+0x1cc>)
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b26:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003b2a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003b2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b32:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8003b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3e:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
	Paramiters.PID_Yaw.Angle_Value = (Paramiters.Yaw.Angle_Error * Paramiters.PID_Yaw.Angle_Factors[0]) + (Paramiters.Yaw.Angle_Error_Sum * Paramiters.PID_Yaw.Angle_Factors[1] * looptime) + ((Paramiters.Yaw.Angle_Error - Paramiters.Yaw.Old_Angle_Error) * Paramiters.PID_Yaw.Angle_Factors[2]);
 8003b42:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003b46:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8003b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b5a:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8003b5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b62:	4b43      	ldr	r3, [pc, #268]	@ (8003c70 <PID_call+0x1cc>)
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b70:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8003b74:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003b78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b7c:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b88:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128

	Paramiters.PID_Pitch.Angular_Rate_Value = (Paramiters.Pitch.Angular_Rate_Error * Paramiters.PID_Pitch.Angular_Rate_Factors[0]) + (Paramiters.Pitch.Angular_Rate_Error_Sum * Paramiters.PID_Pitch.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Pitch.Angular_Rate_Error - Paramiters.Pitch.Old_Angular_Rate_Error) * Paramiters.PID_Pitch.Angular_Rate_Factors[2]);
 8003b8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003b90:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8003b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ba2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8003ba6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003baa:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <PID_call+0x1cc>)
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bb8:	edd7 6a08 	vldr	s13, [r7, #32]
 8003bbc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003bc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003bc4:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8003bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd0:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	Paramiters.PID_Rool.Angular_Rate_Value = (Paramiters.Rool.Angular_Rate_Error * Paramiters.PID_Rool.Angular_Rate_Factors[0]) + (Paramiters.Rool.Angular_Rate_Error_Sum * Paramiters.PID_Rool.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Rool.Angular_Rate_Error - Paramiters.Rool.Old_Angular_Rate_Error) * Paramiters.PID_Rool.Angular_Rate_Factors[2]);
 8003bd4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003bd8:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8003bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003bea:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8003bee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c70 <PID_call+0x1cc>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c00:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003c04:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003c08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c0c:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8003c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c18:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
	Paramiters.PID_Yaw.Angular_Rate_Value = (Paramiters.Yaw.Angular_Rate_Error * Paramiters.PID_Yaw.Angular_Rate_Factors[0]) + (Paramiters.Yaw.Angular_Rate_Error_Sum * Paramiters.PID_Yaw.Angular_Rate_Factors[1] * looptime) + ((Paramiters.Yaw.Angular_Rate_Error - Paramiters.Yaw.Old_Angular_Rate_Error) * Paramiters.PID_Yaw.Angular_Rate_Factors[2]);
 8003c1c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003c20:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c34:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8003c38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <PID_call+0x1cc>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c4a:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8003c4e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003c52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c56:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c62:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc90      	pop	{r4, r7}
 8003c6c:	b004      	add	sp, #16
 8003c6e:	4770      	bx	lr
 8003c70:	0801e2cc 	.word	0x0801e2cc
 8003c74:	00000000 	.word	0x00000000

08003c78 <Get_batteryvalue>:
//		default:
//			break;
	//}
}

void Get_batteryvalue(void){
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003c7c:	4b20      	ldr	r3, [pc, #128]	@ (8003d00 <Get_batteryvalue+0x88>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003c8c:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 8003cf8 <Get_batteryvalue+0x80>
 8003c90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003c94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003c98:	ee17 3a90 	vmov	r3, s15
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003ca0:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	if(MYDRON.batterysize >= 100){
 8003ca4:	4b17      	ldr	r3, [pc, #92]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003ca6:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003caa:	2b63      	cmp	r3, #99	@ 0x63
 8003cac:	d903      	bls.n	8003cb6 <Get_batteryvalue+0x3e>
		MYDRON.batterysize = 100;
 8003cae:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cb0:	2264      	movs	r2, #100	@ 0x64
 8003cb2:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	}

	if(MYDRON.batterysize < 25){
 8003cb6:	4b13      	ldr	r3, [pc, #76]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cb8:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003cbc:	2b18      	cmp	r3, #24
 8003cbe:	d803      	bhi.n	8003cc8 <Get_batteryvalue+0x50>
		MYDRON.Status.Battery = DRON_BATTERY_RUN_OUT;
 8003cc0:	4b10      	ldr	r3, [pc, #64]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
	if(MYDRON.batterysize <= 10){
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cca:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003cce:	2b0a      	cmp	r3, #10
 8003cd0:	d803      	bhi.n	8003cda <Get_batteryvalue+0x62>
		MYDRON.Status.Battery = DRON_BATTERY_CRIT_VAL;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cd4:	2209      	movs	r2, #9
 8003cd6:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
	if(MYDRON.batterysize >= 25){
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003cdc:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8003ce0:	2b18      	cmp	r3, #24
 8003ce2:	d903      	bls.n	8003cec <Get_batteryvalue+0x74>
		MYDRON.Status.Battery = DRON_BATTERY_OK;
 8003ce4:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <Get_batteryvalue+0x8c>)
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	}
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	7ae147ae 	.word	0x7ae147ae
 8003cfc:	401dae14 	.word	0x401dae14
 8003d00:	24000eb0 	.word	0x24000eb0
 8003d04:	00000188 	.word	0x00000188

08003d08 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d12:	4802      	ldr	r0, [pc, #8]	@ (8003d1c <SELECT+0x14>)
 8003d14:	f009 fe98 	bl	800da48 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	58020c00 	.word	0x58020c00

08003d20 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003d24:	2201      	movs	r2, #1
 8003d26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d2a:	4802      	ldr	r0, [pc, #8]	@ (8003d34 <DESELECT+0x14>)
 8003d2c:	f009 fe8c 	bl	800da48 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	58020c00 	.word	0x58020c00

08003d38 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003d42:	bf00      	nop
 8003d44:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <SPI_TxByte+0x2c>)
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d1f9      	bne.n	8003d44 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003d50:	1df9      	adds	r1, r7, #7
 8003d52:	2364      	movs	r3, #100	@ 0x64
 8003d54:	2201      	movs	r2, #1
 8003d56:	4804      	ldr	r0, [pc, #16]	@ (8003d68 <SPI_TxByte+0x30>)
 8003d58:	f00f ffc8 	bl	8013cec <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40020010 	.word	0x40020010
 8003d68:	24000274 	.word	0x24000274

08003d6c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003d78:	bf00      	nop
 8003d7a:	4b08      	ldr	r3, [pc, #32]	@ (8003d9c <SPI_TxBuffer+0x30>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d1f9      	bne.n	8003d7a <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4804      	ldr	r0, [pc, #16]	@ (8003da0 <SPI_TxBuffer+0x34>)
 8003d8e:	f011 f89b 	bl	8014ec8 <HAL_SPI_Transmit_DMA>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40020010 	.word	0x40020010
 8003da0:	24000274 	.word	0x24000274

08003da4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003daa:	23ff      	movs	r3, #255	@ 0xff
 8003dac:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003dae:	bf00      	nop
 8003db0:	4b09      	ldr	r3, [pc, #36]	@ (8003dd8 <SPI_RxByte+0x34>)
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d1f9      	bne.n	8003db0 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003dbc:	1dba      	adds	r2, r7, #6
 8003dbe:	1df9      	adds	r1, r7, #7
 8003dc0:	2364      	movs	r3, #100	@ 0x64
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4805      	ldr	r0, [pc, #20]	@ (8003ddc <SPI_RxByte+0x38>)
 8003dc8:	f010 fbf0 	bl	80145ac <HAL_SPI_TransmitReceive>

	return data;
 8003dcc:	79bb      	ldrb	r3, [r7, #6]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40020010 	.word	0x40020010
 8003ddc:	24000274 	.word	0x24000274

08003de0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003de8:	f7ff ffdc 	bl	8003da4 <SPI_RxByte>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	701a      	strb	r2, [r3, #0]
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <SD_ReadyWait+0x30>)
 8003e04:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003e08:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003e0a:	f7ff ffcb 	bl	8003da4 <SPI_RxByte>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2bff      	cmp	r3, #255	@ 0xff
 8003e16:	d004      	beq.n	8003e22 <SD_ReadyWait+0x26>
 8003e18:	4b04      	ldr	r3, [pc, #16]	@ (8003e2c <SD_ReadyWait+0x30>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f3      	bne.n	8003e0a <SD_ReadyWait+0xe>

	return res;
 8003e22:	79fb      	ldrb	r3, [r7, #7]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2400037c 	.word	0x2400037c

08003e30 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003e36:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003e3a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003e3c:	f7ff ff70 	bl	8003d20 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	e005      	b.n	8003e52 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003e46:	20ff      	movs	r0, #255	@ 0xff
 8003e48:	f7ff ff76 	bl	8003d38 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b09      	cmp	r3, #9
 8003e56:	ddf6      	ble.n	8003e46 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003e58:	f7ff ff56 	bl	8003d08 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003e5c:	2340      	movs	r3, #64	@ 0x40
 8003e5e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003e70:	2395      	movs	r3, #149	@ 0x95
 8003e72:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003e74:	463b      	mov	r3, r7
 8003e76:	2106      	movs	r1, #6
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff77 	bl	8003d6c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003e7e:	e002      	b.n	8003e86 <SD_PowerOn+0x56>
	{
		cnt--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003e86:	f7ff ff8d 	bl	8003da4 <SPI_RxByte>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d002      	beq.n	8003e96 <SD_PowerOn+0x66>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f4      	bne.n	8003e80 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003e96:	f7ff ff43 	bl	8003d20 <DESELECT>
	SPI_TxByte(0XFF);
 8003e9a:	20ff      	movs	r0, #255	@ 0xff
 8003e9c:	f7ff ff4c 	bl	8003d38 <SPI_TxByte>

	PowerFlag = 1;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <SD_PowerOn+0x80>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	24000195 	.word	0x24000195

08003eb4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	@ (8003ec8 <SD_PowerOff+0x14>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	24000195 	.word	0x24000195

08003ecc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	@ (8003ee0 <SD_CheckPower+0x14>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	24000195 	.word	0x24000195

08003ee4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 8003eee:	4b14      	ldr	r3, [pc, #80]	@ (8003f40 <SD_RxDataBlock+0x5c>)
 8003ef0:	220a      	movs	r2, #10
 8003ef2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003ef4:	f7ff ff56 	bl	8003da4 <SPI_RxByte>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2bff      	cmp	r3, #255	@ 0xff
 8003f00:	d104      	bne.n	8003f0c <SD_RxDataBlock+0x28>
 8003f02:	4b0f      	ldr	r3, [pc, #60]	@ (8003f40 <SD_RxDataBlock+0x5c>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f3      	bne.n	8003ef4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003f10:	d001      	beq.n	8003f16 <SD_RxDataBlock+0x32>
 8003f12:	2300      	movs	r3, #0
 8003f14:	e00f      	b.n	8003f36 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff5f 	bl	8003de0 <SPI_RxBytePtr>
	} while(len--);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1e5a      	subs	r2, r3, #1
 8003f26:	603a      	str	r2, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f4      	bne.n	8003f16 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8003f2c:	f7ff ff3a 	bl	8003da4 <SPI_RxByte>
	SPI_RxByte();
 8003f30:	f7ff ff38 	bl	8003da4 <SPI_RxByte>

	return TRUE;
 8003f34:	2301      	movs	r3, #1
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	24000378 	.word	0x24000378

08003f44 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003f54:	f7ff ff52 	bl	8003dfc <SD_ReadyWait>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2bff      	cmp	r3, #255	@ 0xff
 8003f5c:	d001      	beq.n	8003f62 <SD_TxDataBlock+0x1e>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e02f      	b.n	8003fc2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fee7 	bl	8003d38 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	2bfd      	cmp	r3, #253	@ 0xfd
 8003f6e:	d020      	beq.n	8003fb2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003f70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fef9 	bl	8003d6c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003f7a:	f7ff ff13 	bl	8003da4 <SPI_RxByte>
		SPI_RxByte();
 8003f7e:	f7ff ff11 	bl	8003da4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003f82:	e00b      	b.n	8003f9c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003f84:	f7ff ff0e 	bl	8003da4 <SPI_RxByte>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d006      	beq.n	8003fa4 <SD_TxDataBlock+0x60>
			i++;
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	2b40      	cmp	r3, #64	@ 0x40
 8003fa0:	d9f0      	bls.n	8003f84 <SD_TxDataBlock+0x40>
 8003fa2:	e000      	b.n	8003fa6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003fa4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003fa6:	bf00      	nop
 8003fa8:	f7ff fefc 	bl	8003da4 <SPI_RxByte>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0fa      	beq.n	8003fa8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d101      	bne.n	8003fc0 <SD_TxDataBlock+0x7c>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	6039      	str	r1, [r7, #0]
 8003fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003fd6:	f7ff ff11 	bl	8003dfc <SD_ReadyWait>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2bff      	cmp	r3, #255	@ 0xff
 8003fde:	d001      	beq.n	8003fe4 <SD_SendCmd+0x1a>
 8003fe0:	23ff      	movs	r3, #255	@ 0xff
 8003fe2:	e042      	b.n	800406a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fea6 	bl	8003d38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	0e1b      	lsrs	r3, r3, #24
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fea0 	bl	8003d38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	0c1b      	lsrs	r3, r3, #16
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fe9a 	bl	8003d38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fe94 	bl	8003d38 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fe8f 	bl	8003d38 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d102      	bne.n	8004026 <SD_SendCmd+0x5c>
 8004020:	2395      	movs	r3, #149	@ 0x95
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e007      	b.n	8004036 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b48      	cmp	r3, #72	@ 0x48
 800402a:	d102      	bne.n	8004032 <SD_SendCmd+0x68>
 800402c:	2387      	movs	r3, #135	@ 0x87
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	e001      	b.n	8004036 <SD_SendCmd+0x6c>
	else crc = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fe7d 	bl	8003d38 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	2b4c      	cmp	r3, #76	@ 0x4c
 8004042:	d101      	bne.n	8004048 <SD_SendCmd+0x7e>
 8004044:	f7ff feae 	bl	8003da4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004048:	230a      	movs	r3, #10
 800404a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800404c:	f7ff feaa 	bl	8003da4 <SPI_RxByte>
 8004050:	4603      	mov	r3, r0
 8004052:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004054:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004058:	2b00      	cmp	r3, #0
 800405a:	da05      	bge.n	8004068 <SD_SendCmd+0x9e>
 800405c:	7bbb      	ldrb	r3, [r7, #14]
 800405e:	3b01      	subs	r3, #1
 8004060:	73bb      	strb	r3, [r7, #14]
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f1      	bne.n	800404c <SD_SendCmd+0x82>

	return res;
 8004068:	7b7b      	ldrb	r3, [r7, #13]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SD_disk_initialize+0x14>
 8004084:	2301      	movs	r3, #1
 8004086:	e0d6      	b.n	8004236 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004088:	4b6d      	ldr	r3, [pc, #436]	@ (8004240 <SD_disk_initialize+0x1cc>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <SD_disk_initialize+0x2a>
 8004096:	4b6a      	ldr	r3, [pc, #424]	@ (8004240 <SD_disk_initialize+0x1cc>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e0cb      	b.n	8004236 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800409e:	f7ff fec7 	bl	8003e30 <SD_PowerOn>

	/* slave select */
	SELECT();
 80040a2:	f7ff fe31 	bl	8003d08 <SELECT>

	/* check disk type */
	type = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80040aa:	2100      	movs	r1, #0
 80040ac:	2040      	movs	r0, #64	@ 0x40
 80040ae:	f7ff ff8c 	bl	8003fca <SD_SendCmd>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f040 80a6 	bne.w	8004206 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80040ba:	4b62      	ldr	r3, [pc, #392]	@ (8004244 <SD_disk_initialize+0x1d0>)
 80040bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040c0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80040c2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80040c6:	2048      	movs	r0, #72	@ 0x48
 80040c8:	f7ff ff7f 	bl	8003fca <SD_SendCmd>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d158      	bne.n	8004184 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e00c      	b.n	80040f2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80040d8:	7bfc      	ldrb	r4, [r7, #15]
 80040da:	f7ff fe63 	bl	8003da4 <SPI_RxByte>
 80040de:	4603      	mov	r3, r0
 80040e0:	461a      	mov	r2, r3
 80040e2:	f104 0310 	add.w	r3, r4, #16
 80040e6:	443b      	add	r3, r7
 80040e8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	3301      	adds	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d9ef      	bls.n	80040d8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80040f8:	7abb      	ldrb	r3, [r7, #10]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	f040 8083 	bne.w	8004206 <SD_disk_initialize+0x192>
 8004100:	7afb      	ldrb	r3, [r7, #11]
 8004102:	2baa      	cmp	r3, #170	@ 0xaa
 8004104:	d17f      	bne.n	8004206 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004106:	2100      	movs	r1, #0
 8004108:	2077      	movs	r0, #119	@ 0x77
 800410a:	f7ff ff5e 	bl	8003fca <SD_SendCmd>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d807      	bhi.n	8004124 <SD_disk_initialize+0xb0>
 8004114:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004118:	2069      	movs	r0, #105	@ 0x69
 800411a:	f7ff ff56 	bl	8003fca <SD_SendCmd>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004124:	4b47      	ldr	r3, [pc, #284]	@ (8004244 <SD_disk_initialize+0x1d0>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1eb      	bne.n	8004106 <SD_disk_initialize+0x92>
 800412e:	e000      	b.n	8004132 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004130:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004132:	4b44      	ldr	r3, [pc, #272]	@ (8004244 <SD_disk_initialize+0x1d0>)
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d064      	beq.n	8004206 <SD_disk_initialize+0x192>
 800413c:	2100      	movs	r1, #0
 800413e:	207a      	movs	r0, #122	@ 0x7a
 8004140:	f7ff ff43 	bl	8003fca <SD_SendCmd>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d15d      	bne.n	8004206 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	e00c      	b.n	800416a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004150:	7bfc      	ldrb	r4, [r7, #15]
 8004152:	f7ff fe27 	bl	8003da4 <SPI_RxByte>
 8004156:	4603      	mov	r3, r0
 8004158:	461a      	mov	r2, r3
 800415a:	f104 0310 	add.w	r3, r4, #16
 800415e:	443b      	add	r3, r7
 8004160:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	3301      	adds	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d9ef      	bls.n	8004150 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004170:	7a3b      	ldrb	r3, [r7, #8]
 8004172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <SD_disk_initialize+0x10a>
 800417a:	230c      	movs	r3, #12
 800417c:	e000      	b.n	8004180 <SD_disk_initialize+0x10c>
 800417e:	2304      	movs	r3, #4
 8004180:	73bb      	strb	r3, [r7, #14]
 8004182:	e040      	b.n	8004206 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004184:	2100      	movs	r1, #0
 8004186:	2077      	movs	r0, #119	@ 0x77
 8004188:	f7ff ff1f 	bl	8003fca <SD_SendCmd>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d808      	bhi.n	80041a4 <SD_disk_initialize+0x130>
 8004192:	2100      	movs	r1, #0
 8004194:	2069      	movs	r0, #105	@ 0x69
 8004196:	f7ff ff18 	bl	8003fca <SD_SendCmd>
 800419a:	4603      	mov	r3, r0
 800419c:	2b01      	cmp	r3, #1
 800419e:	d801      	bhi.n	80041a4 <SD_disk_initialize+0x130>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e000      	b.n	80041a6 <SD_disk_initialize+0x132>
 80041a4:	2301      	movs	r3, #1
 80041a6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d10e      	bne.n	80041cc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80041ae:	2100      	movs	r1, #0
 80041b0:	2077      	movs	r0, #119	@ 0x77
 80041b2:	f7ff ff0a 	bl	8003fca <SD_SendCmd>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d80e      	bhi.n	80041da <SD_disk_initialize+0x166>
 80041bc:	2100      	movs	r1, #0
 80041be:	2069      	movs	r0, #105	@ 0x69
 80041c0:	f7ff ff03 	bl	8003fca <SD_SendCmd>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <SD_disk_initialize+0x166>
 80041ca:	e00d      	b.n	80041e8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80041cc:	2100      	movs	r1, #0
 80041ce:	2041      	movs	r0, #65	@ 0x41
 80041d0:	f7ff fefb 	bl	8003fca <SD_SendCmd>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80041da:	4b1a      	ldr	r3, [pc, #104]	@ (8004244 <SD_disk_initialize+0x1d0>)
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e1      	bne.n	80041a8 <SD_disk_initialize+0x134>
 80041e4:	e000      	b.n	80041e8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80041e6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80041e8:	4b16      	ldr	r3, [pc, #88]	@ (8004244 <SD_disk_initialize+0x1d0>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <SD_disk_initialize+0x18e>
 80041f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041f6:	2050      	movs	r0, #80	@ 0x50
 80041f8:	f7ff fee7 	bl	8003fca <SD_SendCmd>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <SD_disk_initialize+0x192>
 8004202:	2300      	movs	r3, #0
 8004204:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004206:	4a10      	ldr	r2, [pc, #64]	@ (8004248 <SD_disk_initialize+0x1d4>)
 8004208:	7bbb      	ldrb	r3, [r7, #14]
 800420a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800420c:	f7ff fd88 	bl	8003d20 <DESELECT>
	SPI_RxByte();
 8004210:	f7ff fdc8 	bl	8003da4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800421a:	4b09      	ldr	r3, [pc, #36]	@ (8004240 <SD_disk_initialize+0x1cc>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <SD_disk_initialize+0x1cc>)
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e001      	b.n	8004230 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800422c:	f7ff fe42 	bl	8003eb4 <SD_PowerOff>
	}

	return Stat;
 8004230:	4b03      	ldr	r3, [pc, #12]	@ (8004240 <SD_disk_initialize+0x1cc>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b2db      	uxtb	r3, r3
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bd90      	pop	{r4, r7, pc}
 800423e:	bf00      	nop
 8004240:	24000000 	.word	0x24000000
 8004244:	24000378 	.word	0x24000378
 8004248:	24000194 	.word	0x24000194

0800424c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <SD_disk_status+0x14>
 800425c:	2301      	movs	r3, #1
 800425e:	e002      	b.n	8004266 <SD_disk_status+0x1a>
	return Stat;
 8004260:	4b04      	ldr	r3, [pc, #16]	@ (8004274 <SD_disk_status+0x28>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	24000000 	.word	0x24000000

08004278 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <SD_disk_read+0x1c>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <SD_disk_read+0x20>
 8004294:	2304      	movs	r3, #4
 8004296:	e051      	b.n	800433c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004298:	4b2a      	ldr	r3, [pc, #168]	@ (8004344 <SD_disk_read+0xcc>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <SD_disk_read+0x32>
 80042a6:	2303      	movs	r3, #3
 80042a8:	e048      	b.n	800433c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80042aa:	4b27      	ldr	r3, [pc, #156]	@ (8004348 <SD_disk_read+0xd0>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <SD_disk_read+0x44>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	025b      	lsls	r3, r3, #9
 80042ba:	607b      	str	r3, [r7, #4]

	SELECT();
 80042bc:	f7ff fd24 	bl	8003d08 <SELECT>

	if (count == 1)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d111      	bne.n	80042ea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	2051      	movs	r0, #81	@ 0x51
 80042ca:	f7ff fe7e 	bl	8003fca <SD_SendCmd>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d129      	bne.n	8004328 <SD_disk_read+0xb0>
 80042d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f7ff fe03 	bl	8003ee4 <SD_RxDataBlock>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d021      	beq.n	8004328 <SD_disk_read+0xb0>
 80042e4:	2300      	movs	r3, #0
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	e01e      	b.n	8004328 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	2052      	movs	r0, #82	@ 0x52
 80042ee:	f7ff fe6c 	bl	8003fca <SD_SendCmd>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d117      	bne.n	8004328 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80042f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f7ff fdf1 	bl	8003ee4 <SD_RxDataBlock>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <SD_disk_read+0xa6>
				buff += 512;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800430e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	3b01      	subs	r3, #1
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ed      	bne.n	80042f8 <SD_disk_read+0x80>
 800431c:	e000      	b.n	8004320 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800431e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004320:	2100      	movs	r1, #0
 8004322:	204c      	movs	r0, #76	@ 0x4c
 8004324:	f7ff fe51 	bl	8003fca <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004328:	f7ff fcfa 	bl	8003d20 <DESELECT>
	SPI_RxByte();
 800432c:	f7ff fd3a 	bl	8003da4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	24000000 	.word	0x24000000
 8004348:	24000194 	.word	0x24000194

0800434c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <SD_disk_write+0x1c>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <SD_disk_write+0x20>
 8004368:	2304      	movs	r3, #4
 800436a:	e06b      	b.n	8004444 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800436c:	4b37      	ldr	r3, [pc, #220]	@ (800444c <SD_disk_write+0x100>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <SD_disk_write+0x32>
 800437a:	2303      	movs	r3, #3
 800437c:	e062      	b.n	8004444 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800437e:	4b33      	ldr	r3, [pc, #204]	@ (800444c <SD_disk_write+0x100>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <SD_disk_write+0x44>
 800438c:	2302      	movs	r3, #2
 800438e:	e059      	b.n	8004444 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004390:	4b2f      	ldr	r3, [pc, #188]	@ (8004450 <SD_disk_write+0x104>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <SD_disk_write+0x56>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	025b      	lsls	r3, r3, #9
 80043a0:	607b      	str	r3, [r7, #4]

	SELECT();
 80043a2:	f7ff fcb1 	bl	8003d08 <SELECT>

	if (count == 1)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d110      	bne.n	80043ce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	2058      	movs	r0, #88	@ 0x58
 80043b0:	f7ff fe0b 	bl	8003fca <SD_SendCmd>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d13a      	bne.n	8004430 <SD_disk_write+0xe4>
 80043ba:	21fe      	movs	r1, #254	@ 0xfe
 80043bc:	68b8      	ldr	r0, [r7, #8]
 80043be:	f7ff fdc1 	bl	8003f44 <SD_TxDataBlock>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d033      	beq.n	8004430 <SD_disk_write+0xe4>
			count = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	e030      	b.n	8004430 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80043ce:	4b20      	ldr	r3, [pc, #128]	@ (8004450 <SD_disk_write+0x104>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80043da:	2100      	movs	r1, #0
 80043dc:	2077      	movs	r0, #119	@ 0x77
 80043de:	f7ff fdf4 	bl	8003fca <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	2057      	movs	r0, #87	@ 0x57
 80043e6:	f7ff fdf0 	bl	8003fca <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	2059      	movs	r0, #89	@ 0x59
 80043ee:	f7ff fdec 	bl	8003fca <SD_SendCmd>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11b      	bne.n	8004430 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80043f8:	21fc      	movs	r1, #252	@ 0xfc
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f7ff fda2 	bl	8003f44 <SD_TxDataBlock>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <SD_disk_write+0xd0>
				buff += 512;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800440c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	3b01      	subs	r3, #1
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ee      	bne.n	80043f8 <SD_disk_write+0xac>
 800441a:	e000      	b.n	800441e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800441c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800441e:	21fd      	movs	r1, #253	@ 0xfd
 8004420:	2000      	movs	r0, #0
 8004422:	f7ff fd8f 	bl	8003f44 <SD_TxDataBlock>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <SD_disk_write+0xe4>
			{
				count = 1;
 800442c:	2301      	movs	r3, #1
 800442e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004430:	f7ff fc76 	bl	8003d20 <DESELECT>
	SPI_RxByte();
 8004434:	f7ff fcb6 	bl	8003da4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	24000000 	.word	0x24000000
 8004450:	24000194 	.word	0x24000194

08004454 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b08b      	sub	sp, #44	@ 0x2c
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	603a      	str	r2, [r7, #0]
 800445e:	71fb      	strb	r3, [r7, #7]
 8004460:	460b      	mov	r3, r1
 8004462:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <SD_disk_ioctl+0x1e>
 800446e:	2304      	movs	r3, #4
 8004470:	e113      	b.n	800469a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004478:	79bb      	ldrb	r3, [r7, #6]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d124      	bne.n	80044c8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d012      	beq.n	80044ac <SD_disk_ioctl+0x58>
 8004486:	2b02      	cmp	r3, #2
 8004488:	dc1a      	bgt.n	80044c0 <SD_disk_ioctl+0x6c>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <SD_disk_ioctl+0x40>
 800448e:	2b01      	cmp	r3, #1
 8004490:	d006      	beq.n	80044a0 <SD_disk_ioctl+0x4c>
 8004492:	e015      	b.n	80044c0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004494:	f7ff fd0e 	bl	8003eb4 <SD_PowerOff>
			res = RES_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800449e:	e0fa      	b.n	8004696 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80044a0:	f7ff fcc6 	bl	8003e30 <SD_PowerOn>
			res = RES_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80044aa:	e0f4      	b.n	8004696 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	1c5c      	adds	r4, r3, #1
 80044b0:	f7ff fd0c 	bl	8003ecc <SD_CheckPower>
 80044b4:	4603      	mov	r3, r0
 80044b6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80044be:	e0ea      	b.n	8004696 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80044c6:	e0e6      	b.n	8004696 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80044c8:	4b76      	ldr	r3, [pc, #472]	@ (80046a4 <SD_disk_ioctl+0x250>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <SD_disk_ioctl+0x86>
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0df      	b.n	800469a <SD_disk_ioctl+0x246>

		SELECT();
 80044da:	f7ff fc15 	bl	8003d08 <SELECT>

		switch (ctrl)
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	2b0d      	cmp	r3, #13
 80044e2:	f200 80c9 	bhi.w	8004678 <SD_disk_ioctl+0x224>
 80044e6:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <SD_disk_ioctl+0x98>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	080045e3 	.word	0x080045e3
 80044f0:	08004525 	.word	0x08004525
 80044f4:	080045d3 	.word	0x080045d3
 80044f8:	08004679 	.word	0x08004679
 80044fc:	08004679 	.word	0x08004679
 8004500:	08004679 	.word	0x08004679
 8004504:	08004679 	.word	0x08004679
 8004508:	08004679 	.word	0x08004679
 800450c:	08004679 	.word	0x08004679
 8004510:	08004679 	.word	0x08004679
 8004514:	08004679 	.word	0x08004679
 8004518:	080045f5 	.word	0x080045f5
 800451c:	08004619 	.word	0x08004619
 8004520:	0800463d 	.word	0x0800463d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004524:	2100      	movs	r1, #0
 8004526:	2049      	movs	r0, #73	@ 0x49
 8004528:	f7ff fd4f 	bl	8003fca <SD_SendCmd>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 80a6 	bne.w	8004680 <SD_disk_ioctl+0x22c>
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	2110      	movs	r1, #16
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fcd2 	bl	8003ee4 <SD_RxDataBlock>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 809c 	beq.w	8004680 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004548:	7b3b      	ldrb	r3, [r7, #12]
 800454a:	099b      	lsrs	r3, r3, #6
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10d      	bne.n	800456e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004552:	7d7b      	ldrb	r3, [r7, #21]
 8004554:	461a      	mov	r2, r3
 8004556:	7d3b      	ldrb	r3, [r7, #20]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	b29b      	uxth	r3, r3
 800455c:	4413      	add	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	3301      	adds	r3, #1
 8004562:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004564:	8bfb      	ldrh	r3, [r7, #30]
 8004566:	029a      	lsls	r2, r3, #10
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e02d      	b.n	80045ca <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800456e:	7c7b      	ldrb	r3, [r7, #17]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	b2da      	uxtb	r2, r3
 8004576:	7dbb      	ldrb	r3, [r7, #22]
 8004578:	09db      	lsrs	r3, r3, #7
 800457a:	b2db      	uxtb	r3, r3
 800457c:	4413      	add	r3, r2
 800457e:	b2da      	uxtb	r2, r3
 8004580:	7d7b      	ldrb	r3, [r7, #21]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0306 	and.w	r3, r3, #6
 800458a:	b2db      	uxtb	r3, r3
 800458c:	4413      	add	r3, r2
 800458e:	b2db      	uxtb	r3, r3
 8004590:	3302      	adds	r3, #2
 8004592:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004596:	7d3b      	ldrb	r3, [r7, #20]
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	7cbb      	ldrb	r3, [r7, #18]
 80045aa:	029b      	lsls	r3, r3, #10
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80045bc:	8bfa      	ldrh	r2, [r7, #30]
 80045be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045c2:	3b09      	subs	r3, #9
 80045c4:	409a      	lsls	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80045d0:	e056      	b.n	8004680 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80045e0:	e055      	b.n	800468e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80045e2:	f7ff fc0b 	bl	8003dfc <SD_ReadyWait>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2bff      	cmp	r3, #255	@ 0xff
 80045ea:	d14b      	bne.n	8004684 <SD_disk_ioctl+0x230>
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80045f2:	e047      	b.n	8004684 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80045f4:	2100      	movs	r1, #0
 80045f6:	2049      	movs	r0, #73	@ 0x49
 80045f8:	f7ff fce7 	bl	8003fca <SD_SendCmd>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d142      	bne.n	8004688 <SD_disk_ioctl+0x234>
 8004602:	2110      	movs	r1, #16
 8004604:	6a38      	ldr	r0, [r7, #32]
 8004606:	f7ff fc6d 	bl	8003ee4 <SD_RxDataBlock>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d03b      	beq.n	8004688 <SD_disk_ioctl+0x234>
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004616:	e037      	b.n	8004688 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004618:	2100      	movs	r1, #0
 800461a:	204a      	movs	r0, #74	@ 0x4a
 800461c:	f7ff fcd5 	bl	8003fca <SD_SendCmd>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d132      	bne.n	800468c <SD_disk_ioctl+0x238>
 8004626:	2110      	movs	r1, #16
 8004628:	6a38      	ldr	r0, [r7, #32]
 800462a:	f7ff fc5b 	bl	8003ee4 <SD_RxDataBlock>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02b      	beq.n	800468c <SD_disk_ioctl+0x238>
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800463a:	e027      	b.n	800468c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800463c:	2100      	movs	r1, #0
 800463e:	207a      	movs	r0, #122	@ 0x7a
 8004640:	f7ff fcc3 	bl	8003fca <SD_SendCmd>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d116      	bne.n	8004678 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800464a:	2300      	movs	r3, #0
 800464c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004650:	e00b      	b.n	800466a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004652:	6a3c      	ldr	r4, [r7, #32]
 8004654:	1c63      	adds	r3, r4, #1
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	f7ff fba4 	bl	8003da4 <SPI_RxByte>
 800465c:	4603      	mov	r3, r0
 800465e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004660:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004664:	3301      	adds	r3, #1
 8004666:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800466a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800466e:	2b03      	cmp	r3, #3
 8004670:	d9ef      	bls.n	8004652 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800467e:	e006      	b.n	800468e <SD_disk_ioctl+0x23a>
			break;
 8004680:	bf00      	nop
 8004682:	e004      	b.n	800468e <SD_disk_ioctl+0x23a>
			break;
 8004684:	bf00      	nop
 8004686:	e002      	b.n	800468e <SD_disk_ioctl+0x23a>
			break;
 8004688:	bf00      	nop
 800468a:	e000      	b.n	800468e <SD_disk_ioctl+0x23a>
			break;
 800468c:	bf00      	nop
		}

		DESELECT();
 800468e:	f7ff fb47 	bl	8003d20 <DESELECT>
		SPI_RxByte();
 8004692:	f7ff fb87 	bl	8003da4 <SPI_RxByte>
	}

	return res;
 8004696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800469a:	4618      	mov	r0, r3
 800469c:	372c      	adds	r7, #44	@ 0x2c
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd90      	pop	{r4, r7, pc}
 80046a2:	bf00      	nop
 80046a4:	24000000 	.word	0x24000000

080046a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	@ 0x38
 80046ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046be:	4b8b      	ldr	r3, [pc, #556]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046c4:	4a89      	ldr	r2, [pc, #548]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046ce:	4b87      	ldr	r3, [pc, #540]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046dc:	4b83      	ldr	r3, [pc, #524]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046e2:	4a82      	ldr	r2, [pc, #520]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046ec:	4b7f      	ldr	r3, [pc, #508]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fa:	4b7c      	ldr	r3, [pc, #496]	@ (80048ec <MX_GPIO_Init+0x244>)
 80046fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004700:	4a7a      	ldr	r2, [pc, #488]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800470a:	4b78      	ldr	r3, [pc, #480]	@ (80048ec <MX_GPIO_Init+0x244>)
 800470c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004718:	4b74      	ldr	r3, [pc, #464]	@ (80048ec <MX_GPIO_Init+0x244>)
 800471a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800471e:	4a73      	ldr	r2, [pc, #460]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004720:	f043 0320 	orr.w	r3, r3, #32
 8004724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004728:	4b70      	ldr	r3, [pc, #448]	@ (80048ec <MX_GPIO_Init+0x244>)
 800472a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004736:	4b6d      	ldr	r3, [pc, #436]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800473c:	4a6b      	ldr	r2, [pc, #428]	@ (80048ec <MX_GPIO_Init+0x244>)
 800473e:	f043 0302 	orr.w	r3, r3, #2
 8004742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004746:	4b69      	ldr	r3, [pc, #420]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004754:	4b65      	ldr	r3, [pc, #404]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800475a:	4a64      	ldr	r2, [pc, #400]	@ (80048ec <MX_GPIO_Init+0x244>)
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004764:	4b61      	ldr	r3, [pc, #388]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004772:	4b5e      	ldr	r3, [pc, #376]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004778:	4a5c      	ldr	r2, [pc, #368]	@ (80048ec <MX_GPIO_Init+0x244>)
 800477a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800477e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004782:	4b5a      	ldr	r3, [pc, #360]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004790:	4b56      	ldr	r3, [pc, #344]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004796:	4a55      	ldr	r2, [pc, #340]	@ (80048ec <MX_GPIO_Init+0x244>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047a0:	4b52      	ldr	r3, [pc, #328]	@ (80048ec <MX_GPIO_Init+0x244>)
 80047a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80047ae:	2200      	movs	r2, #0
 80047b0:	f248 0108 	movw	r1, #32776	@ 0x8008
 80047b4:	484e      	ldr	r0, [pc, #312]	@ (80048f0 <MX_GPIO_Init+0x248>)
 80047b6:	f009 f947 	bl	800da48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 80047ba:	2200      	movs	r2, #0
 80047bc:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 80047c0:	484c      	ldr	r0, [pc, #304]	@ (80048f4 <MX_GPIO_Init+0x24c>)
 80047c2:	f009 f941 	bl	800da48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 80047c6:	2200      	movs	r2, #0
 80047c8:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 80047cc:	484a      	ldr	r0, [pc, #296]	@ (80048f8 <MX_GPIO_Init+0x250>)
 80047ce:	f009 f93b 	bl	800da48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 80047d2:	2200      	movs	r2, #0
 80047d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047d8:	4848      	ldr	r0, [pc, #288]	@ (80048fc <MX_GPIO_Init+0x254>)
 80047da:	f009 f935 	bl	800da48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 80047de:	2200      	movs	r2, #0
 80047e0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80047e4:	4846      	ldr	r0, [pc, #280]	@ (8004900 <MX_GPIO_Init+0x258>)
 80047e6:	f009 f92f 	bl	800da48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 80047ea:	f248 0308 	movw	r3, #32776	@ 0x8008
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f0:	2301      	movs	r3, #1
 80047f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f8:	2300      	movs	r3, #0
 80047fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004800:	4619      	mov	r1, r3
 8004802:	483b      	ldr	r0, [pc, #236]	@ (80048f0 <MX_GPIO_Init+0x248>)
 8004804:	f008 ff60 	bl	800d6c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004808:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480e:	2301      	movs	r3, #1
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	2300      	movs	r3, #0
 8004814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004816:	2300      	movs	r3, #0
 8004818:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800481e:	4619      	mov	r1, r3
 8004820:	4834      	ldr	r0, [pc, #208]	@ (80048f4 <MX_GPIO_Init+0x24c>)
 8004822:	f008 ff51 	bl	800d6c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800482c:	2300      	movs	r3, #0
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004838:	4619      	mov	r1, r3
 800483a:	482e      	ldr	r0, [pc, #184]	@ (80048f4 <MX_GPIO_Init+0x24c>)
 800483c:	f008 ff44 	bl	800d6c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004840:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004846:	2301      	movs	r3, #1
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484a:	2300      	movs	r3, #0
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484e:	2300      	movs	r3, #0
 8004850:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004856:	4619      	mov	r1, r3
 8004858:	4827      	ldr	r0, [pc, #156]	@ (80048f8 <MX_GPIO_Init+0x250>)
 800485a:	f008 ff35 	bl	800d6c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 800485e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004864:	2301      	movs	r3, #1
 8004866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800486c:	2301      	movs	r3, #1
 800486e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004874:	4619      	mov	r1, r3
 8004876:	4820      	ldr	r0, [pc, #128]	@ (80048f8 <MX_GPIO_Init+0x250>)
 8004878:	f008 ff26 	bl	800d6c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 800487c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004882:	2301      	movs	r3, #1
 8004884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488a:	2300      	movs	r3, #0
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 800488e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004892:	4619      	mov	r1, r3
 8004894:	4819      	ldr	r0, [pc, #100]	@ (80048fc <MX_GPIO_Init+0x254>)
 8004896:	f008 ff17 	bl	800d6c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 800489a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048a0:	2301      	movs	r3, #1
 80048a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a8:	2300      	movs	r3, #0
 80048aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048b0:	4619      	mov	r1, r3
 80048b2:	4813      	ldr	r0, [pc, #76]	@ (8004900 <MX_GPIO_Init+0x258>)
 80048b4:	f008 ff08 	bl	800d6c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80048b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80048c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80048c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048cc:	4619      	mov	r1, r3
 80048ce:	480b      	ldr	r0, [pc, #44]	@ (80048fc <MX_GPIO_Init+0x254>)
 80048d0:	f008 fefa 	bl	800d6c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2100      	movs	r1, #0
 80048d8:	2028      	movs	r0, #40	@ 0x28
 80048da:	f005 fff6 	bl	800a8ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80048de:	2028      	movs	r0, #40	@ 0x28
 80048e0:	f006 f80d 	bl	800a8fe <HAL_NVIC_EnableIRQ>

}
 80048e4:	bf00      	nop
 80048e6:	3738      	adds	r7, #56	@ 0x38
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	58024400 	.word	0x58024400
 80048f0:	58021000 	.word	0x58021000
 80048f4:	58020400 	.word	0x58020400
 80048f8:	58020c00 	.word	0x58020c00
 80048fc:	58021800 	.word	0x58021800
 8004900:	58020000 	.word	0x58020000

08004904 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004908:	4b1d      	ldr	r3, [pc, #116]	@ (8004980 <MX_I2C5_Init+0x7c>)
 800490a:	4a1e      	ldr	r2, [pc, #120]	@ (8004984 <MX_I2C5_Init+0x80>)
 800490c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 800490e:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004914:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800491a:	4b19      	ldr	r3, [pc, #100]	@ (8004980 <MX_I2C5_Init+0x7c>)
 800491c:	2201      	movs	r2, #1
 800491e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004920:	4b17      	ldr	r3, [pc, #92]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004926:	4b16      	ldr	r3, [pc, #88]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004928:	2200      	movs	r2, #0
 800492a:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800492c:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <MX_I2C5_Init+0x7c>)
 800492e:	2200      	movs	r2, #0
 8004930:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004934:	2200      	movs	r2, #0
 8004936:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004938:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <MX_I2C5_Init+0x7c>)
 800493a:	2200      	movs	r2, #0
 800493c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 800493e:	4810      	ldr	r0, [pc, #64]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004940:	f009 f8b6 	bl	800dab0 <HAL_I2C_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 800494a:	f002 ff85 	bl	8007858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800494e:	2100      	movs	r1, #0
 8004950:	480b      	ldr	r0, [pc, #44]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004952:	f00b fc65 	bl	8010220 <HAL_I2CEx_ConfigAnalogFilter>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 800495c:	f002 ff7c 	bl	8007858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004960:	2100      	movs	r1, #0
 8004962:	4807      	ldr	r0, [pc, #28]	@ (8004980 <MX_I2C5_Init+0x7c>)
 8004964:	f00b fca7 	bl	80102b6 <HAL_I2CEx_ConfigDigitalFilter>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 800496e:	f002 ff73 	bl	8007858 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004972:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004976:	f00b fceb 	bl	8010350 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	24000198 	.word	0x24000198
 8004984:	40006400 	.word	0x40006400

08004988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b0b8      	sub	sp, #224	@ 0xe0
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004990:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049a0:	f107 0310 	add.w	r3, r7, #16
 80049a4:	22b8      	movs	r2, #184	@ 0xb8
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f018 ff27 	bl	801d7fc <memset>
  if(i2cHandle->Instance==I2C5)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a60 <HAL_I2C_MspInit+0xd8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d14f      	bne.n	8004a58 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 80049b8:	f04f 0208 	mov.w	r2, #8
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 80049c4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80049c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	4618      	mov	r0, r3
 80049d2:	f00c fc81 	bl	80112d8 <HAL_RCCEx_PeriphCLKConfig>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80049dc:	f002 ff3c 	bl	8007858 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049e0:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 80049e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 80049f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80049fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a06:	2312      	movs	r3, #18
 8004a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a1e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004a22:	4619      	mov	r1, r3
 8004a24:	4810      	ldr	r0, [pc, #64]	@ (8004a68 <HAL_I2C_MspInit+0xe0>)
 8004a26:	f008 fe4f 	bl	800d6c8 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 8004a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a30:	4a0c      	ldr	r2, [pc, #48]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 8004a32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <HAL_I2C_MspInit+0xdc>)
 8004a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	209d      	movs	r0, #157	@ 0x9d
 8004a4e:	f005 ff3c 	bl	800a8ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004a52:	209d      	movs	r0, #157	@ 0x9d
 8004a54:	f005 ff53 	bl	800a8fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004a58:	bf00      	nop
 8004a5a:	37e0      	adds	r7, #224	@ 0xe0
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40006400 	.word	0x40006400
 8004a64:	58024400 	.word	0x58024400
 8004a68:	58020800 	.word	0x58020800

08004a6c <__NVIC_SystemReset>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004a70:	f3bf 8f4f 	dsb	sy
}
 8004a74:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004a76:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <__NVIC_SystemReset+0x24>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004a7e:	4904      	ldr	r1, [pc, #16]	@ (8004a90 <__NVIC_SystemReset+0x24>)
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <__NVIC_SystemReset+0x28>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a86:	f3bf 8f4f 	dsb	sy
}
 8004a8a:	bf00      	nop
    __NOP();
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <__NVIC_SystemReset+0x20>
 8004a90:	e000ed00 	.word	0xe000ed00
 8004a94:	05fa0004 	.word	0x05fa0004

08004a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004a9e:	f002 feaf 	bl	8007800 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004aa2:	f003 fe03 	bl	80086ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aa6:	f000 fef5 	bl	8005894 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004aaa:	f000 ff65 	bl	8005978 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aae:	f7ff fdfb 	bl	80046a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ab2:	f7fe fe93 	bl	80037dc <MX_DMA_Init>
  MX_I2C5_Init();
 8004ab6:	f7ff ff25 	bl	8004904 <MX_I2C5_Init>
  MX_ADC2_Init();
 8004aba:	f7fe fda1 	bl	8003600 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004abe:	f002 ff27 	bl	8007910 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004ac2:	f003 fd0b 	bl	80084dc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004ac6:	f003 fa29 	bl	8007f1c <MX_TIM1_Init>
  MX_TIM8_Init();
 8004aca:	f003 fb9f 	bl	800820c <MX_TIM8_Init>
  MX_TIM3_Init();
 8004ace:	f003 fb21 	bl	8008114 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004ad2:	f015 fcdf 	bl	801a494 <MX_FATFS_Init>
  MX_TIM2_Init();
 8004ad6:	f003 fac9 	bl	800806c <MX_TIM2_Init>
  MX_SPI1_Init();
 8004ada:	f002 fec3 	bl	8007864 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ae4:	48b4      	ldr	r0, [pc, #720]	@ (8004db8 <main+0x320>)
 8004ae6:	f008 ffaf 	bl	800da48 <HAL_GPIO_WritePin>


  	  STARTUP = 1;
 8004aea:	4bb4      	ldr	r3, [pc, #720]	@ (8004dbc <main+0x324>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004af0:	4bb3      	ldr	r3, [pc, #716]	@ (8004dc0 <main+0x328>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]

  	MPU6050.Acc.Acc_Scale = 8192;
 8004af6:	4bb3      	ldr	r3, [pc, #716]	@ (8004dc4 <main+0x32c>)
 8004af8:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8004afc:	619a      	str	r2, [r3, #24]
  	MPU6050.Acc.acc_x_cal = 0;
 8004afe:	4bb1      	ldr	r3, [pc, #708]	@ (8004dc4 <main+0x32c>)
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	61da      	str	r2, [r3, #28]
  	MPU6050.Acc.acc_y_cal = 0;
 8004b06:	4baf      	ldr	r3, [pc, #700]	@ (8004dc4 <main+0x32c>)
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	621a      	str	r2, [r3, #32]
  	MPU6050.Acc.acc_z_cal = 0;
 8004b0e:	4bad      	ldr	r3, [pc, #692]	@ (8004dc4 <main+0x32c>)
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24
  	MPU6050.Acc.ax_ang = 0;
 8004b16:	4bab      	ldr	r3, [pc, #684]	@ (8004dc4 <main+0x32c>)
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	60da      	str	r2, [r3, #12]
  	MPU6050.Acc.ay_ang = 0;
 8004b1e:	4ba9      	ldr	r3, [pc, #676]	@ (8004dc4 <main+0x32c>)
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
  	MPU6050.Acc.az_ang = 0;
 8004b26:	4ba7      	ldr	r3, [pc, #668]	@ (8004dc4 <main+0x32c>)
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	615a      	str	r2, [r3, #20]
  	MPU6050.Acc.ax = 0;
 8004b2e:	4ba5      	ldr	r3, [pc, #660]	@ (8004dc4 <main+0x32c>)
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
  	MPU6050.Acc.ay = 0;
 8004b36:	4ba3      	ldr	r3, [pc, #652]	@ (8004dc4 <main+0x32c>)
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	605a      	str	r2, [r3, #4]
  	MPU6050.Acc.az = 0;
 8004b3e:	4ba1      	ldr	r3, [pc, #644]	@ (8004dc4 <main+0x32c>)
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
  	MPU6050.Gyr.Gyr_Scale = 65.5;
 8004b46:	4b9f      	ldr	r3, [pc, #636]	@ (8004dc4 <main+0x32c>)
 8004b48:	4a9f      	ldr	r2, [pc, #636]	@ (8004dc8 <main+0x330>)
 8004b4a:	635a      	str	r2, [r3, #52]	@ 0x34
  	MPU6050.Gyr.gyr_x_cal = 0;
 8004b4c:	4b9d      	ldr	r3, [pc, #628]	@ (8004dc4 <main+0x32c>)
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	639a      	str	r2, [r3, #56]	@ 0x38
  	MPU6050.Gyr.gyr_y_cal = 0;
 8004b54:	4b9b      	ldr	r3, [pc, #620]	@ (8004dc4 <main+0x32c>)
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  	MPU6050.Gyr.gyr_z_cal = 0;
 8004b5c:	4b99      	ldr	r3, [pc, #612]	@ (8004dc4 <main+0x32c>)
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	641a      	str	r2, [r3, #64]	@ 0x40
  	MPU6050.Gyr.gx = 0;
 8004b64:	4b97      	ldr	r3, [pc, #604]	@ (8004dc4 <main+0x32c>)
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  	MPU6050.Gyr.gy = 0;
 8004b6c:	4b95      	ldr	r3, [pc, #596]	@ (8004dc4 <main+0x32c>)
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  	MPU6050.Gyr.gz = 0;
 8004b74:	4b93      	ldr	r3, [pc, #588]	@ (8004dc4 <main+0x32c>)
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  	MPU6050.MPU6050_IRQ = 0;
 8004b7c:	4b91      	ldr	r3, [pc, #580]	@ (8004dc4 <main+0x32c>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52



	NRF24.NRF24_MODE = NRF24_Error;
 8004b84:	4b91      	ldr	r3, [pc, #580]	@ (8004dcc <main+0x334>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	NRF24.Status = NRF24_Ready;
 8004b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8004dcc <main+0x334>)
 8004b8e:	2204      	movs	r2, #4
 8004b90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	NRF24.Message_Status = 0;
 8004b94:	4b8d      	ldr	r3, [pc, #564]	@ (8004dcc <main+0x334>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	NRF24.NRF24_Message_count = 0;
 8004b9c:	4b8b      	ldr	r3, [pc, #556]	@ (8004dcc <main+0x334>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	NRF24.Timer_1 = 0;
 8004ba4:	4b89      	ldr	r3, [pc, #548]	@ (8004dcc <main+0x334>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24.Timer_2 = 0;
 8004bac:	4b87      	ldr	r3, [pc, #540]	@ (8004dcc <main+0x334>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24.Step = 0;
 8004bb4:	4b85      	ldr	r3, [pc, #532]	@ (8004dcc <main+0x334>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24.SPI_Rx_Inte = 0;
 8004bbc:	4b83      	ldr	r3, [pc, #524]	@ (8004dcc <main+0x334>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	NRF24.SPI_Tx_Inte = 0;
 8004bc4:	4b81      	ldr	r3, [pc, #516]	@ (8004dcc <main+0x334>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89



	BMP180.BMP180_IRQ = 0;
 8004bcc:	4b80      	ldr	r3, [pc, #512]	@ (8004dd0 <main+0x338>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	BMP180.ampritude = 0;
 8004bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8004dd0 <main+0x338>)
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	651a      	str	r2, [r3, #80]	@ 0x50
	BMP180.pres = 0;
 8004bdc:	4b7c      	ldr	r3, [pc, #496]	@ (8004dd0 <main+0x338>)
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	64da      	str	r2, [r3, #76]	@ 0x4c
	BMP180.startpres = 0;
 8004be4:	4b7a      	ldr	r3, [pc, #488]	@ (8004dd0 <main+0x338>)
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	655a      	str	r2, [r3, #84]	@ 0x54
	BMP180.temp = 0;
 8004bec:	4b78      	ldr	r3, [pc, #480]	@ (8004dd0 <main+0x338>)
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	649a      	str	r2, [r3, #72]	@ 0x48
	BMP180.Raw_Data.pressure = 0;
 8004bf4:	4b76      	ldr	r3, [pc, #472]	@ (8004dd0 <main+0x338>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
	BMP180.Raw_Data.temperature = 0;
 8004bfa:	4b75      	ldr	r3, [pc, #468]	@ (8004dd0 <main+0x338>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	641a      	str	r2, [r3, #64]	@ 0x40



	MYDRON.dronheight = 0;
 8004c00:	4b74      	ldr	r3, [pc, #464]	@ (8004dd4 <main+0x33c>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
	MYDRON.batterysize = 0;
 8004c08:	4b72      	ldr	r3, [pc, #456]	@ (8004dd4 <main+0x33c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	MYDRON.Pitch.Angle_Error_Sum = 0;
 8004c10:	4b70      	ldr	r3, [pc, #448]	@ (8004dd4 <main+0x33c>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	625a      	str	r2, [r3, #36]	@ 0x24
	MYDRON.Pitch.Angle_Error = 0;
 8004c16:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd4 <main+0x33c>)
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	615a      	str	r2, [r3, #20]
	MYDRON.Pitch.Angular_Rate_Error = 0;
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd4 <main+0x33c>)
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	619a      	str	r2, [r3, #24]
	MYDRON.Pitch.Angular_Rate_Error_Sum = 0;
 8004c26:	4b6b      	ldr	r3, [pc, #428]	@ (8004dd4 <main+0x33c>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	629a      	str	r2, [r3, #40]	@ 0x28
	MYDRON.Pitch.Last_Wanted_rx = 0;
 8004c2c:	4b69      	ldr	r3, [pc, #420]	@ (8004dd4 <main+0x33c>)
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	605a      	str	r2, [r3, #4]
	MYDRON.Pitch.Now = 0;
 8004c34:	4b67      	ldr	r3, [pc, #412]	@ (8004dd4 <main+0x33c>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	611a      	str	r2, [r3, #16]
	MYDRON.Pitch.Old_Angle_Error = 0;
 8004c3c:	4b65      	ldr	r3, [pc, #404]	@ (8004dd4 <main+0x33c>)
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	61da      	str	r2, [r3, #28]
	MYDRON.Pitch.Old_Angular_Rate_Error = 0;
 8004c44:	4b63      	ldr	r3, [pc, #396]	@ (8004dd4 <main+0x33c>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	621a      	str	r2, [r3, #32]
	MYDRON.Pitch.Value = 0;
 8004c4c:	4b61      	ldr	r3, [pc, #388]	@ (8004dd4 <main+0x33c>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	859a      	strh	r2, [r3, #44]	@ 0x2c
	MYDRON.Pitch.Wanted = 0;
 8004c52:	4b60      	ldr	r3, [pc, #384]	@ (8004dd4 <main+0x33c>)
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
	MYDRON.Pitch.Wanted_Factor = 0;
 8004c5a:	4b5e      	ldr	r3, [pc, #376]	@ (8004dd4 <main+0x33c>)
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	60da      	str	r2, [r3, #12]
	MYDRON.Pitch.Wanted_rx = 0;
 8004c62:	4b5c      	ldr	r3, [pc, #368]	@ (8004dd4 <main+0x33c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	801a      	strh	r2, [r3, #0]
	MYDRON.Pitch.Wanted_v = 0;
 8004c68:	4b5a      	ldr	r3, [pc, #360]	@ (8004dd4 <main+0x33c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	805a      	strh	r2, [r3, #2]
	MYDRON.Rool.Angle_Error_Sum = 0;
 8004c6e:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <main+0x33c>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	655a      	str	r2, [r3, #84]	@ 0x54
	MYDRON.Rool.Angle_Error = 0;
 8004c74:	4b57      	ldr	r3, [pc, #348]	@ (8004dd4 <main+0x33c>)
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	645a      	str	r2, [r3, #68]	@ 0x44
	MYDRON.Rool.Angular_Rate_Error = 0;
 8004c7c:	4b55      	ldr	r3, [pc, #340]	@ (8004dd4 <main+0x33c>)
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	649a      	str	r2, [r3, #72]	@ 0x48
	MYDRON.Rool.Angular_Rate_Error_Sum = 0;
 8004c84:	4b53      	ldr	r3, [pc, #332]	@ (8004dd4 <main+0x33c>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	659a      	str	r2, [r3, #88]	@ 0x58
	MYDRON.Rool.Last_Wanted_rx = 0;
 8004c8a:	4b52      	ldr	r3, [pc, #328]	@ (8004dd4 <main+0x33c>)
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	635a      	str	r2, [r3, #52]	@ 0x34
	MYDRON.Rool.Now = 0;
 8004c92:	4b50      	ldr	r3, [pc, #320]	@ (8004dd4 <main+0x33c>)
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	@ 0x40
	MYDRON.Rool.Old_Angle_Error = 0;
 8004c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004dd4 <main+0x33c>)
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
	MYDRON.Rool.Old_Angular_Rate_Error = 0;
 8004ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8004dd4 <main+0x33c>)
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	651a      	str	r2, [r3, #80]	@ 0x50
	MYDRON.Rool.Value = 0;
 8004caa:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <main+0x33c>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	MYDRON.Rool.Wanted = 0;
 8004cb2:	4b48      	ldr	r3, [pc, #288]	@ (8004dd4 <main+0x33c>)
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	639a      	str	r2, [r3, #56]	@ 0x38
	MYDRON.Rool.Wanted_Factor = 0;
 8004cba:	4b46      	ldr	r3, [pc, #280]	@ (8004dd4 <main+0x33c>)
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
	MYDRON.Rool.Wanted_rx = 0;
 8004cc2:	4b44      	ldr	r3, [pc, #272]	@ (8004dd4 <main+0x33c>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	861a      	strh	r2, [r3, #48]	@ 0x30
	MYDRON.Rool.Wanted_v = 0;
 8004cc8:	4b42      	ldr	r3, [pc, #264]	@ (8004dd4 <main+0x33c>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	865a      	strh	r2, [r3, #50]	@ 0x32
	MYDRON.Yaw.Angle_Error_Sum = 0;
 8004cce:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <main+0x33c>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	MYDRON.Yaw.Angle_Error = 0;
 8004cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd4 <main+0x33c>)
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	675a      	str	r2, [r3, #116]	@ 0x74
	MYDRON.Yaw.Angular_Rate_Error = 0;
 8004cde:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd4 <main+0x33c>)
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	679a      	str	r2, [r3, #120]	@ 0x78
	MYDRON.Yaw.Angular_Rate_Error_Sum = 0;
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd4 <main+0x33c>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MYDRON.Yaw.Last_Wanted_rx = 0;
 8004cee:	4b39      	ldr	r3, [pc, #228]	@ (8004dd4 <main+0x33c>)
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	665a      	str	r2, [r3, #100]	@ 0x64
	MYDRON.Yaw.Now = 0;
 8004cf6:	4b37      	ldr	r3, [pc, #220]	@ (8004dd4 <main+0x33c>)
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	671a      	str	r2, [r3, #112]	@ 0x70
	MYDRON.Yaw.Old_Angle_Error = 0;
 8004cfe:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <main+0x33c>)
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	67da      	str	r2, [r3, #124]	@ 0x7c
	MYDRON.Yaw.Old_Angular_Rate_Error = 0;
 8004d06:	4b33      	ldr	r3, [pc, #204]	@ (8004dd4 <main+0x33c>)
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MYDRON.Yaw.Value = 0;
 8004d10:	4b30      	ldr	r3, [pc, #192]	@ (8004dd4 <main+0x33c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	MYDRON.Yaw.Wanted = 0;
 8004d18:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd4 <main+0x33c>)
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	669a      	str	r2, [r3, #104]	@ 0x68
	MYDRON.Yaw.Wanted_Factor = 0;
 8004d20:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd4 <main+0x33c>)
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	66da      	str	r2, [r3, #108]	@ 0x6c
	MYDRON.Yaw.Wanted_rx = 0;
 8004d28:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd4 <main+0x33c>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	MYDRON.Yaw.Wanted_v = 0;
 8004d30:	4b28      	ldr	r3, [pc, #160]	@ (8004dd4 <main+0x33c>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	MYDRON.PID_Pitch.Angle_Factors[0] = 0;
 8004d38:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <main+0x33c>)
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	MYDRON.PID_Pitch.Angle_Factors[1] = 0;
 8004d42:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <main+0x33c>)
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	MYDRON.PID_Pitch.Angle_Factors[2] = 0;
 8004d4c:	4b21      	ldr	r3, [pc, #132]	@ (8004dd4 <main+0x33c>)
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	MYDRON.PID_Pitch.Angle_Factors[3] = 0;
 8004d56:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd4 <main+0x33c>)
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	MYDRON.PID_Pitch.Angle_Factors[4] = 0;
 8004d60:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd4 <main+0x33c>)
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	MYDRON.PID_Pitch.Angular_Rate_Factors[0] = 0;
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd4 <main+0x33c>)
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	MYDRON.PID_Pitch.Angular_Rate_Factors[1] = 0;
 8004d74:	4b17      	ldr	r3, [pc, #92]	@ (8004dd4 <main+0x33c>)
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	MYDRON.PID_Pitch.Angular_Rate_Factors[2] = 0;
 8004d7e:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <main+0x33c>)
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	MYDRON.PID_Pitch.Angular_Rate_Factors[3] = 0;
 8004d88:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <main+0x33c>)
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	MYDRON.PID_Pitch.Angular_Rate_Factors[4] = 0;
 8004d92:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <main+0x33c>)
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	MYDRON.PID_Pitch.Angle_Value = 0;
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <main+0x33c>)
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	MYDRON.PID_Pitch.Angular_Rate_Value = 0;
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <main+0x33c>)
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	MYDRON.PID_Rool.Angle_Factors[0] = 0;
 8004db0:	4b08      	ldr	r3, [pc, #32]	@ (8004dd4 <main+0x33c>)
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	e00f      	b.n	8004dd8 <main+0x340>
 8004db8:	58021800 	.word	0x58021800
 8004dbc:	0000007c 	.word	0x0000007c
 8004dc0:	00004198 	.word	0x00004198
 8004dc4:	00000000 	.word	0x00000000
 8004dc8:	42830000 	.word	0x42830000
 8004dcc:	000000fc 	.word	0x000000fc
 8004dd0:	0000009c 	.word	0x0000009c
 8004dd4:	00000188 	.word	0x00000188
 8004dd8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	MYDRON.PID_Rool.Angle_Factors[1] = 0;
 8004ddc:	4bb2      	ldr	r3, [pc, #712]	@ (80050a8 <main+0x610>)
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	MYDRON.PID_Rool.Angle_Factors[2] = 0;
 8004de6:	4bb0      	ldr	r3, [pc, #704]	@ (80050a8 <main+0x610>)
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	MYDRON.PID_Rool.Angle_Factors[3] = 0;
 8004df0:	4bad      	ldr	r3, [pc, #692]	@ (80050a8 <main+0x610>)
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	MYDRON.PID_Rool.Angle_Factors[4] = 0;
 8004dfa:	4bab      	ldr	r3, [pc, #684]	@ (80050a8 <main+0x610>)
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	MYDRON.PID_Rool.Angular_Rate_Factors[0] = 0;
 8004e04:	4ba8      	ldr	r3, [pc, #672]	@ (80050a8 <main+0x610>)
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	MYDRON.PID_Rool.Angular_Rate_Factors[1] = 0;
 8004e0e:	4ba6      	ldr	r3, [pc, #664]	@ (80050a8 <main+0x610>)
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	MYDRON.PID_Rool.Angular_Rate_Factors[2] = 0;
 8004e18:	4ba3      	ldr	r3, [pc, #652]	@ (80050a8 <main+0x610>)
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	MYDRON.PID_Rool.Angular_Rate_Factors[3] = 0;
 8004e22:	4ba1      	ldr	r3, [pc, #644]	@ (80050a8 <main+0x610>)
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	MYDRON.PID_Rool.Angular_Rate_Factors[4] = 0;
 8004e2c:	4b9e      	ldr	r3, [pc, #632]	@ (80050a8 <main+0x610>)
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	MYDRON.PID_Rool.Angle_Value = 0;
 8004e36:	4b9c      	ldr	r3, [pc, #624]	@ (80050a8 <main+0x610>)
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	MYDRON.PID_Rool.Angular_Rate_Value = 0;
 8004e40:	4b99      	ldr	r3, [pc, #612]	@ (80050a8 <main+0x610>)
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	MYDRON.PID_Yaw.Angle_Factors[0] = 0;
 8004e4a:	4b97      	ldr	r3, [pc, #604]	@ (80050a8 <main+0x610>)
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
	MYDRON.PID_Yaw.Angle_Factors[1] = 0;
 8004e54:	4b94      	ldr	r3, [pc, #592]	@ (80050a8 <main+0x610>)
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	MYDRON.PID_Yaw.Angle_Factors[2] = 0;
 8004e5e:	4b92      	ldr	r3, [pc, #584]	@ (80050a8 <main+0x610>)
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	MYDRON.PID_Yaw.Angle_Factors[3] = 0;
 8004e68:	4b8f      	ldr	r3, [pc, #572]	@ (80050a8 <main+0x610>)
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	MYDRON.PID_Yaw.Angle_Factors[4] = 0;
 8004e72:	4b8d      	ldr	r3, [pc, #564]	@ (80050a8 <main+0x610>)
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	MYDRON.PID_Yaw.Angular_Rate_Factors[0] = 0;
 8004e7c:	4b8a      	ldr	r3, [pc, #552]	@ (80050a8 <main+0x610>)
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
	MYDRON.PID_Yaw.Angular_Rate_Factors[1] = 0;
 8004e86:	4b88      	ldr	r3, [pc, #544]	@ (80050a8 <main+0x610>)
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	MYDRON.PID_Yaw.Angular_Rate_Factors[2] = 0;
 8004e90:	4b85      	ldr	r3, [pc, #532]	@ (80050a8 <main+0x610>)
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	MYDRON.PID_Yaw.Angular_Rate_Factors[3] = 0;
 8004e9a:	4b83      	ldr	r3, [pc, #524]	@ (80050a8 <main+0x610>)
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	MYDRON.PID_Yaw.Angular_Rate_Factors[4] = 0;
 8004ea4:	4b80      	ldr	r3, [pc, #512]	@ (80050a8 <main+0x610>)
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	MYDRON.PID_Yaw.Angle_Value = 0;
 8004eae:	4b7e      	ldr	r3, [pc, #504]	@ (80050a8 <main+0x610>)
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
	MYDRON.PID_Yaw.Angular_Rate_Value = 0;
 8004eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80050a8 <main+0x610>)
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	MYDRON.Thrust.Now = 0;
 8004ec2:	4b79      	ldr	r3, [pc, #484]	@ (80050a8 <main+0x610>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	MYDRON.Thrust.Old_Speed_1 = 0;
 8004eca:	4b77      	ldr	r3, [pc, #476]	@ (80050a8 <main+0x610>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	MYDRON.Thrust.Old_Speed_2 = 0;
 8004ed2:	4b75      	ldr	r3, [pc, #468]	@ (80050a8 <main+0x610>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
	MYDRON.Thrust.Old_Speed_3 = 0;
 8004eda:	4b73      	ldr	r3, [pc, #460]	@ (80050a8 <main+0x610>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	MYDRON.Thrust.Old_Speed_4 = 0;
 8004ee2:	4b71      	ldr	r3, [pc, #452]	@ (80050a8 <main+0x610>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
	MYDRON.Thrust.Speed_1 = 0;
 8004eea:	4b6f      	ldr	r3, [pc, #444]	@ (80050a8 <main+0x610>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	MYDRON.Thrust.Speed_2 = 0;
 8004ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80050a8 <main+0x610>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	MYDRON.Thrust.Speed_3 = 0;
 8004efa:	4b6b      	ldr	r3, [pc, #428]	@ (80050a8 <main+0x610>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	MYDRON.Thrust.Speed_4 = 0;
 8004f02:	4b69      	ldr	r3, [pc, #420]	@ (80050a8 <main+0x610>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	MYDRON.Thrust.Thrust_Limit = 10000;
 8004f0a:	4b67      	ldr	r3, [pc, #412]	@ (80050a8 <main+0x610>)
 8004f0c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f10:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	MYDRON.Thrust.Values = 0;
 8004f14:	4964      	ldr	r1, [pc, #400]	@ (80050a8 <main+0x610>)
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	MYDRON.Thrust.Wanted = 0;
 8004f22:	4b61      	ldr	r3, [pc, #388]	@ (80050a8 <main+0x610>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	MYDRON.Status.Battery = DRON_BATTERY_OK;
 8004f2a:	4b5f      	ldr	r3, [pc, #380]	@ (80050a8 <main+0x610>)
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	f883 2155 	strb.w	r2, [r3, #341]	@ 0x155
	MYDRON.Status.Code = DRON_CODE_OK;
 8004f32:	4b5d      	ldr	r3, [pc, #372]	@ (80050a8 <main+0x610>)
 8004f34:	2205      	movs	r2, #5
 8004f36:	f883 2156 	strb.w	r2, [r3, #342]	@ 0x156
	MYDRON.Status.Connection = DRON_CONNECTED;
 8004f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80050a8 <main+0x610>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
	MYDRON.Status.Wobble = NO_WOBBLE;
 8004f42:	4b59      	ldr	r3, [pc, #356]	@ (80050a8 <main+0x610>)
 8004f44:	220e      	movs	r2, #14
 8004f46:	f883 2157 	strb.w	r2, [r3, #343]	@ 0x157
//  	PID_FAC_Yaw[2] = d_yawfactor;
//  	PID_FAC_Yaw[4] = 0;


  	//ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
  	Mag_Z = 0;
 8004f4a:	4b58      	ldr	r3, [pc, #352]	@ (80050ac <main+0x614>)
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8004f52:	4b57      	ldr	r3, [pc, #348]	@ (80050b0 <main+0x618>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	4b56      	ldr	r3, [pc, #344]	@ (80050b4 <main+0x61c>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8004f5e:	4b56      	ldr	r3, [pc, #344]	@ (80050b8 <main+0x620>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
//  	last_MYDRON.Yaw.Wanted_rx = 0;
//  	wanted_thrust = 0;
//  	thrust_limit = 10000;


  	FDP_D_Gain_AR = 0;
 8004f64:	4b55      	ldr	r3, [pc, #340]	@ (80050bc <main+0x624>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 8004f6a:	4b55      	ldr	r3, [pc, #340]	@ (80050c0 <main+0x628>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	801a      	strh	r2, [r3, #0]
//  	SPEED4 = min_speed;
//  	OLD_SPEED1 = min_speed;
//  	OLD_SPEED2 = min_speed;
//  	OLD_SPEED3 = min_speed;
//  	OLD_SPEED4 = min_speed;
  	commandready = 0;
 8004f70:	4b54      	ldr	r3, [pc, #336]	@ (80050c4 <main+0x62c>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8004f76:	4b54      	ldr	r3, [pc, #336]	@ (80050c8 <main+0x630>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8004f7c:	4b53      	ldr	r3, [pc, #332]	@ (80050cc <main+0x634>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8004f82:	4b53      	ldr	r3, [pc, #332]	@ (80050d0 <main+0x638>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8004f88:	4b52      	ldr	r3, [pc, #328]	@ (80050d4 <main+0x63c>)
 8004f8a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f8e:	601a      	str	r2, [r3, #0]
  	//MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
  	i = 0, loopnum = 0;
 8004f90:	4b51      	ldr	r3, [pc, #324]	@ (80050d8 <main+0x640>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	4b51      	ldr	r3, [pc, #324]	@ (80050dc <main+0x644>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
//  	MYDRON.Rool.Wanted_rx = 0;
//  	MYDRON.Yaw.Wanted_rx = 0;
//  	wanted_gz = 0 ;


  	data.ox = 0;
 8004f9c:	4b50      	ldr	r3, [pc, #320]	@ (80050e0 <main+0x648>)
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8004fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80050e0 <main+0x648>)
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8004fac:	4b4c      	ldr	r3, [pc, #304]	@ (80050e0 <main+0x648>)
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8004fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80050e0 <main+0x648>)
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8004fbc:	4b48      	ldr	r3, [pc, #288]	@ (80050e0 <main+0x648>)
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8004fc4:	4b46      	ldr	r3, [pc, #280]	@ (80050e0 <main+0x648>)
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	609a      	str	r2, [r3, #8]
//  	pitch_ar_error = 0;
//  	rool_ar_error = 0;
//  	yaw_ar_error = 0;


  	NRF24_inte = 0;
 8004fcc:	4b45      	ldr	r3, [pc, #276]	@ (80050e4 <main+0x64c>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8004fd2:	4a45      	ldr	r2, [pc, #276]	@ (80050e8 <main+0x650>)
 8004fd4:	f107 0308 	add.w	r3, r7, #8
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	8019      	strh	r1, [r3, #0]
 8004fde:	3302      	adds	r3, #2
 8004fe0:	0c12      	lsrs	r2, r2, #16
 8004fe2:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 8004fe4:	4a41      	ldr	r2, [pc, #260]	@ (80050ec <main+0x654>)
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	4611      	mov	r1, r2
 8004fec:	8019      	strh	r1, [r3, #0]
 8004fee:	3302      	adds	r3, #2
 8004ff0:	0c12      	lsrs	r2, r2, #16
 8004ff2:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ffa:	483d      	ldr	r0, [pc, #244]	@ (80050f0 <main+0x658>)
 8004ffc:	f008 fd24 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005000:	2201      	movs	r2, #1
 8005002:	2108      	movs	r1, #8
 8005004:	483b      	ldr	r0, [pc, #236]	@ (80050f4 <main+0x65c>)
 8005006:	f008 fd1f 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_7_1;
 800500a:	2201      	movs	r2, #1
 800500c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005010:	4837      	ldr	r0, [pc, #220]	@ (80050f0 <main+0x658>)
 8005012:	f008 fd19 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 8005016:	2201      	movs	r2, #1
 8005018:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800501c:	4836      	ldr	r0, [pc, #216]	@ (80050f8 <main+0x660>)
 800501e:	f008 fd13 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_G_1;
 8005022:	2201      	movs	r2, #1
 8005024:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005028:	4832      	ldr	r0, [pc, #200]	@ (80050f4 <main+0x65c>)
 800502a:	f008 fd0d 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_Y_1;
 800502e:	2201      	movs	r2, #1
 8005030:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005034:	4831      	ldr	r0, [pc, #196]	@ (80050fc <main+0x664>)
 8005036:	f008 fd07 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_R_1;
 800503a:	2201      	movs	r2, #1
 800503c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005040:	482e      	ldr	r0, [pc, #184]	@ (80050fc <main+0x664>)
 8005042:	f008 fd01 	bl	800da48 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8005046:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800504a:	f003 fbc1 	bl	80087d0 <HAL_Delay>
  	LED_G_0;
 800504e:	2200      	movs	r2, #0
 8005050:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005054:	4827      	ldr	r0, [pc, #156]	@ (80050f4 <main+0x65c>)
 8005056:	f008 fcf7 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_Y_0;
 800505a:	2200      	movs	r2, #0
 800505c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005060:	4826      	ldr	r0, [pc, #152]	@ (80050fc <main+0x664>)
 8005062:	f008 fcf1 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_R_0;
 8005066:	2200      	movs	r2, #0
 8005068:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800506c:	4823      	ldr	r0, [pc, #140]	@ (80050fc <main+0x664>)
 800506e:	f008 fceb 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_5_0;
 8005072:	2200      	movs	r2, #0
 8005074:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005078:	481d      	ldr	r0, [pc, #116]	@ (80050f0 <main+0x658>)
 800507a:	f008 fce5 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_6_0;
 800507e:	2200      	movs	r2, #0
 8005080:	2108      	movs	r1, #8
 8005082:	481c      	ldr	r0, [pc, #112]	@ (80050f4 <main+0x65c>)
 8005084:	f008 fce0 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_7_0;
 8005088:	2200      	movs	r2, #0
 800508a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800508e:	4818      	ldr	r0, [pc, #96]	@ (80050f0 <main+0x658>)
 8005090:	f008 fcda 	bl	800da48 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 8005094:	2200      	movs	r2, #0
 8005096:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800509a:	4817      	ldr	r0, [pc, #92]	@ (80050f8 <main+0x660>)
 800509c:	f008 fcd4 	bl	800da48 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	e036      	b.n	8005114 <main+0x67c>
 80050a6:	bf00      	nop
 80050a8:	00000188 	.word	0x00000188
 80050ac:	00000054 	.word	0x00000054
 80050b0:	00000074 	.word	0x00000074
 80050b4:	00000078 	.word	0x00000078
 80050b8:	00000080 	.word	0x00000080
 80050bc:	00004194 	.word	0x00004194
 80050c0:	00004196 	.word	0x00004196
 80050c4:	000041ba 	.word	0x000041ba
 80050c8:	000041bb 	.word	0x000041bb
 80050cc:	000041c0 	.word	0x000041c0
 80050d0:	000041c4 	.word	0x000041c4
 80050d4:	000041cc 	.word	0x000041cc
 80050d8:	000041d4 	.word	0x000041d4
 80050dc:	000041d8 	.word	0x000041d8
 80050e0:	00000084 	.word	0x00000084
 80050e4:	000041dd 	.word	0x000041dd
 80050e8:	0801e27c 	.word	0x0801e27c
 80050ec:	0801e280 	.word	0x0801e280
 80050f0:	58020000 	.word	0x58020000
 80050f4:	58021000 	.word	0x58021000
 80050f8:	58020c00 	.word	0x58020c00
 80050fc:	58020400 	.word	0x58020400
  		Old_Data_stack.olddata[i] = 0;
 8005100:	4aae      	ldr	r2, [pc, #696]	@ (80053bc <main+0x924>)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800511a:	dbf1      	blt.n	8005100 <main+0x668>
  	}
  	Old_Data_stack.start_pointer = 0;
 800511c:	4ba7      	ldr	r3, [pc, #668]	@ (80053bc <main+0x924>)
 800511e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005122:	2200      	movs	r2, #0
 8005124:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005128:	4ba4      	ldr	r3, [pc, #656]	@ (80053bc <main+0x924>)
 800512a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800512e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005132:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005136:	4ba2      	ldr	r3, [pc, #648]	@ (80053c0 <main+0x928>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 800513c:	48a1      	ldr	r0, [pc, #644]	@ (80053c4 <main+0x92c>)
 800513e:	f010 fcbd 	bl	8015abc <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 8005142:	2201      	movs	r2, #1
 8005144:	499e      	ldr	r1, [pc, #632]	@ (80053c0 <main+0x928>)
 8005146:	48a0      	ldr	r0, [pc, #640]	@ (80053c8 <main+0x930>)
 8005148:	f004 f894 	bl	8009274 <HAL_ADC_Start_DMA>
  	LED_R_1;
 800514c:	2201      	movs	r2, #1
 800514e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005152:	489e      	ldr	r0, [pc, #632]	@ (80053cc <main+0x934>)
 8005154:	f008 fc78 	bl	800da48 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 8005158:	bf00      	nop
 800515a:	4b99      	ldr	r3, [pc, #612]	@ (80053c0 <main+0x928>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0fb      	beq.n	800515a <main+0x6c2>

  	}
  	LED_R_0;
 8005162:	2200      	movs	r2, #0
 8005164:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005168:	4898      	ldr	r0, [pc, #608]	@ (80053cc <main+0x934>)
 800516a:	f008 fc6d 	bl	800da48 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 800516e:	f7fe fd83 	bl	8003c78 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005172:	2104      	movs	r1, #4
 8005174:	4896      	ldr	r0, [pc, #600]	@ (80053d0 <main+0x938>)
 8005176:	f010 fdfd 	bl	8015d74 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800517a:	2108      	movs	r1, #8
 800517c:	4894      	ldr	r0, [pc, #592]	@ (80053d0 <main+0x938>)
 800517e:	f010 fdf9 	bl	8015d74 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005182:	210c      	movs	r1, #12
 8005184:	4892      	ldr	r0, [pc, #584]	@ (80053d0 <main+0x938>)
 8005186:	f010 fdf5 	bl	8015d74 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800518a:	4b92      	ldr	r3, [pc, #584]	@ (80053d4 <main+0x93c>)
 800518c:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8005190:	b2db      	uxtb	r3, r3
 8005192:	4618      	mov	r0, r3
 8005194:	f001 fee4 	bl	8006f60 <RGB_LED_For_BAT>
  	if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT)
 8005198:	4b8e      	ldr	r3, [pc, #568]	@ (80053d4 <main+0x93c>)
 800519a:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 800519e:	2b07      	cmp	r3, #7
 80051a0:	d107      	bne.n	80051b2 <main+0x71a>
  	{
  		LED_R_1;
 80051a2:	2201      	movs	r2, #1
 80051a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051a8:	4888      	ldr	r0, [pc, #544]	@ (80053cc <main+0x934>)
 80051aa:	f008 fc4d 	bl	800da48 <HAL_GPIO_WritePin>
  		while(1){
 80051ae:	bf00      	nop
 80051b0:	e7fd      	b.n	80051ae <main+0x716>

  		}
  	}
  	if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 80051b2:	4b88      	ldr	r3, [pc, #544]	@ (80053d4 <main+0x93c>)
 80051b4:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	d107      	bne.n	80051cc <main+0x734>
  		LED_R_1;
 80051bc:	2201      	movs	r2, #1
 80051be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051c2:	4882      	ldr	r0, [pc, #520]	@ (80053cc <main+0x934>)
 80051c4:	f008 fc40 	bl	800da48 <HAL_GPIO_WritePin>

  		while(1){
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <main+0x730>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 80051cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051d0:	487e      	ldr	r0, [pc, #504]	@ (80053cc <main+0x934>)
 80051d2:	f008 fc21 	bl	800da18 <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	461a      	mov	r2, r3
 80051da:	4b7f      	ldr	r3, [pc, #508]	@ (80053d8 <main+0x940>)
 80051dc:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 80051de:	4b7e      	ldr	r3, [pc, #504]	@ (80053d8 <main+0x940>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d103      	bne.n	80051ee <main+0x756>
		SD_enable_Flag = 0;
 80051e6:	4b7c      	ldr	r3, [pc, #496]	@ (80053d8 <main+0x940>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	e002      	b.n	80051f4 <main+0x75c>
	}
	else{
		SD_enable_Flag = 1;
 80051ee:	4b7a      	ldr	r3, [pc, #488]	@ (80053d8 <main+0x940>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 80051f4:	4b78      	ldr	r3, [pc, #480]	@ (80053d8 <main+0x940>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d15f      	bne.n	80052bc <main+0x824>
		LED_uSD_1;
 80051fc:	2201      	movs	r2, #1
 80051fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005202:	4876      	ldr	r0, [pc, #472]	@ (80053dc <main+0x944>)
 8005204:	f008 fc20 	bl	800da48 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 8005208:	2201      	movs	r2, #1
 800520a:	4975      	ldr	r1, [pc, #468]	@ (80053e0 <main+0x948>)
 800520c:	4875      	ldr	r0, [pc, #468]	@ (80053e4 <main+0x94c>)
 800520e:	f017 fcdd 	bl	801cbcc <f_mount>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	4b74      	ldr	r3, [pc, #464]	@ (80053e8 <main+0x950>)
 8005218:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 800521a:	4874      	ldr	r0, [pc, #464]	@ (80053ec <main+0x954>)
 800521c:	f018 f920 	bl	801d460 <f_unlink>
 8005220:	4603      	mov	r3, r0
 8005222:	461a      	mov	r2, r3
 8005224:	4b70      	ldr	r3, [pc, #448]	@ (80053e8 <main+0x950>)
 8005226:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 8005228:	2201      	movs	r2, #1
 800522a:	496d      	ldr	r1, [pc, #436]	@ (80053e0 <main+0x948>)
 800522c:	486d      	ldr	r0, [pc, #436]	@ (80053e4 <main+0x94c>)
 800522e:	f017 fccd 	bl	801cbcc <f_mount>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	4b6c      	ldr	r3, [pc, #432]	@ (80053e8 <main+0x950>)
 8005238:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 800523a:	220a      	movs	r2, #10
 800523c:	496c      	ldr	r1, [pc, #432]	@ (80053f0 <main+0x958>)
 800523e:	486d      	ldr	r0, [pc, #436]	@ (80053f4 <main+0x95c>)
 8005240:	f017 fd0a 	bl	801cc58 <f_open>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4b67      	ldr	r3, [pc, #412]	@ (80053e8 <main+0x950>)
 800524a:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 800524c:	2200      	movs	r2, #0
 800524e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005252:	4862      	ldr	r0, [pc, #392]	@ (80053dc <main+0x944>)
 8005254:	f008 fbf8 	bl	800da48 <HAL_GPIO_WritePin>

		LED_uSD_1;
 8005258:	2201      	movs	r2, #1
 800525a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800525e:	485f      	ldr	r0, [pc, #380]	@ (80053dc <main+0x944>)
 8005260:	f008 fbf2 	bl	800da48 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	e007      	b.n	800527a <main+0x7e2>
			DataToSendBuffer[i] = 49;
 800526a:	4a63      	ldr	r2, [pc, #396]	@ (80053f8 <main+0x960>)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	4413      	add	r3, r2
 8005270:	2231      	movs	r2, #49	@ 0x31
 8005272:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	3301      	adds	r3, #1
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	4a5f      	ldr	r2, [pc, #380]	@ (80053fc <main+0x964>)
 800527e:	4293      	cmp	r3, r2
 8005280:	ddf3      	ble.n	800526a <main+0x7d2>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005282:	4b5f      	ldr	r3, [pc, #380]	@ (8005400 <main+0x968>)
 8005284:	2281      	movs	r2, #129	@ 0x81
 8005286:	495c      	ldr	r1, [pc, #368]	@ (80053f8 <main+0x960>)
 8005288:	485a      	ldr	r0, [pc, #360]	@ (80053f4 <main+0x95c>)
 800528a:	f017 fead 	bl	801cfe8 <f_write>
 800528e:	4603      	mov	r3, r0
 8005290:	461a      	mov	r2, r3
 8005292:	4b55      	ldr	r3, [pc, #340]	@ (80053e8 <main+0x950>)
 8005294:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005296:	4857      	ldr	r0, [pc, #348]	@ (80053f4 <main+0x95c>)
 8005298:	f018 f8b8 	bl	801d40c <f_close>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	4b51      	ldr	r3, [pc, #324]	@ (80053e8 <main+0x950>)
 80052a2:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 80052a4:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <main+0x950>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <main+0x818>
			NVIC_SystemReset();
 80052ac:	f7ff fbde 	bl	8004a6c <__NVIC_SystemReset>
			while(1){

			}
		}
		LED_uSD_0;
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052b6:	4849      	ldr	r0, [pc, #292]	@ (80053dc <main+0x944>)
 80052b8:	f008 fbc6 	bl	800da48 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 80052bc:	2201      	movs	r2, #1
 80052be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052c2:	4850      	ldr	r0, [pc, #320]	@ (8005404 <main+0x96c>)
 80052c4:	f008 fbc0 	bl	800da48 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80052c8:	484f      	ldr	r0, [pc, #316]	@ (8005408 <main+0x970>)
 80052ca:	f7fb ffe1 	bl	8001290 <MPU6050_INIT>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d107      	bne.n	80052e4 <main+0x84c>
			LED_R_1;
 80052d4:	2201      	movs	r2, #1
 80052d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052da:	483c      	ldr	r0, [pc, #240]	@ (80053cc <main+0x934>)
 80052dc:	f008 fbb4 	bl	800da48 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 80052e0:	f7ff fbc4 	bl	8004a6c <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 80052e4:	2201      	movs	r2, #1
 80052e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052ea:	4838      	ldr	r0, [pc, #224]	@ (80053cc <main+0x934>)
 80052ec:	f008 fbac 	bl	800da48 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION();
 80052f0:	f7fc f898 	bl	8001424 <MPU6050_CALIBRATION>
		LED_Y_0;
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052fa:	4834      	ldr	r0, [pc, #208]	@ (80053cc <main+0x934>)
 80052fc:	f008 fba4 	bl	800da48 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005300:	4841      	ldr	r0, [pc, #260]	@ (8005408 <main+0x970>)
 8005302:	f7fb f9e5 	bl	80006d0 <BMP180_init>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d107      	bne.n	800531c <main+0x884>
			LED_R_1;
 800530c:	2201      	movs	r2, #1
 800530e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005312:	482e      	ldr	r0, [pc, #184]	@ (80053cc <main+0x934>)
 8005314:	f008 fb98 	bl	800da48 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005318:	f7ff fba8 	bl	8004a6c <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 800531c:	2201      	movs	r2, #1
 800531e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005322:	482a      	ldr	r0, [pc, #168]	@ (80053cc <main+0x934>)
 8005324:	f008 fb90 	bl	800da48 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&BMP180.startpres);
 8005328:	4838      	ldr	r0, [pc, #224]	@ (800540c <main+0x974>)
 800532a:	f7fb fd37 	bl	8000d9c <BMP180_CALIBRATION>
		LED_Y_0;
 800532e:	2200      	movs	r2, #0
 8005330:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005334:	4825      	ldr	r0, [pc, #148]	@ (80053cc <main+0x934>)
 8005336:	f008 fb87 	bl	800da48 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 800533a:	4833      	ldr	r0, [pc, #204]	@ (8005408 <main+0x970>)
 800533c:	f7fb fe64 	bl	8001008 <HMC5883L_Init>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d107      	bne.n	8005356 <main+0x8be>
			LED_R_1;
 8005346:	2201      	movs	r2, #1
 8005348:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800534c:	481f      	ldr	r0, [pc, #124]	@ (80053cc <main+0x934>)
 800534e:	f008 fb7b 	bl	800da48 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8005352:	f7ff fb8b 	bl	8004a6c <__NVIC_SystemReset>
			while(1){
			}
		}
		LED_Y_1;
 8005356:	2201      	movs	r2, #1
 8005358:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800535c:	481b      	ldr	r0, [pc, #108]	@ (80053cc <main+0x934>)
 800535e:	f008 fb73 	bl	800da48 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005362:	f7fb ff5f 	bl	8001224 <HMC5883L_Calibration>
 8005366:	4603      	mov	r3, r0
 8005368:	461a      	mov	r2, r3
 800536a:	4b29      	ldr	r3, [pc, #164]	@ (8005410 <main+0x978>)
 800536c:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 800536e:	2200      	movs	r2, #0
 8005370:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005374:	4815      	ldr	r0, [pc, #84]	@ (80053cc <main+0x934>)
 8005376:	f008 fb67 	bl	800da48 <HAL_GPIO_WritePin>

		LED_5_0;
 800537a:	2200      	movs	r2, #0
 800537c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005380:	4820      	ldr	r0, [pc, #128]	@ (8005404 <main+0x96c>)
 8005382:	f008 fb61 	bl	800da48 <HAL_GPIO_WritePin>
//		MYDRON.YAW = 0;



	/////////////////////////////// nRF24
		LED_6_1;
 8005386:	2201      	movs	r2, #1
 8005388:	2108      	movs	r1, #8
 800538a:	4822      	ldr	r0, [pc, #136]	@ (8005414 <main+0x97c>)
 800538c:	f008 fb5c 	bl	800da48 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi1);
 8005390:	4821      	ldr	r0, [pc, #132]	@ (8005418 <main+0x980>)
 8005392:	f7fd f9b7 	bl	8002704 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005396:	f107 0308 	add.w	r3, r7, #8
 800539a:	4619      	mov	r1, r3
 800539c:	2000      	movs	r0, #0
 800539e:	f7fd f80e 	bl	80023be <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fd f843 	bl	8002430 <nRF24_SetTXAddress>
		nRF24_TX_Mode();
 80053aa:	f7fc fe29 	bl	8002000 <nRF24_TX_Mode>
		NRF24.NRF24_MODE = NRF24_Tx_Mode;
 80053ae:	4b1b      	ldr	r3, [pc, #108]	@ (800541c <main+0x984>)
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80



		for(int i = 0; i < 32; i++){
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e03a      	b.n	8005432 <main+0x99a>
 80053bc:	000002e8 	.word	0x000002e8
 80053c0:	24000eb0 	.word	0x24000eb0
 80053c4:	24000464 	.word	0x24000464
 80053c8:	240000ac 	.word	0x240000ac
 80053cc:	58020400 	.word	0x58020400
 80053d0:	24000380 	.word	0x24000380
 80053d4:	00000188 	.word	0x00000188
 80053d8:	000041c8 	.word	0x000041c8
 80053dc:	58020c00 	.word	0x58020c00
 80053e0:	0801e260 	.word	0x0801e260
 80053e4:	24000eb4 	.word	0x24000eb4
 80053e8:	24001eec 	.word	0x24001eec
 80053ec:	0801e264 	.word	0x0801e264
 80053f0:	0801e270 	.word	0x0801e270
 80053f4:	24001ef0 	.word	0x24001ef0
 80053f8:	24002f28 	.word	0x24002f28
 80053fc:	0001f7e7 	.word	0x0001f7e7
 8005400:	24002f24 	.word	0x24002f24
 8005404:	58020000 	.word	0x58020000
 8005408:	24000198 	.word	0x24000198
 800540c:	000000f0 	.word	0x000000f0
 8005410:	00000068 	.word	0x00000068
 8005414:	58021000 	.word	0x58021000
 8005418:	240001ec 	.word	0x240001ec
 800541c:	000000fc 	.word	0x000000fc
			NRF24.Txcode[i] = 0;
 8005420:	4ab3      	ldr	r2, [pc, #716]	@ (80056f0 <main+0xc58>)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4413      	add	r3, r2
 8005426:	3360      	adds	r3, #96	@ 0x60
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	3301      	adds	r3, #1
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b1f      	cmp	r3, #31
 8005436:	ddf3      	ble.n	8005420 <main+0x988>
		}
		NRF24.Txcode[22] = 'd';
 8005438:	4bad      	ldr	r3, [pc, #692]	@ (80056f0 <main+0xc58>)
 800543a:	2264      	movs	r2, #100	@ 0x64
 800543c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
		NRF24.Txcode[23] = 'r';
 8005440:	4bab      	ldr	r3, [pc, #684]	@ (80056f0 <main+0xc58>)
 8005442:	2272      	movs	r2, #114	@ 0x72
 8005444:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
		NRF24.Txcode[24] = 'o';
 8005448:	4ba9      	ldr	r3, [pc, #676]	@ (80056f0 <main+0xc58>)
 800544a:	226f      	movs	r2, #111	@ 0x6f
 800544c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
		NRF24.Txcode[25] = 'n';
 8005450:	4ba7      	ldr	r3, [pc, #668]	@ (80056f0 <main+0xc58>)
 8005452:	226e      	movs	r2, #110	@ 0x6e
 8005454:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
		NRF24.Txcode[26] = '2';
 8005458:	4ba5      	ldr	r3, [pc, #660]	@ (80056f0 <main+0xc58>)
 800545a:	2232      	movs	r2, #50	@ 0x32
 800545c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
		NRF24.Txcode[27] = 'c';
 8005460:	4ba3      	ldr	r3, [pc, #652]	@ (80056f0 <main+0xc58>)
 8005462:	2263      	movs	r2, #99	@ 0x63
 8005464:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
		NRF24.Txcode[28] = '1';
 8005468:	4ba1      	ldr	r3, [pc, #644]	@ (80056f0 <main+0xc58>)
 800546a:	2231      	movs	r2, #49	@ 0x31
 800546c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		NRF24.Txcode[29] = 'z';
 8005470:	4b9f      	ldr	r3, [pc, #636]	@ (80056f0 <main+0xc58>)
 8005472:	227a      	movs	r2, #122	@ 0x7a
 8005474:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
		NRF24.Txcode[30] = 'a';
 8005478:	4b9d      	ldr	r3, [pc, #628]	@ (80056f0 <main+0xc58>)
 800547a:	2261      	movs	r2, #97	@ 0x61
 800547c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
		NRF24.Txcode[31] = '7';
 8005480:	4b9b      	ldr	r3, [pc, #620]	@ (80056f0 <main+0xc58>)
 8005482:	2237      	movs	r2, #55	@ 0x37
 8005484:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f



		nRF24_WriteTXPayload(NRF24.Txcode);
 8005488:	489a      	ldr	r0, [pc, #616]	@ (80056f4 <main+0xc5c>)
 800548a:	f7fd f881 	bl	8002590 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 800548e:	f7fd f8a1 	bl	80025d4 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005492:	f7fc fd7f 	bl	8001f94 <nRF24_RX_Mode>
		NRF24.NRF24_MODE = NRF24_Rx_Mode;
 8005496:	4b96      	ldr	r3, [pc, #600]	@ (80056f0 <main+0xc58>)
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

		uint8_t cunter = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80054a2:	e022      	b.n	80054ea <main+0xa52>
			LED_G_1;
 80054a4:	2201      	movs	r2, #1
 80054a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054aa:	4893      	ldr	r0, [pc, #588]	@ (80056f8 <main+0xc60>)
 80054ac:	f008 facc 	bl	800da48 <HAL_GPIO_WritePin>
			LED_Y_1;
 80054b0:	2201      	movs	r2, #1
 80054b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80054b6:	4891      	ldr	r0, [pc, #580]	@ (80056fc <main+0xc64>)
 80054b8:	f008 fac6 	bl	800da48 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80054bc:	2001      	movs	r0, #1
 80054be:	f003 f987 	bl	80087d0 <HAL_Delay>
			LED_G_0;
 80054c2:	2200      	movs	r2, #0
 80054c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054c8:	488b      	ldr	r0, [pc, #556]	@ (80056f8 <main+0xc60>)
 80054ca:	f008 fabd 	bl	800da48 <HAL_GPIO_WritePin>
			LED_Y_0;
 80054ce:	2200      	movs	r2, #0
 80054d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80054d4:	4889      	ldr	r0, [pc, #548]	@ (80056fc <main+0xc64>)
 80054d6:	f008 fab7 	bl	800da48 <HAL_GPIO_WritePin>

			cunter++;
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	3301      	adds	r3, #1
 80054de:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 80054e0:	7cfb      	ldrb	r3, [r7, #19]
 80054e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80054e4:	d101      	bne.n	80054ea <main+0xa52>
				NVIC_SystemReset();
 80054e6:	f7ff fac1 	bl	8004a6c <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80054ea:	2000      	movs	r0, #0
 80054ec:	f7fd f8ea 	bl	80026c4 <nRF24_IsBitSetInFifoStatus>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d0d6      	beq.n	80054a4 <main+0xa0c>
			}
		}

		while(NRF24_inte != 1){
 80054f6:	bf00      	nop
 80054f8:	4b81      	ldr	r3, [pc, #516]	@ (8005700 <main+0xc68>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d1fb      	bne.n	80054f8 <main+0xa60>

		}
		nRF24_ReadRXPaylaod(NRF24.RxData);
 8005500:	487b      	ldr	r0, [pc, #492]	@ (80056f0 <main+0xc58>)
 8005502:	f7fd f88f 	bl	8002624 <nRF24_ReadRXPaylaod>
		STARTUP = 0;
 8005506:	4b7f      	ldr	r3, [pc, #508]	@ (8005704 <main+0xc6c>)
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
		LED_6_0;
 800550c:	2200      	movs	r2, #0
 800550e:	2108      	movs	r1, #8
 8005510:	4879      	ldr	r0, [pc, #484]	@ (80056f8 <main+0xc60>)
 8005512:	f008 fa99 	bl	800da48 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005516:	230c      	movs	r3, #12
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e00c      	b.n	8005536 <main+0xa9e>
			NRF24.Rxcode[i] = NRF24.RxData[i];
 800551c:	4a74      	ldr	r2, [pc, #464]	@ (80056f0 <main+0xc58>)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	7819      	ldrb	r1, [r3, #0]
 8005524:	4a72      	ldr	r2, [pc, #456]	@ (80056f0 <main+0xc58>)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	3340      	adds	r3, #64	@ 0x40
 800552c:	460a      	mov	r2, r1
 800552e:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b15      	cmp	r3, #21
 800553a:	ddef      	ble.n	800551c <main+0xa84>
		}
	///////////////////////////////////////////////////////////////////////
		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 800553c:	4872      	ldr	r0, [pc, #456]	@ (8005708 <main+0xc70>)
 800553e:	f010 fb3b 	bl	8015bb8 <HAL_TIM_Base_Start_IT>

		ESC_INT(&htim3);
 8005542:	4872      	ldr	r0, [pc, #456]	@ (800570c <main+0xc74>)
 8005544:	f7fb fd16 	bl	8000f74 <ESC_INT>

		LED_7_1;
 8005548:	2201      	movs	r2, #1
 800554a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800554e:	4870      	ldr	r0, [pc, #448]	@ (8005710 <main+0xc78>)
 8005550:	f008 fa7a 	bl	800da48 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005554:	2201      	movs	r2, #1
 8005556:	496f      	ldr	r1, [pc, #444]	@ (8005714 <main+0xc7c>)
 8005558:	486f      	ldr	r0, [pc, #444]	@ (8005718 <main+0xc80>)
 800555a:	f012 f989 	bl	8017870 <HAL_UART_Receive_IT>
		LED_7_0;
 800555e:	2200      	movs	r2, #0
 8005560:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005564:	486a      	ldr	r0, [pc, #424]	@ (8005710 <main+0xc78>)
 8005566:	f008 fa6f 	bl	800da48 <HAL_GPIO_WritePin>

//		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms

	  	RGB_LED_For_BAT(MYDRON.batterysize);
 800556a:	4b6c      	ldr	r3, [pc, #432]	@ (800571c <main+0xc84>)
 800556c:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8005570:	b2db      	uxtb	r3, r3
 8005572:	4618      	mov	r0, r3
 8005574:	f001 fcf4 	bl	8006f60 <RGB_LED_For_BAT>

	  	if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT)
 8005578:	4b68      	ldr	r3, [pc, #416]	@ (800571c <main+0xc84>)
 800557a:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 800557e:	2b07      	cmp	r3, #7
 8005580:	d107      	bne.n	8005592 <main+0xafa>
	  	{
	  		LED_R_1;
 8005582:	2201      	movs	r2, #1
 8005584:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005588:	485c      	ldr	r0, [pc, #368]	@ (80056fc <main+0xc64>)
 800558a:	f008 fa5d 	bl	800da48 <HAL_GPIO_WritePin>
	  		while(1){
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <main+0xaf6>

	  		}
	  	}

	  	if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005592:	4b62      	ldr	r3, [pc, #392]	@ (800571c <main+0xc84>)
 8005594:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8005598:	2b09      	cmp	r3, #9
 800559a:	d107      	bne.n	80055ac <main+0xb14>
	  		LED_R_1;
 800559c:	2201      	movs	r2, #1
 800559e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055a2:	4856      	ldr	r0, [pc, #344]	@ (80056fc <main+0xc64>)
 80055a4:	f008 fa50 	bl	800da48 <HAL_GPIO_WritePin>
	  		while(1){
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <main+0xb10>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT){
 80055ac:	4b5b      	ldr	r3, [pc, #364]	@ (800571c <main+0xc84>)
 80055ae:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80055b2:	2b07      	cmp	r3, #7
 80055b4:	d10c      	bne.n	80055d0 <main+0xb38>
	  			LED_R_1;
 80055b6:	2201      	movs	r2, #1
 80055b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055bc:	484f      	ldr	r0, [pc, #316]	@ (80056fc <main+0xc64>)
 80055be:	f008 fa43 	bl	800da48 <HAL_GPIO_WritePin>
	  			MYDRON.Thrust.Thrust_Limit = MYDRON.Thrust.Now;
 80055c2:	4b56      	ldr	r3, [pc, #344]	@ (800571c <main+0xc84>)
 80055c4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80055c8:	b21a      	sxth	r2, r3
 80055ca:	4b54      	ldr	r3, [pc, #336]	@ (800571c <main+0xc84>)
 80055cc:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	  		}
	  		if(MYDRON.Status.Battery == DRON_BATTERY_OK){
 80055d0:	4b52      	ldr	r3, [pc, #328]	@ (800571c <main+0xc84>)
 80055d2:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d104      	bne.n	80055e4 <main+0xb4c>
	  			MYDRON.Thrust.Thrust_Limit = 10000;
 80055da:	4b50      	ldr	r3, [pc, #320]	@ (800571c <main+0xc84>)
 80055dc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80055e0:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	  		}
	  		if(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 80055e4:	4b4d      	ldr	r3, [pc, #308]	@ (800571c <main+0xc84>)
 80055e6:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80055ea:	2b09      	cmp	r3, #9
 80055ec:	d119      	bne.n	8005622 <main+0xb8a>
	  			ESC_POWER_1;
 80055ee:	2201      	movs	r2, #1
 80055f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055f4:	484a      	ldr	r0, [pc, #296]	@ (8005720 <main+0xc88>)
 80055f6:	f008 fa27 	bl	800da48 <HAL_GPIO_WritePin>
	  			LED_R_1;
 80055fa:	2201      	movs	r2, #1
 80055fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005600:	483e      	ldr	r0, [pc, #248]	@ (80056fc <main+0xc64>)
 8005602:	f008 fa21 	bl	800da48 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005606:	4847      	ldr	r0, [pc, #284]	@ (8005724 <main+0xc8c>)
 8005608:	f017 ff00 	bl	801d40c <f_close>
	  			while(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 800560c:	e004      	b.n	8005618 <main+0xb80>
	  				HAL_Delay(10);
 800560e:	200a      	movs	r0, #10
 8005610:	f003 f8de 	bl	80087d0 <HAL_Delay>
	  				Get_batteryvalue();
 8005614:	f7fe fb30 	bl	8003c78 <Get_batteryvalue>
	  			while(MYDRON.Status.Battery == DRON_BATTERY_CRIT_VAL){
 8005618:	4b40      	ldr	r3, [pc, #256]	@ (800571c <main+0xc84>)
 800561a:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 800561e:	2b09      	cmp	r3, #9
 8005620:	d0f5      	beq.n	800560e <main+0xb76>
	  			}
	  		}

	  		if(commandready == 1){
 8005622:	4b41      	ldr	r3, [pc, #260]	@ (8005728 <main+0xc90>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d111      	bne.n	800564e <main+0xbb6>
	  			LED_7_1;
 800562a:	2201      	movs	r2, #1
 800562c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005630:	4837      	ldr	r0, [pc, #220]	@ (8005710 <main+0xc78>)
 8005632:	f008 fa09 	bl	800da48 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005636:	f7fd f8cf 	bl	80027d8 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 800563a:	493c      	ldr	r1, [pc, #240]	@ (800572c <main+0xc94>)
 800563c:	483c      	ldr	r0, [pc, #240]	@ (8005730 <main+0xc98>)
 800563e:	f7fd f919 	bl	8002874 <executecommand>
	  			LED_7_0;
 8005642:	2200      	movs	r2, #0
 8005644:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005648:	4831      	ldr	r0, [pc, #196]	@ (8005710 <main+0xc78>)
 800564a:	f008 f9fd 	bl	800da48 <HAL_GPIO_WritePin>
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 800564e:	4b39      	ldr	r3, [pc, #228]	@ (8005734 <main+0xc9c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b01      	cmp	r3, #1
 8005654:	f040 8085 	bne.w	8005762 <main+0xcca>
 8005658:	4b37      	ldr	r3, [pc, #220]	@ (8005738 <main+0xca0>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f040 8080 	bne.w	8005762 <main+0xcca>
 8005662:	4b36      	ldr	r3, [pc, #216]	@ (800573c <main+0xca4>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d17b      	bne.n	8005762 <main+0xcca>
	  			TIM_inte_SD = 0;
 800566a:	4b32      	ldr	r3, [pc, #200]	@ (8005734 <main+0xc9c>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005670:	4b33      	ldr	r3, [pc, #204]	@ (8005740 <main+0xca8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fe09 	bl	800728c <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 800567a:	4b31      	ldr	r3, [pc, #196]	@ (8005740 <main+0xca8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005682:	4293      	cmp	r3, r2
 8005684:	d12b      	bne.n	80056de <main+0xc46>
	  				SD_In_Use = 1;
 8005686:	4b2f      	ldr	r3, [pc, #188]	@ (8005744 <main+0xcac>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 800568c:	2201      	movs	r2, #1
 800568e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005692:	482d      	ldr	r0, [pc, #180]	@ (8005748 <main+0xcb0>)
 8005694:	f008 f9d8 	bl	800da48 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005698:	2232      	movs	r2, #50	@ 0x32
 800569a:	492c      	ldr	r1, [pc, #176]	@ (800574c <main+0xcb4>)
 800569c:	4821      	ldr	r0, [pc, #132]	@ (8005724 <main+0xc8c>)
 800569e:	f017 fadb 	bl	801cc58 <f_open>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	4b24      	ldr	r3, [pc, #144]	@ (8005738 <main+0xca0>)
 80056a8:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 80056aa:	4b29      	ldr	r3, [pc, #164]	@ (8005750 <main+0xcb8>)
 80056ac:	4a29      	ldr	r2, [pc, #164]	@ (8005754 <main+0xcbc>)
 80056ae:	492a      	ldr	r1, [pc, #168]	@ (8005758 <main+0xcc0>)
 80056b0:	481c      	ldr	r0, [pc, #112]	@ (8005724 <main+0xc8c>)
 80056b2:	f017 fc99 	bl	801cfe8 <f_write>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005738 <main+0xca0>)
 80056bc:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 80056be:	4819      	ldr	r0, [pc, #100]	@ (8005724 <main+0xc8c>)
 80056c0:	f017 fea4 	bl	801d40c <f_close>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <main+0xca0>)
 80056ca:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 80056cc:	2200      	movs	r2, #0
 80056ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056d2:	481d      	ldr	r0, [pc, #116]	@ (8005748 <main+0xcb0>)
 80056d4:	f008 f9b8 	bl	800da48 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 80056d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005744 <main+0xcac>)
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 80056de:	4b18      	ldr	r3, [pc, #96]	@ (8005740 <main+0xca8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056e6:	d239      	bcs.n	800575c <main+0xcc4>
 80056e8:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <main+0xca8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	e036      	b.n	800575e <main+0xcc6>
 80056f0:	000000fc 	.word	0x000000fc
 80056f4:	0000015c 	.word	0x0000015c
 80056f8:	58021000 	.word	0x58021000
 80056fc:	58020400 	.word	0x58020400
 8005700:	000041dd 	.word	0x000041dd
 8005704:	0000007c 	.word	0x0000007c
 8005708:	240003cc 	.word	0x240003cc
 800570c:	24000418 	.word	0x24000418
 8005710:	58020000 	.word	0x58020000
 8005714:	000041bc 	.word	0x000041bc
 8005718:	240004b0 	.word	0x240004b0
 800571c:	00000188 	.word	0x00000188
 8005720:	58021800 	.word	0x58021800
 8005724:	24001ef0 	.word	0x24001ef0
 8005728:	000041ba 	.word	0x000041ba
 800572c:	0000419c 	.word	0x0000419c
 8005730:	000041ac 	.word	0x000041ac
 8005734:	00000074 	.word	0x00000074
 8005738:	24001eec 	.word	0x24001eec
 800573c:	000041c8 	.word	0x000041c8
 8005740:	000041c0 	.word	0x000041c0
 8005744:	000041c4 	.word	0x000041c4
 8005748:	58020c00 	.word	0x58020c00
 800574c:	0801e270 	.word	0x0801e270
 8005750:	24002f24 	.word	0x24002f24
 8005754:	0001f7e8 	.word	0x0001f7e8
 8005758:	24002f28 	.word	0x24002f28
 800575c:	2300      	movs	r3, #0
 800575e:	4a45      	ldr	r2, [pc, #276]	@ (8005874 <main+0xddc>)
 8005760:	6013      	str	r3, [r2, #0]
	  		}


			if(i == 0){
 8005762:	4b45      	ldr	r3, [pc, #276]	@ (8005878 <main+0xde0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10d      	bne.n	8005786 <main+0xcee>
				LED_5_1;
 800576a:	2201      	movs	r2, #1
 800576c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005770:	4842      	ldr	r0, [pc, #264]	@ (800587c <main+0xde4>)
 8005772:	f008 f969 	bl	800da48 <HAL_GPIO_WritePin>
				BMP180_start_measurment_temp_IT();
 8005776:	f7fb f8df 	bl	8000938 <BMP180_start_measurment_temp_IT>
				LED_5_0;
 800577a:	2200      	movs	r2, #0
 800577c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005780:	483e      	ldr	r0, [pc, #248]	@ (800587c <main+0xde4>)
 8005782:	f008 f961 	bl	800da48 <HAL_GPIO_WritePin>
			}
			if(i == 5){
 8005786:	4b3c      	ldr	r3, [pc, #240]	@ (8005878 <main+0xde0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b05      	cmp	r3, #5
 800578c:	d10d      	bne.n	80057aa <main+0xd12>
				LED_5_1;
 800578e:	2201      	movs	r2, #1
 8005790:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005794:	4839      	ldr	r0, [pc, #228]	@ (800587c <main+0xde4>)
 8005796:	f008 f957 	bl	800da48 <HAL_GPIO_WritePin>
				BMP180_READ_temp_IT();
 800579a:	f7fb f81b 	bl	80007d4 <BMP180_READ_temp_IT>
				LED_5_0;
 800579e:	2200      	movs	r2, #0
 80057a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057a4:	4835      	ldr	r0, [pc, #212]	@ (800587c <main+0xde4>)
 80057a6:	f008 f94f 	bl	800da48 <HAL_GPIO_WritePin>
			}
			if(BMP180.Timer == 0 && BMP180.BMP180_IRQ == 3){
 80057aa:	4b35      	ldr	r3, [pc, #212]	@ (8005880 <main+0xde8>)
 80057ac:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11a      	bne.n	80057ea <main+0xd52>
 80057b4:	4b32      	ldr	r3, [pc, #200]	@ (8005880 <main+0xde8>)
 80057b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d115      	bne.n	80057ea <main+0xd52>
				LED_5_1;
 80057be:	2201      	movs	r2, #1
 80057c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057c4:	482d      	ldr	r0, [pc, #180]	@ (800587c <main+0xde4>)
 80057c6:	f008 f93f 	bl	800da48 <HAL_GPIO_WritePin>
				BMP180_start_measurment_pres_IT();
 80057ca:	f7fb f899 	bl	8000900 <BMP180_start_measurment_pres_IT>
				LED_5_0;
 80057ce:	2200      	movs	r2, #0
 80057d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057d4:	4829      	ldr	r0, [pc, #164]	@ (800587c <main+0xde4>)
 80057d6:	f008 f937 	bl	800da48 <HAL_GPIO_WritePin>
				BMP180.BMP180_IRQ = 0;
 80057da:	4b29      	ldr	r3, [pc, #164]	@ (8005880 <main+0xde8>)
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
				BMP180.Timer = 8;
 80057e2:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <main+0xde8>)
 80057e4:	2208      	movs	r2, #8
 80057e6:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			}
			if(BMP180.Timer == 0 && BMP180.I2C_Tx_IRQ == 2){
 80057ea:	4b25      	ldr	r3, [pc, #148]	@ (8005880 <main+0xde8>)
 80057ec:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d112      	bne.n	800581a <main+0xd82>
 80057f4:	4b22      	ldr	r3, [pc, #136]	@ (8005880 <main+0xde8>)
 80057f6:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d10d      	bne.n	800581a <main+0xd82>
				LED_5_1;
 80057fe:	2201      	movs	r2, #1
 8005800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005804:	481d      	ldr	r0, [pc, #116]	@ (800587c <main+0xde4>)
 8005806:	f008 f91f 	bl	800da48 <HAL_GPIO_WritePin>
				BMP180_READ_pres_IT();
 800580a:	f7fa ffff 	bl	800080c <BMP180_READ_pres_IT>
				LED_5_0;
 800580e:	2200      	movs	r2, #0
 8005810:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005814:	4819      	ldr	r0, [pc, #100]	@ (800587c <main+0xde4>)
 8005816:	f008 f917 	bl	800da48 <HAL_GPIO_WritePin>
			}


	  		if(MYDRON.Status.Connection == DRON_DISCONNECTED){
 800581a:	4b1a      	ldr	r3, [pc, #104]	@ (8005884 <main+0xdec>)
 800581c:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005820:	2b02      	cmp	r3, #2
 8005822:	d118      	bne.n	8005856 <main+0xdbe>
	  			if(NRF24.Step == 0){
 8005824:	4b18      	ldr	r3, [pc, #96]	@ (8005888 <main+0xdf0>)
 8005826:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <main+0xdac>
	  				NRF24.Step = 2;
 800582e:	4b16      	ldr	r3, [pc, #88]	@ (8005888 <main+0xdf0>)
 8005830:	2202      	movs	r2, #2
 8005832:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	  				NRF24.Status = NRF24_Ready;
 8005836:	4b14      	ldr	r3, [pc, #80]	@ (8005888 <main+0xdf0>)
 8005838:	2204      	movs	r2, #4
 800583a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	  				HAL_Delay(10);
 800583e:	200a      	movs	r0, #10
 8005840:	f002 ffc6 	bl	80087d0 <HAL_Delay>
	  			}
	  			if(NRF24.Step == 9){
 8005844:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <main+0xdf0>)
 8005846:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800584a:	2b09      	cmp	r3, #9
 800584c:	d103      	bne.n	8005856 <main+0xdbe>
	  				NRF24.Step = 0;
 800584e:	4b0e      	ldr	r3, [pc, #56]	@ (8005888 <main+0xdf0>)
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	  			}
	  		}
	  		if(TIM_inte == 1){
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <main+0xdf4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b01      	cmp	r3, #1
 800585c:	f47f aea6 	bne.w	80055ac <main+0xb14>
	  			LED_R_0;
 8005860:	2200      	movs	r2, #0
 8005862:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005866:	480a      	ldr	r0, [pc, #40]	@ (8005890 <main+0xdf8>)
 8005868:	f008 f8ee 	bl	800da48 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 800586c:	4b07      	ldr	r3, [pc, #28]	@ (800588c <main+0xdf4>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
	  if(MYDRON.Status.Battery == DRON_BATTERY_RUN_OUT){
 8005872:	e69b      	b.n	80055ac <main+0xb14>
 8005874:	000041c0 	.word	0x000041c0
 8005878:	000041d4 	.word	0x000041d4
 800587c:	58020000 	.word	0x58020000
 8005880:	0000009c 	.word	0x0000009c
 8005884:	00000188 	.word	0x00000188
 8005888:	000000fc 	.word	0x000000fc
 800588c:	00000078 	.word	0x00000078
 8005890:	58020400 	.word	0x58020400

08005894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b09c      	sub	sp, #112	@ 0x70
 8005898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800589a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800589e:	224c      	movs	r2, #76	@ 0x4c
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f017 ffaa 	bl	801d7fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058a8:	1d3b      	adds	r3, r7, #4
 80058aa:	2220      	movs	r2, #32
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f017 ffa4 	bl	801d7fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80058b4:	2002      	movs	r0, #2
 80058b6:	f00a fd6f 	bl	8010398 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80058ba:	2300      	movs	r3, #0
 80058bc:	603b      	str	r3, [r7, #0]
 80058be:	4b2d      	ldr	r3, [pc, #180]	@ (8005974 <SystemClock_Config+0xe0>)
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005974 <SystemClock_Config+0xe0>)
 80058c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80058c8:	6193      	str	r3, [r2, #24]
 80058ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005974 <SystemClock_Config+0xe0>)
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80058d6:	bf00      	nop
 80058d8:	4b26      	ldr	r3, [pc, #152]	@ (8005974 <SystemClock_Config+0xe0>)
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e4:	d1f8      	bne.n	80058d8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 80058e6:	2311      	movs	r3, #17
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80058f0:	2380      	movs	r3, #128	@ 0x80
 80058f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 80058f4:	2310      	movs	r3, #16
 80058f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058f8:	2302      	movs	r3, #2
 80058fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058fc:	2302      	movs	r3, #2
 80058fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005900:	2303      	movs	r3, #3
 8005902:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005904:	2344      	movs	r3, #68	@ 0x44
 8005906:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005908:	2301      	movs	r3, #1
 800590a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800590c:	2302      	movs	r3, #2
 800590e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005910:	2302      	movs	r3, #2
 8005912:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005914:	230c      	movs	r3, #12
 8005916:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005918:	2300      	movs	r3, #0
 800591a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800591c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005920:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005926:	4618      	mov	r0, r3
 8005928:	f00a fd70 	bl	801040c <HAL_RCC_OscConfig>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005932:	f001 ff91 	bl	8007858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005936:	233f      	movs	r3, #63	@ 0x3f
 8005938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800593a:	2303      	movs	r3, #3
 800593c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005942:	2308      	movs	r3, #8
 8005944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005946:	2340      	movs	r3, #64	@ 0x40
 8005948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800594a:	2340      	movs	r3, #64	@ 0x40
 800594c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800594e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005952:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005954:	2340      	movs	r3, #64	@ 0x40
 8005956:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	2103      	movs	r1, #3
 800595c:	4618      	mov	r0, r3
 800595e:	f00b f92f 	bl	8010bc0 <HAL_RCC_ClockConfig>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005968:	f001 ff76 	bl	8007858 <Error_Handler>
  }
}
 800596c:	bf00      	nop
 800596e:	3770      	adds	r7, #112	@ 0x70
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	58024800 	.word	0x58024800

08005978 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b0ae      	sub	sp, #184	@ 0xb8
 800597c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800597e:	463b      	mov	r3, r7
 8005980:	22b8      	movs	r2, #184	@ 0xb8
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f017 ff39 	bl	801d7fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 800598a:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005996:	2316      	movs	r3, #22
 8005998:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 800599a:	23c0      	movs	r3, #192	@ 0xc0
 800599c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800599e:	2303      	movs	r3, #3
 80059a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80059a2:	2302      	movs	r3, #2
 80059a4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80059a6:	2302      	movs	r3, #2
 80059a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80059ae:	2320      	movs	r3, #32
 80059b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80059b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059c2:	463b      	mov	r3, r7
 80059c4:	4618      	mov	r0, r3
 80059c6:	f00b fc87 	bl	80112d8 <HAL_RCCEx_PeriphCLKConfig>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80059d0:	f001 ff42 	bl	8007858 <Error_Handler>
  }
}
 80059d4:	bf00      	nop
 80059d6:	37b8      	adds	r7, #184	@ 0xb8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4aaf      	ldr	r2, [pc, #700]	@ (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	f040 81c3 	bne.w	8005d74 <HAL_TIM_PeriodElapsedCallback+0x398>
	{
		TIM_inte_SD = 1;
 80059ee:	4bae      	ldr	r3, [pc, #696]	@ (8005ca8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 80059f4:	4bad      	ldr	r3, [pc, #692]	@ (8005cac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 80059fa:	4bad      	ldr	r3, [pc, #692]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	4aab      	ldr	r2, [pc, #684]	@ (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005a02:	6013      	str	r3, [r2, #0]

		if(NRF24.Timer_1 == 0){
 8005a04:	4bab      	ldr	r3, [pc, #684]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a06:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f040 8094 	bne.w	8005b38 <HAL_TIM_PeriodElapsedCallback+0x15c>
			if(NRF24.Step == 2  && NRF24.Status == NRF24_Ready){
 8005a10:	4ba8      	ldr	r3, [pc, #672]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a12:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d11c      	bne.n	8005a54 <HAL_TIM_PeriodElapsedCallback+0x78>
 8005a1a:	4ba6      	ldr	r3, [pc, #664]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d117      	bne.n	8005a54 <HAL_TIM_PeriodElapsedCallback+0x78>
				LED_6_1;
 8005a24:	2201      	movs	r2, #1
 8005a26:	2108      	movs	r1, #8
 8005a28:	48a3      	ldr	r0, [pc, #652]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a2a:	f008 f80d 	bl	800da48 <HAL_GPIO_WritePin>
				nRF24_TX_Mode();
 8005a2e:	f7fc fae7 	bl	8002000 <nRF24_TX_Mode>
				LED_6_0;
 8005a32:	2200      	movs	r2, #0
 8005a34:	2108      	movs	r1, #8
 8005a36:	48a0      	ldr	r0, [pc, #640]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a38:	f008 f806 	bl	800da48 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 3
 8005a3c:	4b9d      	ldr	r3, [pc, #628]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a3e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a42:	3301      	adds	r3, #1
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	4b9b      	ldr	r3, [pc, #620]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a48:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				NRF24.Timer_1 = 1;
 8005a4c:	4b99      	ldr	r3, [pc, #612]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			}
			if(NRF24.Step == 3 && NRF24.Timer_1 == 0){
 8005a54:	4b97      	ldr	r3, [pc, #604]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a56:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d12d      	bne.n	8005aba <HAL_TIM_PeriodElapsedCallback+0xde>
 8005a5e:	4b95      	ldr	r3, [pc, #596]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a60:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d128      	bne.n	8005aba <HAL_TIM_PeriodElapsedCallback+0xde>
				NRF24.Status = NRF24_Ready;
 8005a68:	4b92      	ldr	r3, [pc, #584]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				NRF24.NRF24_MODE = NRF24_Tx_Mode;
 8005a70:	4b90      	ldr	r3, [pc, #576]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				NRF24.TxData[10] = (MYDRON.Status.Connection == DRON_DISCONNECTED) ? 1: 0;
 8005a78:	4b90      	ldr	r3, [pc, #576]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005a7a:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b8a      	ldr	r3, [pc, #552]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a8c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

				LED_6_1;
 8005a90:	2201      	movs	r2, #1
 8005a92:	2108      	movs	r1, #8
 8005a94:	4888      	ldr	r0, [pc, #544]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005a96:	f007 ffd7 	bl	800da48 <HAL_GPIO_WritePin>
				nRF24_WriteTXPayload_IT(NRF24.TxData);
 8005a9a:	4889      	ldr	r0, [pc, #548]	@ (8005cc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005a9c:	f7fc fd86 	bl	80025ac <nRF24_WriteTXPayload_IT>
				LED_6_0;
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2108      	movs	r1, #8
 8005aa4:	4884      	ldr	r0, [pc, #528]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005aa6:	f007 ffcf 	bl	800da48 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 4
 8005aaa:	4b82      	ldr	r3, [pc, #520]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005aac:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ab6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 5){
 8005aba:	4b7e      	ldr	r3, [pc, #504]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005abc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005ac0:	2b05      	cmp	r3, #5
 8005ac2:	d10c      	bne.n	8005ade <HAL_TIM_PeriodElapsedCallback+0x102>
				NRF24_CE_LOW;
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2140      	movs	r1, #64	@ 0x40
 8005ac8:	487e      	ldr	r0, [pc, #504]	@ (8005cc4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005aca:	f007 ffbd 	bl	800da48 <HAL_GPIO_WritePin>
				NRF24.Step++;//Step 6
 8005ace:	4b79      	ldr	r3, [pc, #484]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ad0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b76      	ldr	r3, [pc, #472]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ada:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			}
			if(NRF24.Step == 6){
 8005ade:	4b75      	ldr	r3, [pc, #468]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ae0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005ae4:	2b06      	cmp	r3, #6
 8005ae6:	d127      	bne.n	8005b38 <HAL_TIM_PeriodElapsedCallback+0x15c>
				LED_6_1;
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2108      	movs	r1, #8
 8005aec:	4872      	ldr	r0, [pc, #456]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005aee:	f007 ffab 	bl	800da48 <HAL_GPIO_WritePin>
				uint8_t status = nRF24_ReadStatus();
 8005af2:	f7fc fb10 	bl	8002116 <nRF24_ReadStatus>
 8005af6:	4603      	mov	r3, r0
 8005af8:	72fb      	strb	r3, [r7, #11]
				if(((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS)))){//nRF24_WaitTX()
 8005afa:	7afb      	ldrb	r3, [r7, #11]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <HAL_TIM_PeriodElapsedCallback+0x132>
 8005b04:	7afb      	ldrb	r3, [r7, #11]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00f      	beq.n	8005b2e <HAL_TIM_PeriodElapsedCallback+0x152>
					NRF24.Timer_2 = 1;
 8005b0e:	4b69      	ldr	r3, [pc, #420]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
					NRF24.Status = NRF24_Ready;
 8005b16:	4b67      	ldr	r3, [pc, #412]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b18:	2204      	movs	r2, #4
 8005b1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
					NRF24.Step++;//Step 7
 8005b1e:	4b65      	ldr	r3, [pc, #404]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b20:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b24:	3301      	adds	r3, #1
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	4b62      	ldr	r3, [pc, #392]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b2a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
				}
				LED_6_0;
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2108      	movs	r1, #8
 8005b32:	4861      	ldr	r0, [pc, #388]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b34:	f007 ff88 	bl	800da48 <HAL_GPIO_WritePin>
			}
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 7 && NRF24.Status == NRF24_Ready){
 8005b38:	4b5e      	ldr	r3, [pc, #376]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b3a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d121      	bne.n	8005b86 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8005b42:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b44:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b48:	2b07      	cmp	r3, #7
 8005b4a:	d11c      	bne.n	8005b86 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8005b4c:	4b59      	ldr	r3, [pc, #356]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d117      	bne.n	8005b86 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			LED_6_1;
 8005b56:	2201      	movs	r2, #1
 8005b58:	2108      	movs	r1, #8
 8005b5a:	4857      	ldr	r0, [pc, #348]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b5c:	f007 ff74 	bl	800da48 <HAL_GPIO_WritePin>
			nRF24_RX_Mode();
 8005b60:	f7fc fa18 	bl	8001f94 <nRF24_RX_Mode>
			LED_6_0;
 8005b64:	2200      	movs	r2, #0
 8005b66:	2108      	movs	r1, #8
 8005b68:	4853      	ldr	r0, [pc, #332]	@ (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005b6a:	f007 ff6d 	bl	800da48 <HAL_GPIO_WritePin>
			NRF24.Timer_2 = 1;
 8005b6e:	4b51      	ldr	r3, [pc, #324]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			NRF24.Step++;//Step 8
 8005b76:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b78:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	4b4c      	ldr	r3, [pc, #304]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b82:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}
		if(NRF24.Timer_2 == 0 && NRF24.Step == 8){
 8005b86:	4b4b      	ldr	r3, [pc, #300]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b88:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d110      	bne.n	8005bb2 <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8005b90:	4b48      	ldr	r3, [pc, #288]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b92:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d10b      	bne.n	8005bb2 <HAL_TIM_PeriodElapsedCallback+0x1d6>
			NRF24.Status = NRF24_Ready;
 8005b9a:	4b46      	ldr	r3, [pc, #280]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			NRF24.NRF24_MODE = NRF24_Rx_Mode;
 8005ba2:	4b44      	ldr	r3, [pc, #272]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24.Step = 0;
 8005baa:	4b42      	ldr	r3, [pc, #264]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		}


		if(i == 0){// na calosc 100ms
 8005bb2:	4b45      	ldr	r3, [pc, #276]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_TIM_PeriodElapsedCallback+0x1ec>


			RGB_LED_For_BAT(MYDRON.batterysize);
 8005bba:	4b40      	ldr	r3, [pc, #256]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005bbc:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f9cc 	bl	8006f60 <RGB_LED_For_BAT>
//			BMP180_READ_temp_IT();
//			LED_5_0;
//		}


		if(i == 36){
 8005bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b24      	cmp	r3, #36	@ 0x24
 8005bce:	d10d      	bne.n	8005bec <HAL_TIM_PeriodElapsedCallback+0x210>
			LED_5_1;
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bd6:	483d      	ldr	r0, [pc, #244]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005bd8:	f007 ff36 	bl	800da48 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005bdc:	f7fb fa94 	bl	8001108 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005be0:	2200      	movs	r2, #0
 8005be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005be6:	4839      	ldr	r0, [pc, #228]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005be8:	f007 ff2e 	bl	800da48 <HAL_GPIO_WritePin>
		}

		if(i == 40){//5
 8005bec:	4b36      	ldr	r3, [pc, #216]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b28      	cmp	r3, #40	@ 0x28
 8005bf2:	d140      	bne.n	8005c76 <HAL_TIM_PeriodElapsedCallback+0x29a>
			//BMP180_READ_pres_IT();
			BMP180.ampritude = BMP180.startpres - BMP180.pres;
 8005bf4:	4b36      	ldr	r3, [pc, #216]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005bf6:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8005bfa:	4b35      	ldr	r3, [pc, #212]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005bfc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8005c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c04:	4b32      	ldr	r3, [pc, #200]	@ (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005c06:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

			MYDRON.dronheight = (int16_t)BMP180_GET_height();
 8005c0a:	f7fb f90b 	bl	8000e24 <BMP180_GET_height>
 8005c0e:	eef0 7a40 	vmov.f32	s15, s0
 8005c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c16:	ee17 3a90 	vmov	r3, s15
 8005c1a:	b21a      	sxth	r2, r3
 8005c1c:	4b27      	ldr	r3, [pc, #156]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005c1e:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
			convert_value_to_array(MYDRON.dronheight, NRF24.TxData, 0, 3);
 8005c22:	4b26      	ldr	r3, [pc, #152]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005c24:	f9b3 015a 	ldrsh.w	r0, [r3, #346]	@ 0x15a
 8005c28:	2303      	movs	r3, #3
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4924      	ldr	r1, [pc, #144]	@ (8005cc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005c2e:	f001 f8b8 	bl	8006da2 <convert_value_to_array>

			Get_batteryvalue();
 8005c32:	f7fe f821 	bl	8003c78 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, NRF24.TxData, 3, 6);
 8005c36:	4b21      	ldr	r3, [pc, #132]	@ (8005cbc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005c38:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8005c3c:	b218      	sxth	r0, r3
 8005c3e:	2306      	movs	r3, #6
 8005c40:	2203      	movs	r2, #3
 8005c42:	491f      	ldr	r1, [pc, #124]	@ (8005cc0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005c44:	f001 f8ad 	bl	8006da2 <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	e010      	b.n	8005c70 <HAL_TIM_PeriodElapsedCallback+0x294>
				NRF24.TxData[22+i] = NRF24.Txcode[22+i];
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f103 0216 	add.w	r2, r3, #22
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3316      	adds	r3, #22
 8005c58:	4916      	ldr	r1, [pc, #88]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f892 1060 	ldrb.w	r1, [r2, #96]	@ 0x60
 8005c60:	4a14      	ldr	r2, [pc, #80]	@ (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005c62:	4413      	add	r3, r2
 8005c64:	460a      	mov	r2, r1
 8005c66:	f883 2020 	strb.w	r2, [r3, #32]
			for(int i = 0; i < 10; i++){
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b09      	cmp	r3, #9
 8005c74:	ddeb      	ble.n	8005c4e <HAL_TIM_PeriodElapsedCallback+0x272>
			}
		}


		LED_5_1;
 8005c76:	2201      	movs	r2, #1
 8005c78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c7c:	4813      	ldr	r0, [pc, #76]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005c7e:	f007 fee3 	bl	800da48 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005c82:	f7fb fd2f 	bl	80016e4 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005c86:	2200      	movs	r2, #0
 8005c88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c8c:	480f      	ldr	r0, [pc, #60]	@ (8005ccc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005c8e:	f007 fedb 	bl	800da48 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b64      	cmp	r3, #100	@ 0x64
 8005c98:	d01c      	beq.n	8005cd4 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8005c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	e019      	b.n	8005cd6 <HAL_TIM_PeriodElapsedCallback+0x2fa>
 8005ca2:	bf00      	nop
 8005ca4:	240003cc 	.word	0x240003cc
 8005ca8:	00000074 	.word	0x00000074
 8005cac:	00000078 	.word	0x00000078
 8005cb0:	00000080 	.word	0x00000080
 8005cb4:	000000fc 	.word	0x000000fc
 8005cb8:	58021000 	.word	0x58021000
 8005cbc:	00000188 	.word	0x00000188
 8005cc0:	0000011c 	.word	0x0000011c
 8005cc4:	58020400 	.word	0x58020400
 8005cc8:	000041d4 	.word	0x000041d4
 8005ccc:	58020000 	.word	0x58020000
 8005cd0:	0000009c 	.word	0x0000009c
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4a29      	ldr	r2, [pc, #164]	@ (8005d7c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8005cd8:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 8005cda:	4b29      	ldr	r3, [pc, #164]	@ (8005d80 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ce2:	d309      	bcc.n	8005cf8 <HAL_TIM_PeriodElapsedCallback+0x31c>
			LED_R_1;
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005cea:	4826      	ldr	r0, [pc, #152]	@ (8005d84 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8005cec:	f007 feac 	bl	800da48 <HAL_GPIO_WritePin>
			MYDRON.Status.Connection = DRON_DISCONNECTED;
 8005cf0:	4b25      	ldr	r3, [pc, #148]	@ (8005d88 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
		}
		if(MYDRON.Status.Connection == DRON_DISCONNECTED){
 8005cf8:	4b23      	ldr	r3, [pc, #140]	@ (8005d88 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005cfa:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d111      	bne.n	8005d26 <HAL_TIM_PeriodElapsedCallback+0x34a>
			MYDRON.Rool.Wanted = 0;
 8005d02:	4b21      	ldr	r3, [pc, #132]	@ (8005d88 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	639a      	str	r2, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = 0;
 8005d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8005d88 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	609a      	str	r2, [r3, #8]
			MYDRON.Yaw.Wanted = 0;
 8005d12:	4b1d      	ldr	r3, [pc, #116]	@ (8005d88 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	669a      	str	r2, [r3, #104]	@ 0x68
			MYDRON.Thrust.Wanted = DRON_SLOWFALING;
 8005d1a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005d1e:	b21a      	sxth	r2, r3
 8005d20:	4b19      	ldr	r3, [pc, #100]	@ (8005d88 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005d22:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		}
		(NRF24.Timer_1 != 0) ? NRF24.Timer_1--: 0;
 8005d26:	4b19      	ldr	r3, [pc, #100]	@ (8005d8c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d28:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_TIM_PeriodElapsedCallback+0x364>
 8005d30:	4b16      	ldr	r3, [pc, #88]	@ (8005d8c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d32:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d3c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		(NRF24.Timer_2 != 0) ? NRF24.Timer_2--: 0;
 8005d40:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d42:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_TIM_PeriodElapsedCallback+0x37e>
 8005d4a:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d4c:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005d56:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
		(BMP180.Timer != 0) ? BMP180.Timer--: 0;
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8005d5c:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_TIM_PeriodElapsedCallback+0x398>
 8005d64:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8005d66:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4b08      	ldr	r3, [pc, #32]	@ (8005d90 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8005d70:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	}
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	000041d4 	.word	0x000041d4
 8005d80:	00000080 	.word	0x00000080
 8005d84:	58020400 	.word	0x58020400
 8005d88:	00000188 	.word	0x00000188
 8005d8c:	000000fc 	.word	0x000000fc
 8005d90:	0000009c 	.word	0x0000009c

08005d94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005da4:	d11b      	bne.n	8005dde <HAL_GPIO_EXTI_Callback+0x4a>
	{
		NRF24_inte = 1;
 8005da6:	4b10      	ldr	r3, [pc, #64]	@ (8005de8 <HAL_GPIO_EXTI_Callback+0x54>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
		if(STARTUP == 0){
 8005dac:	4b0f      	ldr	r3, [pc, #60]	@ (8005dec <HAL_GPIO_EXTI_Callback+0x58>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d114      	bne.n	8005dde <HAL_GPIO_EXTI_Callback+0x4a>
			LED_6_1;
 8005db4:	2201      	movs	r2, #1
 8005db6:	2108      	movs	r1, #8
 8005db8:	480d      	ldr	r0, [pc, #52]	@ (8005df0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8005dba:	f007 fe45 	bl	800da48 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod_IT(NRF24.RxData);
 8005dbe:	480d      	ldr	r0, [pc, #52]	@ (8005df4 <HAL_GPIO_EXTI_Callback+0x60>)
 8005dc0:	f7fc fc4c 	bl	800265c <nRF24_ReadRXPaylaod_IT>
			NRF24.Step++;//step 1
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <HAL_GPIO_EXTI_Callback+0x60>)
 8005dc6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005dca:	3301      	adds	r3, #1
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	4b09      	ldr	r3, [pc, #36]	@ (8005df4 <HAL_GPIO_EXTI_Callback+0x60>)
 8005dd0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			LED_6_0;
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2108      	movs	r1, #8
 8005dd8:	4805      	ldr	r0, [pc, #20]	@ (8005df0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8005dda:	f007 fe35 	bl	800da48 <HAL_GPIO_WritePin>
		}
	}
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	000041dd 	.word	0x000041dd
 8005dec:	0000007c 	.word	0x0000007c
 8005df0:	58021000 	.word	0x58021000
 8005df4:	000000fc 	.word	0x000000fc

08005df8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8005e00:	4b24      	ldr	r3, [pc, #144]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	4b24      	ldr	r3, [pc, #144]	@ (8005e98 <HAL_UART_RxCpltCallback+0xa0>)
 8005e08:	7819      	ldrb	r1, [r3, #0]
 8005e0a:	4b24      	ldr	r3, [pc, #144]	@ (8005e9c <HAL_UART_RxCpltCallback+0xa4>)
 8005e0c:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 8005e0e:	4b21      	ldr	r3, [pc, #132]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	4b21      	ldr	r3, [pc, #132]	@ (8005e9c <HAL_UART_RxCpltCallback+0xa4>)
 8005e16:	5c9b      	ldrb	r3, [r3, r2]
 8005e18:	2b0d      	cmp	r3, #13
 8005e1a:	d11a      	bne.n	8005e52 <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8005e1c:	230a      	movs	r3, #10
 8005e1e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8005e20:	f107 010f 	add.w	r1, r7, #15
 8005e24:	2364      	movs	r3, #100	@ 0x64
 8005e26:	2201      	movs	r2, #1
 8005e28:	481d      	ldr	r0, [pc, #116]	@ (8005ea0 <HAL_UART_RxCpltCallback+0xa8>)
 8005e2a:	f011 fbff 	bl	801762c <HAL_UART_Transmit>
		Y = '\r';
 8005e2e:	230d      	movs	r3, #13
 8005e30:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8005e32:	f107 010f 	add.w	r1, r7, #15
 8005e36:	2364      	movs	r3, #100	@ 0x64
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4819      	ldr	r0, [pc, #100]	@ (8005ea0 <HAL_UART_RxCpltCallback+0xa8>)
 8005e3c:	f011 fbf6 	bl	801762c <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8005e40:	4b14      	ldr	r3, [pc, #80]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	4b15      	ldr	r3, [pc, #84]	@ (8005e9c <HAL_UART_RxCpltCallback+0xa4>)
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8005e4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ea4 <HAL_UART_RxCpltCallback+0xac>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	4b10      	ldr	r3, [pc, #64]	@ (8005e9c <HAL_UART_RxCpltCallback+0xa4>)
 8005e5a:	4413      	add	r3, r2
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	4619      	mov	r1, r3
 8005e60:	480f      	ldr	r0, [pc, #60]	@ (8005ea0 <HAL_UART_RxCpltCallback+0xa8>)
 8005e62:	f011 fc71 	bl	8017748 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005e66:	2201      	movs	r2, #1
 8005e68:	490b      	ldr	r1, [pc, #44]	@ (8005e98 <HAL_UART_RxCpltCallback+0xa0>)
 8005e6a:	480d      	ldr	r0, [pc, #52]	@ (8005ea0 <HAL_UART_RxCpltCallback+0xa8>)
 8005e6c:	f011 fd00 	bl	8017870 <HAL_UART_Receive_IT>
	command_ch_num++;
 8005e70:	4b08      	ldr	r3, [pc, #32]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e7a:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8005e7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <HAL_UART_RxCpltCallback+0xac>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8005e84:	4b03      	ldr	r3, [pc, #12]	@ (8005e94 <HAL_UART_RxCpltCallback+0x9c>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
	}
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	000041bb 	.word	0x000041bb
 8005e98:	000041bc 	.word	0x000041bc
 8005e9c:	000041b0 	.word	0x000041b0
 8005ea0:	240004b0 	.word	0x240004b0
 8005ea4:	000041ba 	.word	0x000041ba

08005ea8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
//	}
//	if(BMP180.I2C_Tx_IRQ == 2){
//		BMP180_READ_pres_IT();
//		BMP180.I2C_Tx_IRQ = 0;
//	}
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	0000      	movs	r0, r0
	...

08005ec0 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b0d7      	sub	sp, #348	@ 0x15c
 8005ec4:	af54      	add	r7, sp, #336	@ 0x150
 8005ec6:	6078      	str	r0, [r7, #4]
	if(MPU6050.MPU6050_IRQ == 1){
 8005ec8:	4bbd      	ldr	r3, [pc, #756]	@ (80061c0 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005eca:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	f040 84d3 	bne.w	800687a <HAL_I2C_MemRxCpltCallback+0x9ba>
			MPU6050.MPU6050_IRQ = 0;
 8005ed4:	4bba      	ldr	r3, [pc, #744]	@ (80061c0 <HAL_I2C_MemRxCpltCallback+0x300>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

			LED_G_1;
 8005edc:	2201      	movs	r2, #1
 8005ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ee2:	48b8      	ldr	r0, [pc, #736]	@ (80061c4 <HAL_I2C_MemRxCpltCallback+0x304>)
 8005ee4:	f007 fdb0 	bl	800da48 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT();
 8005ee8:	f7fb fc18 	bl	800171c <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE();
 8005eec:	f7fb fb70 	bl	80015d0 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, Mag_Z);
 8005ef0:	4bb5      	ldr	r3, [pc, #724]	@ (80061c8 <HAL_I2C_MemRxCpltCallback+0x308>)
 8005ef2:	edd3 7a00 	vldr	s15, [r3]
 8005ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8005efa:	48b4      	ldr	r0, [pc, #720]	@ (80061cc <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005efc:	f7fb fcba 	bl	8001874 <MPU6050_GET_ACCANDGYR_FILTRED>



			MYDRON.Pitch.Now = data.x;
 8005f00:	4bb2      	ldr	r3, [pc, #712]	@ (80061cc <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4ab2      	ldr	r2, [pc, #712]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f06:	6113      	str	r3, [r2, #16]
			MYDRON.Rool.Now = data.y;
 8005f08:	4bb0      	ldr	r3, [pc, #704]	@ (80061cc <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4ab0      	ldr	r2, [pc, #704]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f0e:	6413      	str	r3, [r2, #64]	@ 0x40
			MYDRON.Yaw.Now = data.z;
 8005f10:	4bae      	ldr	r3, [pc, #696]	@ (80061cc <HAL_I2C_MemRxCpltCallback+0x30c>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4aae      	ldr	r2, [pc, #696]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f16:	6713      	str	r3, [r2, #112]	@ 0x70


			MYDRON.Rool.Wanted = (float)MYDRON.Rool.Wanted_rx/10;
 8005f18:	4bad      	ldr	r3, [pc, #692]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f26:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8005f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f2e:	4ba8      	ldr	r3, [pc, #672]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f30:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = (float)MYDRON.Pitch.Wanted_rx/10;
 8005f34:	4ba6      	ldr	r3, [pc, #664]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f42:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8005f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f4a:	4ba1      	ldr	r3, [pc, #644]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f4c:	edc3 7a02 	vstr	s15, [r3, #8]
			MYDRON.Yaw.Wanted = 0;//(float)MYDRON.Yaw.Wanted_rx/10;
 8005f50:	4b9f      	ldr	r3, [pc, #636]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	669a      	str	r2, [r3, #104]	@ 0x68
				  			/*
				  				 * FDP
				  				 */
			MYDRON.Rool.Wanted = (MYDRON.Rool.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Rool.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8005f58:	4b9d      	ldr	r3, [pc, #628]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f5a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8005f5e:	eddf 7a9d 	vldr	s15, [pc, #628]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 8005f62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f66:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005f6a:	eddf 7a9a 	vldr	s15, [pc, #616]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 8005f6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7e:	4b94      	ldr	r3, [pc, #592]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005f80:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8005f84:	eddf 7a93 	vldr	s15, [pc, #588]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 8005f88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f8c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005f90:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005f94:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005f98:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fa4:	4b8a      	ldr	r3, [pc, #552]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fa6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			MYDRON.Pitch.Wanted = (MYDRON.Pitch.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Pitch.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8005faa:	4b89      	ldr	r3, [pc, #548]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fac:	ed93 7a02 	vldr	s14, [r3, #8]
 8005fb0:	eddf 7a88 	vldr	s15, [pc, #544]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 8005fb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fb8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005fbc:	eddf 7a85 	vldr	s15, [pc, #532]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 8005fc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd0:	4b7f      	ldr	r3, [pc, #508]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005fd2:	edd3 6a01 	vldr	s13, [r3, #4]
 8005fd6:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 8005fda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fde:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005fe2:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005fe6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005fea:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ff6:	4b76      	ldr	r3, [pc, #472]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005ff8:	edc3 7a02 	vstr	s15, [r3, #8]
			MYDRON.Yaw.Wanted = (MYDRON.Yaw.Wanted * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (MYDRON.Yaw.Last_Wanted_rx * (1 / (1 + (FDP_FQ * looptime))));
 8005ffc:	4b74      	ldr	r3, [pc, #464]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8005ffe:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8006002:	eddf 7a74 	vldr	s15, [pc, #464]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 8006006:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800600a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800600e:	eddf 7a71 	vldr	s15, [pc, #452]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 8006012:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800601a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b6b      	ldr	r3, [pc, #428]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006024:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8006028:	eddf 7a6a 	vldr	s15, [pc, #424]	@ 80061d4 <HAL_I2C_MemRxCpltCallback+0x314>
 800602c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006030:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006034:	ee37 6a86 	vadd.f32	s12, s15, s12
 8006038:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800603c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8006040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006048:	4b61      	ldr	r3, [pc, #388]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800604a:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68


			MYDRON.Rool.Last_Wanted_rx = MYDRON.Rool.Wanted;
 800604e:	4b60      	ldr	r3, [pc, #384]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006052:	4a5f      	ldr	r2, [pc, #380]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006054:	6353      	str	r3, [r2, #52]	@ 0x34
			MYDRON.Pitch.Last_Wanted_rx = MYDRON.Pitch.Wanted;
 8006056:	4b5e      	ldr	r3, [pc, #376]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	4a5d      	ldr	r2, [pc, #372]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800605c:	6053      	str	r3, [r2, #4]
			MYDRON.Yaw.Last_Wanted_rx= MYDRON.Yaw.Wanted;
 800605e:	4b5c      	ldr	r3, [pc, #368]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006062:	4a5b      	ldr	r2, [pc, #364]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006064:	6653      	str	r3, [r2, #100]	@ 0x64


			MYDRON.Pitch.Angle_Error = MYDRON.Pitch.Wanted - MYDRON.Pitch.Now;
 8006066:	4b5a      	ldr	r3, [pc, #360]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006068:	ed93 7a02 	vldr	s14, [r3, #8]
 800606c:	4b58      	ldr	r3, [pc, #352]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800606e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006076:	4b56      	ldr	r3, [pc, #344]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006078:	edc3 7a05 	vstr	s15, [r3, #20]
			MYDRON.Rool.Angle_Error = MYDRON.Rool.Wanted - MYDRON.Rool.Now;
 800607c:	4b54      	ldr	r3, [pc, #336]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800607e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8006082:	4b53      	ldr	r3, [pc, #332]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006084:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800608c:	4b50      	ldr	r3, [pc, #320]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800608e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		  	MYDRON.Yaw.Angle_Error = MYDRON.Yaw.Wanted - MYDRON.Yaw.Now;
 8006092:	4b4f      	ldr	r3, [pc, #316]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006094:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8006098:	4b4d      	ldr	r3, [pc, #308]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800609a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800609e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a2:	4b4b      	ldr	r3, [pc, #300]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060a4:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		  	MYDRON.Pitch.Angular_Rate_Error = MYDRON.PID_Pitch.Angle_Value- MPU6050.Gyr.gx;
 80060a8:	4b49      	ldr	r3, [pc, #292]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060aa:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 80060ae:	4b44      	ldr	r3, [pc, #272]	@ (80061c0 <HAL_I2C_MemRxCpltCallback+0x300>)
 80060b0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80060b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060b8:	4b45      	ldr	r3, [pc, #276]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060ba:	edc3 7a06 	vstr	s15, [r3, #24]
		  	MYDRON.Rool.Angular_Rate_Error = MYDRON.PID_Rool.Angle_Value- MPU6050.Gyr.gy;
 80060be:	4b44      	ldr	r3, [pc, #272]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060c0:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 80060c4:	4b3e      	ldr	r3, [pc, #248]	@ (80061c0 <HAL_I2C_MemRxCpltCallback+0x300>)
 80060c6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80060ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ce:	4b40      	ldr	r3, [pc, #256]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060d0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		  	MYDRON.Yaw.Angular_Rate_Error = MYDRON.PID_Yaw.Angle_Value- MPU6050.Gyr.gz;
 80060d4:	4b3e      	ldr	r3, [pc, #248]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060d6:	ed93 7a48 	vldr	s14, [r3, #288]	@ 0x120
 80060da:	4b39      	ldr	r3, [pc, #228]	@ (80061c0 <HAL_I2C_MemRxCpltCallback+0x300>)
 80060dc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80060e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e4:	4b3a      	ldr	r3, [pc, #232]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060e6:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78


			MYDRON.Pitch.Angle_Error_Sum = (MYDRON.PID_Pitch.Status != 0) ? MYDRON.Pitch.Angle_Error_Sum : MYDRON.Pitch.Angle_Error_Sum + (MYDRON.Pitch.Angle_Error);//pitch_error -> pitch_error
 80060ea:	4b39      	ldr	r3, [pc, #228]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060ec:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <HAL_I2C_MemRxCpltCallback+0x246>
 80060f4:	4b36      	ldr	r3, [pc, #216]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006104:	e00c      	b.n	8006120 <HAL_I2C_MemRxCpltCallback+0x260>
 8006106:	4b32      	ldr	r3, [pc, #200]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006112:	4b2f      	ldr	r3, [pc, #188]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006114:	edd3 7a05 	vldr	s15, [r3, #20]
 8006118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800611c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006120:	4b2b      	ldr	r3, [pc, #172]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006122:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			MYDRON.Rool.Angle_Error_Sum = (MYDRON.PID_Rool.Status != 0) ? MYDRON.Rool.Angle_Error_Sum : MYDRON.Rool.Angle_Error_Sum + (MYDRON.Rool.Angle_Error);//rool_error
 8006126:	4b2a      	ldr	r3, [pc, #168]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006128:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_I2C_MemRxCpltCallback+0x282>
 8006130:	4b27      	ldr	r3, [pc, #156]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006134:	ee07 3a90 	vmov	s15, r3
 8006138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800613c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006140:	e00c      	b.n	800615c <HAL_I2C_MemRxCpltCallback+0x29c>
 8006142:	4b23      	ldr	r3, [pc, #140]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800614e:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006150:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800615c:	4b1c      	ldr	r3, [pc, #112]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800615e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
			MYDRON.Yaw.Angle_Error_Sum = (MYDRON.PID_Yaw.Status != 0) ? MYDRON.Yaw.Angle_Error_Sum : MYDRON.Yaw.Angle_Error_Sum + (MYDRON.Yaw.Angle_Error);//yaw_error
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006164:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <HAL_I2C_MemRxCpltCallback+0x2c0>
 800616c:	4b18      	ldr	r3, [pc, #96]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800616e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800617a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617e:	e00d      	b.n	800619c <HAL_I2C_MemRxCpltCallback+0x2dc>
 8006180:	4b13      	ldr	r3, [pc, #76]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800618e:	4b10      	ldr	r3, [pc, #64]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006190:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800619c:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 800619e:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

			MYDRON.Pitch.Angular_Rate_Error_Sum = (MYDRON.PID_Pitch.Status != 0) ? MYDRON.Pitch.Angular_Rate_Error_Sum : MYDRON.Pitch.Angular_Rate_Error_Sum + (MYDRON.Pitch.Angular_Rate_Error);//pitch_ar_error
 80061a2:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80061a4:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d015      	beq.n	80061d8 <HAL_I2C_MemRxCpltCallback+0x318>
 80061ac:	4b08      	ldr	r3, [pc, #32]	@ (80061d0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061bc:	e019      	b.n	80061f2 <HAL_I2C_MemRxCpltCallback+0x332>
 80061be:	bf00      	nop
 80061c0:	00000000 	.word	0x00000000
 80061c4:	58021000 	.word	0x58021000
 80061c8:	00000054 	.word	0x00000054
 80061cc:	00000084 	.word	0x00000084
 80061d0:	00000188 	.word	0x00000188
 80061d4:	3a83126f 	.word	0x3a83126f
 80061d8:	4bc9      	ldr	r3, [pc, #804]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061e4:	4bc6      	ldr	r3, [pc, #792]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80061ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061f2:	4bc3      	ldr	r3, [pc, #780]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061f4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			MYDRON.Rool.Angular_Rate_Error_Sum = (MYDRON.PID_Rool.Status != 0) ? MYDRON.Rool.Angular_Rate_Error_Sum : MYDRON.Rool.Angular_Rate_Error_Sum + (MYDRON.Rool.Angular_Rate_Error);
 80061f8:	4bc1      	ldr	r3, [pc, #772]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80061fa:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <HAL_I2C_MemRxCpltCallback+0x354>
 8006202:	4bbf      	ldr	r3, [pc, #764]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800620e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006212:	e00c      	b.n	800622e <HAL_I2C_MemRxCpltCallback+0x36e>
 8006214:	4bba      	ldr	r3, [pc, #744]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006220:	4bb7      	ldr	r3, [pc, #732]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006222:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800622a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800622e:	4bb4      	ldr	r3, [pc, #720]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006230:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
			MYDRON.Yaw.Angular_Rate_Error_Sum = (MYDRON.PID_Yaw.Status != 0) ? MYDRON.Yaw.Angular_Rate_Error_Sum : MYDRON.Yaw.Angular_Rate_Error_Sum + (MYDRON.Yaw.Angular_Rate_Error);
 8006234:	4bb2      	ldr	r3, [pc, #712]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006236:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <HAL_I2C_MemRxCpltCallback+0x392>
 800623e:	4bb0      	ldr	r3, [pc, #704]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800624c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006250:	e00d      	b.n	800626e <HAL_I2C_MemRxCpltCallback+0x3ae>
 8006252:	4bab      	ldr	r3, [pc, #684]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006260:	4ba7      	ldr	r3, [pc, #668]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006262:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8006266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800626a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800626e:	4ba4      	ldr	r3, [pc, #656]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006270:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88


			PID_call(MYDRON);
 8006274:	4ca2      	ldr	r4, [pc, #648]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006276:	4668      	mov	r0, sp
 8006278:	f104 0310 	add.w	r3, r4, #16
 800627c:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8006280:	4619      	mov	r1, r3
 8006282:	f017 faed 	bl	801d860 <memcpy>
 8006286:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800628a:	f7fd fc0b 	bl	8003aa4 <PID_call>


			MYDRON.Pitch.Old_Angle_Error = MYDRON.Pitch.Angle_Error;
 800628e:	4b9c      	ldr	r3, [pc, #624]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	4a9b      	ldr	r2, [pc, #620]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006294:	61d3      	str	r3, [r2, #28]
			MYDRON.Rool.Old_Angle_Error = MYDRON.Rool.Angle_Error;
 8006296:	4b9a      	ldr	r3, [pc, #616]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629a:	4a99      	ldr	r2, [pc, #612]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 800629c:	64d3      	str	r3, [r2, #76]	@ 0x4c
			MYDRON.Yaw.Old_Angle_Error = MYDRON.Yaw.Angle_Error;
 800629e:	4b98      	ldr	r3, [pc, #608]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a2:	4a97      	ldr	r2, [pc, #604]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062a4:	67d3      	str	r3, [r2, #124]	@ 0x7c

			MYDRON.Pitch.Old_Angle_Error = MYDRON.Pitch.Angular_Rate_Error;
 80062a6:	4b96      	ldr	r3, [pc, #600]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	4a95      	ldr	r2, [pc, #596]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062ac:	61d3      	str	r3, [r2, #28]
			MYDRON.Rool.Old_Angle_Error = MYDRON.Rool.Angular_Rate_Error;
 80062ae:	4b94      	ldr	r3, [pc, #592]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b2:	4a93      	ldr	r2, [pc, #588]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
			MYDRON.Yaw.Old_Angle_Error = MYDRON.Yaw.Angular_Rate_Error;
 80062b6:	4b92      	ldr	r3, [pc, #584]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062ba:	4a91      	ldr	r2, [pc, #580]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062bc:	67d3      	str	r3, [r2, #124]	@ 0x7c


			MYDRON.Pitch.Value  	= (MYDRON.PID_Pitch.Angular_Rate_Value > 5000) ? PITCH_MAX_VAL(): (MYDRON.PID_Pitch.Angular_Rate_Value < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 80062be:	4b90      	ldr	r3, [pc, #576]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062c0:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80062c4:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8006504 <HAL_I2C_MemRxCpltCallback+0x644>
 80062c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d0:	dd04      	ble.n	80062dc <HAL_I2C_MemRxCpltCallback+0x41c>
 80062d2:	f001 fa13 	bl	80076fc <PITCH_MAX_VAL>
 80062d6:	4603      	mov	r3, r0
 80062d8:	461a      	mov	r2, r3
 80062da:	e012      	b.n	8006302 <HAL_I2C_MemRxCpltCallback+0x442>
 80062dc:	4b88      	ldr	r3, [pc, #544]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80062de:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80062e2:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8006508 <HAL_I2C_MemRxCpltCallback+0x648>
 80062e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ee:	d504      	bpl.n	80062fa <HAL_I2C_MemRxCpltCallback+0x43a>
 80062f0:	f001 fa14 	bl	800771c <PITCH_MIN_VAL>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	e003      	b.n	8006302 <HAL_I2C_MemRxCpltCallback+0x442>
 80062fa:	f001 fa55 	bl	80077a8 <PITCH_GOOD_VAL>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	4b7f      	ldr	r3, [pc, #508]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006304:	859a      	strh	r2, [r3, #44]	@ 0x2c
			MYDRON.Rool.Value 	    = (MYDRON.PID_Rool.Angular_Rate_Value > 5000) ? ROOL_MAX_VAL(): (MYDRON.PID_Rool.Angular_Rate_Value < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006306:	4b7e      	ldr	r3, [pc, #504]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006308:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 800630c:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8006504 <HAL_I2C_MemRxCpltCallback+0x644>
 8006310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006318:	dd04      	ble.n	8006324 <HAL_I2C_MemRxCpltCallback+0x464>
 800631a:	f001 f9cf 	bl	80076bc <ROOL_MAX_VAL>
 800631e:	4603      	mov	r3, r0
 8006320:	461a      	mov	r2, r3
 8006322:	e012      	b.n	800634a <HAL_I2C_MemRxCpltCallback+0x48a>
 8006324:	4b76      	ldr	r3, [pc, #472]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006326:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 800632a:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8006508 <HAL_I2C_MemRxCpltCallback+0x648>
 800632e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006336:	d504      	bpl.n	8006342 <HAL_I2C_MemRxCpltCallback+0x482>
 8006338:	f001 f9d0 	bl	80076dc <ROOL_MIN_VAL>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	e003      	b.n	800634a <HAL_I2C_MemRxCpltCallback+0x48a>
 8006342:	f001 fa1b 	bl	800777c <ROOL_GOOD_VAL>
 8006346:	4603      	mov	r3, r0
 8006348:	461a      	mov	r2, r3
 800634a:	4b6d      	ldr	r3, [pc, #436]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 800634c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			MYDRON.Yaw.Value  		= (MYDRON.PID_Yaw.Angular_Rate_Value > 5000) ? YAW_MAX_VAL(): (MYDRON.PID_Yaw.Angular_Rate_Value < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006350:	4b6b      	ldr	r3, [pc, #428]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006352:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8006356:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8006504 <HAL_I2C_MemRxCpltCallback+0x644>
 800635a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800635e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006362:	dd04      	ble.n	800636e <HAL_I2C_MemRxCpltCallback+0x4ae>
 8006364:	f001 f9ea 	bl	800773c <YAW_MAX_VAL>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	e012      	b.n	8006394 <HAL_I2C_MemRxCpltCallback+0x4d4>
 800636e:	4b64      	ldr	r3, [pc, #400]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006370:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8006374:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8006508 <HAL_I2C_MemRxCpltCallback+0x648>
 8006378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006380:	d504      	bpl.n	800638c <HAL_I2C_MemRxCpltCallback+0x4cc>
 8006382:	f001 f9eb 	bl	800775c <YAW_MIN_VAL>
 8006386:	4603      	mov	r3, r0
 8006388:	461a      	mov	r2, r3
 800638a:	e003      	b.n	8006394 <HAL_I2C_MemRxCpltCallback+0x4d4>
 800638c:	f001 fa22 	bl	80077d4 <YAW_GOOD_VAL>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	4b5a      	ldr	r3, [pc, #360]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006396:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 800639a:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800639e:	f7fd fa57 	bl	8003850 <Thrust_filter>
			if(MYDRON.Thrust.Now > MYDRON.Thrust.Thrust_Limit){
 80063a2:	4b57      	ldr	r3, [pc, #348]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063a4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80063a8:	461a      	mov	r2, r3
 80063aa:	4b55      	ldr	r3, [pc, #340]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063ac:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 80063b0:	429a      	cmp	r2, r3
 80063b2:	dd06      	ble.n	80063c2 <HAL_I2C_MemRxCpltCallback+0x502>
				MYDRON.Thrust.Now = MYDRON.Thrust.Thrust_Limit;
 80063b4:	4b52      	ldr	r3, [pc, #328]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063b6:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	@ 0x94
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	4b50      	ldr	r3, [pc, #320]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063be:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			}


			Stack_Push(WartoscBezwgledna(MYDRON.PID_Pitch.Angle_Factors[4]));
 80063c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063c4:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80063c8:	eeb0 0a67 	vmov.f32	s0, s15
 80063cc:	f000 fd88 	bl	8006ee0 <WartoscBezwgledna>
 80063d0:	eef0 7a40 	vmov.f32	s15, s0
 80063d4:	eeb0 0a67 	vmov.f32	s0, s15
 80063d8:	f001 f924 	bl	8007624 <Stack_Push>
			Stack_Push(WartoscBezwgledna(MYDRON.PID_Pitch.Angle_Factors[4]));
 80063dc:	4b48      	ldr	r3, [pc, #288]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063de:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80063e2:	eeb0 0a67 	vmov.f32	s0, s15
 80063e6:	f000 fd7b 	bl	8006ee0 <WartoscBezwgledna>
 80063ea:	eef0 7a40 	vmov.f32	s15, s0
 80063ee:	eeb0 0a67 	vmov.f32	s0, s15
 80063f2:	f001 f917 	bl	8007624 <Stack_Push>
			Stack_Push(MYDRON.Pitch.Now);
 80063f6:	4b42      	ldr	r3, [pc, #264]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80063f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80063fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006400:	f001 f910 	bl	8007624 <Stack_Push>
			Stack_Push(MYDRON.Rool.Now);
 8006404:	4b3e      	ldr	r3, [pc, #248]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006406:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800640a:	eeb0 0a67 	vmov.f32	s0, s15
 800640e:	f001 f909 	bl	8007624 <Stack_Push>


			MYDRON.Thrust.Speed_1 = (((uint32_t)((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value - MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value - MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500) : max_speed;//trust 7000 max
 8006412:	4b3b      	ldr	r3, [pc, #236]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006414:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006418:	ee07 3a90 	vmov	s15, r3
 800641c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006420:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80064e8 <HAL_I2C_MemRxCpltCallback+0x628>
 8006424:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006428:	4b35      	ldr	r3, [pc, #212]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 800642a:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006436:	ee36 6b07 	vadd.f64	d6, d6, d7
 800643a:	4b31      	ldr	r3, [pc, #196]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 800643c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006448:	ee36 6b47 	vsub.f64	d6, d6, d7
 800644c:	4b2c      	ldr	r3, [pc, #176]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 800644e:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800645a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800645e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80064f0 <HAL_I2C_MemRxCpltCallback+0x630>
 8006462:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006466:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80064f8 <HAL_I2C_MemRxCpltCallback+0x638>
 800646a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800646e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006472:	ee17 2a90 	vmov	r2, s15
 8006476:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 800647a:	429a      	cmp	r2, r3
 800647c:	d846      	bhi.n	800650c <HAL_I2C_MemRxCpltCallback+0x64c>
 800647e:	4b20      	ldr	r3, [pc, #128]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006480:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006484:	ee07 3a90 	vmov	s15, r3
 8006488:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800648c:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80064e8 <HAL_I2C_MemRxCpltCallback+0x628>
 8006490:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006494:	4b1a      	ldr	r3, [pc, #104]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006496:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80064a6:	4b16      	ldr	r3, [pc, #88]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80064a8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80064b8:	4b11      	ldr	r3, [pc, #68]	@ (8006500 <HAL_I2C_MemRxCpltCallback+0x640>)
 80064ba:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80064ca:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80064f0 <HAL_I2C_MemRxCpltCallback+0x630>
 80064ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064d2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80064f8 <HAL_I2C_MemRxCpltCallback+0x638>
 80064d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80064de:	ee17 3a90 	vmov	r3, s15
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	e014      	b.n	8006510 <HAL_I2C_MemRxCpltCallback+0x650>
 80064e6:	bf00      	nop
 80064e8:	66666666 	.word	0x66666666
 80064ec:	3fe66666 	.word	0x3fe66666
 80064f0:	00000000 	.word	0x00000000
 80064f4:	40c48200 	.word	0x40c48200
 80064f8:	00000000 	.word	0x00000000
 80064fc:	407f4000 	.word	0x407f4000
 8006500:	00000188 	.word	0x00000188
 8006504:	459c4000 	.word	0x459c4000
 8006508:	c59c4000 	.word	0xc59c4000
 800650c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006510:	4aab      	ldr	r2, [pc, #684]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006512:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
			MYDRON.Thrust.Speed_2 = (((uint32_t)((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value - MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value - MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 8006516:	4baa      	ldr	r3, [pc, #680]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006518:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006524:	ed9f 6ba0 	vldr	d6, [pc, #640]	@ 80067a8 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006528:	ee27 6b06 	vmul.f64	d6, d7, d6
 800652c:	4ba4      	ldr	r3, [pc, #656]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 800652e:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800653a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800653e:	4ba0      	ldr	r3, [pc, #640]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006540:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006544:	ee07 3a90 	vmov	s15, r3
 8006548:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800654c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006550:	4b9b      	ldr	r3, [pc, #620]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006552:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800655e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006562:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 80067b0 <HAL_I2C_MemRxCpltCallback+0x8f0>
 8006566:	ee37 7b06 	vadd.f64	d7, d7, d6
 800656a:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 80067b8 <HAL_I2C_MemRxCpltCallback+0x8f8>
 800656e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006572:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006576:	ee17 2a90 	vmov	r2, s15
 800657a:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 800657e:	429a      	cmp	r2, r3
 8006580:	d833      	bhi.n	80065ea <HAL_I2C_MemRxCpltCallback+0x72a>
 8006582:	4b8f      	ldr	r3, [pc, #572]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006584:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006590:	ed9f 6b85 	vldr	d6, [pc, #532]	@ 80067a8 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006594:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006598:	4b89      	ldr	r3, [pc, #548]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 800659a:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80065aa:	4b85      	ldr	r3, [pc, #532]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065ac:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065b8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80065bc:	4b80      	ldr	r3, [pc, #512]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065be:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80065ce:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80067b0 <HAL_I2C_MemRxCpltCallback+0x8f0>
 80065d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065d6:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80067b8 <HAL_I2C_MemRxCpltCallback+0x8f8>
 80065da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065e2:	ee17 3a90 	vmov	r3, s15
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	e001      	b.n	80065ee <HAL_I2C_MemRxCpltCallback+0x72e>
 80065ea:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80065ee:	4a74      	ldr	r2, [pc, #464]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065f0:	f8a2 30a2 	strh.w	r3, [r2, #162]	@ 0xa2
			MYDRON.Thrust.Speed_3 = (((uint32_t)((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value + MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) + MYDRON.Rool.Value + MYDRON.Pitch.Value - MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 80065f4:	4b72      	ldr	r3, [pc, #456]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 80065f6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006602:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80067a8 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006606:	ee27 6b06 	vmul.f64	d6, d7, d6
 800660a:	4b6d      	ldr	r3, [pc, #436]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 800660c:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006618:	ee36 6b07 	vadd.f64	d6, d6, d7
 800661c:	4b68      	ldr	r3, [pc, #416]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 800661e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800662a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800662e:	4b64      	ldr	r3, [pc, #400]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006630:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800663c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006640:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 80067b0 <HAL_I2C_MemRxCpltCallback+0x8f0>
 8006644:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006648:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 80067b8 <HAL_I2C_MemRxCpltCallback+0x8f8>
 800664c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006650:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006654:	ee17 2a90 	vmov	r2, s15
 8006658:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 800665c:	429a      	cmp	r2, r3
 800665e:	d833      	bhi.n	80066c8 <HAL_I2C_MemRxCpltCallback+0x808>
 8006660:	4b57      	ldr	r3, [pc, #348]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006662:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800666e:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 80067a8 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006672:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006676:	4b52      	ldr	r3, [pc, #328]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006678:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006684:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006688:	4b4d      	ldr	r3, [pc, #308]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 800668a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006696:	ee36 6b07 	vadd.f64	d6, d6, d7
 800669a:	4b49      	ldr	r3, [pc, #292]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 800669c:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80066ac:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80067b0 <HAL_I2C_MemRxCpltCallback+0x8f0>
 80066b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066b4:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80067b8 <HAL_I2C_MemRxCpltCallback+0x8f8>
 80066b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066c0:	ee17 3a90 	vmov	r3, s15
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	e001      	b.n	80066cc <HAL_I2C_MemRxCpltCallback+0x80c>
 80066c8:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80066cc:	4a3c      	ldr	r2, [pc, #240]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 80066ce:	f8a2 30a4 	strh.w	r3, [r2, #164]	@ 0xa4
			MYDRON.Thrust.Speed_4 = (((uint32_t)((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value + MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500)) < max_speed) ? ((MYDRON.Thrust.Now*0.7) - MYDRON.Rool.Value + MYDRON.Pitch.Value + MYDRON.Yaw.Value + min_speed + 500) : max_speed;//
 80066d2:	4b3b      	ldr	r3, [pc, #236]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 80066d4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066e0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80067a8 <HAL_I2C_MemRxCpltCallback+0x8e8>
 80066e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80066e8:	4b35      	ldr	r3, [pc, #212]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 80066ea:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80066fa:	4b31      	ldr	r3, [pc, #196]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 80066fc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006700:	ee07 3a90 	vmov	s15, r3
 8006704:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006708:	ee36 6b07 	vadd.f64	d6, d6, d7
 800670c:	4b2c      	ldr	r3, [pc, #176]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 800670e:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800671a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800671e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80067b0 <HAL_I2C_MemRxCpltCallback+0x8f0>
 8006722:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006726:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80067b8 <HAL_I2C_MemRxCpltCallback+0x8f8>
 800672a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800672e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006732:	ee17 2a90 	vmov	r2, s15
 8006736:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 800673a:	429a      	cmp	r2, r3
 800673c:	d842      	bhi.n	80067c4 <HAL_I2C_MemRxCpltCallback+0x904>
 800673e:	4b20      	ldr	r3, [pc, #128]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006740:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800674c:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80067a8 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006750:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006754:	4b1a      	ldr	r3, [pc, #104]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006756:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006762:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006766:	4b16      	ldr	r3, [pc, #88]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 8006768:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800676c:	ee07 3a90 	vmov	s15, r3
 8006770:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006774:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006778:	4b11      	ldr	r3, [pc, #68]	@ (80067c0 <HAL_I2C_MemRxCpltCallback+0x900>)
 800677a:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	@ 0x8c
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006786:	ee36 7b07 	vadd.f64	d7, d6, d7
 800678a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80067b0 <HAL_I2C_MemRxCpltCallback+0x8f0>
 800678e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006792:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80067b8 <HAL_I2C_MemRxCpltCallback+0x8f8>
 8006796:	ee37 7b06 	vadd.f64	d7, d7, d6
 800679a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800679e:	ee17 3a90 	vmov	r3, s15
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	e010      	b.n	80067c8 <HAL_I2C_MemRxCpltCallback+0x908>
 80067a6:	bf00      	nop
 80067a8:	66666666 	.word	0x66666666
 80067ac:	3fe66666 	.word	0x3fe66666
 80067b0:	00000000 	.word	0x00000000
 80067b4:	40c48200 	.word	0x40c48200
 80067b8:	00000000 	.word	0x00000000
 80067bc:	407f4000 	.word	0x407f4000
 80067c0:	00000188 	.word	0x00000188
 80067c4:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80067c8:	4a65      	ldr	r2, [pc, #404]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 80067ca:	f8a2 30a6 	strh.w	r3, [r2, #166]	@ 0xa6

			if( MYDRON.Thrust.Speed_1 != MYDRON.Thrust.Old_Speed_1){
 80067ce:	4b64      	ldr	r3, [pc, #400]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 80067d0:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 80067d4:	4b62      	ldr	r3, [pc, #392]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 80067d6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80067da:	429a      	cmp	r2, r3
 80067dc:	d005      	beq.n	80067ea <HAL_I2C_MemRxCpltCallback+0x92a>
				ESC_1_SPEED( MYDRON.Thrust.Speed_1);
 80067de:	4b60      	ldr	r3, [pc, #384]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 80067e0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fa fb3d 	bl	8000e64 <ESC_1_SPEED>
			}
			if( MYDRON.Thrust.Speed_2 != MYDRON.Thrust.Old_Speed_2){
 80067ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 80067ec:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	@ 0xa2
 80067f0:	4b5b      	ldr	r3, [pc, #364]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 80067f2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d005      	beq.n	8006806 <HAL_I2C_MemRxCpltCallback+0x946>
				ESC_2_SPEED( MYDRON.Thrust.Speed_2);
 80067fa:	4b59      	ldr	r3, [pc, #356]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 80067fc:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8006800:	4618      	mov	r0, r3
 8006802:	f7fa fb51 	bl	8000ea8 <ESC_2_SPEED>
			}
			if( MYDRON.Thrust.Speed_3 != MYDRON.Thrust.Old_Speed_3){
 8006806:	4b56      	ldr	r3, [pc, #344]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006808:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	@ 0xa4
 800680c:	4b54      	ldr	r3, [pc, #336]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 800680e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006812:	429a      	cmp	r2, r3
 8006814:	d005      	beq.n	8006822 <HAL_I2C_MemRxCpltCallback+0x962>
				ESC_3_SPEED( MYDRON.Thrust.Speed_3);
 8006816:	4b52      	ldr	r3, [pc, #328]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006818:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800681c:	4618      	mov	r0, r3
 800681e:	f7fa fb65 	bl	8000eec <ESC_3_SPEED>
			}
			if( MYDRON.Thrust.Speed_4 != MYDRON.Thrust.Old_Speed_4){
 8006822:	4b4f      	ldr	r3, [pc, #316]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006824:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	@ 0xa6
 8006828:	4b4d      	ldr	r3, [pc, #308]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 800682a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800682e:	429a      	cmp	r2, r3
 8006830:	d005      	beq.n	800683e <HAL_I2C_MemRxCpltCallback+0x97e>
				ESC_4_SPEED( MYDRON.Thrust.Speed_4);
 8006832:	4b4b      	ldr	r3, [pc, #300]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006834:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8006838:	4618      	mov	r0, r3
 800683a:	f7fa fb79 	bl	8000f30 <ESC_4_SPEED>
			}

			MYDRON.Thrust.Old_Speed_1 = MYDRON.Thrust.Speed_1;
 800683e:	4b48      	ldr	r3, [pc, #288]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006840:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8006844:	4b46      	ldr	r3, [pc, #280]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006846:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
			MYDRON.Thrust.Old_Speed_2 = MYDRON.Thrust.Speed_2;
 800684a:	4b45      	ldr	r3, [pc, #276]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 800684c:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	@ 0xa2
 8006850:	4b43      	ldr	r3, [pc, #268]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006852:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
			MYDRON.Thrust.Old_Speed_3 = MYDRON.Thrust.Speed_3;
 8006856:	4b42      	ldr	r3, [pc, #264]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006858:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	@ 0xa4
 800685c:	4b40      	ldr	r3, [pc, #256]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 800685e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			MYDRON.Thrust.Old_Speed_4 = MYDRON.Thrust.Speed_4;
 8006862:	4b3f      	ldr	r3, [pc, #252]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 8006864:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	@ 0xa6
 8006868:	4b3d      	ldr	r3, [pc, #244]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0xaa0>)
 800686a:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

			LED_G_0;
 800686e:	2200      	movs	r2, #0
 8006870:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006874:	483b      	ldr	r0, [pc, #236]	@ (8006964 <HAL_I2C_MemRxCpltCallback+0xaa4>)
 8006876:	f007 f8e7 	bl	800da48 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 800687a:	4b3b      	ldr	r3, [pc, #236]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d125      	bne.n	80068ce <HAL_I2C_MemRxCpltCallback+0xa0e>
		HMC583L_IRQ = 0;
 8006882:	4b39      	ldr	r3, [pc, #228]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0xaa8>)
 8006884:	2200      	movs	r2, #0
 8006886:	701a      	strb	r2, [r3, #0]
		HMC5883L_Get_Z_End_IT();
 8006888:	f7fa fc5a 	bl	8001140 <HMC5883L_Get_Z_End_IT>
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 800688c:	4b37      	ldr	r3, [pc, #220]	@ (800696c <HAL_I2C_MemRxCpltCallback+0xaac>)
 800688e:	edd3 7a00 	vldr	s15, [r3]
 8006892:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006896:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8006948 <HAL_I2C_MemRxCpltCallback+0xa88>
 800689a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800689e:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8006950 <HAL_I2C_MemRxCpltCallback+0xa90>
 80068a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80068a6:	4b32      	ldr	r3, [pc, #200]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0xab0>)
 80068a8:	edd3 7a00 	vldr	s15, [r3]
 80068ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80068b0:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8006958 <HAL_I2C_MemRxCpltCallback+0xa98>
 80068b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80068b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80068bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80068c0:	4b2a      	ldr	r3, [pc, #168]	@ (800696c <HAL_I2C_MemRxCpltCallback+0xaac>)
 80068c2:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 80068c6:	4b29      	ldr	r3, [pc, #164]	@ (800696c <HAL_I2C_MemRxCpltCallback+0xaac>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a29      	ldr	r2, [pc, #164]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0xab0>)
 80068cc:	6013      	str	r3, [r2, #0]
	}
	if(BMP180.BMP180_IRQ == 1){
 80068ce:	4b29      	ldr	r3, [pc, #164]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 80068d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d118      	bne.n	800690a <HAL_I2C_MemRxCpltCallback+0xa4a>
		BMP180.Timer = 1;
 80068d8:	4b26      	ldr	r3, [pc, #152]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
		BMP180.Raw_Data.temperature = BMP180_GET_temp_IT();
 80068e0:	f7f9 ffb0 	bl	8000844 <BMP180_GET_temp_IT>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	4b22      	ldr	r3, [pc, #136]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 80068ea:	641a      	str	r2, [r3, #64]	@ 0x40
		BMP180.temp = BMP180_GET_temp(BMP180.Raw_Data.temperature);
 80068ec:	4b21      	ldr	r3, [pc, #132]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 80068ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fa f8c6 	bl	8000a84 <BMP180_GET_temp>
 80068f8:	eef0 7a40 	vmov.f32	s15, s0
 80068fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 80068fe:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		BMP180.BMP180_IRQ = 3;
 8006902:	4b1c      	ldr	r3, [pc, #112]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 8006904:	2203      	movs	r2, #3
 8006906:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	}
	if(BMP180.BMP180_IRQ == 2){
 800690a:	4b1a      	ldr	r3, [pc, #104]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 800690c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006910:	2b02      	cmp	r3, #2
 8006912:	d114      	bne.n	800693e <HAL_I2C_MemRxCpltCallback+0xa7e>
		BMP180.Raw_Data.pressure = BMP180_GET_pres_IT();
 8006914:	f7f9 ffac 	bl	8000870 <BMP180_GET_pres_IT>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	4b15      	ldr	r3, [pc, #84]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 800691e:	645a      	str	r2, [r3, #68]	@ 0x44
		BMP180.pres = BMP180_GET_pres(BMP180.Raw_Data.pressure);
 8006920:	4b14      	ldr	r3, [pc, #80]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 8006922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006924:	b29b      	uxth	r3, r3
 8006926:	4618      	mov	r0, r3
 8006928:	f7fa f8f6 	bl	8000b18 <BMP180_GET_pres>
 800692c:	eef0 7a40 	vmov.f32	s15, s0
 8006930:	4b10      	ldr	r3, [pc, #64]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 8006932:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		BMP180.BMP180_IRQ = 0;
 8006936:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0xab4>)
 8006938:	2200      	movs	r2, #0
 800693a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	}
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	bd90      	pop	{r4, r7, pc}
 8006946:	bf00      	nop
 8006948:	9999999a 	.word	0x9999999a
 800694c:	3fc99999 	.word	0x3fc99999
 8006950:	33333333 	.word	0x33333333
 8006954:	3ff33333 	.word	0x3ff33333
 8006958:	aaaaaaab 	.word	0xaaaaaaab
 800695c:	3feaaaaa 	.word	0x3feaaaaa
 8006960:	00000188 	.word	0x00000188
 8006964:	58021000 	.word	0x58021000
 8006968:	000041d0 	.word	0x000041d0
 800696c:	00000054 	.word	0x00000054
 8006970:	00000064 	.word	0x00000064
 8006974:	0000009c 	.word	0x0000009c

08006978 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi){
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	if(NRF24.SPI_Tx_Inte == 1 && NRF24.Step == 4){
 8006980:	4b1a      	ldr	r3, [pc, #104]	@ (80069ec <HAL_SPI_TxCpltCallback+0x74>)
 8006982:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006986:	2b00      	cmp	r3, #0
 8006988:	d02c      	beq.n	80069e4 <HAL_SPI_TxCpltCallback+0x6c>
 800698a:	4b18      	ldr	r3, [pc, #96]	@ (80069ec <HAL_SPI_TxCpltCallback+0x74>)
 800698c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006990:	2b04      	cmp	r3, #4
 8006992:	d127      	bne.n	80069e4 <HAL_SPI_TxCpltCallback+0x6c>
		LED_6_1;
 8006994:	2201      	movs	r2, #1
 8006996:	2108      	movs	r1, #8
 8006998:	4815      	ldr	r0, [pc, #84]	@ (80069f0 <HAL_SPI_TxCpltCallback+0x78>)
 800699a:	f007 f855 	bl	800da48 <HAL_GPIO_WritePin>
		NRF24_CSN_HIGH;
 800699e:	2201      	movs	r2, #1
 80069a0:	2180      	movs	r1, #128	@ 0x80
 80069a2:	4814      	ldr	r0, [pc, #80]	@ (80069f4 <HAL_SPI_TxCpltCallback+0x7c>)
 80069a4:	f007 f850 	bl	800da48 <HAL_GPIO_WritePin>
		NRF24_CE_HIGH;//nRF24_WaitTX()
 80069a8:	2201      	movs	r2, #1
 80069aa:	2140      	movs	r1, #64	@ 0x40
 80069ac:	4811      	ldr	r0, [pc, #68]	@ (80069f4 <HAL_SPI_TxCpltCallback+0x7c>)
 80069ae:	f007 f84b 	bl	800da48 <HAL_GPIO_WritePin>
		LED_6_0;
 80069b2:	2200      	movs	r2, #0
 80069b4:	2108      	movs	r1, #8
 80069b6:	480e      	ldr	r0, [pc, #56]	@ (80069f0 <HAL_SPI_TxCpltCallback+0x78>)
 80069b8:	f007 f846 	bl	800da48 <HAL_GPIO_WritePin>
		//
		NRF24.Status = NRF24_Ready;
 80069bc:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <HAL_SPI_TxCpltCallback+0x74>)
 80069be:	2204      	movs	r2, #4
 80069c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		NRF24.Timer_1 = 1;
 80069c4:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <HAL_SPI_TxCpltCallback+0x74>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
		//NRF24.Message_Status = 2;
		NRF24.SPI_Tx_Inte = 0;
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <HAL_SPI_TxCpltCallback+0x74>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		NRF24.Step++;//Step 5
 80069d4:	4b05      	ldr	r3, [pc, #20]	@ (80069ec <HAL_SPI_TxCpltCallback+0x74>)
 80069d6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80069da:	3301      	adds	r3, #1
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	4b03      	ldr	r3, [pc, #12]	@ (80069ec <HAL_SPI_TxCpltCallback+0x74>)
 80069e0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

	}
}
 80069e4:	bf00      	nop
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	000000fc 	.word	0x000000fc
 80069f0:	58021000 	.word	0x58021000
 80069f4:	58020400 	.word	0x58020400

080069f8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi){//todo
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	if(STARTUP == 0 && NRF24.SPI_Rx_Inte == 1 && NRF24.Step == 1){
 8006a00:	4bac      	ldr	r3, [pc, #688]	@ (8006cb4 <HAL_SPI_RxCpltCallback+0x2bc>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 8151 	bne.w	8006cac <HAL_SPI_RxCpltCallback+0x2b4>
 8006a0a:	4bab      	ldr	r3, [pc, #684]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a0c:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 814b 	beq.w	8006cac <HAL_SPI_RxCpltCallback+0x2b4>
 8006a16:	4ba8      	ldr	r3, [pc, #672]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a18:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	f040 8145 	bne.w	8006cac <HAL_SPI_RxCpltCallback+0x2b4>
		NRF24.SPI_Rx_Inte = 0;
 8006a22:	4ba5      	ldr	r3, [pc, #660]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

		LED_6_1;
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	2108      	movs	r1, #8
 8006a2e:	48a3      	ldr	r0, [pc, #652]	@ (8006cbc <HAL_SPI_RxCpltCallback+0x2c4>)
 8006a30:	f007 f80a 	bl	800da48 <HAL_GPIO_WritePin>
		nRF24_ReadRXPaylaod_IT_End();
 8006a34:	f7fb fe26 	bl	8002684 <nRF24_ReadRXPaylaod_IT_End>
		LED_6_0;
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2108      	movs	r1, #8
 8006a3c:	489f      	ldr	r0, [pc, #636]	@ (8006cbc <HAL_SPI_RxCpltCallback+0x2c4>)
 8006a3e:	f007 f803 	bl	800da48 <HAL_GPIO_WritePin>
		NRF24.Step++;//step 2
 8006a42:	4b9d      	ldr	r3, [pc, #628]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a44:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006a48:	3301      	adds	r3, #1
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	4b9a      	ldr	r3, [pc, #616]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a4e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

		NRF24.Timer_1 = 2;
 8006a52:	4b99      	ldr	r3, [pc, #612]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86

		LED_Y_1;
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a60:	4897      	ldr	r0, [pc, #604]	@ (8006cc0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8006a62:	f006 fff1 	bl	800da48 <HAL_GPIO_WritePin>

		loopnum = 0;
 8006a66:	4b97      	ldr	r3, [pc, #604]	@ (8006cc4 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e013      	b.n	8006a9a <HAL_SPI_RxCpltCallback+0xa2>
			if(NRF24.RxData[12+abc] == NRF24.Rxcode[abc+12]){
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	330c      	adds	r3, #12
 8006a76:	4a90      	ldr	r2, [pc, #576]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a78:	5cd2      	ldrb	r2, [r2, r3]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	498e      	ldr	r1, [pc, #568]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006a80:	440b      	add	r3, r1
 8006a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d104      	bne.n	8006a94 <HAL_SPI_RxCpltCallback+0x9c>
				loopnum++;
 8006a8a:	4b8e      	ldr	r3, [pc, #568]	@ (8006cc4 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	4a8c      	ldr	r2, [pc, #560]	@ (8006cc4 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006a92:	6013      	str	r3, [r2, #0]
		for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b09      	cmp	r3, #9
 8006a9e:	dde8      	ble.n	8006a72 <HAL_SPI_RxCpltCallback+0x7a>
			}
		}

		if(loopnum == 10){
 8006aa0:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b0a      	cmp	r3, #10
 8006aa6:	f040 80ef 	bne.w	8006c88 <HAL_SPI_RxCpltCallback+0x290>
			convert_array_to_value(NRF24.RxData, &MYDRON.Pitch.Wanted_v, 0, 2);//pitch
 8006aaa:	2302      	movs	r3, #2
 8006aac:	2200      	movs	r2, #0
 8006aae:	4986      	ldr	r1, [pc, #536]	@ (8006cc8 <HAL_SPI_RxCpltCallback+0x2d0>)
 8006ab0:	4881      	ldr	r0, [pc, #516]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006ab2:	f000 f925 	bl	8006d00 <convert_array_to_value>
			convert_array_to_value(NRF24.RxData, &MYDRON.Rool.Wanted_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006ab6:	2305      	movs	r3, #5
 8006ab8:	2203      	movs	r2, #3
 8006aba:	4984      	ldr	r1, [pc, #528]	@ (8006ccc <HAL_SPI_RxCpltCallback+0x2d4>)
 8006abc:	487e      	ldr	r0, [pc, #504]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006abe:	f000 f91f 	bl	8006d00 <convert_array_to_value>
			if(wobble_strenght == 1){
 8006ac2:	4b83      	ldr	r3, [pc, #524]	@ (8006cd0 <HAL_SPI_RxCpltCallback+0x2d8>)
 8006ac4:	edd3 7a00 	vldr	s15, [r3]
 8006ac8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006acc:	eef4 7a47 	vcmp.f32	s15, s14
 8006ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad4:	d105      	bne.n	8006ae2 <HAL_SPI_RxCpltCallback+0xea>
				convert_array_to_value(NRF24.RxData, &MYDRON.Thrust.Wanted, 6, 8);//
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	2206      	movs	r2, #6
 8006ada:	497e      	ldr	r1, [pc, #504]	@ (8006cd4 <HAL_SPI_RxCpltCallback+0x2dc>)
 8006adc:	4876      	ldr	r0, [pc, #472]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006ade:	f000 f90f 	bl	8006d00 <convert_array_to_value>
			}
			convert_array_to_value(NRF24.RxData, &MYDRON.Yaw.Wanted_v, 9, 11);//
 8006ae2:	230b      	movs	r3, #11
 8006ae4:	2209      	movs	r2, #9
 8006ae6:	497c      	ldr	r1, [pc, #496]	@ (8006cd8 <HAL_SPI_RxCpltCallback+0x2e0>)
 8006ae8:	4873      	ldr	r0, [pc, #460]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006aea:	f000 f909 	bl	8006d00 <convert_array_to_value>
			MYDRON.Status.Connection = DRON_CONNECTED;
 8006aee:	4b7b      	ldr	r3, [pc, #492]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154

			if(NRF24.RxData[23] == 1){
 8006af6:	4b70      	ldr	r3, [pc, #448]	@ (8006cb8 <HAL_SPI_RxCpltCallback+0x2c0>)
 8006af8:	7ddb      	ldrb	r3, [r3, #23]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d11b      	bne.n	8006b36 <HAL_SPI_RxCpltCallback+0x13e>
				ESC_POWER_1;
 8006afe:	2201      	movs	r2, #1
 8006b00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b04:	4876      	ldr	r0, [pc, #472]	@ (8006ce0 <HAL_SPI_RxCpltCallback+0x2e8>)
 8006b06:	f006 ff9f 	bl	800da48 <HAL_GPIO_WritePin>
				LED_R_1;
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006b10:	486b      	ldr	r0, [pc, #428]	@ (8006cc0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8006b12:	f006 ff99 	bl	800da48 <HAL_GPIO_WritePin>
				if(SD_enable_Flag == 1){
 8006b16:	4b73      	ldr	r3, [pc, #460]	@ (8006ce4 <HAL_SPI_RxCpltCallback+0x2ec>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d10b      	bne.n	8006b36 <HAL_SPI_RxCpltCallback+0x13e>
					f_close(&fil);
 8006b1e:	4872      	ldr	r0, [pc, #456]	@ (8006ce8 <HAL_SPI_RxCpltCallback+0x2f0>)
 8006b20:	f016 fc74 	bl	801d40c <f_close>
					fresult = f_mount(NULL, "/", 1);
 8006b24:	2201      	movs	r2, #1
 8006b26:	4971      	ldr	r1, [pc, #452]	@ (8006cec <HAL_SPI_RxCpltCallback+0x2f4>)
 8006b28:	2000      	movs	r0, #0
 8006b2a:	f016 f84f 	bl	801cbcc <f_mount>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b6f      	ldr	r3, [pc, #444]	@ (8006cf0 <HAL_SPI_RxCpltCallback+0x2f8>)
 8006b34:	701a      	strb	r2, [r3, #0]
					}
			}

			if(MYDRON.Thrust.Wanted == 9999){
 8006b36:	4b69      	ldr	r3, [pc, #420]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b38:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006b3c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d103      	bne.n	8006b4c <HAL_SPI_RxCpltCallback+0x154>
				MYDRON.Thrust.Max_Flag = THRUST_MAX;
 8006b44:	4b65      	ldr	r3, [pc, #404]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b46:	2210      	movs	r2, #16
 8006b48:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		  	}
			MYDRON.Thrust.Wanted = MYDRON.Thrust.Wanted * 20;
 8006b4c:	4b63      	ldr	r3, [pc, #396]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b4e:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	0092      	lsls	r2, r2, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	b21a      	sxth	r2, r3
 8006b60:	4b5e      	ldr	r3, [pc, #376]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b62:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			MYDRON.Thrust.Wanted = MYDRON.Thrust.Wanted - 10000;
 8006b66:	4b5d      	ldr	r3, [pc, #372]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b68:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	4b61      	ldr	r3, [pc, #388]	@ (8006cf4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8006b70:	4413      	add	r3, r2
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	b21a      	sxth	r2, r3
 8006b76:	4b59      	ldr	r3, [pc, #356]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b78:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			if(MYDRON.Thrust.Wanted < 0){
 8006b7c:	4b57      	ldr	r3, [pc, #348]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b7e:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	@ 0x92
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da03      	bge.n	8006b8e <HAL_SPI_RxCpltCallback+0x196>
				MYDRON.Thrust.Wanted = 0;
 8006b86:	4b55      	ldr	r3, [pc, #340]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			}

			MYDRON.Rool.Wanted_rx = (MYDRON.Rool.Wanted_v - 500)*MYDRON.Rool.Wanted_Factor;//MYDRON.Rool.Wanted_rx (-90 <-> 90)
 8006b8e:	4b53      	ldr	r3, [pc, #332]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006b90:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8006b94:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ba0:	4b4e      	ldr	r3, [pc, #312]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006ba2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bae:	ee17 3a90 	vmov	r3, s15
 8006bb2:	b21a      	sxth	r2, r3
 8006bb4:	4b49      	ldr	r3, [pc, #292]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bb6:	861a      	strh	r2, [r3, #48]	@ 0x30
			MYDRON.Pitch.Wanted_rx = (MYDRON.Pitch.Wanted_v - 500)*MYDRON.Pitch.Wanted_Factor;// (-450 <-> 450)
 8006bb8:	4b48      	ldr	r3, [pc, #288]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006bbe:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bca:	4b44      	ldr	r3, [pc, #272]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8006bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bd8:	ee17 3a90 	vmov	r3, s15
 8006bdc:	b21a      	sxth	r2, r3
 8006bde:	4b3f      	ldr	r3, [pc, #252]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006be0:	801a      	strh	r2, [r3, #0]
			MYDRON.Yaw.Wanted_rx = (MYDRON.Yaw.Wanted_v - 500)*MYDRON.Yaw.Wanted_Factor;// wanted yaw is in deg/s
 8006be2:	4b3e      	ldr	r3, [pc, #248]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006be4:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 8006be8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bf4:	4b39      	ldr	r3, [pc, #228]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006bf6:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8006bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c02:	ee17 3a90 	vmov	r3, s15
 8006c06:	b21a      	sxth	r2, r3
 8006c08:	4b34      	ldr	r3, [pc, #208]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

			MYDRON.Rool.Wanted_rx = (MYDRON.Rool.Wanted_rx >= 300) ? 300 : (MYDRON.Rool.Wanted_rx <= -300) ? -300 : MYDRON.Rool.Wanted_rx;
 8006c0e:	4b33      	ldr	r3, [pc, #204]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006c14:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006c18:	da08      	bge.n	8006c2c <HAL_SPI_RxCpltCallback+0x234>
 8006c1a:	4b30      	ldr	r3, [pc, #192]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006c20:	4a35      	ldr	r2, [pc, #212]	@ (8006cf8 <HAL_SPI_RxCpltCallback+0x300>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	bfb8      	it	lt
 8006c26:	4613      	movlt	r3, r2
 8006c28:	b21b      	sxth	r3, r3
 8006c2a:	e001      	b.n	8006c30 <HAL_SPI_RxCpltCallback+0x238>
 8006c2c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006c30:	4a2a      	ldr	r2, [pc, #168]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c32:	8613      	strh	r3, [r2, #48]	@ 0x30
			MYDRON.Pitch.Wanted_rx = (MYDRON.Pitch.Wanted_rx >= 300) ? 300 : (MYDRON.Pitch.Wanted_rx <= -300) ? -300 : MYDRON.Pitch.Wanted_rx;
 8006c34:	4b29      	ldr	r3, [pc, #164]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c3a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006c3e:	da08      	bge.n	8006c52 <HAL_SPI_RxCpltCallback+0x25a>
 8006c40:	4b26      	ldr	r3, [pc, #152]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c46:	4a2c      	ldr	r2, [pc, #176]	@ (8006cf8 <HAL_SPI_RxCpltCallback+0x300>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	bfb8      	it	lt
 8006c4c:	4613      	movlt	r3, r2
 8006c4e:	b21b      	sxth	r3, r3
 8006c50:	e001      	b.n	8006c56 <HAL_SPI_RxCpltCallback+0x25e>
 8006c52:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006c56:	4a21      	ldr	r2, [pc, #132]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c58:	8013      	strh	r3, [r2, #0]
			MYDRON.Yaw.Wanted_rx = (MYDRON.Yaw.Wanted_rx >= 300) ? 300 : (MYDRON.Yaw.Wanted_rx <= -300) ? -300 : MYDRON.Yaw.Wanted_rx;
 8006c5a:	4b20      	ldr	r3, [pc, #128]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c5c:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 8006c60:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006c64:	da08      	bge.n	8006c78 <HAL_SPI_RxCpltCallback+0x280>
 8006c66:	4b1d      	ldr	r3, [pc, #116]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c68:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 8006c6c:	4a22      	ldr	r2, [pc, #136]	@ (8006cf8 <HAL_SPI_RxCpltCallback+0x300>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	bfb8      	it	lt
 8006c72:	4613      	movlt	r3, r2
 8006c74:	b21b      	sxth	r3, r3
 8006c76:	e001      	b.n	8006c7c <HAL_SPI_RxCpltCallback+0x284>
 8006c78:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006c7c:	4a17      	ldr	r2, [pc, #92]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c7e:	f8a2 3060 	strh.w	r3, [r2, #96]	@ 0x60

			NRF_TIM_Inte = 0;
 8006c82:	4b1e      	ldr	r3, [pc, #120]	@ (8006cfc <HAL_SPI_RxCpltCallback+0x304>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
		}

		if(loopnum > 0 && loopnum < 10){
 8006c88:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc4 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <HAL_SPI_RxCpltCallback+0x2a8>
 8006c90:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc4 <HAL_SPI_RxCpltCallback+0x2cc>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	d803      	bhi.n	8006ca0 <HAL_SPI_RxCpltCallback+0x2a8>
			MYDRON.Status.Connection = DRON_CONNECTION_ERROR;
 8006c98:	4b10      	ldr	r3, [pc, #64]	@ (8006cdc <HAL_SPI_RxCpltCallback+0x2e4>)
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	f883 2154 	strb.w	r2, [r3, #340]	@ 0x154
		}
		LED_Y_0;
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ca6:	4806      	ldr	r0, [pc, #24]	@ (8006cc0 <HAL_SPI_RxCpltCallback+0x2c8>)
 8006ca8:	f006 fece 	bl	800da48 <HAL_GPIO_WritePin>
	}
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	0000007c 	.word	0x0000007c
 8006cb8:	000000fc 	.word	0x000000fc
 8006cbc:	58021000 	.word	0x58021000
 8006cc0:	58020400 	.word	0x58020400
 8006cc4:	000041d8 	.word	0x000041d8
 8006cc8:	0000018a 	.word	0x0000018a
 8006ccc:	000001ba 	.word	0x000001ba
 8006cd0:	000041cc 	.word	0x000041cc
 8006cd4:	0000021a 	.word	0x0000021a
 8006cd8:	000001ea 	.word	0x000001ea
 8006cdc:	00000188 	.word	0x00000188
 8006ce0:	58021800 	.word	0x58021800
 8006ce4:	000041c8 	.word	0x000041c8
 8006ce8:	24001ef0 	.word	0x24001ef0
 8006cec:	0801e260 	.word	0x0801e260
 8006cf0:	24001eec 	.word	0x24001eec
 8006cf4:	ffffd8f0 	.word	0xffffd8f0
 8006cf8:	fffffed4 	.word	0xfffffed4
 8006cfc:	00000080 	.word	0x00000080

08006d00 <convert_array_to_value>:

void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8006d00:	b580      	push	{r7, lr}
 8006d02:	ed2d 8b04 	vpush	{d8-d9}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4611      	mov	r1, r2
 8006d10:	461a      	mov	r2, r3
 8006d12:	460b      	mov	r3, r1
 8006d14:	71fb      	strb	r3, [r7, #7]
 8006d16:	4613      	mov	r3, r2
 8006d18:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8006d20:	79ba      	ldrb	r2, [r7, #6]
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e02e      	b.n	8006d8c <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8006d3c:	79fa      	ldrb	r2, [r7, #7]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	461a      	mov	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d60:	eeb0 1b47 	vmov.f64	d1, d7
 8006d64:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006d68:	f016 fee2 	bl	801db30 <pow>
 8006d6c:	eeb0 7b40 	vmov.f64	d7, d0
 8006d70:	ee29 7b07 	vmul.f64	d7, d9, d7
 8006d74:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006d78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006d7c:	ee17 3a90 	vmov	r3, s15
 8006d80:	b21a      	sxth	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	dacc      	bge.n	8006d2e <convert_array_to_value+0x2e>
	}

}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	ecbd 8b04 	vpop	{d8-d9}
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006da2:	b590      	push	{r4, r7, lr}
 8006da4:	b087      	sub	sp, #28
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	4611      	mov	r1, r2
 8006dac:	461a      	mov	r2, r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	80fb      	strh	r3, [r7, #6]
 8006db2:	460b      	mov	r3, r1
 8006db4:	717b      	strb	r3, [r7, #5]
 8006db6:	4613      	mov	r3, r2
 8006db8:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006dc2:	793a      	ldrb	r2, [r7, #4]
 8006dc4:	797b      	ldrb	r3, [r7, #5]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e03e      	b.n	8006e4e <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8006dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d028      	beq.n	8006e2a <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	4619      	mov	r1, r3
 8006de0:	200a      	movs	r0, #10
 8006de2:	f000 f83d 	bl	8006e60 <potenga>
 8006de6:	4603      	mov	r3, r0
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	80fb      	strh	r3, [r7, #6]
			x++;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	3301      	adds	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8006df8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e0a:	eeb0 1b47 	vmov.f64	d1, d7
 8006e0e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006e12:	f016 fe8d 	bl	801db30 <pow>
 8006e16:	eeb0 7b40 	vmov.f64	d7, d0
 8006e1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e1e:	ee17 3a90 	vmov	r3, s15
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	429c      	cmp	r4, r3
 8006e26:	dad3      	bge.n	8006dd0 <convert_value_to_array+0x2e>
 8006e28:	e000      	b.n	8006e2c <convert_value_to_array+0x8a>
				break;
 8006e2a:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8006e2c:	797a      	ldrb	r2, [r7, #5]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4413      	add	r3, r2
 8006e32:	461a      	mov	r2, r3
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	4413      	add	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	3301      	adds	r3, #1
 8006e42:	613b      	str	r3, [r7, #16]
		x = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	dad0      	bge.n	8006df8 <convert_value_to_array+0x56>
	}
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd90      	pop	{r4, r7, pc}

08006e60 <potenga>:
uint32_t potenga(int a, int b){
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <potenga+0x18>
		return 1;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e02d      	b.n	8006ed4 <potenga+0x74>
	}
	if(b == 1){
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <potenga+0x22>
		return a;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	e028      	b.n	8006ed4 <potenga+0x74>
	}
	if(b > 1){
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	dd10      	ble.n	8006eaa <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	e007      	b.n	8006e9e <potenga+0x3e>
			a = a*c;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	dbf3      	blt.n	8006e8e <potenga+0x2e>
		}
		return a;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	e014      	b.n	8006ed4 <potenga+0x74>
	}
	if(b < 0){
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da10      	bge.n	8006ed2 <potenga+0x72>
		for(int i = 0; i < b; i++){
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	613b      	str	r3, [r7, #16]
 8006eb4:	e007      	b.n	8006ec6 <potenga+0x66>
			a = a/c;
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ebe:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	dbf3      	blt.n	8006eb6 <potenga+0x56>
		}
		return a;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	e000      	b.n	8006ed4 <potenga+0x74>
	}
	return a;
 8006ed2:	687b      	ldr	r3, [r7, #4]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 8006eea:	edd7 7a01 	vldr	s15, [r7, #4]
 8006eee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef6:	d504      	bpl.n	8006f02 <WartoscBezwgledna+0x22>
 8006ef8:	edd7 7a01 	vldr	s15, [r7, #4]
 8006efc:	eef1 7a67 	vneg.f32	s15, s15
 8006f00:	e001      	b.n	8006f06 <WartoscBezwgledna+0x26>
 8006f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f06:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	ee07 3a90 	vmov	s15, r3
}
 8006f10:	eeb0 0a67 	vmov.f32	s0, s15
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	71fb      	strb	r3, [r7, #7]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	71bb      	strb	r3, [r7, #6]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8006f32:	4b09      	ldr	r3, [pc, #36]	@ (8006f58 <RGB_LED_Set_color+0x38>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	797a      	ldrb	r2, [r7, #5]
 8006f38:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8006f3a:	4b07      	ldr	r3, [pc, #28]	@ (8006f58 <RGB_LED_Set_color+0x38>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	79fa      	ldrb	r2, [r7, #7]
 8006f40:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8006f42:	4b05      	ldr	r3, [pc, #20]	@ (8006f58 <RGB_LED_Set_color+0x38>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	79ba      	ldrb	r2, [r7, #6]
 8006f48:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	24000380 	.word	0x24000380
 8006f5c:	00000000 	.word	0x00000000

08006f60 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f78:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8006fc8 <RGB_LED_For_BAT+0x68>
 8006f7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f80:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8006fd0 <RGB_LED_For_BAT+0x70>
 8006f84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f8c:	edc7 7a00 	vstr	s15, [r7]
 8006f90:	783b      	ldrb	r3, [r7, #0]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	79fa      	ldrb	r2, [r7, #7]
 8006f96:	ee07 2a90 	vmov	s15, r2
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006fa2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006fc8 <RGB_LED_For_BAT+0x68>
 8006fa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006faa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fae:	edc7 7a00 	vstr	s15, [r7]
 8006fb2:	783a      	ldrb	r2, [r7, #0]
 8006fb4:	b2d1      	uxtb	r1, r2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff ffb1 	bl	8006f20 <RGB_LED_Set_color>
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	66666666 	.word	0x66666666
 8006fcc:	40046666 	.word	0x40046666
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	406fe000 	.word	0x406fe000

08006fd8 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6039      	str	r1, [r7, #0]
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	80fb      	strh	r3, [r7, #6]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	717b      	strb	r3, [r7, #5]
 8006fec:	4613      	mov	r3, r2
 8006fee:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006ff8:	793a      	ldrb	r2, [r7, #4]
 8006ffa:	797b      	ldrb	r3, [r7, #5]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007004:	2b00      	cmp	r3, #0
 8007006:	da04      	bge.n	8007012 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007008:	797b      	ldrb	r3, [r7, #5]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4413      	add	r3, r2
 800700e:	222d      	movs	r2, #45	@ 0x2d
 8007010:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8007012:	2301      	movs	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	e035      	b.n	8007084 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01d      	beq.n	800705c <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	4619      	mov	r1, r3
 8007028:	200a      	movs	r0, #10
 800702a:	f7ff ff19 	bl	8006e60 <potenga>
 800702e:	4603      	mov	r3, r0
 8007030:	b29b      	uxth	r3, r3
 8007032:	88fa      	ldrh	r2, [r7, #6]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	b29b      	uxth	r3, r3
 8007038:	80fb      	strh	r3, [r7, #6]
			x++;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	3301      	adds	r3, #1
 800703e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007040:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	4619      	mov	r1, r3
 800704c:	200a      	movs	r0, #10
 800704e:	f7ff ff07 	bl	8006e60 <potenga>
 8007052:	4603      	mov	r3, r0
 8007054:	b29b      	uxth	r3, r3
 8007056:	429c      	cmp	r4, r3
 8007058:	dade      	bge.n	8007018 <convert_value_to_array2+0x40>
 800705a:	e000      	b.n	800705e <convert_value_to_array2+0x86>
				break;
 800705c:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	b2da      	uxtb	r2, r3
 8007062:	7979      	ldrb	r1, [r7, #5]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	440b      	add	r3, r1
 8007068:	4619      	mov	r1, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	440b      	add	r3, r1
 800706e:	3230      	adds	r2, #48	@ 0x30
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	3301      	adds	r3, #1
 8007078:	613b      	str	r3, [r7, #16]
		x = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	dad9      	bge.n	8007040 <convert_value_to_array2+0x68>
	}
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	bd90      	pop	{r4, r7, pc}

08007096 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007096:	b580      	push	{r7, lr}
 8007098:	ed2d 8b02 	vpush	{d8}
 800709c:	b08c      	sub	sp, #48	@ 0x30
 800709e:	af00      	add	r7, sp, #0
 80070a0:	ed87 0a03 	vstr	s0, [r7, #12]
 80070a4:	60b8      	str	r0, [r7, #8]
 80070a6:	460b      	mov	r3, r1
 80070a8:	71fb      	strb	r3, [r7, #7]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80070b6:	79ba      	ldrb	r2, [r7, #6]
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80070c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80070c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	d50a      	bpl.n	80070e6 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4413      	add	r3, r2
 80070d6:	222d      	movs	r2, #45	@ 0x2d
 80070d8:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 80070da:	edd7 7a03 	vldr	s15, [r7, #12]
 80070de:	eef1 7a67 	vneg.f32	s15, s15
 80070e2:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 80070e6:	2301      	movs	r3, #1
 80070e8:	61fb      	str	r3, [r7, #28]
 80070ea:	e021      	b.n	8007130 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070fa:	eeb0 1b47 	vmov.f64	d1, d7
 80070fe:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007102:	f016 fd15 	bl	801db30 <pow>
 8007106:	eeb0 7b40 	vmov.f64	d7, d0
 800710a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800710e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 8007112:	ed97 7a03 	vldr	s14, [r7, #12]
 8007116:	edd7 7a04 	vldr	s15, [r7, #16]
 800711a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800711e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007122:	da0b      	bge.n	800713c <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	3301      	adds	r3, #1
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3301      	adds	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	429a      	cmp	r2, r3
 8007138:	dbd8      	blt.n	80070ec <convert_value_to_array3+0x56>
 800713a:	e000      	b.n	800713e <convert_value_to_array3+0xa8>
			break;
 800713c:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	2b00      	cmp	r3, #0
 800714c:	dc07      	bgt.n	800715e <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	3301      	adds	r3, #1
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	4413      	add	r3, r2
 8007156:	222e      	movs	r2, #46	@ 0x2e
 8007158:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	dd0a      	ble.n	800717a <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 8007164:	79fa      	ldrb	r2, [r7, #7]
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	4413      	add	r3, r2
 800716a:	3301      	adds	r3, #1
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	222e      	movs	r2, #46	@ 0x2e
 8007172:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	3301      	adds	r3, #1
 8007178:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 800717a:	edd7 7a03 	vldr	s15, [r7, #12]
 800717e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	1e5a      	subs	r2, r3, #1
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007192:	eeb0 1b47 	vmov.f64	d1, d7
 8007196:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800719a:	f016 fcc9 	bl	801db30 <pow>
 800719e:	eeb0 7b40 	vmov.f64	d7, d0
 80071a2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80071a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80071aa:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80071ae:	2300      	movs	r3, #0
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	e05f      	b.n	8007274 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80071b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80071b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c0:	d93d      	bls.n	800723e <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80071c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80071c6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	1e5a      	subs	r2, r3, #1
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80071da:	eeb0 1b47 	vmov.f64	d1, d7
 80071de:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80071e2:	f016 fca5 	bl	801db30 <pow>
 80071e6:	eeb0 7b40 	vmov.f64	d7, d0
 80071ea:	ee38 7b47 	vsub.f64	d7, d8, d7
 80071ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80071f2:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	3301      	adds	r3, #1
 80071fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800720c:	eeb0 1b47 	vmov.f64	d1, d7
 8007210:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007214:	f016 fc8c 	bl	801db30 <pow>
 8007218:	eeb0 7b40 	vmov.f64	d7, d0
 800721c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007220:	ee17 3a90 	vmov	r3, s15
 8007224:	b29b      	uxth	r3, r3
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800722e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	dabb      	bge.n	80071b4 <convert_value_to_array3+0x11e>
 800723c:	e000      	b.n	8007240 <convert_value_to_array3+0x1aa>
				break;
 800723e:	bf00      	nop
		}

        if(loopnum == kropka){
 8007240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	429a      	cmp	r2, r3
 8007246:	d102      	bne.n	800724e <convert_value_to_array3+0x1b8>
            loopnum++;
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	3301      	adds	r3, #1
 800724c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	b2da      	uxtb	r2, r3
 8007252:	79f9      	ldrb	r1, [r7, #7]
 8007254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007256:	440b      	add	r3, r1
 8007258:	4619      	mov	r1, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	440b      	add	r3, r1
 800725e:	3230      	adds	r2, #48	@ 0x30
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	3301      	adds	r3, #1
 8007268:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	3301      	adds	r3, #1
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	3b02      	subs	r3, #2
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	429a      	cmp	r2, r3
 800727c:	dbbe      	blt.n	80071fc <convert_value_to_array3+0x166>
	}
}
 800727e:	bf00      	nop
 8007280:	bf00      	nop
 8007282:	3730      	adds	r7, #48	@ 0x30
 8007284:	46bd      	mov	sp, r7
 8007286:	ecbd 8b02 	vpop	{d8}
 800728a:	bd80      	pop	{r7, pc}

0800728c <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 8007294:	4ba9      	ldr	r3, [pc, #676]	@ (800753c <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	b218      	sxth	r0, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	01db      	lsls	r3, r3, #7
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	01db      	lsls	r3, r3, #7
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	3308      	adds	r3, #8
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	49a4      	ldr	r1, [pc, #656]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072b0:	f7ff fe92 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	01db      	lsls	r3, r3, #7
 80072b8:	3308      	adds	r3, #8
 80072ba:	4aa1      	ldr	r2, [pc, #644]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072bc:	2120      	movs	r1, #32
 80072be:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.Thrust.Speed_1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 80072c0:	4ba0      	ldr	r3, [pc, #640]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 80072c2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80072c6:	b218      	sxth	r0, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	01db      	lsls	r3, r3, #7
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	3309      	adds	r3, #9
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	01db      	lsls	r3, r3, #7
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	330f      	adds	r3, #15
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	4997      	ldr	r1, [pc, #604]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072e2:	f7ff fe79 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	01db      	lsls	r3, r3, #7
 80072ea:	330f      	adds	r3, #15
 80072ec:	4a94      	ldr	r2, [pc, #592]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80072ee:	2120      	movs	r1, #32
 80072f0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 80072f2:	4b94      	ldr	r3, [pc, #592]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 80072f4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 80072f8:	b218      	sxth	r0, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	01db      	lsls	r3, r3, #7
 8007300:	b2db      	uxtb	r3, r3
 8007302:	3310      	adds	r3, #16
 8007304:	b2da      	uxtb	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	01db      	lsls	r3, r3, #7
 800730c:	b2db      	uxtb	r3, r3
 800730e:	3316      	adds	r3, #22
 8007310:	b2db      	uxtb	r3, r3
 8007312:	498b      	ldr	r1, [pc, #556]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007314:	f7ff fe60 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	01db      	lsls	r3, r3, #7
 800731c:	3316      	adds	r3, #22
 800731e:	4a88      	ldr	r2, [pc, #544]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007320:	2120      	movs	r1, #32
 8007322:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007324:	4b87      	ldr	r3, [pc, #540]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007326:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800732a:	b218      	sxth	r0, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	01db      	lsls	r3, r3, #7
 8007332:	b2db      	uxtb	r3, r3
 8007334:	3317      	adds	r3, #23
 8007336:	b2da      	uxtb	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	01db      	lsls	r3, r3, #7
 800733e:	b2db      	uxtb	r3, r3
 8007340:	331d      	adds	r3, #29
 8007342:	b2db      	uxtb	r3, r3
 8007344:	497e      	ldr	r1, [pc, #504]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007346:	f7ff fe47 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	01db      	lsls	r3, r3, #7
 800734e:	331d      	adds	r3, #29
 8007350:	4a7b      	ldr	r2, [pc, #492]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007352:	2120      	movs	r1, #32
 8007354:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Thrust.Speed_4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007356:	4b7b      	ldr	r3, [pc, #492]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007358:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800735c:	b218      	sxth	r0, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	01db      	lsls	r3, r3, #7
 8007364:	b2db      	uxtb	r3, r3
 8007366:	331e      	adds	r3, #30
 8007368:	b2da      	uxtb	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	01db      	lsls	r3, r3, #7
 8007370:	b2db      	uxtb	r3, r3
 8007372:	3324      	adds	r3, #36	@ 0x24
 8007374:	b2db      	uxtb	r3, r3
 8007376:	4972      	ldr	r1, [pc, #456]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007378:	f7ff fe2e 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	01db      	lsls	r3, r3, #7
 8007380:	3324      	adds	r3, #36	@ 0x24
 8007382:	4a6f      	ldr	r2, [pc, #444]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007384:	2120      	movs	r1, #32
 8007386:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(MYDRON.Rool.Wanted, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007388:	4b6e      	ldr	r3, [pc, #440]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 800738a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	01db      	lsls	r3, r3, #7
 8007394:	b2db      	uxtb	r3, r3
 8007396:	3325      	adds	r3, #37	@ 0x25
 8007398:	b2d9      	uxtb	r1, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	01db      	lsls	r3, r3, #7
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	332d      	adds	r3, #45	@ 0x2d
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	4865      	ldr	r0, [pc, #404]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073aa:	eeb0 0a67 	vmov.f32	s0, s15
 80073ae:	f7ff fe72 	bl	8007096 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	01db      	lsls	r3, r3, #7
 80073b6:	332d      	adds	r3, #45	@ 0x2d
 80073b8:	4a61      	ldr	r2, [pc, #388]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073ba:	2120      	movs	r1, #32
 80073bc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(MYDRON.Pitch.Wanted, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80073be:	4b61      	ldr	r3, [pc, #388]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 80073c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	01db      	lsls	r3, r3, #7
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	332e      	adds	r3, #46	@ 0x2e
 80073ce:	b2d9      	uxtb	r1, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	01db      	lsls	r3, r3, #7
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	3336      	adds	r3, #54	@ 0x36
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	4858      	ldr	r0, [pc, #352]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073e0:	eeb0 0a67 	vmov.f32	s0, s15
 80073e4:	f7ff fe57 	bl	8007096 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	01db      	lsls	r3, r3, #7
 80073ec:	3336      	adds	r3, #54	@ 0x36
 80073ee:	4a54      	ldr	r2, [pc, #336]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80073f0:	2120      	movs	r1, #32
 80073f2:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(MYDRON.Yaw.Wanted, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 80073f4:	4b53      	ldr	r3, [pc, #332]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 80073f6:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	01db      	lsls	r3, r3, #7
 8007400:	b2db      	uxtb	r3, r3
 8007402:	3337      	adds	r3, #55	@ 0x37
 8007404:	b2d9      	uxtb	r1, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	01db      	lsls	r3, r3, #7
 800740c:	b2db      	uxtb	r3, r3
 800740e:	333f      	adds	r3, #63	@ 0x3f
 8007410:	b2db      	uxtb	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	484a      	ldr	r0, [pc, #296]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007416:	eeb0 0a67 	vmov.f32	s0, s15
 800741a:	f7ff fe3c 	bl	8007096 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	01db      	lsls	r3, r3, #7
 8007422:	333f      	adds	r3, #63	@ 0x3f
 8007424:	4a46      	ldr	r2, [pc, #280]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007426:	2120      	movs	r1, #32
 8007428:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(MYDRON.Pitch.Angle_Error_Sum, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 800742a:	4b46      	ldr	r3, [pc, #280]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 800742c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742e:	b218      	sxth	r0, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	01db      	lsls	r3, r3, #7
 8007436:	b2db      	uxtb	r3, r3
 8007438:	3340      	adds	r3, #64	@ 0x40
 800743a:	b2da      	uxtb	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	01db      	lsls	r3, r3, #7
 8007442:	b2db      	uxtb	r3, r3
 8007444:	3348      	adds	r3, #72	@ 0x48
 8007446:	b2db      	uxtb	r3, r3
 8007448:	493d      	ldr	r1, [pc, #244]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800744a:	f7ff fdc5 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	01db      	lsls	r3, r3, #7
 8007452:	3348      	adds	r3, #72	@ 0x48
 8007454:	4a3a      	ldr	r2, [pc, #232]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007456:	2120      	movs	r1, #32
 8007458:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Rool.Angle_Error_Sum, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 800745a:	4b3a      	ldr	r3, [pc, #232]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 800745c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800745e:	b218      	sxth	r0, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	01db      	lsls	r3, r3, #7
 8007466:	b2db      	uxtb	r3, r3
 8007468:	3349      	adds	r3, #73	@ 0x49
 800746a:	b2da      	uxtb	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	01db      	lsls	r3, r3, #7
 8007472:	b2db      	uxtb	r3, r3
 8007474:	3351      	adds	r3, #81	@ 0x51
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4931      	ldr	r1, [pc, #196]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800747a:	f7ff fdad 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	01db      	lsls	r3, r3, #7
 8007482:	3351      	adds	r3, #81	@ 0x51
 8007484:	4a2e      	ldr	r2, [pc, #184]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007486:	2120      	movs	r1, #32
 8007488:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Yaw.Angle_Error_Sum, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 800748a:	4b2e      	ldr	r3, [pc, #184]	@ (8007544 <uSD_Card_SendData_To_Buffer+0x2b8>)
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007490:	b218      	sxth	r0, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	01db      	lsls	r3, r3, #7
 8007498:	b2db      	uxtb	r3, r3
 800749a:	3352      	adds	r3, #82	@ 0x52
 800749c:	b2da      	uxtb	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	01db      	lsls	r3, r3, #7
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	335a      	adds	r3, #90	@ 0x5a
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4925      	ldr	r1, [pc, #148]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80074ac:	f7ff fd94 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	01db      	lsls	r3, r3, #7
 80074b4:	335a      	adds	r3, #90	@ 0x5a
 80074b6:	4a22      	ldr	r2, [pc, #136]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80074b8:	2120      	movs	r1, #32
 80074ba:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 80074bc:	4b22      	ldr	r3, [pc, #136]	@ (8007548 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80074be:	edd3 7a00 	vldr	s15, [r3]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	01db      	lsls	r3, r3, #7
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	335b      	adds	r3, #91	@ 0x5b
 80074cc:	b2d9      	uxtb	r1, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	01db      	lsls	r3, r3, #7
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	3362      	adds	r3, #98	@ 0x62
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	461a      	mov	r2, r3
 80074dc:	4818      	ldr	r0, [pc, #96]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80074de:	eeb0 0a67 	vmov.f32	s0, s15
 80074e2:	f7ff fdd8 	bl	8007096 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	01db      	lsls	r3, r3, #7
 80074ea:	3362      	adds	r3, #98	@ 0x62
 80074ec:	4a14      	ldr	r2, [pc, #80]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80074ee:	2120      	movs	r1, #32
 80074f0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 80074f2:	4b15      	ldr	r3, [pc, #84]	@ (8007548 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80074f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	01db      	lsls	r3, r3, #7
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	3363      	adds	r3, #99	@ 0x63
 8007502:	b2d9      	uxtb	r1, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	01db      	lsls	r3, r3, #7
 800750a:	b2db      	uxtb	r3, r3
 800750c:	336a      	adds	r3, #106	@ 0x6a
 800750e:	b2db      	uxtb	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	480b      	ldr	r0, [pc, #44]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007514:	eeb0 0a67 	vmov.f32	s0, s15
 8007518:	f7ff fdbd 	bl	8007096 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	01db      	lsls	r3, r3, #7
 8007520:	336a      	adds	r3, #106	@ 0x6a
 8007522:	4a07      	ldr	r2, [pc, #28]	@ (8007540 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007524:	2120      	movs	r1, #32
 8007526:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007528:	4b07      	ldr	r3, [pc, #28]	@ (8007548 <uSD_Card_SendData_To_Buffer+0x2bc>)
 800752a:	edd3 7a02 	vldr	s15, [r3, #8]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	01db      	lsls	r3, r3, #7
 8007534:	b2db      	uxtb	r3, r3
 8007536:	336b      	adds	r3, #107	@ 0x6b
 8007538:	e008      	b.n	800754c <uSD_Card_SendData_To_Buffer+0x2c0>
 800753a:	bf00      	nop
 800753c:	000041c0 	.word	0x000041c0
 8007540:	24002f28 	.word	0x24002f28
 8007544:	00000188 	.word	0x00000188
 8007548:	00000084 	.word	0x00000084
 800754c:	b2d9      	uxtb	r1, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	01db      	lsls	r3, r3, #7
 8007554:	b2db      	uxtb	r3, r3
 8007556:	3372      	adds	r3, #114	@ 0x72
 8007558:	b2db      	uxtb	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	482e      	ldr	r0, [pc, #184]	@ (8007618 <uSD_Card_SendData_To_Buffer+0x38c>)
 800755e:	eeb0 0a67 	vmov.f32	s0, s15
 8007562:	f7ff fd98 	bl	8007096 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	01db      	lsls	r3, r3, #7
 800756a:	3372      	adds	r3, #114	@ 0x72
 800756c:	4a2a      	ldr	r2, [pc, #168]	@ (8007618 <uSD_Card_SendData_To_Buffer+0x38c>)
 800756e:	2120      	movs	r1, #32
 8007570:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007572:	4b2a      	ldr	r3, [pc, #168]	@ (800761c <uSD_Card_SendData_To_Buffer+0x390>)
 8007574:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8007578:	b218      	sxth	r0, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	01db      	lsls	r3, r3, #7
 8007580:	b2db      	uxtb	r3, r3
 8007582:	3373      	adds	r3, #115	@ 0x73
 8007584:	b2da      	uxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	01db      	lsls	r3, r3, #7
 800758c:	b2db      	uxtb	r3, r3
 800758e:	3377      	adds	r3, #119	@ 0x77
 8007590:	b2db      	uxtb	r3, r3
 8007592:	4921      	ldr	r1, [pc, #132]	@ (8007618 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007594:	f7ff fd20 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	01db      	lsls	r3, r3, #7
 800759c:	3377      	adds	r3, #119	@ 0x77
 800759e:	4a1e      	ldr	r2, [pc, #120]	@ (8007618 <uSD_Card_SendData_To_Buffer+0x38c>)
 80075a0:	2120      	movs	r1, #32
 80075a2:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.Status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 80075a4:	4b1d      	ldr	r3, [pc, #116]	@ (800761c <uSD_Card_SendData_To_Buffer+0x390>)
 80075a6:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 80075aa:	b218      	sxth	r0, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	01db      	lsls	r3, r3, #7
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	3378      	adds	r3, #120	@ 0x78
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	01db      	lsls	r3, r3, #7
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	337a      	adds	r3, #122	@ 0x7a
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	4914      	ldr	r1, [pc, #80]	@ (8007618 <uSD_Card_SendData_To_Buffer+0x38c>)
 80075c6:	f7ff fd07 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	01db      	lsls	r3, r3, #7
 80075ce:	337a      	adds	r3, #122	@ 0x7a
 80075d0:	4a11      	ldr	r2, [pc, #68]	@ (8007618 <uSD_Card_SendData_To_Buffer+0x38c>)
 80075d2:	2120      	movs	r1, #32
 80075d4:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 80075d6:	4b12      	ldr	r3, [pc, #72]	@ (8007620 <uSD_Card_SendData_To_Buffer+0x394>)
 80075d8:	edd3 7a00 	vldr	s15, [r3]
 80075dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075e0:	ee17 3a90 	vmov	r3, s15
 80075e4:	b218      	sxth	r0, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	337b      	adds	r3, #123	@ 0x7b
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	01db      	lsls	r3, r3, #7
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	337f      	adds	r3, #127	@ 0x7f
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4906      	ldr	r1, [pc, #24]	@ (8007618 <uSD_Card_SendData_To_Buffer+0x38c>)
 8007600:	f7ff fcea 	bl	8006fd8 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3301      	adds	r3, #1
 8007608:	01db      	lsls	r3, r3, #7
 800760a:	4a03      	ldr	r2, [pc, #12]	@ (8007618 <uSD_Card_SendData_To_Buffer+0x38c>)
 800760c:	210a      	movs	r1, #10
 800760e:	54d1      	strb	r1, [r2, r3]
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	24002f28 	.word	0x24002f28
 800761c:	00000188 	.word	0x00000188
 8007620:	00000054 	.word	0x00000054

08007624 <Stack_Push>:

void Stack_Push(float data){
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 800762e:	4b22      	ldr	r3, [pc, #136]	@ (80076b8 <Stack_Push+0x94>)
 8007630:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007634:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007638:	3301      	adds	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	4b1e      	ldr	r3, [pc, #120]	@ (80076b8 <Stack_Push+0x94>)
 800763e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007642:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007646:	4b1c      	ldr	r3, [pc, #112]	@ (80076b8 <Stack_Push+0x94>)
 8007648:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800764c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007650:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007654:	d105      	bne.n	8007662 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007656:	4b18      	ldr	r3, [pc, #96]	@ (80076b8 <Stack_Push+0x94>)
 8007658:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800765c:	2200      	movs	r2, #0
 800765e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007662:	4b15      	ldr	r3, [pc, #84]	@ (80076b8 <Stack_Push+0x94>)
 8007664:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007668:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 800766c:	4a12      	ldr	r2, [pc, #72]	@ (80076b8 <Stack_Push+0x94>)
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007676:	4b10      	ldr	r3, [pc, #64]	@ (80076b8 <Stack_Push+0x94>)
 8007678:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800767c:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007680:	3301      	adds	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	4b0c      	ldr	r3, [pc, #48]	@ (80076b8 <Stack_Push+0x94>)
 8007686:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800768a:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 800768e:	4b0a      	ldr	r3, [pc, #40]	@ (80076b8 <Stack_Push+0x94>)
 8007690:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007694:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007698:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800769c:	d105      	bne.n	80076aa <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 800769e:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <Stack_Push+0x94>)
 80076a0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	000002e8 	.word	0x000002e8

080076bc <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 2;
 80076c0:	4b05      	ldr	r3, [pc, #20]	@ (80076d8 <ROOL_MAX_VAL+0x1c>)
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return 5000;
 80076c8:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	00000188 	.word	0x00000188

080076dc <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 1;
 80076e0:	4b04      	ldr	r3, [pc, #16]	@ (80076f4 <ROOL_MIN_VAL+0x18>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return -5000;
 80076e8:	4b03      	ldr	r3, [pc, #12]	@ (80076f8 <ROOL_MIN_VAL+0x1c>)
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	00000188 	.word	0x00000188
 80076f8:	ffffec78 	.word	0xffffec78

080076fc <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 2;
 8007700:	4b05      	ldr	r3, [pc, #20]	@ (8007718 <PITCH_MAX_VAL+0x1c>)
 8007702:	2202      	movs	r2, #2
 8007704:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return 5000;
 8007708:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 800770c:	4618      	mov	r0, r3
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	00000188 	.word	0x00000188

0800771c <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 1;
 8007720:	4b04      	ldr	r3, [pc, #16]	@ (8007734 <PITCH_MIN_VAL+0x18>)
 8007722:	2201      	movs	r2, #1
 8007724:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return -5000;
 8007728:	4b03      	ldr	r3, [pc, #12]	@ (8007738 <PITCH_MIN_VAL+0x1c>)
}
 800772a:	4618      	mov	r0, r3
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	00000188 	.word	0x00000188
 8007738:	ffffec78 	.word	0xffffec78

0800773c <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 2;
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <YAW_MAX_VAL+0x1c>)
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return 5000;
 8007748:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 800774c:	4618      	mov	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	00000188 	.word	0x00000188

0800775c <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 1;
 8007760:	4b04      	ldr	r3, [pc, #16]	@ (8007774 <YAW_MIN_VAL+0x18>)
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return -5000;
 8007768:	4b03      	ldr	r3, [pc, #12]	@ (8007778 <YAW_MIN_VAL+0x1c>)
}
 800776a:	4618      	mov	r0, r3
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	00000188 	.word	0x00000188
 8007778:	ffffec78 	.word	0xffffec78

0800777c <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
	MYDRON.PID_Rool.Status = 0;
 8007780:	4b08      	ldr	r3, [pc, #32]	@ (80077a4 <ROOL_GOOD_VAL+0x28>)
 8007782:	2200      	movs	r2, #0
 8007784:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	return MYDRON.PID_Rool.Angular_Rate_Value;
 8007788:	4b06      	ldr	r3, [pc, #24]	@ (80077a4 <ROOL_GOOD_VAL+0x28>)
 800778a:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 800778e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007792:	ee17 3a90 	vmov	r3, s15
 8007796:	b21b      	sxth	r3, r3
}
 8007798:	4618      	mov	r0, r3
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	00000188 	.word	0x00000188

080077a8 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
	MYDRON.PID_Pitch.Status = 0;
 80077ac:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <PITCH_GOOD_VAL+0x28>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
	return MYDRON.PID_Pitch.Angular_Rate_Value;
 80077b4:	4b06      	ldr	r3, [pc, #24]	@ (80077d0 <PITCH_GOOD_VAL+0x28>)
 80077b6:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80077ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077be:	ee17 3a90 	vmov	r3, s15
 80077c2:	b21b      	sxth	r3, r3
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	00000188 	.word	0x00000188

080077d4 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
	MYDRON.PID_Yaw.Status = 0;
 80077d8:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <YAW_GOOD_VAL+0x28>)
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
	return MYDRON.PID_Yaw.Angular_Rate_Value;
 80077e0:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <YAW_GOOD_VAL+0x28>)
 80077e2:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 80077e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077ea:	ee17 3a90 	vmov	r3, s15
 80077ee:	b21b      	sxth	r3, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	00000188 	.word	0x00000188

08007800 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007806:	463b      	mov	r3, r7
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	609a      	str	r2, [r3, #8]
 8007810:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007812:	f003 f88f 	bl	800a934 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007816:	2301      	movs	r3, #1
 8007818:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800781a:	2300      	movs	r3, #0
 800781c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800781e:	2300      	movs	r3, #0
 8007820:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007822:	231f      	movs	r3, #31
 8007824:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007826:	2387      	movs	r3, #135	@ 0x87
 8007828:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800782a:	2300      	movs	r3, #0
 800782c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800782e:	2300      	movs	r3, #0
 8007830:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007832:	2301      	movs	r3, #1
 8007834:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007836:	2301      	movs	r3, #1
 8007838:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800783a:	2300      	movs	r3, #0
 800783c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007842:	463b      	mov	r3, r7
 8007844:	4618      	mov	r0, r3
 8007846:	f003 f8ad 	bl	800a9a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800784a:	2004      	movs	r0, #4
 800784c:	f003 f88a 	bl	800a964 <HAL_MPU_Enable>

}
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800785c:	b672      	cpsid	i
}
 800785e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <Error_Handler+0x8>

08007864 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007868:	4b27      	ldr	r3, [pc, #156]	@ (8007908 <MX_SPI1_Init+0xa4>)
 800786a:	4a28      	ldr	r2, [pc, #160]	@ (800790c <MX_SPI1_Init+0xa8>)
 800786c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800786e:	4b26      	ldr	r3, [pc, #152]	@ (8007908 <MX_SPI1_Init+0xa4>)
 8007870:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007876:	4b24      	ldr	r3, [pc, #144]	@ (8007908 <MX_SPI1_Init+0xa4>)
 8007878:	2200      	movs	r2, #0
 800787a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800787c:	4b22      	ldr	r3, [pc, #136]	@ (8007908 <MX_SPI1_Init+0xa4>)
 800787e:	2207      	movs	r2, #7
 8007880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007882:	4b21      	ldr	r3, [pc, #132]	@ (8007908 <MX_SPI1_Init+0xa4>)
 8007884:	2200      	movs	r2, #0
 8007886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007888:	4b1f      	ldr	r3, [pc, #124]	@ (8007908 <MX_SPI1_Init+0xa4>)
 800788a:	2200      	movs	r2, #0
 800788c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800788e:	4b1e      	ldr	r3, [pc, #120]	@ (8007908 <MX_SPI1_Init+0xa4>)
 8007890:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007896:	4b1c      	ldr	r3, [pc, #112]	@ (8007908 <MX_SPI1_Init+0xa4>)
 8007898:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800789c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800789e:	4b1a      	ldr	r3, [pc, #104]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80078a4:	4b18      	ldr	r3, [pc, #96]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078aa:	4b17      	ldr	r3, [pc, #92]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80078b0:	4b15      	ldr	r3, [pc, #84]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80078b6:	4b14      	ldr	r3, [pc, #80]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80078bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80078be:	4b12      	ldr	r3, [pc, #72]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80078c4:	4b10      	ldr	r3, [pc, #64]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80078ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80078d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80078d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078d8:	2200      	movs	r2, #0
 80078da:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80078dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078de:	2200      	movs	r2, #0
 80078e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80078e2:	4b09      	ldr	r3, [pc, #36]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80078e8:	4b07      	ldr	r3, [pc, #28]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80078ee:	4b06      	ldr	r3, [pc, #24]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80078f4:	4804      	ldr	r0, [pc, #16]	@ (8007908 <MX_SPI1_Init+0xa4>)
 80078f6:	f00c f8d5 	bl	8013aa4 <HAL_SPI_Init>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8007900:	f7ff ffaa 	bl	8007858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007904:	bf00      	nop
 8007906:	bd80      	pop	{r7, pc}
 8007908:	240001ec 	.word	0x240001ec
 800790c:	40013000 	.word	0x40013000

08007910 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007914:	4b27      	ldr	r3, [pc, #156]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007916:	4a28      	ldr	r2, [pc, #160]	@ (80079b8 <MX_SPI2_Init+0xa8>)
 8007918:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800791a:	4b26      	ldr	r3, [pc, #152]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800791c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007920:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007922:	4b24      	ldr	r3, [pc, #144]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007924:	2200      	movs	r2, #0
 8007926:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007928:	4b22      	ldr	r3, [pc, #136]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800792a:	2207      	movs	r2, #7
 800792c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800792e:	4b21      	ldr	r3, [pc, #132]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007930:	2200      	movs	r2, #0
 8007932:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007934:	4b1f      	ldr	r3, [pc, #124]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007936:	2200      	movs	r2, #0
 8007938:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800793a:	4b1e      	ldr	r3, [pc, #120]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800793c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007940:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007942:	4b1c      	ldr	r3, [pc, #112]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007944:	2200      	movs	r2, #0
 8007946:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007948:	4b1a      	ldr	r3, [pc, #104]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800794a:	2200      	movs	r2, #0
 800794c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800794e:	4b19      	ldr	r3, [pc, #100]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007950:	2200      	movs	r2, #0
 8007952:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007954:	4b17      	ldr	r3, [pc, #92]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007956:	2200      	movs	r2, #0
 8007958:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800795a:	4b16      	ldr	r3, [pc, #88]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800795c:	2200      	movs	r2, #0
 800795e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007960:	4b14      	ldr	r3, [pc, #80]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007962:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007966:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007968:	4b12      	ldr	r3, [pc, #72]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800796a:	2200      	movs	r2, #0
 800796c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800796e:	4b11      	ldr	r3, [pc, #68]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007970:	2200      	movs	r2, #0
 8007972:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007974:	4b0f      	ldr	r3, [pc, #60]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007976:	2200      	movs	r2, #0
 8007978:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800797a:	4b0e      	ldr	r3, [pc, #56]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800797c:	2200      	movs	r2, #0
 800797e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007980:	4b0c      	ldr	r3, [pc, #48]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007982:	2200      	movs	r2, #0
 8007984:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007986:	4b0b      	ldr	r3, [pc, #44]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007988:	2200      	movs	r2, #0
 800798a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800798c:	4b09      	ldr	r3, [pc, #36]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800798e:	2200      	movs	r2, #0
 8007990:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007992:	4b08      	ldr	r3, [pc, #32]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 8007994:	2200      	movs	r2, #0
 8007996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007998:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 800799a:	2200      	movs	r2, #0
 800799c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800799e:	4805      	ldr	r0, [pc, #20]	@ (80079b4 <MX_SPI2_Init+0xa4>)
 80079a0:	f00c f880 	bl	8013aa4 <HAL_SPI_Init>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80079aa:	f7ff ff55 	bl	8007858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80079ae:	bf00      	nop
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	24000274 	.word	0x24000274
 80079b8:	40003800 	.word	0x40003800

080079bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	@ 0x30
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c4:	f107 031c 	add.w	r3, r7, #28
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	609a      	str	r2, [r3, #8]
 80079d0:	60da      	str	r2, [r3, #12]
 80079d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a60      	ldr	r2, [pc, #384]	@ (8007b5c <HAL_SPI_MspInit+0x1a0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d136      	bne.n	8007a4c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80079de:	4b60      	ldr	r3, [pc, #384]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 80079e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079e4:	4a5e      	ldr	r2, [pc, #376]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 80079e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80079ee:	4b5c      	ldr	r3, [pc, #368]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 80079f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079fc:	4b58      	ldr	r3, [pc, #352]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 80079fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a02:	4a57      	ldr	r2, [pc, #348]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 8007a04:	f043 0302 	orr.w	r3, r3, #2
 8007a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a0c:	4b54      	ldr	r3, [pc, #336]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 8007a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007a1a:	2338      	movs	r3, #56	@ 0x38
 8007a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a26:	2300      	movs	r3, #0
 8007a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a2a:	2305      	movs	r3, #5
 8007a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a2e:	f107 031c 	add.w	r3, r7, #28
 8007a32:	4619      	mov	r1, r3
 8007a34:	484b      	ldr	r0, [pc, #300]	@ (8007b64 <HAL_SPI_MspInit+0x1a8>)
 8007a36:	f005 fe47 	bl	800d6c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	2023      	movs	r0, #35	@ 0x23
 8007a40:	f002 ff43 	bl	800a8ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007a44:	2023      	movs	r0, #35	@ 0x23
 8007a46:	f002 ff5a 	bl	800a8fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007a4a:	e082      	b.n	8007b52 <HAL_SPI_MspInit+0x196>
  else if(spiHandle->Instance==SPI2)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a45      	ldr	r2, [pc, #276]	@ (8007b68 <HAL_SPI_MspInit+0x1ac>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d17d      	bne.n	8007b52 <HAL_SPI_MspInit+0x196>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a56:	4b42      	ldr	r3, [pc, #264]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 8007a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a5c:	4a40      	ldr	r2, [pc, #256]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 8007a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007a66:	4b3e      	ldr	r3, [pc, #248]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 8007a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a74:	4b3a      	ldr	r3, [pc, #232]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 8007a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a7a:	4a39      	ldr	r2, [pc, #228]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 8007a7c:	f043 0302 	orr.w	r3, r3, #2
 8007a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a84:	4b36      	ldr	r3, [pc, #216]	@ (8007b60 <HAL_SPI_MspInit+0x1a4>)
 8007a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007aa4:	2305      	movs	r3, #5
 8007aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aa8:	f107 031c 	add.w	r3, r7, #28
 8007aac:	4619      	mov	r1, r3
 8007aae:	482d      	ldr	r0, [pc, #180]	@ (8007b64 <HAL_SPI_MspInit+0x1a8>)
 8007ab0:	f005 fe0a 	bl	800d6c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007ab4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aba:	2302      	movs	r3, #2
 8007abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007ac6:	2305      	movs	r3, #5
 8007ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aca:	f107 031c 	add.w	r3, r7, #28
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4824      	ldr	r0, [pc, #144]	@ (8007b64 <HAL_SPI_MspInit+0x1a8>)
 8007ad2:	f005 fdf9 	bl	800d6c8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8007ad6:	4b25      	ldr	r3, [pc, #148]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007ad8:	4a25      	ldr	r2, [pc, #148]	@ (8007b70 <HAL_SPI_MspInit+0x1b4>)
 8007ada:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007adc:	4b23      	ldr	r3, [pc, #140]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007ade:	2228      	movs	r2, #40	@ 0x28
 8007ae0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ae2:	4b22      	ldr	r3, [pc, #136]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007ae4:	2240      	movs	r2, #64	@ 0x40
 8007ae6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ae8:	4b20      	ldr	r3, [pc, #128]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007aee:	4b1f      	ldr	r3, [pc, #124]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007af0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007af4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007af6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007afc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007b02:	4b1a      	ldr	r3, [pc, #104]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007b08:	4b18      	ldr	r3, [pc, #96]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007b0e:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b10:	2204      	movs	r2, #4
 8007b12:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007b14:	4b15      	ldr	r3, [pc, #84]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b16:	2203      	movs	r2, #3
 8007b18:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007b1a:	4b14      	ldr	r3, [pc, #80]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007b20:	4b12      	ldr	r3, [pc, #72]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007b26:	4811      	ldr	r0, [pc, #68]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b28:	f002 ff7c 	bl	800aa24 <HAL_DMA_Init>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_SPI_MspInit+0x17a>
      Error_Handler();
 8007b32:	f7ff fe91 	bl	8007858 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a0c      	ldr	r2, [pc, #48]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b3a:	679a      	str	r2, [r3, #120]	@ 0x78
 8007b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8007b6c <HAL_SPI_MspInit+0x1b0>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007b42:	2200      	movs	r2, #0
 8007b44:	2100      	movs	r1, #0
 8007b46:	2024      	movs	r0, #36	@ 0x24
 8007b48:	f002 febf 	bl	800a8ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007b4c:	2024      	movs	r0, #36	@ 0x24
 8007b4e:	f002 fed6 	bl	800a8fe <HAL_NVIC_EnableIRQ>
}
 8007b52:	bf00      	nop
 8007b54:	3730      	adds	r7, #48	@ 0x30
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40013000 	.word	0x40013000
 8007b60:	58024400 	.word	0x58024400
 8007b64:	58020400 	.word	0x58020400
 8007b68:	40003800 	.word	0x40003800
 8007b6c:	240002fc 	.word	0x240002fc
 8007b70:	40020010 	.word	0x40020010

08007b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba4 <HAL_MspInit+0x30>)
 8007b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b80:	4a08      	ldr	r2, [pc, #32]	@ (8007ba4 <HAL_MspInit+0x30>)
 8007b82:	f043 0302 	orr.w	r3, r3, #2
 8007b86:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b8a:	4b06      	ldr	r3, [pc, #24]	@ (8007ba4 <HAL_MspInit+0x30>)
 8007b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	607b      	str	r3, [r7, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	58024400 	.word	0x58024400

08007ba8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007bac:	4b0b      	ldr	r3, [pc, #44]	@ (8007bdc <SDTimer_Handler+0x34>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <SDTimer_Handler+0x16>
    Timer1--;
 8007bb4:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <SDTimer_Handler+0x34>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4a08      	ldr	r2, [pc, #32]	@ (8007bdc <SDTimer_Handler+0x34>)
 8007bbc:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007bbe:	4b08      	ldr	r3, [pc, #32]	@ (8007be0 <SDTimer_Handler+0x38>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d004      	beq.n	8007bd0 <SDTimer_Handler+0x28>
    Timer2--;
 8007bc6:	4b06      	ldr	r3, [pc, #24]	@ (8007be0 <SDTimer_Handler+0x38>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	4a04      	ldr	r2, [pc, #16]	@ (8007be0 <SDTimer_Handler+0x38>)
 8007bce:	6013      	str	r3, [r2, #0]
}
 8007bd0:	bf00      	nop
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	24000378 	.word	0x24000378
 8007be0:	2400037c 	.word	0x2400037c

08007be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007be8:	2200      	movs	r2, #0
 8007bea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007bee:	480a      	ldr	r0, [pc, #40]	@ (8007c18 <NMI_Handler+0x34>)
 8007bf0:	f005 ff2a 	bl	800da48 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007bfa:	4808      	ldr	r0, [pc, #32]	@ (8007c1c <NMI_Handler+0x38>)
 8007bfc:	f005 ff24 	bl	800da48 <HAL_GPIO_WritePin>
	LED_R_1;
 8007c00:	2201      	movs	r2, #1
 8007c02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c06:	4805      	ldr	r0, [pc, #20]	@ (8007c1c <NMI_Handler+0x38>)
 8007c08:	f005 ff1e 	bl	800da48 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007c0c:	4804      	ldr	r0, [pc, #16]	@ (8007c20 <NMI_Handler+0x3c>)
 8007c0e:	f015 fbfd 	bl	801d40c <f_close>
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007c12:	bf00      	nop
 8007c14:	e7fd      	b.n	8007c12 <NMI_Handler+0x2e>
 8007c16:	bf00      	nop
 8007c18:	58021000 	.word	0x58021000
 8007c1c:	58020400 	.word	0x58020400
 8007c20:	24001ef0 	.word	0x24001ef0

08007c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c2e:	480a      	ldr	r0, [pc, #40]	@ (8007c58 <HardFault_Handler+0x34>)
 8007c30:	f005 ff0a 	bl	800da48 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007c34:	2200      	movs	r2, #0
 8007c36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c3a:	4808      	ldr	r0, [pc, #32]	@ (8007c5c <HardFault_Handler+0x38>)
 8007c3c:	f005 ff04 	bl	800da48 <HAL_GPIO_WritePin>
	LED_R_1;
 8007c40:	2201      	movs	r2, #1
 8007c42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c46:	4805      	ldr	r0, [pc, #20]	@ (8007c5c <HardFault_Handler+0x38>)
 8007c48:	f005 fefe 	bl	800da48 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007c4c:	4804      	ldr	r0, [pc, #16]	@ (8007c60 <HardFault_Handler+0x3c>)
 8007c4e:	f015 fbdd 	bl	801d40c <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <HardFault_Handler+0x2e>
 8007c56:	bf00      	nop
 8007c58:	58021000 	.word	0x58021000
 8007c5c:	58020400 	.word	0x58020400
 8007c60:	24001ef0 	.word	0x24001ef0

08007c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c6e:	480a      	ldr	r0, [pc, #40]	@ (8007c98 <MemManage_Handler+0x34>)
 8007c70:	f005 feea 	bl	800da48 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007c74:	2200      	movs	r2, #0
 8007c76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c7a:	4808      	ldr	r0, [pc, #32]	@ (8007c9c <MemManage_Handler+0x38>)
 8007c7c:	f005 fee4 	bl	800da48 <HAL_GPIO_WritePin>
	LED_R_1;
 8007c80:	2201      	movs	r2, #1
 8007c82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c86:	4805      	ldr	r0, [pc, #20]	@ (8007c9c <MemManage_Handler+0x38>)
 8007c88:	f005 fede 	bl	800da48 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007c8c:	4804      	ldr	r0, [pc, #16]	@ (8007ca0 <MemManage_Handler+0x3c>)
 8007c8e:	f015 fbbd 	bl	801d40c <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c92:	bf00      	nop
 8007c94:	e7fd      	b.n	8007c92 <MemManage_Handler+0x2e>
 8007c96:	bf00      	nop
 8007c98:	58021000 	.word	0x58021000
 8007c9c:	58020400 	.word	0x58020400
 8007ca0:	24001ef0 	.word	0x24001ef0

08007ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cae:	480a      	ldr	r0, [pc, #40]	@ (8007cd8 <BusFault_Handler+0x34>)
 8007cb0:	f005 feca 	bl	800da48 <HAL_GPIO_WritePin>
	LED_Y_1;
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007cba:	4808      	ldr	r0, [pc, #32]	@ (8007cdc <BusFault_Handler+0x38>)
 8007cbc:	f005 fec4 	bl	800da48 <HAL_GPIO_WritePin>
	LED_R_1;
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007cc6:	4805      	ldr	r0, [pc, #20]	@ (8007cdc <BusFault_Handler+0x38>)
 8007cc8:	f005 febe 	bl	800da48 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007ccc:	4804      	ldr	r0, [pc, #16]	@ (8007ce0 <BusFault_Handler+0x3c>)
 8007cce:	f015 fb9d 	bl	801d40c <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007cd2:	bf00      	nop
 8007cd4:	e7fd      	b.n	8007cd2 <BusFault_Handler+0x2e>
 8007cd6:	bf00      	nop
 8007cd8:	58021000 	.word	0x58021000
 8007cdc:	58020400 	.word	0x58020400
 8007ce0:	24001ef0 	.word	0x24001ef0

08007ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cee:	480a      	ldr	r0, [pc, #40]	@ (8007d18 <UsageFault_Handler+0x34>)
 8007cf0:	f005 feaa 	bl	800da48 <HAL_GPIO_WritePin>
	LED_Y_1;
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007cfa:	4808      	ldr	r0, [pc, #32]	@ (8007d1c <UsageFault_Handler+0x38>)
 8007cfc:	f005 fea4 	bl	800da48 <HAL_GPIO_WritePin>
	LED_R_1;
 8007d00:	2201      	movs	r2, #1
 8007d02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007d06:	4805      	ldr	r0, [pc, #20]	@ (8007d1c <UsageFault_Handler+0x38>)
 8007d08:	f005 fe9e 	bl	800da48 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8007d0c:	4804      	ldr	r0, [pc, #16]	@ (8007d20 <UsageFault_Handler+0x3c>)
 8007d0e:	f015 fb7d 	bl	801d40c <f_close>
//	wanted_rool = 0;
//	wanted_pitch = 0;
//	wanted_yaw = 0;
//	wanted_thrust = DRON_SLOWFALING;
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d12:	bf00      	nop
 8007d14:	e7fd      	b.n	8007d12 <UsageFault_Handler+0x2e>
 8007d16:	bf00      	nop
 8007d18:	58021000 	.word	0x58021000
 8007d1c:	58020400 	.word	0x58020400
 8007d20:	24001ef0 	.word	0x24001ef0

08007d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d28:	bf00      	nop
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d32:	b480      	push	{r7}
 8007d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d36:	bf00      	nop
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
	...

08007d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8007d54:	4b08      	ldr	r3, [pc, #32]	@ (8007d78 <SysTick_Handler+0x28>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	4a07      	ldr	r2, [pc, #28]	@ (8007d78 <SysTick_Handler+0x28>)
 8007d5c:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8007d5e:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <SysTick_Handler+0x28>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b09      	cmp	r3, #9
 8007d64:	d904      	bls.n	8007d70 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8007d66:	4b04      	ldr	r3, [pc, #16]	@ (8007d78 <SysTick_Handler+0x28>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8007d6c:	f7ff ff1c 	bl	8007ba8 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d70:	f000 fd0e 	bl	8008790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	24000374 	.word	0x24000374

08007d7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007d80:	4802      	ldr	r0, [pc, #8]	@ (8007d8c <DMA1_Stream0_IRQHandler+0x10>)
 8007d82:	f004 f975 	bl	800c070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007d86:	bf00      	nop
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	240002fc 	.word	0x240002fc

08007d90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8007d94:	4802      	ldr	r0, [pc, #8]	@ (8007da0 <ADC_IRQHandler+0x10>)
 8007d96:	f001 fb49 	bl	800942c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007d9a:	bf00      	nop
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	240000ac 	.word	0x240000ac

08007da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007da8:	4802      	ldr	r0, [pc, #8]	@ (8007db4 <TIM2_IRQHandler+0x10>)
 8007daa:	f00e f956 	bl	801605a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	240003cc 	.word	0x240003cc

08007db8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007dbc:	4802      	ldr	r0, [pc, #8]	@ (8007dc8 <SPI1_IRQHandler+0x10>)
 8007dbe:	f00d f9c5 	bl	801514c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007dc2:	bf00      	nop
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	240001ec 	.word	0x240001ec

08007dcc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007dd0:	4802      	ldr	r0, [pc, #8]	@ (8007ddc <SPI2_IRQHandler+0x10>)
 8007dd2:	f00d f9bb 	bl	801514c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007dd6:	bf00      	nop
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	24000274 	.word	0x24000274

08007de0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007de4:	4802      	ldr	r0, [pc, #8]	@ (8007df0 <USART1_IRQHandler+0x10>)
 8007de6:	f00f fd8f 	bl	8017908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007dea:	bf00      	nop
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	240004b0 	.word	0x240004b0

08007df4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8007df8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007dfc:	f005 fe3d 	bl	800da7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007e00:	bf00      	nop
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007e08:	4802      	ldr	r0, [pc, #8]	@ (8007e14 <DMA2_Stream0_IRQHandler+0x10>)
 8007e0a:	f004 f931 	bl	800c070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007e0e:	bf00      	nop
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	2400011c 	.word	0x2400011c

08007e18 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8007e1c:	4802      	ldr	r0, [pc, #8]	@ (8007e28 <I2C5_EV_IRQHandler+0x10>)
 8007e1e:	f006 fa21 	bl	800e264 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8007e22:	bf00      	nop
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	24000198 	.word	0x24000198

08007e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007e30:	4b32      	ldr	r3, [pc, #200]	@ (8007efc <SystemInit+0xd0>)
 8007e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e36:	4a31      	ldr	r2, [pc, #196]	@ (8007efc <SystemInit+0xd0>)
 8007e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007e40:	4b2f      	ldr	r3, [pc, #188]	@ (8007f00 <SystemInit+0xd4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d807      	bhi.n	8007e5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8007f00 <SystemInit+0xd4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f023 030f 	bic.w	r3, r3, #15
 8007e54:	4a2a      	ldr	r2, [pc, #168]	@ (8007f00 <SystemInit+0xd4>)
 8007e56:	f043 0307 	orr.w	r3, r3, #7
 8007e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007e5c:	4b29      	ldr	r3, [pc, #164]	@ (8007f04 <SystemInit+0xd8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a28      	ldr	r2, [pc, #160]	@ (8007f04 <SystemInit+0xd8>)
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007e68:	4b26      	ldr	r3, [pc, #152]	@ (8007f04 <SystemInit+0xd8>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007e6e:	4b25      	ldr	r3, [pc, #148]	@ (8007f04 <SystemInit+0xd8>)
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4924      	ldr	r1, [pc, #144]	@ (8007f04 <SystemInit+0xd8>)
 8007e74:	4b24      	ldr	r3, [pc, #144]	@ (8007f08 <SystemInit+0xdc>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007e7a:	4b21      	ldr	r3, [pc, #132]	@ (8007f00 <SystemInit+0xd4>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007e86:	4b1e      	ldr	r3, [pc, #120]	@ (8007f00 <SystemInit+0xd4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f023 030f 	bic.w	r3, r3, #15
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007f00 <SystemInit+0xd4>)
 8007e90:	f043 0307 	orr.w	r3, r3, #7
 8007e94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007e96:	4b1b      	ldr	r3, [pc, #108]	@ (8007f04 <SystemInit+0xd8>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007e9c:	4b19      	ldr	r3, [pc, #100]	@ (8007f04 <SystemInit+0xd8>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007ea2:	4b18      	ldr	r3, [pc, #96]	@ (8007f04 <SystemInit+0xd8>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007ea8:	4b16      	ldr	r3, [pc, #88]	@ (8007f04 <SystemInit+0xd8>)
 8007eaa:	4a18      	ldr	r2, [pc, #96]	@ (8007f0c <SystemInit+0xe0>)
 8007eac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007eae:	4b15      	ldr	r3, [pc, #84]	@ (8007f04 <SystemInit+0xd8>)
 8007eb0:	4a17      	ldr	r2, [pc, #92]	@ (8007f10 <SystemInit+0xe4>)
 8007eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007eb4:	4b13      	ldr	r3, [pc, #76]	@ (8007f04 <SystemInit+0xd8>)
 8007eb6:	4a17      	ldr	r2, [pc, #92]	@ (8007f14 <SystemInit+0xe8>)
 8007eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007eba:	4b12      	ldr	r3, [pc, #72]	@ (8007f04 <SystemInit+0xd8>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007ec0:	4b10      	ldr	r3, [pc, #64]	@ (8007f04 <SystemInit+0xd8>)
 8007ec2:	4a14      	ldr	r2, [pc, #80]	@ (8007f14 <SystemInit+0xe8>)
 8007ec4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f04 <SystemInit+0xd8>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8007f04 <SystemInit+0xd8>)
 8007ece:	4a11      	ldr	r2, [pc, #68]	@ (8007f14 <SystemInit+0xe8>)
 8007ed0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <SystemInit+0xd8>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8007f04 <SystemInit+0xd8>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a09      	ldr	r2, [pc, #36]	@ (8007f04 <SystemInit+0xd8>)
 8007ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007ee4:	4b07      	ldr	r3, [pc, #28]	@ (8007f04 <SystemInit+0xd8>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007eea:	4b0b      	ldr	r3, [pc, #44]	@ (8007f18 <SystemInit+0xec>)
 8007eec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007ef0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007ef2:	bf00      	nop
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	e000ed00 	.word	0xe000ed00
 8007f00:	52002000 	.word	0x52002000
 8007f04:	58024400 	.word	0x58024400
 8007f08:	eaf6ed7f 	.word	0xeaf6ed7f
 8007f0c:	02020200 	.word	0x02020200
 8007f10:	01ff0000 	.word	0x01ff0000
 8007f14:	01010280 	.word	0x01010280
 8007f18:	52004000 	.word	0x52004000

08007f1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b098      	sub	sp, #96	@ 0x60
 8007f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
 8007f2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007f2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	605a      	str	r2, [r3, #4]
 8007f38:	609a      	str	r2, [r3, #8]
 8007f3a:	60da      	str	r2, [r3, #12]
 8007f3c:	611a      	str	r2, [r3, #16]
 8007f3e:	615a      	str	r2, [r3, #20]
 8007f40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007f42:	1d3b      	adds	r3, r7, #4
 8007f44:	2234      	movs	r2, #52	@ 0x34
 8007f46:	2100      	movs	r1, #0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f015 fc57 	bl	801d7fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007f4e:	4b45      	ldr	r3, [pc, #276]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007f50:	4a45      	ldr	r2, [pc, #276]	@ (8008068 <MX_TIM1_Init+0x14c>)
 8007f52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8007f54:	4b43      	ldr	r3, [pc, #268]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007f56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007f5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f5c:	4b41      	ldr	r3, [pc, #260]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8007f62:	4b40      	ldr	r3, [pc, #256]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f70:	4b3c      	ldr	r3, [pc, #240]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f76:	4b3b      	ldr	r3, [pc, #236]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007f78:	2280      	movs	r2, #128	@ 0x80
 8007f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007f7c:	4839      	ldr	r0, [pc, #228]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007f7e:	f00d fea1 	bl	8015cc4 <HAL_TIM_PWM_Init>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8007f88:	f7ff fc66 	bl	8007858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007f90:	2300      	movs	r3, #0
 8007f92:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f94:	2300      	movs	r3, #0
 8007f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007f98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4831      	ldr	r0, [pc, #196]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007fa0:	f00f f9ae 	bl	8017300 <HAL_TIMEx_MasterConfigSynchronization>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007faa:	f7ff fc55 	bl	8007858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007fae:	2360      	movs	r3, #96	@ 0x60
 8007fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007fca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007fce:	2204      	movs	r2, #4
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4824      	ldr	r0, [pc, #144]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007fd4:	f00e f9e4 	bl	80163a0 <HAL_TIM_PWM_ConfigChannel>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8007fde:	f7ff fc3b 	bl	8007858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007fe2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	4619      	mov	r1, r3
 8007fea:	481e      	ldr	r0, [pc, #120]	@ (8008064 <MX_TIM1_Init+0x148>)
 8007fec:	f00e f9d8 	bl	80163a0 <HAL_TIM_PWM_ConfigChannel>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8007ff6:	f7ff fc2f 	bl	8007858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007ffe:	220c      	movs	r2, #12
 8008000:	4619      	mov	r1, r3
 8008002:	4818      	ldr	r0, [pc, #96]	@ (8008064 <MX_TIM1_Init+0x148>)
 8008004:	f00e f9cc 	bl	80163a0 <HAL_TIM_PWM_ConfigChannel>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800800e:	f7ff fc23 	bl	8007858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008012:	2300      	movs	r3, #0
 8008014:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800801a:	2300      	movs	r3, #0
 800801c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008022:	2300      	movs	r3, #0
 8008024:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800802a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008030:	2300      	movs	r3, #0
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008034:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008038:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800803e:	2300      	movs	r3, #0
 8008040:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4807      	ldr	r0, [pc, #28]	@ (8008064 <MX_TIM1_Init+0x148>)
 8008048:	f00f f9f6 	bl	8017438 <HAL_TIMEx_ConfigBreakDeadTime>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008052:	f7ff fc01 	bl	8007858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008056:	4803      	ldr	r0, [pc, #12]	@ (8008064 <MX_TIM1_Init+0x148>)
 8008058:	f000 f9da 	bl	8008410 <HAL_TIM_MspPostInit>

}
 800805c:	bf00      	nop
 800805e:	3760      	adds	r7, #96	@ 0x60
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	24000380 	.word	0x24000380
 8008068:	40010000 	.word	0x40010000

0800806c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b088      	sub	sp, #32
 8008070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008072:	f107 0314 	add.w	r3, r7, #20
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	605a      	str	r2, [r3, #4]
 800807c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800807e:	1d3b      	adds	r3, r7, #4
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	605a      	str	r2, [r3, #4]
 8008086:	609a      	str	r2, [r3, #8]
 8008088:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800808a:	4b21      	ldr	r3, [pc, #132]	@ (8008110 <MX_TIM2_Init+0xa4>)
 800808c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008092:	4b1f      	ldr	r3, [pc, #124]	@ (8008110 <MX_TIM2_Init+0xa4>)
 8008094:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008098:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800809a:	4b1d      	ldr	r3, [pc, #116]	@ (8008110 <MX_TIM2_Init+0xa4>)
 800809c:	2200      	movs	r2, #0
 800809e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80080a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008110 <MX_TIM2_Init+0xa4>)
 80080a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80080a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080a8:	4b19      	ldr	r3, [pc, #100]	@ (8008110 <MX_TIM2_Init+0xa4>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80080ae:	4b18      	ldr	r3, [pc, #96]	@ (8008110 <MX_TIM2_Init+0xa4>)
 80080b0:	2280      	movs	r2, #128	@ 0x80
 80080b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80080b4:	4816      	ldr	r0, [pc, #88]	@ (8008110 <MX_TIM2_Init+0xa4>)
 80080b6:	f00d ff79 	bl	8015fac <HAL_TIM_IC_Init>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80080c0:	f7ff fbca 	bl	8007858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80080cc:	f107 0314 	add.w	r3, r7, #20
 80080d0:	4619      	mov	r1, r3
 80080d2:	480f      	ldr	r0, [pc, #60]	@ (8008110 <MX_TIM2_Init+0xa4>)
 80080d4:	f00f f914 	bl	8017300 <HAL_TIMEx_MasterConfigSynchronization>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80080de:	f7ff fbbb 	bl	8007858 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80080e2:	2300      	movs	r3, #0
 80080e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80080e6:	2301      	movs	r3, #1
 80080e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80080f2:	1d3b      	adds	r3, r7, #4
 80080f4:	2200      	movs	r2, #0
 80080f6:	4619      	mov	r1, r3
 80080f8:	4805      	ldr	r0, [pc, #20]	@ (8008110 <MX_TIM2_Init+0xa4>)
 80080fa:	f00e f8b5 	bl	8016268 <HAL_TIM_IC_ConfigChannel>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008104:	f7ff fba8 	bl	8007858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008108:	bf00      	nop
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	240003cc 	.word	0x240003cc

08008114 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	@ 0x28
 8008118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800811a:	f107 031c 	add.w	r3, r7, #28
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	605a      	str	r2, [r3, #4]
 8008124:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008126:	463b      	mov	r3, r7
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	605a      	str	r2, [r3, #4]
 800812e:	609a      	str	r2, [r3, #8]
 8008130:	60da      	str	r2, [r3, #12]
 8008132:	611a      	str	r2, [r3, #16]
 8008134:	615a      	str	r2, [r3, #20]
 8008136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008138:	4b32      	ldr	r3, [pc, #200]	@ (8008204 <MX_TIM3_Init+0xf0>)
 800813a:	4a33      	ldr	r2, [pc, #204]	@ (8008208 <MX_TIM3_Init+0xf4>)
 800813c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 800813e:	4b31      	ldr	r3, [pc, #196]	@ (8008204 <MX_TIM3_Init+0xf0>)
 8008140:	221c      	movs	r2, #28
 8008142:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008144:	4b2f      	ldr	r3, [pc, #188]	@ (8008204 <MX_TIM3_Init+0xf0>)
 8008146:	2200      	movs	r2, #0
 8008148:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800814a:	4b2e      	ldr	r3, [pc, #184]	@ (8008204 <MX_TIM3_Init+0xf0>)
 800814c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008150:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008152:	4b2c      	ldr	r3, [pc, #176]	@ (8008204 <MX_TIM3_Init+0xf0>)
 8008154:	2200      	movs	r2, #0
 8008156:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008158:	4b2a      	ldr	r3, [pc, #168]	@ (8008204 <MX_TIM3_Init+0xf0>)
 800815a:	2200      	movs	r2, #0
 800815c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800815e:	4829      	ldr	r0, [pc, #164]	@ (8008204 <MX_TIM3_Init+0xf0>)
 8008160:	f00d fdb0 	bl	8015cc4 <HAL_TIM_PWM_Init>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800816a:	f7ff fb75 	bl	8007858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008176:	f107 031c 	add.w	r3, r7, #28
 800817a:	4619      	mov	r1, r3
 800817c:	4821      	ldr	r0, [pc, #132]	@ (8008204 <MX_TIM3_Init+0xf0>)
 800817e:	f00f f8bf 	bl	8017300 <HAL_TIMEx_MasterConfigSynchronization>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008188:	f7ff fb66 	bl	8007858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800818c:	2360      	movs	r3, #96	@ 0x60
 800818e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008194:	2300      	movs	r3, #0
 8008196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008198:	2300      	movs	r3, #0
 800819a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800819c:	463b      	mov	r3, r7
 800819e:	2200      	movs	r2, #0
 80081a0:	4619      	mov	r1, r3
 80081a2:	4818      	ldr	r0, [pc, #96]	@ (8008204 <MX_TIM3_Init+0xf0>)
 80081a4:	f00e f8fc 	bl	80163a0 <HAL_TIM_PWM_ConfigChannel>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80081ae:	f7ff fb53 	bl	8007858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80081b2:	463b      	mov	r3, r7
 80081b4:	2204      	movs	r2, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	4812      	ldr	r0, [pc, #72]	@ (8008204 <MX_TIM3_Init+0xf0>)
 80081ba:	f00e f8f1 	bl	80163a0 <HAL_TIM_PWM_ConfigChannel>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80081c4:	f7ff fb48 	bl	8007858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80081c8:	463b      	mov	r3, r7
 80081ca:	2208      	movs	r2, #8
 80081cc:	4619      	mov	r1, r3
 80081ce:	480d      	ldr	r0, [pc, #52]	@ (8008204 <MX_TIM3_Init+0xf0>)
 80081d0:	f00e f8e6 	bl	80163a0 <HAL_TIM_PWM_ConfigChannel>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80081da:	f7ff fb3d 	bl	8007858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80081de:	463b      	mov	r3, r7
 80081e0:	220c      	movs	r2, #12
 80081e2:	4619      	mov	r1, r3
 80081e4:	4807      	ldr	r0, [pc, #28]	@ (8008204 <MX_TIM3_Init+0xf0>)
 80081e6:	f00e f8db 	bl	80163a0 <HAL_TIM_PWM_ConfigChannel>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80081f0:	f7ff fb32 	bl	8007858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80081f4:	4803      	ldr	r0, [pc, #12]	@ (8008204 <MX_TIM3_Init+0xf0>)
 80081f6:	f000 f90b 	bl	8008410 <HAL_TIM_MspPostInit>

}
 80081fa:	bf00      	nop
 80081fc:	3728      	adds	r7, #40	@ 0x28
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	24000418 	.word	0x24000418
 8008208:	40000400 	.word	0x40000400

0800820c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008212:	f107 0310 	add.w	r3, r7, #16
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	605a      	str	r2, [r3, #4]
 800821c:	609a      	str	r2, [r3, #8]
 800821e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008220:	1d3b      	adds	r3, r7, #4
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	605a      	str	r2, [r3, #4]
 8008228:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800822a:	4b21      	ldr	r3, [pc, #132]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 800822c:	4a21      	ldr	r2, [pc, #132]	@ (80082b4 <MX_TIM8_Init+0xa8>)
 800822e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008230:	4b1f      	ldr	r3, [pc, #124]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 8008232:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008236:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008238:	4b1d      	ldr	r3, [pc, #116]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 800823a:	2200      	movs	r2, #0
 800823c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 800823e:	4b1c      	ldr	r3, [pc, #112]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 8008240:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008244:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008246:	4b1a      	ldr	r3, [pc, #104]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 8008248:	2200      	movs	r2, #0
 800824a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800824c:	4b18      	ldr	r3, [pc, #96]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 800824e:	2200      	movs	r2, #0
 8008250:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008252:	4b17      	ldr	r3, [pc, #92]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 8008254:	2200      	movs	r2, #0
 8008256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008258:	4815      	ldr	r0, [pc, #84]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 800825a:	f00d fbd8 	bl	8015a0e <HAL_TIM_Base_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008264:	f7ff faf8 	bl	8007858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800826c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800826e:	f107 0310 	add.w	r3, r7, #16
 8008272:	4619      	mov	r1, r3
 8008274:	480e      	ldr	r0, [pc, #56]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 8008276:	f00e f9a7 	bl	80165c8 <HAL_TIM_ConfigClockSource>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008280:	f7ff faea 	bl	8007858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008284:	2320      	movs	r3, #32
 8008286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008288:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800828c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008292:	1d3b      	adds	r3, r7, #4
 8008294:	4619      	mov	r1, r3
 8008296:	4806      	ldr	r0, [pc, #24]	@ (80082b0 <MX_TIM8_Init+0xa4>)
 8008298:	f00f f832 	bl	8017300 <HAL_TIMEx_MasterConfigSynchronization>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80082a2:	f7ff fad9 	bl	8007858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80082a6:	bf00      	nop
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	24000464 	.word	0x24000464
 80082b4:	40010400 	.word	0x40010400

080082b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a16      	ldr	r2, [pc, #88]	@ (8008320 <HAL_TIM_PWM_MspInit+0x68>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10f      	bne.n	80082ea <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80082ca:	4b16      	ldr	r3, [pc, #88]	@ (8008324 <HAL_TIM_PWM_MspInit+0x6c>)
 80082cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082d0:	4a14      	ldr	r2, [pc, #80]	@ (8008324 <HAL_TIM_PWM_MspInit+0x6c>)
 80082d2:	f043 0301 	orr.w	r3, r3, #1
 80082d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80082da:	4b12      	ldr	r3, [pc, #72]	@ (8008324 <HAL_TIM_PWM_MspInit+0x6c>)
 80082dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80082e8:	e013      	b.n	8008312 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a0e      	ldr	r2, [pc, #56]	@ (8008328 <HAL_TIM_PWM_MspInit+0x70>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d10e      	bne.n	8008312 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80082f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008324 <HAL_TIM_PWM_MspInit+0x6c>)
 80082f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008324 <HAL_TIM_PWM_MspInit+0x6c>)
 80082fc:	f043 0302 	orr.w	r3, r3, #2
 8008300:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008304:	4b07      	ldr	r3, [pc, #28]	@ (8008324 <HAL_TIM_PWM_MspInit+0x6c>)
 8008306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	60bb      	str	r3, [r7, #8]
 8008310:	68bb      	ldr	r3, [r7, #8]
}
 8008312:	bf00      	nop
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40010000 	.word	0x40010000
 8008324:	58024400 	.word	0x58024400
 8008328:	40000400 	.word	0x40000400

0800832c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	@ 0x28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	605a      	str	r2, [r3, #4]
 800833e:	609a      	str	r2, [r3, #8]
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800834c:	d135      	bne.n	80083ba <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800834e:	4b1d      	ldr	r3, [pc, #116]	@ (80083c4 <HAL_TIM_IC_MspInit+0x98>)
 8008350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008354:	4a1b      	ldr	r2, [pc, #108]	@ (80083c4 <HAL_TIM_IC_MspInit+0x98>)
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800835e:	4b19      	ldr	r3, [pc, #100]	@ (80083c4 <HAL_TIM_IC_MspInit+0x98>)
 8008360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800836c:	4b15      	ldr	r3, [pc, #84]	@ (80083c4 <HAL_TIM_IC_MspInit+0x98>)
 800836e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008372:	4a14      	ldr	r2, [pc, #80]	@ (80083c4 <HAL_TIM_IC_MspInit+0x98>)
 8008374:	f043 0301 	orr.w	r3, r3, #1
 8008378:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800837c:	4b11      	ldr	r3, [pc, #68]	@ (80083c4 <HAL_TIM_IC_MspInit+0x98>)
 800837e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800838a:	2301      	movs	r3, #1
 800838c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800838e:	2302      	movs	r3, #2
 8008390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008392:	2300      	movs	r3, #0
 8008394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008396:	2300      	movs	r3, #0
 8008398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800839a:	2301      	movs	r3, #1
 800839c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	4619      	mov	r1, r3
 80083a4:	4808      	ldr	r0, [pc, #32]	@ (80083c8 <HAL_TIM_IC_MspInit+0x9c>)
 80083a6:	f005 f98f 	bl	800d6c8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80083aa:	2200      	movs	r2, #0
 80083ac:	2101      	movs	r1, #1
 80083ae:	201c      	movs	r0, #28
 80083b0:	f002 fa8b 	bl	800a8ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80083b4:	201c      	movs	r0, #28
 80083b6:	f002 faa2 	bl	800a8fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80083ba:	bf00      	nop
 80083bc:	3728      	adds	r7, #40	@ 0x28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	58024400 	.word	0x58024400
 80083c8:	58020000 	.word	0x58020000

080083cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008408 <HAL_TIM_Base_MspInit+0x3c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d10e      	bne.n	80083fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80083de:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <HAL_TIM_Base_MspInit+0x40>)
 80083e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083e4:	4a09      	ldr	r2, [pc, #36]	@ (800840c <HAL_TIM_Base_MspInit+0x40>)
 80083e6:	f043 0302 	orr.w	r3, r3, #2
 80083ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083ee:	4b07      	ldr	r3, [pc, #28]	@ (800840c <HAL_TIM_Base_MspInit+0x40>)
 80083f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80083fc:	bf00      	nop
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	40010400 	.word	0x40010400
 800840c:	58024400 	.word	0x58024400

08008410 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08a      	sub	sp, #40	@ 0x28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008418:	f107 0314 	add.w	r3, r7, #20
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	609a      	str	r2, [r3, #8]
 8008424:	60da      	str	r2, [r3, #12]
 8008426:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a26      	ldr	r2, [pc, #152]	@ (80084c8 <HAL_TIM_MspPostInit+0xb8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d120      	bne.n	8008474 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008432:	4b26      	ldr	r3, [pc, #152]	@ (80084cc <HAL_TIM_MspPostInit+0xbc>)
 8008434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008438:	4a24      	ldr	r2, [pc, #144]	@ (80084cc <HAL_TIM_MspPostInit+0xbc>)
 800843a:	f043 0310 	orr.w	r3, r3, #16
 800843e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008442:	4b22      	ldr	r3, [pc, #136]	@ (80084cc <HAL_TIM_MspPostInit+0xbc>)
 8008444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008450:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008456:	2302      	movs	r3, #2
 8008458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800845e:	2300      	movs	r3, #0
 8008460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008462:	2301      	movs	r3, #1
 8008464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008466:	f107 0314 	add.w	r3, r7, #20
 800846a:	4619      	mov	r1, r3
 800846c:	4818      	ldr	r0, [pc, #96]	@ (80084d0 <HAL_TIM_MspPostInit+0xc0>)
 800846e:	f005 f92b 	bl	800d6c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008472:	e024      	b.n	80084be <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a16      	ldr	r2, [pc, #88]	@ (80084d4 <HAL_TIM_MspPostInit+0xc4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d11f      	bne.n	80084be <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800847e:	4b13      	ldr	r3, [pc, #76]	@ (80084cc <HAL_TIM_MspPostInit+0xbc>)
 8008480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008484:	4a11      	ldr	r2, [pc, #68]	@ (80084cc <HAL_TIM_MspPostInit+0xbc>)
 8008486:	f043 0304 	orr.w	r3, r3, #4
 800848a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800848e:	4b0f      	ldr	r3, [pc, #60]	@ (80084cc <HAL_TIM_MspPostInit+0xbc>)
 8008490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800849c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80084a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084a2:	2302      	movs	r3, #2
 80084a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084aa:	2300      	movs	r3, #0
 80084ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80084ae:	2302      	movs	r3, #2
 80084b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084b2:	f107 0314 	add.w	r3, r7, #20
 80084b6:	4619      	mov	r1, r3
 80084b8:	4807      	ldr	r0, [pc, #28]	@ (80084d8 <HAL_TIM_MspPostInit+0xc8>)
 80084ba:	f005 f905 	bl	800d6c8 <HAL_GPIO_Init>
}
 80084be:	bf00      	nop
 80084c0:	3728      	adds	r7, #40	@ 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	40010000 	.word	0x40010000
 80084cc:	58024400 	.word	0x58024400
 80084d0:	58021000 	.word	0x58021000
 80084d4:	40000400 	.word	0x40000400
 80084d8:	58020800 	.word	0x58020800

080084dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80084e0:	4b22      	ldr	r3, [pc, #136]	@ (800856c <MX_USART1_UART_Init+0x90>)
 80084e2:	4a23      	ldr	r2, [pc, #140]	@ (8008570 <MX_USART1_UART_Init+0x94>)
 80084e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80084e6:	4b21      	ldr	r3, [pc, #132]	@ (800856c <MX_USART1_UART_Init+0x90>)
 80084e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80084ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80084ee:	4b1f      	ldr	r3, [pc, #124]	@ (800856c <MX_USART1_UART_Init+0x90>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80084f4:	4b1d      	ldr	r3, [pc, #116]	@ (800856c <MX_USART1_UART_Init+0x90>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80084fa:	4b1c      	ldr	r3, [pc, #112]	@ (800856c <MX_USART1_UART_Init+0x90>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008500:	4b1a      	ldr	r3, [pc, #104]	@ (800856c <MX_USART1_UART_Init+0x90>)
 8008502:	220c      	movs	r2, #12
 8008504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008506:	4b19      	ldr	r3, [pc, #100]	@ (800856c <MX_USART1_UART_Init+0x90>)
 8008508:	2200      	movs	r2, #0
 800850a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800850c:	4b17      	ldr	r3, [pc, #92]	@ (800856c <MX_USART1_UART_Init+0x90>)
 800850e:	2200      	movs	r2, #0
 8008510:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008512:	4b16      	ldr	r3, [pc, #88]	@ (800856c <MX_USART1_UART_Init+0x90>)
 8008514:	2200      	movs	r2, #0
 8008516:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008518:	4b14      	ldr	r3, [pc, #80]	@ (800856c <MX_USART1_UART_Init+0x90>)
 800851a:	2200      	movs	r2, #0
 800851c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800851e:	4b13      	ldr	r3, [pc, #76]	@ (800856c <MX_USART1_UART_Init+0x90>)
 8008520:	2200      	movs	r2, #0
 8008522:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008524:	4811      	ldr	r0, [pc, #68]	@ (800856c <MX_USART1_UART_Init+0x90>)
 8008526:	f00f f831 	bl	801758c <HAL_UART_Init>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008530:	f7ff f992 	bl	8007858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008534:	2100      	movs	r1, #0
 8008536:	480d      	ldr	r0, [pc, #52]	@ (800856c <MX_USART1_UART_Init+0x90>)
 8008538:	f011 fee1 	bl	801a2fe <HAL_UARTEx_SetTxFifoThreshold>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008542:	f7ff f989 	bl	8007858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008546:	2100      	movs	r1, #0
 8008548:	4808      	ldr	r0, [pc, #32]	@ (800856c <MX_USART1_UART_Init+0x90>)
 800854a:	f011 ff16 	bl	801a37a <HAL_UARTEx_SetRxFifoThreshold>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008554:	f7ff f980 	bl	8007858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008558:	4804      	ldr	r0, [pc, #16]	@ (800856c <MX_USART1_UART_Init+0x90>)
 800855a:	f011 fe97 	bl	801a28c <HAL_UARTEx_DisableFifoMode>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008564:	f7ff f978 	bl	8007858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008568:	bf00      	nop
 800856a:	bd80      	pop	{r7, pc}
 800856c:	240004b0 	.word	0x240004b0
 8008570:	40011000 	.word	0x40011000

08008574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b0b8      	sub	sp, #224	@ 0xe0
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800857c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	605a      	str	r2, [r3, #4]
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	60da      	str	r2, [r3, #12]
 800858a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	22b8      	movs	r2, #184	@ 0xb8
 8008592:	2100      	movs	r1, #0
 8008594:	4618      	mov	r0, r3
 8008596:	f015 f931 	bl	801d7fc <memset>
  if(uartHandle->Instance==USART1)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a2b      	ldr	r2, [pc, #172]	@ (800864c <HAL_UART_MspInit+0xd8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d14e      	bne.n	8008642 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80085a4:	f04f 0201 	mov.w	r2, #1
 80085a8:	f04f 0300 	mov.w	r3, #0
 80085ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80085b0:	2300      	movs	r3, #0
 80085b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085b6:	f107 0310 	add.w	r3, r7, #16
 80085ba:	4618      	mov	r0, r3
 80085bc:	f008 fe8c 	bl	80112d8 <HAL_RCCEx_PeriphCLKConfig>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80085c6:	f7ff f947 	bl	8007858 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085ca:	4b21      	ldr	r3, [pc, #132]	@ (8008650 <HAL_UART_MspInit+0xdc>)
 80085cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008650 <HAL_UART_MspInit+0xdc>)
 80085d2:	f043 0310 	orr.w	r3, r3, #16
 80085d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80085da:	4b1d      	ldr	r3, [pc, #116]	@ (8008650 <HAL_UART_MspInit+0xdc>)
 80085dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085e0:	f003 0310 	and.w	r3, r3, #16
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085e8:	4b19      	ldr	r3, [pc, #100]	@ (8008650 <HAL_UART_MspInit+0xdc>)
 80085ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085ee:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <HAL_UART_MspInit+0xdc>)
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80085f8:	4b15      	ldr	r3, [pc, #84]	@ (8008650 <HAL_UART_MspInit+0xdc>)
 80085fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	60bb      	str	r3, [r7, #8]
 8008604:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008606:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800860a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800860e:	2302      	movs	r3, #2
 8008610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008614:	2300      	movs	r3, #0
 8008616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800861a:	2300      	movs	r3, #0
 800861c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008620:	2307      	movs	r3, #7
 8008622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008626:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800862a:	4619      	mov	r1, r3
 800862c:	4809      	ldr	r0, [pc, #36]	@ (8008654 <HAL_UART_MspInit+0xe0>)
 800862e:	f005 f84b 	bl	800d6c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008632:	2200      	movs	r2, #0
 8008634:	2100      	movs	r1, #0
 8008636:	2025      	movs	r0, #37	@ 0x25
 8008638:	f002 f947 	bl	800a8ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800863c:	2025      	movs	r0, #37	@ 0x25
 800863e:	f002 f95e 	bl	800a8fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008642:	bf00      	nop
 8008644:	37e0      	adds	r7, #224	@ 0xe0
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40011000 	.word	0x40011000
 8008650:	58024400 	.word	0x58024400
 8008654:	58020000 	.word	0x58020000

08008658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008658:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008690 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800865c:	f7ff fbe6 	bl	8007e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008660:	480c      	ldr	r0, [pc, #48]	@ (8008694 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008662:	490d      	ldr	r1, [pc, #52]	@ (8008698 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008664:	4a0d      	ldr	r2, [pc, #52]	@ (800869c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008668:	e002      	b.n	8008670 <LoopCopyDataInit>

0800866a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800866a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800866c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800866e:	3304      	adds	r3, #4

08008670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008674:	d3f9      	bcc.n	800866a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008676:	4a0a      	ldr	r2, [pc, #40]	@ (80086a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008678:	4c0a      	ldr	r4, [pc, #40]	@ (80086a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800867a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800867c:	e001      	b.n	8008682 <LoopFillZerobss>

0800867e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800867e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008680:	3204      	adds	r2, #4

08008682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008684:	d3fb      	bcc.n	800867e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008686:	f015 f8c7 	bl	801d818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800868a:	f7fc fa05 	bl	8004a98 <main>
  bx  lr
 800868e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008690:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008694:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008698:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800869c:	08020088 	.word	0x08020088
  ldr r2, =_sbss
 80086a0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80086a4:	240008ac 	.word	0x240008ac

080086a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80086a8:	e7fe      	b.n	80086a8 <ADC3_IRQHandler>
	...

080086ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086b2:	2003      	movs	r0, #3
 80086b4:	f002 f8fe 	bl	800a8b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80086b8:	f008 fc38 	bl	8010f2c <HAL_RCC_GetSysClockFreq>
 80086bc:	4602      	mov	r2, r0
 80086be:	4b15      	ldr	r3, [pc, #84]	@ (8008714 <HAL_Init+0x68>)
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	0a1b      	lsrs	r3, r3, #8
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	4913      	ldr	r1, [pc, #76]	@ (8008718 <HAL_Init+0x6c>)
 80086ca:	5ccb      	ldrb	r3, [r1, r3]
 80086cc:	f003 031f 	and.w	r3, r3, #31
 80086d0:	fa22 f303 	lsr.w	r3, r2, r3
 80086d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008714 <HAL_Init+0x68>)
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	4a0e      	ldr	r2, [pc, #56]	@ (8008718 <HAL_Init+0x6c>)
 80086e0:	5cd3      	ldrb	r3, [r2, r3]
 80086e2:	f003 031f 	and.w	r3, r3, #31
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ec:	4a0b      	ldr	r2, [pc, #44]	@ (800871c <HAL_Init+0x70>)
 80086ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008720 <HAL_Init+0x74>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80086f6:	200f      	movs	r0, #15
 80086f8:	f000 f814 	bl	8008724 <HAL_InitTick>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e002      	b.n	800870c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008706:	f7ff fa35 	bl	8007b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	58024400 	.word	0x58024400
 8008718:	0801e2d0 	.word	0x0801e2d0
 800871c:	24000008 	.word	0x24000008
 8008720:	24000004 	.word	0x24000004

08008724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800872c:	4b15      	ldr	r3, [pc, #84]	@ (8008784 <HAL_InitTick+0x60>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e021      	b.n	800877c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008738:	4b13      	ldr	r3, [pc, #76]	@ (8008788 <HAL_InitTick+0x64>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	4b11      	ldr	r3, [pc, #68]	@ (8008784 <HAL_InitTick+0x60>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	4619      	mov	r1, r3
 8008742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008746:	fbb3 f3f1 	udiv	r3, r3, r1
 800874a:	fbb2 f3f3 	udiv	r3, r2, r3
 800874e:	4618      	mov	r0, r3
 8008750:	f002 f8e3 	bl	800a91a <HAL_SYSTICK_Config>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e00e      	b.n	800877c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b0f      	cmp	r3, #15
 8008762:	d80a      	bhi.n	800877a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008764:	2200      	movs	r2, #0
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	f002 f8ad 	bl	800a8ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008770:	4a06      	ldr	r2, [pc, #24]	@ (800878c <HAL_InitTick+0x68>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e000      	b.n	800877c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	24000010 	.word	0x24000010
 8008788:	24000004 	.word	0x24000004
 800878c:	2400000c 	.word	0x2400000c

08008790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008794:	4b06      	ldr	r3, [pc, #24]	@ (80087b0 <HAL_IncTick+0x20>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	4b06      	ldr	r3, [pc, #24]	@ (80087b4 <HAL_IncTick+0x24>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4413      	add	r3, r2
 80087a0:	4a04      	ldr	r2, [pc, #16]	@ (80087b4 <HAL_IncTick+0x24>)
 80087a2:	6013      	str	r3, [r2, #0]
}
 80087a4:	bf00      	nop
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	24000010 	.word	0x24000010
 80087b4:	24000544 	.word	0x24000544

080087b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
  return uwTick;
 80087bc:	4b03      	ldr	r3, [pc, #12]	@ (80087cc <HAL_GetTick+0x14>)
 80087be:	681b      	ldr	r3, [r3, #0]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	24000544 	.word	0x24000544

080087d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087d8:	f7ff ffee 	bl	80087b8 <HAL_GetTick>
 80087dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e8:	d005      	beq.n	80087f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80087ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008814 <HAL_Delay+0x44>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087f6:	bf00      	nop
 80087f8:	f7ff ffde 	bl	80087b8 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	429a      	cmp	r2, r3
 8008806:	d8f7      	bhi.n	80087f8 <HAL_Delay+0x28>
  {
  }
}
 8008808:	bf00      	nop
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	24000010 	.word	0x24000010

08008818 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	609a      	str	r2, [r3, #8]
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	609a      	str	r2, [r3, #8]
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a18      	ldr	r2, [pc, #96]	@ (80088f0 <LL_ADC_SetChannelPreselection+0x70>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d027      	beq.n	80088e2 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008898:	2b00      	cmp	r3, #0
 800889a:	d107      	bne.n	80088ac <LL_ADC_SetChannelPreselection+0x2c>
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	0e9b      	lsrs	r3, r3, #26
 80088a0:	f003 031f 	and.w	r3, r3, #31
 80088a4:	2201      	movs	r2, #1
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	e015      	b.n	80088d8 <LL_ADC_SetChannelPreselection+0x58>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	fa93 f3a3 	rbit	r3, r3
 80088b6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80088c2:	2320      	movs	r3, #32
 80088c4:	e003      	b.n	80088ce <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	fab3 f383 	clz	r3, r3
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f003 031f 	and.w	r3, r3, #31
 80088d2:	2201      	movs	r2, #1
 80088d4:	fa02 f303 	lsl.w	r3, r2, r3
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	69d2      	ldr	r2, [r2, #28]
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	58026000 	.word	0x58026000

080088f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3360      	adds	r3, #96	@ 0x60
 8008906:	461a      	mov	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4a10      	ldr	r2, [pc, #64]	@ (8008954 <LL_ADC_SetOffset+0x60>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d10b      	bne.n	8008930 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	4313      	orrs	r3, r2
 8008926:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800892e:	e00b      	b.n	8008948 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	430b      	orrs	r3, r1
 8008942:	431a      	orrs	r2, r3
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	601a      	str	r2, [r3, #0]
}
 8008948:	bf00      	nop
 800894a:	371c      	adds	r7, #28
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	58026000 	.word	0x58026000

08008958 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3360      	adds	r3, #96	@ 0x60
 8008966:	461a      	mov	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f003 031f 	and.w	r3, r3, #31
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	fa01 f303 	lsl.w	r3, r1, r3
 80089a4:	431a      	orrs	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	611a      	str	r2, [r3, #16]
}
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
	...

080089b8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a0c      	ldr	r2, [pc, #48]	@ (80089f8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d00e      	beq.n	80089ea <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3360      	adds	r3, #96	@ 0x60
 80089d0:	461a      	mov	r2, r3
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	601a      	str	r2, [r3, #0]
  }
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	58026000 	.word	0x58026000

080089fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a3c <LL_ADC_SetOffsetSaturation+0x40>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10e      	bne.n	8008a2e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3360      	adds	r3, #96	@ 0x60
 8008a14:	461a      	mov	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8008a2e:	bf00      	nop
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	58026000 	.word	0x58026000

08008a40 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a80 <LL_ADC_SetOffsetSign+0x40>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d10e      	bne.n	8008a72 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3360      	adds	r3, #96	@ 0x60
 8008a58:	461a      	mov	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	58026000 	.word	0x58026000

08008a84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3360      	adds	r3, #96	@ 0x60
 8008a94:	461a      	mov	r2, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad4 <LL_ADC_SetOffsetState+0x50>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d108      	bne.n	8008ab8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8008ab6:	e007      	b.n	8008ac8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	601a      	str	r2, [r3, #0]
}
 8008ac8:	bf00      	nop
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	58026000 	.word	0x58026000

08008ad8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e000      	b.n	8008af2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b087      	sub	sp, #28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3330      	adds	r3, #48	@ 0x30
 8008b0e:	461a      	mov	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	0a1b      	lsrs	r3, r3, #8
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	f003 030c 	and.w	r3, r3, #12
 8008b1a:	4413      	add	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	211f      	movs	r1, #31
 8008b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2e:	43db      	mvns	r3, r3
 8008b30:	401a      	ands	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	0e9b      	lsrs	r3, r3, #26
 8008b36:	f003 011f 	and.w	r1, r3, #31
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f003 031f 	and.w	r3, r3, #31
 8008b40:	fa01 f303 	lsl.w	r3, r1, r3
 8008b44:	431a      	orrs	r2, r3
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f023 0203 	bic.w	r2, r3, #3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60da      	str	r2, [r3, #12]
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f043 0201 	orr.w	r2, r3, #1
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	60da      	str	r2, [r3, #12]
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a08      	ldr	r2, [pc, #32]	@ (8008bcc <LL_ADC_REG_SetDMATransferMode+0x30>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d107      	bne.n	8008bbe <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f023 0203 	bic.w	r2, r3, #3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60da      	str	r2, [r3, #12]
  }
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	58026000 	.word	0x58026000

08008bd0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bdc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e000      	b.n	8008bea <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b087      	sub	sp, #28
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3314      	adds	r3, #20
 8008c06:	461a      	mov	r2, r3
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	0e5b      	lsrs	r3, r3, #25
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	4413      	add	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	0d1b      	lsrs	r3, r3, #20
 8008c1e:	f003 031f 	and.w	r3, r3, #31
 8008c22:	2107      	movs	r1, #7
 8008c24:	fa01 f303 	lsl.w	r3, r1, r3
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	401a      	ands	r2, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	0d1b      	lsrs	r3, r3, #20
 8008c30:	f003 031f 	and.w	r3, r3, #31
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc4 <LL_ADC_SetChannelSingleDiff+0x78>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d115      	bne.n	8008c8c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	401a      	ands	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f003 0318 	and.w	r3, r3, #24
 8008c76:	4914      	ldr	r1, [pc, #80]	@ (8008cc8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008c78:	40d9      	lsrs	r1, r3
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	400b      	ands	r3, r1
 8008c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c82:	431a      	orrs	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8008c8a:	e014      	b.n	8008cb6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	401a      	ands	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f003 0318 	and.w	r3, r3, #24
 8008ca2:	4909      	ldr	r1, [pc, #36]	@ (8008cc8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008ca4:	40d9      	lsrs	r1, r3
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	400b      	ands	r3, r1
 8008caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	58026000 	.word	0x58026000
 8008cc8:	000fffff 	.word	0x000fffff

08008ccc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f003 031f 	and.w	r3, r3, #31
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	4b04      	ldr	r3, [pc, #16]	@ (8008d24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8008d12:	4013      	ands	r3, r2
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	6093      	str	r3, [r2, #8]
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	5fffffc0 	.word	0x5fffffc0

08008d28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d3c:	d101      	bne.n	8008d42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	4b05      	ldr	r3, [pc, #20]	@ (8008d74 <LL_ADC_EnableInternalRegulator+0x24>)
 8008d5e:	4013      	ands	r3, r2
 8008d60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	6fffffc0 	.word	0x6fffffc0

08008d78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d8c:	d101      	bne.n	8008d92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	4b05      	ldr	r3, [pc, #20]	@ (8008dc4 <LL_ADC_Enable+0x24>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	f043 0201 	orr.w	r2, r3, #1
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	7fffffc0 	.word	0x7fffffc0

08008dc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <LL_ADC_IsEnabled+0x18>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e000      	b.n	8008de2 <LL_ADC_IsEnabled+0x1a>
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	4b05      	ldr	r3, [pc, #20]	@ (8008e14 <LL_ADC_REG_StartConversion+0x24>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	f043 0204 	orr.w	r2, r3, #4
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	7fffffc0 	.word	0x7fffffc0

08008e18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d101      	bne.n	8008e30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e000      	b.n	8008e32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 0308 	and.w	r3, r3, #8
 8008e4e:	2b08      	cmp	r3, #8
 8008e50:	d101      	bne.n	8008e56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008e64:	b590      	push	{r4, r7, lr}
 8008e66:	b089      	sub	sp, #36	@ 0x24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e1ee      	b.n	800925c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7fa fc23 	bl	80036d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff ff3f 	bl	8008d28 <LL_ADC_IsDeepPowerDownEnabled>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff ff25 	bl	8008d04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff ff5a 	bl	8008d78 <LL_ADC_IsInternalRegulatorEnabled>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d114      	bne.n	8008ef4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff ff3e 	bl	8008d50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8009110 <HAL_ADC_Init+0x2ac>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	099b      	lsrs	r3, r3, #6
 8008eda:	4a8e      	ldr	r2, [pc, #568]	@ (8009114 <HAL_ADC_Init+0x2b0>)
 8008edc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee0:	099b      	lsrs	r3, r3, #6
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008ee6:	e002      	b.n	8008eee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1f9      	bne.n	8008ee8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ff3d 	bl	8008d78 <LL_ADC_IsInternalRegulatorEnabled>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10d      	bne.n	8008f20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f08:	f043 0210 	orr.w	r2, r3, #16
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f14:	f043 0201 	orr.w	r2, r3, #1
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff ff77 	bl	8008e18 <LL_ADC_REG_IsConversionOngoing>
 8008f2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f30:	f003 0310 	and.w	r3, r3, #16
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f040 8188 	bne.w	800924a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f040 8184 	bne.w	800924a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f46:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008f4a:	f043 0202 	orr.w	r2, r3, #2
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff ff36 	bl	8008dc8 <LL_ADC_IsEnabled>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d136      	bne.n	8008fd0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a6c      	ldr	r2, [pc, #432]	@ (8009118 <HAL_ADC_Init+0x2b4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d004      	beq.n	8008f76 <HAL_ADC_Init+0x112>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a6a      	ldr	r2, [pc, #424]	@ (800911c <HAL_ADC_Init+0x2b8>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d10e      	bne.n	8008f94 <HAL_ADC_Init+0x130>
 8008f76:	4868      	ldr	r0, [pc, #416]	@ (8009118 <HAL_ADC_Init+0x2b4>)
 8008f78:	f7ff ff26 	bl	8008dc8 <LL_ADC_IsEnabled>
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	4867      	ldr	r0, [pc, #412]	@ (800911c <HAL_ADC_Init+0x2b8>)
 8008f80:	f7ff ff22 	bl	8008dc8 <LL_ADC_IsEnabled>
 8008f84:	4603      	mov	r3, r0
 8008f86:	4323      	orrs	r3, r4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2301      	moveq	r3, #1
 8008f8e:	2300      	movne	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	e008      	b.n	8008fa6 <HAL_ADC_Init+0x142>
 8008f94:	4862      	ldr	r0, [pc, #392]	@ (8009120 <HAL_ADC_Init+0x2bc>)
 8008f96:	f7ff ff17 	bl	8008dc8 <LL_ADC_IsEnabled>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	bf0c      	ite	eq
 8008fa0:	2301      	moveq	r3, #1
 8008fa2:	2300      	movne	r3, #0
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d012      	beq.n	8008fd0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a5a      	ldr	r2, [pc, #360]	@ (8009118 <HAL_ADC_Init+0x2b4>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d004      	beq.n	8008fbe <HAL_ADC_Init+0x15a>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a58      	ldr	r2, [pc, #352]	@ (800911c <HAL_ADC_Init+0x2b8>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d101      	bne.n	8008fc2 <HAL_ADC_Init+0x15e>
 8008fbe:	4a59      	ldr	r2, [pc, #356]	@ (8009124 <HAL_ADC_Init+0x2c0>)
 8008fc0:	e000      	b.n	8008fc4 <HAL_ADC_Init+0x160>
 8008fc2:	4a59      	ldr	r2, [pc, #356]	@ (8009128 <HAL_ADC_Init+0x2c4>)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7ff fc24 	bl	8008818 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a52      	ldr	r2, [pc, #328]	@ (8009120 <HAL_ADC_Init+0x2bc>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d129      	bne.n	800902e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	7e5b      	ldrb	r3, [r3, #25]
 8008fde:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008fe4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8008fea:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d013      	beq.n	800901c <HAL_ADC_Init+0x1b8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	2b0c      	cmp	r3, #12
 8008ffa:	d00d      	beq.n	8009018 <HAL_ADC_Init+0x1b4>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	2b1c      	cmp	r3, #28
 8009002:	d007      	beq.n	8009014 <HAL_ADC_Init+0x1b0>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b18      	cmp	r3, #24
 800900a:	d101      	bne.n	8009010 <HAL_ADC_Init+0x1ac>
 800900c:	2318      	movs	r3, #24
 800900e:	e006      	b.n	800901e <HAL_ADC_Init+0x1ba>
 8009010:	2300      	movs	r3, #0
 8009012:	e004      	b.n	800901e <HAL_ADC_Init+0x1ba>
 8009014:	2310      	movs	r3, #16
 8009016:	e002      	b.n	800901e <HAL_ADC_Init+0x1ba>
 8009018:	2308      	movs	r3, #8
 800901a:	e000      	b.n	800901e <HAL_ADC_Init+0x1ba>
 800901c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800901e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009026:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009028:	4313      	orrs	r3, r2
 800902a:	61bb      	str	r3, [r7, #24]
 800902c:	e00e      	b.n	800904c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	7e5b      	ldrb	r3, [r3, #25]
 8009032:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009038:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800903e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009046:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009048:	4313      	orrs	r3, r2
 800904a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d106      	bne.n	8009064 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800905a:	3b01      	subs	r3, #1
 800905c:	045b      	lsls	r3, r3, #17
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	4313      	orrs	r3, r2
 8009062:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009068:	2b00      	cmp	r3, #0
 800906a:	d009      	beq.n	8009080 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009070:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009078:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	4313      	orrs	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a26      	ldr	r2, [pc, #152]	@ (8009120 <HAL_ADC_Init+0x2bc>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d115      	bne.n	80090b6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	4b26      	ldr	r3, [pc, #152]	@ (800912c <HAL_ADC_Init+0x2c8>)
 8009092:	4013      	ands	r3, r2
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	6812      	ldr	r2, [r2, #0]
 8009098:	69b9      	ldr	r1, [r7, #24]
 800909a:	430b      	orrs	r3, r1
 800909c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	611a      	str	r2, [r3, #16]
 80090b4:	e009      	b.n	80090ca <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009130 <HAL_ADC_Init+0x2cc>)
 80090be:	4013      	ands	r3, r2
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	69b9      	ldr	r1, [r7, #24]
 80090c6:	430b      	orrs	r3, r1
 80090c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff fea2 	bl	8008e18 <LL_ADC_REG_IsConversionOngoing>
 80090d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff feaf 	bl	8008e3e <LL_ADC_INJ_IsConversionOngoing>
 80090e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f040 808e 	bne.w	8009206 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 808a 	bne.w	8009206 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009120 <HAL_ADC_Init+0x2bc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d11b      	bne.n	8009134 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7e1b      	ldrb	r3, [r3, #24]
 8009100:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009108:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800910a:	4313      	orrs	r3, r2
 800910c:	61bb      	str	r3, [r7, #24]
 800910e:	e018      	b.n	8009142 <HAL_ADC_Init+0x2de>
 8009110:	24000004 	.word	0x24000004
 8009114:	053e2d63 	.word	0x053e2d63
 8009118:	40022000 	.word	0x40022000
 800911c:	40022100 	.word	0x40022100
 8009120:	58026000 	.word	0x58026000
 8009124:	40022300 	.word	0x40022300
 8009128:	58026300 	.word	0x58026300
 800912c:	fff04007 	.word	0xfff04007
 8009130:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	7e1b      	ldrb	r3, [r3, #24]
 8009138:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800913e:	4313      	orrs	r3, r2
 8009140:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	4b46      	ldr	r3, [pc, #280]	@ (8009264 <HAL_ADC_Init+0x400>)
 800914a:	4013      	ands	r3, r2
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	69b9      	ldr	r1, [r7, #24]
 8009152:	430b      	orrs	r3, r1
 8009154:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800915c:	2b01      	cmp	r3, #1
 800915e:	d137      	bne.n	80091d0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009164:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a3f      	ldr	r2, [pc, #252]	@ (8009268 <HAL_ADC_Init+0x404>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d116      	bne.n	800919e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691a      	ldr	r2, [r3, #16]
 8009176:	4b3d      	ldr	r3, [pc, #244]	@ (800926c <HAL_ADC_Init+0x408>)
 8009178:	4013      	ands	r3, r2
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009182:	4311      	orrs	r1, r2
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009188:	4311      	orrs	r1, r2
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800918e:	430a      	orrs	r2, r1
 8009190:	431a      	orrs	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	611a      	str	r2, [r3, #16]
 800919c:	e020      	b.n	80091e0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	691a      	ldr	r2, [r3, #16]
 80091a4:	4b32      	ldr	r3, [pc, #200]	@ (8009270 <HAL_ADC_Init+0x40c>)
 80091a6:	4013      	ands	r3, r2
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80091ac:	3a01      	subs	r2, #1
 80091ae:	0411      	lsls	r1, r2, #16
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80091b4:	4311      	orrs	r1, r2
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80091ba:	4311      	orrs	r1, r2
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80091c0:	430a      	orrs	r2, r1
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f042 0201 	orr.w	r2, r2, #1
 80091cc:	611a      	str	r2, [r3, #16]
 80091ce:	e007      	b.n	80091e0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691a      	ldr	r2, [r3, #16]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0201 	bic.w	r2, r2, #1
 80091de:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009268 <HAL_ADC_Init+0x404>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d002      	beq.n	8009206 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f001 f967 	bl	800a4d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d10c      	bne.n	8009228 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009214:	f023 010f 	bic.w	r1, r3, #15
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	1e5a      	subs	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	631a      	str	r2, [r3, #48]	@ 0x30
 8009226:	e007      	b.n	8009238 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 020f 	bic.w	r2, r2, #15
 8009236:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800923c:	f023 0303 	bic.w	r3, r3, #3
 8009240:	f043 0201 	orr.w	r2, r3, #1
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	661a      	str	r2, [r3, #96]	@ 0x60
 8009248:	e007      	b.n	800925a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800924e:	f043 0210 	orr.w	r2, r3, #16
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800925a:	7ffb      	ldrb	r3, [r7, #31]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3724      	adds	r7, #36	@ 0x24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd90      	pop	{r4, r7, pc}
 8009264:	ffffbffc 	.word	0xffffbffc
 8009268:	58026000 	.word	0x58026000
 800926c:	fc00f81f 	.word	0xfc00f81f
 8009270:	fc00f81e 	.word	0xfc00f81e

08009274 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a60      	ldr	r2, [pc, #384]	@ (8009408 <HAL_ADC_Start_DMA+0x194>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d004      	beq.n	8009294 <HAL_ADC_Start_DMA+0x20>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a5f      	ldr	r2, [pc, #380]	@ (800940c <HAL_ADC_Start_DMA+0x198>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d101      	bne.n	8009298 <HAL_ADC_Start_DMA+0x24>
 8009294:	4b5e      	ldr	r3, [pc, #376]	@ (8009410 <HAL_ADC_Start_DMA+0x19c>)
 8009296:	e000      	b.n	800929a <HAL_ADC_Start_DMA+0x26>
 8009298:	4b5e      	ldr	r3, [pc, #376]	@ (8009414 <HAL_ADC_Start_DMA+0x1a0>)
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fd16 	bl	8008ccc <LL_ADC_GetMultimode>
 80092a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fdb6 	bl	8008e18 <LL_ADC_REG_IsConversionOngoing>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f040 80a2 	bne.w	80093f8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d101      	bne.n	80092c2 <HAL_ADC_Start_DMA+0x4e>
 80092be:	2302      	movs	r3, #2
 80092c0:	e09d      	b.n	80093fe <HAL_ADC_Start_DMA+0x18a>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d006      	beq.n	80092de <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d003      	beq.n	80092de <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2b09      	cmp	r3, #9
 80092da:	f040 8086 	bne.w	80093ea <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 ffda 	bl	800a298 <ADC_Enable>
 80092e4:	4603      	mov	r3, r0
 80092e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d178      	bne.n	80093e0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80092f2:	4b49      	ldr	r3, [pc, #292]	@ (8009418 <HAL_ADC_Start_DMA+0x1a4>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a42      	ldr	r2, [pc, #264]	@ (800940c <HAL_ADC_Start_DMA+0x198>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d002      	beq.n	800930e <HAL_ADC_Start_DMA+0x9a>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	e000      	b.n	8009310 <HAL_ADC_Start_DMA+0x9c>
 800930e:	4b3e      	ldr	r3, [pc, #248]	@ (8009408 <HAL_ADC_Start_DMA+0x194>)
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	6812      	ldr	r2, [r2, #0]
 8009314:	4293      	cmp	r3, r2
 8009316:	d002      	beq.n	800931e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009322:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800932e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d006      	beq.n	8009344 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800933a:	f023 0206 	bic.w	r2, r3, #6
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	665a      	str	r2, [r3, #100]	@ 0x64
 8009342:	e002      	b.n	800934a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934e:	4a33      	ldr	r2, [pc, #204]	@ (800941c <HAL_ADC_Start_DMA+0x1a8>)
 8009350:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009356:	4a32      	ldr	r2, [pc, #200]	@ (8009420 <HAL_ADC_Start_DMA+0x1ac>)
 8009358:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800935e:	4a31      	ldr	r2, [pc, #196]	@ (8009424 <HAL_ADC_Start_DMA+0x1b0>)
 8009360:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	221c      	movs	r2, #28
 8009368:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f042 0210 	orr.w	r2, r2, #16
 8009380:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a28      	ldr	r2, [pc, #160]	@ (8009428 <HAL_ADC_Start_DMA+0x1b4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d10f      	bne.n	80093ac <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7ff fbfe 	bl	8008b9c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7ff fbe9 	bl	8008b7c <LL_ADC_EnableDMAReq>
 80093aa:	e007      	b.n	80093bc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b4:	4619      	mov	r1, r3
 80093b6:	4610      	mov	r0, r2
 80093b8:	f7ff fbcd 	bl	8008b56 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3340      	adds	r3, #64	@ 0x40
 80093c6:	4619      	mov	r1, r3
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f001 fe82 	bl	800b0d4 <HAL_DMA_Start_IT>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff fd09 	bl	8008df0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80093de:	e00d      	b.n	80093fc <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80093e8:	e008      	b.n	80093fc <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80093f6:	e001      	b.n	80093fc <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80093f8:	2302      	movs	r3, #2
 80093fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	40022000 	.word	0x40022000
 800940c:	40022100 	.word	0x40022100
 8009410:	40022300 	.word	0x40022300
 8009414:	58026300 	.word	0x58026300
 8009418:	fffff0fe 	.word	0xfffff0fe
 800941c:	0800a3ad 	.word	0x0800a3ad
 8009420:	0800a485 	.word	0x0800a485
 8009424:	0800a4a1 	.word	0x0800a4a1
 8009428:	58026000 	.word	0x58026000

0800942c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08a      	sub	sp, #40	@ 0x28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009434:	2300      	movs	r3, #0
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a87      	ldr	r2, [pc, #540]	@ (800966c <HAL_ADC_IRQHandler+0x240>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_ADC_IRQHandler+0x30>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a86      	ldr	r2, [pc, #536]	@ (8009670 <HAL_ADC_IRQHandler+0x244>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d101      	bne.n	8009460 <HAL_ADC_IRQHandler+0x34>
 800945c:	4b85      	ldr	r3, [pc, #532]	@ (8009674 <HAL_ADC_IRQHandler+0x248>)
 800945e:	e000      	b.n	8009462 <HAL_ADC_IRQHandler+0x36>
 8009460:	4b85      	ldr	r3, [pc, #532]	@ (8009678 <HAL_ADC_IRQHandler+0x24c>)
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff fc32 	bl	8008ccc <LL_ADC_GetMultimode>
 8009468:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d017      	beq.n	80094a4 <HAL_ADC_IRQHandler+0x78>
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	f003 0302 	and.w	r3, r3, #2
 800947a:	2b00      	cmp	r3, #0
 800947c:	d012      	beq.n	80094a4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009482:	f003 0310 	and.w	r3, r3, #16
 8009486:	2b00      	cmp	r3, #0
 8009488:	d105      	bne.n	8009496 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800948e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 f932 	bl	800a700 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2202      	movs	r2, #2
 80094a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <HAL_ADC_IRQHandler+0x8c>
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 8083 	beq.w	80095ca <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d07d      	beq.n	80095ca <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094d2:	f003 0310 	and.w	r3, r3, #16
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d105      	bne.n	80094e6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff faf4 	bl	8008ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d062      	beq.n	80095bc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a5d      	ldr	r2, [pc, #372]	@ (8009670 <HAL_ADC_IRQHandler+0x244>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d002      	beq.n	8009506 <HAL_ADC_IRQHandler+0xda>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	e000      	b.n	8009508 <HAL_ADC_IRQHandler+0xdc>
 8009506:	4b59      	ldr	r3, [pc, #356]	@ (800966c <HAL_ADC_IRQHandler+0x240>)
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6812      	ldr	r2, [r2, #0]
 800950c:	4293      	cmp	r3, r2
 800950e:	d008      	beq.n	8009522 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d005      	beq.n	8009522 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b05      	cmp	r3, #5
 800951a:	d002      	beq.n	8009522 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2b09      	cmp	r3, #9
 8009520:	d104      	bne.n	800952c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	623b      	str	r3, [r7, #32]
 800952a:	e00c      	b.n	8009546 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a4f      	ldr	r2, [pc, #316]	@ (8009670 <HAL_ADC_IRQHandler+0x244>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d002      	beq.n	800953c <HAL_ADC_IRQHandler+0x110>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	e000      	b.n	800953e <HAL_ADC_IRQHandler+0x112>
 800953c:	4b4b      	ldr	r3, [pc, #300]	@ (800966c <HAL_ADC_IRQHandler+0x240>)
 800953e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d135      	bne.n	80095bc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	2b08      	cmp	r3, #8
 800955c:	d12e      	bne.n	80095bc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff fc58 	bl	8008e18 <LL_ADC_REG_IsConversionOngoing>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d11a      	bne.n	80095a4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 020c 	bic.w	r2, r2, #12
 800957c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009582:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800958e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d112      	bne.n	80095bc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800959a:	f043 0201 	orr.w	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80095a2:	e00b      	b.n	80095bc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095a8:	f043 0210 	orr.w	r2, r3, #16
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095b4:	f043 0201 	orr.w	r2, r3, #1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f96f 	bl	80098a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	220c      	movs	r2, #12
 80095c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d004      	beq.n	80095de <HAL_ADC_IRQHandler+0x1b2>
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80a0 	beq.w	800972a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 809a 	beq.w	800972a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fa:	f003 0310 	and.w	r3, r3, #16
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d105      	bne.n	800960e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009606:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff fadc 	bl	8008bd0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009618:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff fa5a 	bl	8008ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009624:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a11      	ldr	r2, [pc, #68]	@ (8009670 <HAL_ADC_IRQHandler+0x244>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d002      	beq.n	8009636 <HAL_ADC_IRQHandler+0x20a>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	e000      	b.n	8009638 <HAL_ADC_IRQHandler+0x20c>
 8009636:	4b0d      	ldr	r3, [pc, #52]	@ (800966c <HAL_ADC_IRQHandler+0x240>)
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	6812      	ldr	r2, [r2, #0]
 800963c:	4293      	cmp	r3, r2
 800963e:	d008      	beq.n	8009652 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2b06      	cmp	r3, #6
 800964a:	d002      	beq.n	8009652 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2b07      	cmp	r3, #7
 8009650:	d104      	bne.n	800965c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	623b      	str	r3, [r7, #32]
 800965a:	e014      	b.n	8009686 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a03      	ldr	r2, [pc, #12]	@ (8009670 <HAL_ADC_IRQHandler+0x244>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d00a      	beq.n	800967c <HAL_ADC_IRQHandler+0x250>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	e008      	b.n	800967e <HAL_ADC_IRQHandler+0x252>
 800966c:	40022000 	.word	0x40022000
 8009670:	40022100 	.word	0x40022100
 8009674:	40022300 	.word	0x40022300
 8009678:	58026300 	.word	0x58026300
 800967c:	4b84      	ldr	r3, [pc, #528]	@ (8009890 <HAL_ADC_IRQHandler+0x464>)
 800967e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d047      	beq.n	800971c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d007      	beq.n	80096a6 <HAL_ADC_IRQHandler+0x27a>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d03f      	beq.n	800971c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d13a      	bne.n	800971c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b0:	2b40      	cmp	r3, #64	@ 0x40
 80096b2:	d133      	bne.n	800971c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d12e      	bne.n	800971c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fbbb 	bl	8008e3e <LL_ADC_INJ_IsConversionOngoing>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d11a      	bne.n	8009704 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80096dc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d112      	bne.n	800971c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096fa:	f043 0201 	orr.w	r2, r3, #1
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	661a      	str	r2, [r3, #96]	@ 0x60
 8009702:	e00b      	b.n	800971c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009708:	f043 0210 	orr.w	r2, r3, #16
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009714:	f043 0201 	orr.w	r2, r3, #1
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 ffc7 	bl	800a6b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2260      	movs	r2, #96	@ 0x60
 8009728:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009730:	2b00      	cmp	r3, #0
 8009732:	d011      	beq.n	8009758 <HAL_ADC_IRQHandler+0x32c>
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00c      	beq.n	8009758 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009742:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8bc 	bl	80098c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2280      	movs	r2, #128	@ 0x80
 8009756:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800975e:	2b00      	cmp	r3, #0
 8009760:	d012      	beq.n	8009788 <HAL_ADC_IRQHandler+0x35c>
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00d      	beq.n	8009788 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009770:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 ffad 	bl	800a6d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009786:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800978e:	2b00      	cmp	r3, #0
 8009790:	d012      	beq.n	80097b8 <HAL_ADC_IRQHandler+0x38c>
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00d      	beq.n	80097b8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 ff9f 	bl	800a6ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	f003 0310 	and.w	r3, r3, #16
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d043      	beq.n	800984a <HAL_ADC_IRQHandler+0x41e>
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d03e      	beq.n	800984a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80097d4:	2301      	movs	r3, #1
 80097d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80097d8:	e021      	b.n	800981e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d015      	beq.n	800980c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009890 <HAL_ADC_IRQHandler+0x464>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d004      	beq.n	80097f4 <HAL_ADC_IRQHandler+0x3c8>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a29      	ldr	r2, [pc, #164]	@ (8009894 <HAL_ADC_IRQHandler+0x468>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d101      	bne.n	80097f8 <HAL_ADC_IRQHandler+0x3cc>
 80097f4:	4b28      	ldr	r3, [pc, #160]	@ (8009898 <HAL_ADC_IRQHandler+0x46c>)
 80097f6:	e000      	b.n	80097fa <HAL_ADC_IRQHandler+0x3ce>
 80097f8:	4b28      	ldr	r3, [pc, #160]	@ (800989c <HAL_ADC_IRQHandler+0x470>)
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7ff fa74 	bl	8008ce8 <LL_ADC_GetMultiDMATransfer>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8009806:	2301      	movs	r3, #1
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
 800980a:	e008      	b.n	800981e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800981a:	2301      	movs	r3, #1
 800981c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	2b01      	cmp	r3, #1
 8009822:	d10e      	bne.n	8009842 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009828:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009834:	f043 0202 	orr.w	r2, r3, #2
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f84d 	bl	80098dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2210      	movs	r2, #16
 8009848:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009850:	2b00      	cmp	r3, #0
 8009852:	d018      	beq.n	8009886 <HAL_ADC_IRQHandler+0x45a>
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800985a:	2b00      	cmp	r3, #0
 800985c:	d013      	beq.n	8009886 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009862:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800986e:	f043 0208 	orr.w	r2, r3, #8
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800987e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 ff1f 	bl	800a6c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009886:	bf00      	nop
 8009888:	3728      	adds	r7, #40	@ 0x28
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	40022000 	.word	0x40022000
 8009894:	40022100 	.word	0x40022100
 8009898:	40022300 	.word	0x40022300
 800989c:	58026300 	.word	0x58026300

080098a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80098f0:	b590      	push	{r4, r7, lr}
 80098f2:	b0a5      	sub	sp, #148	@ 0x94
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800990a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	4aa4      	ldr	r2, [pc, #656]	@ (8009ba4 <HAL_ADC_ConfigChannel+0x2b4>)
 8009912:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d102      	bne.n	8009924 <HAL_ADC_ConfigChannel+0x34>
 800991e:	2302      	movs	r3, #2
 8009920:	f000 bca2 	b.w	800a268 <HAL_ADC_ConfigChannel+0x978>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fa71 	bl	8008e18 <LL_ADC_REG_IsConversionOngoing>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	f040 8486 	bne.w	800a24a <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	db31      	blt.n	80099aa <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a97      	ldr	r2, [pc, #604]	@ (8009ba8 <HAL_ADC_ConfigChannel+0x2b8>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d02c      	beq.n	80099aa <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009958:	2b00      	cmp	r3, #0
 800995a:	d108      	bne.n	800996e <HAL_ADC_ConfigChannel+0x7e>
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	0e9b      	lsrs	r3, r3, #26
 8009962:	f003 031f 	and.w	r3, r3, #31
 8009966:	2201      	movs	r2, #1
 8009968:	fa02 f303 	lsl.w	r3, r2, r3
 800996c:	e016      	b.n	800999c <HAL_ADC_ConfigChannel+0xac>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009974:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009976:	fa93 f3a3 	rbit	r3, r3
 800997a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800997c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800997e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8009986:	2320      	movs	r3, #32
 8009988:	e003      	b.n	8009992 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800998a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800998c:	fab3 f383 	clz	r3, r3
 8009990:	b2db      	uxtb	r3, r3
 8009992:	f003 031f 	and.w	r3, r3, #31
 8009996:	2201      	movs	r2, #1
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6812      	ldr	r2, [r2, #0]
 80099a0:	69d1      	ldr	r1, [r2, #28]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	430b      	orrs	r3, r1
 80099a8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	6859      	ldr	r1, [r3, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f7ff f8a1 	bl	8008afe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff fa29 	bl	8008e18 <LL_ADC_REG_IsConversionOngoing>
 80099c6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff fa35 	bl	8008e3e <LL_ADC_INJ_IsConversionOngoing>
 80099d4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80099d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f040 824a 	bne.w	8009e76 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80099e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f040 8245 	bne.w	8009e76 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	6819      	ldr	r1, [r3, #0]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	461a      	mov	r2, r3
 80099fa:	f7ff f8fc 	bl	8008bf6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a69      	ldr	r2, [pc, #420]	@ (8009ba8 <HAL_ADC_ConfigChannel+0x2b8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d10d      	bne.n	8009a24 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	695a      	ldr	r2, [r3, #20]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	08db      	lsrs	r3, r3, #3
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a22:	e032      	b.n	8009a8a <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009a24:	4b61      	ldr	r3, [pc, #388]	@ (8009bac <HAL_ADC_ConfigChannel+0x2bc>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a30:	d10b      	bne.n	8009a4a <HAL_ADC_ConfigChannel+0x15a>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	695a      	ldr	r2, [r3, #20]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	089b      	lsrs	r3, r3, #2
 8009a3e:	f003 0307 	and.w	r3, r3, #7
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	fa02 f303 	lsl.w	r3, r2, r3
 8009a48:	e01d      	b.n	8009a86 <HAL_ADC_ConfigChannel+0x196>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10b      	bne.n	8009a70 <HAL_ADC_ConfigChannel+0x180>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	695a      	ldr	r2, [r3, #20]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	089b      	lsrs	r3, r3, #2
 8009a64:	f003 0307 	and.w	r3, r3, #7
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6e:	e00a      	b.n	8009a86 <HAL_ADC_ConfigChannel+0x196>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695a      	ldr	r2, [r3, #20]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	089b      	lsrs	r3, r3, #2
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	fa02 f303 	lsl.w	r3, r2, r3
 8009a86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d048      	beq.n	8009b24 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	6919      	ldr	r1, [r3, #16]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009aa2:	f7fe ff27 	bl	80088f4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8009ba8 <HAL_ADC_ConfigChannel+0x2b8>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d119      	bne.n	8009ae4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	6919      	ldr	r1, [r3, #16]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	461a      	mov	r2, r3
 8009abe:	f7fe ffbf 	bl	8008a40 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	6919      	ldr	r1, [r3, #16]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d102      	bne.n	8009ada <HAL_ADC_ConfigChannel+0x1ea>
 8009ad4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ad8:	e000      	b.n	8009adc <HAL_ADC_ConfigChannel+0x1ec>
 8009ada:	2300      	movs	r3, #0
 8009adc:	461a      	mov	r2, r3
 8009ade:	f7fe ff8d 	bl	80089fc <LL_ADC_SetOffsetSaturation>
 8009ae2:	e1c8      	b.n	8009e76 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	6919      	ldr	r1, [r3, #16]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d102      	bne.n	8009afc <HAL_ADC_ConfigChannel+0x20c>
 8009af6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009afa:	e000      	b.n	8009afe <HAL_ADC_ConfigChannel+0x20e>
 8009afc:	2300      	movs	r3, #0
 8009afe:	461a      	mov	r2, r3
 8009b00:	f7fe ff5a 	bl	80089b8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	6919      	ldr	r1, [r3, #16]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	7e1b      	ldrb	r3, [r3, #24]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d102      	bne.n	8009b1a <HAL_ADC_ConfigChannel+0x22a>
 8009b14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b18:	e000      	b.n	8009b1c <HAL_ADC_ConfigChannel+0x22c>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f7fe ff31 	bl	8008984 <LL_ADC_SetDataRightShift>
 8009b22:	e1a8      	b.n	8009e76 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a1f      	ldr	r2, [pc, #124]	@ (8009ba8 <HAL_ADC_ConfigChannel+0x2b8>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	f040 815b 	bne.w	8009de6 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2100      	movs	r1, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe ff0e 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <HAL_ADC_ConfigChannel+0x26c>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe ff03 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009b52:	4603      	mov	r3, r0
 8009b54:	0e9b      	lsrs	r3, r3, #26
 8009b56:	f003 021f 	and.w	r2, r3, #31
 8009b5a:	e017      	b.n	8009b8c <HAL_ADC_ConfigChannel+0x29c>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2100      	movs	r1, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fef8 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b6e:	fa93 f3a3 	rbit	r3, r3
 8009b72:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009b7e:	2320      	movs	r3, #32
 8009b80:	e003      	b.n	8009b8a <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8009b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b84:	fab3 f383 	clz	r3, r3
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10b      	bne.n	8009bb0 <HAL_ADC_ConfigChannel+0x2c0>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	0e9b      	lsrs	r3, r3, #26
 8009b9e:	f003 031f 	and.w	r3, r3, #31
 8009ba2:	e017      	b.n	8009bd4 <HAL_ADC_ConfigChannel+0x2e4>
 8009ba4:	47ff0000 	.word	0x47ff0000
 8009ba8:	58026000 	.word	0x58026000
 8009bac:	5c001000 	.word	0x5c001000
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bb8:	fa93 f3a3 	rbit	r3, r3
 8009bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bc0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8009bc8:	2320      	movs	r3, #32
 8009bca:	e003      	b.n	8009bd4 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8009bcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bce:	fab3 f383 	clz	r3, r3
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d106      	bne.n	8009be6 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe ff4f 	bl	8008a84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2101      	movs	r1, #1
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe feb3 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <HAL_ADC_ConfigChannel+0x322>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2101      	movs	r1, #1
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fe fea8 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	0e9b      	lsrs	r3, r3, #26
 8009c0c:	f003 021f 	and.w	r2, r3, #31
 8009c10:	e017      	b.n	8009c42 <HAL_ADC_ConfigChannel+0x352>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2101      	movs	r1, #1
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe fe9d 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c24:	fa93 f3a3 	rbit	r3, r3
 8009c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c2c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8009c34:	2320      	movs	r3, #32
 8009c36:	e003      	b.n	8009c40 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8009c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c3a:	fab3 f383 	clz	r3, r3
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	461a      	mov	r2, r3
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d105      	bne.n	8009c5a <HAL_ADC_ConfigChannel+0x36a>
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	0e9b      	lsrs	r3, r3, #26
 8009c54:	f003 031f 	and.w	r3, r3, #31
 8009c58:	e011      	b.n	8009c7e <HAL_ADC_ConfigChannel+0x38e>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c62:	fa93 f3a3 	rbit	r3, r3
 8009c66:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8009c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8009c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8009c72:	2320      	movs	r3, #32
 8009c74:	e003      	b.n	8009c7e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8009c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c78:	fab3 f383 	clz	r3, r3
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d106      	bne.n	8009c90 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2200      	movs	r2, #0
 8009c88:	2101      	movs	r1, #1
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fefa 	bl	8008a84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2102      	movs	r1, #2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fe5e 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10a      	bne.n	8009cbc <HAL_ADC_ConfigChannel+0x3cc>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2102      	movs	r1, #2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fe53 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	0e9b      	lsrs	r3, r3, #26
 8009cb6:	f003 021f 	and.w	r2, r3, #31
 8009cba:	e017      	b.n	8009cec <HAL_ADC_ConfigChannel+0x3fc>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2102      	movs	r1, #2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fe48 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cce:	fa93 f3a3 	rbit	r3, r3
 8009cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8009cde:	2320      	movs	r3, #32
 8009ce0:	e003      	b.n	8009cea <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce4:	fab3 f383 	clz	r3, r3
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	461a      	mov	r2, r3
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d105      	bne.n	8009d04 <HAL_ADC_ConfigChannel+0x414>
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	0e9b      	lsrs	r3, r3, #26
 8009cfe:	f003 031f 	and.w	r3, r3, #31
 8009d02:	e011      	b.n	8009d28 <HAL_ADC_ConfigChannel+0x438>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0c:	fa93 f3a3 	rbit	r3, r3
 8009d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d14:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	e003      	b.n	8009d28 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8009d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d22:	fab3 f383 	clz	r3, r3
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d106      	bne.n	8009d3a <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2200      	movs	r2, #0
 8009d32:	2102      	movs	r1, #2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe fea5 	bl	8008a84 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2103      	movs	r1, #3
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fe09 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <HAL_ADC_ConfigChannel+0x476>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2103      	movs	r1, #3
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fdfe 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	0e9b      	lsrs	r3, r3, #26
 8009d60:	f003 021f 	and.w	r2, r3, #31
 8009d64:	e017      	b.n	8009d96 <HAL_ADC_ConfigChannel+0x4a6>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2103      	movs	r1, #3
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe fdf3 	bl	8008958 <LL_ADC_GetOffsetChannel>
 8009d72:	4603      	mov	r3, r0
 8009d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	fa93 f3a3 	rbit	r3, r3
 8009d7c:	61fb      	str	r3, [r7, #28]
  return result;
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8009d88:	2320      	movs	r3, #32
 8009d8a:	e003      	b.n	8009d94 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8e:	fab3 f383 	clz	r3, r3
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	461a      	mov	r2, r3
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <HAL_ADC_ConfigChannel+0x4be>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	0e9b      	lsrs	r3, r3, #26
 8009da8:	f003 031f 	and.w	r3, r3, #31
 8009dac:	e011      	b.n	8009dd2 <HAL_ADC_ConfigChannel+0x4e2>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	fa93 f3a3 	rbit	r3, r3
 8009dba:	613b      	str	r3, [r7, #16]
  return result;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8009dc6:	2320      	movs	r3, #32
 8009dc8:	e003      	b.n	8009dd2 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	fab3 f383 	clz	r3, r3
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d14f      	bne.n	8009e76 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2103      	movs	r1, #3
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fe50 	bl	8008a84 <LL_ADC_SetOffsetState>
 8009de4:	e047      	b.n	8009e76 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	069b      	lsls	r3, r3, #26
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d107      	bne.n	8009e0a <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e08:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	069b      	lsls	r3, r3, #26
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d107      	bne.n	8009e2e <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e2c:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	069b      	lsls	r3, r3, #26
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d107      	bne.n	8009e52 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e50:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	069b      	lsls	r3, r3, #26
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d107      	bne.n	8009e76 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e74:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe ffa4 	bl	8008dc8 <LL_ADC_IsEnabled>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f040 81ea 	bne.w	800a25c <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6819      	ldr	r1, [r3, #0]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	461a      	mov	r2, r3
 8009e96:	f7fe fed9 	bl	8008c4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	4a7a      	ldr	r2, [pc, #488]	@ (800a088 <HAL_ADC_ConfigChannel+0x798>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	f040 80e0 	bne.w	800a066 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4977      	ldr	r1, [pc, #476]	@ (800a08c <HAL_ADC_ConfigChannel+0x79c>)
 8009eb0:	428b      	cmp	r3, r1
 8009eb2:	d147      	bne.n	8009f44 <HAL_ADC_ConfigChannel+0x654>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4975      	ldr	r1, [pc, #468]	@ (800a090 <HAL_ADC_ConfigChannel+0x7a0>)
 8009eba:	428b      	cmp	r3, r1
 8009ebc:	d040      	beq.n	8009f40 <HAL_ADC_ConfigChannel+0x650>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4974      	ldr	r1, [pc, #464]	@ (800a094 <HAL_ADC_ConfigChannel+0x7a4>)
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	d039      	beq.n	8009f3c <HAL_ADC_ConfigChannel+0x64c>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4972      	ldr	r1, [pc, #456]	@ (800a098 <HAL_ADC_ConfigChannel+0x7a8>)
 8009ece:	428b      	cmp	r3, r1
 8009ed0:	d032      	beq.n	8009f38 <HAL_ADC_ConfigChannel+0x648>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4971      	ldr	r1, [pc, #452]	@ (800a09c <HAL_ADC_ConfigChannel+0x7ac>)
 8009ed8:	428b      	cmp	r3, r1
 8009eda:	d02b      	beq.n	8009f34 <HAL_ADC_ConfigChannel+0x644>
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	496f      	ldr	r1, [pc, #444]	@ (800a0a0 <HAL_ADC_ConfigChannel+0x7b0>)
 8009ee2:	428b      	cmp	r3, r1
 8009ee4:	d024      	beq.n	8009f30 <HAL_ADC_ConfigChannel+0x640>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	496e      	ldr	r1, [pc, #440]	@ (800a0a4 <HAL_ADC_ConfigChannel+0x7b4>)
 8009eec:	428b      	cmp	r3, r1
 8009eee:	d01d      	beq.n	8009f2c <HAL_ADC_ConfigChannel+0x63c>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	496c      	ldr	r1, [pc, #432]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 8009ef6:	428b      	cmp	r3, r1
 8009ef8:	d016      	beq.n	8009f28 <HAL_ADC_ConfigChannel+0x638>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	496b      	ldr	r1, [pc, #428]	@ (800a0ac <HAL_ADC_ConfigChannel+0x7bc>)
 8009f00:	428b      	cmp	r3, r1
 8009f02:	d00f      	beq.n	8009f24 <HAL_ADC_ConfigChannel+0x634>
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4969      	ldr	r1, [pc, #420]	@ (800a0b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8009f0a:	428b      	cmp	r3, r1
 8009f0c:	d008      	beq.n	8009f20 <HAL_ADC_ConfigChannel+0x630>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4968      	ldr	r1, [pc, #416]	@ (800a0b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8009f14:	428b      	cmp	r3, r1
 8009f16:	d101      	bne.n	8009f1c <HAL_ADC_ConfigChannel+0x62c>
 8009f18:	4b67      	ldr	r3, [pc, #412]	@ (800a0b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8009f1a:	e0a0      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	e09e      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f20:	4b66      	ldr	r3, [pc, #408]	@ (800a0bc <HAL_ADC_ConfigChannel+0x7cc>)
 8009f22:	e09c      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f24:	4b66      	ldr	r3, [pc, #408]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8009f26:	e09a      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f28:	4b60      	ldr	r3, [pc, #384]	@ (800a0ac <HAL_ADC_ConfigChannel+0x7bc>)
 8009f2a:	e098      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f2c:	4b5e      	ldr	r3, [pc, #376]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 8009f2e:	e096      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f30:	4b64      	ldr	r3, [pc, #400]	@ (800a0c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8009f32:	e094      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f34:	4b64      	ldr	r3, [pc, #400]	@ (800a0c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8009f36:	e092      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f38:	4b64      	ldr	r3, [pc, #400]	@ (800a0cc <HAL_ADC_ConfigChannel+0x7dc>)
 8009f3a:	e090      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f3c:	4b64      	ldr	r3, [pc, #400]	@ (800a0d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8009f3e:	e08e      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f40:	2301      	movs	r3, #1
 8009f42:	e08c      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4962      	ldr	r1, [pc, #392]	@ (800a0d4 <HAL_ADC_ConfigChannel+0x7e4>)
 8009f4a:	428b      	cmp	r3, r1
 8009f4c:	d140      	bne.n	8009fd0 <HAL_ADC_ConfigChannel+0x6e0>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	494f      	ldr	r1, [pc, #316]	@ (800a090 <HAL_ADC_ConfigChannel+0x7a0>)
 8009f54:	428b      	cmp	r3, r1
 8009f56:	d039      	beq.n	8009fcc <HAL_ADC_ConfigChannel+0x6dc>
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	494d      	ldr	r1, [pc, #308]	@ (800a094 <HAL_ADC_ConfigChannel+0x7a4>)
 8009f5e:	428b      	cmp	r3, r1
 8009f60:	d032      	beq.n	8009fc8 <HAL_ADC_ConfigChannel+0x6d8>
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	494c      	ldr	r1, [pc, #304]	@ (800a098 <HAL_ADC_ConfigChannel+0x7a8>)
 8009f68:	428b      	cmp	r3, r1
 8009f6a:	d02b      	beq.n	8009fc4 <HAL_ADC_ConfigChannel+0x6d4>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	494a      	ldr	r1, [pc, #296]	@ (800a09c <HAL_ADC_ConfigChannel+0x7ac>)
 8009f72:	428b      	cmp	r3, r1
 8009f74:	d024      	beq.n	8009fc0 <HAL_ADC_ConfigChannel+0x6d0>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4949      	ldr	r1, [pc, #292]	@ (800a0a0 <HAL_ADC_ConfigChannel+0x7b0>)
 8009f7c:	428b      	cmp	r3, r1
 8009f7e:	d01d      	beq.n	8009fbc <HAL_ADC_ConfigChannel+0x6cc>
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4947      	ldr	r1, [pc, #284]	@ (800a0a4 <HAL_ADC_ConfigChannel+0x7b4>)
 8009f86:	428b      	cmp	r3, r1
 8009f88:	d016      	beq.n	8009fb8 <HAL_ADC_ConfigChannel+0x6c8>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4946      	ldr	r1, [pc, #280]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 8009f90:	428b      	cmp	r3, r1
 8009f92:	d00f      	beq.n	8009fb4 <HAL_ADC_ConfigChannel+0x6c4>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4944      	ldr	r1, [pc, #272]	@ (800a0ac <HAL_ADC_ConfigChannel+0x7bc>)
 8009f9a:	428b      	cmp	r3, r1
 8009f9c:	d008      	beq.n	8009fb0 <HAL_ADC_ConfigChannel+0x6c0>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4944      	ldr	r1, [pc, #272]	@ (800a0b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8009fa4:	428b      	cmp	r3, r1
 8009fa6:	d101      	bne.n	8009fac <HAL_ADC_ConfigChannel+0x6bc>
 8009fa8:	4b43      	ldr	r3, [pc, #268]	@ (800a0b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8009faa:	e058      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fac:	2300      	movs	r3, #0
 8009fae:	e056      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fb0:	4b43      	ldr	r3, [pc, #268]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8009fb2:	e054      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fb4:	4b3d      	ldr	r3, [pc, #244]	@ (800a0ac <HAL_ADC_ConfigChannel+0x7bc>)
 8009fb6:	e052      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fb8:	4b3b      	ldr	r3, [pc, #236]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 8009fba:	e050      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fbc:	4b41      	ldr	r3, [pc, #260]	@ (800a0c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8009fbe:	e04e      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fc0:	4b41      	ldr	r3, [pc, #260]	@ (800a0c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8009fc2:	e04c      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fc4:	4b41      	ldr	r3, [pc, #260]	@ (800a0cc <HAL_ADC_ConfigChannel+0x7dc>)
 8009fc6:	e04a      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fc8:	4b41      	ldr	r3, [pc, #260]	@ (800a0d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8009fca:	e048      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e046      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4940      	ldr	r1, [pc, #256]	@ (800a0d8 <HAL_ADC_ConfigChannel+0x7e8>)
 8009fd6:	428b      	cmp	r3, r1
 8009fd8:	d140      	bne.n	800a05c <HAL_ADC_ConfigChannel+0x76c>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	492c      	ldr	r1, [pc, #176]	@ (800a090 <HAL_ADC_ConfigChannel+0x7a0>)
 8009fe0:	428b      	cmp	r3, r1
 8009fe2:	d039      	beq.n	800a058 <HAL_ADC_ConfigChannel+0x768>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	492a      	ldr	r1, [pc, #168]	@ (800a094 <HAL_ADC_ConfigChannel+0x7a4>)
 8009fea:	428b      	cmp	r3, r1
 8009fec:	d032      	beq.n	800a054 <HAL_ADC_ConfigChannel+0x764>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4929      	ldr	r1, [pc, #164]	@ (800a098 <HAL_ADC_ConfigChannel+0x7a8>)
 8009ff4:	428b      	cmp	r3, r1
 8009ff6:	d02b      	beq.n	800a050 <HAL_ADC_ConfigChannel+0x760>
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4927      	ldr	r1, [pc, #156]	@ (800a09c <HAL_ADC_ConfigChannel+0x7ac>)
 8009ffe:	428b      	cmp	r3, r1
 800a000:	d024      	beq.n	800a04c <HAL_ADC_ConfigChannel+0x75c>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4926      	ldr	r1, [pc, #152]	@ (800a0a0 <HAL_ADC_ConfigChannel+0x7b0>)
 800a008:	428b      	cmp	r3, r1
 800a00a:	d01d      	beq.n	800a048 <HAL_ADC_ConfigChannel+0x758>
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4924      	ldr	r1, [pc, #144]	@ (800a0a4 <HAL_ADC_ConfigChannel+0x7b4>)
 800a012:	428b      	cmp	r3, r1
 800a014:	d016      	beq.n	800a044 <HAL_ADC_ConfigChannel+0x754>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4923      	ldr	r1, [pc, #140]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 800a01c:	428b      	cmp	r3, r1
 800a01e:	d00f      	beq.n	800a040 <HAL_ADC_ConfigChannel+0x750>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4926      	ldr	r1, [pc, #152]	@ (800a0c0 <HAL_ADC_ConfigChannel+0x7d0>)
 800a026:	428b      	cmp	r3, r1
 800a028:	d008      	beq.n	800a03c <HAL_ADC_ConfigChannel+0x74c>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	492b      	ldr	r1, [pc, #172]	@ (800a0dc <HAL_ADC_ConfigChannel+0x7ec>)
 800a030:	428b      	cmp	r3, r1
 800a032:	d101      	bne.n	800a038 <HAL_ADC_ConfigChannel+0x748>
 800a034:	4b2a      	ldr	r3, [pc, #168]	@ (800a0e0 <HAL_ADC_ConfigChannel+0x7f0>)
 800a036:	e012      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a038:	2300      	movs	r3, #0
 800a03a:	e010      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a03c:	4b27      	ldr	r3, [pc, #156]	@ (800a0dc <HAL_ADC_ConfigChannel+0x7ec>)
 800a03e:	e00e      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a040:	4b1a      	ldr	r3, [pc, #104]	@ (800a0ac <HAL_ADC_ConfigChannel+0x7bc>)
 800a042:	e00c      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a044:	4b18      	ldr	r3, [pc, #96]	@ (800a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 800a046:	e00a      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a048:	4b1e      	ldr	r3, [pc, #120]	@ (800a0c4 <HAL_ADC_ConfigChannel+0x7d4>)
 800a04a:	e008      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a04c:	4b1e      	ldr	r3, [pc, #120]	@ (800a0c8 <HAL_ADC_ConfigChannel+0x7d8>)
 800a04e:	e006      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a050:	4b1e      	ldr	r3, [pc, #120]	@ (800a0cc <HAL_ADC_ConfigChannel+0x7dc>)
 800a052:	e004      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a054:	4b1e      	ldr	r3, [pc, #120]	@ (800a0d0 <HAL_ADC_ConfigChannel+0x7e0>)
 800a056:	e002      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a058:	2301      	movs	r3, #1
 800a05a:	e000      	b.n	800a05e <HAL_ADC_ConfigChannel+0x76e>
 800a05c:	2300      	movs	r3, #0
 800a05e:	4619      	mov	r1, r3
 800a060:	4610      	mov	r0, r2
 800a062:	f7fe fc0d 	bl	8008880 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f280 80f6 	bge.w	800a25c <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a05      	ldr	r2, [pc, #20]	@ (800a08c <HAL_ADC_ConfigChannel+0x79c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d004      	beq.n	800a084 <HAL_ADC_ConfigChannel+0x794>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a15      	ldr	r2, [pc, #84]	@ (800a0d4 <HAL_ADC_ConfigChannel+0x7e4>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d131      	bne.n	800a0e8 <HAL_ADC_ConfigChannel+0x7f8>
 800a084:	4b17      	ldr	r3, [pc, #92]	@ (800a0e4 <HAL_ADC_ConfigChannel+0x7f4>)
 800a086:	e030      	b.n	800a0ea <HAL_ADC_ConfigChannel+0x7fa>
 800a088:	47ff0000 	.word	0x47ff0000
 800a08c:	40022000 	.word	0x40022000
 800a090:	04300002 	.word	0x04300002
 800a094:	08600004 	.word	0x08600004
 800a098:	0c900008 	.word	0x0c900008
 800a09c:	10c00010 	.word	0x10c00010
 800a0a0:	14f00020 	.word	0x14f00020
 800a0a4:	2a000400 	.word	0x2a000400
 800a0a8:	2e300800 	.word	0x2e300800
 800a0ac:	32601000 	.word	0x32601000
 800a0b0:	43210000 	.word	0x43210000
 800a0b4:	4b840000 	.word	0x4b840000
 800a0b8:	4fb80000 	.word	0x4fb80000
 800a0bc:	47520000 	.word	0x47520000
 800a0c0:	36902000 	.word	0x36902000
 800a0c4:	25b00200 	.word	0x25b00200
 800a0c8:	21800100 	.word	0x21800100
 800a0cc:	1d500080 	.word	0x1d500080
 800a0d0:	19200040 	.word	0x19200040
 800a0d4:	40022100 	.word	0x40022100
 800a0d8:	58026000 	.word	0x58026000
 800a0dc:	3ac04000 	.word	0x3ac04000
 800a0e0:	3ef08000 	.word	0x3ef08000
 800a0e4:	40022300 	.word	0x40022300
 800a0e8:	4b61      	ldr	r3, [pc, #388]	@ (800a270 <HAL_ADC_ConfigChannel+0x980>)
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fbba 	bl	8008864 <LL_ADC_GetCommonPathInternalCh>
 800a0f0:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a5f      	ldr	r2, [pc, #380]	@ (800a274 <HAL_ADC_ConfigChannel+0x984>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d004      	beq.n	800a106 <HAL_ADC_ConfigChannel+0x816>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a5d      	ldr	r2, [pc, #372]	@ (800a278 <HAL_ADC_ConfigChannel+0x988>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d10e      	bne.n	800a124 <HAL_ADC_ConfigChannel+0x834>
 800a106:	485b      	ldr	r0, [pc, #364]	@ (800a274 <HAL_ADC_ConfigChannel+0x984>)
 800a108:	f7fe fe5e 	bl	8008dc8 <LL_ADC_IsEnabled>
 800a10c:	4604      	mov	r4, r0
 800a10e:	485a      	ldr	r0, [pc, #360]	@ (800a278 <HAL_ADC_ConfigChannel+0x988>)
 800a110:	f7fe fe5a 	bl	8008dc8 <LL_ADC_IsEnabled>
 800a114:	4603      	mov	r3, r0
 800a116:	4323      	orrs	r3, r4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	bf0c      	ite	eq
 800a11c:	2301      	moveq	r3, #1
 800a11e:	2300      	movne	r3, #0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	e008      	b.n	800a136 <HAL_ADC_ConfigChannel+0x846>
 800a124:	4855      	ldr	r0, [pc, #340]	@ (800a27c <HAL_ADC_ConfigChannel+0x98c>)
 800a126:	f7fe fe4f 	bl	8008dc8 <LL_ADC_IsEnabled>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bf0c      	ite	eq
 800a130:	2301      	moveq	r3, #1
 800a132:	2300      	movne	r3, #0
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d07d      	beq.n	800a236 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a50      	ldr	r2, [pc, #320]	@ (800a280 <HAL_ADC_ConfigChannel+0x990>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d130      	bne.n	800a1a6 <HAL_ADC_ConfigChannel+0x8b6>
 800a144:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d12b      	bne.n	800a1a6 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a4a      	ldr	r2, [pc, #296]	@ (800a27c <HAL_ADC_ConfigChannel+0x98c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	f040 8081 	bne.w	800a25c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a45      	ldr	r2, [pc, #276]	@ (800a274 <HAL_ADC_ConfigChannel+0x984>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d004      	beq.n	800a16e <HAL_ADC_ConfigChannel+0x87e>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a43      	ldr	r2, [pc, #268]	@ (800a278 <HAL_ADC_ConfigChannel+0x988>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d101      	bne.n	800a172 <HAL_ADC_ConfigChannel+0x882>
 800a16e:	4a45      	ldr	r2, [pc, #276]	@ (800a284 <HAL_ADC_ConfigChannel+0x994>)
 800a170:	e000      	b.n	800a174 <HAL_ADC_ConfigChannel+0x884>
 800a172:	4a3f      	ldr	r2, [pc, #252]	@ (800a270 <HAL_ADC_ConfigChannel+0x980>)
 800a174:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a176:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a17a:	4619      	mov	r1, r3
 800a17c:	4610      	mov	r0, r2
 800a17e:	f7fe fb5e 	bl	800883e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a182:	4b41      	ldr	r3, [pc, #260]	@ (800a288 <HAL_ADC_ConfigChannel+0x998>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	099b      	lsrs	r3, r3, #6
 800a188:	4a40      	ldr	r2, [pc, #256]	@ (800a28c <HAL_ADC_ConfigChannel+0x99c>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	099b      	lsrs	r3, r3, #6
 800a190:	3301      	adds	r3, #1
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800a196:	e002      	b.n	800a19e <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1f9      	bne.n	800a198 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a1a4:	e05a      	b.n	800a25c <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a39      	ldr	r2, [pc, #228]	@ (800a290 <HAL_ADC_ConfigChannel+0x9a0>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d11e      	bne.n	800a1ee <HAL_ADC_ConfigChannel+0x8fe>
 800a1b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d119      	bne.n	800a1ee <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a2f      	ldr	r2, [pc, #188]	@ (800a27c <HAL_ADC_ConfigChannel+0x98c>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d14b      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a2a      	ldr	r2, [pc, #168]	@ (800a274 <HAL_ADC_ConfigChannel+0x984>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d004      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0x8e8>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a29      	ldr	r2, [pc, #164]	@ (800a278 <HAL_ADC_ConfigChannel+0x988>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d101      	bne.n	800a1dc <HAL_ADC_ConfigChannel+0x8ec>
 800a1d8:	4a2a      	ldr	r2, [pc, #168]	@ (800a284 <HAL_ADC_ConfigChannel+0x994>)
 800a1da:	e000      	b.n	800a1de <HAL_ADC_ConfigChannel+0x8ee>
 800a1dc:	4a24      	ldr	r2, [pc, #144]	@ (800a270 <HAL_ADC_ConfigChannel+0x980>)
 800a1de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	f7fe fb29 	bl	800883e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1ec:	e036      	b.n	800a25c <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a28      	ldr	r2, [pc, #160]	@ (800a294 <HAL_ADC_ConfigChannel+0x9a4>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d131      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x96c>
 800a1f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d12c      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a1d      	ldr	r2, [pc, #116]	@ (800a27c <HAL_ADC_ConfigChannel+0x98c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d127      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a18      	ldr	r2, [pc, #96]	@ (800a274 <HAL_ADC_ConfigChannel+0x984>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d004      	beq.n	800a220 <HAL_ADC_ConfigChannel+0x930>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a17      	ldr	r2, [pc, #92]	@ (800a278 <HAL_ADC_ConfigChannel+0x988>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d101      	bne.n	800a224 <HAL_ADC_ConfigChannel+0x934>
 800a220:	4a18      	ldr	r2, [pc, #96]	@ (800a284 <HAL_ADC_ConfigChannel+0x994>)
 800a222:	e000      	b.n	800a226 <HAL_ADC_ConfigChannel+0x936>
 800a224:	4a12      	ldr	r2, [pc, #72]	@ (800a270 <HAL_ADC_ConfigChannel+0x980>)
 800a226:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a228:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a22c:	4619      	mov	r1, r3
 800a22e:	4610      	mov	r0, r2
 800a230:	f7fe fb05 	bl	800883e <LL_ADC_SetCommonPathInternalCh>
 800a234:	e012      	b.n	800a25c <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a23a:	f043 0220 	orr.w	r2, r3, #32
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a248:	e008      	b.n	800a25c <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a24e:	f043 0220 	orr.w	r2, r3, #32
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800a264:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3794      	adds	r7, #148	@ 0x94
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd90      	pop	{r4, r7, pc}
 800a270:	58026300 	.word	0x58026300
 800a274:	40022000 	.word	0x40022000
 800a278:	40022100 	.word	0x40022100
 800a27c:	58026000 	.word	0x58026000
 800a280:	c7520000 	.word	0xc7520000
 800a284:	40022300 	.word	0x40022300
 800a288:	24000004 	.word	0x24000004
 800a28c:	053e2d63 	.word	0x053e2d63
 800a290:	c3210000 	.word	0xc3210000
 800a294:	cb840000 	.word	0xcb840000

0800a298 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fe fd8f 	bl	8008dc8 <LL_ADC_IsEnabled>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d16e      	bne.n	800a38e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689a      	ldr	r2, [r3, #8]
 800a2b6:	4b38      	ldr	r3, [pc, #224]	@ (800a398 <ADC_Enable+0x100>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00d      	beq.n	800a2da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2c2:	f043 0210 	orr.w	r2, r3, #16
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2ce:	f043 0201 	orr.w	r2, r3, #1
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e05a      	b.n	800a390 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fd5e 	bl	8008da0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a2e4:	f7fe fa68 	bl	80087b8 <HAL_GetTick>
 800a2e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a2b      	ldr	r2, [pc, #172]	@ (800a39c <ADC_Enable+0x104>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d004      	beq.n	800a2fe <ADC_Enable+0x66>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a29      	ldr	r2, [pc, #164]	@ (800a3a0 <ADC_Enable+0x108>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d101      	bne.n	800a302 <ADC_Enable+0x6a>
 800a2fe:	4b29      	ldr	r3, [pc, #164]	@ (800a3a4 <ADC_Enable+0x10c>)
 800a300:	e000      	b.n	800a304 <ADC_Enable+0x6c>
 800a302:	4b29      	ldr	r3, [pc, #164]	@ (800a3a8 <ADC_Enable+0x110>)
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fce1 	bl	8008ccc <LL_ADC_GetMultimode>
 800a30a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a23      	ldr	r2, [pc, #140]	@ (800a3a0 <ADC_Enable+0x108>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d002      	beq.n	800a31c <ADC_Enable+0x84>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	e000      	b.n	800a31e <ADC_Enable+0x86>
 800a31c:	4b1f      	ldr	r3, [pc, #124]	@ (800a39c <ADC_Enable+0x104>)
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	6812      	ldr	r2, [r2, #0]
 800a322:	4293      	cmp	r3, r2
 800a324:	d02c      	beq.n	800a380 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d130      	bne.n	800a38e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a32c:	e028      	b.n	800a380 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe fd48 	bl	8008dc8 <LL_ADC_IsEnabled>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe fd2c 	bl	8008da0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a348:	f7fe fa36 	bl	80087b8 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	2b02      	cmp	r3, #2
 800a354:	d914      	bls.n	800a380 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b01      	cmp	r3, #1
 800a362:	d00d      	beq.n	800a380 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a368:	f043 0210 	orr.w	r2, r3, #16
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a374:	f043 0201 	orr.w	r2, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e007      	b.n	800a390 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d1cf      	bne.n	800a32e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	8000003f 	.word	0x8000003f
 800a39c:	40022000 	.word	0x40022000
 800a3a0:	40022100 	.word	0x40022100
 800a3a4:	40022300 	.word	0x40022300
 800a3a8:	58026300 	.word	0x58026300

0800a3ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d14b      	bne.n	800a45e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0308 	and.w	r3, r3, #8
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d021      	beq.n	800a424 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fb77 	bl	8008ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d032      	beq.n	800a456 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d12b      	bne.n	800a456 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a402:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a40e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d11f      	bne.n	800a456 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a41a:	f043 0201 	orr.w	r2, r3, #1
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	661a      	str	r2, [r3, #96]	@ 0x60
 800a422:	e018      	b.n	800a456 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f003 0303 	and.w	r3, r3, #3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d111      	bne.n	800a456 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a436:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a442:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d105      	bne.n	800a456 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a44e:	f043 0201 	orr.w	r2, r3, #1
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7ff fa22 	bl	80098a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a45c:	e00e      	b.n	800a47c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a462:	f003 0310 	and.w	r3, r3, #16
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fa36 	bl	80098dc <HAL_ADC_ErrorCallback>
}
 800a470:	e004      	b.n	800a47c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	4798      	blx	r3
}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a490:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff fa0e 	bl	80098b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4be:	f043 0204 	orr.w	r2, r3, #4
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff fa08 	bl	80098dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4cc:	bf00      	nop
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a6c      	ldr	r2, [pc, #432]	@ (800a694 <ADC_ConfigureBoostMode+0x1c0>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d004      	beq.n	800a4f0 <ADC_ConfigureBoostMode+0x1c>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a6b      	ldr	r2, [pc, #428]	@ (800a698 <ADC_ConfigureBoostMode+0x1c4>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d109      	bne.n	800a504 <ADC_ConfigureBoostMode+0x30>
 800a4f0:	4b6a      	ldr	r3, [pc, #424]	@ (800a69c <ADC_ConfigureBoostMode+0x1c8>)
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bf14      	ite	ne
 800a4fc:	2301      	movne	r3, #1
 800a4fe:	2300      	moveq	r3, #0
 800a500:	b2db      	uxtb	r3, r3
 800a502:	e008      	b.n	800a516 <ADC_ConfigureBoostMode+0x42>
 800a504:	4b66      	ldr	r3, [pc, #408]	@ (800a6a0 <ADC_ConfigureBoostMode+0x1cc>)
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	bf14      	ite	ne
 800a510:	2301      	movne	r3, #1
 800a512:	2300      	moveq	r3, #0
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d01c      	beq.n	800a554 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800a51a:	f006 fe81 	bl	8011220 <HAL_RCC_GetHCLKFreq>
 800a51e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a528:	d010      	beq.n	800a54c <ADC_ConfigureBoostMode+0x78>
 800a52a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a52e:	d873      	bhi.n	800a618 <ADC_ConfigureBoostMode+0x144>
 800a530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a534:	d002      	beq.n	800a53c <ADC_ConfigureBoostMode+0x68>
 800a536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a53a:	d16d      	bne.n	800a618 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	0c1b      	lsrs	r3, r3, #16
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	fbb2 f3f3 	udiv	r3, r2, r3
 800a548:	60fb      	str	r3, [r7, #12]
        break;
 800a54a:	e068      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	089b      	lsrs	r3, r3, #2
 800a550:	60fb      	str	r3, [r7, #12]
        break;
 800a552:	e064      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800a554:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a558:	f04f 0100 	mov.w	r1, #0
 800a55c:	f008 f85c 	bl	8012618 <HAL_RCCEx_GetPeriphCLKFreq>
 800a560:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800a56a:	d051      	beq.n	800a610 <ADC_ConfigureBoostMode+0x13c>
 800a56c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800a570:	d854      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a572:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800a576:	d047      	beq.n	800a608 <ADC_ConfigureBoostMode+0x134>
 800a578:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800a57c:	d84e      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a57e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800a582:	d03d      	beq.n	800a600 <ADC_ConfigureBoostMode+0x12c>
 800a584:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800a588:	d848      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a58a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a58e:	d033      	beq.n	800a5f8 <ADC_ConfigureBoostMode+0x124>
 800a590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a594:	d842      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a596:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800a59a:	d029      	beq.n	800a5f0 <ADC_ConfigureBoostMode+0x11c>
 800a59c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800a5a0:	d83c      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a5a2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a5a6:	d01a      	beq.n	800a5de <ADC_ConfigureBoostMode+0x10a>
 800a5a8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a5ac:	d836      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a5ae:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a5b2:	d014      	beq.n	800a5de <ADC_ConfigureBoostMode+0x10a>
 800a5b4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a5b8:	d830      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a5ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5be:	d00e      	beq.n	800a5de <ADC_ConfigureBoostMode+0x10a>
 800a5c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5c4:	d82a      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a5c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a5ca:	d008      	beq.n	800a5de <ADC_ConfigureBoostMode+0x10a>
 800a5cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a5d0:	d824      	bhi.n	800a61c <ADC_ConfigureBoostMode+0x148>
 800a5d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5d6:	d002      	beq.n	800a5de <ADC_ConfigureBoostMode+0x10a>
 800a5d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a5dc:	d11e      	bne.n	800a61c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	0c9b      	lsrs	r3, r3, #18
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ec:	60fb      	str	r3, [r7, #12]
        break;
 800a5ee:	e016      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	091b      	lsrs	r3, r3, #4
 800a5f4:	60fb      	str	r3, [r7, #12]
        break;
 800a5f6:	e012      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	60fb      	str	r3, [r7, #12]
        break;
 800a5fe:	e00e      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	099b      	lsrs	r3, r3, #6
 800a604:	60fb      	str	r3, [r7, #12]
        break;
 800a606:	e00a      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	09db      	lsrs	r3, r3, #7
 800a60c:	60fb      	str	r3, [r7, #12]
        break;
 800a60e:	e006      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	0a1b      	lsrs	r3, r3, #8
 800a614:	60fb      	str	r3, [r7, #12]
        break;
 800a616:	e002      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
        break;
 800a618:	bf00      	nop
 800a61a:	e000      	b.n	800a61e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800a61c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	085b      	lsrs	r3, r3, #1
 800a622:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	4a1f      	ldr	r2, [pc, #124]	@ (800a6a4 <ADC_ConfigureBoostMode+0x1d0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d808      	bhi.n	800a63e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689a      	ldr	r2, [r3, #8]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a63a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800a63c:	e025      	b.n	800a68a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	4a19      	ldr	r2, [pc, #100]	@ (800a6a8 <ADC_ConfigureBoostMode+0x1d4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d80a      	bhi.n	800a65c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a658:	609a      	str	r2, [r3, #8]
}
 800a65a:	e016      	b.n	800a68a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4a13      	ldr	r2, [pc, #76]	@ (800a6ac <ADC_ConfigureBoostMode+0x1d8>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d80a      	bhi.n	800a67a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a676:	609a      	str	r2, [r3, #8]
}
 800a678:	e007      	b.n	800a68a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a688:	609a      	str	r2, [r3, #8]
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	40022000 	.word	0x40022000
 800a698:	40022100 	.word	0x40022100
 800a69c:	40022300 	.word	0x40022300
 800a6a0:	58026300 	.word	0x58026300
 800a6a4:	005f5e10 	.word	0x005f5e10
 800a6a8:	00bebc20 	.word	0x00bebc20
 800a6ac:	017d7840 	.word	0x017d7840

0800a6b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <__NVIC_SetPriorityGrouping>:
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a724:	4b0b      	ldr	r3, [pc, #44]	@ (800a754 <__NVIC_SetPriorityGrouping+0x40>)
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a730:	4013      	ands	r3, r2
 800a732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a73c:	4b06      	ldr	r3, [pc, #24]	@ (800a758 <__NVIC_SetPriorityGrouping+0x44>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a742:	4a04      	ldr	r2, [pc, #16]	@ (800a754 <__NVIC_SetPriorityGrouping+0x40>)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	60d3      	str	r3, [r2, #12]
}
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	e000ed00 	.word	0xe000ed00
 800a758:	05fa0000 	.word	0x05fa0000

0800a75c <__NVIC_GetPriorityGrouping>:
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a760:	4b04      	ldr	r3, [pc, #16]	@ (800a774 <__NVIC_GetPriorityGrouping+0x18>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	0a1b      	lsrs	r3, r3, #8
 800a766:	f003 0307 	and.w	r3, r3, #7
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	e000ed00 	.word	0xe000ed00

0800a778 <__NVIC_EnableIRQ>:
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a786:	2b00      	cmp	r3, #0
 800a788:	db0b      	blt.n	800a7a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a78a:	88fb      	ldrh	r3, [r7, #6]
 800a78c:	f003 021f 	and.w	r2, r3, #31
 800a790:	4907      	ldr	r1, [pc, #28]	@ (800a7b0 <__NVIC_EnableIRQ+0x38>)
 800a792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	2001      	movs	r0, #1
 800a79a:	fa00 f202 	lsl.w	r2, r0, r2
 800a79e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a7a2:	bf00      	nop
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	e000e100 	.word	0xe000e100

0800a7b4 <__NVIC_SetPriority>:
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	6039      	str	r1, [r7, #0]
 800a7be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a7c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	db0a      	blt.n	800a7de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	490c      	ldr	r1, [pc, #48]	@ (800a800 <__NVIC_SetPriority+0x4c>)
 800a7ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7d2:	0112      	lsls	r2, r2, #4
 800a7d4:	b2d2      	uxtb	r2, r2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a7dc:	e00a      	b.n	800a7f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	4908      	ldr	r1, [pc, #32]	@ (800a804 <__NVIC_SetPriority+0x50>)
 800a7e4:	88fb      	ldrh	r3, [r7, #6]
 800a7e6:	f003 030f 	and.w	r3, r3, #15
 800a7ea:	3b04      	subs	r3, #4
 800a7ec:	0112      	lsls	r2, r2, #4
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	761a      	strb	r2, [r3, #24]
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	e000e100 	.word	0xe000e100
 800a804:	e000ed00 	.word	0xe000ed00

0800a808 <NVIC_EncodePriority>:
{
 800a808:	b480      	push	{r7}
 800a80a:	b089      	sub	sp, #36	@ 0x24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	f1c3 0307 	rsb	r3, r3, #7
 800a822:	2b04      	cmp	r3, #4
 800a824:	bf28      	it	cs
 800a826:	2304      	movcs	r3, #4
 800a828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	3304      	adds	r3, #4
 800a82e:	2b06      	cmp	r3, #6
 800a830:	d902      	bls.n	800a838 <NVIC_EncodePriority+0x30>
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	3b03      	subs	r3, #3
 800a836:	e000      	b.n	800a83a <NVIC_EncodePriority+0x32>
 800a838:	2300      	movs	r3, #0
 800a83a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a83c:	f04f 32ff 	mov.w	r2, #4294967295
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	fa02 f303 	lsl.w	r3, r2, r3
 800a846:	43da      	mvns	r2, r3
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	401a      	ands	r2, r3
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a850:	f04f 31ff 	mov.w	r1, #4294967295
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	fa01 f303 	lsl.w	r3, r1, r3
 800a85a:	43d9      	mvns	r1, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a860:	4313      	orrs	r3, r2
}
 800a862:	4618      	mov	r0, r3
 800a864:	3724      	adds	r7, #36	@ 0x24
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
	...

0800a870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a880:	d301      	bcc.n	800a886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a882:	2301      	movs	r3, #1
 800a884:	e00f      	b.n	800a8a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a886:	4a0a      	ldr	r2, [pc, #40]	@ (800a8b0 <SysTick_Config+0x40>)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a88e:	210f      	movs	r1, #15
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	f7ff ff8e 	bl	800a7b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a898:	4b05      	ldr	r3, [pc, #20]	@ (800a8b0 <SysTick_Config+0x40>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a89e:	4b04      	ldr	r3, [pc, #16]	@ (800a8b0 <SysTick_Config+0x40>)
 800a8a0:	2207      	movs	r2, #7
 800a8a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	e000e010 	.word	0xe000e010

0800a8b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7ff ff29 	bl	800a714 <__NVIC_SetPriorityGrouping>
}
 800a8c2:	bf00      	nop
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b086      	sub	sp, #24
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	607a      	str	r2, [r7, #4]
 800a8d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a8d8:	f7ff ff40 	bl	800a75c <__NVIC_GetPriorityGrouping>
 800a8dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	68b9      	ldr	r1, [r7, #8]
 800a8e2:	6978      	ldr	r0, [r7, #20]
 800a8e4:	f7ff ff90 	bl	800a808 <NVIC_EncodePriority>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7ff ff5f 	bl	800a7b4 <__NVIC_SetPriority>
}
 800a8f6:	bf00      	nop
 800a8f8:	3718      	adds	r7, #24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	4603      	mov	r3, r0
 800a906:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff ff33 	bl	800a778 <__NVIC_EnableIRQ>
}
 800a912:	bf00      	nop
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff ffa4 	bl	800a870 <SysTick_Config>
 800a928:	4603      	mov	r3, r0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800a934:	b480      	push	{r7}
 800a936:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800a938:	f3bf 8f5f 	dmb	sy
}
 800a93c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a93e:	4b07      	ldr	r3, [pc, #28]	@ (800a95c <HAL_MPU_Disable+0x28>)
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	4a06      	ldr	r2, [pc, #24]	@ (800a95c <HAL_MPU_Disable+0x28>)
 800a944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a948:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a94a:	4b05      	ldr	r3, [pc, #20]	@ (800a960 <HAL_MPU_Disable+0x2c>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	605a      	str	r2, [r3, #4]
}
 800a950:	bf00      	nop
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	e000ed00 	.word	0xe000ed00
 800a960:	e000ed90 	.word	0xe000ed90

0800a964 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a96c:	4a0b      	ldr	r2, [pc, #44]	@ (800a99c <HAL_MPU_Enable+0x38>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f043 0301 	orr.w	r3, r3, #1
 800a974:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a976:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a0 <HAL_MPU_Enable+0x3c>)
 800a978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97a:	4a09      	ldr	r2, [pc, #36]	@ (800a9a0 <HAL_MPU_Enable+0x3c>)
 800a97c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a980:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a982:	f3bf 8f4f 	dsb	sy
}
 800a986:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a988:	f3bf 8f6f 	isb	sy
}
 800a98c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a98e:	bf00      	nop
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	e000ed90 	.word	0xe000ed90
 800a9a0:	e000ed00 	.word	0xe000ed00

0800a9a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	785a      	ldrb	r2, [r3, #1]
 800a9b0:	4b1b      	ldr	r3, [pc, #108]	@ (800aa20 <HAL_MPU_ConfigRegion+0x7c>)
 800a9b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800a9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800aa20 <HAL_MPU_ConfigRegion+0x7c>)
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	4a19      	ldr	r2, [pc, #100]	@ (800aa20 <HAL_MPU_ConfigRegion+0x7c>)
 800a9ba:	f023 0301 	bic.w	r3, r3, #1
 800a9be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800a9c0:	4a17      	ldr	r2, [pc, #92]	@ (800aa20 <HAL_MPU_ConfigRegion+0x7c>)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	7b1b      	ldrb	r3, [r3, #12]
 800a9cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	7adb      	ldrb	r3, [r3, #11]
 800a9d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a9d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	7a9b      	ldrb	r3, [r3, #10]
 800a9da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a9dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	7b5b      	ldrb	r3, [r3, #13]
 800a9e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a9e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	7b9b      	ldrb	r3, [r3, #14]
 800a9ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a9ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	7bdb      	ldrb	r3, [r3, #15]
 800a9f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a9f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	7a5b      	ldrb	r3, [r3, #9]
 800a9fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a9fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	7a1b      	ldrb	r3, [r3, #8]
 800aa02:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800aa04:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	7812      	ldrb	r2, [r2, #0]
 800aa0a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800aa0c:	4a04      	ldr	r2, [pc, #16]	@ (800aa20 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800aa0e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800aa10:	6113      	str	r3, [r2, #16]
}
 800aa12:	bf00      	nop
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	e000ed90 	.word	0xe000ed90

0800aa24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800aa2c:	f7fd fec4 	bl	80087b8 <HAL_GetTick>
 800aa30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e312      	b.n	800b062 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a66      	ldr	r2, [pc, #408]	@ (800abdc <HAL_DMA_Init+0x1b8>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d04a      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a65      	ldr	r2, [pc, #404]	@ (800abe0 <HAL_DMA_Init+0x1bc>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d045      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a63      	ldr	r2, [pc, #396]	@ (800abe4 <HAL_DMA_Init+0x1c0>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d040      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a62      	ldr	r2, [pc, #392]	@ (800abe8 <HAL_DMA_Init+0x1c4>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d03b      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a60      	ldr	r2, [pc, #384]	@ (800abec <HAL_DMA_Init+0x1c8>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d036      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a5f      	ldr	r2, [pc, #380]	@ (800abf0 <HAL_DMA_Init+0x1cc>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d031      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a5d      	ldr	r2, [pc, #372]	@ (800abf4 <HAL_DMA_Init+0x1d0>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d02c      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a5c      	ldr	r2, [pc, #368]	@ (800abf8 <HAL_DMA_Init+0x1d4>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d027      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a5a      	ldr	r2, [pc, #360]	@ (800abfc <HAL_DMA_Init+0x1d8>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d022      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a59      	ldr	r2, [pc, #356]	@ (800ac00 <HAL_DMA_Init+0x1dc>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d01d      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a57      	ldr	r2, [pc, #348]	@ (800ac04 <HAL_DMA_Init+0x1e0>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d018      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a56      	ldr	r2, [pc, #344]	@ (800ac08 <HAL_DMA_Init+0x1e4>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d013      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a54      	ldr	r2, [pc, #336]	@ (800ac0c <HAL_DMA_Init+0x1e8>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d00e      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a53      	ldr	r2, [pc, #332]	@ (800ac10 <HAL_DMA_Init+0x1ec>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d009      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a51      	ldr	r2, [pc, #324]	@ (800ac14 <HAL_DMA_Init+0x1f0>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d004      	beq.n	800aadc <HAL_DMA_Init+0xb8>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a50      	ldr	r2, [pc, #320]	@ (800ac18 <HAL_DMA_Init+0x1f4>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d101      	bne.n	800aae0 <HAL_DMA_Init+0xbc>
 800aadc:	2301      	movs	r3, #1
 800aade:	e000      	b.n	800aae2 <HAL_DMA_Init+0xbe>
 800aae0:	2300      	movs	r3, #0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 813c 	beq.w	800ad60 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2202      	movs	r2, #2
 800aaec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a37      	ldr	r2, [pc, #220]	@ (800abdc <HAL_DMA_Init+0x1b8>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d04a      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a36      	ldr	r2, [pc, #216]	@ (800abe0 <HAL_DMA_Init+0x1bc>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d045      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a34      	ldr	r2, [pc, #208]	@ (800abe4 <HAL_DMA_Init+0x1c0>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d040      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a33      	ldr	r2, [pc, #204]	@ (800abe8 <HAL_DMA_Init+0x1c4>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d03b      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a31      	ldr	r2, [pc, #196]	@ (800abec <HAL_DMA_Init+0x1c8>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d036      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a30      	ldr	r2, [pc, #192]	@ (800abf0 <HAL_DMA_Init+0x1cc>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d031      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a2e      	ldr	r2, [pc, #184]	@ (800abf4 <HAL_DMA_Init+0x1d0>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d02c      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a2d      	ldr	r2, [pc, #180]	@ (800abf8 <HAL_DMA_Init+0x1d4>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d027      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a2b      	ldr	r2, [pc, #172]	@ (800abfc <HAL_DMA_Init+0x1d8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d022      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a2a      	ldr	r2, [pc, #168]	@ (800ac00 <HAL_DMA_Init+0x1dc>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d01d      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a28      	ldr	r2, [pc, #160]	@ (800ac04 <HAL_DMA_Init+0x1e0>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d018      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a27      	ldr	r2, [pc, #156]	@ (800ac08 <HAL_DMA_Init+0x1e4>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d013      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a25      	ldr	r2, [pc, #148]	@ (800ac0c <HAL_DMA_Init+0x1e8>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d00e      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a24      	ldr	r2, [pc, #144]	@ (800ac10 <HAL_DMA_Init+0x1ec>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d009      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a22      	ldr	r2, [pc, #136]	@ (800ac14 <HAL_DMA_Init+0x1f0>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d004      	beq.n	800ab98 <HAL_DMA_Init+0x174>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a21      	ldr	r2, [pc, #132]	@ (800ac18 <HAL_DMA_Init+0x1f4>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d108      	bne.n	800abaa <HAL_DMA_Init+0x186>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f022 0201 	bic.w	r2, r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	e007      	b.n	800abba <HAL_DMA_Init+0x196>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f022 0201 	bic.w	r2, r2, #1
 800abb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800abba:	e02f      	b.n	800ac1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800abbc:	f7fd fdfc 	bl	80087b8 <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	d928      	bls.n	800ac1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2220      	movs	r2, #32
 800abce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2203      	movs	r2, #3
 800abd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e242      	b.n	800b062 <HAL_DMA_Init+0x63e>
 800abdc:	40020010 	.word	0x40020010
 800abe0:	40020028 	.word	0x40020028
 800abe4:	40020040 	.word	0x40020040
 800abe8:	40020058 	.word	0x40020058
 800abec:	40020070 	.word	0x40020070
 800abf0:	40020088 	.word	0x40020088
 800abf4:	400200a0 	.word	0x400200a0
 800abf8:	400200b8 	.word	0x400200b8
 800abfc:	40020410 	.word	0x40020410
 800ac00:	40020428 	.word	0x40020428
 800ac04:	40020440 	.word	0x40020440
 800ac08:	40020458 	.word	0x40020458
 800ac0c:	40020470 	.word	0x40020470
 800ac10:	40020488 	.word	0x40020488
 800ac14:	400204a0 	.word	0x400204a0
 800ac18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1c8      	bne.n	800abbc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	4b83      	ldr	r3, [pc, #524]	@ (800ae44 <HAL_DMA_Init+0x420>)
 800ac36:	4013      	ands	r3, r2
 800ac38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800ac42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d107      	bne.n	800ac80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	2b28      	cmp	r3, #40	@ 0x28
 800ac86:	d903      	bls.n	800ac90 <HAL_DMA_Init+0x26c>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac8e:	d91f      	bls.n	800acd0 <HAL_DMA_Init+0x2ac>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac96:	d903      	bls.n	800aca0 <HAL_DMA_Init+0x27c>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	2b42      	cmp	r3, #66	@ 0x42
 800ac9e:	d917      	bls.n	800acd0 <HAL_DMA_Init+0x2ac>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	2b46      	cmp	r3, #70	@ 0x46
 800aca6:	d903      	bls.n	800acb0 <HAL_DMA_Init+0x28c>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	2b48      	cmp	r3, #72	@ 0x48
 800acae:	d90f      	bls.n	800acd0 <HAL_DMA_Init+0x2ac>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b4e      	cmp	r3, #78	@ 0x4e
 800acb6:	d903      	bls.n	800acc0 <HAL_DMA_Init+0x29c>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	2b52      	cmp	r3, #82	@ 0x52
 800acbe:	d907      	bls.n	800acd0 <HAL_DMA_Init+0x2ac>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	2b73      	cmp	r3, #115	@ 0x73
 800acc6:	d905      	bls.n	800acd4 <HAL_DMA_Init+0x2b0>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2b77      	cmp	r3, #119	@ 0x77
 800acce:	d801      	bhi.n	800acd4 <HAL_DMA_Init+0x2b0>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e000      	b.n	800acd6 <HAL_DMA_Init+0x2b2>
 800acd4:	2300      	movs	r3, #0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ace0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f023 0307 	bic.w	r3, r3, #7
 800acf8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	d117      	bne.n	800ad3c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00e      	beq.n	800ad3c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f002 fb48 	bl	800d3b4 <DMA_CheckFifoParam>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d008      	beq.n	800ad3c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2240      	movs	r2, #64	@ 0x40
 800ad2e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e192      	b.n	800b062 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f002 fa83 	bl	800d250 <DMA_CalcBaseAndBitshift>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad52:	f003 031f 	and.w	r3, r3, #31
 800ad56:	223f      	movs	r2, #63	@ 0x3f
 800ad58:	409a      	lsls	r2, r3
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	609a      	str	r2, [r3, #8]
 800ad5e:	e0c8      	b.n	800aef2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a38      	ldr	r2, [pc, #224]	@ (800ae48 <HAL_DMA_Init+0x424>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d022      	beq.n	800adb0 <HAL_DMA_Init+0x38c>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a37      	ldr	r2, [pc, #220]	@ (800ae4c <HAL_DMA_Init+0x428>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d01d      	beq.n	800adb0 <HAL_DMA_Init+0x38c>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a35      	ldr	r2, [pc, #212]	@ (800ae50 <HAL_DMA_Init+0x42c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d018      	beq.n	800adb0 <HAL_DMA_Init+0x38c>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a34      	ldr	r2, [pc, #208]	@ (800ae54 <HAL_DMA_Init+0x430>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d013      	beq.n	800adb0 <HAL_DMA_Init+0x38c>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a32      	ldr	r2, [pc, #200]	@ (800ae58 <HAL_DMA_Init+0x434>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d00e      	beq.n	800adb0 <HAL_DMA_Init+0x38c>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a31      	ldr	r2, [pc, #196]	@ (800ae5c <HAL_DMA_Init+0x438>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d009      	beq.n	800adb0 <HAL_DMA_Init+0x38c>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a2f      	ldr	r2, [pc, #188]	@ (800ae60 <HAL_DMA_Init+0x43c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d004      	beq.n	800adb0 <HAL_DMA_Init+0x38c>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a2e      	ldr	r2, [pc, #184]	@ (800ae64 <HAL_DMA_Init+0x440>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d101      	bne.n	800adb4 <HAL_DMA_Init+0x390>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e000      	b.n	800adb6 <HAL_DMA_Init+0x392>
 800adb4:	2300      	movs	r3, #0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 8092 	beq.w	800aee0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a21      	ldr	r2, [pc, #132]	@ (800ae48 <HAL_DMA_Init+0x424>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d021      	beq.n	800ae0a <HAL_DMA_Init+0x3e6>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a20      	ldr	r2, [pc, #128]	@ (800ae4c <HAL_DMA_Init+0x428>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d01c      	beq.n	800ae0a <HAL_DMA_Init+0x3e6>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a1e      	ldr	r2, [pc, #120]	@ (800ae50 <HAL_DMA_Init+0x42c>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d017      	beq.n	800ae0a <HAL_DMA_Init+0x3e6>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a1d      	ldr	r2, [pc, #116]	@ (800ae54 <HAL_DMA_Init+0x430>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d012      	beq.n	800ae0a <HAL_DMA_Init+0x3e6>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a1b      	ldr	r2, [pc, #108]	@ (800ae58 <HAL_DMA_Init+0x434>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d00d      	beq.n	800ae0a <HAL_DMA_Init+0x3e6>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a1a      	ldr	r2, [pc, #104]	@ (800ae5c <HAL_DMA_Init+0x438>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d008      	beq.n	800ae0a <HAL_DMA_Init+0x3e6>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a18      	ldr	r2, [pc, #96]	@ (800ae60 <HAL_DMA_Init+0x43c>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d003      	beq.n	800ae0a <HAL_DMA_Init+0x3e6>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a17      	ldr	r2, [pc, #92]	@ (800ae64 <HAL_DMA_Init+0x440>)
 800ae08:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	4b10      	ldr	r3, [pc, #64]	@ (800ae68 <HAL_DMA_Init+0x444>)
 800ae26:	4013      	ands	r3, r2
 800ae28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	2b40      	cmp	r3, #64	@ 0x40
 800ae30:	d01c      	beq.n	800ae6c <HAL_DMA_Init+0x448>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	2b80      	cmp	r3, #128	@ 0x80
 800ae38:	d102      	bne.n	800ae40 <HAL_DMA_Init+0x41c>
 800ae3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae3e:	e016      	b.n	800ae6e <HAL_DMA_Init+0x44a>
 800ae40:	2300      	movs	r3, #0
 800ae42:	e014      	b.n	800ae6e <HAL_DMA_Init+0x44a>
 800ae44:	fe10803f 	.word	0xfe10803f
 800ae48:	58025408 	.word	0x58025408
 800ae4c:	5802541c 	.word	0x5802541c
 800ae50:	58025430 	.word	0x58025430
 800ae54:	58025444 	.word	0x58025444
 800ae58:	58025458 	.word	0x58025458
 800ae5c:	5802546c 	.word	0x5802546c
 800ae60:	58025480 	.word	0x58025480
 800ae64:	58025494 	.word	0x58025494
 800ae68:	fffe000f 	.word	0xfffe000f
 800ae6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	68d2      	ldr	r2, [r2, #12]
 800ae72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ae74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ae7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ae84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ae8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ae94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ae9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	4b6e      	ldr	r3, [pc, #440]	@ (800b06c <HAL_DMA_Init+0x648>)
 800aeb4:	4413      	add	r3, r2
 800aeb6:	4a6e      	ldr	r2, [pc, #440]	@ (800b070 <HAL_DMA_Init+0x64c>)
 800aeb8:	fba2 2303 	umull	r2, r3, r2, r3
 800aebc:	091b      	lsrs	r3, r3, #4
 800aebe:	009a      	lsls	r2, r3, #2
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f002 f9c3 	bl	800d250 <DMA_CalcBaseAndBitshift>
 800aeca:	4603      	mov	r3, r0
 800aecc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aed2:	f003 031f 	and.w	r3, r3, #31
 800aed6:	2201      	movs	r2, #1
 800aed8:	409a      	lsls	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	605a      	str	r2, [r3, #4]
 800aede:	e008      	b.n	800aef2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2240      	movs	r2, #64	@ 0x40
 800aee4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2203      	movs	r2, #3
 800aeea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e0b7      	b.n	800b062 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a5f      	ldr	r2, [pc, #380]	@ (800b074 <HAL_DMA_Init+0x650>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d072      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a5d      	ldr	r2, [pc, #372]	@ (800b078 <HAL_DMA_Init+0x654>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d06d      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a5c      	ldr	r2, [pc, #368]	@ (800b07c <HAL_DMA_Init+0x658>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d068      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a5a      	ldr	r2, [pc, #360]	@ (800b080 <HAL_DMA_Init+0x65c>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d063      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a59      	ldr	r2, [pc, #356]	@ (800b084 <HAL_DMA_Init+0x660>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d05e      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a57      	ldr	r2, [pc, #348]	@ (800b088 <HAL_DMA_Init+0x664>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d059      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a56      	ldr	r2, [pc, #344]	@ (800b08c <HAL_DMA_Init+0x668>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d054      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a54      	ldr	r2, [pc, #336]	@ (800b090 <HAL_DMA_Init+0x66c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d04f      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a53      	ldr	r2, [pc, #332]	@ (800b094 <HAL_DMA_Init+0x670>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d04a      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a51      	ldr	r2, [pc, #324]	@ (800b098 <HAL_DMA_Init+0x674>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d045      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a50      	ldr	r2, [pc, #320]	@ (800b09c <HAL_DMA_Init+0x678>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d040      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a4e      	ldr	r2, [pc, #312]	@ (800b0a0 <HAL_DMA_Init+0x67c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d03b      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a4d      	ldr	r2, [pc, #308]	@ (800b0a4 <HAL_DMA_Init+0x680>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d036      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a4b      	ldr	r2, [pc, #300]	@ (800b0a8 <HAL_DMA_Init+0x684>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d031      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a4a      	ldr	r2, [pc, #296]	@ (800b0ac <HAL_DMA_Init+0x688>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d02c      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a48      	ldr	r2, [pc, #288]	@ (800b0b0 <HAL_DMA_Init+0x68c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d027      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a47      	ldr	r2, [pc, #284]	@ (800b0b4 <HAL_DMA_Init+0x690>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d022      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a45      	ldr	r2, [pc, #276]	@ (800b0b8 <HAL_DMA_Init+0x694>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d01d      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a44      	ldr	r2, [pc, #272]	@ (800b0bc <HAL_DMA_Init+0x698>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d018      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a42      	ldr	r2, [pc, #264]	@ (800b0c0 <HAL_DMA_Init+0x69c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d013      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a41      	ldr	r2, [pc, #260]	@ (800b0c4 <HAL_DMA_Init+0x6a0>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d00e      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a3f      	ldr	r2, [pc, #252]	@ (800b0c8 <HAL_DMA_Init+0x6a4>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d009      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a3e      	ldr	r2, [pc, #248]	@ (800b0cc <HAL_DMA_Init+0x6a8>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d004      	beq.n	800afe2 <HAL_DMA_Init+0x5be>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a3c      	ldr	r2, [pc, #240]	@ (800b0d0 <HAL_DMA_Init+0x6ac>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d101      	bne.n	800afe6 <HAL_DMA_Init+0x5c2>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e000      	b.n	800afe8 <HAL_DMA_Init+0x5c4>
 800afe6:	2300      	movs	r3, #0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d032      	beq.n	800b052 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f002 fa5d 	bl	800d4ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	2b80      	cmp	r3, #128	@ 0x80
 800aff8:	d102      	bne.n	800b000 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b008:	b2d2      	uxtb	r2, r2
 800b00a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b014:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d010      	beq.n	800b040 <HAL_DMA_Init+0x61c>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	2b08      	cmp	r3, #8
 800b024:	d80c      	bhi.n	800b040 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f002 fada 	bl	800d5e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b030:	2200      	movs	r2, #0
 800b032:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b03c:	605a      	str	r2, [r3, #4]
 800b03e:	e008      	b.n	800b052 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	a7fdabf8 	.word	0xa7fdabf8
 800b070:	cccccccd 	.word	0xcccccccd
 800b074:	40020010 	.word	0x40020010
 800b078:	40020028 	.word	0x40020028
 800b07c:	40020040 	.word	0x40020040
 800b080:	40020058 	.word	0x40020058
 800b084:	40020070 	.word	0x40020070
 800b088:	40020088 	.word	0x40020088
 800b08c:	400200a0 	.word	0x400200a0
 800b090:	400200b8 	.word	0x400200b8
 800b094:	40020410 	.word	0x40020410
 800b098:	40020428 	.word	0x40020428
 800b09c:	40020440 	.word	0x40020440
 800b0a0:	40020458 	.word	0x40020458
 800b0a4:	40020470 	.word	0x40020470
 800b0a8:	40020488 	.word	0x40020488
 800b0ac:	400204a0 	.word	0x400204a0
 800b0b0:	400204b8 	.word	0x400204b8
 800b0b4:	58025408 	.word	0x58025408
 800b0b8:	5802541c 	.word	0x5802541c
 800b0bc:	58025430 	.word	0x58025430
 800b0c0:	58025444 	.word	0x58025444
 800b0c4:	58025458 	.word	0x58025458
 800b0c8:	5802546c 	.word	0x5802546c
 800b0cc:	58025480 	.word	0x58025480
 800b0d0:	58025494 	.word	0x58025494

0800b0d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e226      	b.n	800b53e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d101      	bne.n	800b0fe <HAL_DMA_Start_IT+0x2a>
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e21f      	b.n	800b53e <HAL_DMA_Start_IT+0x46a>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b01      	cmp	r3, #1
 800b110:	f040 820a 	bne.w	800b528 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2202      	movs	r2, #2
 800b118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a68      	ldr	r2, [pc, #416]	@ (800b2c8 <HAL_DMA_Start_IT+0x1f4>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d04a      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a66      	ldr	r2, [pc, #408]	@ (800b2cc <HAL_DMA_Start_IT+0x1f8>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d045      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a65      	ldr	r2, [pc, #404]	@ (800b2d0 <HAL_DMA_Start_IT+0x1fc>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d040      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a63      	ldr	r2, [pc, #396]	@ (800b2d4 <HAL_DMA_Start_IT+0x200>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d03b      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a62      	ldr	r2, [pc, #392]	@ (800b2d8 <HAL_DMA_Start_IT+0x204>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d036      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a60      	ldr	r2, [pc, #384]	@ (800b2dc <HAL_DMA_Start_IT+0x208>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d031      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a5f      	ldr	r2, [pc, #380]	@ (800b2e0 <HAL_DMA_Start_IT+0x20c>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d02c      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a5d      	ldr	r2, [pc, #372]	@ (800b2e4 <HAL_DMA_Start_IT+0x210>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d027      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a5c      	ldr	r2, [pc, #368]	@ (800b2e8 <HAL_DMA_Start_IT+0x214>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d022      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a5a      	ldr	r2, [pc, #360]	@ (800b2ec <HAL_DMA_Start_IT+0x218>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d01d      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a59      	ldr	r2, [pc, #356]	@ (800b2f0 <HAL_DMA_Start_IT+0x21c>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d018      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a57      	ldr	r2, [pc, #348]	@ (800b2f4 <HAL_DMA_Start_IT+0x220>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d013      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a56      	ldr	r2, [pc, #344]	@ (800b2f8 <HAL_DMA_Start_IT+0x224>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00e      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a54      	ldr	r2, [pc, #336]	@ (800b2fc <HAL_DMA_Start_IT+0x228>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d009      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a53      	ldr	r2, [pc, #332]	@ (800b300 <HAL_DMA_Start_IT+0x22c>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d004      	beq.n	800b1c2 <HAL_DMA_Start_IT+0xee>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a51      	ldr	r2, [pc, #324]	@ (800b304 <HAL_DMA_Start_IT+0x230>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d108      	bne.n	800b1d4 <HAL_DMA_Start_IT+0x100>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f022 0201 	bic.w	r2, r2, #1
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	e007      	b.n	800b1e4 <HAL_DMA_Start_IT+0x110>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f022 0201 	bic.w	r2, r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	68b9      	ldr	r1, [r7, #8]
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f001 fe84 	bl	800cef8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a34      	ldr	r2, [pc, #208]	@ (800b2c8 <HAL_DMA_Start_IT+0x1f4>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d04a      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a33      	ldr	r2, [pc, #204]	@ (800b2cc <HAL_DMA_Start_IT+0x1f8>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d045      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a31      	ldr	r2, [pc, #196]	@ (800b2d0 <HAL_DMA_Start_IT+0x1fc>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d040      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a30      	ldr	r2, [pc, #192]	@ (800b2d4 <HAL_DMA_Start_IT+0x200>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d03b      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a2e      	ldr	r2, [pc, #184]	@ (800b2d8 <HAL_DMA_Start_IT+0x204>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d036      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a2d      	ldr	r2, [pc, #180]	@ (800b2dc <HAL_DMA_Start_IT+0x208>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d031      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a2b      	ldr	r2, [pc, #172]	@ (800b2e0 <HAL_DMA_Start_IT+0x20c>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d02c      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a2a      	ldr	r2, [pc, #168]	@ (800b2e4 <HAL_DMA_Start_IT+0x210>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d027      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a28      	ldr	r2, [pc, #160]	@ (800b2e8 <HAL_DMA_Start_IT+0x214>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d022      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a27      	ldr	r2, [pc, #156]	@ (800b2ec <HAL_DMA_Start_IT+0x218>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d01d      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a25      	ldr	r2, [pc, #148]	@ (800b2f0 <HAL_DMA_Start_IT+0x21c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d018      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a24      	ldr	r2, [pc, #144]	@ (800b2f4 <HAL_DMA_Start_IT+0x220>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d013      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a22      	ldr	r2, [pc, #136]	@ (800b2f8 <HAL_DMA_Start_IT+0x224>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d00e      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a21      	ldr	r2, [pc, #132]	@ (800b2fc <HAL_DMA_Start_IT+0x228>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d009      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1f      	ldr	r2, [pc, #124]	@ (800b300 <HAL_DMA_Start_IT+0x22c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d004      	beq.n	800b290 <HAL_DMA_Start_IT+0x1bc>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a1e      	ldr	r2, [pc, #120]	@ (800b304 <HAL_DMA_Start_IT+0x230>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d101      	bne.n	800b294 <HAL_DMA_Start_IT+0x1c0>
 800b290:	2301      	movs	r3, #1
 800b292:	e000      	b.n	800b296 <HAL_DMA_Start_IT+0x1c2>
 800b294:	2300      	movs	r3, #0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d036      	beq.n	800b308 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f023 021e 	bic.w	r2, r3, #30
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f042 0216 	orr.w	r2, r2, #22
 800b2ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d03e      	beq.n	800b334 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f042 0208 	orr.w	r2, r2, #8
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	e035      	b.n	800b334 <HAL_DMA_Start_IT+0x260>
 800b2c8:	40020010 	.word	0x40020010
 800b2cc:	40020028 	.word	0x40020028
 800b2d0:	40020040 	.word	0x40020040
 800b2d4:	40020058 	.word	0x40020058
 800b2d8:	40020070 	.word	0x40020070
 800b2dc:	40020088 	.word	0x40020088
 800b2e0:	400200a0 	.word	0x400200a0
 800b2e4:	400200b8 	.word	0x400200b8
 800b2e8:	40020410 	.word	0x40020410
 800b2ec:	40020428 	.word	0x40020428
 800b2f0:	40020440 	.word	0x40020440
 800b2f4:	40020458 	.word	0x40020458
 800b2f8:	40020470 	.word	0x40020470
 800b2fc:	40020488 	.word	0x40020488
 800b300:	400204a0 	.word	0x400204a0
 800b304:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f023 020e 	bic.w	r2, r3, #14
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 020a 	orr.w	r2, r2, #10
 800b31a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b320:	2b00      	cmp	r3, #0
 800b322:	d007      	beq.n	800b334 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f042 0204 	orr.w	r2, r2, #4
 800b332:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a83      	ldr	r2, [pc, #524]	@ (800b548 <HAL_DMA_Start_IT+0x474>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d072      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a82      	ldr	r2, [pc, #520]	@ (800b54c <HAL_DMA_Start_IT+0x478>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d06d      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a80      	ldr	r2, [pc, #512]	@ (800b550 <HAL_DMA_Start_IT+0x47c>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d068      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a7f      	ldr	r2, [pc, #508]	@ (800b554 <HAL_DMA_Start_IT+0x480>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d063      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a7d      	ldr	r2, [pc, #500]	@ (800b558 <HAL_DMA_Start_IT+0x484>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d05e      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a7c      	ldr	r2, [pc, #496]	@ (800b55c <HAL_DMA_Start_IT+0x488>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d059      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a7a      	ldr	r2, [pc, #488]	@ (800b560 <HAL_DMA_Start_IT+0x48c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d054      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a79      	ldr	r2, [pc, #484]	@ (800b564 <HAL_DMA_Start_IT+0x490>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d04f      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a77      	ldr	r2, [pc, #476]	@ (800b568 <HAL_DMA_Start_IT+0x494>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d04a      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a76      	ldr	r2, [pc, #472]	@ (800b56c <HAL_DMA_Start_IT+0x498>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d045      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a74      	ldr	r2, [pc, #464]	@ (800b570 <HAL_DMA_Start_IT+0x49c>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d040      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a73      	ldr	r2, [pc, #460]	@ (800b574 <HAL_DMA_Start_IT+0x4a0>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d03b      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a71      	ldr	r2, [pc, #452]	@ (800b578 <HAL_DMA_Start_IT+0x4a4>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d036      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a70      	ldr	r2, [pc, #448]	@ (800b57c <HAL_DMA_Start_IT+0x4a8>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d031      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a6e      	ldr	r2, [pc, #440]	@ (800b580 <HAL_DMA_Start_IT+0x4ac>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d02c      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a6d      	ldr	r2, [pc, #436]	@ (800b584 <HAL_DMA_Start_IT+0x4b0>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d027      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a6b      	ldr	r2, [pc, #428]	@ (800b588 <HAL_DMA_Start_IT+0x4b4>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d022      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a6a      	ldr	r2, [pc, #424]	@ (800b58c <HAL_DMA_Start_IT+0x4b8>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d01d      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a68      	ldr	r2, [pc, #416]	@ (800b590 <HAL_DMA_Start_IT+0x4bc>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d018      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a67      	ldr	r2, [pc, #412]	@ (800b594 <HAL_DMA_Start_IT+0x4c0>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d013      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a65      	ldr	r2, [pc, #404]	@ (800b598 <HAL_DMA_Start_IT+0x4c4>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d00e      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a64      	ldr	r2, [pc, #400]	@ (800b59c <HAL_DMA_Start_IT+0x4c8>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d009      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a62      	ldr	r2, [pc, #392]	@ (800b5a0 <HAL_DMA_Start_IT+0x4cc>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d004      	beq.n	800b424 <HAL_DMA_Start_IT+0x350>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a61      	ldr	r2, [pc, #388]	@ (800b5a4 <HAL_DMA_Start_IT+0x4d0>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d101      	bne.n	800b428 <HAL_DMA_Start_IT+0x354>
 800b424:	2301      	movs	r3, #1
 800b426:	e000      	b.n	800b42a <HAL_DMA_Start_IT+0x356>
 800b428:	2300      	movs	r3, #0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d01a      	beq.n	800b464 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b44a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d007      	beq.n	800b464 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b45e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b462:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a37      	ldr	r2, [pc, #220]	@ (800b548 <HAL_DMA_Start_IT+0x474>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d04a      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a36      	ldr	r2, [pc, #216]	@ (800b54c <HAL_DMA_Start_IT+0x478>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d045      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a34      	ldr	r2, [pc, #208]	@ (800b550 <HAL_DMA_Start_IT+0x47c>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d040      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a33      	ldr	r2, [pc, #204]	@ (800b554 <HAL_DMA_Start_IT+0x480>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d03b      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a31      	ldr	r2, [pc, #196]	@ (800b558 <HAL_DMA_Start_IT+0x484>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d036      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a30      	ldr	r2, [pc, #192]	@ (800b55c <HAL_DMA_Start_IT+0x488>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d031      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a2e      	ldr	r2, [pc, #184]	@ (800b560 <HAL_DMA_Start_IT+0x48c>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d02c      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a2d      	ldr	r2, [pc, #180]	@ (800b564 <HAL_DMA_Start_IT+0x490>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d027      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a2b      	ldr	r2, [pc, #172]	@ (800b568 <HAL_DMA_Start_IT+0x494>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d022      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b56c <HAL_DMA_Start_IT+0x498>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d01d      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a28      	ldr	r2, [pc, #160]	@ (800b570 <HAL_DMA_Start_IT+0x49c>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d018      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a27      	ldr	r2, [pc, #156]	@ (800b574 <HAL_DMA_Start_IT+0x4a0>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d013      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a25      	ldr	r2, [pc, #148]	@ (800b578 <HAL_DMA_Start_IT+0x4a4>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d00e      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a24      	ldr	r2, [pc, #144]	@ (800b57c <HAL_DMA_Start_IT+0x4a8>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d009      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a22      	ldr	r2, [pc, #136]	@ (800b580 <HAL_DMA_Start_IT+0x4ac>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d004      	beq.n	800b504 <HAL_DMA_Start_IT+0x430>
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a21      	ldr	r2, [pc, #132]	@ (800b584 <HAL_DMA_Start_IT+0x4b0>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d108      	bne.n	800b516 <HAL_DMA_Start_IT+0x442>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f042 0201 	orr.w	r2, r2, #1
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	e012      	b.n	800b53c <HAL_DMA_Start_IT+0x468>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f042 0201 	orr.w	r2, r2, #1
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	e009      	b.n	800b53c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b52e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	40020010 	.word	0x40020010
 800b54c:	40020028 	.word	0x40020028
 800b550:	40020040 	.word	0x40020040
 800b554:	40020058 	.word	0x40020058
 800b558:	40020070 	.word	0x40020070
 800b55c:	40020088 	.word	0x40020088
 800b560:	400200a0 	.word	0x400200a0
 800b564:	400200b8 	.word	0x400200b8
 800b568:	40020410 	.word	0x40020410
 800b56c:	40020428 	.word	0x40020428
 800b570:	40020440 	.word	0x40020440
 800b574:	40020458 	.word	0x40020458
 800b578:	40020470 	.word	0x40020470
 800b57c:	40020488 	.word	0x40020488
 800b580:	400204a0 	.word	0x400204a0
 800b584:	400204b8 	.word	0x400204b8
 800b588:	58025408 	.word	0x58025408
 800b58c:	5802541c 	.word	0x5802541c
 800b590:	58025430 	.word	0x58025430
 800b594:	58025444 	.word	0x58025444
 800b598:	58025458 	.word	0x58025458
 800b59c:	5802546c 	.word	0x5802546c
 800b5a0:	58025480 	.word	0x58025480
 800b5a4:	58025494 	.word	0x58025494

0800b5a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800b5b0:	f7fd f902 	bl	80087b8 <HAL_GetTick>
 800b5b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e2dc      	b.n	800bb7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d008      	beq.n	800b5de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2280      	movs	r2, #128	@ 0x80
 800b5d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e2cd      	b.n	800bb7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a76      	ldr	r2, [pc, #472]	@ (800b7bc <HAL_DMA_Abort+0x214>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d04a      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a74      	ldr	r2, [pc, #464]	@ (800b7c0 <HAL_DMA_Abort+0x218>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d045      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a73      	ldr	r2, [pc, #460]	@ (800b7c4 <HAL_DMA_Abort+0x21c>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d040      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a71      	ldr	r2, [pc, #452]	@ (800b7c8 <HAL_DMA_Abort+0x220>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d03b      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a70      	ldr	r2, [pc, #448]	@ (800b7cc <HAL_DMA_Abort+0x224>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d036      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a6e      	ldr	r2, [pc, #440]	@ (800b7d0 <HAL_DMA_Abort+0x228>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d031      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a6d      	ldr	r2, [pc, #436]	@ (800b7d4 <HAL_DMA_Abort+0x22c>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d02c      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a6b      	ldr	r2, [pc, #428]	@ (800b7d8 <HAL_DMA_Abort+0x230>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d027      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a6a      	ldr	r2, [pc, #424]	@ (800b7dc <HAL_DMA_Abort+0x234>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d022      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a68      	ldr	r2, [pc, #416]	@ (800b7e0 <HAL_DMA_Abort+0x238>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d01d      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a67      	ldr	r2, [pc, #412]	@ (800b7e4 <HAL_DMA_Abort+0x23c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d018      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a65      	ldr	r2, [pc, #404]	@ (800b7e8 <HAL_DMA_Abort+0x240>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d013      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a64      	ldr	r2, [pc, #400]	@ (800b7ec <HAL_DMA_Abort+0x244>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d00e      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a62      	ldr	r2, [pc, #392]	@ (800b7f0 <HAL_DMA_Abort+0x248>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d009      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a61      	ldr	r2, [pc, #388]	@ (800b7f4 <HAL_DMA_Abort+0x24c>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d004      	beq.n	800b67e <HAL_DMA_Abort+0xd6>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a5f      	ldr	r2, [pc, #380]	@ (800b7f8 <HAL_DMA_Abort+0x250>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d101      	bne.n	800b682 <HAL_DMA_Abort+0xda>
 800b67e:	2301      	movs	r3, #1
 800b680:	e000      	b.n	800b684 <HAL_DMA_Abort+0xdc>
 800b682:	2300      	movs	r3, #0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d013      	beq.n	800b6b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f022 021e 	bic.w	r2, r2, #30
 800b696:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	695a      	ldr	r2, [r3, #20]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	e00a      	b.n	800b6c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 020e 	bic.w	r2, r2, #14
 800b6be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a3c      	ldr	r2, [pc, #240]	@ (800b7bc <HAL_DMA_Abort+0x214>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d072      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a3a      	ldr	r2, [pc, #232]	@ (800b7c0 <HAL_DMA_Abort+0x218>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d06d      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a39      	ldr	r2, [pc, #228]	@ (800b7c4 <HAL_DMA_Abort+0x21c>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d068      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a37      	ldr	r2, [pc, #220]	@ (800b7c8 <HAL_DMA_Abort+0x220>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d063      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a36      	ldr	r2, [pc, #216]	@ (800b7cc <HAL_DMA_Abort+0x224>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d05e      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a34      	ldr	r2, [pc, #208]	@ (800b7d0 <HAL_DMA_Abort+0x228>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d059      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a33      	ldr	r2, [pc, #204]	@ (800b7d4 <HAL_DMA_Abort+0x22c>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d054      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a31      	ldr	r2, [pc, #196]	@ (800b7d8 <HAL_DMA_Abort+0x230>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d04f      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a30      	ldr	r2, [pc, #192]	@ (800b7dc <HAL_DMA_Abort+0x234>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d04a      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a2e      	ldr	r2, [pc, #184]	@ (800b7e0 <HAL_DMA_Abort+0x238>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d045      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a2d      	ldr	r2, [pc, #180]	@ (800b7e4 <HAL_DMA_Abort+0x23c>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d040      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a2b      	ldr	r2, [pc, #172]	@ (800b7e8 <HAL_DMA_Abort+0x240>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d03b      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a2a      	ldr	r2, [pc, #168]	@ (800b7ec <HAL_DMA_Abort+0x244>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d036      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a28      	ldr	r2, [pc, #160]	@ (800b7f0 <HAL_DMA_Abort+0x248>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d031      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a27      	ldr	r2, [pc, #156]	@ (800b7f4 <HAL_DMA_Abort+0x24c>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d02c      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a25      	ldr	r2, [pc, #148]	@ (800b7f8 <HAL_DMA_Abort+0x250>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d027      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a24      	ldr	r2, [pc, #144]	@ (800b7fc <HAL_DMA_Abort+0x254>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d022      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a22      	ldr	r2, [pc, #136]	@ (800b800 <HAL_DMA_Abort+0x258>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d01d      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a21      	ldr	r2, [pc, #132]	@ (800b804 <HAL_DMA_Abort+0x25c>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d018      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a1f      	ldr	r2, [pc, #124]	@ (800b808 <HAL_DMA_Abort+0x260>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d013      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a1e      	ldr	r2, [pc, #120]	@ (800b80c <HAL_DMA_Abort+0x264>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00e      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a1c      	ldr	r2, [pc, #112]	@ (800b810 <HAL_DMA_Abort+0x268>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d009      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a1b      	ldr	r2, [pc, #108]	@ (800b814 <HAL_DMA_Abort+0x26c>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d004      	beq.n	800b7b6 <HAL_DMA_Abort+0x20e>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a19      	ldr	r2, [pc, #100]	@ (800b818 <HAL_DMA_Abort+0x270>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d132      	bne.n	800b81c <HAL_DMA_Abort+0x274>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e031      	b.n	800b81e <HAL_DMA_Abort+0x276>
 800b7ba:	bf00      	nop
 800b7bc:	40020010 	.word	0x40020010
 800b7c0:	40020028 	.word	0x40020028
 800b7c4:	40020040 	.word	0x40020040
 800b7c8:	40020058 	.word	0x40020058
 800b7cc:	40020070 	.word	0x40020070
 800b7d0:	40020088 	.word	0x40020088
 800b7d4:	400200a0 	.word	0x400200a0
 800b7d8:	400200b8 	.word	0x400200b8
 800b7dc:	40020410 	.word	0x40020410
 800b7e0:	40020428 	.word	0x40020428
 800b7e4:	40020440 	.word	0x40020440
 800b7e8:	40020458 	.word	0x40020458
 800b7ec:	40020470 	.word	0x40020470
 800b7f0:	40020488 	.word	0x40020488
 800b7f4:	400204a0 	.word	0x400204a0
 800b7f8:	400204b8 	.word	0x400204b8
 800b7fc:	58025408 	.word	0x58025408
 800b800:	5802541c 	.word	0x5802541c
 800b804:	58025430 	.word	0x58025430
 800b808:	58025444 	.word	0x58025444
 800b80c:	58025458 	.word	0x58025458
 800b810:	5802546c 	.word	0x5802546c
 800b814:	58025480 	.word	0x58025480
 800b818:	58025494 	.word	0x58025494
 800b81c:	2300      	movs	r3, #0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b82c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b830:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a6d      	ldr	r2, [pc, #436]	@ (800b9ec <HAL_DMA_Abort+0x444>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d04a      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a6b      	ldr	r2, [pc, #428]	@ (800b9f0 <HAL_DMA_Abort+0x448>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d045      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a6a      	ldr	r2, [pc, #424]	@ (800b9f4 <HAL_DMA_Abort+0x44c>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d040      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a68      	ldr	r2, [pc, #416]	@ (800b9f8 <HAL_DMA_Abort+0x450>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d03b      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a67      	ldr	r2, [pc, #412]	@ (800b9fc <HAL_DMA_Abort+0x454>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d036      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a65      	ldr	r2, [pc, #404]	@ (800ba00 <HAL_DMA_Abort+0x458>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d031      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a64      	ldr	r2, [pc, #400]	@ (800ba04 <HAL_DMA_Abort+0x45c>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d02c      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a62      	ldr	r2, [pc, #392]	@ (800ba08 <HAL_DMA_Abort+0x460>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d027      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a61      	ldr	r2, [pc, #388]	@ (800ba0c <HAL_DMA_Abort+0x464>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d022      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a5f      	ldr	r2, [pc, #380]	@ (800ba10 <HAL_DMA_Abort+0x468>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d01d      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a5e      	ldr	r2, [pc, #376]	@ (800ba14 <HAL_DMA_Abort+0x46c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d018      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a5c      	ldr	r2, [pc, #368]	@ (800ba18 <HAL_DMA_Abort+0x470>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d013      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a5b      	ldr	r2, [pc, #364]	@ (800ba1c <HAL_DMA_Abort+0x474>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d00e      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a59      	ldr	r2, [pc, #356]	@ (800ba20 <HAL_DMA_Abort+0x478>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d009      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a58      	ldr	r2, [pc, #352]	@ (800ba24 <HAL_DMA_Abort+0x47c>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d004      	beq.n	800b8d2 <HAL_DMA_Abort+0x32a>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a56      	ldr	r2, [pc, #344]	@ (800ba28 <HAL_DMA_Abort+0x480>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d108      	bne.n	800b8e4 <HAL_DMA_Abort+0x33c>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f022 0201 	bic.w	r2, r2, #1
 800b8e0:	601a      	str	r2, [r3, #0]
 800b8e2:	e007      	b.n	800b8f4 <HAL_DMA_Abort+0x34c>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f022 0201 	bic.w	r2, r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b8f4:	e013      	b.n	800b91e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b8f6:	f7fc ff5f 	bl	80087b8 <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	2b05      	cmp	r3, #5
 800b902:	d90c      	bls.n	800b91e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2220      	movs	r2, #32
 800b908:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2203      	movs	r2, #3
 800b90e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e12d      	b.n	800bb7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1e5      	bne.n	800b8f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a2f      	ldr	r2, [pc, #188]	@ (800b9ec <HAL_DMA_Abort+0x444>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d04a      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a2d      	ldr	r2, [pc, #180]	@ (800b9f0 <HAL_DMA_Abort+0x448>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d045      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a2c      	ldr	r2, [pc, #176]	@ (800b9f4 <HAL_DMA_Abort+0x44c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d040      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a2a      	ldr	r2, [pc, #168]	@ (800b9f8 <HAL_DMA_Abort+0x450>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d03b      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a29      	ldr	r2, [pc, #164]	@ (800b9fc <HAL_DMA_Abort+0x454>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d036      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a27      	ldr	r2, [pc, #156]	@ (800ba00 <HAL_DMA_Abort+0x458>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d031      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a26      	ldr	r2, [pc, #152]	@ (800ba04 <HAL_DMA_Abort+0x45c>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d02c      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a24      	ldr	r2, [pc, #144]	@ (800ba08 <HAL_DMA_Abort+0x460>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d027      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a23      	ldr	r2, [pc, #140]	@ (800ba0c <HAL_DMA_Abort+0x464>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d022      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a21      	ldr	r2, [pc, #132]	@ (800ba10 <HAL_DMA_Abort+0x468>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d01d      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a20      	ldr	r2, [pc, #128]	@ (800ba14 <HAL_DMA_Abort+0x46c>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d018      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a1e      	ldr	r2, [pc, #120]	@ (800ba18 <HAL_DMA_Abort+0x470>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d013      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a1d      	ldr	r2, [pc, #116]	@ (800ba1c <HAL_DMA_Abort+0x474>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d00e      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a1b      	ldr	r2, [pc, #108]	@ (800ba20 <HAL_DMA_Abort+0x478>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d009      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a1a      	ldr	r2, [pc, #104]	@ (800ba24 <HAL_DMA_Abort+0x47c>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d004      	beq.n	800b9ca <HAL_DMA_Abort+0x422>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a18      	ldr	r2, [pc, #96]	@ (800ba28 <HAL_DMA_Abort+0x480>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d101      	bne.n	800b9ce <HAL_DMA_Abort+0x426>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <HAL_DMA_Abort+0x428>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d02b      	beq.n	800ba2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9de:	f003 031f 	and.w	r3, r3, #31
 800b9e2:	223f      	movs	r2, #63	@ 0x3f
 800b9e4:	409a      	lsls	r2, r3
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	609a      	str	r2, [r3, #8]
 800b9ea:	e02a      	b.n	800ba42 <HAL_DMA_Abort+0x49a>
 800b9ec:	40020010 	.word	0x40020010
 800b9f0:	40020028 	.word	0x40020028
 800b9f4:	40020040 	.word	0x40020040
 800b9f8:	40020058 	.word	0x40020058
 800b9fc:	40020070 	.word	0x40020070
 800ba00:	40020088 	.word	0x40020088
 800ba04:	400200a0 	.word	0x400200a0
 800ba08:	400200b8 	.word	0x400200b8
 800ba0c:	40020410 	.word	0x40020410
 800ba10:	40020428 	.word	0x40020428
 800ba14:	40020440 	.word	0x40020440
 800ba18:	40020458 	.word	0x40020458
 800ba1c:	40020470 	.word	0x40020470
 800ba20:	40020488 	.word	0x40020488
 800ba24:	400204a0 	.word	0x400204a0
 800ba28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba36:	f003 031f 	and.w	r3, r3, #31
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	409a      	lsls	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a4f      	ldr	r2, [pc, #316]	@ (800bb84 <HAL_DMA_Abort+0x5dc>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d072      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a4d      	ldr	r2, [pc, #308]	@ (800bb88 <HAL_DMA_Abort+0x5e0>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d06d      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a4c      	ldr	r2, [pc, #304]	@ (800bb8c <HAL_DMA_Abort+0x5e4>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d068      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a4a      	ldr	r2, [pc, #296]	@ (800bb90 <HAL_DMA_Abort+0x5e8>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d063      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a49      	ldr	r2, [pc, #292]	@ (800bb94 <HAL_DMA_Abort+0x5ec>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d05e      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a47      	ldr	r2, [pc, #284]	@ (800bb98 <HAL_DMA_Abort+0x5f0>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d059      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a46      	ldr	r2, [pc, #280]	@ (800bb9c <HAL_DMA_Abort+0x5f4>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d054      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a44      	ldr	r2, [pc, #272]	@ (800bba0 <HAL_DMA_Abort+0x5f8>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d04f      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a43      	ldr	r2, [pc, #268]	@ (800bba4 <HAL_DMA_Abort+0x5fc>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d04a      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a41      	ldr	r2, [pc, #260]	@ (800bba8 <HAL_DMA_Abort+0x600>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d045      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a40      	ldr	r2, [pc, #256]	@ (800bbac <HAL_DMA_Abort+0x604>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d040      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a3e      	ldr	r2, [pc, #248]	@ (800bbb0 <HAL_DMA_Abort+0x608>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d03b      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a3d      	ldr	r2, [pc, #244]	@ (800bbb4 <HAL_DMA_Abort+0x60c>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d036      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a3b      	ldr	r2, [pc, #236]	@ (800bbb8 <HAL_DMA_Abort+0x610>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d031      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a3a      	ldr	r2, [pc, #232]	@ (800bbbc <HAL_DMA_Abort+0x614>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d02c      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a38      	ldr	r2, [pc, #224]	@ (800bbc0 <HAL_DMA_Abort+0x618>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d027      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a37      	ldr	r2, [pc, #220]	@ (800bbc4 <HAL_DMA_Abort+0x61c>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d022      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a35      	ldr	r2, [pc, #212]	@ (800bbc8 <HAL_DMA_Abort+0x620>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d01d      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a34      	ldr	r2, [pc, #208]	@ (800bbcc <HAL_DMA_Abort+0x624>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d018      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a32      	ldr	r2, [pc, #200]	@ (800bbd0 <HAL_DMA_Abort+0x628>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d013      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a31      	ldr	r2, [pc, #196]	@ (800bbd4 <HAL_DMA_Abort+0x62c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d00e      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a2f      	ldr	r2, [pc, #188]	@ (800bbd8 <HAL_DMA_Abort+0x630>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d009      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a2e      	ldr	r2, [pc, #184]	@ (800bbdc <HAL_DMA_Abort+0x634>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d004      	beq.n	800bb32 <HAL_DMA_Abort+0x58a>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a2c      	ldr	r2, [pc, #176]	@ (800bbe0 <HAL_DMA_Abort+0x638>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d101      	bne.n	800bb36 <HAL_DMA_Abort+0x58e>
 800bb32:	2301      	movs	r3, #1
 800bb34:	e000      	b.n	800bb38 <HAL_DMA_Abort+0x590>
 800bb36:	2300      	movs	r3, #0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d015      	beq.n	800bb68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bb44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00c      	beq.n	800bb68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bb66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	40020010 	.word	0x40020010
 800bb88:	40020028 	.word	0x40020028
 800bb8c:	40020040 	.word	0x40020040
 800bb90:	40020058 	.word	0x40020058
 800bb94:	40020070 	.word	0x40020070
 800bb98:	40020088 	.word	0x40020088
 800bb9c:	400200a0 	.word	0x400200a0
 800bba0:	400200b8 	.word	0x400200b8
 800bba4:	40020410 	.word	0x40020410
 800bba8:	40020428 	.word	0x40020428
 800bbac:	40020440 	.word	0x40020440
 800bbb0:	40020458 	.word	0x40020458
 800bbb4:	40020470 	.word	0x40020470
 800bbb8:	40020488 	.word	0x40020488
 800bbbc:	400204a0 	.word	0x400204a0
 800bbc0:	400204b8 	.word	0x400204b8
 800bbc4:	58025408 	.word	0x58025408
 800bbc8:	5802541c 	.word	0x5802541c
 800bbcc:	58025430 	.word	0x58025430
 800bbd0:	58025444 	.word	0x58025444
 800bbd4:	58025458 	.word	0x58025458
 800bbd8:	5802546c 	.word	0x5802546c
 800bbdc:	58025480 	.word	0x58025480
 800bbe0:	58025494 	.word	0x58025494

0800bbe4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d101      	bne.n	800bbf6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e237      	b.n	800c066 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d004      	beq.n	800bc0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2280      	movs	r2, #128	@ 0x80
 800bc06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e22c      	b.n	800c066 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a5c      	ldr	r2, [pc, #368]	@ (800bd84 <HAL_DMA_Abort_IT+0x1a0>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d04a      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a5b      	ldr	r2, [pc, #364]	@ (800bd88 <HAL_DMA_Abort_IT+0x1a4>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d045      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a59      	ldr	r2, [pc, #356]	@ (800bd8c <HAL_DMA_Abort_IT+0x1a8>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d040      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a58      	ldr	r2, [pc, #352]	@ (800bd90 <HAL_DMA_Abort_IT+0x1ac>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d03b      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a56      	ldr	r2, [pc, #344]	@ (800bd94 <HAL_DMA_Abort_IT+0x1b0>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d036      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a55      	ldr	r2, [pc, #340]	@ (800bd98 <HAL_DMA_Abort_IT+0x1b4>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d031      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a53      	ldr	r2, [pc, #332]	@ (800bd9c <HAL_DMA_Abort_IT+0x1b8>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d02c      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a52      	ldr	r2, [pc, #328]	@ (800bda0 <HAL_DMA_Abort_IT+0x1bc>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d027      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a50      	ldr	r2, [pc, #320]	@ (800bda4 <HAL_DMA_Abort_IT+0x1c0>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d022      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a4f      	ldr	r2, [pc, #316]	@ (800bda8 <HAL_DMA_Abort_IT+0x1c4>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d01d      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a4d      	ldr	r2, [pc, #308]	@ (800bdac <HAL_DMA_Abort_IT+0x1c8>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d018      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a4c      	ldr	r2, [pc, #304]	@ (800bdb0 <HAL_DMA_Abort_IT+0x1cc>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d013      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a4a      	ldr	r2, [pc, #296]	@ (800bdb4 <HAL_DMA_Abort_IT+0x1d0>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d00e      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a49      	ldr	r2, [pc, #292]	@ (800bdb8 <HAL_DMA_Abort_IT+0x1d4>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d009      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a47      	ldr	r2, [pc, #284]	@ (800bdbc <HAL_DMA_Abort_IT+0x1d8>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d004      	beq.n	800bcac <HAL_DMA_Abort_IT+0xc8>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a46      	ldr	r2, [pc, #280]	@ (800bdc0 <HAL_DMA_Abort_IT+0x1dc>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d101      	bne.n	800bcb0 <HAL_DMA_Abort_IT+0xcc>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e000      	b.n	800bcb2 <HAL_DMA_Abort_IT+0xce>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f000 8086 	beq.w	800bdc4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2204      	movs	r2, #4
 800bcbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a2f      	ldr	r2, [pc, #188]	@ (800bd84 <HAL_DMA_Abort_IT+0x1a0>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d04a      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a2e      	ldr	r2, [pc, #184]	@ (800bd88 <HAL_DMA_Abort_IT+0x1a4>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d045      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a2c      	ldr	r2, [pc, #176]	@ (800bd8c <HAL_DMA_Abort_IT+0x1a8>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d040      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a2b      	ldr	r2, [pc, #172]	@ (800bd90 <HAL_DMA_Abort_IT+0x1ac>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d03b      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a29      	ldr	r2, [pc, #164]	@ (800bd94 <HAL_DMA_Abort_IT+0x1b0>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d036      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a28      	ldr	r2, [pc, #160]	@ (800bd98 <HAL_DMA_Abort_IT+0x1b4>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d031      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a26      	ldr	r2, [pc, #152]	@ (800bd9c <HAL_DMA_Abort_IT+0x1b8>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d02c      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a25      	ldr	r2, [pc, #148]	@ (800bda0 <HAL_DMA_Abort_IT+0x1bc>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d027      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a23      	ldr	r2, [pc, #140]	@ (800bda4 <HAL_DMA_Abort_IT+0x1c0>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d022      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a22      	ldr	r2, [pc, #136]	@ (800bda8 <HAL_DMA_Abort_IT+0x1c4>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d01d      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a20      	ldr	r2, [pc, #128]	@ (800bdac <HAL_DMA_Abort_IT+0x1c8>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d018      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a1f      	ldr	r2, [pc, #124]	@ (800bdb0 <HAL_DMA_Abort_IT+0x1cc>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d013      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a1d      	ldr	r2, [pc, #116]	@ (800bdb4 <HAL_DMA_Abort_IT+0x1d0>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d00e      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a1c      	ldr	r2, [pc, #112]	@ (800bdb8 <HAL_DMA_Abort_IT+0x1d4>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d009      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a1a      	ldr	r2, [pc, #104]	@ (800bdbc <HAL_DMA_Abort_IT+0x1d8>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d004      	beq.n	800bd60 <HAL_DMA_Abort_IT+0x17c>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a19      	ldr	r2, [pc, #100]	@ (800bdc0 <HAL_DMA_Abort_IT+0x1dc>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d108      	bne.n	800bd72 <HAL_DMA_Abort_IT+0x18e>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0201 	bic.w	r2, r2, #1
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	e178      	b.n	800c064 <HAL_DMA_Abort_IT+0x480>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f022 0201 	bic.w	r2, r2, #1
 800bd80:	601a      	str	r2, [r3, #0]
 800bd82:	e16f      	b.n	800c064 <HAL_DMA_Abort_IT+0x480>
 800bd84:	40020010 	.word	0x40020010
 800bd88:	40020028 	.word	0x40020028
 800bd8c:	40020040 	.word	0x40020040
 800bd90:	40020058 	.word	0x40020058
 800bd94:	40020070 	.word	0x40020070
 800bd98:	40020088 	.word	0x40020088
 800bd9c:	400200a0 	.word	0x400200a0
 800bda0:	400200b8 	.word	0x400200b8
 800bda4:	40020410 	.word	0x40020410
 800bda8:	40020428 	.word	0x40020428
 800bdac:	40020440 	.word	0x40020440
 800bdb0:	40020458 	.word	0x40020458
 800bdb4:	40020470 	.word	0x40020470
 800bdb8:	40020488 	.word	0x40020488
 800bdbc:	400204a0 	.word	0x400204a0
 800bdc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 020e 	bic.w	r2, r2, #14
 800bdd2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a6c      	ldr	r2, [pc, #432]	@ (800bf8c <HAL_DMA_Abort_IT+0x3a8>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d04a      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a6b      	ldr	r2, [pc, #428]	@ (800bf90 <HAL_DMA_Abort_IT+0x3ac>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d045      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a69      	ldr	r2, [pc, #420]	@ (800bf94 <HAL_DMA_Abort_IT+0x3b0>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d040      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a68      	ldr	r2, [pc, #416]	@ (800bf98 <HAL_DMA_Abort_IT+0x3b4>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d03b      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a66      	ldr	r2, [pc, #408]	@ (800bf9c <HAL_DMA_Abort_IT+0x3b8>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d036      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a65      	ldr	r2, [pc, #404]	@ (800bfa0 <HAL_DMA_Abort_IT+0x3bc>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d031      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a63      	ldr	r2, [pc, #396]	@ (800bfa4 <HAL_DMA_Abort_IT+0x3c0>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d02c      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a62      	ldr	r2, [pc, #392]	@ (800bfa8 <HAL_DMA_Abort_IT+0x3c4>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d027      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a60      	ldr	r2, [pc, #384]	@ (800bfac <HAL_DMA_Abort_IT+0x3c8>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d022      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a5f      	ldr	r2, [pc, #380]	@ (800bfb0 <HAL_DMA_Abort_IT+0x3cc>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d01d      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a5d      	ldr	r2, [pc, #372]	@ (800bfb4 <HAL_DMA_Abort_IT+0x3d0>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d018      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a5c      	ldr	r2, [pc, #368]	@ (800bfb8 <HAL_DMA_Abort_IT+0x3d4>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d013      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a5a      	ldr	r2, [pc, #360]	@ (800bfbc <HAL_DMA_Abort_IT+0x3d8>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d00e      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a59      	ldr	r2, [pc, #356]	@ (800bfc0 <HAL_DMA_Abort_IT+0x3dc>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d009      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a57      	ldr	r2, [pc, #348]	@ (800bfc4 <HAL_DMA_Abort_IT+0x3e0>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d004      	beq.n	800be74 <HAL_DMA_Abort_IT+0x290>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a56      	ldr	r2, [pc, #344]	@ (800bfc8 <HAL_DMA_Abort_IT+0x3e4>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d108      	bne.n	800be86 <HAL_DMA_Abort_IT+0x2a2>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f022 0201 	bic.w	r2, r2, #1
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	e007      	b.n	800be96 <HAL_DMA_Abort_IT+0x2b2>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 0201 	bic.w	r2, r2, #1
 800be94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a3c      	ldr	r2, [pc, #240]	@ (800bf8c <HAL_DMA_Abort_IT+0x3a8>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d072      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a3a      	ldr	r2, [pc, #232]	@ (800bf90 <HAL_DMA_Abort_IT+0x3ac>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d06d      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a39      	ldr	r2, [pc, #228]	@ (800bf94 <HAL_DMA_Abort_IT+0x3b0>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d068      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a37      	ldr	r2, [pc, #220]	@ (800bf98 <HAL_DMA_Abort_IT+0x3b4>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d063      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a36      	ldr	r2, [pc, #216]	@ (800bf9c <HAL_DMA_Abort_IT+0x3b8>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d05e      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a34      	ldr	r2, [pc, #208]	@ (800bfa0 <HAL_DMA_Abort_IT+0x3bc>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d059      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a33      	ldr	r2, [pc, #204]	@ (800bfa4 <HAL_DMA_Abort_IT+0x3c0>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d054      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a31      	ldr	r2, [pc, #196]	@ (800bfa8 <HAL_DMA_Abort_IT+0x3c4>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d04f      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a30      	ldr	r2, [pc, #192]	@ (800bfac <HAL_DMA_Abort_IT+0x3c8>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d04a      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a2e      	ldr	r2, [pc, #184]	@ (800bfb0 <HAL_DMA_Abort_IT+0x3cc>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d045      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a2d      	ldr	r2, [pc, #180]	@ (800bfb4 <HAL_DMA_Abort_IT+0x3d0>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d040      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a2b      	ldr	r2, [pc, #172]	@ (800bfb8 <HAL_DMA_Abort_IT+0x3d4>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d03b      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a2a      	ldr	r2, [pc, #168]	@ (800bfbc <HAL_DMA_Abort_IT+0x3d8>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d036      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a28      	ldr	r2, [pc, #160]	@ (800bfc0 <HAL_DMA_Abort_IT+0x3dc>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d031      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a27      	ldr	r2, [pc, #156]	@ (800bfc4 <HAL_DMA_Abort_IT+0x3e0>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d02c      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a25      	ldr	r2, [pc, #148]	@ (800bfc8 <HAL_DMA_Abort_IT+0x3e4>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d027      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a24      	ldr	r2, [pc, #144]	@ (800bfcc <HAL_DMA_Abort_IT+0x3e8>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d022      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a22      	ldr	r2, [pc, #136]	@ (800bfd0 <HAL_DMA_Abort_IT+0x3ec>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d01d      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a21      	ldr	r2, [pc, #132]	@ (800bfd4 <HAL_DMA_Abort_IT+0x3f0>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d018      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a1f      	ldr	r2, [pc, #124]	@ (800bfd8 <HAL_DMA_Abort_IT+0x3f4>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d013      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a1e      	ldr	r2, [pc, #120]	@ (800bfdc <HAL_DMA_Abort_IT+0x3f8>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d00e      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a1c      	ldr	r2, [pc, #112]	@ (800bfe0 <HAL_DMA_Abort_IT+0x3fc>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d009      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a1b      	ldr	r2, [pc, #108]	@ (800bfe4 <HAL_DMA_Abort_IT+0x400>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d004      	beq.n	800bf86 <HAL_DMA_Abort_IT+0x3a2>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a19      	ldr	r2, [pc, #100]	@ (800bfe8 <HAL_DMA_Abort_IT+0x404>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d132      	bne.n	800bfec <HAL_DMA_Abort_IT+0x408>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e031      	b.n	800bfee <HAL_DMA_Abort_IT+0x40a>
 800bf8a:	bf00      	nop
 800bf8c:	40020010 	.word	0x40020010
 800bf90:	40020028 	.word	0x40020028
 800bf94:	40020040 	.word	0x40020040
 800bf98:	40020058 	.word	0x40020058
 800bf9c:	40020070 	.word	0x40020070
 800bfa0:	40020088 	.word	0x40020088
 800bfa4:	400200a0 	.word	0x400200a0
 800bfa8:	400200b8 	.word	0x400200b8
 800bfac:	40020410 	.word	0x40020410
 800bfb0:	40020428 	.word	0x40020428
 800bfb4:	40020440 	.word	0x40020440
 800bfb8:	40020458 	.word	0x40020458
 800bfbc:	40020470 	.word	0x40020470
 800bfc0:	40020488 	.word	0x40020488
 800bfc4:	400204a0 	.word	0x400204a0
 800bfc8:	400204b8 	.word	0x400204b8
 800bfcc:	58025408 	.word	0x58025408
 800bfd0:	5802541c 	.word	0x5802541c
 800bfd4:	58025430 	.word	0x58025430
 800bfd8:	58025444 	.word	0x58025444
 800bfdc:	58025458 	.word	0x58025458
 800bfe0:	5802546c 	.word	0x5802546c
 800bfe4:	58025480 	.word	0x58025480
 800bfe8:	58025494 	.word	0x58025494
 800bfec:	2300      	movs	r3, #0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d028      	beq.n	800c044 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c000:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c006:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c00c:	f003 031f 	and.w	r3, r3, #31
 800c010:	2201      	movs	r2, #1
 800c012:	409a      	lsls	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c020:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00c      	beq.n	800c044 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c038:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c042:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d003      	beq.n	800c064 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop

0800c070 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b08a      	sub	sp, #40	@ 0x28
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800c078:	2300      	movs	r3, #0
 800c07a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c07c:	4b67      	ldr	r3, [pc, #412]	@ (800c21c <HAL_DMA_IRQHandler+0x1ac>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a67      	ldr	r2, [pc, #412]	@ (800c220 <HAL_DMA_IRQHandler+0x1b0>)
 800c082:	fba2 2303 	umull	r2, r3, r2, r3
 800c086:	0a9b      	lsrs	r3, r3, #10
 800c088:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c08e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c094:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a5f      	ldr	r2, [pc, #380]	@ (800c224 <HAL_DMA_IRQHandler+0x1b4>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d04a      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a5d      	ldr	r2, [pc, #372]	@ (800c228 <HAL_DMA_IRQHandler+0x1b8>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d045      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a5c      	ldr	r2, [pc, #368]	@ (800c22c <HAL_DMA_IRQHandler+0x1bc>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d040      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a5a      	ldr	r2, [pc, #360]	@ (800c230 <HAL_DMA_IRQHandler+0x1c0>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d03b      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a59      	ldr	r2, [pc, #356]	@ (800c234 <HAL_DMA_IRQHandler+0x1c4>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d036      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a57      	ldr	r2, [pc, #348]	@ (800c238 <HAL_DMA_IRQHandler+0x1c8>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d031      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a56      	ldr	r2, [pc, #344]	@ (800c23c <HAL_DMA_IRQHandler+0x1cc>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d02c      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a54      	ldr	r2, [pc, #336]	@ (800c240 <HAL_DMA_IRQHandler+0x1d0>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d027      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a53      	ldr	r2, [pc, #332]	@ (800c244 <HAL_DMA_IRQHandler+0x1d4>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d022      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a51      	ldr	r2, [pc, #324]	@ (800c248 <HAL_DMA_IRQHandler+0x1d8>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d01d      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a50      	ldr	r2, [pc, #320]	@ (800c24c <HAL_DMA_IRQHandler+0x1dc>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d018      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a4e      	ldr	r2, [pc, #312]	@ (800c250 <HAL_DMA_IRQHandler+0x1e0>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d013      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a4d      	ldr	r2, [pc, #308]	@ (800c254 <HAL_DMA_IRQHandler+0x1e4>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d00e      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a4b      	ldr	r2, [pc, #300]	@ (800c258 <HAL_DMA_IRQHandler+0x1e8>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d009      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a4a      	ldr	r2, [pc, #296]	@ (800c25c <HAL_DMA_IRQHandler+0x1ec>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d004      	beq.n	800c142 <HAL_DMA_IRQHandler+0xd2>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a48      	ldr	r2, [pc, #288]	@ (800c260 <HAL_DMA_IRQHandler+0x1f0>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d101      	bne.n	800c146 <HAL_DMA_IRQHandler+0xd6>
 800c142:	2301      	movs	r3, #1
 800c144:	e000      	b.n	800c148 <HAL_DMA_IRQHandler+0xd8>
 800c146:	2300      	movs	r3, #0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 842b 	beq.w	800c9a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c152:	f003 031f 	and.w	r3, r3, #31
 800c156:	2208      	movs	r2, #8
 800c158:	409a      	lsls	r2, r3
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	4013      	ands	r3, r2
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 80a2 	beq.w	800c2a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a2e      	ldr	r2, [pc, #184]	@ (800c224 <HAL_DMA_IRQHandler+0x1b4>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d04a      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a2d      	ldr	r2, [pc, #180]	@ (800c228 <HAL_DMA_IRQHandler+0x1b8>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d045      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a2b      	ldr	r2, [pc, #172]	@ (800c22c <HAL_DMA_IRQHandler+0x1bc>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d040      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a2a      	ldr	r2, [pc, #168]	@ (800c230 <HAL_DMA_IRQHandler+0x1c0>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d03b      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a28      	ldr	r2, [pc, #160]	@ (800c234 <HAL_DMA_IRQHandler+0x1c4>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d036      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a27      	ldr	r2, [pc, #156]	@ (800c238 <HAL_DMA_IRQHandler+0x1c8>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d031      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a25      	ldr	r2, [pc, #148]	@ (800c23c <HAL_DMA_IRQHandler+0x1cc>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d02c      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a24      	ldr	r2, [pc, #144]	@ (800c240 <HAL_DMA_IRQHandler+0x1d0>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d027      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a22      	ldr	r2, [pc, #136]	@ (800c244 <HAL_DMA_IRQHandler+0x1d4>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d022      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a21      	ldr	r2, [pc, #132]	@ (800c248 <HAL_DMA_IRQHandler+0x1d8>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d01d      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a1f      	ldr	r2, [pc, #124]	@ (800c24c <HAL_DMA_IRQHandler+0x1dc>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d018      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c250 <HAL_DMA_IRQHandler+0x1e0>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d013      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a1c      	ldr	r2, [pc, #112]	@ (800c254 <HAL_DMA_IRQHandler+0x1e4>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d00e      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a1b      	ldr	r2, [pc, #108]	@ (800c258 <HAL_DMA_IRQHandler+0x1e8>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d009      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a19      	ldr	r2, [pc, #100]	@ (800c25c <HAL_DMA_IRQHandler+0x1ec>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d004      	beq.n	800c204 <HAL_DMA_IRQHandler+0x194>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a18      	ldr	r2, [pc, #96]	@ (800c260 <HAL_DMA_IRQHandler+0x1f0>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d12f      	bne.n	800c264 <HAL_DMA_IRQHandler+0x1f4>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0304 	and.w	r3, r3, #4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bf14      	ite	ne
 800c212:	2301      	movne	r3, #1
 800c214:	2300      	moveq	r3, #0
 800c216:	b2db      	uxtb	r3, r3
 800c218:	e02e      	b.n	800c278 <HAL_DMA_IRQHandler+0x208>
 800c21a:	bf00      	nop
 800c21c:	24000004 	.word	0x24000004
 800c220:	1b4e81b5 	.word	0x1b4e81b5
 800c224:	40020010 	.word	0x40020010
 800c228:	40020028 	.word	0x40020028
 800c22c:	40020040 	.word	0x40020040
 800c230:	40020058 	.word	0x40020058
 800c234:	40020070 	.word	0x40020070
 800c238:	40020088 	.word	0x40020088
 800c23c:	400200a0 	.word	0x400200a0
 800c240:	400200b8 	.word	0x400200b8
 800c244:	40020410 	.word	0x40020410
 800c248:	40020428 	.word	0x40020428
 800c24c:	40020440 	.word	0x40020440
 800c250:	40020458 	.word	0x40020458
 800c254:	40020470 	.word	0x40020470
 800c258:	40020488 	.word	0x40020488
 800c25c:	400204a0 	.word	0x400204a0
 800c260:	400204b8 	.word	0x400204b8
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0308 	and.w	r3, r3, #8
 800c26e:	2b00      	cmp	r3, #0
 800c270:	bf14      	ite	ne
 800c272:	2301      	movne	r3, #1
 800c274:	2300      	moveq	r3, #0
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d015      	beq.n	800c2a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f022 0204 	bic.w	r2, r2, #4
 800c28a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c290:	f003 031f 	and.w	r3, r3, #31
 800c294:	2208      	movs	r2, #8
 800c296:	409a      	lsls	r2, r3
 800c298:	6a3b      	ldr	r3, [r7, #32]
 800c29a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2a0:	f043 0201 	orr.w	r2, r3, #1
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2ac:	f003 031f 	and.w	r3, r3, #31
 800c2b0:	69ba      	ldr	r2, [r7, #24]
 800c2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d06e      	beq.n	800c39c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a69      	ldr	r2, [pc, #420]	@ (800c468 <HAL_DMA_IRQHandler+0x3f8>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d04a      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a67      	ldr	r2, [pc, #412]	@ (800c46c <HAL_DMA_IRQHandler+0x3fc>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d045      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a66      	ldr	r2, [pc, #408]	@ (800c470 <HAL_DMA_IRQHandler+0x400>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d040      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a64      	ldr	r2, [pc, #400]	@ (800c474 <HAL_DMA_IRQHandler+0x404>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d03b      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a63      	ldr	r2, [pc, #396]	@ (800c478 <HAL_DMA_IRQHandler+0x408>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d036      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a61      	ldr	r2, [pc, #388]	@ (800c47c <HAL_DMA_IRQHandler+0x40c>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d031      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a60      	ldr	r2, [pc, #384]	@ (800c480 <HAL_DMA_IRQHandler+0x410>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d02c      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a5e      	ldr	r2, [pc, #376]	@ (800c484 <HAL_DMA_IRQHandler+0x414>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d027      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a5d      	ldr	r2, [pc, #372]	@ (800c488 <HAL_DMA_IRQHandler+0x418>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d022      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a5b      	ldr	r2, [pc, #364]	@ (800c48c <HAL_DMA_IRQHandler+0x41c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d01d      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a5a      	ldr	r2, [pc, #360]	@ (800c490 <HAL_DMA_IRQHandler+0x420>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d018      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a58      	ldr	r2, [pc, #352]	@ (800c494 <HAL_DMA_IRQHandler+0x424>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d013      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a57      	ldr	r2, [pc, #348]	@ (800c498 <HAL_DMA_IRQHandler+0x428>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d00e      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a55      	ldr	r2, [pc, #340]	@ (800c49c <HAL_DMA_IRQHandler+0x42c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d009      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a54      	ldr	r2, [pc, #336]	@ (800c4a0 <HAL_DMA_IRQHandler+0x430>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d004      	beq.n	800c35e <HAL_DMA_IRQHandler+0x2ee>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a52      	ldr	r2, [pc, #328]	@ (800c4a4 <HAL_DMA_IRQHandler+0x434>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d10a      	bne.n	800c374 <HAL_DMA_IRQHandler+0x304>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bf14      	ite	ne
 800c36c:	2301      	movne	r3, #1
 800c36e:	2300      	moveq	r3, #0
 800c370:	b2db      	uxtb	r3, r3
 800c372:	e003      	b.n	800c37c <HAL_DMA_IRQHandler+0x30c>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2300      	movs	r3, #0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00d      	beq.n	800c39c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c384:	f003 031f 	and.w	r3, r3, #31
 800c388:	2201      	movs	r2, #1
 800c38a:	409a      	lsls	r2, r3
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c394:	f043 0202 	orr.w	r2, r3, #2
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3a0:	f003 031f 	and.w	r3, r3, #31
 800c3a4:	2204      	movs	r2, #4
 800c3a6:	409a      	lsls	r2, r3
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 808f 	beq.w	800c4d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a2c      	ldr	r2, [pc, #176]	@ (800c468 <HAL_DMA_IRQHandler+0x3f8>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d04a      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a2a      	ldr	r2, [pc, #168]	@ (800c46c <HAL_DMA_IRQHandler+0x3fc>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d045      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a29      	ldr	r2, [pc, #164]	@ (800c470 <HAL_DMA_IRQHandler+0x400>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d040      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a27      	ldr	r2, [pc, #156]	@ (800c474 <HAL_DMA_IRQHandler+0x404>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d03b      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a26      	ldr	r2, [pc, #152]	@ (800c478 <HAL_DMA_IRQHandler+0x408>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d036      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a24      	ldr	r2, [pc, #144]	@ (800c47c <HAL_DMA_IRQHandler+0x40c>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d031      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a23      	ldr	r2, [pc, #140]	@ (800c480 <HAL_DMA_IRQHandler+0x410>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d02c      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a21      	ldr	r2, [pc, #132]	@ (800c484 <HAL_DMA_IRQHandler+0x414>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d027      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a20      	ldr	r2, [pc, #128]	@ (800c488 <HAL_DMA_IRQHandler+0x418>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d022      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a1e      	ldr	r2, [pc, #120]	@ (800c48c <HAL_DMA_IRQHandler+0x41c>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d01d      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a1d      	ldr	r2, [pc, #116]	@ (800c490 <HAL_DMA_IRQHandler+0x420>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d018      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a1b      	ldr	r2, [pc, #108]	@ (800c494 <HAL_DMA_IRQHandler+0x424>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d013      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a1a      	ldr	r2, [pc, #104]	@ (800c498 <HAL_DMA_IRQHandler+0x428>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00e      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a18      	ldr	r2, [pc, #96]	@ (800c49c <HAL_DMA_IRQHandler+0x42c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d009      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a17      	ldr	r2, [pc, #92]	@ (800c4a0 <HAL_DMA_IRQHandler+0x430>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d004      	beq.n	800c452 <HAL_DMA_IRQHandler+0x3e2>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a15      	ldr	r2, [pc, #84]	@ (800c4a4 <HAL_DMA_IRQHandler+0x434>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d12a      	bne.n	800c4a8 <HAL_DMA_IRQHandler+0x438>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0302 	and.w	r3, r3, #2
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	bf14      	ite	ne
 800c460:	2301      	movne	r3, #1
 800c462:	2300      	moveq	r3, #0
 800c464:	b2db      	uxtb	r3, r3
 800c466:	e023      	b.n	800c4b0 <HAL_DMA_IRQHandler+0x440>
 800c468:	40020010 	.word	0x40020010
 800c46c:	40020028 	.word	0x40020028
 800c470:	40020040 	.word	0x40020040
 800c474:	40020058 	.word	0x40020058
 800c478:	40020070 	.word	0x40020070
 800c47c:	40020088 	.word	0x40020088
 800c480:	400200a0 	.word	0x400200a0
 800c484:	400200b8 	.word	0x400200b8
 800c488:	40020410 	.word	0x40020410
 800c48c:	40020428 	.word	0x40020428
 800c490:	40020440 	.word	0x40020440
 800c494:	40020458 	.word	0x40020458
 800c498:	40020470 	.word	0x40020470
 800c49c:	40020488 	.word	0x40020488
 800c4a0:	400204a0 	.word	0x400204a0
 800c4a4:	400204b8 	.word	0x400204b8
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00d      	beq.n	800c4d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4b8:	f003 031f 	and.w	r3, r3, #31
 800c4bc:	2204      	movs	r2, #4
 800c4be:	409a      	lsls	r2, r3
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c8:	f043 0204 	orr.w	r2, r3, #4
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4d4:	f003 031f 	and.w	r3, r3, #31
 800c4d8:	2210      	movs	r2, #16
 800c4da:	409a      	lsls	r2, r3
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	4013      	ands	r3, r2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 80a6 	beq.w	800c632 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a85      	ldr	r2, [pc, #532]	@ (800c700 <HAL_DMA_IRQHandler+0x690>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d04a      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a83      	ldr	r2, [pc, #524]	@ (800c704 <HAL_DMA_IRQHandler+0x694>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d045      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a82      	ldr	r2, [pc, #520]	@ (800c708 <HAL_DMA_IRQHandler+0x698>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d040      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a80      	ldr	r2, [pc, #512]	@ (800c70c <HAL_DMA_IRQHandler+0x69c>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d03b      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a7f      	ldr	r2, [pc, #508]	@ (800c710 <HAL_DMA_IRQHandler+0x6a0>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d036      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a7d      	ldr	r2, [pc, #500]	@ (800c714 <HAL_DMA_IRQHandler+0x6a4>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d031      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a7c      	ldr	r2, [pc, #496]	@ (800c718 <HAL_DMA_IRQHandler+0x6a8>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d02c      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a7a      	ldr	r2, [pc, #488]	@ (800c71c <HAL_DMA_IRQHandler+0x6ac>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d027      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a79      	ldr	r2, [pc, #484]	@ (800c720 <HAL_DMA_IRQHandler+0x6b0>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d022      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a77      	ldr	r2, [pc, #476]	@ (800c724 <HAL_DMA_IRQHandler+0x6b4>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d01d      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a76      	ldr	r2, [pc, #472]	@ (800c728 <HAL_DMA_IRQHandler+0x6b8>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d018      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a74      	ldr	r2, [pc, #464]	@ (800c72c <HAL_DMA_IRQHandler+0x6bc>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d013      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a73      	ldr	r2, [pc, #460]	@ (800c730 <HAL_DMA_IRQHandler+0x6c0>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d00e      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a71      	ldr	r2, [pc, #452]	@ (800c734 <HAL_DMA_IRQHandler+0x6c4>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d009      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a70      	ldr	r2, [pc, #448]	@ (800c738 <HAL_DMA_IRQHandler+0x6c8>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d004      	beq.n	800c586 <HAL_DMA_IRQHandler+0x516>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a6e      	ldr	r2, [pc, #440]	@ (800c73c <HAL_DMA_IRQHandler+0x6cc>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d10a      	bne.n	800c59c <HAL_DMA_IRQHandler+0x52c>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 0308 	and.w	r3, r3, #8
 800c590:	2b00      	cmp	r3, #0
 800c592:	bf14      	ite	ne
 800c594:	2301      	movne	r3, #1
 800c596:	2300      	moveq	r3, #0
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	e009      	b.n	800c5b0 <HAL_DMA_IRQHandler+0x540>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 0304 	and.w	r3, r3, #4
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	bf14      	ite	ne
 800c5aa:	2301      	movne	r3, #1
 800c5ac:	2300      	moveq	r3, #0
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d03e      	beq.n	800c632 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5b8:	f003 031f 	and.w	r3, r3, #31
 800c5bc:	2210      	movs	r2, #16
 800c5be:	409a      	lsls	r2, r3
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d018      	beq.n	800c604 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d108      	bne.n	800c5f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d024      	beq.n	800c632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	4798      	blx	r3
 800c5f0:	e01f      	b.n	800c632 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d01b      	beq.n	800c632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	4798      	blx	r3
 800c602:	e016      	b.n	800c632 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d107      	bne.n	800c622 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f022 0208 	bic.w	r2, r2, #8
 800c620:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c636:	f003 031f 	and.w	r3, r3, #31
 800c63a:	2220      	movs	r2, #32
 800c63c:	409a      	lsls	r2, r3
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	4013      	ands	r3, r2
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 8110 	beq.w	800c868 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a2c      	ldr	r2, [pc, #176]	@ (800c700 <HAL_DMA_IRQHandler+0x690>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d04a      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a2b      	ldr	r2, [pc, #172]	@ (800c704 <HAL_DMA_IRQHandler+0x694>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d045      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a29      	ldr	r2, [pc, #164]	@ (800c708 <HAL_DMA_IRQHandler+0x698>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d040      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a28      	ldr	r2, [pc, #160]	@ (800c70c <HAL_DMA_IRQHandler+0x69c>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d03b      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a26      	ldr	r2, [pc, #152]	@ (800c710 <HAL_DMA_IRQHandler+0x6a0>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d036      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a25      	ldr	r2, [pc, #148]	@ (800c714 <HAL_DMA_IRQHandler+0x6a4>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d031      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a23      	ldr	r2, [pc, #140]	@ (800c718 <HAL_DMA_IRQHandler+0x6a8>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d02c      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a22      	ldr	r2, [pc, #136]	@ (800c71c <HAL_DMA_IRQHandler+0x6ac>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d027      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a20      	ldr	r2, [pc, #128]	@ (800c720 <HAL_DMA_IRQHandler+0x6b0>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d022      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a1f      	ldr	r2, [pc, #124]	@ (800c724 <HAL_DMA_IRQHandler+0x6b4>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d01d      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c728 <HAL_DMA_IRQHandler+0x6b8>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d018      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a1c      	ldr	r2, [pc, #112]	@ (800c72c <HAL_DMA_IRQHandler+0x6bc>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d013      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a1a      	ldr	r2, [pc, #104]	@ (800c730 <HAL_DMA_IRQHandler+0x6c0>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d00e      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a19      	ldr	r2, [pc, #100]	@ (800c734 <HAL_DMA_IRQHandler+0x6c4>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d009      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a17      	ldr	r2, [pc, #92]	@ (800c738 <HAL_DMA_IRQHandler+0x6c8>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d004      	beq.n	800c6e8 <HAL_DMA_IRQHandler+0x678>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a16      	ldr	r2, [pc, #88]	@ (800c73c <HAL_DMA_IRQHandler+0x6cc>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d12b      	bne.n	800c740 <HAL_DMA_IRQHandler+0x6d0>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 0310 	and.w	r3, r3, #16
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	bf14      	ite	ne
 800c6f6:	2301      	movne	r3, #1
 800c6f8:	2300      	moveq	r3, #0
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	e02a      	b.n	800c754 <HAL_DMA_IRQHandler+0x6e4>
 800c6fe:	bf00      	nop
 800c700:	40020010 	.word	0x40020010
 800c704:	40020028 	.word	0x40020028
 800c708:	40020040 	.word	0x40020040
 800c70c:	40020058 	.word	0x40020058
 800c710:	40020070 	.word	0x40020070
 800c714:	40020088 	.word	0x40020088
 800c718:	400200a0 	.word	0x400200a0
 800c71c:	400200b8 	.word	0x400200b8
 800c720:	40020410 	.word	0x40020410
 800c724:	40020428 	.word	0x40020428
 800c728:	40020440 	.word	0x40020440
 800c72c:	40020458 	.word	0x40020458
 800c730:	40020470 	.word	0x40020470
 800c734:	40020488 	.word	0x40020488
 800c738:	400204a0 	.word	0x400204a0
 800c73c:	400204b8 	.word	0x400204b8
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	bf14      	ite	ne
 800c74e:	2301      	movne	r3, #1
 800c750:	2300      	moveq	r3, #0
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 8087 	beq.w	800c868 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c75e:	f003 031f 	and.w	r3, r3, #31
 800c762:	2220      	movs	r2, #32
 800c764:	409a      	lsls	r2, r3
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b04      	cmp	r3, #4
 800c774:	d139      	bne.n	800c7ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f022 0216 	bic.w	r2, r2, #22
 800c784:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	695a      	ldr	r2, [r3, #20]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c794:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d103      	bne.n	800c7a6 <HAL_DMA_IRQHandler+0x736>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d007      	beq.n	800c7b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f022 0208 	bic.w	r2, r2, #8
 800c7b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7ba:	f003 031f 	and.w	r3, r3, #31
 800c7be:	223f      	movs	r2, #63	@ 0x3f
 800c7c0:	409a      	lsls	r2, r3
 800c7c2:	6a3b      	ldr	r3, [r7, #32]
 800c7c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 834a 	beq.w	800ce74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	4798      	blx	r3
          }
          return;
 800c7e8:	e344      	b.n	800ce74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d018      	beq.n	800c82a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d108      	bne.n	800c818 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d02c      	beq.n	800c868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	4798      	blx	r3
 800c816:	e027      	b.n	800c868 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d023      	beq.n	800c868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	4798      	blx	r3
 800c828:	e01e      	b.n	800c868 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10f      	bne.n	800c858 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f022 0210 	bic.w	r2, r2, #16
 800c846:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d003      	beq.n	800c868 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 8306 	beq.w	800ce7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 8088 	beq.w	800c990 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2204      	movs	r2, #4
 800c884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a7a      	ldr	r2, [pc, #488]	@ (800ca78 <HAL_DMA_IRQHandler+0xa08>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d04a      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a79      	ldr	r2, [pc, #484]	@ (800ca7c <HAL_DMA_IRQHandler+0xa0c>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d045      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a77      	ldr	r2, [pc, #476]	@ (800ca80 <HAL_DMA_IRQHandler+0xa10>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d040      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a76      	ldr	r2, [pc, #472]	@ (800ca84 <HAL_DMA_IRQHandler+0xa14>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d03b      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a74      	ldr	r2, [pc, #464]	@ (800ca88 <HAL_DMA_IRQHandler+0xa18>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d036      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a73      	ldr	r2, [pc, #460]	@ (800ca8c <HAL_DMA_IRQHandler+0xa1c>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d031      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a71      	ldr	r2, [pc, #452]	@ (800ca90 <HAL_DMA_IRQHandler+0xa20>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d02c      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a70      	ldr	r2, [pc, #448]	@ (800ca94 <HAL_DMA_IRQHandler+0xa24>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d027      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a6e      	ldr	r2, [pc, #440]	@ (800ca98 <HAL_DMA_IRQHandler+0xa28>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d022      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a6d      	ldr	r2, [pc, #436]	@ (800ca9c <HAL_DMA_IRQHandler+0xa2c>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d01d      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a6b      	ldr	r2, [pc, #428]	@ (800caa0 <HAL_DMA_IRQHandler+0xa30>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d018      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a6a      	ldr	r2, [pc, #424]	@ (800caa4 <HAL_DMA_IRQHandler+0xa34>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d013      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a68      	ldr	r2, [pc, #416]	@ (800caa8 <HAL_DMA_IRQHandler+0xa38>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d00e      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a67      	ldr	r2, [pc, #412]	@ (800caac <HAL_DMA_IRQHandler+0xa3c>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d009      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a65      	ldr	r2, [pc, #404]	@ (800cab0 <HAL_DMA_IRQHandler+0xa40>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d004      	beq.n	800c928 <HAL_DMA_IRQHandler+0x8b8>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a64      	ldr	r2, [pc, #400]	@ (800cab4 <HAL_DMA_IRQHandler+0xa44>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d108      	bne.n	800c93a <HAL_DMA_IRQHandler+0x8ca>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f022 0201 	bic.w	r2, r2, #1
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	e007      	b.n	800c94a <HAL_DMA_IRQHandler+0x8da>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f022 0201 	bic.w	r2, r2, #1
 800c948:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3301      	adds	r3, #1
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c952:	429a      	cmp	r2, r3
 800c954:	d307      	bcc.n	800c966 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1f2      	bne.n	800c94a <HAL_DMA_IRQHandler+0x8da>
 800c964:	e000      	b.n	800c968 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800c966:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	2b00      	cmp	r3, #0
 800c974:	d004      	beq.n	800c980 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2203      	movs	r2, #3
 800c97a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800c97e:	e003      	b.n	800c988 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 8272 	beq.w	800ce7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	4798      	blx	r3
 800c9a2:	e26c      	b.n	800ce7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a43      	ldr	r2, [pc, #268]	@ (800cab8 <HAL_DMA_IRQHandler+0xa48>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d022      	beq.n	800c9f4 <HAL_DMA_IRQHandler+0x984>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a42      	ldr	r2, [pc, #264]	@ (800cabc <HAL_DMA_IRQHandler+0xa4c>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d01d      	beq.n	800c9f4 <HAL_DMA_IRQHandler+0x984>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a40      	ldr	r2, [pc, #256]	@ (800cac0 <HAL_DMA_IRQHandler+0xa50>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d018      	beq.n	800c9f4 <HAL_DMA_IRQHandler+0x984>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a3f      	ldr	r2, [pc, #252]	@ (800cac4 <HAL_DMA_IRQHandler+0xa54>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d013      	beq.n	800c9f4 <HAL_DMA_IRQHandler+0x984>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a3d      	ldr	r2, [pc, #244]	@ (800cac8 <HAL_DMA_IRQHandler+0xa58>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d00e      	beq.n	800c9f4 <HAL_DMA_IRQHandler+0x984>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a3c      	ldr	r2, [pc, #240]	@ (800cacc <HAL_DMA_IRQHandler+0xa5c>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d009      	beq.n	800c9f4 <HAL_DMA_IRQHandler+0x984>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a3a      	ldr	r2, [pc, #232]	@ (800cad0 <HAL_DMA_IRQHandler+0xa60>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d004      	beq.n	800c9f4 <HAL_DMA_IRQHandler+0x984>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a39      	ldr	r2, [pc, #228]	@ (800cad4 <HAL_DMA_IRQHandler+0xa64>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d101      	bne.n	800c9f8 <HAL_DMA_IRQHandler+0x988>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e000      	b.n	800c9fa <HAL_DMA_IRQHandler+0x98a>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 823f 	beq.w	800ce7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca0c:	f003 031f 	and.w	r3, r3, #31
 800ca10:	2204      	movs	r2, #4
 800ca12:	409a      	lsls	r2, r3
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	4013      	ands	r3, r2
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 80cd 	beq.w	800cbb8 <HAL_DMA_IRQHandler+0xb48>
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	f003 0304 	and.w	r3, r3, #4
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 80c7 	beq.w	800cbb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca2e:	f003 031f 	and.w	r3, r3, #31
 800ca32:	2204      	movs	r2, #4
 800ca34:	409a      	lsls	r2, r3
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d049      	beq.n	800cad8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d109      	bne.n	800ca62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 8210 	beq.w	800ce78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ca60:	e20a      	b.n	800ce78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 8206 	beq.w	800ce78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ca74:	e200      	b.n	800ce78 <HAL_DMA_IRQHandler+0xe08>
 800ca76:	bf00      	nop
 800ca78:	40020010 	.word	0x40020010
 800ca7c:	40020028 	.word	0x40020028
 800ca80:	40020040 	.word	0x40020040
 800ca84:	40020058 	.word	0x40020058
 800ca88:	40020070 	.word	0x40020070
 800ca8c:	40020088 	.word	0x40020088
 800ca90:	400200a0 	.word	0x400200a0
 800ca94:	400200b8 	.word	0x400200b8
 800ca98:	40020410 	.word	0x40020410
 800ca9c:	40020428 	.word	0x40020428
 800caa0:	40020440 	.word	0x40020440
 800caa4:	40020458 	.word	0x40020458
 800caa8:	40020470 	.word	0x40020470
 800caac:	40020488 	.word	0x40020488
 800cab0:	400204a0 	.word	0x400204a0
 800cab4:	400204b8 	.word	0x400204b8
 800cab8:	58025408 	.word	0x58025408
 800cabc:	5802541c 	.word	0x5802541c
 800cac0:	58025430 	.word	0x58025430
 800cac4:	58025444 	.word	0x58025444
 800cac8:	58025458 	.word	0x58025458
 800cacc:	5802546c 	.word	0x5802546c
 800cad0:	58025480 	.word	0x58025480
 800cad4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	f003 0320 	and.w	r3, r3, #32
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d160      	bne.n	800cba4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a7f      	ldr	r2, [pc, #508]	@ (800cce4 <HAL_DMA_IRQHandler+0xc74>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d04a      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a7d      	ldr	r2, [pc, #500]	@ (800cce8 <HAL_DMA_IRQHandler+0xc78>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d045      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a7c      	ldr	r2, [pc, #496]	@ (800ccec <HAL_DMA_IRQHandler+0xc7c>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d040      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a7a      	ldr	r2, [pc, #488]	@ (800ccf0 <HAL_DMA_IRQHandler+0xc80>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d03b      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a79      	ldr	r2, [pc, #484]	@ (800ccf4 <HAL_DMA_IRQHandler+0xc84>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d036      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a77      	ldr	r2, [pc, #476]	@ (800ccf8 <HAL_DMA_IRQHandler+0xc88>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d031      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a76      	ldr	r2, [pc, #472]	@ (800ccfc <HAL_DMA_IRQHandler+0xc8c>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d02c      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a74      	ldr	r2, [pc, #464]	@ (800cd00 <HAL_DMA_IRQHandler+0xc90>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d027      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a73      	ldr	r2, [pc, #460]	@ (800cd04 <HAL_DMA_IRQHandler+0xc94>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d022      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a71      	ldr	r2, [pc, #452]	@ (800cd08 <HAL_DMA_IRQHandler+0xc98>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d01d      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a70      	ldr	r2, [pc, #448]	@ (800cd0c <HAL_DMA_IRQHandler+0xc9c>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d018      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a6e      	ldr	r2, [pc, #440]	@ (800cd10 <HAL_DMA_IRQHandler+0xca0>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d013      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a6d      	ldr	r2, [pc, #436]	@ (800cd14 <HAL_DMA_IRQHandler+0xca4>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d00e      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a6b      	ldr	r2, [pc, #428]	@ (800cd18 <HAL_DMA_IRQHandler+0xca8>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d009      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a6a      	ldr	r2, [pc, #424]	@ (800cd1c <HAL_DMA_IRQHandler+0xcac>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d004      	beq.n	800cb82 <HAL_DMA_IRQHandler+0xb12>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a68      	ldr	r2, [pc, #416]	@ (800cd20 <HAL_DMA_IRQHandler+0xcb0>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d108      	bne.n	800cb94 <HAL_DMA_IRQHandler+0xb24>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f022 0208 	bic.w	r2, r2, #8
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	e007      	b.n	800cba4 <HAL_DMA_IRQHandler+0xb34>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f022 0204 	bic.w	r2, r2, #4
 800cba2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 8165 	beq.w	800ce78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cbb6:	e15f      	b.n	800ce78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbbc:	f003 031f 	and.w	r3, r3, #31
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	409a      	lsls	r2, r3
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f000 80c5 	beq.w	800cd58 <HAL_DMA_IRQHandler+0xce8>
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f003 0302 	and.w	r3, r3, #2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 80bf 	beq.w	800cd58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbde:	f003 031f 	and.w	r3, r3, #31
 800cbe2:	2202      	movs	r2, #2
 800cbe4:	409a      	lsls	r2, r3
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d018      	beq.n	800cc26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d109      	bne.n	800cc12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f000 813a 	beq.w	800ce7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cc10:	e134      	b.n	800ce7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f000 8130 	beq.w	800ce7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cc24:	e12a      	b.n	800ce7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	f003 0320 	and.w	r3, r3, #32
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f040 8089 	bne.w	800cd44 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a2b      	ldr	r2, [pc, #172]	@ (800cce4 <HAL_DMA_IRQHandler+0xc74>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d04a      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a29      	ldr	r2, [pc, #164]	@ (800cce8 <HAL_DMA_IRQHandler+0xc78>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d045      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a28      	ldr	r2, [pc, #160]	@ (800ccec <HAL_DMA_IRQHandler+0xc7c>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d040      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a26      	ldr	r2, [pc, #152]	@ (800ccf0 <HAL_DMA_IRQHandler+0xc80>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d03b      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a25      	ldr	r2, [pc, #148]	@ (800ccf4 <HAL_DMA_IRQHandler+0xc84>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d036      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a23      	ldr	r2, [pc, #140]	@ (800ccf8 <HAL_DMA_IRQHandler+0xc88>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d031      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a22      	ldr	r2, [pc, #136]	@ (800ccfc <HAL_DMA_IRQHandler+0xc8c>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d02c      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a20      	ldr	r2, [pc, #128]	@ (800cd00 <HAL_DMA_IRQHandler+0xc90>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d027      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a1f      	ldr	r2, [pc, #124]	@ (800cd04 <HAL_DMA_IRQHandler+0xc94>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d022      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a1d      	ldr	r2, [pc, #116]	@ (800cd08 <HAL_DMA_IRQHandler+0xc98>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d01d      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a1c      	ldr	r2, [pc, #112]	@ (800cd0c <HAL_DMA_IRQHandler+0xc9c>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d018      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a1a      	ldr	r2, [pc, #104]	@ (800cd10 <HAL_DMA_IRQHandler+0xca0>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d013      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a19      	ldr	r2, [pc, #100]	@ (800cd14 <HAL_DMA_IRQHandler+0xca4>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d00e      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a17      	ldr	r2, [pc, #92]	@ (800cd18 <HAL_DMA_IRQHandler+0xca8>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d009      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a16      	ldr	r2, [pc, #88]	@ (800cd1c <HAL_DMA_IRQHandler+0xcac>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d004      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0xc62>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a14      	ldr	r2, [pc, #80]	@ (800cd20 <HAL_DMA_IRQHandler+0xcb0>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d128      	bne.n	800cd24 <HAL_DMA_IRQHandler+0xcb4>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f022 0214 	bic.w	r2, r2, #20
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	e027      	b.n	800cd34 <HAL_DMA_IRQHandler+0xcc4>
 800cce4:	40020010 	.word	0x40020010
 800cce8:	40020028 	.word	0x40020028
 800ccec:	40020040 	.word	0x40020040
 800ccf0:	40020058 	.word	0x40020058
 800ccf4:	40020070 	.word	0x40020070
 800ccf8:	40020088 	.word	0x40020088
 800ccfc:	400200a0 	.word	0x400200a0
 800cd00:	400200b8 	.word	0x400200b8
 800cd04:	40020410 	.word	0x40020410
 800cd08:	40020428 	.word	0x40020428
 800cd0c:	40020440 	.word	0x40020440
 800cd10:	40020458 	.word	0x40020458
 800cd14:	40020470 	.word	0x40020470
 800cd18:	40020488 	.word	0x40020488
 800cd1c:	400204a0 	.word	0x400204a0
 800cd20:	400204b8 	.word	0x400204b8
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f022 020a 	bic.w	r2, r2, #10
 800cd32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 8097 	beq.w	800ce7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cd56:	e091      	b.n	800ce7c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd5c:	f003 031f 	and.w	r3, r3, #31
 800cd60:	2208      	movs	r2, #8
 800cd62:	409a      	lsls	r2, r3
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	4013      	ands	r3, r2
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 8088 	beq.w	800ce7e <HAL_DMA_IRQHandler+0xe0e>
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	f003 0308 	and.w	r3, r3, #8
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f000 8082 	beq.w	800ce7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a41      	ldr	r2, [pc, #260]	@ (800ce84 <HAL_DMA_IRQHandler+0xe14>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d04a      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a3f      	ldr	r2, [pc, #252]	@ (800ce88 <HAL_DMA_IRQHandler+0xe18>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d045      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a3e      	ldr	r2, [pc, #248]	@ (800ce8c <HAL_DMA_IRQHandler+0xe1c>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d040      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a3c      	ldr	r2, [pc, #240]	@ (800ce90 <HAL_DMA_IRQHandler+0xe20>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d03b      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a3b      	ldr	r2, [pc, #236]	@ (800ce94 <HAL_DMA_IRQHandler+0xe24>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d036      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a39      	ldr	r2, [pc, #228]	@ (800ce98 <HAL_DMA_IRQHandler+0xe28>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d031      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a38      	ldr	r2, [pc, #224]	@ (800ce9c <HAL_DMA_IRQHandler+0xe2c>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d02c      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a36      	ldr	r2, [pc, #216]	@ (800cea0 <HAL_DMA_IRQHandler+0xe30>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d027      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a35      	ldr	r2, [pc, #212]	@ (800cea4 <HAL_DMA_IRQHandler+0xe34>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d022      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a33      	ldr	r2, [pc, #204]	@ (800cea8 <HAL_DMA_IRQHandler+0xe38>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d01d      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a32      	ldr	r2, [pc, #200]	@ (800ceac <HAL_DMA_IRQHandler+0xe3c>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d018      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a30      	ldr	r2, [pc, #192]	@ (800ceb0 <HAL_DMA_IRQHandler+0xe40>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d013      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a2f      	ldr	r2, [pc, #188]	@ (800ceb4 <HAL_DMA_IRQHandler+0xe44>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d00e      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a2d      	ldr	r2, [pc, #180]	@ (800ceb8 <HAL_DMA_IRQHandler+0xe48>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d009      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a2c      	ldr	r2, [pc, #176]	@ (800cebc <HAL_DMA_IRQHandler+0xe4c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d004      	beq.n	800ce1a <HAL_DMA_IRQHandler+0xdaa>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a2a      	ldr	r2, [pc, #168]	@ (800cec0 <HAL_DMA_IRQHandler+0xe50>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d108      	bne.n	800ce2c <HAL_DMA_IRQHandler+0xdbc>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f022 021c 	bic.w	r2, r2, #28
 800ce28:	601a      	str	r2, [r3, #0]
 800ce2a:	e007      	b.n	800ce3c <HAL_DMA_IRQHandler+0xdcc>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f022 020e 	bic.w	r2, r2, #14
 800ce3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce40:	f003 031f 	and.w	r3, r3, #31
 800ce44:	2201      	movs	r2, #1
 800ce46:	409a      	lsls	r2, r3
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d009      	beq.n	800ce7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	4798      	blx	r3
 800ce72:	e004      	b.n	800ce7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ce74:	bf00      	nop
 800ce76:	e002      	b.n	800ce7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ce78:	bf00      	nop
 800ce7a:	e000      	b.n	800ce7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ce7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ce7e:	3728      	adds	r7, #40	@ 0x28
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	40020010 	.word	0x40020010
 800ce88:	40020028 	.word	0x40020028
 800ce8c:	40020040 	.word	0x40020040
 800ce90:	40020058 	.word	0x40020058
 800ce94:	40020070 	.word	0x40020070
 800ce98:	40020088 	.word	0x40020088
 800ce9c:	400200a0 	.word	0x400200a0
 800cea0:	400200b8 	.word	0x400200b8
 800cea4:	40020410 	.word	0x40020410
 800cea8:	40020428 	.word	0x40020428
 800ceac:	40020440 	.word	0x40020440
 800ceb0:	40020458 	.word	0x40020458
 800ceb4:	40020470 	.word	0x40020470
 800ceb8:	40020488 	.word	0x40020488
 800cebc:	400204a0 	.word	0x400204a0
 800cec0:	400204b8 	.word	0x400204b8

0800cec4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ced2:	b2db      	uxtb	r3, r3
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf0a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf10:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a7f      	ldr	r2, [pc, #508]	@ (800d114 <DMA_SetConfig+0x21c>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d072      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a7d      	ldr	r2, [pc, #500]	@ (800d118 <DMA_SetConfig+0x220>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d06d      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a7c      	ldr	r2, [pc, #496]	@ (800d11c <DMA_SetConfig+0x224>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d068      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a7a      	ldr	r2, [pc, #488]	@ (800d120 <DMA_SetConfig+0x228>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d063      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a79      	ldr	r2, [pc, #484]	@ (800d124 <DMA_SetConfig+0x22c>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d05e      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a77      	ldr	r2, [pc, #476]	@ (800d128 <DMA_SetConfig+0x230>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d059      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a76      	ldr	r2, [pc, #472]	@ (800d12c <DMA_SetConfig+0x234>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d054      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a74      	ldr	r2, [pc, #464]	@ (800d130 <DMA_SetConfig+0x238>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d04f      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a73      	ldr	r2, [pc, #460]	@ (800d134 <DMA_SetConfig+0x23c>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d04a      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a71      	ldr	r2, [pc, #452]	@ (800d138 <DMA_SetConfig+0x240>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d045      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a70      	ldr	r2, [pc, #448]	@ (800d13c <DMA_SetConfig+0x244>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d040      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a6e      	ldr	r2, [pc, #440]	@ (800d140 <DMA_SetConfig+0x248>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d03b      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a6d      	ldr	r2, [pc, #436]	@ (800d144 <DMA_SetConfig+0x24c>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d036      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a6b      	ldr	r2, [pc, #428]	@ (800d148 <DMA_SetConfig+0x250>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d031      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a6a      	ldr	r2, [pc, #424]	@ (800d14c <DMA_SetConfig+0x254>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d02c      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a68      	ldr	r2, [pc, #416]	@ (800d150 <DMA_SetConfig+0x258>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d027      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a67      	ldr	r2, [pc, #412]	@ (800d154 <DMA_SetConfig+0x25c>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d022      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a65      	ldr	r2, [pc, #404]	@ (800d158 <DMA_SetConfig+0x260>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d01d      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a64      	ldr	r2, [pc, #400]	@ (800d15c <DMA_SetConfig+0x264>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d018      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a62      	ldr	r2, [pc, #392]	@ (800d160 <DMA_SetConfig+0x268>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d013      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a61      	ldr	r2, [pc, #388]	@ (800d164 <DMA_SetConfig+0x26c>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d00e      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a5f      	ldr	r2, [pc, #380]	@ (800d168 <DMA_SetConfig+0x270>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d009      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a5e      	ldr	r2, [pc, #376]	@ (800d16c <DMA_SetConfig+0x274>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d004      	beq.n	800d002 <DMA_SetConfig+0x10a>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a5c      	ldr	r2, [pc, #368]	@ (800d170 <DMA_SetConfig+0x278>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d101      	bne.n	800d006 <DMA_SetConfig+0x10e>
 800d002:	2301      	movs	r3, #1
 800d004:	e000      	b.n	800d008 <DMA_SetConfig+0x110>
 800d006:	2300      	movs	r3, #0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00d      	beq.n	800d028 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d014:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d004      	beq.n	800d028 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d026:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a39      	ldr	r2, [pc, #228]	@ (800d114 <DMA_SetConfig+0x21c>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d04a      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a38      	ldr	r2, [pc, #224]	@ (800d118 <DMA_SetConfig+0x220>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d045      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a36      	ldr	r2, [pc, #216]	@ (800d11c <DMA_SetConfig+0x224>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d040      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a35      	ldr	r2, [pc, #212]	@ (800d120 <DMA_SetConfig+0x228>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d03b      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a33      	ldr	r2, [pc, #204]	@ (800d124 <DMA_SetConfig+0x22c>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d036      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a32      	ldr	r2, [pc, #200]	@ (800d128 <DMA_SetConfig+0x230>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d031      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a30      	ldr	r2, [pc, #192]	@ (800d12c <DMA_SetConfig+0x234>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d02c      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a2f      	ldr	r2, [pc, #188]	@ (800d130 <DMA_SetConfig+0x238>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d027      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a2d      	ldr	r2, [pc, #180]	@ (800d134 <DMA_SetConfig+0x23c>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d022      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a2c      	ldr	r2, [pc, #176]	@ (800d138 <DMA_SetConfig+0x240>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d01d      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a2a      	ldr	r2, [pc, #168]	@ (800d13c <DMA_SetConfig+0x244>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d018      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a29      	ldr	r2, [pc, #164]	@ (800d140 <DMA_SetConfig+0x248>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d013      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a27      	ldr	r2, [pc, #156]	@ (800d144 <DMA_SetConfig+0x24c>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00e      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a26      	ldr	r2, [pc, #152]	@ (800d148 <DMA_SetConfig+0x250>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d009      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a24      	ldr	r2, [pc, #144]	@ (800d14c <DMA_SetConfig+0x254>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d004      	beq.n	800d0c8 <DMA_SetConfig+0x1d0>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a23      	ldr	r2, [pc, #140]	@ (800d150 <DMA_SetConfig+0x258>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d101      	bne.n	800d0cc <DMA_SetConfig+0x1d4>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <DMA_SetConfig+0x1d6>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d059      	beq.n	800d186 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0d6:	f003 031f 	and.w	r3, r3, #31
 800d0da:	223f      	movs	r2, #63	@ 0x3f
 800d0dc:	409a      	lsls	r2, r3
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d0f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	2b40      	cmp	r3, #64	@ 0x40
 800d100:	d138      	bne.n	800d174 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d112:	e086      	b.n	800d222 <DMA_SetConfig+0x32a>
 800d114:	40020010 	.word	0x40020010
 800d118:	40020028 	.word	0x40020028
 800d11c:	40020040 	.word	0x40020040
 800d120:	40020058 	.word	0x40020058
 800d124:	40020070 	.word	0x40020070
 800d128:	40020088 	.word	0x40020088
 800d12c:	400200a0 	.word	0x400200a0
 800d130:	400200b8 	.word	0x400200b8
 800d134:	40020410 	.word	0x40020410
 800d138:	40020428 	.word	0x40020428
 800d13c:	40020440 	.word	0x40020440
 800d140:	40020458 	.word	0x40020458
 800d144:	40020470 	.word	0x40020470
 800d148:	40020488 	.word	0x40020488
 800d14c:	400204a0 	.word	0x400204a0
 800d150:	400204b8 	.word	0x400204b8
 800d154:	58025408 	.word	0x58025408
 800d158:	5802541c 	.word	0x5802541c
 800d15c:	58025430 	.word	0x58025430
 800d160:	58025444 	.word	0x58025444
 800d164:	58025458 	.word	0x58025458
 800d168:	5802546c 	.word	0x5802546c
 800d16c:	58025480 	.word	0x58025480
 800d170:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68ba      	ldr	r2, [r7, #8]
 800d17a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	60da      	str	r2, [r3, #12]
}
 800d184:	e04d      	b.n	800d222 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a29      	ldr	r2, [pc, #164]	@ (800d230 <DMA_SetConfig+0x338>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d022      	beq.n	800d1d6 <DMA_SetConfig+0x2de>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a27      	ldr	r2, [pc, #156]	@ (800d234 <DMA_SetConfig+0x33c>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d01d      	beq.n	800d1d6 <DMA_SetConfig+0x2de>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a26      	ldr	r2, [pc, #152]	@ (800d238 <DMA_SetConfig+0x340>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d018      	beq.n	800d1d6 <DMA_SetConfig+0x2de>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a24      	ldr	r2, [pc, #144]	@ (800d23c <DMA_SetConfig+0x344>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d013      	beq.n	800d1d6 <DMA_SetConfig+0x2de>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a23      	ldr	r2, [pc, #140]	@ (800d240 <DMA_SetConfig+0x348>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d00e      	beq.n	800d1d6 <DMA_SetConfig+0x2de>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a21      	ldr	r2, [pc, #132]	@ (800d244 <DMA_SetConfig+0x34c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d009      	beq.n	800d1d6 <DMA_SetConfig+0x2de>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a20      	ldr	r2, [pc, #128]	@ (800d248 <DMA_SetConfig+0x350>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d004      	beq.n	800d1d6 <DMA_SetConfig+0x2de>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a1e      	ldr	r2, [pc, #120]	@ (800d24c <DMA_SetConfig+0x354>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d101      	bne.n	800d1da <DMA_SetConfig+0x2e2>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e000      	b.n	800d1dc <DMA_SetConfig+0x2e4>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d020      	beq.n	800d222 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1e4:	f003 031f 	and.w	r3, r3, #31
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	409a      	lsls	r2, r3
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	2b40      	cmp	r3, #64	@ 0x40
 800d1fe:	d108      	bne.n	800d212 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	60da      	str	r2, [r3, #12]
}
 800d210:	e007      	b.n	800d222 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	60da      	str	r2, [r3, #12]
}
 800d222:	bf00      	nop
 800d224:	371c      	adds	r7, #28
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop
 800d230:	58025408 	.word	0x58025408
 800d234:	5802541c 	.word	0x5802541c
 800d238:	58025430 	.word	0x58025430
 800d23c:	58025444 	.word	0x58025444
 800d240:	58025458 	.word	0x58025458
 800d244:	5802546c 	.word	0x5802546c
 800d248:	58025480 	.word	0x58025480
 800d24c:	58025494 	.word	0x58025494

0800d250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a42      	ldr	r2, [pc, #264]	@ (800d368 <DMA_CalcBaseAndBitshift+0x118>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d04a      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a41      	ldr	r2, [pc, #260]	@ (800d36c <DMA_CalcBaseAndBitshift+0x11c>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d045      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a3f      	ldr	r2, [pc, #252]	@ (800d370 <DMA_CalcBaseAndBitshift+0x120>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d040      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a3e      	ldr	r2, [pc, #248]	@ (800d374 <DMA_CalcBaseAndBitshift+0x124>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d03b      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a3c      	ldr	r2, [pc, #240]	@ (800d378 <DMA_CalcBaseAndBitshift+0x128>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d036      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a3b      	ldr	r2, [pc, #236]	@ (800d37c <DMA_CalcBaseAndBitshift+0x12c>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d031      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a39      	ldr	r2, [pc, #228]	@ (800d380 <DMA_CalcBaseAndBitshift+0x130>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d02c      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a38      	ldr	r2, [pc, #224]	@ (800d384 <DMA_CalcBaseAndBitshift+0x134>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d027      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a36      	ldr	r2, [pc, #216]	@ (800d388 <DMA_CalcBaseAndBitshift+0x138>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d022      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a35      	ldr	r2, [pc, #212]	@ (800d38c <DMA_CalcBaseAndBitshift+0x13c>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d01d      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a33      	ldr	r2, [pc, #204]	@ (800d390 <DMA_CalcBaseAndBitshift+0x140>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d018      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a32      	ldr	r2, [pc, #200]	@ (800d394 <DMA_CalcBaseAndBitshift+0x144>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d013      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a30      	ldr	r2, [pc, #192]	@ (800d398 <DMA_CalcBaseAndBitshift+0x148>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d00e      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a2f      	ldr	r2, [pc, #188]	@ (800d39c <DMA_CalcBaseAndBitshift+0x14c>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d009      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a2d      	ldr	r2, [pc, #180]	@ (800d3a0 <DMA_CalcBaseAndBitshift+0x150>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d004      	beq.n	800d2f8 <DMA_CalcBaseAndBitshift+0xa8>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a2c      	ldr	r2, [pc, #176]	@ (800d3a4 <DMA_CalcBaseAndBitshift+0x154>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d101      	bne.n	800d2fc <DMA_CalcBaseAndBitshift+0xac>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e000      	b.n	800d2fe <DMA_CalcBaseAndBitshift+0xae>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d024      	beq.n	800d34c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	b2db      	uxtb	r3, r3
 800d308:	3b10      	subs	r3, #16
 800d30a:	4a27      	ldr	r2, [pc, #156]	@ (800d3a8 <DMA_CalcBaseAndBitshift+0x158>)
 800d30c:	fba2 2303 	umull	r2, r3, r2, r3
 800d310:	091b      	lsrs	r3, r3, #4
 800d312:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f003 0307 	and.w	r3, r3, #7
 800d31a:	4a24      	ldr	r2, [pc, #144]	@ (800d3ac <DMA_CalcBaseAndBitshift+0x15c>)
 800d31c:	5cd3      	ldrb	r3, [r2, r3]
 800d31e:	461a      	mov	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b03      	cmp	r3, #3
 800d328:	d908      	bls.n	800d33c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	461a      	mov	r2, r3
 800d330:	4b1f      	ldr	r3, [pc, #124]	@ (800d3b0 <DMA_CalcBaseAndBitshift+0x160>)
 800d332:	4013      	ands	r3, r2
 800d334:	1d1a      	adds	r2, r3, #4
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	659a      	str	r2, [r3, #88]	@ 0x58
 800d33a:	e00d      	b.n	800d358 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	461a      	mov	r2, r3
 800d342:	4b1b      	ldr	r3, [pc, #108]	@ (800d3b0 <DMA_CalcBaseAndBitshift+0x160>)
 800d344:	4013      	ands	r3, r2
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	6593      	str	r3, [r2, #88]	@ 0x58
 800d34a:	e005      	b.n	800d358 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	40020010 	.word	0x40020010
 800d36c:	40020028 	.word	0x40020028
 800d370:	40020040 	.word	0x40020040
 800d374:	40020058 	.word	0x40020058
 800d378:	40020070 	.word	0x40020070
 800d37c:	40020088 	.word	0x40020088
 800d380:	400200a0 	.word	0x400200a0
 800d384:	400200b8 	.word	0x400200b8
 800d388:	40020410 	.word	0x40020410
 800d38c:	40020428 	.word	0x40020428
 800d390:	40020440 	.word	0x40020440
 800d394:	40020458 	.word	0x40020458
 800d398:	40020470 	.word	0x40020470
 800d39c:	40020488 	.word	0x40020488
 800d3a0:	400204a0 	.word	0x400204a0
 800d3a4:	400204b8 	.word	0x400204b8
 800d3a8:	aaaaaaab 	.word	0xaaaaaaab
 800d3ac:	0801e2e0 	.word	0x0801e2e0
 800d3b0:	fffffc00 	.word	0xfffffc00

0800d3b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	699b      	ldr	r3, [r3, #24]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d120      	bne.n	800d40a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d858      	bhi.n	800d482 <DMA_CheckFifoParam+0xce>
 800d3d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d8 <DMA_CheckFifoParam+0x24>)
 800d3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d6:	bf00      	nop
 800d3d8:	0800d3e9 	.word	0x0800d3e9
 800d3dc:	0800d3fb 	.word	0x0800d3fb
 800d3e0:	0800d3e9 	.word	0x0800d3e9
 800d3e4:	0800d483 	.word	0x0800d483
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d048      	beq.n	800d486 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d3f8:	e045      	b.n	800d486 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d402:	d142      	bne.n	800d48a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d408:	e03f      	b.n	800d48a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d412:	d123      	bne.n	800d45c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d418:	2b03      	cmp	r3, #3
 800d41a:	d838      	bhi.n	800d48e <DMA_CheckFifoParam+0xda>
 800d41c:	a201      	add	r2, pc, #4	@ (adr r2, 800d424 <DMA_CheckFifoParam+0x70>)
 800d41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d422:	bf00      	nop
 800d424:	0800d435 	.word	0x0800d435
 800d428:	0800d43b 	.word	0x0800d43b
 800d42c:	0800d435 	.word	0x0800d435
 800d430:	0800d44d 	.word	0x0800d44d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800d434:	2301      	movs	r3, #1
 800d436:	73fb      	strb	r3, [r7, #15]
        break;
 800d438:	e030      	b.n	800d49c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d43e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d025      	beq.n	800d492 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d44a:	e022      	b.n	800d492 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d450:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d454:	d11f      	bne.n	800d496 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d45a:	e01c      	b.n	800d496 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d460:	2b02      	cmp	r3, #2
 800d462:	d902      	bls.n	800d46a <DMA_CheckFifoParam+0xb6>
 800d464:	2b03      	cmp	r3, #3
 800d466:	d003      	beq.n	800d470 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800d468:	e018      	b.n	800d49c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	73fb      	strb	r3, [r7, #15]
        break;
 800d46e:	e015      	b.n	800d49c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d474:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00e      	beq.n	800d49a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	73fb      	strb	r3, [r7, #15]
    break;
 800d480:	e00b      	b.n	800d49a <DMA_CheckFifoParam+0xe6>
        break;
 800d482:	bf00      	nop
 800d484:	e00a      	b.n	800d49c <DMA_CheckFifoParam+0xe8>
        break;
 800d486:	bf00      	nop
 800d488:	e008      	b.n	800d49c <DMA_CheckFifoParam+0xe8>
        break;
 800d48a:	bf00      	nop
 800d48c:	e006      	b.n	800d49c <DMA_CheckFifoParam+0xe8>
        break;
 800d48e:	bf00      	nop
 800d490:	e004      	b.n	800d49c <DMA_CheckFifoParam+0xe8>
        break;
 800d492:	bf00      	nop
 800d494:	e002      	b.n	800d49c <DMA_CheckFifoParam+0xe8>
        break;
 800d496:	bf00      	nop
 800d498:	e000      	b.n	800d49c <DMA_CheckFifoParam+0xe8>
    break;
 800d49a:	bf00      	nop
    }
  }

  return status;
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop

0800d4ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4a38      	ldr	r2, [pc, #224]	@ (800d5a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d022      	beq.n	800d50a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a36      	ldr	r2, [pc, #216]	@ (800d5a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d01d      	beq.n	800d50a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	4a35      	ldr	r2, [pc, #212]	@ (800d5a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d018      	beq.n	800d50a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a33      	ldr	r2, [pc, #204]	@ (800d5ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d013      	beq.n	800d50a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a32      	ldr	r2, [pc, #200]	@ (800d5b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d00e      	beq.n	800d50a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a30      	ldr	r2, [pc, #192]	@ (800d5b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d009      	beq.n	800d50a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a2f      	ldr	r2, [pc, #188]	@ (800d5b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d004      	beq.n	800d50a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a2d      	ldr	r2, [pc, #180]	@ (800d5bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d101      	bne.n	800d50e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800d50a:	2301      	movs	r3, #1
 800d50c:	e000      	b.n	800d510 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800d50e:	2300      	movs	r3, #0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d01a      	beq.n	800d54a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	3b08      	subs	r3, #8
 800d51c:	4a28      	ldr	r2, [pc, #160]	@ (800d5c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800d51e:	fba2 2303 	umull	r2, r3, r2, r3
 800d522:	091b      	lsrs	r3, r3, #4
 800d524:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	4b26      	ldr	r3, [pc, #152]	@ (800d5c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800d52a:	4413      	add	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	461a      	mov	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a24      	ldr	r2, [pc, #144]	@ (800d5c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800d538:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f003 031f 	and.w	r3, r3, #31
 800d540:	2201      	movs	r2, #1
 800d542:	409a      	lsls	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800d548:	e024      	b.n	800d594 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	3b10      	subs	r3, #16
 800d552:	4a1e      	ldr	r2, [pc, #120]	@ (800d5cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800d554:	fba2 2303 	umull	r2, r3, r2, r3
 800d558:	091b      	lsrs	r3, r3, #4
 800d55a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	4a1c      	ldr	r2, [pc, #112]	@ (800d5d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d806      	bhi.n	800d572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	4a1b      	ldr	r2, [pc, #108]	@ (800d5d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d902      	bls.n	800d572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3308      	adds	r3, #8
 800d570:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	4b18      	ldr	r3, [pc, #96]	@ (800d5d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800d576:	4413      	add	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	461a      	mov	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a16      	ldr	r2, [pc, #88]	@ (800d5dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800d584:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f003 031f 	and.w	r3, r3, #31
 800d58c:	2201      	movs	r2, #1
 800d58e:	409a      	lsls	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d594:	bf00      	nop
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr
 800d5a0:	58025408 	.word	0x58025408
 800d5a4:	5802541c 	.word	0x5802541c
 800d5a8:	58025430 	.word	0x58025430
 800d5ac:	58025444 	.word	0x58025444
 800d5b0:	58025458 	.word	0x58025458
 800d5b4:	5802546c 	.word	0x5802546c
 800d5b8:	58025480 	.word	0x58025480
 800d5bc:	58025494 	.word	0x58025494
 800d5c0:	cccccccd 	.word	0xcccccccd
 800d5c4:	16009600 	.word	0x16009600
 800d5c8:	58025880 	.word	0x58025880
 800d5cc:	aaaaaaab 	.word	0xaaaaaaab
 800d5d0:	400204b8 	.word	0x400204b8
 800d5d4:	4002040f 	.word	0x4002040f
 800d5d8:	10008200 	.word	0x10008200
 800d5dc:	40020880 	.word	0x40020880

0800d5e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d04a      	beq.n	800d68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2b08      	cmp	r3, #8
 800d5fa:	d847      	bhi.n	800d68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a25      	ldr	r2, [pc, #148]	@ (800d698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d022      	beq.n	800d64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a24      	ldr	r2, [pc, #144]	@ (800d69c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d01d      	beq.n	800d64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a22      	ldr	r2, [pc, #136]	@ (800d6a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d018      	beq.n	800d64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a21      	ldr	r2, [pc, #132]	@ (800d6a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d013      	beq.n	800d64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a1f      	ldr	r2, [pc, #124]	@ (800d6a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d00e      	beq.n	800d64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a1e      	ldr	r2, [pc, #120]	@ (800d6ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d009      	beq.n	800d64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a1c      	ldr	r2, [pc, #112]	@ (800d6b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d004      	beq.n	800d64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a1b      	ldr	r2, [pc, #108]	@ (800d6b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d101      	bne.n	800d650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800d64c:	2301      	movs	r3, #1
 800d64e:	e000      	b.n	800d652 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800d650:	2300      	movs	r3, #0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00a      	beq.n	800d66c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	4b17      	ldr	r3, [pc, #92]	@ (800d6b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800d65a:	4413      	add	r3, r2
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	461a      	mov	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4a15      	ldr	r2, [pc, #84]	@ (800d6bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800d668:	671a      	str	r2, [r3, #112]	@ 0x70
 800d66a:	e009      	b.n	800d680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	4b14      	ldr	r3, [pc, #80]	@ (800d6c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800d670:	4413      	add	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	461a      	mov	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a11      	ldr	r2, [pc, #68]	@ (800d6c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800d67e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	3b01      	subs	r3, #1
 800d684:	2201      	movs	r2, #1
 800d686:	409a      	lsls	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800d68c:	bf00      	nop
 800d68e:	3714      	adds	r7, #20
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr
 800d698:	58025408 	.word	0x58025408
 800d69c:	5802541c 	.word	0x5802541c
 800d6a0:	58025430 	.word	0x58025430
 800d6a4:	58025444 	.word	0x58025444
 800d6a8:	58025458 	.word	0x58025458
 800d6ac:	5802546c 	.word	0x5802546c
 800d6b0:	58025480 	.word	0x58025480
 800d6b4:	58025494 	.word	0x58025494
 800d6b8:	1600963f 	.word	0x1600963f
 800d6bc:	58025940 	.word	0x58025940
 800d6c0:	1000823f 	.word	0x1000823f
 800d6c4:	40020940 	.word	0x40020940

0800d6c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b089      	sub	sp, #36	@ 0x24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d6d6:	4b86      	ldr	r3, [pc, #536]	@ (800d8f0 <HAL_GPIO_Init+0x228>)
 800d6d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d6da:	e18c      	b.n	800d9f6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	2101      	movs	r1, #1
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f000 817e 	beq.w	800d9f0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f003 0303 	and.w	r3, r3, #3
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d005      	beq.n	800d70c <HAL_GPIO_Init+0x44>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	f003 0303 	and.w	r3, r3, #3
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d130      	bne.n	800d76e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	2203      	movs	r2, #3
 800d718:	fa02 f303 	lsl.w	r3, r2, r3
 800d71c:	43db      	mvns	r3, r3
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	4013      	ands	r3, r2
 800d722:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	68da      	ldr	r2, [r3, #12]
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	005b      	lsls	r3, r3, #1
 800d72c:	fa02 f303 	lsl.w	r3, r2, r3
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	4313      	orrs	r3, r2
 800d734:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d742:	2201      	movs	r2, #1
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	fa02 f303 	lsl.w	r3, r2, r3
 800d74a:	43db      	mvns	r3, r3
 800d74c:	69ba      	ldr	r2, [r7, #24]
 800d74e:	4013      	ands	r3, r2
 800d750:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	091b      	lsrs	r3, r3, #4
 800d758:	f003 0201 	and.w	r2, r3, #1
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	fa02 f303 	lsl.w	r3, r2, r3
 800d762:	69ba      	ldr	r2, [r7, #24]
 800d764:	4313      	orrs	r3, r2
 800d766:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	69ba      	ldr	r2, [r7, #24]
 800d76c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f003 0303 	and.w	r3, r3, #3
 800d776:	2b03      	cmp	r3, #3
 800d778:	d017      	beq.n	800d7aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	2203      	movs	r2, #3
 800d786:	fa02 f303 	lsl.w	r3, r2, r3
 800d78a:	43db      	mvns	r3, r3
 800d78c:	69ba      	ldr	r2, [r7, #24]
 800d78e:	4013      	ands	r3, r2
 800d790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	689a      	ldr	r2, [r3, #8]
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	fa02 f303 	lsl.w	r3, r2, r3
 800d79e:	69ba      	ldr	r2, [r7, #24]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	69ba      	ldr	r2, [r7, #24]
 800d7a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f003 0303 	and.w	r3, r3, #3
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d123      	bne.n	800d7fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	08da      	lsrs	r2, r3, #3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	3208      	adds	r2, #8
 800d7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	f003 0307 	and.w	r3, r3, #7
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	220f      	movs	r2, #15
 800d7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d2:	43db      	mvns	r3, r3
 800d7d4:	69ba      	ldr	r2, [r7, #24]
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	691a      	ldr	r2, [r3, #16]
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	f003 0307 	and.w	r3, r3, #7
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ea:	69ba      	ldr	r2, [r7, #24]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	08da      	lsrs	r2, r3, #3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3208      	adds	r2, #8
 800d7f8:	69b9      	ldr	r1, [r7, #24]
 800d7fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	2203      	movs	r2, #3
 800d80a:	fa02 f303 	lsl.w	r3, r2, r3
 800d80e:	43db      	mvns	r3, r3
 800d810:	69ba      	ldr	r2, [r7, #24]
 800d812:	4013      	ands	r3, r2
 800d814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	f003 0203 	and.w	r2, r3, #3
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	fa02 f303 	lsl.w	r3, r2, r3
 800d826:	69ba      	ldr	r2, [r7, #24]
 800d828:	4313      	orrs	r3, r2
 800d82a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	69ba      	ldr	r2, [r7, #24]
 800d830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f000 80d8 	beq.w	800d9f0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d840:	4b2c      	ldr	r3, [pc, #176]	@ (800d8f4 <HAL_GPIO_Init+0x22c>)
 800d842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d846:	4a2b      	ldr	r2, [pc, #172]	@ (800d8f4 <HAL_GPIO_Init+0x22c>)
 800d848:	f043 0302 	orr.w	r3, r3, #2
 800d84c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d850:	4b28      	ldr	r3, [pc, #160]	@ (800d8f4 <HAL_GPIO_Init+0x22c>)
 800d852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d856:	f003 0302 	and.w	r3, r3, #2
 800d85a:	60fb      	str	r3, [r7, #12]
 800d85c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d85e:	4a26      	ldr	r2, [pc, #152]	@ (800d8f8 <HAL_GPIO_Init+0x230>)
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	089b      	lsrs	r3, r3, #2
 800d864:	3302      	adds	r3, #2
 800d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d86a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	f003 0303 	and.w	r3, r3, #3
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	220f      	movs	r2, #15
 800d876:	fa02 f303 	lsl.w	r3, r2, r3
 800d87a:	43db      	mvns	r3, r3
 800d87c:	69ba      	ldr	r2, [r7, #24]
 800d87e:	4013      	ands	r3, r2
 800d880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a1d      	ldr	r2, [pc, #116]	@ (800d8fc <HAL_GPIO_Init+0x234>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d04a      	beq.n	800d920 <HAL_GPIO_Init+0x258>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4a1c      	ldr	r2, [pc, #112]	@ (800d900 <HAL_GPIO_Init+0x238>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d02b      	beq.n	800d8ea <HAL_GPIO_Init+0x222>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4a1b      	ldr	r2, [pc, #108]	@ (800d904 <HAL_GPIO_Init+0x23c>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d025      	beq.n	800d8e6 <HAL_GPIO_Init+0x21e>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a1a      	ldr	r2, [pc, #104]	@ (800d908 <HAL_GPIO_Init+0x240>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d01f      	beq.n	800d8e2 <HAL_GPIO_Init+0x21a>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a19      	ldr	r2, [pc, #100]	@ (800d90c <HAL_GPIO_Init+0x244>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d019      	beq.n	800d8de <HAL_GPIO_Init+0x216>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a18      	ldr	r2, [pc, #96]	@ (800d910 <HAL_GPIO_Init+0x248>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d013      	beq.n	800d8da <HAL_GPIO_Init+0x212>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a17      	ldr	r2, [pc, #92]	@ (800d914 <HAL_GPIO_Init+0x24c>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d00d      	beq.n	800d8d6 <HAL_GPIO_Init+0x20e>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a16      	ldr	r2, [pc, #88]	@ (800d918 <HAL_GPIO_Init+0x250>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d007      	beq.n	800d8d2 <HAL_GPIO_Init+0x20a>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a15      	ldr	r2, [pc, #84]	@ (800d91c <HAL_GPIO_Init+0x254>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d101      	bne.n	800d8ce <HAL_GPIO_Init+0x206>
 800d8ca:	2309      	movs	r3, #9
 800d8cc:	e029      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8ce:	230a      	movs	r3, #10
 800d8d0:	e027      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8d2:	2307      	movs	r3, #7
 800d8d4:	e025      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8d6:	2306      	movs	r3, #6
 800d8d8:	e023      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8da:	2305      	movs	r3, #5
 800d8dc:	e021      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8de:	2304      	movs	r3, #4
 800d8e0:	e01f      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	e01d      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	e01b      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e019      	b.n	800d922 <HAL_GPIO_Init+0x25a>
 800d8ee:	bf00      	nop
 800d8f0:	58000080 	.word	0x58000080
 800d8f4:	58024400 	.word	0x58024400
 800d8f8:	58000400 	.word	0x58000400
 800d8fc:	58020000 	.word	0x58020000
 800d900:	58020400 	.word	0x58020400
 800d904:	58020800 	.word	0x58020800
 800d908:	58020c00 	.word	0x58020c00
 800d90c:	58021000 	.word	0x58021000
 800d910:	58021400 	.word	0x58021400
 800d914:	58021800 	.word	0x58021800
 800d918:	58021c00 	.word	0x58021c00
 800d91c:	58022400 	.word	0x58022400
 800d920:	2300      	movs	r3, #0
 800d922:	69fa      	ldr	r2, [r7, #28]
 800d924:	f002 0203 	and.w	r2, r2, #3
 800d928:	0092      	lsls	r2, r2, #2
 800d92a:	4093      	lsls	r3, r2
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	4313      	orrs	r3, r2
 800d930:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d932:	4938      	ldr	r1, [pc, #224]	@ (800da14 <HAL_GPIO_Init+0x34c>)
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	089b      	lsrs	r3, r3, #2
 800d938:	3302      	adds	r3, #2
 800d93a:	69ba      	ldr	r2, [r7, #24]
 800d93c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	43db      	mvns	r3, r3
 800d94c:	69ba      	ldr	r2, [r7, #24]
 800d94e:	4013      	ands	r3, r2
 800d950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d003      	beq.n	800d966 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800d95e:	69ba      	ldr	r2, [r7, #24]
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	4313      	orrs	r3, r2
 800d964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d966:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d96e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	43db      	mvns	r3, r3
 800d97a:	69ba      	ldr	r2, [r7, #24]
 800d97c:	4013      	ands	r3, r2
 800d97e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800d98c:	69ba      	ldr	r2, [r7, #24]
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	4313      	orrs	r3, r2
 800d992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d994:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	43db      	mvns	r3, r3
 800d9a6:	69ba      	ldr	r2, [r7, #24]
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d003      	beq.n	800d9c0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800d9b8:	69ba      	ldr	r2, [r7, #24]
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	69ba      	ldr	r2, [r7, #24]
 800d9c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	43db      	mvns	r3, r3
 800d9d0:	69ba      	ldr	r2, [r7, #24]
 800d9d2:	4013      	ands	r3, r2
 800d9d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800d9e2:	69ba      	ldr	r2, [r7, #24]
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	69ba      	ldr	r2, [r7, #24]
 800d9ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	fa22 f303 	lsr.w	r3, r2, r3
 800da00:	2b00      	cmp	r3, #0
 800da02:	f47f ae6b 	bne.w	800d6dc <HAL_GPIO_Init+0x14>
  }
}
 800da06:	bf00      	nop
 800da08:	bf00      	nop
 800da0a:	3724      	adds	r7, #36	@ 0x24
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr
 800da14:	58000400 	.word	0x58000400

0800da18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	460b      	mov	r3, r1
 800da22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	691a      	ldr	r2, [r3, #16]
 800da28:	887b      	ldrh	r3, [r7, #2]
 800da2a:	4013      	ands	r3, r2
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800da30:	2301      	movs	r3, #1
 800da32:	73fb      	strb	r3, [r7, #15]
 800da34:	e001      	b.n	800da3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800da36:	2300      	movs	r3, #0
 800da38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	460b      	mov	r3, r1
 800da52:	807b      	strh	r3, [r7, #2]
 800da54:	4613      	mov	r3, r2
 800da56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800da58:	787b      	ldrb	r3, [r7, #1]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d003      	beq.n	800da66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800da5e:	887a      	ldrh	r2, [r7, #2]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800da64:	e003      	b.n	800da6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800da66:	887b      	ldrh	r3, [r7, #2]
 800da68:	041a      	lsls	r2, r3, #16
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	619a      	str	r2, [r3, #24]
}
 800da6e:	bf00      	nop
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	af00      	add	r7, sp, #0
 800da80:	4603      	mov	r3, r0
 800da82:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800da84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800da8c:	88fb      	ldrh	r3, [r7, #6]
 800da8e:	4013      	ands	r3, r2
 800da90:	2b00      	cmp	r3, #0
 800da92:	d008      	beq.n	800daa6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800da94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800da98:	88fb      	ldrh	r3, [r7, #6]
 800da9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800da9e:	88fb      	ldrh	r3, [r7, #6]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7f8 f977 	bl	8005d94 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800daa6:	bf00      	nop
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
	...

0800dab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	e08b      	b.n	800dbda <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d106      	bne.n	800dadc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7f6 ff56 	bl	8004988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2224      	movs	r2, #36	@ 0x24
 800dae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f022 0201 	bic.w	r2, r2, #1
 800daf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	685a      	ldr	r2, [r3, #4]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800db00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	689a      	ldr	r2, [r3, #8]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800db10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	2b01      	cmp	r3, #1
 800db18:	d107      	bne.n	800db2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	689a      	ldr	r2, [r3, #8]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800db26:	609a      	str	r2, [r3, #8]
 800db28:	e006      	b.n	800db38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	689a      	ldr	r2, [r3, #8]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800db36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	d108      	bne.n	800db52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	685a      	ldr	r2, [r3, #4]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db4e:	605a      	str	r2, [r3, #4]
 800db50:	e007      	b.n	800db62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	685a      	ldr	r2, [r3, #4]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800db60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6859      	ldr	r1, [r3, #4]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	4b1d      	ldr	r3, [pc, #116]	@ (800dbe4 <HAL_I2C_Init+0x134>)
 800db6e:	430b      	orrs	r3, r1
 800db70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	68da      	ldr	r2, [r3, #12]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800db80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	691a      	ldr	r2, [r3, #16]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	699b      	ldr	r3, [r3, #24]
 800db92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	430a      	orrs	r2, r1
 800db9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	69d9      	ldr	r1, [r3, #28]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a1a      	ldr	r2, [r3, #32]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	430a      	orrs	r2, r1
 800dbaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f042 0201 	orr.w	r2, r2, #1
 800dbba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2220      	movs	r2, #32
 800dbc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	02008000 	.word	0x02008000

0800dbe8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b088      	sub	sp, #32
 800dbec:	af02      	add	r7, sp, #8
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	4608      	mov	r0, r1
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	817b      	strh	r3, [r7, #10]
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	813b      	strh	r3, [r7, #8]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b20      	cmp	r3, #32
 800dc0c:	f040 80f9 	bne.w	800de02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <HAL_I2C_Mem_Write+0x34>
 800dc16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d105      	bne.n	800dc28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e0ed      	b.n	800de04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d101      	bne.n	800dc36 <HAL_I2C_Mem_Write+0x4e>
 800dc32:	2302      	movs	r3, #2
 800dc34:	e0e6      	b.n	800de04 <HAL_I2C_Mem_Write+0x21c>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dc3e:	f7fa fdbb 	bl	80087b8 <HAL_GetTick>
 800dc42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	2319      	movs	r3, #25
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f002 f80e 	bl	800fc72 <I2C_WaitOnFlagUntilTimeout>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e0d1      	b.n	800de04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2221      	movs	r2, #33	@ 0x21
 800dc64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2240      	movs	r2, #64	@ 0x40
 800dc6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2200      	movs	r2, #0
 800dc74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	6a3a      	ldr	r2, [r7, #32]
 800dc7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dc80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dc88:	88f8      	ldrh	r0, [r7, #6]
 800dc8a:	893a      	ldrh	r2, [r7, #8]
 800dc8c:	8979      	ldrh	r1, [r7, #10]
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	9301      	str	r3, [sp, #4]
 800dc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc94:	9300      	str	r3, [sp, #0]
 800dc96:	4603      	mov	r3, r0
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f001 f95b 	bl	800ef54 <I2C_RequestMemoryWrite>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d005      	beq.n	800dcb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800dcac:	2301      	movs	r3, #1
 800dcae:	e0a9      	b.n	800de04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	2bff      	cmp	r3, #255	@ 0xff
 800dcb8:	d90e      	bls.n	800dcd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	22ff      	movs	r2, #255	@ 0xff
 800dcbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	8979      	ldrh	r1, [r7, #10]
 800dcc8:	2300      	movs	r3, #0
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f002 f991 	bl	800fff8 <I2C_TransferConfig>
 800dcd6:	e00f      	b.n	800dcf8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	8979      	ldrh	r1, [r7, #10]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f002 f980 	bl	800fff8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dcf8:	697a      	ldr	r2, [r7, #20]
 800dcfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f002 f811 	bl	800fd24 <I2C_WaitOnTXISFlagUntilTimeout>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d001      	beq.n	800dd0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e07b      	b.n	800de04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd10:	781a      	ldrb	r2, [r3, #0]
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd1c:	1c5a      	adds	r2, r3, #1
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd34:	3b01      	subs	r3, #1
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d034      	beq.n	800ddb0 <HAL_I2C_Mem_Write+0x1c8>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d130      	bne.n	800ddb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd54:	2200      	movs	r2, #0
 800dd56:	2180      	movs	r1, #128	@ 0x80
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f001 ff8a 	bl	800fc72 <I2C_WaitOnFlagUntilTimeout>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800dd64:	2301      	movs	r3, #1
 800dd66:	e04d      	b.n	800de04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	2bff      	cmp	r3, #255	@ 0xff
 800dd70:	d90e      	bls.n	800dd90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	22ff      	movs	r2, #255	@ 0xff
 800dd76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	8979      	ldrh	r1, [r7, #10]
 800dd80:	2300      	movs	r3, #0
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f002 f935 	bl	800fff8 <I2C_TransferConfig>
 800dd8e:	e00f      	b.n	800ddb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	8979      	ldrh	r1, [r7, #10]
 800dda2:	2300      	movs	r3, #0
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f002 f924 	bl	800fff8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d19e      	bne.n	800dcf8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ddba:	697a      	ldr	r2, [r7, #20]
 800ddbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f001 fff7 	bl	800fdb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e01a      	b.n	800de04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2220      	movs	r2, #32
 800ddd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	6859      	ldr	r1, [r3, #4]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	4b0a      	ldr	r3, [pc, #40]	@ (800de0c <HAL_I2C_Mem_Write+0x224>)
 800dde2:	400b      	ands	r3, r1
 800dde4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2220      	movs	r2, #32
 800ddea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	e000      	b.n	800de04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800de02:	2302      	movs	r3, #2
  }
}
 800de04:	4618      	mov	r0, r3
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	fe00e800 	.word	0xfe00e800

0800de10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b088      	sub	sp, #32
 800de14:	af02      	add	r7, sp, #8
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	4608      	mov	r0, r1
 800de1a:	4611      	mov	r1, r2
 800de1c:	461a      	mov	r2, r3
 800de1e:	4603      	mov	r3, r0
 800de20:	817b      	strh	r3, [r7, #10]
 800de22:	460b      	mov	r3, r1
 800de24:	813b      	strh	r3, [r7, #8]
 800de26:	4613      	mov	r3, r2
 800de28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de30:	b2db      	uxtb	r3, r3
 800de32:	2b20      	cmp	r3, #32
 800de34:	f040 80fd 	bne.w	800e032 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d002      	beq.n	800de44 <HAL_I2C_Mem_Read+0x34>
 800de3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de40:	2b00      	cmp	r3, #0
 800de42:	d105      	bne.n	800de50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	e0f1      	b.n	800e034 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de56:	2b01      	cmp	r3, #1
 800de58:	d101      	bne.n	800de5e <HAL_I2C_Mem_Read+0x4e>
 800de5a:	2302      	movs	r3, #2
 800de5c:	e0ea      	b.n	800e034 <HAL_I2C_Mem_Read+0x224>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800de66:	f7fa fca7 	bl	80087b8 <HAL_GetTick>
 800de6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	2319      	movs	r3, #25
 800de72:	2201      	movs	r2, #1
 800de74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f001 fefa 	bl	800fc72 <I2C_WaitOnFlagUntilTimeout>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	e0d5      	b.n	800e034 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2222      	movs	r2, #34	@ 0x22
 800de8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2240      	movs	r2, #64	@ 0x40
 800de94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6a3a      	ldr	r2, [r7, #32]
 800dea2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800deb0:	88f8      	ldrh	r0, [r7, #6]
 800deb2:	893a      	ldrh	r2, [r7, #8]
 800deb4:	8979      	ldrh	r1, [r7, #10]
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	4603      	mov	r3, r0
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f001 f89b 	bl	800effc <I2C_RequestMemoryRead>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d005      	beq.n	800ded8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2200      	movs	r2, #0
 800ded0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e0ad      	b.n	800e034 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dedc:	b29b      	uxth	r3, r3
 800dede:	2bff      	cmp	r3, #255	@ 0xff
 800dee0:	d90e      	bls.n	800df00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	22ff      	movs	r2, #255	@ 0xff
 800dee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800deec:	b2da      	uxtb	r2, r3
 800deee:	8979      	ldrh	r1, [r7, #10]
 800def0:	4b52      	ldr	r3, [pc, #328]	@ (800e03c <HAL_I2C_Mem_Read+0x22c>)
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f002 f87d 	bl	800fff8 <I2C_TransferConfig>
 800defe:	e00f      	b.n	800df20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df04:	b29a      	uxth	r2, r3
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	8979      	ldrh	r1, [r7, #10]
 800df12:	4b4a      	ldr	r3, [pc, #296]	@ (800e03c <HAL_I2C_Mem_Read+0x22c>)
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f002 f86c 	bl	800fff8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df26:	2200      	movs	r2, #0
 800df28:	2104      	movs	r1, #4
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f001 fea1 	bl	800fc72 <I2C_WaitOnFlagUntilTimeout>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d001      	beq.n	800df3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	e07c      	b.n	800e034 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df44:	b2d2      	uxtb	r2, r2
 800df46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df4c:	1c5a      	adds	r2, r3, #1
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df56:	3b01      	subs	r3, #1
 800df58:	b29a      	uxth	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df62:	b29b      	uxth	r3, r3
 800df64:	3b01      	subs	r3, #1
 800df66:	b29a      	uxth	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df70:	b29b      	uxth	r3, r3
 800df72:	2b00      	cmp	r3, #0
 800df74:	d034      	beq.n	800dfe0 <HAL_I2C_Mem_Read+0x1d0>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d130      	bne.n	800dfe0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df84:	2200      	movs	r2, #0
 800df86:	2180      	movs	r1, #128	@ 0x80
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f001 fe72 	bl	800fc72 <I2C_WaitOnFlagUntilTimeout>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800df94:	2301      	movs	r3, #1
 800df96:	e04d      	b.n	800e034 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	2bff      	cmp	r3, #255	@ 0xff
 800dfa0:	d90e      	bls.n	800dfc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	22ff      	movs	r2, #255	@ 0xff
 800dfa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	8979      	ldrh	r1, [r7, #10]
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f002 f81d 	bl	800fff8 <I2C_TransferConfig>
 800dfbe:	e00f      	b.n	800dfe0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	8979      	ldrh	r1, [r7, #10]
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	9300      	str	r3, [sp, #0]
 800dfd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f002 f80c 	bl	800fff8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d19a      	bne.n	800df20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dfea:	697a      	ldr	r2, [r7, #20]
 800dfec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f001 fedf 	bl	800fdb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	e01a      	b.n	800e034 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2220      	movs	r2, #32
 800e004:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	6859      	ldr	r1, [r3, #4]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	4b0b      	ldr	r3, [pc, #44]	@ (800e040 <HAL_I2C_Mem_Read+0x230>)
 800e012:	400b      	ands	r3, r1
 800e014:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2220      	movs	r2, #32
 800e01a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	e000      	b.n	800e034 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e032:	2302      	movs	r3, #2
  }
}
 800e034:	4618      	mov	r0, r3
 800e036:	3718      	adds	r7, #24
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	80002400 	.word	0x80002400
 800e040:	fe00e800 	.word	0xfe00e800

0800e044 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af02      	add	r7, sp, #8
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	4608      	mov	r0, r1
 800e04e:	4611      	mov	r1, r2
 800e050:	461a      	mov	r2, r3
 800e052:	4603      	mov	r3, r0
 800e054:	817b      	strh	r3, [r7, #10]
 800e056:	460b      	mov	r3, r1
 800e058:	813b      	strh	r3, [r7, #8]
 800e05a:	4613      	mov	r3, r2
 800e05c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e064:	b2db      	uxtb	r3, r3
 800e066:	2b20      	cmp	r3, #32
 800e068:	d16a      	bne.n	800e140 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <HAL_I2C_Mem_Write_IT+0x32>
 800e070:	8bbb      	ldrh	r3, [r7, #28]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d105      	bne.n	800e082 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e07c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	e05f      	b.n	800e142 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e08c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e090:	d101      	bne.n	800e096 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800e092:	2302      	movs	r3, #2
 800e094:	e055      	b.n	800e142 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d101      	bne.n	800e0a4 <HAL_I2C_Mem_Write_IT+0x60>
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	e04e      	b.n	800e142 <HAL_I2C_Mem_Write_IT+0xfe>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2221      	movs	r2, #33	@ 0x21
 800e0b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2240      	movs	r2, #64	@ 0x40
 800e0b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	69ba      	ldr	r2, [r7, #24]
 800e0cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	8bba      	ldrh	r2, [r7, #28]
 800e0d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	4a1d      	ldr	r2, [pc, #116]	@ (800e14c <HAL_I2C_Mem_Write_IT+0x108>)
 800e0d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	4a1c      	ldr	r2, [pc, #112]	@ (800e150 <HAL_I2C_Mem_Write_IT+0x10c>)
 800e0de:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e0e0:	897a      	ldrh	r2, [r7, #10]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e0e6:	88fb      	ldrh	r3, [r7, #6]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d109      	bne.n	800e100 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e0ec:	893b      	ldrh	r3, [r7, #8]
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fc:	651a      	str	r2, [r3, #80]	@ 0x50
 800e0fe:	e00b      	b.n	800e118 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e100:	893b      	ldrh	r3, [r7, #8]
 800e102:	0a1b      	lsrs	r3, r3, #8
 800e104:	b29b      	uxth	r3, r3
 800e106:	b2da      	uxtb	r2, r3
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e10e:	893b      	ldrh	r3, [r7, #8]
 800e110:	b2db      	uxtb	r3, r3
 800e112:	461a      	mov	r2, r3
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e118:	88fb      	ldrh	r3, [r7, #6]
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	8979      	ldrh	r1, [r7, #10]
 800e11e:	4b0d      	ldr	r3, [pc, #52]	@ (800e154 <HAL_I2C_Mem_Write_IT+0x110>)
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f001 ff66 	bl	800fff8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e134:	2101      	movs	r1, #1
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f001 ff90 	bl	801005c <I2C_Enable_IRQ>

    return HAL_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	e000      	b.n	800e142 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e140:	2302      	movs	r3, #2
  }
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	ffff0000 	.word	0xffff0000
 800e150:	0800e341 	.word	0x0800e341
 800e154:	80002000 	.word	0x80002000

0800e158 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af02      	add	r7, sp, #8
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	4608      	mov	r0, r1
 800e162:	4611      	mov	r1, r2
 800e164:	461a      	mov	r2, r3
 800e166:	4603      	mov	r3, r0
 800e168:	817b      	strh	r3, [r7, #10]
 800e16a:	460b      	mov	r3, r1
 800e16c:	813b      	strh	r3, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	2b20      	cmp	r3, #32
 800e17c:	d166      	bne.n	800e24c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <HAL_I2C_Mem_Read_IT+0x32>
 800e184:	8bbb      	ldrh	r3, [r7, #28]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d105      	bne.n	800e196 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e190:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	e05b      	b.n	800e24e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	699b      	ldr	r3, [r3, #24]
 800e19c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e1a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1a4:	d101      	bne.n	800e1aa <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800e1a6:	2302      	movs	r3, #2
 800e1a8:	e051      	b.n	800e24e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d101      	bne.n	800e1b8 <HAL_I2C_Mem_Read_IT+0x60>
 800e1b4:	2302      	movs	r3, #2
 800e1b6:	e04a      	b.n	800e24e <HAL_I2C_Mem_Read_IT+0xf6>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2222      	movs	r2, #34	@ 0x22
 800e1c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2240      	movs	r2, #64	@ 0x40
 800e1cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	69ba      	ldr	r2, [r7, #24]
 800e1da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	8bba      	ldrh	r2, [r7, #28]
 800e1e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e258 <HAL_I2C_Mem_Read_IT+0x100>)
 800e1e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	4a1c      	ldr	r2, [pc, #112]	@ (800e25c <HAL_I2C_Mem_Read_IT+0x104>)
 800e1ec:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800e1ee:	897a      	ldrh	r2, [r7, #10]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e1f4:	88fb      	ldrh	r3, [r7, #6]
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d109      	bne.n	800e20e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e1fa:	893b      	ldrh	r3, [r7, #8]
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f04f 32ff 	mov.w	r2, #4294967295
 800e20a:	651a      	str	r2, [r3, #80]	@ 0x50
 800e20c:	e00b      	b.n	800e226 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e20e:	893b      	ldrh	r3, [r7, #8]
 800e210:	0a1b      	lsrs	r3, r3, #8
 800e212:	b29b      	uxth	r3, r3
 800e214:	b2da      	uxtb	r2, r3
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800e21c:	893b      	ldrh	r3, [r7, #8]
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	461a      	mov	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e226:	88fb      	ldrh	r3, [r7, #6]
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	8979      	ldrh	r1, [r7, #10]
 800e22c:	4b0c      	ldr	r3, [pc, #48]	@ (800e260 <HAL_I2C_Mem_Read_IT+0x108>)
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	2300      	movs	r3, #0
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f001 fee0 	bl	800fff8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e240:	2101      	movs	r1, #1
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f001 ff0a 	bl	801005c <I2C_Enable_IRQ>

    return HAL_OK;
 800e248:	2300      	movs	r3, #0
 800e24a:	e000      	b.n	800e24e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800e24c:	2302      	movs	r3, #2
  }
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	ffff0000 	.word	0xffff0000
 800e25c:	0800e341 	.word	0x0800e341
 800e260:	80002000 	.word	0x80002000

0800e264 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	68f9      	ldr	r1, [r7, #12]
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	4798      	blx	r3
  }
}
 800e290:	bf00      	nop
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800e2a0:	bf00      	nop
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800e2b4:	bf00      	nop
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800e2dc:	bf00      	nop
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	70fb      	strb	r3, [r7, #3]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800e2f8:	bf00      	nop
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800e30c:	bf00      	nop
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800e320:	bf00      	nop
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800e334:	bf00      	nop
 800e336:	370c      	adds	r7, #12
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr

0800e340 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af02      	add	r7, sp, #8
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e34c:	4b8d      	ldr	r3, [pc, #564]	@ (800e584 <I2C_Mem_ISR_IT+0x244>)
 800e34e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d101      	bne.n	800e362 <I2C_Mem_ISR_IT+0x22>
 800e35e:	2302      	movs	r3, #2
 800e360:	e10c      	b.n	800e57c <I2C_Mem_ISR_IT+0x23c>
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2201      	movs	r2, #1
 800e366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	f003 0310 	and.w	r3, r3, #16
 800e370:	2b00      	cmp	r3, #0
 800e372:	d012      	beq.n	800e39a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00d      	beq.n	800e39a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2210      	movs	r2, #16
 800e384:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e38a:	f043 0204 	orr.w	r2, r3, #4
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f001 fc2b 	bl	800fbee <I2C_Flush_TXDR>
 800e398:	e0dd      	b.n	800e556 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	f003 0304 	and.w	r3, r3, #4
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d022      	beq.n	800e3ea <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d01d      	beq.n	800e3ea <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	f023 0304 	bic.w	r3, r3, #4
 800e3b4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3c0:	b2d2      	uxtb	r2, r2
 800e3c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3c8:	1c5a      	adds	r2, r3, #1
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e3e8:	e0b5      	b.n	800e556 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f003 0302 	and.w	r3, r3, #2
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d02c      	beq.n	800e44e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d027      	beq.n	800e44e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e406:	d118      	bne.n	800e43a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e40c:	781a      	ldrb	r2, [r3, #0]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e422:	3b01      	subs	r3, #1
 800e424:	b29a      	uxth	r2, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e42e:	b29b      	uxth	r3, r3
 800e430:	3b01      	subs	r3, #1
 800e432:	b29a      	uxth	r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e438:	e08d      	b.n	800e556 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	68fa      	ldr	r2, [r7, #12]
 800e440:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e442:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f04f 32ff 	mov.w	r2, #4294967295
 800e44a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800e44c:	e083      	b.n	800e556 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e454:	2b00      	cmp	r3, #0
 800e456:	d03c      	beq.n	800e4d2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d037      	beq.n	800e4d2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e466:	b29b      	uxth	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d02c      	beq.n	800e4c6 <I2C_Mem_ISR_IT+0x186>
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e470:	2b00      	cmp	r3, #0
 800e472:	d128      	bne.n	800e4c6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e478:	b29b      	uxth	r3, r3
 800e47a:	2bff      	cmp	r3, #255	@ 0xff
 800e47c:	d910      	bls.n	800e4a0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	22ff      	movs	r2, #255	@ 0xff
 800e482:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e488:	b299      	uxth	r1, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	2300      	movs	r3, #0
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f001 fdad 	bl	800fff8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e49e:	e017      	b.n	800e4d0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4ae:	b299      	uxth	r1, r3
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4b4:	b2da      	uxtb	r2, r3
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f001 fd9a 	bl	800fff8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4c4:	e004      	b.n	800e4d0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e4c6:	2140      	movs	r1, #64	@ 0x40
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f001 fa79 	bl	800f9c0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e4ce:	e042      	b.n	800e556 <I2C_Mem_ISR_IT+0x216>
 800e4d0:	e041      	b.n	800e556 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d03c      	beq.n	800e556 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d037      	beq.n	800e556 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	f001 fe3b 	bl	8010164 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e4ee:	2102      	movs	r1, #2
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f001 fdb3 	bl	801005c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b22      	cmp	r3, #34	@ 0x22
 800e500:	d101      	bne.n	800e506 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800e502:	4b21      	ldr	r3, [pc, #132]	@ (800e588 <I2C_Mem_ISR_IT+0x248>)
 800e504:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	2bff      	cmp	r3, #255	@ 0xff
 800e50e:	d910      	bls.n	800e532 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	22ff      	movs	r2, #255	@ 0xff
 800e514:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e51a:	b299      	uxth	r1, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e520:	b2da      	uxtb	r2, r3
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f001 fd64 	bl	800fff8 <I2C_TransferConfig>
 800e530:	e011      	b.n	800e556 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e536:	b29a      	uxth	r2, r3
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e540:	b299      	uxth	r1, r3
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e546:	b2da      	uxtb	r2, r3
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f001 fd51 	bl	800fff8 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	f003 0320 	and.w	r3, r3, #32
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d008      	beq.n	800e572 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800e56a:	6939      	ldr	r1, [r7, #16]
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f000 feb7 	bl	800f2e0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3718      	adds	r7, #24
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	80002000 	.word	0x80002000
 800e588:	80002400 	.word	0x80002400

0800e58c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e59c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d101      	bne.n	800e5b0 <I2C_Slave_ISR_IT+0x24>
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	e0e2      	b.n	800e776 <I2C_Slave_ISR_IT+0x1ea>
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	f003 0320 	and.w	r3, r3, #32
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d009      	beq.n	800e5d6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d004      	beq.n	800e5d6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800e5cc:	6939      	ldr	r1, [r7, #16]
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f000 ff4e 	bl	800f470 <I2C_ITSlaveCplt>
 800e5d4:	e0ca      	b.n	800e76c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	f003 0310 	and.w	r3, r3, #16
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d04b      	beq.n	800e678 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d046      	beq.n	800e678 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d128      	bne.n	800e646 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	2b28      	cmp	r3, #40	@ 0x28
 800e5fe:	d108      	bne.n	800e612 <I2C_Slave_ISR_IT+0x86>
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e606:	d104      	bne.n	800e612 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e608:	6939      	ldr	r1, [r7, #16]
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f001 f984 	bl	800f918 <I2C_ITListenCplt>
 800e610:	e031      	b.n	800e676 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b29      	cmp	r3, #41	@ 0x29
 800e61c:	d10e      	bne.n	800e63c <I2C_Slave_ISR_IT+0xb0>
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e624:	d00a      	beq.n	800e63c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2210      	movs	r2, #16
 800e62c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f001 fadd 	bl	800fbee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e634:	68f8      	ldr	r0, [r7, #12]
 800e636:	f000 fdf6 	bl	800f226 <I2C_ITSlaveSeqCplt>
 800e63a:	e01c      	b.n	800e676 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2210      	movs	r2, #16
 800e642:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800e644:	e08f      	b.n	800e766 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2210      	movs	r2, #16
 800e64c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e652:	f043 0204 	orr.w	r2, r3, #4
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d003      	beq.n	800e668 <I2C_Slave_ISR_IT+0xdc>
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e666:	d17e      	bne.n	800e766 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e66c:	4619      	mov	r1, r3
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f001 f9a6 	bl	800f9c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e674:	e077      	b.n	800e766 <I2C_Slave_ISR_IT+0x1da>
 800e676:	e076      	b.n	800e766 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	f003 0304 	and.w	r3, r3, #4
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d02f      	beq.n	800e6e2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d02a      	beq.n	800e6e2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e690:	b29b      	uxth	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d018      	beq.n	800e6c8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a0:	b2d2      	uxtb	r2, r2
 800e6a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a8:	1c5a      	adds	r2, r3, #1
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d14b      	bne.n	800e76a <I2C_Slave_ISR_IT+0x1de>
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e6d8:	d047      	beq.n	800e76a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f000 fda3 	bl	800f226 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800e6e0:	e043      	b.n	800e76a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	f003 0308 	and.w	r3, r3, #8
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d009      	beq.n	800e700 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d004      	beq.n	800e700 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800e6f6:	6939      	ldr	r1, [r7, #16]
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f000 fcd3 	bl	800f0a4 <I2C_ITAddrCplt>
 800e6fe:	e035      	b.n	800e76c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	f003 0302 	and.w	r3, r3, #2
 800e706:	2b00      	cmp	r3, #0
 800e708:	d030      	beq.n	800e76c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e710:	2b00      	cmp	r3, #0
 800e712:	d02b      	beq.n	800e76c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e718:	b29b      	uxth	r3, r3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d018      	beq.n	800e750 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e722:	781a      	ldrb	r2, [r3, #0]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e738:	b29b      	uxth	r3, r3
 800e73a:	3b01      	subs	r3, #1
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e746:	3b01      	subs	r3, #1
 800e748:	b29a      	uxth	r2, r3
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e74e:	e00d      	b.n	800e76c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e756:	d002      	beq.n	800e75e <I2C_Slave_ISR_IT+0x1d2>
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d106      	bne.n	800e76c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f000 fd61 	bl	800f226 <I2C_ITSlaveSeqCplt>
 800e764:	e002      	b.n	800e76c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800e766:	bf00      	nop
 800e768:	e000      	b.n	800e76c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800e76a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3718      	adds	r7, #24
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b088      	sub	sp, #32
 800e782:	af02      	add	r7, sp, #8
 800e784:	60f8      	str	r0, [r7, #12]
 800e786:	60b9      	str	r1, [r7, #8]
 800e788:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e790:	2b01      	cmp	r3, #1
 800e792:	d101      	bne.n	800e798 <I2C_Master_ISR_DMA+0x1a>
 800e794:	2302      	movs	r3, #2
 800e796:	e0d9      	b.n	800e94c <I2C_Master_ISR_DMA+0x1ce>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	f003 0310 	and.w	r3, r3, #16
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d016      	beq.n	800e7d8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d011      	beq.n	800e7d8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2210      	movs	r2, #16
 800e7ba:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7c0:	f043 0204 	orr.w	r2, r3, #4
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e7c8:	2120      	movs	r1, #32
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f001 fc46 	bl	801005c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f001 fa0c 	bl	800fbee <I2C_Flush_TXDR>
 800e7d6:	e0b4      	b.n	800e942 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d071      	beq.n	800e8c6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d06c      	beq.n	800e8c6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e7fa:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e800:	b29b      	uxth	r3, r3
 800e802:	2b00      	cmp	r3, #0
 800e804:	d04e      	beq.n	800e8a4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e812:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e818:	b29b      	uxth	r3, r3
 800e81a:	2bff      	cmp	r3, #255	@ 0xff
 800e81c:	d906      	bls.n	800e82c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	22ff      	movs	r2, #255	@ 0xff
 800e822:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800e824:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e828:	617b      	str	r3, [r7, #20]
 800e82a:	e010      	b.n	800e84e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e830:	b29a      	uxth	r2, r3
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e83a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e83e:	d003      	beq.n	800e848 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e844:	617b      	str	r3, [r7, #20]
 800e846:	e002      	b.n	800e84e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800e848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e84c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e852:	b2da      	uxtb	r2, r3
 800e854:	8a79      	ldrh	r1, [r7, #18]
 800e856:	2300      	movs	r3, #0
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f001 fbcb 	bl	800fff8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e866:	b29a      	uxth	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	b29a      	uxth	r2, r3
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b22      	cmp	r3, #34	@ 0x22
 800e87e:	d108      	bne.n	800e892 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e88e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e890:	e057      	b.n	800e942 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e8a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e8a2:	e04e      	b.n	800e942 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8b2:	d003      	beq.n	800e8bc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f000 fc79 	bl	800f1ac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800e8ba:	e042      	b.n	800e942 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e8bc:	2140      	movs	r1, #64	@ 0x40
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f001 f87e 	bl	800f9c0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e8c4:	e03d      	b.n	800e942 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d028      	beq.n	800e922 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d023      	beq.n	800e922 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d119      	bne.n	800e918 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8f2:	d025      	beq.n	800e940 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e8fc:	d108      	bne.n	800e910 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e90c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800e90e:	e017      	b.n	800e940 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800e910:	68f8      	ldr	r0, [r7, #12]
 800e912:	f000 fc4b 	bl	800f1ac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800e916:	e013      	b.n	800e940 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e918:	2140      	movs	r1, #64	@ 0x40
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f001 f850 	bl	800f9c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e920:	e00e      	b.n	800e940 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	f003 0320 	and.w	r3, r3, #32
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00a      	beq.n	800e942 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e932:	2b00      	cmp	r3, #0
 800e934:	d005      	beq.n	800e942 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e936:	68b9      	ldr	r1, [r7, #8]
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f000 fcd1 	bl	800f2e0 <I2C_ITMasterCplt>
 800e93e:	e000      	b.n	800e942 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800e940:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2200      	movs	r2, #0
 800e946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b088      	sub	sp, #32
 800e958:	af02      	add	r7, sp, #8
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e960:	4b8d      	ldr	r3, [pc, #564]	@ (800eb98 <I2C_Mem_ISR_DMA+0x244>)
 800e962:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d101      	bne.n	800e972 <I2C_Mem_ISR_DMA+0x1e>
 800e96e:	2302      	movs	r3, #2
 800e970:	e10e      	b.n	800eb90 <I2C_Mem_ISR_DMA+0x23c>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2201      	movs	r2, #1
 800e976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	f003 0310 	and.w	r3, r3, #16
 800e980:	2b00      	cmp	r3, #0
 800e982:	d016      	beq.n	800e9b2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d011      	beq.n	800e9b2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2210      	movs	r2, #16
 800e994:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e99a:	f043 0204 	orr.w	r2, r3, #4
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e9a2:	2120      	movs	r1, #32
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f001 fb59 	bl	801005c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	f001 f91f 	bl	800fbee <I2C_Flush_TXDR>
 800e9b0:	e0e9      	b.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	f003 0302 	and.w	r3, r3, #2
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00e      	beq.n	800e9da <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d009      	beq.n	800e9da <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e9ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d6:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9d8:	e0d5      	b.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d05f      	beq.n	800eaa4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d05a      	beq.n	800eaa4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	f001 fbb7 	bl	8010164 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800e9f6:	2110      	movs	r1, #16
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f001 fb2f 	bl	801005c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d048      	beq.n	800ea9a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	2bff      	cmp	r3, #255	@ 0xff
 800ea10:	d910      	bls.n	800ea34 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	22ff      	movs	r2, #255	@ 0xff
 800ea16:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea1c:	b299      	uxth	r1, r3
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	2300      	movs	r3, #0
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f001 fae3 	bl	800fff8 <I2C_TransferConfig>
 800ea32:	e011      	b.n	800ea58 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea38:	b29a      	uxth	r2, r3
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea42:	b299      	uxth	r1, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	9300      	str	r3, [sp, #0]
 800ea4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f001 fad0 	bl	800fff8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea62:	1ad3      	subs	r3, r2, r3
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b22      	cmp	r3, #34	@ 0x22
 800ea74:	d108      	bne.n	800ea88 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ea84:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ea86:	e07e      	b.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea96:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ea98:	e075      	b.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ea9a:	2140      	movs	r1, #64	@ 0x40
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f000 ff8f 	bl	800f9c0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800eaa2:	e070      	b.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d05d      	beq.n	800eb6a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d058      	beq.n	800eb6a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800eab8:	2101      	movs	r1, #1
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f001 fb52 	bl	8010164 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800eac0:	2110      	movs	r1, #16
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f001 faca 	bl	801005c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	2b22      	cmp	r3, #34	@ 0x22
 800ead2:	d101      	bne.n	800ead8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800ead4:	4b31      	ldr	r3, [pc, #196]	@ (800eb9c <I2C_Mem_ISR_DMA+0x248>)
 800ead6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eadc:	b29b      	uxth	r3, r3
 800eade:	2bff      	cmp	r3, #255	@ 0xff
 800eae0:	d910      	bls.n	800eb04 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	22ff      	movs	r2, #255	@ 0xff
 800eae6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaec:	b299      	uxth	r1, r3
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaf2:	b2da      	uxtb	r2, r3
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f001 fa7b 	bl	800fff8 <I2C_TransferConfig>
 800eb02:	e011      	b.n	800eb28 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb12:	b299      	uxth	r1, r3
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f001 fa68 	bl	800fff8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb32:	1ad3      	subs	r3, r2, r3
 800eb34:	b29a      	uxth	r2, r3
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b22      	cmp	r3, #34	@ 0x22
 800eb44:	d108      	bne.n	800eb58 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eb54:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eb56:	e016      	b.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb66:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eb68:	e00d      	b.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	f003 0320 	and.w	r3, r3, #32
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d008      	beq.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800eb7e:	68b9      	ldr	r1, [r7, #8]
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f000 fbad 	bl	800f2e0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800eb8e:	2300      	movs	r3, #0
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	80002000 	.word	0x80002000
 800eb9c:	80002400 	.word	0x80002400

0800eba0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b088      	sub	sp, #32
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d101      	bne.n	800ebc4 <I2C_Slave_ISR_DMA+0x24>
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	e1c2      	b.n	800ef4a <I2C_Slave_ISR_DMA+0x3aa>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	f003 0320 	and.w	r3, r3, #32
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d009      	beq.n	800ebea <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d004      	beq.n	800ebea <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f000 fc44 	bl	800f470 <I2C_ITSlaveCplt>
 800ebe8:	e1aa      	b.n	800ef40 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	f003 0310 	and.w	r3, r3, #16
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f000 8197 	beq.w	800ef24 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 8191 	beq.w	800ef24 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d105      	bne.n	800ec18 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f000 817f 	beq.w	800ef16 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d07b      	beq.n	800ed18 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d076      	beq.n	800ed18 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a74      	ldr	r2, [pc, #464]	@ (800ee04 <I2C_Slave_ISR_DMA+0x264>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d059      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	4a72      	ldr	r2, [pc, #456]	@ (800ee08 <I2C_Slave_ISR_DMA+0x268>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d053      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a70      	ldr	r2, [pc, #448]	@ (800ee0c <I2C_Slave_ISR_DMA+0x26c>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d04d      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a6e      	ldr	r2, [pc, #440]	@ (800ee10 <I2C_Slave_ISR_DMA+0x270>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d047      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a6c      	ldr	r2, [pc, #432]	@ (800ee14 <I2C_Slave_ISR_DMA+0x274>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d041      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a6a      	ldr	r2, [pc, #424]	@ (800ee18 <I2C_Slave_ISR_DMA+0x278>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d03b      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a68      	ldr	r2, [pc, #416]	@ (800ee1c <I2C_Slave_ISR_DMA+0x27c>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d035      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4a66      	ldr	r2, [pc, #408]	@ (800ee20 <I2C_Slave_ISR_DMA+0x280>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d02f      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a64      	ldr	r2, [pc, #400]	@ (800ee24 <I2C_Slave_ISR_DMA+0x284>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d029      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4a62      	ldr	r2, [pc, #392]	@ (800ee28 <I2C_Slave_ISR_DMA+0x288>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d023      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a60      	ldr	r2, [pc, #384]	@ (800ee2c <I2C_Slave_ISR_DMA+0x28c>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d01d      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a5e      	ldr	r2, [pc, #376]	@ (800ee30 <I2C_Slave_ISR_DMA+0x290>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d017      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a5c      	ldr	r2, [pc, #368]	@ (800ee34 <I2C_Slave_ISR_DMA+0x294>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d011      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a5a      	ldr	r2, [pc, #360]	@ (800ee38 <I2C_Slave_ISR_DMA+0x298>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d00b      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a58      	ldr	r2, [pc, #352]	@ (800ee3c <I2C_Slave_ISR_DMA+0x29c>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d005      	beq.n	800ecea <I2C_Slave_ISR_DMA+0x14a>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a56      	ldr	r2, [pc, #344]	@ (800ee40 <I2C_Slave_ISR_DMA+0x2a0>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d109      	bne.n	800ecfe <I2C_Slave_ISR_DMA+0x15e>
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	bf0c      	ite	eq
 800ecf6:	2301      	moveq	r3, #1
 800ecf8:	2300      	movne	r3, #0
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	e008      	b.n	800ed10 <I2C_Slave_ISR_DMA+0x170>
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	bf0c      	ite	eq
 800ed0a:	2301      	moveq	r3, #1
 800ed0c:	2300      	movne	r3, #0
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d001      	beq.n	800ed18 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800ed14:	2301      	movs	r3, #1
 800ed16:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f000 809e 	beq.w	800ee5e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 8098 	beq.w	800ee5e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a33      	ldr	r2, [pc, #204]	@ (800ee04 <I2C_Slave_ISR_DMA+0x264>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d059      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a31      	ldr	r2, [pc, #196]	@ (800ee08 <I2C_Slave_ISR_DMA+0x268>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d053      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a2f      	ldr	r2, [pc, #188]	@ (800ee0c <I2C_Slave_ISR_DMA+0x26c>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d04d      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4a2d      	ldr	r2, [pc, #180]	@ (800ee10 <I2C_Slave_ISR_DMA+0x270>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d047      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a2b      	ldr	r2, [pc, #172]	@ (800ee14 <I2C_Slave_ISR_DMA+0x274>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d041      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a29      	ldr	r2, [pc, #164]	@ (800ee18 <I2C_Slave_ISR_DMA+0x278>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d03b      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a27      	ldr	r2, [pc, #156]	@ (800ee1c <I2C_Slave_ISR_DMA+0x27c>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d035      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a25      	ldr	r2, [pc, #148]	@ (800ee20 <I2C_Slave_ISR_DMA+0x280>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d02f      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a23      	ldr	r2, [pc, #140]	@ (800ee24 <I2C_Slave_ISR_DMA+0x284>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d029      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a21      	ldr	r2, [pc, #132]	@ (800ee28 <I2C_Slave_ISR_DMA+0x288>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d023      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a1f      	ldr	r2, [pc, #124]	@ (800ee2c <I2C_Slave_ISR_DMA+0x28c>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d01d      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ee30 <I2C_Slave_ISR_DMA+0x290>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d017      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a1b      	ldr	r2, [pc, #108]	@ (800ee34 <I2C_Slave_ISR_DMA+0x294>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d011      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a19      	ldr	r2, [pc, #100]	@ (800ee38 <I2C_Slave_ISR_DMA+0x298>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d00b      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4a17      	ldr	r2, [pc, #92]	@ (800ee3c <I2C_Slave_ISR_DMA+0x29c>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d005      	beq.n	800edee <I2C_Slave_ISR_DMA+0x24e>
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a15      	ldr	r2, [pc, #84]	@ (800ee40 <I2C_Slave_ISR_DMA+0x2a0>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d12a      	bne.n	800ee44 <I2C_Slave_ISR_DMA+0x2a4>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	bf0c      	ite	eq
 800edfa:	2301      	moveq	r3, #1
 800edfc:	2300      	movne	r3, #0
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	e029      	b.n	800ee56 <I2C_Slave_ISR_DMA+0x2b6>
 800ee02:	bf00      	nop
 800ee04:	40020010 	.word	0x40020010
 800ee08:	40020028 	.word	0x40020028
 800ee0c:	40020040 	.word	0x40020040
 800ee10:	40020058 	.word	0x40020058
 800ee14:	40020070 	.word	0x40020070
 800ee18:	40020088 	.word	0x40020088
 800ee1c:	400200a0 	.word	0x400200a0
 800ee20:	400200b8 	.word	0x400200b8
 800ee24:	40020410 	.word	0x40020410
 800ee28:	40020428 	.word	0x40020428
 800ee2c:	40020440 	.word	0x40020440
 800ee30:	40020458 	.word	0x40020458
 800ee34:	40020470 	.word	0x40020470
 800ee38:	40020488 	.word	0x40020488
 800ee3c:	400204a0 	.word	0x400204a0
 800ee40:	400204b8 	.word	0x400204b8
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	bf0c      	ite	eq
 800ee50:	2301      	moveq	r3, #1
 800ee52:	2300      	movne	r3, #0
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d001      	beq.n	800ee5e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d128      	bne.n	800eeb6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b28      	cmp	r3, #40	@ 0x28
 800ee6e:	d108      	bne.n	800ee82 <I2C_Slave_ISR_DMA+0x2e2>
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee76:	d104      	bne.n	800ee82 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ee78:	68b9      	ldr	r1, [r7, #8]
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f000 fd4c 	bl	800f918 <I2C_ITListenCplt>
 800ee80:	e048      	b.n	800ef14 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	2b29      	cmp	r3, #41	@ 0x29
 800ee8c:	d10e      	bne.n	800eeac <I2C_Slave_ISR_DMA+0x30c>
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ee94:	d00a      	beq.n	800eeac <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2210      	movs	r2, #16
 800ee9c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f000 fea5 	bl	800fbee <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f000 f9be 	bl	800f226 <I2C_ITSlaveSeqCplt>
 800eeaa:	e033      	b.n	800ef14 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2210      	movs	r2, #16
 800eeb2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800eeb4:	e034      	b.n	800ef20 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2210      	movs	r2, #16
 800eebc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eec2:	f043 0204 	orr.w	r2, r3, #4
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eed0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d003      	beq.n	800eee0 <I2C_Slave_ISR_DMA+0x340>
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eede:	d11f      	bne.n	800ef20 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800eee0:	7dfb      	ldrb	r3, [r7, #23]
 800eee2:	2b21      	cmp	r3, #33	@ 0x21
 800eee4:	d002      	beq.n	800eeec <I2C_Slave_ISR_DMA+0x34c>
 800eee6:	7dfb      	ldrb	r3, [r7, #23]
 800eee8:	2b29      	cmp	r3, #41	@ 0x29
 800eeea:	d103      	bne.n	800eef4 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2221      	movs	r2, #33	@ 0x21
 800eef0:	631a      	str	r2, [r3, #48]	@ 0x30
 800eef2:	e008      	b.n	800ef06 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800eef4:	7dfb      	ldrb	r3, [r7, #23]
 800eef6:	2b22      	cmp	r3, #34	@ 0x22
 800eef8:	d002      	beq.n	800ef00 <I2C_Slave_ISR_DMA+0x360>
 800eefa:	7dfb      	ldrb	r3, [r7, #23]
 800eefc:	2b2a      	cmp	r3, #42	@ 0x2a
 800eefe:	d102      	bne.n	800ef06 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2222      	movs	r2, #34	@ 0x22
 800ef04:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f000 fd57 	bl	800f9c0 <I2C_ITError>
      if (treatdmanack == 1U)
 800ef12:	e005      	b.n	800ef20 <I2C_Slave_ISR_DMA+0x380>
 800ef14:	e004      	b.n	800ef20 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2210      	movs	r2, #16
 800ef1c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ef1e:	e00f      	b.n	800ef40 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800ef20:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ef22:	e00d      	b.n	800ef40 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	f003 0308 	and.w	r3, r3, #8
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d008      	beq.n	800ef40 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d003      	beq.n	800ef40 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ef38:	68b9      	ldr	r1, [r7, #8]
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f000 f8b2 	bl	800f0a4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3720      	adds	r7, #32
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop

0800ef54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af02      	add	r7, sp, #8
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	4608      	mov	r0, r1
 800ef5e:	4611      	mov	r1, r2
 800ef60:	461a      	mov	r2, r3
 800ef62:	4603      	mov	r3, r0
 800ef64:	817b      	strh	r3, [r7, #10]
 800ef66:	460b      	mov	r3, r1
 800ef68:	813b      	strh	r3, [r7, #8]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ef6e:	88fb      	ldrh	r3, [r7, #6]
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	8979      	ldrh	r1, [r7, #10]
 800ef74:	4b20      	ldr	r3, [pc, #128]	@ (800eff8 <I2C_RequestMemoryWrite+0xa4>)
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f001 f83b 	bl	800fff8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef82:	69fa      	ldr	r2, [r7, #28]
 800ef84:	69b9      	ldr	r1, [r7, #24]
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f000 fecc 	bl	800fd24 <I2C_WaitOnTXISFlagUntilTimeout>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d001      	beq.n	800ef96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ef92:	2301      	movs	r3, #1
 800ef94:	e02c      	b.n	800eff0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ef96:	88fb      	ldrh	r3, [r7, #6]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d105      	bne.n	800efa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ef9c:	893b      	ldrh	r3, [r7, #8]
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	629a      	str	r2, [r3, #40]	@ 0x28
 800efa6:	e015      	b.n	800efd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800efa8:	893b      	ldrh	r3, [r7, #8]
 800efaa:	0a1b      	lsrs	r3, r3, #8
 800efac:	b29b      	uxth	r3, r3
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efb6:	69fa      	ldr	r2, [r7, #28]
 800efb8:	69b9      	ldr	r1, [r7, #24]
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f000 feb2 	bl	800fd24 <I2C_WaitOnTXISFlagUntilTimeout>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800efc6:	2301      	movs	r3, #1
 800efc8:	e012      	b.n	800eff0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800efca:	893b      	ldrh	r3, [r7, #8]
 800efcc:	b2da      	uxtb	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	2200      	movs	r2, #0
 800efdc:	2180      	movs	r1, #128	@ 0x80
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f000 fe47 	bl	800fc72 <I2C_WaitOnFlagUntilTimeout>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d001      	beq.n	800efee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	e000      	b.n	800eff0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	80002000 	.word	0x80002000

0800effc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af02      	add	r7, sp, #8
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	4608      	mov	r0, r1
 800f006:	4611      	mov	r1, r2
 800f008:	461a      	mov	r2, r3
 800f00a:	4603      	mov	r3, r0
 800f00c:	817b      	strh	r3, [r7, #10]
 800f00e:	460b      	mov	r3, r1
 800f010:	813b      	strh	r3, [r7, #8]
 800f012:	4613      	mov	r3, r2
 800f014:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f016:	88fb      	ldrh	r3, [r7, #6]
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	8979      	ldrh	r1, [r7, #10]
 800f01c:	4b20      	ldr	r3, [pc, #128]	@ (800f0a0 <I2C_RequestMemoryRead+0xa4>)
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	2300      	movs	r3, #0
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f000 ffe8 	bl	800fff8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f028:	69fa      	ldr	r2, [r7, #28]
 800f02a:	69b9      	ldr	r1, [r7, #24]
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f000 fe79 	bl	800fd24 <I2C_WaitOnTXISFlagUntilTimeout>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d001      	beq.n	800f03c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800f038:	2301      	movs	r3, #1
 800f03a:	e02c      	b.n	800f096 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f03c:	88fb      	ldrh	r3, [r7, #6]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d105      	bne.n	800f04e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f042:	893b      	ldrh	r3, [r7, #8]
 800f044:	b2da      	uxtb	r2, r3
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	629a      	str	r2, [r3, #40]	@ 0x28
 800f04c:	e015      	b.n	800f07a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f04e:	893b      	ldrh	r3, [r7, #8]
 800f050:	0a1b      	lsrs	r3, r3, #8
 800f052:	b29b      	uxth	r3, r3
 800f054:	b2da      	uxtb	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f05c:	69fa      	ldr	r2, [r7, #28]
 800f05e:	69b9      	ldr	r1, [r7, #24]
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f000 fe5f 	bl	800fd24 <I2C_WaitOnTXISFlagUntilTimeout>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d001      	beq.n	800f070 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800f06c:	2301      	movs	r3, #1
 800f06e:	e012      	b.n	800f096 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f070:	893b      	ldrh	r3, [r7, #8]
 800f072:	b2da      	uxtb	r2, r3
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	2200      	movs	r2, #0
 800f082:	2140      	movs	r1, #64	@ 0x40
 800f084:	68f8      	ldr	r0, [r7, #12]
 800f086:	f000 fdf4 	bl	800fc72 <I2C_WaitOnFlagUntilTimeout>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d001      	beq.n	800f094 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800f090:	2301      	movs	r3, #1
 800f092:	e000      	b.n	800f096 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800f094:	2300      	movs	r3, #0
}
 800f096:	4618      	mov	r0, r3
 800f098:	3710      	adds	r7, #16
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	80002000 	.word	0x80002000

0800f0a4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f0ba:	2b28      	cmp	r3, #40	@ 0x28
 800f0bc:	d16a      	bne.n	800f194 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	0c1b      	lsrs	r3, r3, #16
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	f003 0301 	and.w	r3, r3, #1
 800f0cc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	699b      	ldr	r3, [r3, #24]
 800f0d4:	0c1b      	lsrs	r3, r3, #16
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f0dc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	689b      	ldr	r3, [r3, #8]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0ea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f0f8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d138      	bne.n	800f174 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800f102:	897b      	ldrh	r3, [r7, #10]
 800f104:	09db      	lsrs	r3, r3, #7
 800f106:	b29a      	uxth	r2, r3
 800f108:	89bb      	ldrh	r3, [r7, #12]
 800f10a:	4053      	eors	r3, r2
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	f003 0306 	and.w	r3, r3, #6
 800f112:	2b00      	cmp	r3, #0
 800f114:	d11c      	bne.n	800f150 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800f116:	897b      	ldrh	r3, [r7, #10]
 800f118:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f11e:	1c5a      	adds	r2, r3, #1
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f128:	2b02      	cmp	r3, #2
 800f12a:	d13b      	bne.n	800f1a4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2208      	movs	r2, #8
 800f138:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f142:	89ba      	ldrh	r2, [r7, #12]
 800f144:	7bfb      	ldrb	r3, [r7, #15]
 800f146:	4619      	mov	r1, r3
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7ff f8cd 	bl	800e2e8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f14e:	e029      	b.n	800f1a4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800f150:	893b      	ldrh	r3, [r7, #8]
 800f152:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f001 f803 	bl	8010164 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2200      	movs	r2, #0
 800f162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f166:	89ba      	ldrh	r2, [r7, #12]
 800f168:	7bfb      	ldrb	r3, [r7, #15]
 800f16a:	4619      	mov	r1, r3
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f7ff f8bb 	bl	800e2e8 <HAL_I2C_AddrCallback>
}
 800f172:	e017      	b.n	800f1a4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f174:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f000 fff3 	bl	8010164 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f186:	89ba      	ldrh	r2, [r7, #12]
 800f188:	7bfb      	ldrb	r3, [r7, #15]
 800f18a:	4619      	mov	r1, r3
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f7ff f8ab 	bl	800e2e8 <HAL_I2C_AddrCallback>
}
 800f192:	e007      	b.n	800f1a4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	2208      	movs	r2, #8
 800f19a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800f1a4:	bf00      	nop
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	2b21      	cmp	r3, #33	@ 0x21
 800f1c6:	d115      	bne.n	800f1f4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2220      	movs	r2, #32
 800f1cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2211      	movs	r2, #17
 800f1d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f1dc:	2101      	movs	r1, #1
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 ffc0 	bl	8010164 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f7ff f853 	bl	800e298 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f1f2:	e014      	b.n	800f21e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2220      	movs	r2, #32
 800f1f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2212      	movs	r2, #18
 800f200:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f208:	2102      	movs	r1, #2
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 ffaa 	bl	8010164 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f7ff f847 	bl	800e2ac <HAL_I2C_MasterRxCpltCallback>
}
 800f21e:	bf00      	nop
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b084      	sub	sp, #16
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2200      	movs	r2, #0
 800f23a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d008      	beq.n	800f25a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f256:	601a      	str	r2, [r3, #0]
 800f258:	e00c      	b.n	800f274 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f260:	2b00      	cmp	r3, #0
 800f262:	d007      	beq.n	800f274 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f272:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	2b29      	cmp	r3, #41	@ 0x29
 800f27e:	d112      	bne.n	800f2a6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2228      	movs	r2, #40	@ 0x28
 800f284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2221      	movs	r2, #33	@ 0x21
 800f28c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f28e:	2101      	movs	r1, #1
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 ff67 	bl	8010164 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2200      	movs	r2, #0
 800f29a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7ff f80e 	bl	800e2c0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f2a4:	e017      	b.n	800f2d6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2b0:	d111      	bne.n	800f2d6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2228      	movs	r2, #40	@ 0x28
 800f2b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2222      	movs	r2, #34	@ 0x22
 800f2be:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f2c0:	2102      	movs	r1, #2
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 ff4e 	bl	8010164 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7fe ffff 	bl	800e2d4 <HAL_I2C_SlaveRxCpltCallback>
}
 800f2d6:	bf00      	nop
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
	...

0800f2e0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2220      	movs	r2, #32
 800f2f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	2b21      	cmp	r3, #33	@ 0x21
 800f300:	d107      	bne.n	800f312 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f302:	2101      	movs	r1, #1
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 ff2d 	bl	8010164 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2211      	movs	r2, #17
 800f30e:	631a      	str	r2, [r3, #48]	@ 0x30
 800f310:	e00c      	b.n	800f32c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	2b22      	cmp	r3, #34	@ 0x22
 800f31c:	d106      	bne.n	800f32c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f31e:	2102      	movs	r1, #2
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 ff1f 	bl	8010164 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2212      	movs	r2, #18
 800f32a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	6859      	ldr	r1, [r3, #4]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	4b4c      	ldr	r3, [pc, #304]	@ (800f468 <I2C_ITMasterCplt+0x188>)
 800f338:	400b      	ands	r3, r1
 800f33a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4a49      	ldr	r2, [pc, #292]	@ (800f46c <I2C_ITMasterCplt+0x18c>)
 800f346:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	f003 0310 	and.w	r3, r3, #16
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d009      	beq.n	800f366 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2210      	movs	r2, #16
 800f358:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f35e:	f043 0204 	orr.w	r2, r3, #4
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	2b60      	cmp	r3, #96	@ 0x60
 800f370:	d10a      	bne.n	800f388 <I2C_ITMasterCplt+0xa8>
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	f003 0304 	and.w	r3, r3, #4
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d005      	beq.n	800f388 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f382:	b2db      	uxtb	r3, r3
 800f384:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800f386:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fc30 	bl	800fbee <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f392:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	2b60      	cmp	r3, #96	@ 0x60
 800f39e:	d002      	beq.n	800f3a6 <I2C_ITMasterCplt+0xc6>
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d006      	beq.n	800f3b4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 fb07 	bl	800f9c0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f3b2:	e054      	b.n	800f45e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b21      	cmp	r3, #33	@ 0x21
 800f3be:	d124      	bne.n	800f40a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2220      	movs	r2, #32
 800f3c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b40      	cmp	r3, #64	@ 0x40
 800f3d8:	d10b      	bne.n	800f3f2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7f6 fd5c 	bl	8005ea8 <HAL_I2C_MemTxCpltCallback>
}
 800f3f0:	e035      	b.n	800f45e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f7fe ff48 	bl	800e298 <HAL_I2C_MasterTxCpltCallback>
}
 800f408:	e029      	b.n	800f45e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f410:	b2db      	uxtb	r3, r3
 800f412:	2b22      	cmp	r3, #34	@ 0x22
 800f414:	d123      	bne.n	800f45e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2220      	movs	r2, #32
 800f41a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	2b40      	cmp	r3, #64	@ 0x40
 800f42e:	d10b      	bne.n	800f448 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f7f6 fd3d 	bl	8005ec0 <HAL_I2C_MemRxCpltCallback>
}
 800f446:	e00a      	b.n	800f45e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f7fe ff27 	bl	800e2ac <HAL_I2C_MasterRxCpltCallback>
}
 800f45e:	bf00      	nop
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	fe00e800 	.word	0xfe00e800
 800f46c:	ffff0000 	.word	0xffff0000

0800f470 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b086      	sub	sp, #24
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f48a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f492:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2220      	movs	r2, #32
 800f49a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f49c:	7afb      	ldrb	r3, [r7, #11]
 800f49e:	2b21      	cmp	r3, #33	@ 0x21
 800f4a0:	d002      	beq.n	800f4a8 <I2C_ITSlaveCplt+0x38>
 800f4a2:	7afb      	ldrb	r3, [r7, #11]
 800f4a4:	2b29      	cmp	r3, #41	@ 0x29
 800f4a6:	d108      	bne.n	800f4ba <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800f4a8:	f248 0101 	movw	r1, #32769	@ 0x8001
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fe59 	bl	8010164 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2221      	movs	r2, #33	@ 0x21
 800f4b6:	631a      	str	r2, [r3, #48]	@ 0x30
 800f4b8:	e019      	b.n	800f4ee <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f4ba:	7afb      	ldrb	r3, [r7, #11]
 800f4bc:	2b22      	cmp	r3, #34	@ 0x22
 800f4be:	d002      	beq.n	800f4c6 <I2C_ITSlaveCplt+0x56>
 800f4c0:	7afb      	ldrb	r3, [r7, #11]
 800f4c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4c4:	d108      	bne.n	800f4d8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800f4c6:	f248 0102 	movw	r1, #32770	@ 0x8002
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 fe4a 	bl	8010164 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2222      	movs	r2, #34	@ 0x22
 800f4d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800f4d6:	e00a      	b.n	800f4ee <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800f4d8:	7afb      	ldrb	r3, [r7, #11]
 800f4da:	2b28      	cmp	r3, #40	@ 0x28
 800f4dc:	d107      	bne.n	800f4ee <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800f4de:	f248 0103 	movw	r1, #32771	@ 0x8003
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fe3e 	bl	8010164 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	685a      	ldr	r2, [r3, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f4fc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	6859      	ldr	r1, [r3, #4]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	4b7f      	ldr	r3, [pc, #508]	@ (800f708 <I2C_ITSlaveCplt+0x298>)
 800f50a:	400b      	ands	r3, r1
 800f50c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 fb6d 	bl	800fbee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d07a      	beq.n	800f614 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f52c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f532:	2b00      	cmp	r3, #0
 800f534:	f000 8111 	beq.w	800f75a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4a73      	ldr	r2, [pc, #460]	@ (800f70c <I2C_ITSlaveCplt+0x29c>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d059      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4a71      	ldr	r2, [pc, #452]	@ (800f710 <I2C_ITSlaveCplt+0x2a0>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d053      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a6f      	ldr	r2, [pc, #444]	@ (800f714 <I2C_ITSlaveCplt+0x2a4>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d04d      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4a6d      	ldr	r2, [pc, #436]	@ (800f718 <I2C_ITSlaveCplt+0x2a8>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d047      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4a6b      	ldr	r2, [pc, #428]	@ (800f71c <I2C_ITSlaveCplt+0x2ac>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d041      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a69      	ldr	r2, [pc, #420]	@ (800f720 <I2C_ITSlaveCplt+0x2b0>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d03b      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4a67      	ldr	r2, [pc, #412]	@ (800f724 <I2C_ITSlaveCplt+0x2b4>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d035      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a65      	ldr	r2, [pc, #404]	@ (800f728 <I2C_ITSlaveCplt+0x2b8>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d02f      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a63      	ldr	r2, [pc, #396]	@ (800f72c <I2C_ITSlaveCplt+0x2bc>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d029      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a61      	ldr	r2, [pc, #388]	@ (800f730 <I2C_ITSlaveCplt+0x2c0>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d023      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a5f      	ldr	r2, [pc, #380]	@ (800f734 <I2C_ITSlaveCplt+0x2c4>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d01d      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a5d      	ldr	r2, [pc, #372]	@ (800f738 <I2C_ITSlaveCplt+0x2c8>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d017      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4a5b      	ldr	r2, [pc, #364]	@ (800f73c <I2C_ITSlaveCplt+0x2cc>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d011      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4a59      	ldr	r2, [pc, #356]	@ (800f740 <I2C_ITSlaveCplt+0x2d0>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d00b      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4a57      	ldr	r2, [pc, #348]	@ (800f744 <I2C_ITSlaveCplt+0x2d4>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d005      	beq.n	800f5f8 <I2C_ITSlaveCplt+0x188>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a55      	ldr	r2, [pc, #340]	@ (800f748 <I2C_ITSlaveCplt+0x2d8>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d105      	bne.n	800f604 <I2C_ITSlaveCplt+0x194>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	b29b      	uxth	r3, r3
 800f602:	e004      	b.n	800f60e <I2C_ITSlaveCplt+0x19e>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800f612:	e0a2      	b.n	800f75a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f000 809d 	beq.w	800f75a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f62e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f634:	2b00      	cmp	r3, #0
 800f636:	f000 8090 	beq.w	800f75a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4a32      	ldr	r2, [pc, #200]	@ (800f70c <I2C_ITSlaveCplt+0x29c>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d059      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a30      	ldr	r2, [pc, #192]	@ (800f710 <I2C_ITSlaveCplt+0x2a0>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d053      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a2e      	ldr	r2, [pc, #184]	@ (800f714 <I2C_ITSlaveCplt+0x2a4>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d04d      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4a2c      	ldr	r2, [pc, #176]	@ (800f718 <I2C_ITSlaveCplt+0x2a8>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d047      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a2a      	ldr	r2, [pc, #168]	@ (800f71c <I2C_ITSlaveCplt+0x2ac>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d041      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a28      	ldr	r2, [pc, #160]	@ (800f720 <I2C_ITSlaveCplt+0x2b0>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d03b      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a26      	ldr	r2, [pc, #152]	@ (800f724 <I2C_ITSlaveCplt+0x2b4>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d035      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a24      	ldr	r2, [pc, #144]	@ (800f728 <I2C_ITSlaveCplt+0x2b8>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d02f      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a22      	ldr	r2, [pc, #136]	@ (800f72c <I2C_ITSlaveCplt+0x2bc>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d029      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a20      	ldr	r2, [pc, #128]	@ (800f730 <I2C_ITSlaveCplt+0x2c0>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d023      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a1e      	ldr	r2, [pc, #120]	@ (800f734 <I2C_ITSlaveCplt+0x2c4>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d01d      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800f738 <I2C_ITSlaveCplt+0x2c8>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d017      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a1a      	ldr	r2, [pc, #104]	@ (800f73c <I2C_ITSlaveCplt+0x2cc>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d011      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a18      	ldr	r2, [pc, #96]	@ (800f740 <I2C_ITSlaveCplt+0x2d0>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d00b      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a16      	ldr	r2, [pc, #88]	@ (800f744 <I2C_ITSlaveCplt+0x2d4>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d005      	beq.n	800f6fa <I2C_ITSlaveCplt+0x28a>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a14      	ldr	r2, [pc, #80]	@ (800f748 <I2C_ITSlaveCplt+0x2d8>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d128      	bne.n	800f74c <I2C_ITSlaveCplt+0x2dc>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	b29b      	uxth	r3, r3
 800f704:	e027      	b.n	800f756 <I2C_ITSlaveCplt+0x2e6>
 800f706:	bf00      	nop
 800f708:	fe00e800 	.word	0xfe00e800
 800f70c:	40020010 	.word	0x40020010
 800f710:	40020028 	.word	0x40020028
 800f714:	40020040 	.word	0x40020040
 800f718:	40020058 	.word	0x40020058
 800f71c:	40020070 	.word	0x40020070
 800f720:	40020088 	.word	0x40020088
 800f724:	400200a0 	.word	0x400200a0
 800f728:	400200b8 	.word	0x400200b8
 800f72c:	40020410 	.word	0x40020410
 800f730:	40020428 	.word	0x40020428
 800f734:	40020440 	.word	0x40020440
 800f738:	40020458 	.word	0x40020458
 800f73c:	40020470 	.word	0x40020470
 800f740:	40020488 	.word	0x40020488
 800f744:	400204a0 	.word	0x400204a0
 800f748:	400204b8 	.word	0x400204b8
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	b29b      	uxth	r3, r3
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	f003 0304 	and.w	r3, r3, #4
 800f760:	2b00      	cmp	r3, #0
 800f762:	d020      	beq.n	800f7a6 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	f023 0304 	bic.w	r3, r3, #4
 800f76a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f776:	b2d2      	uxtb	r2, r2
 800f778:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77e:	1c5a      	adds	r2, r3, #1
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d00c      	beq.n	800f7a6 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f790:	3b01      	subs	r3, #1
 800f792:	b29a      	uxth	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d005      	beq.n	800f7bc <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7b4:	f043 0204 	orr.w	r2, r3, #4
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	f003 0310 	and.w	r3, r3, #16
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d049      	beq.n	800f85a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d044      	beq.n	800f85a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d128      	bne.n	800f82c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b28      	cmp	r3, #40	@ 0x28
 800f7e4:	d108      	bne.n	800f7f8 <I2C_ITSlaveCplt+0x388>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f7ec:	d104      	bne.n	800f7f8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f7ee:	6979      	ldr	r1, [r7, #20]
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 f891 	bl	800f918 <I2C_ITListenCplt>
 800f7f6:	e030      	b.n	800f85a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	2b29      	cmp	r3, #41	@ 0x29
 800f802:	d10e      	bne.n	800f822 <I2C_ITSlaveCplt+0x3b2>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f80a:	d00a      	beq.n	800f822 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2210      	movs	r2, #16
 800f812:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 f9ea 	bl	800fbee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f7ff fd03 	bl	800f226 <I2C_ITSlaveSeqCplt>
 800f820:	e01b      	b.n	800f85a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2210      	movs	r2, #16
 800f828:	61da      	str	r2, [r3, #28]
 800f82a:	e016      	b.n	800f85a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2210      	movs	r2, #16
 800f832:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f838:	f043 0204 	orr.w	r2, r3, #4
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d003      	beq.n	800f84e <I2C_ITSlaveCplt+0x3de>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f84c:	d105      	bne.n	800f85a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f852:	4619      	mov	r1, r3
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f8b3 	bl	800f9c0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d010      	beq.n	800f892 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f874:	4619      	mov	r1, r3
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 f8a2 	bl	800f9c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b28      	cmp	r3, #40	@ 0x28
 800f886:	d141      	bne.n	800f90c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800f888:	6979      	ldr	r1, [r7, #20]
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 f844 	bl	800f918 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f890:	e03c      	b.n	800f90c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f896:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f89a:	d014      	beq.n	800f8c6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7ff fcc2 	bl	800f226 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4a1b      	ldr	r2, [pc, #108]	@ (800f914 <I2C_ITSlaveCplt+0x4a4>)
 800f8a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2220      	movs	r2, #32
 800f8ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7fe fd20 	bl	800e304 <HAL_I2C_ListenCpltCallback>
}
 800f8c4:	e022      	b.n	800f90c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b22      	cmp	r3, #34	@ 0x22
 800f8d0:	d10e      	bne.n	800f8f0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2220      	movs	r2, #32
 800f8d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7fe fcf3 	bl	800e2d4 <HAL_I2C_SlaveRxCpltCallback>
}
 800f8ee:	e00d      	b.n	800f90c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2220      	movs	r2, #32
 800f8f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7fe fcda 	bl	800e2c0 <HAL_I2C_SlaveTxCpltCallback>
}
 800f90c:	bf00      	nop
 800f90e:	3718      	adds	r7, #24
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	ffff0000 	.word	0xffff0000

0800f918 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4a25      	ldr	r2, [pc, #148]	@ (800f9bc <I2C_ITListenCplt+0xa4>)
 800f926:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2200      	movs	r2, #0
 800f92c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2220      	movs	r2, #32
 800f932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2200      	movs	r2, #0
 800f942:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	f003 0304 	and.w	r3, r3, #4
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d022      	beq.n	800f994 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f958:	b2d2      	uxtb	r2, r2
 800f95a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f960:	1c5a      	adds	r2, r3, #1
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d012      	beq.n	800f994 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f972:	3b01      	subs	r3, #1
 800f974:	b29a      	uxth	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f97e:	b29b      	uxth	r3, r3
 800f980:	3b01      	subs	r3, #1
 800f982:	b29a      	uxth	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f98c:	f043 0204 	orr.w	r2, r3, #4
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f994:	f248 0103 	movw	r1, #32771	@ 0x8003
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 fbe3 	bl	8010164 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2210      	movs	r2, #16
 800f9a4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7fe fca8 	bl	800e304 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800f9b4:	bf00      	nop
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	ffff0000 	.word	0xffff0000

0800f9c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f9d0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a6d      	ldr	r2, [pc, #436]	@ (800fb94 <I2C_ITError+0x1d4>)
 800f9de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	431a      	orrs	r2, r3
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800f9f2:	7bfb      	ldrb	r3, [r7, #15]
 800f9f4:	2b28      	cmp	r3, #40	@ 0x28
 800f9f6:	d005      	beq.n	800fa04 <I2C_ITError+0x44>
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
 800f9fa:	2b29      	cmp	r3, #41	@ 0x29
 800f9fc:	d002      	beq.n	800fa04 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800f9fe:	7bfb      	ldrb	r3, [r7, #15]
 800fa00:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa02:	d10b      	bne.n	800fa1c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fa04:	2103      	movs	r1, #3
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 fbac 	bl	8010164 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2228      	movs	r2, #40	@ 0x28
 800fa10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a60      	ldr	r2, [pc, #384]	@ (800fb98 <I2C_ITError+0x1d8>)
 800fa18:	635a      	str	r2, [r3, #52]	@ 0x34
 800fa1a:	e030      	b.n	800fa7e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800fa1c:	f248 0103 	movw	r1, #32771	@ 0x8003
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 fb9f 	bl	8010164 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 f8e1 	bl	800fbee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b60      	cmp	r3, #96	@ 0x60
 800fa36:	d01f      	beq.n	800fa78 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2220      	movs	r2, #32
 800fa3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	699b      	ldr	r3, [r3, #24]
 800fa46:	f003 0320 	and.w	r3, r3, #32
 800fa4a:	2b20      	cmp	r3, #32
 800fa4c:	d114      	bne.n	800fa78 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	f003 0310 	and.w	r3, r3, #16
 800fa58:	2b10      	cmp	r3, #16
 800fa5a:	d109      	bne.n	800fa70 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2210      	movs	r2, #16
 800fa62:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa68:	f043 0204 	orr.w	r2, r3, #4
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2220      	movs	r2, #32
 800fa76:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa82:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d039      	beq.n	800fb00 <I2C_ITError+0x140>
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2b11      	cmp	r3, #17
 800fa90:	d002      	beq.n	800fa98 <I2C_ITError+0xd8>
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	2b21      	cmp	r3, #33	@ 0x21
 800fa96:	d133      	bne.n	800fb00 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800faa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800faa6:	d107      	bne.n	800fab8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fab6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fd fa01 	bl	800cec4 <HAL_DMA_GetState>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d017      	beq.n	800faf8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800facc:	4a33      	ldr	r2, [pc, #204]	@ (800fb9c <I2C_ITError+0x1dc>)
 800face:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fc f881 	bl	800bbe4 <HAL_DMA_Abort_IT>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d04d      	beq.n	800fb84 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800faf2:	4610      	mov	r0, r2
 800faf4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800faf6:	e045      	b.n	800fb84 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f000 f851 	bl	800fba0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fafe:	e041      	b.n	800fb84 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d039      	beq.n	800fb7c <I2C_ITError+0x1bc>
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2b12      	cmp	r3, #18
 800fb0c:	d002      	beq.n	800fb14 <I2C_ITError+0x154>
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2b22      	cmp	r3, #34	@ 0x22
 800fb12:	d133      	bne.n	800fb7c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fb22:	d107      	bne.n	800fb34 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fb32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fd f9c3 	bl	800cec4 <HAL_DMA_GetState>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d017      	beq.n	800fb74 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb48:	4a14      	ldr	r2, [pc, #80]	@ (800fb9c <I2C_ITError+0x1dc>)
 800fb4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fc f843 	bl	800bbe4 <HAL_DMA_Abort_IT>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d011      	beq.n	800fb88 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fb6e:	4610      	mov	r0, r2
 800fb70:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb72:	e009      	b.n	800fb88 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f000 f813 	bl	800fba0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb7a:	e005      	b.n	800fb88 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 f80f 	bl	800fba0 <I2C_TreatErrorCallback>
  }
}
 800fb82:	e002      	b.n	800fb8a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fb84:	bf00      	nop
 800fb86:	e000      	b.n	800fb8a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb88:	bf00      	nop
}
 800fb8a:	bf00      	nop
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	ffff0000 	.word	0xffff0000
 800fb98:	0800e58d 	.word	0x0800e58d
 800fb9c:	0800fc37 	.word	0x0800fc37

0800fba0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b60      	cmp	r3, #96	@ 0x60
 800fbb2:	d10e      	bne.n	800fbd2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2220      	movs	r2, #32
 800fbb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7fe fbae 	bl	800e32c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fbd0:	e009      	b.n	800fbe6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f7fe fb99 	bl	800e318 <HAL_I2C_ErrorCallback>
}
 800fbe6:	bf00      	nop
 800fbe8:	3708      	adds	r7, #8
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fbee:	b480      	push	{r7}
 800fbf0:	b083      	sub	sp, #12
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	699b      	ldr	r3, [r3, #24]
 800fbfc:	f003 0302 	and.w	r3, r3, #2
 800fc00:	2b02      	cmp	r3, #2
 800fc02:	d103      	bne.n	800fc0c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	699b      	ldr	r3, [r3, #24]
 800fc12:	f003 0301 	and.w	r3, r3, #1
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d007      	beq.n	800fc2a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	699a      	ldr	r2, [r3, #24]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f042 0201 	orr.w	r2, r2, #1
 800fc28:	619a      	str	r2, [r3, #24]
  }
}
 800fc2a:	bf00      	nop
 800fc2c:	370c      	adds	r7, #12
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr

0800fc36 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800fc36:	b580      	push	{r7, lr}
 800fc38:	b084      	sub	sp, #16
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc42:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d003      	beq.n	800fc54 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc50:	2200      	movs	r2, #0
 800fc52:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d003      	beq.n	800fc64 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc60:	2200      	movs	r2, #0
 800fc62:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f7ff ff9b 	bl	800fba0 <I2C_TreatErrorCallback>
}
 800fc6a:	bf00      	nop
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b084      	sub	sp, #16
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	60f8      	str	r0, [r7, #12]
 800fc7a:	60b9      	str	r1, [r7, #8]
 800fc7c:	603b      	str	r3, [r7, #0]
 800fc7e:	4613      	mov	r3, r2
 800fc80:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fc82:	e03b      	b.n	800fcfc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fc84:	69ba      	ldr	r2, [r7, #24]
 800fc86:	6839      	ldr	r1, [r7, #0]
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f000 f8d5 	bl	800fe38 <I2C_IsErrorOccurred>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d001      	beq.n	800fc98 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800fc94:	2301      	movs	r3, #1
 800fc96:	e041      	b.n	800fd1c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc9e:	d02d      	beq.n	800fcfc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fca0:	f7f8 fd8a 	bl	80087b8 <HAL_GetTick>
 800fca4:	4602      	mov	r2, r0
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d302      	bcc.n	800fcb6 <I2C_WaitOnFlagUntilTimeout+0x44>
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d122      	bne.n	800fcfc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	699a      	ldr	r2, [r3, #24]
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	4013      	ands	r3, r2
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	bf0c      	ite	eq
 800fcc6:	2301      	moveq	r3, #1
 800fcc8:	2300      	movne	r3, #0
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	461a      	mov	r2, r3
 800fcce:	79fb      	ldrb	r3, [r7, #7]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d113      	bne.n	800fcfc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcd8:	f043 0220 	orr.w	r2, r3, #32
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2220      	movs	r2, #32
 800fce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2200      	movs	r2, #0
 800fcec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e00f      	b.n	800fd1c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	699a      	ldr	r2, [r3, #24]
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	4013      	ands	r3, r2
 800fd06:	68ba      	ldr	r2, [r7, #8]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	bf0c      	ite	eq
 800fd0c:	2301      	moveq	r3, #1
 800fd0e:	2300      	movne	r3, #0
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	461a      	mov	r2, r3
 800fd14:	79fb      	ldrb	r3, [r7, #7]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d0b4      	beq.n	800fc84 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd1a:	2300      	movs	r3, #0
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fd30:	e033      	b.n	800fd9a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	68b9      	ldr	r1, [r7, #8]
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f000 f87e 	bl	800fe38 <I2C_IsErrorOccurred>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fd42:	2301      	movs	r3, #1
 800fd44:	e031      	b.n	800fdaa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd4c:	d025      	beq.n	800fd9a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd4e:	f7f8 fd33 	bl	80087b8 <HAL_GetTick>
 800fd52:	4602      	mov	r2, r0
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	68ba      	ldr	r2, [r7, #8]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d302      	bcc.n	800fd64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d11a      	bne.n	800fd9a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	699b      	ldr	r3, [r3, #24]
 800fd6a:	f003 0302 	and.w	r3, r3, #2
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d013      	beq.n	800fd9a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd76:	f043 0220 	orr.w	r2, r3, #32
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2220      	movs	r2, #32
 800fd82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fd96:	2301      	movs	r3, #1
 800fd98:	e007      	b.n	800fdaa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	699b      	ldr	r3, [r3, #24]
 800fda0:	f003 0302 	and.w	r3, r3, #2
 800fda4:	2b02      	cmp	r3, #2
 800fda6:	d1c4      	bne.n	800fd32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	60f8      	str	r0, [r7, #12]
 800fdba:	60b9      	str	r1, [r7, #8]
 800fdbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fdbe:	e02f      	b.n	800fe20 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	68b9      	ldr	r1, [r7, #8]
 800fdc4:	68f8      	ldr	r0, [r7, #12]
 800fdc6:	f000 f837 	bl	800fe38 <I2C_IsErrorOccurred>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e02d      	b.n	800fe30 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fdd4:	f7f8 fcf0 	bl	80087b8 <HAL_GetTick>
 800fdd8:	4602      	mov	r2, r0
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	1ad3      	subs	r3, r2, r3
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d302      	bcc.n	800fdea <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d11a      	bne.n	800fe20 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	699b      	ldr	r3, [r3, #24]
 800fdf0:	f003 0320 	and.w	r3, r3, #32
 800fdf4:	2b20      	cmp	r3, #32
 800fdf6:	d013      	beq.n	800fe20 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdfc:	f043 0220 	orr.w	r2, r3, #32
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2220      	movs	r2, #32
 800fe08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	e007      	b.n	800fe30 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	699b      	ldr	r3, [r3, #24]
 800fe26:	f003 0320 	and.w	r3, r3, #32
 800fe2a:	2b20      	cmp	r3, #32
 800fe2c:	d1c8      	bne.n	800fdc0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800fe2e:	2300      	movs	r3, #0
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08a      	sub	sp, #40	@ 0x28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe44:	2300      	movs	r3, #0
 800fe46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	699b      	ldr	r3, [r3, #24]
 800fe50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800fe52:	2300      	movs	r3, #0
 800fe54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	f003 0310 	and.w	r3, r3, #16
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d068      	beq.n	800ff36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2210      	movs	r2, #16
 800fe6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800fe6c:	e049      	b.n	800ff02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe74:	d045      	beq.n	800ff02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800fe76:	f7f8 fc9f 	bl	80087b8 <HAL_GetTick>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	68ba      	ldr	r2, [r7, #8]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d302      	bcc.n	800fe8c <I2C_IsErrorOccurred+0x54>
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d13a      	bne.n	800ff02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	699b      	ldr	r3, [r3, #24]
 800fea6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800feaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800feae:	d121      	bne.n	800fef4 <I2C_IsErrorOccurred+0xbc>
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800feb6:	d01d      	beq.n	800fef4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800feb8:	7cfb      	ldrb	r3, [r7, #19]
 800feba:	2b20      	cmp	r3, #32
 800febc:	d01a      	beq.n	800fef4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	685a      	ldr	r2, [r3, #4]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fecc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800fece:	f7f8 fc73 	bl	80087b8 <HAL_GetTick>
 800fed2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fed4:	e00e      	b.n	800fef4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800fed6:	f7f8 fc6f 	bl	80087b8 <HAL_GetTick>
 800feda:	4602      	mov	r2, r0
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	1ad3      	subs	r3, r2, r3
 800fee0:	2b19      	cmp	r3, #25
 800fee2:	d907      	bls.n	800fef4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800fee4:	6a3b      	ldr	r3, [r7, #32]
 800fee6:	f043 0320 	orr.w	r3, r3, #32
 800feea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800feec:	2301      	movs	r3, #1
 800feee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800fef2:	e006      	b.n	800ff02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	699b      	ldr	r3, [r3, #24]
 800fefa:	f003 0320 	and.w	r3, r3, #32
 800fefe:	2b20      	cmp	r3, #32
 800ff00:	d1e9      	bne.n	800fed6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	699b      	ldr	r3, [r3, #24]
 800ff08:	f003 0320 	and.w	r3, r3, #32
 800ff0c:	2b20      	cmp	r3, #32
 800ff0e:	d003      	beq.n	800ff18 <I2C_IsErrorOccurred+0xe0>
 800ff10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d0aa      	beq.n	800fe6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ff18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d103      	bne.n	800ff28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2220      	movs	r2, #32
 800ff26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ff28:	6a3b      	ldr	r3, [r7, #32]
 800ff2a:	f043 0304 	orr.w	r3, r3, #4
 800ff2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ff30:	2301      	movs	r3, #1
 800ff32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ff3e:	69bb      	ldr	r3, [r7, #24]
 800ff40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d00b      	beq.n	800ff60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ff48:	6a3b      	ldr	r3, [r7, #32]
 800ff4a:	f043 0301 	orr.w	r3, r3, #1
 800ff4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ff58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d00b      	beq.n	800ff82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ff6a:	6a3b      	ldr	r3, [r7, #32]
 800ff6c:	f043 0308 	orr.w	r3, r3, #8
 800ff70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ff7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ff82:	69bb      	ldr	r3, [r7, #24]
 800ff84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d00b      	beq.n	800ffa4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ff8c:	6a3b      	ldr	r3, [r7, #32]
 800ff8e:	f043 0302 	orr.w	r3, r3, #2
 800ff92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ffa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01c      	beq.n	800ffe6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f7ff fe1e 	bl	800fbee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6859      	ldr	r1, [r3, #4]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	4b0d      	ldr	r3, [pc, #52]	@ (800fff4 <I2C_IsErrorOccurred+0x1bc>)
 800ffbe:	400b      	ands	r3, r1
 800ffc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ffc6:	6a3b      	ldr	r3, [r7, #32]
 800ffc8:	431a      	orrs	r2, r3
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2220      	movs	r2, #32
 800ffd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ffe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3728      	adds	r7, #40	@ 0x28
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	fe00e800 	.word	0xfe00e800

0800fff8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800fff8:	b480      	push	{r7}
 800fffa:	b087      	sub	sp, #28
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	60f8      	str	r0, [r7, #12]
 8010000:	607b      	str	r3, [r7, #4]
 8010002:	460b      	mov	r3, r1
 8010004:	817b      	strh	r3, [r7, #10]
 8010006:	4613      	mov	r3, r2
 8010008:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801000a:	897b      	ldrh	r3, [r7, #10]
 801000c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010010:	7a7b      	ldrb	r3, [r7, #9]
 8010012:	041b      	lsls	r3, r3, #16
 8010014:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010018:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801001e:	6a3b      	ldr	r3, [r7, #32]
 8010020:	4313      	orrs	r3, r2
 8010022:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010026:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	6a3b      	ldr	r3, [r7, #32]
 8010030:	0d5b      	lsrs	r3, r3, #21
 8010032:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010036:	4b08      	ldr	r3, [pc, #32]	@ (8010058 <I2C_TransferConfig+0x60>)
 8010038:	430b      	orrs	r3, r1
 801003a:	43db      	mvns	r3, r3
 801003c:	ea02 0103 	and.w	r1, r2, r3
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	697a      	ldr	r2, [r7, #20]
 8010046:	430a      	orrs	r2, r1
 8010048:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801004a:	bf00      	nop
 801004c:	371c      	adds	r7, #28
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	03ff63ff 	.word	0x03ff63ff

0801005c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801005c:	b480      	push	{r7}
 801005e:	b085      	sub	sp, #20
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	460b      	mov	r3, r1
 8010066:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010068:	2300      	movs	r3, #0
 801006a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010070:	4a39      	ldr	r2, [pc, #228]	@ (8010158 <I2C_Enable_IRQ+0xfc>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d032      	beq.n	80100dc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801007a:	4a38      	ldr	r2, [pc, #224]	@ (801015c <I2C_Enable_IRQ+0x100>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d02d      	beq.n	80100dc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010084:	4a36      	ldr	r2, [pc, #216]	@ (8010160 <I2C_Enable_IRQ+0x104>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d028      	beq.n	80100dc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801008a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801008e:	2b00      	cmp	r3, #0
 8010090:	da03      	bge.n	801009a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010098:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801009a:	887b      	ldrh	r3, [r7, #2]
 801009c:	f003 0301 	and.w	r3, r3, #1
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d003      	beq.n	80100ac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80100aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80100ac:	887b      	ldrh	r3, [r7, #2]
 80100ae:	f003 0302 	and.w	r3, r3, #2
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d003      	beq.n	80100be <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80100bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80100be:	887b      	ldrh	r3, [r7, #2]
 80100c0:	2b10      	cmp	r3, #16
 80100c2:	d103      	bne.n	80100cc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80100ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80100cc:	887b      	ldrh	r3, [r7, #2]
 80100ce:	2b20      	cmp	r3, #32
 80100d0:	d133      	bne.n	801013a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f043 0320 	orr.w	r3, r3, #32
 80100d8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80100da:	e02e      	b.n	801013a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80100dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	da03      	bge.n	80100ec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80100ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80100ec:	887b      	ldrh	r3, [r7, #2]
 80100ee:	f003 0301 	and.w	r3, r3, #1
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d003      	beq.n	80100fe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80100fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80100fe:	887b      	ldrh	r3, [r7, #2]
 8010100:	f003 0302 	and.w	r3, r3, #2
 8010104:	2b00      	cmp	r3, #0
 8010106:	d003      	beq.n	8010110 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 801010e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010110:	887b      	ldrh	r3, [r7, #2]
 8010112:	2b10      	cmp	r3, #16
 8010114:	d103      	bne.n	801011e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 801011c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801011e:	887b      	ldrh	r3, [r7, #2]
 8010120:	2b20      	cmp	r3, #32
 8010122:	d103      	bne.n	801012c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801012a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801012c:	887b      	ldrh	r3, [r7, #2]
 801012e:	2b40      	cmp	r3, #64	@ 0x40
 8010130:	d103      	bne.n	801013a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010138:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	6819      	ldr	r1, [r3, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	430a      	orrs	r2, r1
 8010148:	601a      	str	r2, [r3, #0]
}
 801014a:	bf00      	nop
 801014c:	3714      	adds	r7, #20
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	0800e77f 	.word	0x0800e77f
 801015c:	0800eba1 	.word	0x0800eba1
 8010160:	0800e955 	.word	0x0800e955

08010164 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010164:	b480      	push	{r7}
 8010166:	b085      	sub	sp, #20
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	460b      	mov	r3, r1
 801016e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010170:	2300      	movs	r3, #0
 8010172:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010174:	887b      	ldrh	r3, [r7, #2]
 8010176:	f003 0301 	and.w	r3, r3, #1
 801017a:	2b00      	cmp	r3, #0
 801017c:	d00f      	beq.n	801019e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010184:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801018c:	b2db      	uxtb	r3, r3
 801018e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010192:	2b28      	cmp	r3, #40	@ 0x28
 8010194:	d003      	beq.n	801019e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 801019c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801019e:	887b      	ldrh	r3, [r7, #2]
 80101a0:	f003 0302 	and.w	r3, r3, #2
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d00f      	beq.n	80101c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80101ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80101bc:	2b28      	cmp	r3, #40	@ 0x28
 80101be:	d003      	beq.n	80101c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80101c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80101c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	da03      	bge.n	80101d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80101d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80101d8:	887b      	ldrh	r3, [r7, #2]
 80101da:	2b10      	cmp	r3, #16
 80101dc:	d103      	bne.n	80101e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80101e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80101e6:	887b      	ldrh	r3, [r7, #2]
 80101e8:	2b20      	cmp	r3, #32
 80101ea:	d103      	bne.n	80101f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f043 0320 	orr.w	r3, r3, #32
 80101f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80101f4:	887b      	ldrh	r3, [r7, #2]
 80101f6:	2b40      	cmp	r3, #64	@ 0x40
 80101f8:	d103      	bne.n	8010202 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010200:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6819      	ldr	r1, [r3, #0]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	43da      	mvns	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	400a      	ands	r2, r1
 8010212:	601a      	str	r2, [r3, #0]
}
 8010214:	bf00      	nop
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b20      	cmp	r3, #32
 8010234:	d138      	bne.n	80102a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801023c:	2b01      	cmp	r3, #1
 801023e:	d101      	bne.n	8010244 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010240:	2302      	movs	r3, #2
 8010242:	e032      	b.n	80102aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2201      	movs	r2, #1
 8010248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2224      	movs	r2, #36	@ 0x24
 8010250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f022 0201 	bic.w	r2, r2, #1
 8010262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010272:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	6819      	ldr	r1, [r3, #0]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	683a      	ldr	r2, [r7, #0]
 8010280:	430a      	orrs	r2, r1
 8010282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f042 0201 	orr.w	r2, r2, #1
 8010292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2220      	movs	r2, #32
 8010298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2200      	movs	r2, #0
 80102a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80102a4:	2300      	movs	r3, #0
 80102a6:	e000      	b.n	80102aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80102a8:	2302      	movs	r3, #2
  }
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	370c      	adds	r7, #12
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80102b6:	b480      	push	{r7}
 80102b8:	b085      	sub	sp, #20
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	2b20      	cmp	r3, #32
 80102ca:	d139      	bne.n	8010340 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d101      	bne.n	80102da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80102d6:	2302      	movs	r3, #2
 80102d8:	e033      	b.n	8010342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2201      	movs	r2, #1
 80102de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2224      	movs	r2, #36	@ 0x24
 80102e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f022 0201 	bic.w	r2, r2, #1
 80102f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010308:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	021b      	lsls	r3, r3, #8
 801030e:	68fa      	ldr	r2, [r7, #12]
 8010310:	4313      	orrs	r3, r2
 8010312:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f042 0201 	orr.w	r2, r2, #1
 801032a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2220      	movs	r2, #32
 8010330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801033c:	2300      	movs	r3, #0
 801033e:	e000      	b.n	8010342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010340:	2302      	movs	r3, #2
  }
}
 8010342:	4618      	mov	r0, r3
 8010344:	3714      	adds	r7, #20
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr
	...

08010350 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010350:	b480      	push	{r7}
 8010352:	b085      	sub	sp, #20
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010358:	4b0d      	ldr	r3, [pc, #52]	@ (8010390 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801035a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801035e:	4a0c      	ldr	r2, [pc, #48]	@ (8010390 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010360:	f043 0302 	orr.w	r3, r3, #2
 8010364:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010368:	4b09      	ldr	r3, [pc, #36]	@ (8010390 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801036a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801036e:	f003 0302 	and.w	r3, r3, #2
 8010372:	60fb      	str	r3, [r7, #12]
 8010374:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8010376:	4b07      	ldr	r3, [pc, #28]	@ (8010394 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010378:	685a      	ldr	r2, [r3, #4]
 801037a:	4906      	ldr	r1, [pc, #24]	@ (8010394 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4313      	orrs	r3, r2
 8010380:	604b      	str	r3, [r1, #4]
}
 8010382:	bf00      	nop
 8010384:	3714      	adds	r7, #20
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop
 8010390:	58024400 	.word	0x58024400
 8010394:	58000400 	.word	0x58000400

08010398 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80103a0:	4b19      	ldr	r3, [pc, #100]	@ (8010408 <HAL_PWREx_ConfigSupply+0x70>)
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	f003 0304 	and.w	r3, r3, #4
 80103a8:	2b04      	cmp	r3, #4
 80103aa:	d00a      	beq.n	80103c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80103ac:	4b16      	ldr	r3, [pc, #88]	@ (8010408 <HAL_PWREx_ConfigSupply+0x70>)
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	f003 0307 	and.w	r3, r3, #7
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d001      	beq.n	80103be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80103ba:	2301      	movs	r3, #1
 80103bc:	e01f      	b.n	80103fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80103be:	2300      	movs	r3, #0
 80103c0:	e01d      	b.n	80103fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80103c2:	4b11      	ldr	r3, [pc, #68]	@ (8010408 <HAL_PWREx_ConfigSupply+0x70>)
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	f023 0207 	bic.w	r2, r3, #7
 80103ca:	490f      	ldr	r1, [pc, #60]	@ (8010408 <HAL_PWREx_ConfigSupply+0x70>)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4313      	orrs	r3, r2
 80103d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80103d2:	f7f8 f9f1 	bl	80087b8 <HAL_GetTick>
 80103d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80103d8:	e009      	b.n	80103ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80103da:	f7f8 f9ed 	bl	80087b8 <HAL_GetTick>
 80103de:	4602      	mov	r2, r0
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80103e8:	d901      	bls.n	80103ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80103ea:	2301      	movs	r3, #1
 80103ec:	e007      	b.n	80103fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80103ee:	4b06      	ldr	r3, [pc, #24]	@ (8010408 <HAL_PWREx_ConfigSupply+0x70>)
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80103f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80103fa:	d1ee      	bne.n	80103da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80103fc:	2300      	movs	r3, #0
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	58024800 	.word	0x58024800

0801040c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b08c      	sub	sp, #48	@ 0x30
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d101      	bne.n	801041e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	e3c8      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f003 0301 	and.w	r3, r3, #1
 8010426:	2b00      	cmp	r3, #0
 8010428:	f000 8087 	beq.w	801053a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801042c:	4b88      	ldr	r3, [pc, #544]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010436:	4b86      	ldr	r3, [pc, #536]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801043a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801043c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043e:	2b10      	cmp	r3, #16
 8010440:	d007      	beq.n	8010452 <HAL_RCC_OscConfig+0x46>
 8010442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010444:	2b18      	cmp	r3, #24
 8010446:	d110      	bne.n	801046a <HAL_RCC_OscConfig+0x5e>
 8010448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801044a:	f003 0303 	and.w	r3, r3, #3
 801044e:	2b02      	cmp	r3, #2
 8010450:	d10b      	bne.n	801046a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010452:	4b7f      	ldr	r3, [pc, #508]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801045a:	2b00      	cmp	r3, #0
 801045c:	d06c      	beq.n	8010538 <HAL_RCC_OscConfig+0x12c>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d168      	bne.n	8010538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8010466:	2301      	movs	r3, #1
 8010468:	e3a2      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010472:	d106      	bne.n	8010482 <HAL_RCC_OscConfig+0x76>
 8010474:	4b76      	ldr	r3, [pc, #472]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4a75      	ldr	r2, [pc, #468]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 801047a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801047e:	6013      	str	r3, [r2, #0]
 8010480:	e02e      	b.n	80104e0 <HAL_RCC_OscConfig+0xd4>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d10c      	bne.n	80104a4 <HAL_RCC_OscConfig+0x98>
 801048a:	4b71      	ldr	r3, [pc, #452]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4a70      	ldr	r2, [pc, #448]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010494:	6013      	str	r3, [r2, #0]
 8010496:	4b6e      	ldr	r3, [pc, #440]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a6d      	ldr	r2, [pc, #436]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 801049c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80104a0:	6013      	str	r3, [r2, #0]
 80104a2:	e01d      	b.n	80104e0 <HAL_RCC_OscConfig+0xd4>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80104ac:	d10c      	bne.n	80104c8 <HAL_RCC_OscConfig+0xbc>
 80104ae:	4b68      	ldr	r3, [pc, #416]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4a67      	ldr	r2, [pc, #412]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80104b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80104b8:	6013      	str	r3, [r2, #0]
 80104ba:	4b65      	ldr	r3, [pc, #404]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4a64      	ldr	r2, [pc, #400]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80104c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80104c4:	6013      	str	r3, [r2, #0]
 80104c6:	e00b      	b.n	80104e0 <HAL_RCC_OscConfig+0xd4>
 80104c8:	4b61      	ldr	r3, [pc, #388]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4a60      	ldr	r2, [pc, #384]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80104ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80104d2:	6013      	str	r3, [r2, #0]
 80104d4:	4b5e      	ldr	r3, [pc, #376]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a5d      	ldr	r2, [pc, #372]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80104da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80104de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d013      	beq.n	8010510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104e8:	f7f8 f966 	bl	80087b8 <HAL_GetTick>
 80104ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80104ee:	e008      	b.n	8010502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80104f0:	f7f8 f962 	bl	80087b8 <HAL_GetTick>
 80104f4:	4602      	mov	r2, r0
 80104f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	2b64      	cmp	r3, #100	@ 0x64
 80104fc:	d901      	bls.n	8010502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80104fe:	2303      	movs	r3, #3
 8010500:	e356      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010502:	4b53      	ldr	r3, [pc, #332]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801050a:	2b00      	cmp	r3, #0
 801050c:	d0f0      	beq.n	80104f0 <HAL_RCC_OscConfig+0xe4>
 801050e:	e014      	b.n	801053a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010510:	f7f8 f952 	bl	80087b8 <HAL_GetTick>
 8010514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010516:	e008      	b.n	801052a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010518:	f7f8 f94e 	bl	80087b8 <HAL_GetTick>
 801051c:	4602      	mov	r2, r0
 801051e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010520:	1ad3      	subs	r3, r2, r3
 8010522:	2b64      	cmp	r3, #100	@ 0x64
 8010524:	d901      	bls.n	801052a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010526:	2303      	movs	r3, #3
 8010528:	e342      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801052a:	4b49      	ldr	r3, [pc, #292]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010532:	2b00      	cmp	r3, #0
 8010534:	d1f0      	bne.n	8010518 <HAL_RCC_OscConfig+0x10c>
 8010536:	e000      	b.n	801053a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f003 0302 	and.w	r3, r3, #2
 8010542:	2b00      	cmp	r3, #0
 8010544:	f000 808c 	beq.w	8010660 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010548:	4b41      	ldr	r3, [pc, #260]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010550:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010552:	4b3f      	ldr	r3, [pc, #252]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010556:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010558:	6a3b      	ldr	r3, [r7, #32]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d007      	beq.n	801056e <HAL_RCC_OscConfig+0x162>
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	2b18      	cmp	r3, #24
 8010562:	d137      	bne.n	80105d4 <HAL_RCC_OscConfig+0x1c8>
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	f003 0303 	and.w	r3, r3, #3
 801056a:	2b00      	cmp	r3, #0
 801056c:	d132      	bne.n	80105d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801056e:	4b38      	ldr	r3, [pc, #224]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f003 0304 	and.w	r3, r3, #4
 8010576:	2b00      	cmp	r3, #0
 8010578:	d005      	beq.n	8010586 <HAL_RCC_OscConfig+0x17a>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d101      	bne.n	8010586 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e314      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010586:	4b32      	ldr	r3, [pc, #200]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f023 0219 	bic.w	r2, r3, #25
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	492f      	ldr	r1, [pc, #188]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010594:	4313      	orrs	r3, r2
 8010596:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010598:	f7f8 f90e 	bl	80087b8 <HAL_GetTick>
 801059c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801059e:	e008      	b.n	80105b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80105a0:	f7f8 f90a 	bl	80087b8 <HAL_GetTick>
 80105a4:	4602      	mov	r2, r0
 80105a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d901      	bls.n	80105b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80105ae:	2303      	movs	r3, #3
 80105b0:	e2fe      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80105b2:	4b27      	ldr	r3, [pc, #156]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f003 0304 	and.w	r3, r3, #4
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d0f0      	beq.n	80105a0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80105be:	4b24      	ldr	r3, [pc, #144]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	691b      	ldr	r3, [r3, #16]
 80105ca:	061b      	lsls	r3, r3, #24
 80105cc:	4920      	ldr	r1, [pc, #128]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80105ce:	4313      	orrs	r3, r2
 80105d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80105d2:	e045      	b.n	8010660 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d026      	beq.n	801062a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80105dc:	4b1c      	ldr	r3, [pc, #112]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f023 0219 	bic.w	r2, r3, #25
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	4919      	ldr	r1, [pc, #100]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 80105ea:	4313      	orrs	r3, r2
 80105ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105ee:	f7f8 f8e3 	bl	80087b8 <HAL_GetTick>
 80105f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80105f4:	e008      	b.n	8010608 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80105f6:	f7f8 f8df 	bl	80087b8 <HAL_GetTick>
 80105fa:	4602      	mov	r2, r0
 80105fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fe:	1ad3      	subs	r3, r2, r3
 8010600:	2b02      	cmp	r3, #2
 8010602:	d901      	bls.n	8010608 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8010604:	2303      	movs	r3, #3
 8010606:	e2d3      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010608:	4b11      	ldr	r3, [pc, #68]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f003 0304 	and.w	r3, r3, #4
 8010610:	2b00      	cmp	r3, #0
 8010612:	d0f0      	beq.n	80105f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010614:	4b0e      	ldr	r3, [pc, #56]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	691b      	ldr	r3, [r3, #16]
 8010620:	061b      	lsls	r3, r3, #24
 8010622:	490b      	ldr	r1, [pc, #44]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010624:	4313      	orrs	r3, r2
 8010626:	604b      	str	r3, [r1, #4]
 8010628:	e01a      	b.n	8010660 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801062a:	4b09      	ldr	r3, [pc, #36]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a08      	ldr	r2, [pc, #32]	@ (8010650 <HAL_RCC_OscConfig+0x244>)
 8010630:	f023 0301 	bic.w	r3, r3, #1
 8010634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010636:	f7f8 f8bf 	bl	80087b8 <HAL_GetTick>
 801063a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801063c:	e00a      	b.n	8010654 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801063e:	f7f8 f8bb 	bl	80087b8 <HAL_GetTick>
 8010642:	4602      	mov	r2, r0
 8010644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010646:	1ad3      	subs	r3, r2, r3
 8010648:	2b02      	cmp	r3, #2
 801064a:	d903      	bls.n	8010654 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801064c:	2303      	movs	r3, #3
 801064e:	e2af      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
 8010650:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010654:	4b96      	ldr	r3, [pc, #600]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f003 0304 	and.w	r3, r3, #4
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1ee      	bne.n	801063e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	f003 0310 	and.w	r3, r3, #16
 8010668:	2b00      	cmp	r3, #0
 801066a:	d06a      	beq.n	8010742 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801066c:	4b90      	ldr	r3, [pc, #576]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 801066e:	691b      	ldr	r3, [r3, #16]
 8010670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010674:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010676:	4b8e      	ldr	r3, [pc, #568]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801067a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	2b08      	cmp	r3, #8
 8010680:	d007      	beq.n	8010692 <HAL_RCC_OscConfig+0x286>
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	2b18      	cmp	r3, #24
 8010686:	d11b      	bne.n	80106c0 <HAL_RCC_OscConfig+0x2b4>
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	f003 0303 	and.w	r3, r3, #3
 801068e:	2b01      	cmp	r3, #1
 8010690:	d116      	bne.n	80106c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010692:	4b87      	ldr	r3, [pc, #540]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801069a:	2b00      	cmp	r3, #0
 801069c:	d005      	beq.n	80106aa <HAL_RCC_OscConfig+0x29e>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	69db      	ldr	r3, [r3, #28]
 80106a2:	2b80      	cmp	r3, #128	@ 0x80
 80106a4:	d001      	beq.n	80106aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80106a6:	2301      	movs	r3, #1
 80106a8:	e282      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80106aa:	4b81      	ldr	r3, [pc, #516]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6a1b      	ldr	r3, [r3, #32]
 80106b6:	061b      	lsls	r3, r3, #24
 80106b8:	497d      	ldr	r1, [pc, #500]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80106ba:	4313      	orrs	r3, r2
 80106bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80106be:	e040      	b.n	8010742 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	69db      	ldr	r3, [r3, #28]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d023      	beq.n	8010710 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80106c8:	4b79      	ldr	r3, [pc, #484]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4a78      	ldr	r2, [pc, #480]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80106ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106d4:	f7f8 f870 	bl	80087b8 <HAL_GetTick>
 80106d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80106da:	e008      	b.n	80106ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80106dc:	f7f8 f86c 	bl	80087b8 <HAL_GetTick>
 80106e0:	4602      	mov	r2, r0
 80106e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	2b02      	cmp	r3, #2
 80106e8:	d901      	bls.n	80106ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80106ea:	2303      	movs	r3, #3
 80106ec:	e260      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80106ee:	4b70      	ldr	r3, [pc, #448]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d0f0      	beq.n	80106dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80106fa:	4b6d      	ldr	r3, [pc, #436]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6a1b      	ldr	r3, [r3, #32]
 8010706:	061b      	lsls	r3, r3, #24
 8010708:	4969      	ldr	r1, [pc, #420]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 801070a:	4313      	orrs	r3, r2
 801070c:	60cb      	str	r3, [r1, #12]
 801070e:	e018      	b.n	8010742 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010710:	4b67      	ldr	r3, [pc, #412]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4a66      	ldr	r2, [pc, #408]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801071a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801071c:	f7f8 f84c 	bl	80087b8 <HAL_GetTick>
 8010720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010722:	e008      	b.n	8010736 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8010724:	f7f8 f848 	bl	80087b8 <HAL_GetTick>
 8010728:	4602      	mov	r2, r0
 801072a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	2b02      	cmp	r3, #2
 8010730:	d901      	bls.n	8010736 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8010732:	2303      	movs	r3, #3
 8010734:	e23c      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010736:	4b5e      	ldr	r3, [pc, #376]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801073e:	2b00      	cmp	r3, #0
 8010740:	d1f0      	bne.n	8010724 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f003 0308 	and.w	r3, r3, #8
 801074a:	2b00      	cmp	r3, #0
 801074c:	d036      	beq.n	80107bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	695b      	ldr	r3, [r3, #20]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d019      	beq.n	801078a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010756:	4b56      	ldr	r3, [pc, #344]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801075a:	4a55      	ldr	r2, [pc, #340]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 801075c:	f043 0301 	orr.w	r3, r3, #1
 8010760:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010762:	f7f8 f829 	bl	80087b8 <HAL_GetTick>
 8010766:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010768:	e008      	b.n	801077c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801076a:	f7f8 f825 	bl	80087b8 <HAL_GetTick>
 801076e:	4602      	mov	r2, r0
 8010770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010772:	1ad3      	subs	r3, r2, r3
 8010774:	2b02      	cmp	r3, #2
 8010776:	d901      	bls.n	801077c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8010778:	2303      	movs	r3, #3
 801077a:	e219      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801077c:	4b4c      	ldr	r3, [pc, #304]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 801077e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010780:	f003 0302 	and.w	r3, r3, #2
 8010784:	2b00      	cmp	r3, #0
 8010786:	d0f0      	beq.n	801076a <HAL_RCC_OscConfig+0x35e>
 8010788:	e018      	b.n	80107bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801078a:	4b49      	ldr	r3, [pc, #292]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 801078c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801078e:	4a48      	ldr	r2, [pc, #288]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010790:	f023 0301 	bic.w	r3, r3, #1
 8010794:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010796:	f7f8 f80f 	bl	80087b8 <HAL_GetTick>
 801079a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801079c:	e008      	b.n	80107b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801079e:	f7f8 f80b 	bl	80087b8 <HAL_GetTick>
 80107a2:	4602      	mov	r2, r0
 80107a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	2b02      	cmp	r3, #2
 80107aa:	d901      	bls.n	80107b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80107ac:	2303      	movs	r3, #3
 80107ae:	e1ff      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80107b0:	4b3f      	ldr	r3, [pc, #252]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80107b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107b4:	f003 0302 	and.w	r3, r3, #2
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1f0      	bne.n	801079e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f003 0320 	and.w	r3, r3, #32
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d036      	beq.n	8010836 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	699b      	ldr	r3, [r3, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d019      	beq.n	8010804 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80107d0:	4b37      	ldr	r3, [pc, #220]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a36      	ldr	r2, [pc, #216]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80107d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80107da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80107dc:	f7f7 ffec 	bl	80087b8 <HAL_GetTick>
 80107e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80107e2:	e008      	b.n	80107f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80107e4:	f7f7 ffe8 	bl	80087b8 <HAL_GetTick>
 80107e8:	4602      	mov	r2, r0
 80107ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ec:	1ad3      	subs	r3, r2, r3
 80107ee:	2b02      	cmp	r3, #2
 80107f0:	d901      	bls.n	80107f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80107f2:	2303      	movs	r3, #3
 80107f4:	e1dc      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80107f6:	4b2e      	ldr	r3, [pc, #184]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d0f0      	beq.n	80107e4 <HAL_RCC_OscConfig+0x3d8>
 8010802:	e018      	b.n	8010836 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010804:	4b2a      	ldr	r3, [pc, #168]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4a29      	ldr	r2, [pc, #164]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 801080a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801080e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010810:	f7f7 ffd2 	bl	80087b8 <HAL_GetTick>
 8010814:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010816:	e008      	b.n	801082a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010818:	f7f7 ffce 	bl	80087b8 <HAL_GetTick>
 801081c:	4602      	mov	r2, r0
 801081e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010820:	1ad3      	subs	r3, r2, r3
 8010822:	2b02      	cmp	r3, #2
 8010824:	d901      	bls.n	801082a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8010826:	2303      	movs	r3, #3
 8010828:	e1c2      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801082a:	4b21      	ldr	r3, [pc, #132]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1f0      	bne.n	8010818 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f003 0304 	and.w	r3, r3, #4
 801083e:	2b00      	cmp	r3, #0
 8010840:	f000 8086 	beq.w	8010950 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010844:	4b1b      	ldr	r3, [pc, #108]	@ (80108b4 <HAL_RCC_OscConfig+0x4a8>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	4a1a      	ldr	r2, [pc, #104]	@ (80108b4 <HAL_RCC_OscConfig+0x4a8>)
 801084a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801084e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010850:	f7f7 ffb2 	bl	80087b8 <HAL_GetTick>
 8010854:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010856:	e008      	b.n	801086a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010858:	f7f7 ffae 	bl	80087b8 <HAL_GetTick>
 801085c:	4602      	mov	r2, r0
 801085e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010860:	1ad3      	subs	r3, r2, r3
 8010862:	2b64      	cmp	r3, #100	@ 0x64
 8010864:	d901      	bls.n	801086a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8010866:	2303      	movs	r3, #3
 8010868:	e1a2      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801086a:	4b12      	ldr	r3, [pc, #72]	@ (80108b4 <HAL_RCC_OscConfig+0x4a8>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010872:	2b00      	cmp	r3, #0
 8010874:	d0f0      	beq.n	8010858 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	689b      	ldr	r3, [r3, #8]
 801087a:	2b01      	cmp	r3, #1
 801087c:	d106      	bne.n	801088c <HAL_RCC_OscConfig+0x480>
 801087e:	4b0c      	ldr	r3, [pc, #48]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010882:	4a0b      	ldr	r2, [pc, #44]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010884:	f043 0301 	orr.w	r3, r3, #1
 8010888:	6713      	str	r3, [r2, #112]	@ 0x70
 801088a:	e032      	b.n	80108f2 <HAL_RCC_OscConfig+0x4e6>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d111      	bne.n	80108b8 <HAL_RCC_OscConfig+0x4ac>
 8010894:	4b06      	ldr	r3, [pc, #24]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 8010896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010898:	4a05      	ldr	r2, [pc, #20]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 801089a:	f023 0301 	bic.w	r3, r3, #1
 801089e:	6713      	str	r3, [r2, #112]	@ 0x70
 80108a0:	4b03      	ldr	r3, [pc, #12]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80108a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108a4:	4a02      	ldr	r2, [pc, #8]	@ (80108b0 <HAL_RCC_OscConfig+0x4a4>)
 80108a6:	f023 0304 	bic.w	r3, r3, #4
 80108aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80108ac:	e021      	b.n	80108f2 <HAL_RCC_OscConfig+0x4e6>
 80108ae:	bf00      	nop
 80108b0:	58024400 	.word	0x58024400
 80108b4:	58024800 	.word	0x58024800
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	689b      	ldr	r3, [r3, #8]
 80108bc:	2b05      	cmp	r3, #5
 80108be:	d10c      	bne.n	80108da <HAL_RCC_OscConfig+0x4ce>
 80108c0:	4b83      	ldr	r3, [pc, #524]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80108c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108c4:	4a82      	ldr	r2, [pc, #520]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80108c6:	f043 0304 	orr.w	r3, r3, #4
 80108ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80108cc:	4b80      	ldr	r3, [pc, #512]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80108ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108d0:	4a7f      	ldr	r2, [pc, #508]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80108d2:	f043 0301 	orr.w	r3, r3, #1
 80108d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80108d8:	e00b      	b.n	80108f2 <HAL_RCC_OscConfig+0x4e6>
 80108da:	4b7d      	ldr	r3, [pc, #500]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80108dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108de:	4a7c      	ldr	r2, [pc, #496]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80108e0:	f023 0301 	bic.w	r3, r3, #1
 80108e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80108e6:	4b7a      	ldr	r3, [pc, #488]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80108e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108ea:	4a79      	ldr	r2, [pc, #484]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80108ec:	f023 0304 	bic.w	r3, r3, #4
 80108f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d015      	beq.n	8010926 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80108fa:	f7f7 ff5d 	bl	80087b8 <HAL_GetTick>
 80108fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010900:	e00a      	b.n	8010918 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010902:	f7f7 ff59 	bl	80087b8 <HAL_GetTick>
 8010906:	4602      	mov	r2, r0
 8010908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010910:	4293      	cmp	r3, r2
 8010912:	d901      	bls.n	8010918 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8010914:	2303      	movs	r3, #3
 8010916:	e14b      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010918:	4b6d      	ldr	r3, [pc, #436]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 801091a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801091c:	f003 0302 	and.w	r3, r3, #2
 8010920:	2b00      	cmp	r3, #0
 8010922:	d0ee      	beq.n	8010902 <HAL_RCC_OscConfig+0x4f6>
 8010924:	e014      	b.n	8010950 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010926:	f7f7 ff47 	bl	80087b8 <HAL_GetTick>
 801092a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801092c:	e00a      	b.n	8010944 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801092e:	f7f7 ff43 	bl	80087b8 <HAL_GetTick>
 8010932:	4602      	mov	r2, r0
 8010934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	f241 3288 	movw	r2, #5000	@ 0x1388
 801093c:	4293      	cmp	r3, r2
 801093e:	d901      	bls.n	8010944 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8010940:	2303      	movs	r3, #3
 8010942:	e135      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010944:	4b62      	ldr	r3, [pc, #392]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010948:	f003 0302 	and.w	r3, r3, #2
 801094c:	2b00      	cmp	r3, #0
 801094e:	d1ee      	bne.n	801092e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010954:	2b00      	cmp	r3, #0
 8010956:	f000 812a 	beq.w	8010bae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801095a:	4b5d      	ldr	r3, [pc, #372]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 801095c:	691b      	ldr	r3, [r3, #16]
 801095e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010962:	2b18      	cmp	r3, #24
 8010964:	f000 80ba 	beq.w	8010adc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801096c:	2b02      	cmp	r3, #2
 801096e:	f040 8095 	bne.w	8010a9c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010972:	4b57      	ldr	r3, [pc, #348]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	4a56      	ldr	r2, [pc, #344]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010978:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801097c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801097e:	f7f7 ff1b 	bl	80087b8 <HAL_GetTick>
 8010982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010984:	e008      	b.n	8010998 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010986:	f7f7 ff17 	bl	80087b8 <HAL_GetTick>
 801098a:	4602      	mov	r2, r0
 801098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	2b02      	cmp	r3, #2
 8010992:	d901      	bls.n	8010998 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8010994:	2303      	movs	r3, #3
 8010996:	e10b      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010998:	4b4d      	ldr	r3, [pc, #308]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d1f0      	bne.n	8010986 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80109a4:	4b4a      	ldr	r3, [pc, #296]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80109a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80109a8:	4b4a      	ldr	r3, [pc, #296]	@ (8010ad4 <HAL_RCC_OscConfig+0x6c8>)
 80109aa:	4013      	ands	r3, r2
 80109ac:	687a      	ldr	r2, [r7, #4]
 80109ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80109b4:	0112      	lsls	r2, r2, #4
 80109b6:	430a      	orrs	r2, r1
 80109b8:	4945      	ldr	r1, [pc, #276]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80109ba:	4313      	orrs	r3, r2
 80109bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109c2:	3b01      	subs	r3, #1
 80109c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109cc:	3b01      	subs	r3, #1
 80109ce:	025b      	lsls	r3, r3, #9
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	431a      	orrs	r2, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109d8:	3b01      	subs	r3, #1
 80109da:	041b      	lsls	r3, r3, #16
 80109dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80109e0:	431a      	orrs	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109e6:	3b01      	subs	r3, #1
 80109e8:	061b      	lsls	r3, r3, #24
 80109ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80109ee:	4938      	ldr	r1, [pc, #224]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80109f0:	4313      	orrs	r3, r2
 80109f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80109f4:	4b36      	ldr	r3, [pc, #216]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80109f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109f8:	4a35      	ldr	r2, [pc, #212]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 80109fa:	f023 0301 	bic.w	r3, r3, #1
 80109fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010a00:	4b33      	ldr	r3, [pc, #204]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a04:	4b34      	ldr	r3, [pc, #208]	@ (8010ad8 <HAL_RCC_OscConfig+0x6cc>)
 8010a06:	4013      	ands	r3, r2
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010a0c:	00d2      	lsls	r2, r2, #3
 8010a0e:	4930      	ldr	r1, [pc, #192]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a10:	4313      	orrs	r3, r2
 8010a12:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010a14:	4b2e      	ldr	r3, [pc, #184]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a18:	f023 020c 	bic.w	r2, r3, #12
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a20:	492b      	ldr	r1, [pc, #172]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a22:	4313      	orrs	r3, r2
 8010a24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010a26:	4b2a      	ldr	r3, [pc, #168]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a2a:	f023 0202 	bic.w	r2, r3, #2
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a32:	4927      	ldr	r1, [pc, #156]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a34:	4313      	orrs	r3, r2
 8010a36:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010a38:	4b25      	ldr	r3, [pc, #148]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a3c:	4a24      	ldr	r2, [pc, #144]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a44:	4b22      	ldr	r3, [pc, #136]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a48:	4a21      	ldr	r2, [pc, #132]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010a50:	4b1f      	ldr	r3, [pc, #124]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a54:	4a1e      	ldr	r2, [pc, #120]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8010a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a60:	4a1b      	ldr	r2, [pc, #108]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a62:	f043 0301 	orr.w	r3, r3, #1
 8010a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a68:	4b19      	ldr	r3, [pc, #100]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a18      	ldr	r2, [pc, #96]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a74:	f7f7 fea0 	bl	80087b8 <HAL_GetTick>
 8010a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010a7a:	e008      	b.n	8010a8e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010a7c:	f7f7 fe9c 	bl	80087b8 <HAL_GetTick>
 8010a80:	4602      	mov	r2, r0
 8010a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	2b02      	cmp	r3, #2
 8010a88:	d901      	bls.n	8010a8e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8010a8a:	2303      	movs	r3, #3
 8010a8c:	e090      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010a8e:	4b10      	ldr	r3, [pc, #64]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d0f0      	beq.n	8010a7c <HAL_RCC_OscConfig+0x670>
 8010a9a:	e088      	b.n	8010bae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010aa8:	f7f7 fe86 	bl	80087b8 <HAL_GetTick>
 8010aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010aae:	e008      	b.n	8010ac2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010ab0:	f7f7 fe82 	bl	80087b8 <HAL_GetTick>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	d901      	bls.n	8010ac2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8010abe:	2303      	movs	r3, #3
 8010ac0:	e076      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010ac2:	4b03      	ldr	r3, [pc, #12]	@ (8010ad0 <HAL_RCC_OscConfig+0x6c4>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1f0      	bne.n	8010ab0 <HAL_RCC_OscConfig+0x6a4>
 8010ace:	e06e      	b.n	8010bae <HAL_RCC_OscConfig+0x7a2>
 8010ad0:	58024400 	.word	0x58024400
 8010ad4:	fffffc0c 	.word	0xfffffc0c
 8010ad8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010adc:	4b36      	ldr	r3, [pc, #216]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ae0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010ae2:	4b35      	ldr	r3, [pc, #212]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ae6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d031      	beq.n	8010b54 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	f003 0203 	and.w	r2, r3, #3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d12a      	bne.n	8010b54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	091b      	lsrs	r3, r3, #4
 8010b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d122      	bne.n	8010b54 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d11a      	bne.n	8010b54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	0a5b      	lsrs	r3, r3, #9
 8010b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d111      	bne.n	8010b54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	0c1b      	lsrs	r3, r3, #16
 8010b34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d108      	bne.n	8010b54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	0e1b      	lsrs	r3, r3, #24
 8010b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d001      	beq.n	8010b58 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8010b54:	2301      	movs	r3, #1
 8010b56:	e02b      	b.n	8010bb0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8010b58:	4b17      	ldr	r3, [pc, #92]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b5c:	08db      	lsrs	r3, r3, #3
 8010b5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010b68:	693a      	ldr	r2, [r7, #16]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d01f      	beq.n	8010bae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8010b6e:	4b12      	ldr	r3, [pc, #72]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b72:	4a11      	ldr	r2, [pc, #68]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010b74:	f023 0301 	bic.w	r3, r3, #1
 8010b78:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010b7a:	f7f7 fe1d 	bl	80087b8 <HAL_GetTick>
 8010b7e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8010b80:	bf00      	nop
 8010b82:	f7f7 fe19 	bl	80087b8 <HAL_GetTick>
 8010b86:	4602      	mov	r2, r0
 8010b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d0f9      	beq.n	8010b82 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b92:	4b0a      	ldr	r3, [pc, #40]	@ (8010bbc <HAL_RCC_OscConfig+0x7b0>)
 8010b94:	4013      	ands	r3, r2
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010b9a:	00d2      	lsls	r2, r2, #3
 8010b9c:	4906      	ldr	r1, [pc, #24]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8010ba2:	4b05      	ldr	r3, [pc, #20]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ba6:	4a04      	ldr	r2, [pc, #16]	@ (8010bb8 <HAL_RCC_OscConfig+0x7ac>)
 8010ba8:	f043 0301 	orr.w	r3, r3, #1
 8010bac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8010bae:	2300      	movs	r3, #0
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3730      	adds	r7, #48	@ 0x30
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	58024400 	.word	0x58024400
 8010bbc:	ffff0007 	.word	0xffff0007

08010bc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d101      	bne.n	8010bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	e19c      	b.n	8010f0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8010e00 <HAL_RCC_ClockConfig+0x240>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f003 030f 	and.w	r3, r3, #15
 8010bdc:	683a      	ldr	r2, [r7, #0]
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d910      	bls.n	8010c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010be2:	4b87      	ldr	r3, [pc, #540]	@ (8010e00 <HAL_RCC_ClockConfig+0x240>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f023 020f 	bic.w	r2, r3, #15
 8010bea:	4985      	ldr	r1, [pc, #532]	@ (8010e00 <HAL_RCC_ClockConfig+0x240>)
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010bf2:	4b83      	ldr	r3, [pc, #524]	@ (8010e00 <HAL_RCC_ClockConfig+0x240>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f003 030f 	and.w	r3, r3, #15
 8010bfa:	683a      	ldr	r2, [r7, #0]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d001      	beq.n	8010c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010c00:	2301      	movs	r3, #1
 8010c02:	e184      	b.n	8010f0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f003 0304 	and.w	r3, r3, #4
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d010      	beq.n	8010c32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	691a      	ldr	r2, [r3, #16]
 8010c14:	4b7b      	ldr	r3, [pc, #492]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d908      	bls.n	8010c32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010c20:	4b78      	ldr	r3, [pc, #480]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c22:	699b      	ldr	r3, [r3, #24]
 8010c24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	691b      	ldr	r3, [r3, #16]
 8010c2c:	4975      	ldr	r1, [pc, #468]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f003 0308 	and.w	r3, r3, #8
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d010      	beq.n	8010c60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	695a      	ldr	r2, [r3, #20]
 8010c42:	4b70      	ldr	r3, [pc, #448]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c44:	69db      	ldr	r3, [r3, #28]
 8010c46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d908      	bls.n	8010c60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c50:	69db      	ldr	r3, [r3, #28]
 8010c52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	695b      	ldr	r3, [r3, #20]
 8010c5a:	496a      	ldr	r1, [pc, #424]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f003 0310 	and.w	r3, r3, #16
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d010      	beq.n	8010c8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	699a      	ldr	r2, [r3, #24]
 8010c70:	4b64      	ldr	r3, [pc, #400]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c72:	69db      	ldr	r3, [r3, #28]
 8010c74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d908      	bls.n	8010c8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010c7c:	4b61      	ldr	r3, [pc, #388]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c7e:	69db      	ldr	r3, [r3, #28]
 8010c80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	699b      	ldr	r3, [r3, #24]
 8010c88:	495e      	ldr	r1, [pc, #376]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f003 0320 	and.w	r3, r3, #32
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d010      	beq.n	8010cbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	69da      	ldr	r2, [r3, #28]
 8010c9e:	4b59      	ldr	r3, [pc, #356]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010ca0:	6a1b      	ldr	r3, [r3, #32]
 8010ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d908      	bls.n	8010cbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010caa:	4b56      	ldr	r3, [pc, #344]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010cac:	6a1b      	ldr	r3, [r3, #32]
 8010cae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	69db      	ldr	r3, [r3, #28]
 8010cb6:	4953      	ldr	r1, [pc, #332]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	f003 0302 	and.w	r3, r3, #2
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d010      	beq.n	8010cea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	68da      	ldr	r2, [r3, #12]
 8010ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010cce:	699b      	ldr	r3, [r3, #24]
 8010cd0:	f003 030f 	and.w	r3, r3, #15
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d908      	bls.n	8010cea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010cda:	699b      	ldr	r3, [r3, #24]
 8010cdc:	f023 020f 	bic.w	r2, r3, #15
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	4947      	ldr	r1, [pc, #284]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010ce6:	4313      	orrs	r3, r2
 8010ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f003 0301 	and.w	r3, r3, #1
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d055      	beq.n	8010da2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010cf6:	4b43      	ldr	r3, [pc, #268]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010cf8:	699b      	ldr	r3, [r3, #24]
 8010cfa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	689b      	ldr	r3, [r3, #8]
 8010d02:	4940      	ldr	r1, [pc, #256]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010d04:	4313      	orrs	r3, r2
 8010d06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	2b02      	cmp	r3, #2
 8010d0e:	d107      	bne.n	8010d20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010d10:	4b3c      	ldr	r3, [pc, #240]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d121      	bne.n	8010d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e0f6      	b.n	8010f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	2b03      	cmp	r3, #3
 8010d26:	d107      	bne.n	8010d38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010d28:	4b36      	ldr	r3, [pc, #216]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d115      	bne.n	8010d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010d34:	2301      	movs	r3, #1
 8010d36:	e0ea      	b.n	8010f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d107      	bne.n	8010d50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010d40:	4b30      	ldr	r3, [pc, #192]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d109      	bne.n	8010d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e0de      	b.n	8010f0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010d50:	4b2c      	ldr	r3, [pc, #176]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f003 0304 	and.w	r3, r3, #4
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d101      	bne.n	8010d60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e0d6      	b.n	8010f0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010d60:	4b28      	ldr	r3, [pc, #160]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010d62:	691b      	ldr	r3, [r3, #16]
 8010d64:	f023 0207 	bic.w	r2, r3, #7
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	685b      	ldr	r3, [r3, #4]
 8010d6c:	4925      	ldr	r1, [pc, #148]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010d72:	f7f7 fd21 	bl	80087b8 <HAL_GetTick>
 8010d76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010d78:	e00a      	b.n	8010d90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d7a:	f7f7 fd1d 	bl	80087b8 <HAL_GetTick>
 8010d7e:	4602      	mov	r2, r0
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	1ad3      	subs	r3, r2, r3
 8010d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	d901      	bls.n	8010d90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8010d8c:	2303      	movs	r3, #3
 8010d8e:	e0be      	b.n	8010f0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010d90:	4b1c      	ldr	r3, [pc, #112]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	00db      	lsls	r3, r3, #3
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d1eb      	bne.n	8010d7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f003 0302 	and.w	r3, r3, #2
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d010      	beq.n	8010dd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	68da      	ldr	r2, [r3, #12]
 8010db2:	4b14      	ldr	r3, [pc, #80]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010db4:	699b      	ldr	r3, [r3, #24]
 8010db6:	f003 030f 	and.w	r3, r3, #15
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d208      	bcs.n	8010dd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010dbe:	4b11      	ldr	r3, [pc, #68]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010dc0:	699b      	ldr	r3, [r3, #24]
 8010dc2:	f023 020f 	bic.w	r2, r3, #15
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	490e      	ldr	r1, [pc, #56]	@ (8010e04 <HAL_RCC_ClockConfig+0x244>)
 8010dcc:	4313      	orrs	r3, r2
 8010dce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8010e00 <HAL_RCC_ClockConfig+0x240>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f003 030f 	and.w	r3, r3, #15
 8010dd8:	683a      	ldr	r2, [r7, #0]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d214      	bcs.n	8010e08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010dde:	4b08      	ldr	r3, [pc, #32]	@ (8010e00 <HAL_RCC_ClockConfig+0x240>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f023 020f 	bic.w	r2, r3, #15
 8010de6:	4906      	ldr	r1, [pc, #24]	@ (8010e00 <HAL_RCC_ClockConfig+0x240>)
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	4313      	orrs	r3, r2
 8010dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010dee:	4b04      	ldr	r3, [pc, #16]	@ (8010e00 <HAL_RCC_ClockConfig+0x240>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f003 030f 	and.w	r3, r3, #15
 8010df6:	683a      	ldr	r2, [r7, #0]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d005      	beq.n	8010e08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	e086      	b.n	8010f0e <HAL_RCC_ClockConfig+0x34e>
 8010e00:	52002000 	.word	0x52002000
 8010e04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f003 0304 	and.w	r3, r3, #4
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d010      	beq.n	8010e36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	691a      	ldr	r2, [r3, #16]
 8010e18:	4b3f      	ldr	r3, [pc, #252]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e1a:	699b      	ldr	r3, [r3, #24]
 8010e1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d208      	bcs.n	8010e36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010e24:	4b3c      	ldr	r3, [pc, #240]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e26:	699b      	ldr	r3, [r3, #24]
 8010e28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	691b      	ldr	r3, [r3, #16]
 8010e30:	4939      	ldr	r1, [pc, #228]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e32:	4313      	orrs	r3, r2
 8010e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f003 0308 	and.w	r3, r3, #8
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d010      	beq.n	8010e64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	695a      	ldr	r2, [r3, #20]
 8010e46:	4b34      	ldr	r3, [pc, #208]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e48:	69db      	ldr	r3, [r3, #28]
 8010e4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d208      	bcs.n	8010e64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010e52:	4b31      	ldr	r3, [pc, #196]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e54:	69db      	ldr	r3, [r3, #28]
 8010e56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	492e      	ldr	r1, [pc, #184]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e60:	4313      	orrs	r3, r2
 8010e62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f003 0310 	and.w	r3, r3, #16
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d010      	beq.n	8010e92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	699a      	ldr	r2, [r3, #24]
 8010e74:	4b28      	ldr	r3, [pc, #160]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e76:	69db      	ldr	r3, [r3, #28]
 8010e78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d208      	bcs.n	8010e92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010e80:	4b25      	ldr	r3, [pc, #148]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e82:	69db      	ldr	r3, [r3, #28]
 8010e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	699b      	ldr	r3, [r3, #24]
 8010e8c:	4922      	ldr	r1, [pc, #136]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f003 0320 	and.w	r3, r3, #32
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d010      	beq.n	8010ec0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	69da      	ldr	r2, [r3, #28]
 8010ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010ea4:	6a1b      	ldr	r3, [r3, #32]
 8010ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d208      	bcs.n	8010ec0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010eae:	4b1a      	ldr	r3, [pc, #104]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010eb0:	6a1b      	ldr	r3, [r3, #32]
 8010eb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	4917      	ldr	r1, [pc, #92]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010ec0:	f000 f834 	bl	8010f2c <HAL_RCC_GetSysClockFreq>
 8010ec4:	4602      	mov	r2, r0
 8010ec6:	4b14      	ldr	r3, [pc, #80]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010ec8:	699b      	ldr	r3, [r3, #24]
 8010eca:	0a1b      	lsrs	r3, r3, #8
 8010ecc:	f003 030f 	and.w	r3, r3, #15
 8010ed0:	4912      	ldr	r1, [pc, #72]	@ (8010f1c <HAL_RCC_ClockConfig+0x35c>)
 8010ed2:	5ccb      	ldrb	r3, [r1, r3]
 8010ed4:	f003 031f 	and.w	r3, r3, #31
 8010ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8010edc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010ede:	4b0e      	ldr	r3, [pc, #56]	@ (8010f18 <HAL_RCC_ClockConfig+0x358>)
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	f003 030f 	and.w	r3, r3, #15
 8010ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8010f1c <HAL_RCC_ClockConfig+0x35c>)
 8010ee8:	5cd3      	ldrb	r3, [r2, r3]
 8010eea:	f003 031f 	and.w	r3, r3, #31
 8010eee:	693a      	ldr	r2, [r7, #16]
 8010ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8010ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8010f20 <HAL_RCC_ClockConfig+0x360>)
 8010ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8010f24 <HAL_RCC_ClockConfig+0x364>)
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8010efe:	4b0a      	ldr	r3, [pc, #40]	@ (8010f28 <HAL_RCC_ClockConfig+0x368>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7f7 fc0e 	bl	8008724 <HAL_InitTick>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3718      	adds	r7, #24
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	58024400 	.word	0x58024400
 8010f1c:	0801e2d0 	.word	0x0801e2d0
 8010f20:	24000008 	.word	0x24000008
 8010f24:	24000004 	.word	0x24000004
 8010f28:	2400000c 	.word	0x2400000c

08010f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b089      	sub	sp, #36	@ 0x24
 8010f30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010f32:	4bb3      	ldr	r3, [pc, #716]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010f3a:	2b18      	cmp	r3, #24
 8010f3c:	f200 8155 	bhi.w	80111ea <HAL_RCC_GetSysClockFreq+0x2be>
 8010f40:	a201      	add	r2, pc, #4	@ (adr r2, 8010f48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8010f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f46:	bf00      	nop
 8010f48:	08010fad 	.word	0x08010fad
 8010f4c:	080111eb 	.word	0x080111eb
 8010f50:	080111eb 	.word	0x080111eb
 8010f54:	080111eb 	.word	0x080111eb
 8010f58:	080111eb 	.word	0x080111eb
 8010f5c:	080111eb 	.word	0x080111eb
 8010f60:	080111eb 	.word	0x080111eb
 8010f64:	080111eb 	.word	0x080111eb
 8010f68:	08010fd3 	.word	0x08010fd3
 8010f6c:	080111eb 	.word	0x080111eb
 8010f70:	080111eb 	.word	0x080111eb
 8010f74:	080111eb 	.word	0x080111eb
 8010f78:	080111eb 	.word	0x080111eb
 8010f7c:	080111eb 	.word	0x080111eb
 8010f80:	080111eb 	.word	0x080111eb
 8010f84:	080111eb 	.word	0x080111eb
 8010f88:	08010fd9 	.word	0x08010fd9
 8010f8c:	080111eb 	.word	0x080111eb
 8010f90:	080111eb 	.word	0x080111eb
 8010f94:	080111eb 	.word	0x080111eb
 8010f98:	080111eb 	.word	0x080111eb
 8010f9c:	080111eb 	.word	0x080111eb
 8010fa0:	080111eb 	.word	0x080111eb
 8010fa4:	080111eb 	.word	0x080111eb
 8010fa8:	08010fdf 	.word	0x08010fdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fac:	4b94      	ldr	r3, [pc, #592]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f003 0320 	and.w	r3, r3, #32
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d009      	beq.n	8010fcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010fb8:	4b91      	ldr	r3, [pc, #580]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	08db      	lsrs	r3, r3, #3
 8010fbe:	f003 0303 	and.w	r3, r3, #3
 8010fc2:	4a90      	ldr	r2, [pc, #576]	@ (8011204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8010fc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8010fca:	e111      	b.n	80111f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010fcc:	4b8d      	ldr	r3, [pc, #564]	@ (8011204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010fce:	61bb      	str	r3, [r7, #24]
      break;
 8010fd0:	e10e      	b.n	80111f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8010fd2:	4b8d      	ldr	r3, [pc, #564]	@ (8011208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010fd4:	61bb      	str	r3, [r7, #24]
      break;
 8010fd6:	e10b      	b.n	80111f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8010fd8:	4b8c      	ldr	r3, [pc, #560]	@ (801120c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8010fda:	61bb      	str	r3, [r7, #24]
      break;
 8010fdc:	e108      	b.n	80111f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010fde:	4b88      	ldr	r3, [pc, #544]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fe2:	f003 0303 	and.w	r3, r3, #3
 8010fe6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8010fe8:	4b85      	ldr	r3, [pc, #532]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fec:	091b      	lsrs	r3, r3, #4
 8010fee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010ff2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010ff4:	4b82      	ldr	r3, [pc, #520]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ff8:	f003 0301 	and.w	r3, r3, #1
 8010ffc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010ffe:	4b80      	ldr	r3, [pc, #512]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011002:	08db      	lsrs	r3, r3, #3
 8011004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011008:	68fa      	ldr	r2, [r7, #12]
 801100a:	fb02 f303 	mul.w	r3, r2, r3
 801100e:	ee07 3a90 	vmov	s15, r3
 8011012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011016:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	2b00      	cmp	r3, #0
 801101e:	f000 80e1 	beq.w	80111e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	2b02      	cmp	r3, #2
 8011026:	f000 8083 	beq.w	8011130 <HAL_RCC_GetSysClockFreq+0x204>
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	2b02      	cmp	r3, #2
 801102e:	f200 80a1 	bhi.w	8011174 <HAL_RCC_GetSysClockFreq+0x248>
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d003      	beq.n	8011040 <HAL_RCC_GetSysClockFreq+0x114>
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	2b01      	cmp	r3, #1
 801103c:	d056      	beq.n	80110ec <HAL_RCC_GetSysClockFreq+0x1c0>
 801103e:	e099      	b.n	8011174 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011040:	4b6f      	ldr	r3, [pc, #444]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	f003 0320 	and.w	r3, r3, #32
 8011048:	2b00      	cmp	r3, #0
 801104a:	d02d      	beq.n	80110a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801104c:	4b6c      	ldr	r3, [pc, #432]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	08db      	lsrs	r3, r3, #3
 8011052:	f003 0303 	and.w	r3, r3, #3
 8011056:	4a6b      	ldr	r2, [pc, #428]	@ (8011204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011058:	fa22 f303 	lsr.w	r3, r2, r3
 801105c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	ee07 3a90 	vmov	s15, r3
 8011064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	ee07 3a90 	vmov	s15, r3
 801106e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011076:	4b62      	ldr	r3, [pc, #392]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801107a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801107e:	ee07 3a90 	vmov	s15, r3
 8011082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011086:	ed97 6a02 	vldr	s12, [r7, #8]
 801108a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011210 <HAL_RCC_GetSysClockFreq+0x2e4>
 801108e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801109a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80110a6:	e087      	b.n	80111b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	ee07 3a90 	vmov	s15, r3
 80110ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011214 <HAL_RCC_GetSysClockFreq+0x2e8>
 80110b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110ba:	4b51      	ldr	r3, [pc, #324]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80110bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110c2:	ee07 3a90 	vmov	s15, r3
 80110c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80110ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011210 <HAL_RCC_GetSysClockFreq+0x2e4>
 80110d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80110de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80110ea:	e065      	b.n	80111b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	ee07 3a90 	vmov	s15, r3
 80110f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011218 <HAL_RCC_GetSysClockFreq+0x2ec>
 80110fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110fe:	4b40      	ldr	r3, [pc, #256]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011106:	ee07 3a90 	vmov	s15, r3
 801110a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801110e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011112:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011210 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801111a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801111e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801112a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801112e:	e043      	b.n	80111b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	ee07 3a90 	vmov	s15, r3
 8011136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801113a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801121c <HAL_RCC_GetSysClockFreq+0x2f0>
 801113e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011142:	4b2f      	ldr	r3, [pc, #188]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801114a:	ee07 3a90 	vmov	s15, r3
 801114e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011152:	ed97 6a02 	vldr	s12, [r7, #8]
 8011156:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011210 <HAL_RCC_GetSysClockFreq+0x2e4>
 801115a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801115e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801116a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801116e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011172:	e021      	b.n	80111b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	ee07 3a90 	vmov	s15, r3
 801117a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801117e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011218 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011186:	4b1e      	ldr	r3, [pc, #120]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801118a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801118e:	ee07 3a90 	vmov	s15, r3
 8011192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011196:	ed97 6a02 	vldr	s12, [r7, #8]
 801119a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011210 <HAL_RCC_GetSysClockFreq+0x2e4>
 801119e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80111aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80111b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80111b8:	4b11      	ldr	r3, [pc, #68]	@ (8011200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80111ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111bc:	0a5b      	lsrs	r3, r3, #9
 80111be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111c2:	3301      	adds	r3, #1
 80111c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	ee07 3a90 	vmov	s15, r3
 80111cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80111d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80111d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111dc:	ee17 3a90 	vmov	r3, s15
 80111e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80111e2:	e005      	b.n	80111f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80111e4:	2300      	movs	r3, #0
 80111e6:	61bb      	str	r3, [r7, #24]
      break;
 80111e8:	e002      	b.n	80111f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80111ea:	4b07      	ldr	r3, [pc, #28]	@ (8011208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80111ec:	61bb      	str	r3, [r7, #24]
      break;
 80111ee:	bf00      	nop
  }

  return sysclockfreq;
 80111f0:	69bb      	ldr	r3, [r7, #24]
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3724      	adds	r7, #36	@ 0x24
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	58024400 	.word	0x58024400
 8011204:	03d09000 	.word	0x03d09000
 8011208:	003d0900 	.word	0x003d0900
 801120c:	016e3600 	.word	0x016e3600
 8011210:	46000000 	.word	0x46000000
 8011214:	4c742400 	.word	0x4c742400
 8011218:	4a742400 	.word	0x4a742400
 801121c:	4bb71b00 	.word	0x4bb71b00

08011220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011226:	f7ff fe81 	bl	8010f2c <HAL_RCC_GetSysClockFreq>
 801122a:	4602      	mov	r2, r0
 801122c:	4b10      	ldr	r3, [pc, #64]	@ (8011270 <HAL_RCC_GetHCLKFreq+0x50>)
 801122e:	699b      	ldr	r3, [r3, #24]
 8011230:	0a1b      	lsrs	r3, r3, #8
 8011232:	f003 030f 	and.w	r3, r3, #15
 8011236:	490f      	ldr	r1, [pc, #60]	@ (8011274 <HAL_RCC_GetHCLKFreq+0x54>)
 8011238:	5ccb      	ldrb	r3, [r1, r3]
 801123a:	f003 031f 	and.w	r3, r3, #31
 801123e:	fa22 f303 	lsr.w	r3, r2, r3
 8011242:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011244:	4b0a      	ldr	r3, [pc, #40]	@ (8011270 <HAL_RCC_GetHCLKFreq+0x50>)
 8011246:	699b      	ldr	r3, [r3, #24]
 8011248:	f003 030f 	and.w	r3, r3, #15
 801124c:	4a09      	ldr	r2, [pc, #36]	@ (8011274 <HAL_RCC_GetHCLKFreq+0x54>)
 801124e:	5cd3      	ldrb	r3, [r2, r3]
 8011250:	f003 031f 	and.w	r3, r3, #31
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	fa22 f303 	lsr.w	r3, r2, r3
 801125a:	4a07      	ldr	r2, [pc, #28]	@ (8011278 <HAL_RCC_GetHCLKFreq+0x58>)
 801125c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801125e:	4a07      	ldr	r2, [pc, #28]	@ (801127c <HAL_RCC_GetHCLKFreq+0x5c>)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011264:	4b04      	ldr	r3, [pc, #16]	@ (8011278 <HAL_RCC_GetHCLKFreq+0x58>)
 8011266:	681b      	ldr	r3, [r3, #0]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	58024400 	.word	0x58024400
 8011274:	0801e2d0 	.word	0x0801e2d0
 8011278:	24000008 	.word	0x24000008
 801127c:	24000004 	.word	0x24000004

08011280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011284:	f7ff ffcc 	bl	8011220 <HAL_RCC_GetHCLKFreq>
 8011288:	4602      	mov	r2, r0
 801128a:	4b06      	ldr	r3, [pc, #24]	@ (80112a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801128c:	69db      	ldr	r3, [r3, #28]
 801128e:	091b      	lsrs	r3, r3, #4
 8011290:	f003 0307 	and.w	r3, r3, #7
 8011294:	4904      	ldr	r1, [pc, #16]	@ (80112a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011296:	5ccb      	ldrb	r3, [r1, r3]
 8011298:	f003 031f 	and.w	r3, r3, #31
 801129c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	58024400 	.word	0x58024400
 80112a8:	0801e2d0 	.word	0x0801e2d0

080112ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80112b0:	f7ff ffb6 	bl	8011220 <HAL_RCC_GetHCLKFreq>
 80112b4:	4602      	mov	r2, r0
 80112b6:	4b06      	ldr	r3, [pc, #24]	@ (80112d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80112b8:	69db      	ldr	r3, [r3, #28]
 80112ba:	0a1b      	lsrs	r3, r3, #8
 80112bc:	f003 0307 	and.w	r3, r3, #7
 80112c0:	4904      	ldr	r1, [pc, #16]	@ (80112d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80112c2:	5ccb      	ldrb	r3, [r1, r3]
 80112c4:	f003 031f 	and.w	r3, r3, #31
 80112c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	58024400 	.word	0x58024400
 80112d4:	0801e2d0 	.word	0x0801e2d0

080112d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80112d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112dc:	b0c6      	sub	sp, #280	@ 0x118
 80112de:	af00      	add	r7, sp, #0
 80112e0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80112e4:	2300      	movs	r3, #0
 80112e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80112ea:	2300      	movs	r3, #0
 80112ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80112f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80112f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80112fc:	2500      	movs	r5, #0
 80112fe:	ea54 0305 	orrs.w	r3, r4, r5
 8011302:	d049      	beq.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8011304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801130a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801130e:	d02f      	beq.n	8011370 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011310:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011314:	d828      	bhi.n	8011368 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801131a:	d01a      	beq.n	8011352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801131c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011320:	d822      	bhi.n	8011368 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011322:	2b00      	cmp	r3, #0
 8011324:	d003      	beq.n	801132e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801132a:	d007      	beq.n	801133c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801132c:	e01c      	b.n	8011368 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801132e:	4bab      	ldr	r3, [pc, #684]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011332:	4aaa      	ldr	r2, [pc, #680]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801133a:	e01a      	b.n	8011372 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801133c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011340:	3308      	adds	r3, #8
 8011342:	2102      	movs	r1, #2
 8011344:	4618      	mov	r0, r3
 8011346:	f002 fa49 	bl	80137dc <RCCEx_PLL2_Config>
 801134a:	4603      	mov	r3, r0
 801134c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011350:	e00f      	b.n	8011372 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011356:	3328      	adds	r3, #40	@ 0x28
 8011358:	2102      	movs	r1, #2
 801135a:	4618      	mov	r0, r3
 801135c:	f002 faf0 	bl	8013940 <RCCEx_PLL3_Config>
 8011360:	4603      	mov	r3, r0
 8011362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011366:	e004      	b.n	8011372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011368:	2301      	movs	r3, #1
 801136a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801136e:	e000      	b.n	8011372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011372:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011376:	2b00      	cmp	r3, #0
 8011378:	d10a      	bne.n	8011390 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801137a:	4b98      	ldr	r3, [pc, #608]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801137c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801137e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011388:	4a94      	ldr	r2, [pc, #592]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801138a:	430b      	orrs	r3, r1
 801138c:	6513      	str	r3, [r2, #80]	@ 0x50
 801138e:	e003      	b.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011394:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80113a4:	f04f 0900 	mov.w	r9, #0
 80113a8:	ea58 0309 	orrs.w	r3, r8, r9
 80113ac:	d047      	beq.n	801143e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80113ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80113b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113b4:	2b04      	cmp	r3, #4
 80113b6:	d82a      	bhi.n	801140e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80113b8:	a201      	add	r2, pc, #4	@ (adr r2, 80113c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80113ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113be:	bf00      	nop
 80113c0:	080113d5 	.word	0x080113d5
 80113c4:	080113e3 	.word	0x080113e3
 80113c8:	080113f9 	.word	0x080113f9
 80113cc:	08011417 	.word	0x08011417
 80113d0:	08011417 	.word	0x08011417
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113d4:	4b81      	ldr	r3, [pc, #516]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80113d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113d8:	4a80      	ldr	r2, [pc, #512]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80113da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80113de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80113e0:	e01a      	b.n	8011418 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80113e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80113e6:	3308      	adds	r3, #8
 80113e8:	2100      	movs	r1, #0
 80113ea:	4618      	mov	r0, r3
 80113ec:	f002 f9f6 	bl	80137dc <RCCEx_PLL2_Config>
 80113f0:	4603      	mov	r3, r0
 80113f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80113f6:	e00f      	b.n	8011418 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80113f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80113fc:	3328      	adds	r3, #40	@ 0x28
 80113fe:	2100      	movs	r1, #0
 8011400:	4618      	mov	r0, r3
 8011402:	f002 fa9d 	bl	8013940 <RCCEx_PLL3_Config>
 8011406:	4603      	mov	r3, r0
 8011408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801140c:	e004      	b.n	8011418 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801140e:	2301      	movs	r3, #1
 8011410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011414:	e000      	b.n	8011418 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8011416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801141c:	2b00      	cmp	r3, #0
 801141e:	d10a      	bne.n	8011436 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011420:	4b6e      	ldr	r3, [pc, #440]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011424:	f023 0107 	bic.w	r1, r3, #7
 8011428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801142c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801142e:	4a6b      	ldr	r2, [pc, #428]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011430:	430b      	orrs	r3, r1
 8011432:	6513      	str	r3, [r2, #80]	@ 0x50
 8011434:	e003      	b.n	801143e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801143a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801143e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011446:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 801144a:	f04f 0b00 	mov.w	fp, #0
 801144e:	ea5a 030b 	orrs.w	r3, sl, fp
 8011452:	d05b      	beq.n	801150c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8011454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011458:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801145c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011460:	d03b      	beq.n	80114da <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011462:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011466:	d834      	bhi.n	80114d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011468:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801146c:	d037      	beq.n	80114de <HAL_RCCEx_PeriphCLKConfig+0x206>
 801146e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011472:	d82e      	bhi.n	80114d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011474:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011478:	d033      	beq.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801147a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801147e:	d828      	bhi.n	80114d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011484:	d01a      	beq.n	80114bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801148a:	d822      	bhi.n	80114d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801148c:	2b00      	cmp	r3, #0
 801148e:	d003      	beq.n	8011498 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011490:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011494:	d007      	beq.n	80114a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011496:	e01c      	b.n	80114d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011498:	4b50      	ldr	r3, [pc, #320]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801149c:	4a4f      	ldr	r2, [pc, #316]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801149e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80114a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80114a4:	e01e      	b.n	80114e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80114a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80114aa:	3308      	adds	r3, #8
 80114ac:	2100      	movs	r1, #0
 80114ae:	4618      	mov	r0, r3
 80114b0:	f002 f994 	bl	80137dc <RCCEx_PLL2_Config>
 80114b4:	4603      	mov	r3, r0
 80114b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80114ba:	e013      	b.n	80114e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80114bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80114c0:	3328      	adds	r3, #40	@ 0x28
 80114c2:	2100      	movs	r1, #0
 80114c4:	4618      	mov	r0, r3
 80114c6:	f002 fa3b 	bl	8013940 <RCCEx_PLL3_Config>
 80114ca:	4603      	mov	r3, r0
 80114cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80114d0:	e008      	b.n	80114e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80114d2:	2301      	movs	r3, #1
 80114d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80114d8:	e004      	b.n	80114e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80114da:	bf00      	nop
 80114dc:	e002      	b.n	80114e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80114de:	bf00      	nop
 80114e0:	e000      	b.n	80114e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80114e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80114e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d10b      	bne.n	8011504 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80114ec:	4b3b      	ldr	r3, [pc, #236]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80114ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114f0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80114f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80114f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80114fc:	4a37      	ldr	r2, [pc, #220]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80114fe:	430b      	orrs	r3, r1
 8011500:	6593      	str	r3, [r2, #88]	@ 0x58
 8011502:	e003      	b.n	801150c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801150c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011518:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801151c:	2300      	movs	r3, #0
 801151e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011522:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8011526:	460b      	mov	r3, r1
 8011528:	4313      	orrs	r3, r2
 801152a:	d05d      	beq.n	80115e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801152c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011534:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011538:	d03b      	beq.n	80115b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801153a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801153e:	d834      	bhi.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011544:	d037      	beq.n	80115b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801154a:	d82e      	bhi.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801154c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011550:	d033      	beq.n	80115ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011552:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011556:	d828      	bhi.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801155c:	d01a      	beq.n	8011594 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801155e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011562:	d822      	bhi.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011564:	2b00      	cmp	r3, #0
 8011566:	d003      	beq.n	8011570 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801156c:	d007      	beq.n	801157e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801156e:	e01c      	b.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011570:	4b1a      	ldr	r3, [pc, #104]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011574:	4a19      	ldr	r2, [pc, #100]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801157a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801157c:	e01e      	b.n	80115bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801157e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011582:	3308      	adds	r3, #8
 8011584:	2100      	movs	r1, #0
 8011586:	4618      	mov	r0, r3
 8011588:	f002 f928 	bl	80137dc <RCCEx_PLL2_Config>
 801158c:	4603      	mov	r3, r0
 801158e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011592:	e013      	b.n	80115bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011598:	3328      	adds	r3, #40	@ 0x28
 801159a:	2100      	movs	r1, #0
 801159c:	4618      	mov	r0, r3
 801159e:	f002 f9cf 	bl	8013940 <RCCEx_PLL3_Config>
 80115a2:	4603      	mov	r3, r0
 80115a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80115a8:	e008      	b.n	80115bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80115aa:	2301      	movs	r3, #1
 80115ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80115b0:	e004      	b.n	80115bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80115b2:	bf00      	nop
 80115b4:	e002      	b.n	80115bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80115b6:	bf00      	nop
 80115b8:	e000      	b.n	80115bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80115ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80115bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10d      	bne.n	80115e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80115c4:	4b05      	ldr	r3, [pc, #20]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80115c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80115cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80115d4:	4a01      	ldr	r2, [pc, #4]	@ (80115dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80115d6:	430b      	orrs	r3, r1
 80115d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80115da:	e005      	b.n	80115e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80115dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80115e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80115e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80115ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80115f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80115f8:	2300      	movs	r3, #0
 80115fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80115fe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8011602:	460b      	mov	r3, r1
 8011604:	4313      	orrs	r3, r2
 8011606:	d03a      	beq.n	801167e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8011608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801160e:	2b30      	cmp	r3, #48	@ 0x30
 8011610:	d01f      	beq.n	8011652 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8011612:	2b30      	cmp	r3, #48	@ 0x30
 8011614:	d819      	bhi.n	801164a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011616:	2b20      	cmp	r3, #32
 8011618:	d00c      	beq.n	8011634 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801161a:	2b20      	cmp	r3, #32
 801161c:	d815      	bhi.n	801164a <HAL_RCCEx_PeriphCLKConfig+0x372>
 801161e:	2b00      	cmp	r3, #0
 8011620:	d019      	beq.n	8011656 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8011622:	2b10      	cmp	r3, #16
 8011624:	d111      	bne.n	801164a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011626:	4baa      	ldr	r3, [pc, #680]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801162a:	4aa9      	ldr	r2, [pc, #676]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801162c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011632:	e011      	b.n	8011658 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011638:	3308      	adds	r3, #8
 801163a:	2102      	movs	r1, #2
 801163c:	4618      	mov	r0, r3
 801163e:	f002 f8cd 	bl	80137dc <RCCEx_PLL2_Config>
 8011642:	4603      	mov	r3, r0
 8011644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011648:	e006      	b.n	8011658 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801164a:	2301      	movs	r3, #1
 801164c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011650:	e002      	b.n	8011658 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011652:	bf00      	nop
 8011654:	e000      	b.n	8011658 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801165c:	2b00      	cmp	r3, #0
 801165e:	d10a      	bne.n	8011676 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011660:	4b9b      	ldr	r3, [pc, #620]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011664:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8011668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801166e:	4a98      	ldr	r2, [pc, #608]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011670:	430b      	orrs	r3, r1
 8011672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011674:	e003      	b.n	801167e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011676:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801167a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801167e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011686:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801168a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801168e:	2300      	movs	r3, #0
 8011690:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8011694:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8011698:	460b      	mov	r3, r1
 801169a:	4313      	orrs	r3, r2
 801169c:	d051      	beq.n	8011742 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801169e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80116a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80116a8:	d035      	beq.n	8011716 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80116aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80116ae:	d82e      	bhi.n	801170e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80116b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80116b4:	d031      	beq.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80116b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80116ba:	d828      	bhi.n	801170e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80116bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80116c0:	d01a      	beq.n	80116f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80116c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80116c6:	d822      	bhi.n	801170e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d003      	beq.n	80116d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80116cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80116d0:	d007      	beq.n	80116e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80116d2:	e01c      	b.n	801170e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80116d4:	4b7e      	ldr	r3, [pc, #504]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80116d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116d8:	4a7d      	ldr	r2, [pc, #500]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80116da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80116de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80116e0:	e01c      	b.n	801171c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80116e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116e6:	3308      	adds	r3, #8
 80116e8:	2100      	movs	r1, #0
 80116ea:	4618      	mov	r0, r3
 80116ec:	f002 f876 	bl	80137dc <RCCEx_PLL2_Config>
 80116f0:	4603      	mov	r3, r0
 80116f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80116f6:	e011      	b.n	801171c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80116f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116fc:	3328      	adds	r3, #40	@ 0x28
 80116fe:	2100      	movs	r1, #0
 8011700:	4618      	mov	r0, r3
 8011702:	f002 f91d 	bl	8013940 <RCCEx_PLL3_Config>
 8011706:	4603      	mov	r3, r0
 8011708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801170c:	e006      	b.n	801171c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801170e:	2301      	movs	r3, #1
 8011710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011714:	e002      	b.n	801171c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8011716:	bf00      	nop
 8011718:	e000      	b.n	801171c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801171a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801171c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011720:	2b00      	cmp	r3, #0
 8011722:	d10a      	bne.n	801173a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011724:	4b6a      	ldr	r3, [pc, #424]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011728:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801172c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011732:	4a67      	ldr	r2, [pc, #412]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011734:	430b      	orrs	r3, r1
 8011736:	6513      	str	r3, [r2, #80]	@ 0x50
 8011738:	e003      	b.n	8011742 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801173a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801173e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801174e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011752:	2300      	movs	r3, #0
 8011754:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011758:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801175c:	460b      	mov	r3, r1
 801175e:	4313      	orrs	r3, r2
 8011760:	d053      	beq.n	801180a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8011762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801176c:	d033      	beq.n	80117d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801176e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011772:	d82c      	bhi.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011778:	d02f      	beq.n	80117da <HAL_RCCEx_PeriphCLKConfig+0x502>
 801177a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801177e:	d826      	bhi.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011780:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011784:	d02b      	beq.n	80117de <HAL_RCCEx_PeriphCLKConfig+0x506>
 8011786:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801178a:	d820      	bhi.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801178c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011790:	d012      	beq.n	80117b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8011792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011796:	d81a      	bhi.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011798:	2b00      	cmp	r3, #0
 801179a:	d022      	beq.n	80117e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801179c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80117a0:	d115      	bne.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80117a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117a6:	3308      	adds	r3, #8
 80117a8:	2101      	movs	r1, #1
 80117aa:	4618      	mov	r0, r3
 80117ac:	f002 f816 	bl	80137dc <RCCEx_PLL2_Config>
 80117b0:	4603      	mov	r3, r0
 80117b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80117b6:	e015      	b.n	80117e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80117b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117bc:	3328      	adds	r3, #40	@ 0x28
 80117be:	2101      	movs	r1, #1
 80117c0:	4618      	mov	r0, r3
 80117c2:	f002 f8bd 	bl	8013940 <RCCEx_PLL3_Config>
 80117c6:	4603      	mov	r3, r0
 80117c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80117cc:	e00a      	b.n	80117e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80117ce:	2301      	movs	r3, #1
 80117d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80117d4:	e006      	b.n	80117e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80117d6:	bf00      	nop
 80117d8:	e004      	b.n	80117e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80117da:	bf00      	nop
 80117dc:	e002      	b.n	80117e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80117de:	bf00      	nop
 80117e0:	e000      	b.n	80117e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80117e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80117e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d10a      	bne.n	8011802 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80117ec:	4b38      	ldr	r3, [pc, #224]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80117ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80117f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80117fa:	4a35      	ldr	r2, [pc, #212]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80117fc:	430b      	orrs	r3, r1
 80117fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8011800:	e003      	b.n	801180a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011802:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011806:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801180a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011812:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8011816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801181a:	2300      	movs	r3, #0
 801181c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8011820:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011824:	460b      	mov	r3, r1
 8011826:	4313      	orrs	r3, r2
 8011828:	d058      	beq.n	80118dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801182a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801182e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011836:	d033      	beq.n	80118a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8011838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801183c:	d82c      	bhi.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801183e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011842:	d02f      	beq.n	80118a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8011844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011848:	d826      	bhi.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801184a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801184e:	d02b      	beq.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8011850:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011854:	d820      	bhi.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801185a:	d012      	beq.n	8011882 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801185c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011860:	d81a      	bhi.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011862:	2b00      	cmp	r3, #0
 8011864:	d022      	beq.n	80118ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8011866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801186a:	d115      	bne.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801186c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011870:	3308      	adds	r3, #8
 8011872:	2101      	movs	r1, #1
 8011874:	4618      	mov	r0, r3
 8011876:	f001 ffb1 	bl	80137dc <RCCEx_PLL2_Config>
 801187a:	4603      	mov	r3, r0
 801187c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8011880:	e015      	b.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011886:	3328      	adds	r3, #40	@ 0x28
 8011888:	2101      	movs	r1, #1
 801188a:	4618      	mov	r0, r3
 801188c:	f002 f858 	bl	8013940 <RCCEx_PLL3_Config>
 8011890:	4603      	mov	r3, r0
 8011892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8011896:	e00a      	b.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8011898:	2301      	movs	r3, #1
 801189a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801189e:	e006      	b.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80118a0:	bf00      	nop
 80118a2:	e004      	b.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80118a4:	bf00      	nop
 80118a6:	e002      	b.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80118a8:	bf00      	nop
 80118aa:	e000      	b.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80118ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80118ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d10e      	bne.n	80118d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80118b6:	4b06      	ldr	r3, [pc, #24]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80118b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80118be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80118c6:	4a02      	ldr	r2, [pc, #8]	@ (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80118c8:	430b      	orrs	r3, r1
 80118ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80118cc:	e006      	b.n	80118dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80118ce:	bf00      	nop
 80118d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80118d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80118d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80118dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80118e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80118ec:	2300      	movs	r3, #0
 80118ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80118f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80118f6:	460b      	mov	r3, r1
 80118f8:	4313      	orrs	r3, r2
 80118fa:	d037      	beq.n	801196c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80118fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011906:	d00e      	beq.n	8011926 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8011908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801190c:	d816      	bhi.n	801193c <HAL_RCCEx_PeriphCLKConfig+0x664>
 801190e:	2b00      	cmp	r3, #0
 8011910:	d018      	beq.n	8011944 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8011912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011916:	d111      	bne.n	801193c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011918:	4bc4      	ldr	r3, [pc, #784]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801191a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801191c:	4ac3      	ldr	r2, [pc, #780]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801191e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8011924:	e00f      	b.n	8011946 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801192a:	3308      	adds	r3, #8
 801192c:	2101      	movs	r1, #1
 801192e:	4618      	mov	r0, r3
 8011930:	f001 ff54 	bl	80137dc <RCCEx_PLL2_Config>
 8011934:	4603      	mov	r3, r0
 8011936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801193a:	e004      	b.n	8011946 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801193c:	2301      	movs	r3, #1
 801193e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011942:	e000      	b.n	8011946 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8011944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801194a:	2b00      	cmp	r3, #0
 801194c:	d10a      	bne.n	8011964 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801194e:	4bb7      	ldr	r3, [pc, #732]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011952:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8011956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801195a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801195c:	4ab3      	ldr	r2, [pc, #716]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801195e:	430b      	orrs	r3, r1
 8011960:	6513      	str	r3, [r2, #80]	@ 0x50
 8011962:	e003      	b.n	801196c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011968:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801196c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011974:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8011978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801197c:	2300      	movs	r3, #0
 801197e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011982:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8011986:	460b      	mov	r3, r1
 8011988:	4313      	orrs	r3, r2
 801198a:	d039      	beq.n	8011a00 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801198c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011992:	2b03      	cmp	r3, #3
 8011994:	d81c      	bhi.n	80119d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8011996:	a201      	add	r2, pc, #4	@ (adr r2, 801199c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8011998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801199c:	080119d9 	.word	0x080119d9
 80119a0:	080119ad 	.word	0x080119ad
 80119a4:	080119bb 	.word	0x080119bb
 80119a8:	080119d9 	.word	0x080119d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80119ac:	4b9f      	ldr	r3, [pc, #636]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119b0:	4a9e      	ldr	r2, [pc, #632]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80119b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80119b8:	e00f      	b.n	80119da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80119ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119be:	3308      	adds	r3, #8
 80119c0:	2102      	movs	r1, #2
 80119c2:	4618      	mov	r0, r3
 80119c4:	f001 ff0a 	bl	80137dc <RCCEx_PLL2_Config>
 80119c8:	4603      	mov	r3, r0
 80119ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80119ce:	e004      	b.n	80119da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80119d0:	2301      	movs	r3, #1
 80119d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80119d6:	e000      	b.n	80119da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80119d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80119da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d10a      	bne.n	80119f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80119e2:	4b92      	ldr	r3, [pc, #584]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119e6:	f023 0103 	bic.w	r1, r3, #3
 80119ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80119f0:	4a8e      	ldr	r2, [pc, #568]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80119f2:	430b      	orrs	r3, r1
 80119f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80119f6:	e003      	b.n	8011a00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8011a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011a10:	2300      	movs	r3, #0
 8011a12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011a16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4313      	orrs	r3, r2
 8011a1e:	f000 8099 	beq.w	8011b54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011a22:	4b83      	ldr	r3, [pc, #524]	@ (8011c30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	4a82      	ldr	r2, [pc, #520]	@ (8011c30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011a2e:	f7f6 fec3 	bl	80087b8 <HAL_GetTick>
 8011a32:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a36:	e00b      	b.n	8011a50 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a38:	f7f6 febe 	bl	80087b8 <HAL_GetTick>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	2b64      	cmp	r3, #100	@ 0x64
 8011a46:	d903      	bls.n	8011a50 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8011a48:	2303      	movs	r3, #3
 8011a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011a4e:	e005      	b.n	8011a5c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a50:	4b77      	ldr	r3, [pc, #476]	@ (8011c30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d0ed      	beq.n	8011a38 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8011a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d173      	bne.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011a64:	4b71      	ldr	r3, [pc, #452]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011a70:	4053      	eors	r3, r2
 8011a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d015      	beq.n	8011aa6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011a82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011a86:	4b69      	ldr	r3, [pc, #420]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a8a:	4a68      	ldr	r2, [pc, #416]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011a90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011a92:	4b66      	ldr	r3, [pc, #408]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a96:	4a65      	ldr	r2, [pc, #404]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011a9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011a9e:	4a63      	ldr	r2, [pc, #396]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011aa4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8011aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011aaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011ab2:	d118      	bne.n	8011ae6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ab4:	f7f6 fe80 	bl	80087b8 <HAL_GetTick>
 8011ab8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011abc:	e00d      	b.n	8011ada <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011abe:	f7f6 fe7b 	bl	80087b8 <HAL_GetTick>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8011ac8:	1ad2      	subs	r2, r2, r3
 8011aca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d903      	bls.n	8011ada <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8011ad8:	e005      	b.n	8011ae6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011ada:	4b54      	ldr	r3, [pc, #336]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ade:	f003 0302 	and.w	r3, r3, #2
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d0eb      	beq.n	8011abe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8011ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d129      	bne.n	8011b42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011afe:	d10e      	bne.n	8011b1e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8011b00:	4b4a      	ldr	r3, [pc, #296]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b02:	691b      	ldr	r3, [r3, #16]
 8011b04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011b10:	091a      	lsrs	r2, r3, #4
 8011b12:	4b48      	ldr	r3, [pc, #288]	@ (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8011b14:	4013      	ands	r3, r2
 8011b16:	4a45      	ldr	r2, [pc, #276]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b18:	430b      	orrs	r3, r1
 8011b1a:	6113      	str	r3, [r2, #16]
 8011b1c:	e005      	b.n	8011b2a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8011b1e:	4b43      	ldr	r3, [pc, #268]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b20:	691b      	ldr	r3, [r3, #16]
 8011b22:	4a42      	ldr	r2, [pc, #264]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011b28:	6113      	str	r3, [r2, #16]
 8011b2a:	4b40      	ldr	r3, [pc, #256]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8011c2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011b3c:	430b      	orrs	r3, r1
 8011b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011b40:	e008      	b.n	8011b54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011b4a:	e003      	b.n	8011b54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5c:	f002 0301 	and.w	r3, r2, #1
 8011b60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011b64:	2300      	movs	r3, #0
 8011b66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011b6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8011b6e:	460b      	mov	r3, r1
 8011b70:	4313      	orrs	r3, r2
 8011b72:	f000 808f 	beq.w	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8011b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b7c:	2b28      	cmp	r3, #40	@ 0x28
 8011b7e:	d871      	bhi.n	8011c64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8011b80:	a201      	add	r2, pc, #4	@ (adr r2, 8011b88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8011b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b86:	bf00      	nop
 8011b88:	08011c6d 	.word	0x08011c6d
 8011b8c:	08011c65 	.word	0x08011c65
 8011b90:	08011c65 	.word	0x08011c65
 8011b94:	08011c65 	.word	0x08011c65
 8011b98:	08011c65 	.word	0x08011c65
 8011b9c:	08011c65 	.word	0x08011c65
 8011ba0:	08011c65 	.word	0x08011c65
 8011ba4:	08011c65 	.word	0x08011c65
 8011ba8:	08011c39 	.word	0x08011c39
 8011bac:	08011c65 	.word	0x08011c65
 8011bb0:	08011c65 	.word	0x08011c65
 8011bb4:	08011c65 	.word	0x08011c65
 8011bb8:	08011c65 	.word	0x08011c65
 8011bbc:	08011c65 	.word	0x08011c65
 8011bc0:	08011c65 	.word	0x08011c65
 8011bc4:	08011c65 	.word	0x08011c65
 8011bc8:	08011c4f 	.word	0x08011c4f
 8011bcc:	08011c65 	.word	0x08011c65
 8011bd0:	08011c65 	.word	0x08011c65
 8011bd4:	08011c65 	.word	0x08011c65
 8011bd8:	08011c65 	.word	0x08011c65
 8011bdc:	08011c65 	.word	0x08011c65
 8011be0:	08011c65 	.word	0x08011c65
 8011be4:	08011c65 	.word	0x08011c65
 8011be8:	08011c6d 	.word	0x08011c6d
 8011bec:	08011c65 	.word	0x08011c65
 8011bf0:	08011c65 	.word	0x08011c65
 8011bf4:	08011c65 	.word	0x08011c65
 8011bf8:	08011c65 	.word	0x08011c65
 8011bfc:	08011c65 	.word	0x08011c65
 8011c00:	08011c65 	.word	0x08011c65
 8011c04:	08011c65 	.word	0x08011c65
 8011c08:	08011c6d 	.word	0x08011c6d
 8011c0c:	08011c65 	.word	0x08011c65
 8011c10:	08011c65 	.word	0x08011c65
 8011c14:	08011c65 	.word	0x08011c65
 8011c18:	08011c65 	.word	0x08011c65
 8011c1c:	08011c65 	.word	0x08011c65
 8011c20:	08011c65 	.word	0x08011c65
 8011c24:	08011c65 	.word	0x08011c65
 8011c28:	08011c6d 	.word	0x08011c6d
 8011c2c:	58024400 	.word	0x58024400
 8011c30:	58024800 	.word	0x58024800
 8011c34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c3c:	3308      	adds	r3, #8
 8011c3e:	2101      	movs	r1, #1
 8011c40:	4618      	mov	r0, r3
 8011c42:	f001 fdcb 	bl	80137dc <RCCEx_PLL2_Config>
 8011c46:	4603      	mov	r3, r0
 8011c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011c4c:	e00f      	b.n	8011c6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c52:	3328      	adds	r3, #40	@ 0x28
 8011c54:	2101      	movs	r1, #1
 8011c56:	4618      	mov	r0, r3
 8011c58:	f001 fe72 	bl	8013940 <RCCEx_PLL3_Config>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011c62:	e004      	b.n	8011c6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011c64:	2301      	movs	r3, #1
 8011c66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011c6a:	e000      	b.n	8011c6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8011c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d10a      	bne.n	8011c8c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011c76:	4bbf      	ldr	r3, [pc, #764]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8011c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c84:	4abb      	ldr	r2, [pc, #748]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011c86:	430b      	orrs	r3, r1
 8011c88:	6553      	str	r3, [r2, #84]	@ 0x54
 8011c8a:	e003      	b.n	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9c:	f002 0302 	and.w	r3, r2, #2
 8011ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011caa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8011cae:	460b      	mov	r3, r1
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	d041      	beq.n	8011d38 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8011cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011cba:	2b05      	cmp	r3, #5
 8011cbc:	d824      	bhi.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8011cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8011cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc4:	08011d11 	.word	0x08011d11
 8011cc8:	08011cdd 	.word	0x08011cdd
 8011ccc:	08011cf3 	.word	0x08011cf3
 8011cd0:	08011d11 	.word	0x08011d11
 8011cd4:	08011d11 	.word	0x08011d11
 8011cd8:	08011d11 	.word	0x08011d11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ce0:	3308      	adds	r3, #8
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f001 fd79 	bl	80137dc <RCCEx_PLL2_Config>
 8011cea:	4603      	mov	r3, r0
 8011cec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011cf0:	e00f      	b.n	8011d12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cf6:	3328      	adds	r3, #40	@ 0x28
 8011cf8:	2101      	movs	r1, #1
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f001 fe20 	bl	8013940 <RCCEx_PLL3_Config>
 8011d00:	4603      	mov	r3, r0
 8011d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011d06:	e004      	b.n	8011d12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011d0e:	e000      	b.n	8011d12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8011d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d10a      	bne.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011d1a:	4b96      	ldr	r3, [pc, #600]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d1e:	f023 0107 	bic.w	r1, r3, #7
 8011d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d28:	4a92      	ldr	r2, [pc, #584]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011d2a:	430b      	orrs	r3, r1
 8011d2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8011d2e:	e003      	b.n	8011d38 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d40:	f002 0304 	and.w	r3, r2, #4
 8011d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011d48:	2300      	movs	r3, #0
 8011d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011d4e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011d52:	460b      	mov	r3, r1
 8011d54:	4313      	orrs	r3, r2
 8011d56:	d044      	beq.n	8011de2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8011d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d60:	2b05      	cmp	r3, #5
 8011d62:	d825      	bhi.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8011d64:	a201      	add	r2, pc, #4	@ (adr r2, 8011d6c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8011d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d6a:	bf00      	nop
 8011d6c:	08011db9 	.word	0x08011db9
 8011d70:	08011d85 	.word	0x08011d85
 8011d74:	08011d9b 	.word	0x08011d9b
 8011d78:	08011db9 	.word	0x08011db9
 8011d7c:	08011db9 	.word	0x08011db9
 8011d80:	08011db9 	.word	0x08011db9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d88:	3308      	adds	r3, #8
 8011d8a:	2101      	movs	r1, #1
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f001 fd25 	bl	80137dc <RCCEx_PLL2_Config>
 8011d92:	4603      	mov	r3, r0
 8011d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8011d98:	e00f      	b.n	8011dba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d9e:	3328      	adds	r3, #40	@ 0x28
 8011da0:	2101      	movs	r1, #1
 8011da2:	4618      	mov	r0, r3
 8011da4:	f001 fdcc 	bl	8013940 <RCCEx_PLL3_Config>
 8011da8:	4603      	mov	r3, r0
 8011daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8011dae:	e004      	b.n	8011dba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011db0:	2301      	movs	r3, #1
 8011db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011db6:	e000      	b.n	8011dba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8011db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011dba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d10b      	bne.n	8011dda <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011dc6:	f023 0107 	bic.w	r1, r3, #7
 8011dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011dd2:	4a68      	ldr	r2, [pc, #416]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011dd4:	430b      	orrs	r3, r1
 8011dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8011dd8:	e003      	b.n	8011de2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011dde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dea:	f002 0320 	and.w	r3, r2, #32
 8011dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011df2:	2300      	movs	r3, #0
 8011df4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011df8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	4313      	orrs	r3, r2
 8011e00:	d055      	beq.n	8011eae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8011e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011e0e:	d033      	beq.n	8011e78 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8011e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011e14:	d82c      	bhi.n	8011e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e1a:	d02f      	beq.n	8011e7c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8011e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e20:	d826      	bhi.n	8011e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011e26:	d02b      	beq.n	8011e80 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8011e28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011e2c:	d820      	bhi.n	8011e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e32:	d012      	beq.n	8011e5a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8011e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e38:	d81a      	bhi.n	8011e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d022      	beq.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8011e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011e42:	d115      	bne.n	8011e70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e48:	3308      	adds	r3, #8
 8011e4a:	2100      	movs	r1, #0
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f001 fcc5 	bl	80137dc <RCCEx_PLL2_Config>
 8011e52:	4603      	mov	r3, r0
 8011e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011e58:	e015      	b.n	8011e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e5e:	3328      	adds	r3, #40	@ 0x28
 8011e60:	2102      	movs	r1, #2
 8011e62:	4618      	mov	r0, r3
 8011e64:	f001 fd6c 	bl	8013940 <RCCEx_PLL3_Config>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011e6e:	e00a      	b.n	8011e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011e70:	2301      	movs	r3, #1
 8011e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011e76:	e006      	b.n	8011e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011e78:	bf00      	nop
 8011e7a:	e004      	b.n	8011e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011e7c:	bf00      	nop
 8011e7e:	e002      	b.n	8011e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011e80:	bf00      	nop
 8011e82:	e000      	b.n	8011e86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8011e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011e86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d10b      	bne.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011e8e:	4b39      	ldr	r3, [pc, #228]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011e92:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8011e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011e9e:	4a35      	ldr	r2, [pc, #212]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011ea0:	430b      	orrs	r3, r1
 8011ea2:	6553      	str	r3, [r2, #84]	@ 0x54
 8011ea4:	e003      	b.n	8011eae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011eaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8011eba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011ec4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8011ec8:	460b      	mov	r3, r1
 8011eca:	4313      	orrs	r3, r2
 8011ecc:	d058      	beq.n	8011f80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8011ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011ed6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8011eda:	d033      	beq.n	8011f44 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8011edc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8011ee0:	d82c      	bhi.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011ee6:	d02f      	beq.n	8011f48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8011ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011eec:	d826      	bhi.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011eee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011ef2:	d02b      	beq.n	8011f4c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8011ef4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011ef8:	d820      	bhi.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011efa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011efe:	d012      	beq.n	8011f26 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8011f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011f04:	d81a      	bhi.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d022      	beq.n	8011f50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8011f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011f0e:	d115      	bne.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f14:	3308      	adds	r3, #8
 8011f16:	2100      	movs	r1, #0
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f001 fc5f 	bl	80137dc <RCCEx_PLL2_Config>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011f24:	e015      	b.n	8011f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f2a:	3328      	adds	r3, #40	@ 0x28
 8011f2c:	2102      	movs	r1, #2
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f001 fd06 	bl	8013940 <RCCEx_PLL3_Config>
 8011f34:	4603      	mov	r3, r0
 8011f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011f3a:	e00a      	b.n	8011f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011f42:	e006      	b.n	8011f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011f44:	bf00      	nop
 8011f46:	e004      	b.n	8011f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011f48:	bf00      	nop
 8011f4a:	e002      	b.n	8011f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011f4c:	bf00      	nop
 8011f4e:	e000      	b.n	8011f52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8011f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d10e      	bne.n	8011f78 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011f5a:	4b06      	ldr	r3, [pc, #24]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f5e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8011f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011f6a:	4a02      	ldr	r2, [pc, #8]	@ (8011f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011f6c:	430b      	orrs	r3, r1
 8011f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8011f70:	e006      	b.n	8011f80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8011f72:	bf00      	nop
 8011f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8011f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011f90:	2300      	movs	r3, #0
 8011f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011f96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	d055      	beq.n	801204c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8011fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011fa8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8011fac:	d033      	beq.n	8012016 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8011fae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8011fb2:	d82c      	bhi.n	801200e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fb8:	d02f      	beq.n	801201a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8011fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fbe:	d826      	bhi.n	801200e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011fc0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011fc4:	d02b      	beq.n	801201e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8011fc6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011fca:	d820      	bhi.n	801200e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011fd0:	d012      	beq.n	8011ff8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8011fd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011fd6:	d81a      	bhi.n	801200e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d022      	beq.n	8012022 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8011fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011fe0:	d115      	bne.n	801200e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fe6:	3308      	adds	r3, #8
 8011fe8:	2100      	movs	r1, #0
 8011fea:	4618      	mov	r0, r3
 8011fec:	f001 fbf6 	bl	80137dc <RCCEx_PLL2_Config>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8011ff6:	e015      	b.n	8012024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ffc:	3328      	adds	r3, #40	@ 0x28
 8011ffe:	2102      	movs	r1, #2
 8012000:	4618      	mov	r0, r3
 8012002:	f001 fc9d 	bl	8013940 <RCCEx_PLL3_Config>
 8012006:	4603      	mov	r3, r0
 8012008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801200c:	e00a      	b.n	8012024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801200e:	2301      	movs	r3, #1
 8012010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012014:	e006      	b.n	8012024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012016:	bf00      	nop
 8012018:	e004      	b.n	8012024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801201a:	bf00      	nop
 801201c:	e002      	b.n	8012024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801201e:	bf00      	nop
 8012020:	e000      	b.n	8012024 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012028:	2b00      	cmp	r3, #0
 801202a:	d10b      	bne.n	8012044 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801202c:	4ba0      	ldr	r3, [pc, #640]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012030:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801203c:	4a9c      	ldr	r2, [pc, #624]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801203e:	430b      	orrs	r3, r1
 8012040:	6593      	str	r3, [r2, #88]	@ 0x58
 8012042:	e003      	b.n	801204c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801204c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012054:	f002 0308 	and.w	r3, r2, #8
 8012058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801205c:	2300      	movs	r3, #0
 801205e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012062:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012066:	460b      	mov	r3, r1
 8012068:	4313      	orrs	r3, r2
 801206a:	d01e      	beq.n	80120aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801206c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012078:	d10c      	bne.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801207a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801207e:	3328      	adds	r3, #40	@ 0x28
 8012080:	2102      	movs	r1, #2
 8012082:	4618      	mov	r0, r3
 8012084:	f001 fc5c 	bl	8013940 <RCCEx_PLL3_Config>
 8012088:	4603      	mov	r3, r0
 801208a:	2b00      	cmp	r3, #0
 801208c:	d002      	beq.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801208e:	2301      	movs	r3, #1
 8012090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012094:	4b86      	ldr	r3, [pc, #536]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012098:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801209c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120a4:	4a82      	ldr	r2, [pc, #520]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80120a6:	430b      	orrs	r3, r1
 80120a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80120aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b2:	f002 0310 	and.w	r3, r2, #16
 80120b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80120ba:	2300      	movs	r3, #0
 80120bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80120c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80120c4:	460b      	mov	r3, r1
 80120c6:	4313      	orrs	r3, r2
 80120c8:	d01e      	beq.n	8012108 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80120ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80120d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80120d6:	d10c      	bne.n	80120f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80120d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120dc:	3328      	adds	r3, #40	@ 0x28
 80120de:	2102      	movs	r1, #2
 80120e0:	4618      	mov	r0, r3
 80120e2:	f001 fc2d 	bl	8013940 <RCCEx_PLL3_Config>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80120ec:	2301      	movs	r3, #1
 80120ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80120f2:	4b6f      	ldr	r3, [pc, #444]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80120f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80120fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012102:	4a6b      	ldr	r2, [pc, #428]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012104:	430b      	orrs	r3, r1
 8012106:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012116:	2300      	movs	r3, #0
 8012118:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801211a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801211e:	460b      	mov	r3, r1
 8012120:	4313      	orrs	r3, r2
 8012122:	d03e      	beq.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012128:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801212c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012130:	d022      	beq.n	8012178 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012136:	d81b      	bhi.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012138:	2b00      	cmp	r3, #0
 801213a:	d003      	beq.n	8012144 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 801213c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012140:	d00b      	beq.n	801215a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012142:	e015      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012148:	3308      	adds	r3, #8
 801214a:	2100      	movs	r1, #0
 801214c:	4618      	mov	r0, r3
 801214e:	f001 fb45 	bl	80137dc <RCCEx_PLL2_Config>
 8012152:	4603      	mov	r3, r0
 8012154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012158:	e00f      	b.n	801217a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801215a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801215e:	3328      	adds	r3, #40	@ 0x28
 8012160:	2102      	movs	r1, #2
 8012162:	4618      	mov	r0, r3
 8012164:	f001 fbec 	bl	8013940 <RCCEx_PLL3_Config>
 8012168:	4603      	mov	r3, r0
 801216a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801216e:	e004      	b.n	801217a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012170:	2301      	movs	r3, #1
 8012172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012176:	e000      	b.n	801217a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012178:	bf00      	nop
    }

    if (ret == HAL_OK)
 801217a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801217e:	2b00      	cmp	r3, #0
 8012180:	d10b      	bne.n	801219a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012182:	4b4b      	ldr	r3, [pc, #300]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012186:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801218a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801218e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012192:	4a47      	ldr	r2, [pc, #284]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012194:	430b      	orrs	r3, r1
 8012196:	6593      	str	r3, [r2, #88]	@ 0x58
 8012198:	e003      	b.n	80121a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801219a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801219e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80121a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80121ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80121b0:	2300      	movs	r3, #0
 80121b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80121b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80121b8:	460b      	mov	r3, r1
 80121ba:	4313      	orrs	r3, r2
 80121bc:	d03b      	beq.n	8012236 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80121be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80121c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80121ca:	d01f      	beq.n	801220c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80121cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80121d0:	d818      	bhi.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80121d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80121d6:	d003      	beq.n	80121e0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80121d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80121dc:	d007      	beq.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80121de:	e011      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121e0:	4b33      	ldr	r3, [pc, #204]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80121e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121e4:	4a32      	ldr	r2, [pc, #200]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80121e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80121ec:	e00f      	b.n	801220e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80121ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121f2:	3328      	adds	r3, #40	@ 0x28
 80121f4:	2101      	movs	r1, #1
 80121f6:	4618      	mov	r0, r3
 80121f8:	f001 fba2 	bl	8013940 <RCCEx_PLL3_Config>
 80121fc:	4603      	mov	r3, r0
 80121fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012202:	e004      	b.n	801220e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012204:	2301      	movs	r3, #1
 8012206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801220a:	e000      	b.n	801220e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 801220c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801220e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012212:	2b00      	cmp	r3, #0
 8012214:	d10b      	bne.n	801222e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012216:	4b26      	ldr	r3, [pc, #152]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801221a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801221e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012226:	4a22      	ldr	r2, [pc, #136]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012228:	430b      	orrs	r3, r1
 801222a:	6553      	str	r3, [r2, #84]	@ 0x54
 801222c:	e003      	b.n	8012236 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801222e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012232:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012242:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012244:	2300      	movs	r3, #0
 8012246:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012248:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801224c:	460b      	mov	r3, r1
 801224e:	4313      	orrs	r3, r2
 8012250:	d034      	beq.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012258:	2b00      	cmp	r3, #0
 801225a:	d003      	beq.n	8012264 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801225c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012260:	d007      	beq.n	8012272 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012262:	e011      	b.n	8012288 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012264:	4b12      	ldr	r3, [pc, #72]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012268:	4a11      	ldr	r2, [pc, #68]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801226a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801226e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012270:	e00e      	b.n	8012290 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012276:	3308      	adds	r3, #8
 8012278:	2102      	movs	r1, #2
 801227a:	4618      	mov	r0, r3
 801227c:	f001 faae 	bl	80137dc <RCCEx_PLL2_Config>
 8012280:	4603      	mov	r3, r0
 8012282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012286:	e003      	b.n	8012290 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012288:	2301      	movs	r3, #1
 801228a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801228e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012294:	2b00      	cmp	r3, #0
 8012296:	d10d      	bne.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012298:	4b05      	ldr	r3, [pc, #20]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801229c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80122a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80122a6:	4a02      	ldr	r2, [pc, #8]	@ (80122b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80122a8:	430b      	orrs	r3, r1
 80122aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80122ac:	e006      	b.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80122ae:	bf00      	nop
 80122b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80122bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80122c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80122ca:	2300      	movs	r3, #0
 80122cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80122ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80122d2:	460b      	mov	r3, r1
 80122d4:	4313      	orrs	r3, r2
 80122d6:	d00c      	beq.n	80122f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80122d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122dc:	3328      	adds	r3, #40	@ 0x28
 80122de:	2102      	movs	r1, #2
 80122e0:	4618      	mov	r0, r3
 80122e2:	f001 fb2d 	bl	8013940 <RCCEx_PLL3_Config>
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d002      	beq.n	80122f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80122ec:	2301      	movs	r3, #1
 80122ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80122f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80122fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012300:	2300      	movs	r3, #0
 8012302:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012304:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012308:	460b      	mov	r3, r1
 801230a:	4313      	orrs	r3, r2
 801230c:	d036      	beq.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801230e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012318:	d018      	beq.n	801234c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801231a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801231e:	d811      	bhi.n	8012344 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012324:	d014      	beq.n	8012350 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8012326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801232a:	d80b      	bhi.n	8012344 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801232c:	2b00      	cmp	r3, #0
 801232e:	d011      	beq.n	8012354 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012334:	d106      	bne.n	8012344 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012336:	4bb7      	ldr	r3, [pc, #732]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801233a:	4ab6      	ldr	r2, [pc, #728]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801233c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012340:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8012342:	e008      	b.n	8012356 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012344:	2301      	movs	r3, #1
 8012346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801234a:	e004      	b.n	8012356 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801234c:	bf00      	nop
 801234e:	e002      	b.n	8012356 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012350:	bf00      	nop
 8012352:	e000      	b.n	8012356 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801235a:	2b00      	cmp	r3, #0
 801235c:	d10a      	bne.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801235e:	4bad      	ldr	r3, [pc, #692]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012362:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801236a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801236c:	4aa9      	ldr	r2, [pc, #676]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801236e:	430b      	orrs	r3, r1
 8012370:	6553      	str	r3, [r2, #84]	@ 0x54
 8012372:	e003      	b.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012378:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801237c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012384:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012388:	653b      	str	r3, [r7, #80]	@ 0x50
 801238a:	2300      	movs	r3, #0
 801238c:	657b      	str	r3, [r7, #84]	@ 0x54
 801238e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012392:	460b      	mov	r3, r1
 8012394:	4313      	orrs	r3, r2
 8012396:	d009      	beq.n	80123ac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012398:	4b9e      	ldr	r3, [pc, #632]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801239a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801239c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80123a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123a6:	4a9b      	ldr	r2, [pc, #620]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123a8:	430b      	orrs	r3, r1
 80123aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80123ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80123b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80123ba:	2300      	movs	r3, #0
 80123bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80123be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80123c2:	460b      	mov	r3, r1
 80123c4:	4313      	orrs	r3, r2
 80123c6:	d009      	beq.n	80123dc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80123c8:	4b92      	ldr	r3, [pc, #584]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80123d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80123d6:	4a8f      	ldr	r2, [pc, #572]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123d8:	430b      	orrs	r3, r1
 80123da:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80123dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80123e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80123ea:	2300      	movs	r3, #0
 80123ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80123ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80123f2:	460b      	mov	r3, r1
 80123f4:	4313      	orrs	r3, r2
 80123f6:	d00e      	beq.n	8012416 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80123f8:	4b86      	ldr	r3, [pc, #536]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123fa:	691b      	ldr	r3, [r3, #16]
 80123fc:	4a85      	ldr	r2, [pc, #532]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80123fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012402:	6113      	str	r3, [r2, #16]
 8012404:	4b83      	ldr	r3, [pc, #524]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012406:	6919      	ldr	r1, [r3, #16]
 8012408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801240c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012410:	4a80      	ldr	r2, [pc, #512]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012412:	430b      	orrs	r3, r1
 8012414:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8012422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012424:	2300      	movs	r3, #0
 8012426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012428:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801242c:	460b      	mov	r3, r1
 801242e:	4313      	orrs	r3, r2
 8012430:	d009      	beq.n	8012446 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012432:	4b78      	ldr	r3, [pc, #480]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012436:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801243a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801243e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012440:	4a74      	ldr	r2, [pc, #464]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012442:	430b      	orrs	r3, r1
 8012444:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012452:	633b      	str	r3, [r7, #48]	@ 0x30
 8012454:	2300      	movs	r3, #0
 8012456:	637b      	str	r3, [r7, #52]	@ 0x34
 8012458:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801245c:	460b      	mov	r3, r1
 801245e:	4313      	orrs	r3, r2
 8012460:	d00a      	beq.n	8012478 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012462:	4b6c      	ldr	r3, [pc, #432]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012466:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801246a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012472:	4a68      	ldr	r2, [pc, #416]	@ (8012614 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012474:	430b      	orrs	r3, r1
 8012476:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012480:	2100      	movs	r1, #0
 8012482:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012484:	f003 0301 	and.w	r3, r3, #1
 8012488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801248a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801248e:	460b      	mov	r3, r1
 8012490:	4313      	orrs	r3, r2
 8012492:	d011      	beq.n	80124b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012498:	3308      	adds	r3, #8
 801249a:	2100      	movs	r1, #0
 801249c:	4618      	mov	r0, r3
 801249e:	f001 f99d 	bl	80137dc <RCCEx_PLL2_Config>
 80124a2:	4603      	mov	r3, r0
 80124a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80124a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d003      	beq.n	80124b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80124b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c0:	2100      	movs	r1, #0
 80124c2:	6239      	str	r1, [r7, #32]
 80124c4:	f003 0302 	and.w	r3, r3, #2
 80124c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80124ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80124ce:	460b      	mov	r3, r1
 80124d0:	4313      	orrs	r3, r2
 80124d2:	d011      	beq.n	80124f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80124d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124d8:	3308      	adds	r3, #8
 80124da:	2101      	movs	r1, #1
 80124dc:	4618      	mov	r0, r3
 80124de:	f001 f97d 	bl	80137dc <RCCEx_PLL2_Config>
 80124e2:	4603      	mov	r3, r0
 80124e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80124e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d003      	beq.n	80124f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80124f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012500:	2100      	movs	r1, #0
 8012502:	61b9      	str	r1, [r7, #24]
 8012504:	f003 0304 	and.w	r3, r3, #4
 8012508:	61fb      	str	r3, [r7, #28]
 801250a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801250e:	460b      	mov	r3, r1
 8012510:	4313      	orrs	r3, r2
 8012512:	d011      	beq.n	8012538 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012518:	3308      	adds	r3, #8
 801251a:	2102      	movs	r1, #2
 801251c:	4618      	mov	r0, r3
 801251e:	f001 f95d 	bl	80137dc <RCCEx_PLL2_Config>
 8012522:	4603      	mov	r3, r0
 8012524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801252c:	2b00      	cmp	r3, #0
 801252e:	d003      	beq.n	8012538 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012534:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012540:	2100      	movs	r1, #0
 8012542:	6139      	str	r1, [r7, #16]
 8012544:	f003 0308 	and.w	r3, r3, #8
 8012548:	617b      	str	r3, [r7, #20]
 801254a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801254e:	460b      	mov	r3, r1
 8012550:	4313      	orrs	r3, r2
 8012552:	d011      	beq.n	8012578 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012558:	3328      	adds	r3, #40	@ 0x28
 801255a:	2100      	movs	r1, #0
 801255c:	4618      	mov	r0, r3
 801255e:	f001 f9ef 	bl	8013940 <RCCEx_PLL3_Config>
 8012562:	4603      	mov	r3, r0
 8012564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801256c:	2b00      	cmp	r3, #0
 801256e:	d003      	beq.n	8012578 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012574:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012580:	2100      	movs	r1, #0
 8012582:	60b9      	str	r1, [r7, #8]
 8012584:	f003 0310 	and.w	r3, r3, #16
 8012588:	60fb      	str	r3, [r7, #12]
 801258a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801258e:	460b      	mov	r3, r1
 8012590:	4313      	orrs	r3, r2
 8012592:	d011      	beq.n	80125b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012598:	3328      	adds	r3, #40	@ 0x28
 801259a:	2101      	movs	r1, #1
 801259c:	4618      	mov	r0, r3
 801259e:	f001 f9cf 	bl	8013940 <RCCEx_PLL3_Config>
 80125a2:	4603      	mov	r3, r0
 80125a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80125a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d003      	beq.n	80125b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80125b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c0:	2100      	movs	r1, #0
 80125c2:	6039      	str	r1, [r7, #0]
 80125c4:	f003 0320 	and.w	r3, r3, #32
 80125c8:	607b      	str	r3, [r7, #4]
 80125ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80125ce:	460b      	mov	r3, r1
 80125d0:	4313      	orrs	r3, r2
 80125d2:	d011      	beq.n	80125f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80125d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125d8:	3328      	adds	r3, #40	@ 0x28
 80125da:	2102      	movs	r1, #2
 80125dc:	4618      	mov	r0, r3
 80125de:	f001 f9af 	bl	8013940 <RCCEx_PLL3_Config>
 80125e2:	4603      	mov	r3, r0
 80125e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80125e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d003      	beq.n	80125f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80125f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d101      	bne.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8012600:	2300      	movs	r3, #0
 8012602:	e000      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8012604:	2301      	movs	r3, #1
}
 8012606:	4618      	mov	r0, r3
 8012608:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801260c:	46bd      	mov	sp, r7
 801260e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012612:	bf00      	nop
 8012614:	58024400 	.word	0x58024400

08012618 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b090      	sub	sp, #64	@ 0x40
 801261c:	af00      	add	r7, sp, #0
 801261e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8012622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012626:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801262a:	430b      	orrs	r3, r1
 801262c:	f040 8094 	bne.w	8012758 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8012630:	4b9b      	ldr	r3, [pc, #620]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012634:	f003 0307 	and.w	r3, r3, #7
 8012638:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801263a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801263c:	2b04      	cmp	r3, #4
 801263e:	f200 8087 	bhi.w	8012750 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8012642:	a201      	add	r2, pc, #4	@ (adr r2, 8012648 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8012644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012648:	0801265d 	.word	0x0801265d
 801264c:	08012685 	.word	0x08012685
 8012650:	080126ad 	.word	0x080126ad
 8012654:	08012749 	.word	0x08012749
 8012658:	080126d5 	.word	0x080126d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801265c:	4b90      	ldr	r3, [pc, #576]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012668:	d108      	bne.n	801267c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801266a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801266e:	4618      	mov	r0, r3
 8012670:	f000 ff62 	bl	8013538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012678:	f000 bc93 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801267c:	2300      	movs	r3, #0
 801267e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012680:	f000 bc8f 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012684:	4b86      	ldr	r3, [pc, #536]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801268c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012690:	d108      	bne.n	80126a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012692:	f107 0318 	add.w	r3, r7, #24
 8012696:	4618      	mov	r0, r3
 8012698:	f000 fca6 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80126a0:	f000 bc7f 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80126a4:	2300      	movs	r3, #0
 80126a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80126a8:	f000 bc7b 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80126ac:	4b7c      	ldr	r3, [pc, #496]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80126b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126b8:	d108      	bne.n	80126cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80126ba:	f107 030c 	add.w	r3, r7, #12
 80126be:	4618      	mov	r0, r3
 80126c0:	f000 fde6 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80126c8:	f000 bc6b 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80126cc:	2300      	movs	r3, #0
 80126ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80126d0:	f000 bc67 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80126d4:	4b72      	ldr	r3, [pc, #456]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80126d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80126dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80126de:	4b70      	ldr	r3, [pc, #448]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f003 0304 	and.w	r3, r3, #4
 80126e6:	2b04      	cmp	r3, #4
 80126e8:	d10c      	bne.n	8012704 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80126ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d109      	bne.n	8012704 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80126f0:	4b6b      	ldr	r3, [pc, #428]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	08db      	lsrs	r3, r3, #3
 80126f6:	f003 0303 	and.w	r3, r3, #3
 80126fa:	4a6a      	ldr	r2, [pc, #424]	@ (80128a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80126fc:	fa22 f303 	lsr.w	r3, r2, r3
 8012700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012702:	e01f      	b.n	8012744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012704:	4b66      	ldr	r3, [pc, #408]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801270c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012710:	d106      	bne.n	8012720 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8012712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012718:	d102      	bne.n	8012720 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801271a:	4b63      	ldr	r3, [pc, #396]	@ (80128a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801271e:	e011      	b.n	8012744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012720:	4b5f      	ldr	r3, [pc, #380]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801272c:	d106      	bne.n	801273c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801272e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012734:	d102      	bne.n	801273c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012736:	4b5d      	ldr	r3, [pc, #372]	@ (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801273a:	e003      	b.n	8012744 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801273c:	2300      	movs	r3, #0
 801273e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012740:	f000 bc2f 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012744:	f000 bc2d 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012748:	4b59      	ldr	r3, [pc, #356]	@ (80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801274a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801274c:	f000 bc29 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012750:	2300      	movs	r3, #0
 8012752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012754:	f000 bc25 	b.w	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8012758:	e9d7 2300 	ldrd	r2, r3, [r7]
 801275c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8012760:	430b      	orrs	r3, r1
 8012762:	f040 80a7 	bne.w	80128b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8012766:	4b4e      	ldr	r3, [pc, #312]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801276a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801276e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012776:	d054      	beq.n	8012822 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8012778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801277a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801277e:	f200 808b 	bhi.w	8012898 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012784:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012788:	f000 8083 	beq.w	8012892 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801278e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012792:	f200 8081 	bhi.w	8012898 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012798:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801279c:	d02f      	beq.n	80127fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80127a4:	d878      	bhi.n	8012898 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80127a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d004      	beq.n	80127b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80127ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80127b2:	d012      	beq.n	80127da <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80127b4:	e070      	b.n	8012898 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80127b6:	4b3a      	ldr	r3, [pc, #232]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80127be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80127c2:	d107      	bne.n	80127d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80127c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80127c8:	4618      	mov	r0, r3
 80127ca:	f000 feb5 	bl	8013538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80127ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80127d2:	e3e6      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80127d4:	2300      	movs	r3, #0
 80127d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127d8:	e3e3      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80127da:	4b31      	ldr	r3, [pc, #196]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80127e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80127e6:	d107      	bne.n	80127f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80127e8:	f107 0318 	add.w	r3, r7, #24
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 fbfb 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80127f6:	e3d4      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80127f8:	2300      	movs	r3, #0
 80127fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127fc:	e3d1      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80127fe:	4b28      	ldr	r3, [pc, #160]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801280a:	d107      	bne.n	801281c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801280c:	f107 030c 	add.w	r3, r7, #12
 8012810:	4618      	mov	r0, r3
 8012812:	f000 fd3d 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801281a:	e3c2      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801281c:	2300      	movs	r3, #0
 801281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012820:	e3bf      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012822:	4b1f      	ldr	r3, [pc, #124]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012826:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801282a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801282c:	4b1c      	ldr	r3, [pc, #112]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f003 0304 	and.w	r3, r3, #4
 8012834:	2b04      	cmp	r3, #4
 8012836:	d10c      	bne.n	8012852 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8012838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801283a:	2b00      	cmp	r3, #0
 801283c:	d109      	bne.n	8012852 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801283e:	4b18      	ldr	r3, [pc, #96]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	08db      	lsrs	r3, r3, #3
 8012844:	f003 0303 	and.w	r3, r3, #3
 8012848:	4a16      	ldr	r2, [pc, #88]	@ (80128a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801284a:	fa22 f303 	lsr.w	r3, r2, r3
 801284e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012850:	e01e      	b.n	8012890 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012852:	4b13      	ldr	r3, [pc, #76]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801285a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801285e:	d106      	bne.n	801286e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8012860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012866:	d102      	bne.n	801286e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012868:	4b0f      	ldr	r3, [pc, #60]	@ (80128a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801286a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801286c:	e010      	b.n	8012890 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801286e:	4b0c      	ldr	r3, [pc, #48]	@ (80128a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801287a:	d106      	bne.n	801288a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801287c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801287e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012882:	d102      	bne.n	801288a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012884:	4b09      	ldr	r3, [pc, #36]	@ (80128ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012888:	e002      	b.n	8012890 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801288e:	e388      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012890:	e387      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012892:	4b07      	ldr	r3, [pc, #28]	@ (80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8012894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012896:	e384      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012898:	2300      	movs	r3, #0
 801289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801289c:	e381      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801289e:	bf00      	nop
 80128a0:	58024400 	.word	0x58024400
 80128a4:	03d09000 	.word	0x03d09000
 80128a8:	003d0900 	.word	0x003d0900
 80128ac:	016e3600 	.word	0x016e3600
 80128b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80128b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128b8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80128bc:	430b      	orrs	r3, r1
 80128be:	f040 809c 	bne.w	80129fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80128c2:	4b9e      	ldr	r3, [pc, #632]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80128c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128c6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80128ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80128cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80128d2:	d054      	beq.n	801297e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80128d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80128da:	f200 808b 	bhi.w	80129f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80128de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80128e4:	f000 8083 	beq.w	80129ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80128e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80128ee:	f200 8081 	bhi.w	80129f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80128f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80128f8:	d02f      	beq.n	801295a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80128fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012900:	d878      	bhi.n	80129f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8012902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012904:	2b00      	cmp	r3, #0
 8012906:	d004      	beq.n	8012912 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8012908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801290a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801290e:	d012      	beq.n	8012936 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8012910:	e070      	b.n	80129f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012912:	4b8a      	ldr	r3, [pc, #552]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801291a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801291e:	d107      	bne.n	8012930 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012924:	4618      	mov	r0, r3
 8012926:	f000 fe07 	bl	8013538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801292c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801292e:	e338      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012930:	2300      	movs	r3, #0
 8012932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012934:	e335      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012936:	4b81      	ldr	r3, [pc, #516]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801293e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012942:	d107      	bne.n	8012954 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012944:	f107 0318 	add.w	r3, r7, #24
 8012948:	4618      	mov	r0, r3
 801294a:	f000 fb4d 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012952:	e326      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012954:	2300      	movs	r3, #0
 8012956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012958:	e323      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801295a:	4b78      	ldr	r3, [pc, #480]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012966:	d107      	bne.n	8012978 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012968:	f107 030c 	add.w	r3, r7, #12
 801296c:	4618      	mov	r0, r3
 801296e:	f000 fc8f 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012976:	e314      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012978:	2300      	movs	r3, #0
 801297a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801297c:	e311      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801297e:	4b6f      	ldr	r3, [pc, #444]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012982:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012986:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012988:	4b6c      	ldr	r3, [pc, #432]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f003 0304 	and.w	r3, r3, #4
 8012990:	2b04      	cmp	r3, #4
 8012992:	d10c      	bne.n	80129ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8012994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012996:	2b00      	cmp	r3, #0
 8012998:	d109      	bne.n	80129ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801299a:	4b68      	ldr	r3, [pc, #416]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	08db      	lsrs	r3, r3, #3
 80129a0:	f003 0303 	and.w	r3, r3, #3
 80129a4:	4a66      	ldr	r2, [pc, #408]	@ (8012b40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80129a6:	fa22 f303 	lsr.w	r3, r2, r3
 80129aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129ac:	e01e      	b.n	80129ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80129ae:	4b63      	ldr	r3, [pc, #396]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80129ba:	d106      	bne.n	80129ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80129bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129c2:	d102      	bne.n	80129ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80129c4:	4b5f      	ldr	r3, [pc, #380]	@ (8012b44 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80129c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129c8:	e010      	b.n	80129ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80129ca:	4b5c      	ldr	r3, [pc, #368]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80129d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80129d6:	d106      	bne.n	80129e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80129d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80129de:	d102      	bne.n	80129e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80129e0:	4b59      	ldr	r3, [pc, #356]	@ (8012b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80129e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129e4:	e002      	b.n	80129ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80129e6:	2300      	movs	r3, #0
 80129e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80129ea:	e2da      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80129ec:	e2d9      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80129ee:	4b57      	ldr	r3, [pc, #348]	@ (8012b4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80129f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129f2:	e2d6      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80129f4:	2300      	movs	r3, #0
 80129f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129f8:	e2d3      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80129fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8012a02:	430b      	orrs	r3, r1
 8012a04:	f040 80a7 	bne.w	8012b56 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8012a08:	4b4c      	ldr	r3, [pc, #304]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8012a10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a18:	d055      	beq.n	8012ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8012a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a20:	f200 8096 	bhi.w	8012b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012a2a:	f000 8084 	beq.w	8012b36 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8012a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012a34:	f200 808c 	bhi.w	8012b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a3e:	d030      	beq.n	8012aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8012a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a46:	f200 8083 	bhi.w	8012b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d004      	beq.n	8012a5a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8012a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012a56:	d012      	beq.n	8012a7e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8012a58:	e07a      	b.n	8012b50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012a5a:	4b38      	ldr	r3, [pc, #224]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012a62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012a66:	d107      	bne.n	8012a78 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f000 fd63 	bl	8013538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012a76:	e294      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a7c:	e291      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012a8a:	d107      	bne.n	8012a9c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012a8c:	f107 0318 	add.w	r3, r7, #24
 8012a90:	4618      	mov	r0, r3
 8012a92:	f000 faa9 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012a96:	69bb      	ldr	r3, [r7, #24]
 8012a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012a9a:	e282      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012aa0:	e27f      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012aa2:	4b26      	ldr	r3, [pc, #152]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012aae:	d107      	bne.n	8012ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ab0:	f107 030c 	add.w	r3, r7, #12
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f000 fbeb 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012abe:	e270      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ac4:	e26d      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012aca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012ace:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f003 0304 	and.w	r3, r3, #4
 8012ad8:	2b04      	cmp	r3, #4
 8012ada:	d10c      	bne.n	8012af6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8012adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d109      	bne.n	8012af6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012ae2:	4b16      	ldr	r3, [pc, #88]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	08db      	lsrs	r3, r3, #3
 8012ae8:	f003 0303 	and.w	r3, r3, #3
 8012aec:	4a14      	ldr	r2, [pc, #80]	@ (8012b40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8012aee:	fa22 f303 	lsr.w	r3, r2, r3
 8012af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012af4:	e01e      	b.n	8012b34 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012af6:	4b11      	ldr	r3, [pc, #68]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b02:	d106      	bne.n	8012b12 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8012b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b0a:	d102      	bne.n	8012b12 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8012b44 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8012b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b10:	e010      	b.n	8012b34 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012b12:	4b0a      	ldr	r3, [pc, #40]	@ (8012b3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b1e:	d106      	bne.n	8012b2e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8012b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b26:	d102      	bne.n	8012b2e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012b28:	4b07      	ldr	r3, [pc, #28]	@ (8012b48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b2c:	e002      	b.n	8012b34 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012b32:	e236      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012b34:	e235      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012b36:	4b05      	ldr	r3, [pc, #20]	@ (8012b4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8012b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b3a:	e232      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012b3c:	58024400 	.word	0x58024400
 8012b40:	03d09000 	.word	0x03d09000
 8012b44:	003d0900 	.word	0x003d0900
 8012b48:	016e3600 	.word	0x016e3600
 8012b4c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8012b50:	2300      	movs	r3, #0
 8012b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b54:	e225      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8012b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b5a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8012b5e:	430b      	orrs	r3, r1
 8012b60:	f040 8085 	bne.w	8012c6e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8012b64:	4b9c      	ldr	r3, [pc, #624]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b68:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8012b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8012b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012b74:	d06b      	beq.n	8012c4e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8012b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012b7c:	d874      	bhi.n	8012c68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012b84:	d056      	beq.n	8012c34 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8012b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012b8c:	d86c      	bhi.n	8012c68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012b94:	d03b      	beq.n	8012c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8012b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012b9c:	d864      	bhi.n	8012c68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012ba4:	d021      	beq.n	8012bea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8012ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012bac:	d85c      	bhi.n	8012c68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8012bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d004      	beq.n	8012bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8012bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bba:	d004      	beq.n	8012bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8012bbc:	e054      	b.n	8012c68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8012bbe:	f7fe fb5f 	bl	8011280 <HAL_RCC_GetPCLK1Freq>
 8012bc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012bc4:	e1ed      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012bc6:	4b84      	ldr	r3, [pc, #528]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012bd2:	d107      	bne.n	8012be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012bd4:	f107 0318 	add.w	r3, r7, #24
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f000 fa05 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012be2:	e1de      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012be4:	2300      	movs	r3, #0
 8012be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012be8:	e1db      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012bea:	4b7b      	ldr	r3, [pc, #492]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012bf6:	d107      	bne.n	8012c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012bf8:	f107 030c 	add.w	r3, r7, #12
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f000 fb47 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c06:	e1cc      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c0c:	e1c9      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012c0e:	4b72      	ldr	r3, [pc, #456]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f003 0304 	and.w	r3, r3, #4
 8012c16:	2b04      	cmp	r3, #4
 8012c18:	d109      	bne.n	8012c2e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	08db      	lsrs	r3, r3, #3
 8012c20:	f003 0303 	and.w	r3, r3, #3
 8012c24:	4a6d      	ldr	r2, [pc, #436]	@ (8012ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8012c26:	fa22 f303 	lsr.w	r3, r2, r3
 8012c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c2c:	e1b9      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c32:	e1b6      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012c34:	4b68      	ldr	r3, [pc, #416]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c40:	d102      	bne.n	8012c48 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8012c42:	4b67      	ldr	r3, [pc, #412]	@ (8012de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8012c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c46:	e1ac      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c4c:	e1a9      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012c4e:	4b62      	ldr	r3, [pc, #392]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012c5a:	d102      	bne.n	8012c62 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8012c5c:	4b61      	ldr	r3, [pc, #388]	@ (8012de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8012c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c60:	e19f      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c62:	2300      	movs	r3, #0
 8012c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c66:	e19c      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c6c:	e199      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8012c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c72:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8012c76:	430b      	orrs	r3, r1
 8012c78:	d173      	bne.n	8012d62 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8012c7a:	4b57      	ldr	r3, [pc, #348]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012c82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012c8a:	d02f      	beq.n	8012cec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012c92:	d863      	bhi.n	8012d5c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8012c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d004      	beq.n	8012ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8012c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ca0:	d012      	beq.n	8012cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8012ca2:	e05b      	b.n	8012d5c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012cb0:	d107      	bne.n	8012cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012cb2:	f107 0318 	add.w	r3, r7, #24
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f000 f996 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012cc0:	e16f      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cc6:	e16c      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012cc8:	4b43      	ldr	r3, [pc, #268]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012cd4:	d107      	bne.n	8012ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012cd6:	f107 030c 	add.w	r3, r7, #12
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f000 fad8 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ce4:	e15d      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cea:	e15a      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012cec:	4b3a      	ldr	r3, [pc, #232]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012cf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012cf4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012cf6:	4b38      	ldr	r3, [pc, #224]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	f003 0304 	and.w	r3, r3, #4
 8012cfe:	2b04      	cmp	r3, #4
 8012d00:	d10c      	bne.n	8012d1c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8012d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d109      	bne.n	8012d1c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012d08:	4b33      	ldr	r3, [pc, #204]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	08db      	lsrs	r3, r3, #3
 8012d0e:	f003 0303 	and.w	r3, r3, #3
 8012d12:	4a32      	ldr	r2, [pc, #200]	@ (8012ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8012d14:	fa22 f303 	lsr.w	r3, r2, r3
 8012d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d1a:	e01e      	b.n	8012d5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d28:	d106      	bne.n	8012d38 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8012d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012d30:	d102      	bne.n	8012d38 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012d32:	4b2b      	ldr	r3, [pc, #172]	@ (8012de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8012d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d36:	e010      	b.n	8012d5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012d38:	4b27      	ldr	r3, [pc, #156]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012d40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012d44:	d106      	bne.n	8012d54 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8012d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012d4c:	d102      	bne.n	8012d54 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012d4e:	4b25      	ldr	r3, [pc, #148]	@ (8012de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8012d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d52:	e002      	b.n	8012d5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012d54:	2300      	movs	r3, #0
 8012d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012d58:	e123      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012d5a:	e122      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d60:	e11f      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8012d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d66:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8012d6a:	430b      	orrs	r3, r1
 8012d6c:	d13c      	bne.n	8012de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8012d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012d76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d004      	beq.n	8012d88 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8012d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012d84:	d012      	beq.n	8012dac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8012d86:	e023      	b.n	8012dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012d88:	4b13      	ldr	r3, [pc, #76]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012d90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012d94:	d107      	bne.n	8012da6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f000 fbcc 	bl	8013538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012da4:	e0fd      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012da6:	2300      	movs	r3, #0
 8012da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012daa:	e0fa      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012dac:	4b0a      	ldr	r3, [pc, #40]	@ (8012dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012db8:	d107      	bne.n	8012dca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012dba:	f107 0318 	add.w	r3, r7, #24
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f000 f912 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8012dc4:	6a3b      	ldr	r3, [r7, #32]
 8012dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012dc8:	e0eb      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012dce:	e0e8      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012dd4:	e0e5      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012dd6:	bf00      	nop
 8012dd8:	58024400 	.word	0x58024400
 8012ddc:	03d09000 	.word	0x03d09000
 8012de0:	003d0900 	.word	0x003d0900
 8012de4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8012de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012dec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8012df0:	430b      	orrs	r3, r1
 8012df2:	f040 8085 	bne.w	8012f00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8012df6:	4b6d      	ldr	r3, [pc, #436]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012dfa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8012dfe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012e06:	d06b      	beq.n	8012ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8012e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012e0e:	d874      	bhi.n	8012efa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e16:	d056      	beq.n	8012ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8012e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e1e:	d86c      	bhi.n	8012efa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012e26:	d03b      	beq.n	8012ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8012e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012e2e:	d864      	bhi.n	8012efa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e36:	d021      	beq.n	8012e7c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8012e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e3e:	d85c      	bhi.n	8012efa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8012e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d004      	beq.n	8012e50 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8012e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e4c:	d004      	beq.n	8012e58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8012e4e:	e054      	b.n	8012efa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8012e50:	f000 f8b4 	bl	8012fbc <HAL_RCCEx_GetD3PCLK1Freq>
 8012e54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012e56:	e0a4      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012e58:	4b54      	ldr	r3, [pc, #336]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012e64:	d107      	bne.n	8012e76 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e66:	f107 0318 	add.w	r3, r7, #24
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f000 f8bc 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012e74:	e095      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012e76:	2300      	movs	r3, #0
 8012e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e7a:	e092      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e88:	d107      	bne.n	8012e9a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e8a:	f107 030c 	add.w	r3, r7, #12
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f000 f9fe 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012e98:	e083      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e9e:	e080      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012ea0:	4b42      	ldr	r3, [pc, #264]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f003 0304 	and.w	r3, r3, #4
 8012ea8:	2b04      	cmp	r3, #4
 8012eaa:	d109      	bne.n	8012ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012eac:	4b3f      	ldr	r3, [pc, #252]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	08db      	lsrs	r3, r3, #3
 8012eb2:	f003 0303 	and.w	r3, r3, #3
 8012eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8012fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8012eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8012ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ebe:	e070      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ec4:	e06d      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012ec6:	4b39      	ldr	r3, [pc, #228]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ed2:	d102      	bne.n	8012eda <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8012ed4:	4b37      	ldr	r3, [pc, #220]	@ (8012fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8012ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ed8:	e063      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012eda:	2300      	movs	r3, #0
 8012edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ede:	e060      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012ee0:	4b32      	ldr	r3, [pc, #200]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012eec:	d102      	bne.n	8012ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8012eee:	4b32      	ldr	r3, [pc, #200]	@ (8012fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8012ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ef2:	e056      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ef8:	e053      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8012efa:	2300      	movs	r3, #0
 8012efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012efe:	e050      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8012f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f04:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8012f08:	430b      	orrs	r3, r1
 8012f0a:	d148      	bne.n	8012f9e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8012f0c:	4b27      	ldr	r3, [pc, #156]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012f14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012f1c:	d02a      	beq.n	8012f74 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8012f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012f24:	d838      	bhi.n	8012f98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8012f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d004      	beq.n	8012f36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012f32:	d00d      	beq.n	8012f50 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8012f34:	e030      	b.n	8012f98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012f36:	4b1d      	ldr	r3, [pc, #116]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f42:	d102      	bne.n	8012f4a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8012f44:	4b1c      	ldr	r3, [pc, #112]	@ (8012fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8012f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f48:	e02b      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f4e:	e028      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012f50:	4b16      	ldr	r3, [pc, #88]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012f58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012f5c:	d107      	bne.n	8012f6e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012f62:	4618      	mov	r0, r3
 8012f64:	f000 fae8 	bl	8013538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f6c:	e019      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f72:	e016      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012f74:	4b0d      	ldr	r3, [pc, #52]	@ (8012fac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012f7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012f80:	d107      	bne.n	8012f92 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f82:	f107 0318 	add.w	r3, r7, #24
 8012f86:	4618      	mov	r0, r3
 8012f88:	f000 f82e 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f90:	e007      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f92:	2300      	movs	r3, #0
 8012f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f96:	e004      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f9c:	e001      	b.n	8012fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8012fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3740      	adds	r7, #64	@ 0x40
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	58024400 	.word	0x58024400
 8012fb0:	03d09000 	.word	0x03d09000
 8012fb4:	003d0900 	.word	0x003d0900
 8012fb8:	016e3600 	.word	0x016e3600

08012fbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8012fc0:	f7fe f92e 	bl	8011220 <HAL_RCC_GetHCLKFreq>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	4b06      	ldr	r3, [pc, #24]	@ (8012fe0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012fc8:	6a1b      	ldr	r3, [r3, #32]
 8012fca:	091b      	lsrs	r3, r3, #4
 8012fcc:	f003 0307 	and.w	r3, r3, #7
 8012fd0:	4904      	ldr	r1, [pc, #16]	@ (8012fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8012fd2:	5ccb      	ldrb	r3, [r1, r3]
 8012fd4:	f003 031f 	and.w	r3, r3, #31
 8012fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	58024400 	.word	0x58024400
 8012fe4:	0801e2d0 	.word	0x0801e2d0

08012fe8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b089      	sub	sp, #36	@ 0x24
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012ff0:	4ba1      	ldr	r3, [pc, #644]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ff4:	f003 0303 	and.w	r3, r3, #3
 8012ff8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8012ffa:	4b9f      	ldr	r3, [pc, #636]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ffe:	0b1b      	lsrs	r3, r3, #12
 8013000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013004:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013006:	4b9c      	ldr	r3, [pc, #624]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801300a:	091b      	lsrs	r3, r3, #4
 801300c:	f003 0301 	and.w	r3, r3, #1
 8013010:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013012:	4b99      	ldr	r3, [pc, #612]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013016:	08db      	lsrs	r3, r3, #3
 8013018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801301c:	693a      	ldr	r2, [r7, #16]
 801301e:	fb02 f303 	mul.w	r3, r2, r3
 8013022:	ee07 3a90 	vmov	s15, r3
 8013026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801302a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	2b00      	cmp	r3, #0
 8013032:	f000 8111 	beq.w	8013258 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013036:	69bb      	ldr	r3, [r7, #24]
 8013038:	2b02      	cmp	r3, #2
 801303a:	f000 8083 	beq.w	8013144 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	2b02      	cmp	r3, #2
 8013042:	f200 80a1 	bhi.w	8013188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d003      	beq.n	8013054 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801304c:	69bb      	ldr	r3, [r7, #24]
 801304e:	2b01      	cmp	r3, #1
 8013050:	d056      	beq.n	8013100 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013052:	e099      	b.n	8013188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013054:	4b88      	ldr	r3, [pc, #544]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	f003 0320 	and.w	r3, r3, #32
 801305c:	2b00      	cmp	r3, #0
 801305e:	d02d      	beq.n	80130bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013060:	4b85      	ldr	r3, [pc, #532]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	08db      	lsrs	r3, r3, #3
 8013066:	f003 0303 	and.w	r3, r3, #3
 801306a:	4a84      	ldr	r2, [pc, #528]	@ (801327c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801306c:	fa22 f303 	lsr.w	r3, r2, r3
 8013070:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	ee07 3a90 	vmov	s15, r3
 8013078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	ee07 3a90 	vmov	s15, r3
 8013082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801308a:	4b7b      	ldr	r3, [pc, #492]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801308c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013092:	ee07 3a90 	vmov	s15, r3
 8013096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801309a:	ed97 6a03 	vldr	s12, [r7, #12]
 801309e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80130a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80130ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80130ba:	e087      	b.n	80131cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	ee07 3a90 	vmov	s15, r3
 80130c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013284 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80130ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80130ce:	4b6a      	ldr	r3, [pc, #424]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130d6:	ee07 3a90 	vmov	s15, r3
 80130da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130de:	ed97 6a03 	vldr	s12, [r7, #12]
 80130e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80130ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80130f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80130fe:	e065      	b.n	80131cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	ee07 3a90 	vmov	s15, r3
 8013106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801310a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013112:	4b59      	ldr	r3, [pc, #356]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801311a:	ee07 3a90 	vmov	s15, r3
 801311e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013122:	ed97 6a03 	vldr	s12, [r7, #12]
 8013126:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801312a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801312e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801313e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013142:	e043      	b.n	80131cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	ee07 3a90 	vmov	s15, r3
 801314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801314e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801328c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013156:	4b48      	ldr	r3, [pc, #288]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801315e:	ee07 3a90 	vmov	s15, r3
 8013162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013166:	ed97 6a03 	vldr	s12, [r7, #12]
 801316a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013186:	e021      	b.n	80131cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	ee07 3a90 	vmov	s15, r3
 801318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013192:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801319a:	4b37      	ldr	r3, [pc, #220]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801319e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131a2:	ee07 3a90 	vmov	s15, r3
 80131a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80131aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80131ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80131b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80131b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80131ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80131be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80131c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80131ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80131cc:	4b2a      	ldr	r3, [pc, #168]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131d0:	0a5b      	lsrs	r3, r3, #9
 80131d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80131d6:	ee07 3a90 	vmov	s15, r3
 80131da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80131e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80131e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80131ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80131f2:	ee17 2a90 	vmov	r2, s15
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80131fa:	4b1f      	ldr	r3, [pc, #124]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131fe:	0c1b      	lsrs	r3, r3, #16
 8013200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013204:	ee07 3a90 	vmov	s15, r3
 8013208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801320c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013214:	edd7 6a07 	vldr	s13, [r7, #28]
 8013218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801321c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013220:	ee17 2a90 	vmov	r2, s15
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013228:	4b13      	ldr	r3, [pc, #76]	@ (8013278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801322a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801322c:	0e1b      	lsrs	r3, r3, #24
 801322e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013232:	ee07 3a90 	vmov	s15, r3
 8013236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801323a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801323e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013242:	edd7 6a07 	vldr	s13, [r7, #28]
 8013246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801324a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801324e:	ee17 2a90 	vmov	r2, s15
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013256:	e008      	b.n	801326a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2200      	movs	r2, #0
 801325c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2200      	movs	r2, #0
 8013262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2200      	movs	r2, #0
 8013268:	609a      	str	r2, [r3, #8]
}
 801326a:	bf00      	nop
 801326c:	3724      	adds	r7, #36	@ 0x24
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	58024400 	.word	0x58024400
 801327c:	03d09000 	.word	0x03d09000
 8013280:	46000000 	.word	0x46000000
 8013284:	4c742400 	.word	0x4c742400
 8013288:	4a742400 	.word	0x4a742400
 801328c:	4bb71b00 	.word	0x4bb71b00

08013290 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013290:	b480      	push	{r7}
 8013292:	b089      	sub	sp, #36	@ 0x24
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013298:	4ba1      	ldr	r3, [pc, #644]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801329c:	f003 0303 	and.w	r3, r3, #3
 80132a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80132a2:	4b9f      	ldr	r3, [pc, #636]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132a6:	0d1b      	lsrs	r3, r3, #20
 80132a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80132ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80132ae:	4b9c      	ldr	r3, [pc, #624]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132b2:	0a1b      	lsrs	r3, r3, #8
 80132b4:	f003 0301 	and.w	r3, r3, #1
 80132b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80132ba:	4b99      	ldr	r3, [pc, #612]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132be:	08db      	lsrs	r3, r3, #3
 80132c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132c4:	693a      	ldr	r2, [r7, #16]
 80132c6:	fb02 f303 	mul.w	r3, r2, r3
 80132ca:	ee07 3a90 	vmov	s15, r3
 80132ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	f000 8111 	beq.w	8013500 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	2b02      	cmp	r3, #2
 80132e2:	f000 8083 	beq.w	80133ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80132e6:	69bb      	ldr	r3, [r7, #24]
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	f200 80a1 	bhi.w	8013430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80132ee:	69bb      	ldr	r3, [r7, #24]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d003      	beq.n	80132fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80132f4:	69bb      	ldr	r3, [r7, #24]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d056      	beq.n	80133a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80132fa:	e099      	b.n	8013430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132fc:	4b88      	ldr	r3, [pc, #544]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f003 0320 	and.w	r3, r3, #32
 8013304:	2b00      	cmp	r3, #0
 8013306:	d02d      	beq.n	8013364 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013308:	4b85      	ldr	r3, [pc, #532]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	08db      	lsrs	r3, r3, #3
 801330e:	f003 0303 	and.w	r3, r3, #3
 8013312:	4a84      	ldr	r2, [pc, #528]	@ (8013524 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013314:	fa22 f303 	lsr.w	r3, r2, r3
 8013318:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	ee07 3a90 	vmov	s15, r3
 8013320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	ee07 3a90 	vmov	s15, r3
 801332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801332e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013332:	4b7b      	ldr	r3, [pc, #492]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801333a:	ee07 3a90 	vmov	s15, r3
 801333e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013342:	ed97 6a03 	vldr	s12, [r7, #12]
 8013346:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801334a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801334e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801335e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013362:	e087      	b.n	8013474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	ee07 3a90 	vmov	s15, r3
 801336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801336e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801352c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013376:	4b6a      	ldr	r3, [pc, #424]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801337a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801337e:	ee07 3a90 	vmov	s15, r3
 8013382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013386:	ed97 6a03 	vldr	s12, [r7, #12]
 801338a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801338e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801339a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801339e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80133a6:	e065      	b.n	8013474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	ee07 3a90 	vmov	s15, r3
 80133ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80133b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133ba:	4b59      	ldr	r3, [pc, #356]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80133bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133c2:	ee07 3a90 	vmov	s15, r3
 80133c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80133ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80133ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80133d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80133de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80133ea:	e043      	b.n	8013474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	ee07 3a90 	vmov	s15, r3
 80133f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80133fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133fe:	4b48      	ldr	r3, [pc, #288]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013406:	ee07 3a90 	vmov	s15, r3
 801340a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801340e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013412:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801341a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801341e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013426:	ee67 7a27 	vmul.f32	s15, s14, s15
 801342a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801342e:	e021      	b.n	8013474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	ee07 3a90 	vmov	s15, r3
 8013436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801343a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801343e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013442:	4b37      	ldr	r3, [pc, #220]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801344a:	ee07 3a90 	vmov	s15, r3
 801344e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013452:	ed97 6a03 	vldr	s12, [r7, #12]
 8013456:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801345a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801345e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801346a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801346e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013472:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013474:	4b2a      	ldr	r3, [pc, #168]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013478:	0a5b      	lsrs	r3, r3, #9
 801347a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801347e:	ee07 3a90 	vmov	s15, r3
 8013482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801348a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801348e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801349a:	ee17 2a90 	vmov	r2, s15
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80134a2:	4b1f      	ldr	r3, [pc, #124]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80134a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134a6:	0c1b      	lsrs	r3, r3, #16
 80134a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134ac:	ee07 3a90 	vmov	s15, r3
 80134b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80134c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134c8:	ee17 2a90 	vmov	r2, s15
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80134d0:	4b13      	ldr	r3, [pc, #76]	@ (8013520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80134d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134d4:	0e1b      	lsrs	r3, r3, #24
 80134d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134da:	ee07 3a90 	vmov	s15, r3
 80134de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80134ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134f6:	ee17 2a90 	vmov	r2, s15
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80134fe:	e008      	b.n	8013512 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2200      	movs	r2, #0
 8013504:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2200      	movs	r2, #0
 801350a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	609a      	str	r2, [r3, #8]
}
 8013512:	bf00      	nop
 8013514:	3724      	adds	r7, #36	@ 0x24
 8013516:	46bd      	mov	sp, r7
 8013518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351c:	4770      	bx	lr
 801351e:	bf00      	nop
 8013520:	58024400 	.word	0x58024400
 8013524:	03d09000 	.word	0x03d09000
 8013528:	46000000 	.word	0x46000000
 801352c:	4c742400 	.word	0x4c742400
 8013530:	4a742400 	.word	0x4a742400
 8013534:	4bb71b00 	.word	0x4bb71b00

08013538 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8013538:	b480      	push	{r7}
 801353a:	b089      	sub	sp, #36	@ 0x24
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013540:	4ba0      	ldr	r3, [pc, #640]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013544:	f003 0303 	and.w	r3, r3, #3
 8013548:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801354a:	4b9e      	ldr	r3, [pc, #632]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801354e:	091b      	lsrs	r3, r3, #4
 8013550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013554:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013556:	4b9b      	ldr	r3, [pc, #620]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801355a:	f003 0301 	and.w	r3, r3, #1
 801355e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013560:	4b98      	ldr	r3, [pc, #608]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013564:	08db      	lsrs	r3, r3, #3
 8013566:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801356a:	693a      	ldr	r2, [r7, #16]
 801356c:	fb02 f303 	mul.w	r3, r2, r3
 8013570:	ee07 3a90 	vmov	s15, r3
 8013574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013578:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	2b00      	cmp	r3, #0
 8013580:	f000 8111 	beq.w	80137a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	2b02      	cmp	r3, #2
 8013588:	f000 8083 	beq.w	8013692 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801358c:	69bb      	ldr	r3, [r7, #24]
 801358e:	2b02      	cmp	r3, #2
 8013590:	f200 80a1 	bhi.w	80136d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d003      	beq.n	80135a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	2b01      	cmp	r3, #1
 801359e:	d056      	beq.n	801364e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80135a0:	e099      	b.n	80136d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80135a2:	4b88      	ldr	r3, [pc, #544]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	f003 0320 	and.w	r3, r3, #32
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d02d      	beq.n	801360a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80135ae:	4b85      	ldr	r3, [pc, #532]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	08db      	lsrs	r3, r3, #3
 80135b4:	f003 0303 	and.w	r3, r3, #3
 80135b8:	4a83      	ldr	r2, [pc, #524]	@ (80137c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80135ba:	fa22 f303 	lsr.w	r3, r2, r3
 80135be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	ee07 3a90 	vmov	s15, r3
 80135c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	ee07 3a90 	vmov	s15, r3
 80135d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80135d8:	4b7a      	ldr	r3, [pc, #488]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135e0:	ee07 3a90 	vmov	s15, r3
 80135e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80135e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80135ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80137cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80135f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80135f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80135f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80135fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013604:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013608:	e087      	b.n	801371a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	ee07 3a90 	vmov	s15, r3
 8013610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013614:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80137d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801361c:	4b69      	ldr	r3, [pc, #420]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013624:	ee07 3a90 	vmov	s15, r3
 8013628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801362c:	ed97 6a03 	vldr	s12, [r7, #12]
 8013630:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80137cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801363c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801364c:	e065      	b.n	801371a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	ee07 3a90 	vmov	s15, r3
 8013654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013658:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80137d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801365c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013660:	4b58      	ldr	r3, [pc, #352]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013668:	ee07 3a90 	vmov	s15, r3
 801366c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013670:	ed97 6a03 	vldr	s12, [r7, #12]
 8013674:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80137cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801367c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013688:	ee67 7a27 	vmul.f32	s15, s14, s15
 801368c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013690:	e043      	b.n	801371a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	ee07 3a90 	vmov	s15, r3
 8013698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801369c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80137d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80136a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136a4:	4b47      	ldr	r3, [pc, #284]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80136a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136ac:	ee07 3a90 	vmov	s15, r3
 80136b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80136b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80136b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80137cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80136bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80136c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80136c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80136c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80136d4:	e021      	b.n	801371a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	ee07 3a90 	vmov	s15, r3
 80136dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80137d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80136e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136e8:	4b36      	ldr	r3, [pc, #216]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80136ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136f0:	ee07 3a90 	vmov	s15, r3
 80136f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80136f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80136fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80137cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801370c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013714:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013718:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801371a:	4b2a      	ldr	r3, [pc, #168]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801371e:	0a5b      	lsrs	r3, r3, #9
 8013720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013724:	ee07 3a90 	vmov	s15, r3
 8013728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801372c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013734:	edd7 6a07 	vldr	s13, [r7, #28]
 8013738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801373c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013740:	ee17 2a90 	vmov	r2, s15
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8013748:	4b1e      	ldr	r3, [pc, #120]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801374c:	0c1b      	lsrs	r3, r3, #16
 801374e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013752:	ee07 3a90 	vmov	s15, r3
 8013756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801375a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801375e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013762:	edd7 6a07 	vldr	s13, [r7, #28]
 8013766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801376a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801376e:	ee17 2a90 	vmov	r2, s15
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8013776:	4b13      	ldr	r3, [pc, #76]	@ (80137c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801377a:	0e1b      	lsrs	r3, r3, #24
 801377c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013780:	ee07 3a90 	vmov	s15, r3
 8013784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013788:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801378c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013790:	edd7 6a07 	vldr	s13, [r7, #28]
 8013794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801379c:	ee17 2a90 	vmov	r2, s15
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80137a4:	e008      	b.n	80137b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2200      	movs	r2, #0
 80137aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2200      	movs	r2, #0
 80137b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2200      	movs	r2, #0
 80137b6:	609a      	str	r2, [r3, #8]
}
 80137b8:	bf00      	nop
 80137ba:	3724      	adds	r7, #36	@ 0x24
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	58024400 	.word	0x58024400
 80137c8:	03d09000 	.word	0x03d09000
 80137cc:	46000000 	.word	0x46000000
 80137d0:	4c742400 	.word	0x4c742400
 80137d4:	4a742400 	.word	0x4a742400
 80137d8:	4bb71b00 	.word	0x4bb71b00

080137dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80137e6:	2300      	movs	r3, #0
 80137e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80137ea:	4b53      	ldr	r3, [pc, #332]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80137ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137ee:	f003 0303 	and.w	r3, r3, #3
 80137f2:	2b03      	cmp	r3, #3
 80137f4:	d101      	bne.n	80137fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80137f6:	2301      	movs	r3, #1
 80137f8:	e099      	b.n	801392e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80137fa:	4b4f      	ldr	r3, [pc, #316]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	4a4e      	ldr	r2, [pc, #312]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 8013800:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013806:	f7f4 ffd7 	bl	80087b8 <HAL_GetTick>
 801380a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801380c:	e008      	b.n	8013820 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801380e:	f7f4 ffd3 	bl	80087b8 <HAL_GetTick>
 8013812:	4602      	mov	r2, r0
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	1ad3      	subs	r3, r2, r3
 8013818:	2b02      	cmp	r3, #2
 801381a:	d901      	bls.n	8013820 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801381c:	2303      	movs	r3, #3
 801381e:	e086      	b.n	801392e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013820:	4b45      	ldr	r3, [pc, #276]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013828:	2b00      	cmp	r3, #0
 801382a:	d1f0      	bne.n	801380e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801382c:	4b42      	ldr	r3, [pc, #264]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 801382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013830:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	031b      	lsls	r3, r3, #12
 801383a:	493f      	ldr	r1, [pc, #252]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 801383c:	4313      	orrs	r3, r2
 801383e:	628b      	str	r3, [r1, #40]	@ 0x28
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	3b01      	subs	r3, #1
 8013846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	689b      	ldr	r3, [r3, #8]
 801384e:	3b01      	subs	r3, #1
 8013850:	025b      	lsls	r3, r3, #9
 8013852:	b29b      	uxth	r3, r3
 8013854:	431a      	orrs	r2, r3
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	68db      	ldr	r3, [r3, #12]
 801385a:	3b01      	subs	r3, #1
 801385c:	041b      	lsls	r3, r3, #16
 801385e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013862:	431a      	orrs	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	691b      	ldr	r3, [r3, #16]
 8013868:	3b01      	subs	r3, #1
 801386a:	061b      	lsls	r3, r3, #24
 801386c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013870:	4931      	ldr	r1, [pc, #196]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 8013872:	4313      	orrs	r3, r2
 8013874:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8013876:	4b30      	ldr	r3, [pc, #192]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 8013878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801387a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	695b      	ldr	r3, [r3, #20]
 8013882:	492d      	ldr	r1, [pc, #180]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 8013884:	4313      	orrs	r3, r2
 8013886:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8013888:	4b2b      	ldr	r3, [pc, #172]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 801388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801388c:	f023 0220 	bic.w	r2, r3, #32
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	699b      	ldr	r3, [r3, #24]
 8013894:	4928      	ldr	r1, [pc, #160]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 8013896:	4313      	orrs	r3, r2
 8013898:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801389a:	4b27      	ldr	r3, [pc, #156]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 801389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801389e:	4a26      	ldr	r2, [pc, #152]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138a0:	f023 0310 	bic.w	r3, r3, #16
 80138a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80138a6:	4b24      	ldr	r3, [pc, #144]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80138aa:	4b24      	ldr	r3, [pc, #144]	@ (801393c <RCCEx_PLL2_Config+0x160>)
 80138ac:	4013      	ands	r3, r2
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	69d2      	ldr	r2, [r2, #28]
 80138b2:	00d2      	lsls	r2, r2, #3
 80138b4:	4920      	ldr	r1, [pc, #128]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138b6:	4313      	orrs	r3, r2
 80138b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80138ba:	4b1f      	ldr	r3, [pc, #124]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138be:	4a1e      	ldr	r2, [pc, #120]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138c0:	f043 0310 	orr.w	r3, r3, #16
 80138c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d106      	bne.n	80138da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80138cc:	4b1a      	ldr	r3, [pc, #104]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138d0:	4a19      	ldr	r2, [pc, #100]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80138d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80138d8:	e00f      	b.n	80138fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d106      	bne.n	80138ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80138e0:	4b15      	ldr	r3, [pc, #84]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138e4:	4a14      	ldr	r2, [pc, #80]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80138ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80138ec:	e005      	b.n	80138fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80138ee:	4b12      	ldr	r3, [pc, #72]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138f2:	4a11      	ldr	r2, [pc, #68]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80138f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80138fa:	4b0f      	ldr	r3, [pc, #60]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	4a0e      	ldr	r2, [pc, #56]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 8013900:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013906:	f7f4 ff57 	bl	80087b8 <HAL_GetTick>
 801390a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801390c:	e008      	b.n	8013920 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801390e:	f7f4 ff53 	bl	80087b8 <HAL_GetTick>
 8013912:	4602      	mov	r2, r0
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	1ad3      	subs	r3, r2, r3
 8013918:	2b02      	cmp	r3, #2
 801391a:	d901      	bls.n	8013920 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801391c:	2303      	movs	r3, #3
 801391e:	e006      	b.n	801392e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013920:	4b05      	ldr	r3, [pc, #20]	@ (8013938 <RCCEx_PLL2_Config+0x15c>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013928:	2b00      	cmp	r3, #0
 801392a:	d0f0      	beq.n	801390e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801392c:	7bfb      	ldrb	r3, [r7, #15]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	58024400 	.word	0x58024400
 801393c:	ffff0007 	.word	0xffff0007

08013940 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801394a:	2300      	movs	r3, #0
 801394c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801394e:	4b53      	ldr	r3, [pc, #332]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013952:	f003 0303 	and.w	r3, r3, #3
 8013956:	2b03      	cmp	r3, #3
 8013958:	d101      	bne.n	801395e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801395a:	2301      	movs	r3, #1
 801395c:	e099      	b.n	8013a92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801395e:	4b4f      	ldr	r3, [pc, #316]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	4a4e      	ldr	r2, [pc, #312]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801396a:	f7f4 ff25 	bl	80087b8 <HAL_GetTick>
 801396e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013970:	e008      	b.n	8013984 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013972:	f7f4 ff21 	bl	80087b8 <HAL_GetTick>
 8013976:	4602      	mov	r2, r0
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	2b02      	cmp	r3, #2
 801397e:	d901      	bls.n	8013984 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013980:	2303      	movs	r3, #3
 8013982:	e086      	b.n	8013a92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013984:	4b45      	ldr	r3, [pc, #276]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801398c:	2b00      	cmp	r3, #0
 801398e:	d1f0      	bne.n	8013972 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8013990:	4b42      	ldr	r3, [pc, #264]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013994:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	051b      	lsls	r3, r3, #20
 801399e:	493f      	ldr	r1, [pc, #252]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 80139a0:	4313      	orrs	r3, r2
 80139a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	685b      	ldr	r3, [r3, #4]
 80139a8:	3b01      	subs	r3, #1
 80139aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	689b      	ldr	r3, [r3, #8]
 80139b2:	3b01      	subs	r3, #1
 80139b4:	025b      	lsls	r3, r3, #9
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	431a      	orrs	r2, r3
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	68db      	ldr	r3, [r3, #12]
 80139be:	3b01      	subs	r3, #1
 80139c0:	041b      	lsls	r3, r3, #16
 80139c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80139c6:	431a      	orrs	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	691b      	ldr	r3, [r3, #16]
 80139cc:	3b01      	subs	r3, #1
 80139ce:	061b      	lsls	r3, r3, #24
 80139d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80139d4:	4931      	ldr	r1, [pc, #196]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 80139d6:	4313      	orrs	r3, r2
 80139d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80139da:	4b30      	ldr	r3, [pc, #192]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 80139dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	695b      	ldr	r3, [r3, #20]
 80139e6:	492d      	ldr	r1, [pc, #180]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 80139e8:	4313      	orrs	r3, r2
 80139ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80139ec:	4b2b      	ldr	r3, [pc, #172]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 80139ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	699b      	ldr	r3, [r3, #24]
 80139f8:	4928      	ldr	r1, [pc, #160]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 80139fa:	4313      	orrs	r3, r2
 80139fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80139fe:	4b27      	ldr	r3, [pc, #156]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a02:	4a26      	ldr	r2, [pc, #152]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013a0a:	4b24      	ldr	r3, [pc, #144]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a0e:	4b24      	ldr	r3, [pc, #144]	@ (8013aa0 <RCCEx_PLL3_Config+0x160>)
 8013a10:	4013      	ands	r3, r2
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	69d2      	ldr	r2, [r2, #28]
 8013a16:	00d2      	lsls	r2, r2, #3
 8013a18:	4920      	ldr	r1, [pc, #128]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a1a:	4313      	orrs	r3, r2
 8013a1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a22:	4a1e      	ldr	r2, [pc, #120]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d106      	bne.n	8013a3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013a30:	4b1a      	ldr	r3, [pc, #104]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a34:	4a19      	ldr	r2, [pc, #100]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8013a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013a3c:	e00f      	b.n	8013a5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d106      	bne.n	8013a52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013a44:	4b15      	ldr	r3, [pc, #84]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a48:	4a14      	ldr	r2, [pc, #80]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013a50:	e005      	b.n	8013a5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013a52:	4b12      	ldr	r3, [pc, #72]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a56:	4a11      	ldr	r2, [pc, #68]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	4a0e      	ldr	r2, [pc, #56]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013a6a:	f7f4 fea5 	bl	80087b8 <HAL_GetTick>
 8013a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013a70:	e008      	b.n	8013a84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013a72:	f7f4 fea1 	bl	80087b8 <HAL_GetTick>
 8013a76:	4602      	mov	r2, r0
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	1ad3      	subs	r3, r2, r3
 8013a7c:	2b02      	cmp	r3, #2
 8013a7e:	d901      	bls.n	8013a84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013a80:	2303      	movs	r3, #3
 8013a82:	e006      	b.n	8013a92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013a84:	4b05      	ldr	r3, [pc, #20]	@ (8013a9c <RCCEx_PLL3_Config+0x15c>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d0f0      	beq.n	8013a72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3710      	adds	r7, #16
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	58024400 	.word	0x58024400
 8013aa0:	ffff0007 	.word	0xffff0007

08013aa4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d101      	bne.n	8013ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	e10f      	b.n	8013cd6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	4a87      	ldr	r2, [pc, #540]	@ (8013ce0 <HAL_SPI_Init+0x23c>)
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	d00f      	beq.n	8013ae6 <HAL_SPI_Init+0x42>
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	4a86      	ldr	r2, [pc, #536]	@ (8013ce4 <HAL_SPI_Init+0x240>)
 8013acc:	4293      	cmp	r3, r2
 8013ace:	d00a      	beq.n	8013ae6 <HAL_SPI_Init+0x42>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4a84      	ldr	r2, [pc, #528]	@ (8013ce8 <HAL_SPI_Init+0x244>)
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	d005      	beq.n	8013ae6 <HAL_SPI_Init+0x42>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	68db      	ldr	r3, [r3, #12]
 8013ade:	2b0f      	cmp	r3, #15
 8013ae0:	d901      	bls.n	8013ae6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	e0f7      	b.n	8013cd6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	f001 ff76 	bl	80159d8 <SPI_GetPacketSize>
 8013aec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	4a7b      	ldr	r2, [pc, #492]	@ (8013ce0 <HAL_SPI_Init+0x23c>)
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d00c      	beq.n	8013b12 <HAL_SPI_Init+0x6e>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	4a79      	ldr	r2, [pc, #484]	@ (8013ce4 <HAL_SPI_Init+0x240>)
 8013afe:	4293      	cmp	r3, r2
 8013b00:	d007      	beq.n	8013b12 <HAL_SPI_Init+0x6e>
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	4a78      	ldr	r2, [pc, #480]	@ (8013ce8 <HAL_SPI_Init+0x244>)
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d002      	beq.n	8013b12 <HAL_SPI_Init+0x6e>
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	2b08      	cmp	r3, #8
 8013b10:	d811      	bhi.n	8013b36 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013b16:	4a72      	ldr	r2, [pc, #456]	@ (8013ce0 <HAL_SPI_Init+0x23c>)
 8013b18:	4293      	cmp	r3, r2
 8013b1a:	d009      	beq.n	8013b30 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	4a70      	ldr	r2, [pc, #448]	@ (8013ce4 <HAL_SPI_Init+0x240>)
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d004      	beq.n	8013b30 <HAL_SPI_Init+0x8c>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	4a6f      	ldr	r2, [pc, #444]	@ (8013ce8 <HAL_SPI_Init+0x244>)
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d104      	bne.n	8013b3a <HAL_SPI_Init+0x96>
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2b10      	cmp	r3, #16
 8013b34:	d901      	bls.n	8013b3a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8013b36:	2301      	movs	r3, #1
 8013b38:	e0cd      	b.n	8013cd6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013b40:	b2db      	uxtb	r3, r3
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d106      	bne.n	8013b54 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f7f3 ff34 	bl	80079bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2202      	movs	r2, #2
 8013b58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f022 0201 	bic.w	r2, r2, #1
 8013b6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	689b      	ldr	r3, [r3, #8]
 8013b72:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8013b76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	699b      	ldr	r3, [r3, #24]
 8013b7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013b80:	d119      	bne.n	8013bb6 <HAL_SPI_Init+0x112>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013b8a:	d103      	bne.n	8013b94 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d008      	beq.n	8013ba6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d10c      	bne.n	8013bb6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ba4:	d107      	bne.n	8013bb6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013bb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d00f      	beq.n	8013be2 <HAL_SPI_Init+0x13e>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	68db      	ldr	r3, [r3, #12]
 8013bc6:	2b06      	cmp	r3, #6
 8013bc8:	d90b      	bls.n	8013be2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	430a      	orrs	r2, r1
 8013bde:	601a      	str	r2, [r3, #0]
 8013be0:	e007      	b.n	8013bf2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	681a      	ldr	r2, [r3, #0]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013bf0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	69da      	ldr	r2, [r3, #28]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bfa:	431a      	orrs	r2, r3
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	431a      	orrs	r2, r3
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c04:	ea42 0103 	orr.w	r1, r2, r3
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	68da      	ldr	r2, [r3, #12]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	430a      	orrs	r2, r1
 8013c12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c1c:	431a      	orrs	r2, r3
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c22:	431a      	orrs	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	699b      	ldr	r3, [r3, #24]
 8013c28:	431a      	orrs	r2, r3
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	691b      	ldr	r3, [r3, #16]
 8013c2e:	431a      	orrs	r2, r3
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	695b      	ldr	r3, [r3, #20]
 8013c34:	431a      	orrs	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6a1b      	ldr	r3, [r3, #32]
 8013c3a:	431a      	orrs	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	431a      	orrs	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c46:	431a      	orrs	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	431a      	orrs	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c52:	ea42 0103 	orr.w	r1, r2, r3
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	430a      	orrs	r2, r1
 8013c60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d113      	bne.n	8013c92 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	689b      	ldr	r3, [r3, #8]
 8013c70:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013c7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	689b      	ldr	r3, [r3, #8]
 8013c84:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013c90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	f022 0201 	bic.w	r2, r2, #1
 8013ca0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d00a      	beq.n	8013cc4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	68db      	ldr	r3, [r3, #12]
 8013cb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	430a      	orrs	r2, r1
 8013cc2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2201      	movs	r2, #1
 8013cd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8013cd4:	2300      	movs	r3, #0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3710      	adds	r7, #16
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	40013000 	.word	0x40013000
 8013ce4:	40003800 	.word	0x40003800
 8013ce8:	40003c00 	.word	0x40003c00

08013cec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b088      	sub	sp, #32
 8013cf0:	af02      	add	r7, sp, #8
 8013cf2:	60f8      	str	r0, [r7, #12]
 8013cf4:	60b9      	str	r1, [r7, #8]
 8013cf6:	603b      	str	r3, [r7, #0]
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	3320      	adds	r3, #32
 8013d02:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013d04:	f7f4 fd58 	bl	80087b8 <HAL_GetTick>
 8013d08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013d10:	b2db      	uxtb	r3, r3
 8013d12:	2b01      	cmp	r3, #1
 8013d14:	d001      	beq.n	8013d1a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8013d16:	2302      	movs	r3, #2
 8013d18:	e1d1      	b.n	80140be <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d002      	beq.n	8013d26 <HAL_SPI_Transmit+0x3a>
 8013d20:	88fb      	ldrh	r3, [r7, #6]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d101      	bne.n	8013d2a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8013d26:	2301      	movs	r3, #1
 8013d28:	e1c9      	b.n	80140be <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d101      	bne.n	8013d38 <HAL_SPI_Transmit+0x4c>
 8013d34:	2302      	movs	r3, #2
 8013d36:	e1c2      	b.n	80140be <HAL_SPI_Transmit+0x3d2>
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	2203      	movs	r2, #3
 8013d44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	68ba      	ldr	r2, [r7, #8]
 8013d54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	88fa      	ldrh	r2, [r7, #6]
 8013d5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	88fa      	ldrh	r2, [r7, #6]
 8013d62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2200      	movs	r2, #0
 8013d78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2200      	movs	r2, #0
 8013d86:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	689b      	ldr	r3, [r3, #8]
 8013d8c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8013d90:	d108      	bne.n	8013da4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	681a      	ldr	r2, [r3, #0]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013da0:	601a      	str	r2, [r3, #0]
 8013da2:	e009      	b.n	8013db8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013db6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	685a      	ldr	r2, [r3, #4]
 8013dbe:	4b96      	ldr	r3, [pc, #600]	@ (8014018 <HAL_SPI_Transmit+0x32c>)
 8013dc0:	4013      	ands	r3, r2
 8013dc2:	88f9      	ldrh	r1, [r7, #6]
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	6812      	ldr	r2, [r2, #0]
 8013dc8:	430b      	orrs	r3, r1
 8013dca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	f042 0201 	orr.w	r2, r2, #1
 8013dda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013de4:	d107      	bne.n	8013df6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013df4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	68db      	ldr	r3, [r3, #12]
 8013dfa:	2b0f      	cmp	r3, #15
 8013dfc:	d947      	bls.n	8013e8e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013dfe:	e03f      	b.n	8013e80 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	695b      	ldr	r3, [r3, #20]
 8013e06:	f003 0302 	and.w	r3, r3, #2
 8013e0a:	2b02      	cmp	r3, #2
 8013e0c:	d114      	bne.n	8013e38 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	6812      	ldr	r2, [r2, #0]
 8013e18:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e1e:	1d1a      	adds	r2, r3, #4
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	3b01      	subs	r3, #1
 8013e2e:	b29a      	uxth	r2, r3
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013e36:	e023      	b.n	8013e80 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013e38:	f7f4 fcbe 	bl	80087b8 <HAL_GetTick>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	1ad3      	subs	r3, r2, r3
 8013e42:	683a      	ldr	r2, [r7, #0]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d803      	bhi.n	8013e50 <HAL_SPI_Transmit+0x164>
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e4e:	d102      	bne.n	8013e56 <HAL_SPI_Transmit+0x16a>
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d114      	bne.n	8013e80 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013e56:	68f8      	ldr	r0, [r7, #12]
 8013e58:	f001 fcf0 	bl	801583c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013e62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	2201      	movs	r2, #1
 8013e70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	2200      	movs	r2, #0
 8013e78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8013e7c:	2303      	movs	r3, #3
 8013e7e:	e11e      	b.n	80140be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e86:	b29b      	uxth	r3, r3
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d1b9      	bne.n	8013e00 <HAL_SPI_Transmit+0x114>
 8013e8c:	e0f1      	b.n	8014072 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	2b07      	cmp	r3, #7
 8013e94:	f240 80e6 	bls.w	8014064 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013e98:	e05d      	b.n	8013f56 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	695b      	ldr	r3, [r3, #20]
 8013ea0:	f003 0302 	and.w	r3, r3, #2
 8013ea4:	2b02      	cmp	r3, #2
 8013ea6:	d132      	bne.n	8013f0e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	d918      	bls.n	8013ee6 <HAL_SPI_Transmit+0x1fa>
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d014      	beq.n	8013ee6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	6812      	ldr	r2, [r2, #0]
 8013ec6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ecc:	1d1a      	adds	r2, r3, #4
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	3b02      	subs	r3, #2
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013ee4:	e037      	b.n	8013f56 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013eea:	881a      	ldrh	r2, [r3, #0]
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ef4:	1c9a      	adds	r2, r3, #2
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f00:	b29b      	uxth	r3, r3
 8013f02:	3b01      	subs	r3, #1
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013f0c:	e023      	b.n	8013f56 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013f0e:	f7f4 fc53 	bl	80087b8 <HAL_GetTick>
 8013f12:	4602      	mov	r2, r0
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	1ad3      	subs	r3, r2, r3
 8013f18:	683a      	ldr	r2, [r7, #0]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d803      	bhi.n	8013f26 <HAL_SPI_Transmit+0x23a>
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f24:	d102      	bne.n	8013f2c <HAL_SPI_Transmit+0x240>
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d114      	bne.n	8013f56 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013f2c:	68f8      	ldr	r0, [r7, #12]
 8013f2e:	f001 fc85 	bl	801583c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2201      	movs	r2, #1
 8013f46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8013f52:	2303      	movs	r3, #3
 8013f54:	e0b3      	b.n	80140be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d19b      	bne.n	8013e9a <HAL_SPI_Transmit+0x1ae>
 8013f62:	e086      	b.n	8014072 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	695b      	ldr	r3, [r3, #20]
 8013f6a:	f003 0302 	and.w	r3, r3, #2
 8013f6e:	2b02      	cmp	r3, #2
 8013f70:	d154      	bne.n	801401c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	2b03      	cmp	r3, #3
 8013f7c:	d918      	bls.n	8013fb0 <HAL_SPI_Transmit+0x2c4>
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f82:	2b40      	cmp	r3, #64	@ 0x40
 8013f84:	d914      	bls.n	8013fb0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	6812      	ldr	r2, [r2, #0]
 8013f90:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f96:	1d1a      	adds	r2, r3, #4
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	3b04      	subs	r3, #4
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013fae:	e059      	b.n	8014064 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d917      	bls.n	8013fec <HAL_SPI_Transmit+0x300>
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d013      	beq.n	8013fec <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013fc8:	881a      	ldrh	r2, [r3, #0]
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013fd2:	1c9a      	adds	r2, r3, #2
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013fde:	b29b      	uxth	r3, r3
 8013fe0:	3b02      	subs	r3, #2
 8013fe2:	b29a      	uxth	r2, r3
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8013fea:	e03b      	b.n	8014064 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	3320      	adds	r3, #32
 8013ff6:	7812      	ldrb	r2, [r2, #0]
 8013ff8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ffe:	1c5a      	adds	r2, r3, #1
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801400a:	b29b      	uxth	r3, r3
 801400c:	3b01      	subs	r3, #1
 801400e:	b29a      	uxth	r2, r3
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014016:	e025      	b.n	8014064 <HAL_SPI_Transmit+0x378>
 8014018:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801401c:	f7f4 fbcc 	bl	80087b8 <HAL_GetTick>
 8014020:	4602      	mov	r2, r0
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	1ad3      	subs	r3, r2, r3
 8014026:	683a      	ldr	r2, [r7, #0]
 8014028:	429a      	cmp	r2, r3
 801402a:	d803      	bhi.n	8014034 <HAL_SPI_Transmit+0x348>
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014032:	d102      	bne.n	801403a <HAL_SPI_Transmit+0x34e>
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d114      	bne.n	8014064 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f001 fbfe 	bl	801583c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014046:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	2201      	movs	r2, #1
 8014054:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	2200      	movs	r2, #0
 801405c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014060:	2303      	movs	r3, #3
 8014062:	e02c      	b.n	80140be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801406a:	b29b      	uxth	r3, r3
 801406c:	2b00      	cmp	r3, #0
 801406e:	f47f af79 	bne.w	8013f64 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	9300      	str	r3, [sp, #0]
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	2200      	movs	r2, #0
 801407a:	2108      	movs	r1, #8
 801407c:	68f8      	ldr	r0, [r7, #12]
 801407e:	f001 fc7d 	bl	801597c <SPI_WaitOnFlagUntilTimeout>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	d007      	beq.n	8014098 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801408e:	f043 0220 	orr.w	r2, r3, #32
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f001 fbcf 	bl	801583c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	2201      	movs	r2, #1
 80140a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2200      	movs	r2, #0
 80140aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d001      	beq.n	80140bc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80140b8:	2301      	movs	r3, #1
 80140ba:	e000      	b.n	80140be <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80140bc:	2300      	movs	r3, #0
  }
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3718      	adds	r7, #24
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop

080140c8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b088      	sub	sp, #32
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	60f8      	str	r0, [r7, #12]
 80140d0:	60b9      	str	r1, [r7, #8]
 80140d2:	603b      	str	r3, [r7, #0]
 80140d4:	4613      	mov	r3, r2
 80140d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140dc:	095b      	lsrs	r3, r3, #5
 80140de:	b29b      	uxth	r3, r3
 80140e0:	3301      	adds	r3, #1
 80140e2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	3330      	adds	r3, #48	@ 0x30
 80140ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80140ec:	f7f4 fb64 	bl	80087b8 <HAL_GetTick>
 80140f0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80140f8:	b2db      	uxtb	r3, r3
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	d001      	beq.n	8014102 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80140fe:	2302      	movs	r3, #2
 8014100:	e250      	b.n	80145a4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d002      	beq.n	801410e <HAL_SPI_Receive+0x46>
 8014108:	88fb      	ldrh	r3, [r7, #6]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d101      	bne.n	8014112 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 801410e:	2301      	movs	r3, #1
 8014110:	e248      	b.n	80145a4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014118:	2b01      	cmp	r3, #1
 801411a:	d101      	bne.n	8014120 <HAL_SPI_Receive+0x58>
 801411c:	2302      	movs	r3, #2
 801411e:	e241      	b.n	80145a4 <HAL_SPI_Receive+0x4dc>
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	2201      	movs	r2, #1
 8014124:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	2204      	movs	r2, #4
 801412c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	2200      	movs	r2, #0
 8014134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	68ba      	ldr	r2, [r7, #8]
 801413c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	88fa      	ldrh	r2, [r7, #6]
 8014142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	88fa      	ldrh	r2, [r7, #6]
 801414a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2200      	movs	r2, #0
 8014152:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2200      	movs	r2, #0
 8014158:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2200      	movs	r2, #0
 8014160:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	2200      	movs	r2, #0
 8014168:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	2200      	movs	r2, #0
 801416e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	689b      	ldr	r3, [r3, #8]
 8014174:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014178:	d108      	bne.n	801418c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014188:	601a      	str	r2, [r3, #0]
 801418a:	e009      	b.n	80141a0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	68db      	ldr	r3, [r3, #12]
 8014192:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801419e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	685a      	ldr	r2, [r3, #4]
 80141a6:	4b95      	ldr	r3, [pc, #596]	@ (80143fc <HAL_SPI_Receive+0x334>)
 80141a8:	4013      	ands	r3, r2
 80141aa:	88f9      	ldrh	r1, [r7, #6]
 80141ac:	68fa      	ldr	r2, [r7, #12]
 80141ae:	6812      	ldr	r2, [r2, #0]
 80141b0:	430b      	orrs	r3, r1
 80141b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	f042 0201 	orr.w	r2, r2, #1
 80141c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80141cc:	d107      	bne.n	80141de <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	681a      	ldr	r2, [r3, #0]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80141dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	68db      	ldr	r3, [r3, #12]
 80141e2:	2b0f      	cmp	r3, #15
 80141e4:	d96c      	bls.n	80142c0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80141e6:	e064      	b.n	80142b2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	695b      	ldr	r3, [r3, #20]
 80141ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	695b      	ldr	r3, [r3, #20]
 80141f6:	f003 0301 	and.w	r3, r3, #1
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	d114      	bne.n	8014228 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	681a      	ldr	r2, [r3, #0]
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014206:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014208:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801420e:	1d1a      	adds	r2, r3, #4
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801421a:	b29b      	uxth	r3, r3
 801421c:	3b01      	subs	r3, #1
 801421e:	b29a      	uxth	r2, r3
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014226:	e044      	b.n	80142b2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801422e:	b29b      	uxth	r3, r3
 8014230:	8bfa      	ldrh	r2, [r7, #30]
 8014232:	429a      	cmp	r2, r3
 8014234:	d919      	bls.n	801426a <HAL_SPI_Receive+0x1a2>
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801423c:	2b00      	cmp	r3, #0
 801423e:	d014      	beq.n	801426a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681a      	ldr	r2, [r3, #0]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014248:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801424a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014250:	1d1a      	adds	r2, r3, #4
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801425c:	b29b      	uxth	r3, r3
 801425e:	3b01      	subs	r3, #1
 8014260:	b29a      	uxth	r2, r3
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014268:	e023      	b.n	80142b2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801426a:	f7f4 faa5 	bl	80087b8 <HAL_GetTick>
 801426e:	4602      	mov	r2, r0
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	683a      	ldr	r2, [r7, #0]
 8014276:	429a      	cmp	r2, r3
 8014278:	d803      	bhi.n	8014282 <HAL_SPI_Receive+0x1ba>
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014280:	d102      	bne.n	8014288 <HAL_SPI_Receive+0x1c0>
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d114      	bne.n	80142b2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014288:	68f8      	ldr	r0, [r7, #12]
 801428a:	f001 fad7 	bl	801583c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014294:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	2201      	movs	r2, #1
 80142a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	2200      	movs	r2, #0
 80142aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80142ae:	2303      	movs	r3, #3
 80142b0:	e178      	b.n	80145a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d194      	bne.n	80141e8 <HAL_SPI_Receive+0x120>
 80142be:	e15e      	b.n	801457e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	2b07      	cmp	r3, #7
 80142c6:	f240 8153 	bls.w	8014570 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80142ca:	e08f      	b.n	80143ec <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	695b      	ldr	r3, [r3, #20]
 80142d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	695b      	ldr	r3, [r3, #20]
 80142da:	f003 0301 	and.w	r3, r3, #1
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d114      	bne.n	801430c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80142e6:	69ba      	ldr	r2, [r7, #24]
 80142e8:	8812      	ldrh	r2, [r2, #0]
 80142ea:	b292      	uxth	r2, r2
 80142ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80142f2:	1c9a      	adds	r2, r3, #2
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80142fe:	b29b      	uxth	r3, r3
 8014300:	3b01      	subs	r3, #1
 8014302:	b29a      	uxth	r2, r3
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801430a:	e06f      	b.n	80143ec <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014312:	b29b      	uxth	r3, r3
 8014314:	8bfa      	ldrh	r2, [r7, #30]
 8014316:	429a      	cmp	r2, r3
 8014318:	d924      	bls.n	8014364 <HAL_SPI_Receive+0x29c>
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014320:	2b00      	cmp	r3, #0
 8014322:	d01f      	beq.n	8014364 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014328:	69ba      	ldr	r2, [r7, #24]
 801432a:	8812      	ldrh	r2, [r2, #0]
 801432c:	b292      	uxth	r2, r2
 801432e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014334:	1c9a      	adds	r2, r3, #2
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801433e:	69ba      	ldr	r2, [r7, #24]
 8014340:	8812      	ldrh	r2, [r2, #0]
 8014342:	b292      	uxth	r2, r2
 8014344:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801434a:	1c9a      	adds	r2, r3, #2
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014356:	b29b      	uxth	r3, r3
 8014358:	3b02      	subs	r3, #2
 801435a:	b29a      	uxth	r2, r3
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014362:	e043      	b.n	80143ec <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801436a:	b29b      	uxth	r3, r3
 801436c:	2b01      	cmp	r3, #1
 801436e:	d119      	bne.n	80143a4 <HAL_SPI_Receive+0x2dc>
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014376:	2b00      	cmp	r3, #0
 8014378:	d014      	beq.n	80143a4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801437e:	69ba      	ldr	r2, [r7, #24]
 8014380:	8812      	ldrh	r2, [r2, #0]
 8014382:	b292      	uxth	r2, r2
 8014384:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801438a:	1c9a      	adds	r2, r3, #2
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014396:	b29b      	uxth	r3, r3
 8014398:	3b01      	subs	r3, #1
 801439a:	b29a      	uxth	r2, r3
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80143a2:	e023      	b.n	80143ec <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80143a4:	f7f4 fa08 	bl	80087b8 <HAL_GetTick>
 80143a8:	4602      	mov	r2, r0
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	1ad3      	subs	r3, r2, r3
 80143ae:	683a      	ldr	r2, [r7, #0]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d803      	bhi.n	80143bc <HAL_SPI_Receive+0x2f4>
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143ba:	d102      	bne.n	80143c2 <HAL_SPI_Receive+0x2fa>
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d114      	bne.n	80143ec <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80143c2:	68f8      	ldr	r0, [r7, #12]
 80143c4:	f001 fa3a 	bl	801583c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80143ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	2201      	movs	r2, #1
 80143dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	2200      	movs	r2, #0
 80143e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80143e8:	2303      	movs	r3, #3
 80143ea:	e0db      	b.n	80145a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80143f2:	b29b      	uxth	r3, r3
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	f47f af69 	bne.w	80142cc <HAL_SPI_Receive+0x204>
 80143fa:	e0c0      	b.n	801457e <HAL_SPI_Receive+0x4b6>
 80143fc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	695b      	ldr	r3, [r3, #20]
 8014406:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	695b      	ldr	r3, [r3, #20]
 801440e:	f003 0301 	and.w	r3, r3, #1
 8014412:	2b01      	cmp	r3, #1
 8014414:	d117      	bne.n	8014446 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014422:	7812      	ldrb	r2, [r2, #0]
 8014424:	b2d2      	uxtb	r2, r2
 8014426:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801442c:	1c5a      	adds	r2, r3, #1
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014438:	b29b      	uxth	r3, r3
 801443a:	3b01      	subs	r3, #1
 801443c:	b29a      	uxth	r2, r3
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014444:	e094      	b.n	8014570 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801444c:	b29b      	uxth	r3, r3
 801444e:	8bfa      	ldrh	r2, [r7, #30]
 8014450:	429a      	cmp	r2, r3
 8014452:	d946      	bls.n	80144e2 <HAL_SPI_Receive+0x41a>
 8014454:	693b      	ldr	r3, [r7, #16]
 8014456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801445a:	2b00      	cmp	r3, #0
 801445c:	d041      	beq.n	80144e2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801446a:	7812      	ldrb	r2, [r2, #0]
 801446c:	b2d2      	uxtb	r2, r2
 801446e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014474:	1c5a      	adds	r2, r3, #1
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014486:	7812      	ldrb	r2, [r2, #0]
 8014488:	b2d2      	uxtb	r2, r2
 801448a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014490:	1c5a      	adds	r2, r3, #1
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144a2:	7812      	ldrb	r2, [r2, #0]
 80144a4:	b2d2      	uxtb	r2, r2
 80144a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144ac:	1c5a      	adds	r2, r3, #1
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144be:	7812      	ldrb	r2, [r2, #0]
 80144c0:	b2d2      	uxtb	r2, r2
 80144c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80144c8:	1c5a      	adds	r2, r3, #1
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	3b04      	subs	r3, #4
 80144d8:	b29a      	uxth	r2, r3
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80144e0:	e046      	b.n	8014570 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80144e8:	b29b      	uxth	r3, r3
 80144ea:	2b03      	cmp	r3, #3
 80144ec:	d81c      	bhi.n	8014528 <HAL_SPI_Receive+0x460>
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d017      	beq.n	8014528 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014504:	7812      	ldrb	r2, [r2, #0]
 8014506:	b2d2      	uxtb	r2, r2
 8014508:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801450e:	1c5a      	adds	r2, r3, #1
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801451a:	b29b      	uxth	r3, r3
 801451c:	3b01      	subs	r3, #1
 801451e:	b29a      	uxth	r2, r3
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014526:	e023      	b.n	8014570 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014528:	f7f4 f946 	bl	80087b8 <HAL_GetTick>
 801452c:	4602      	mov	r2, r0
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	1ad3      	subs	r3, r2, r3
 8014532:	683a      	ldr	r2, [r7, #0]
 8014534:	429a      	cmp	r2, r3
 8014536:	d803      	bhi.n	8014540 <HAL_SPI_Receive+0x478>
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801453e:	d102      	bne.n	8014546 <HAL_SPI_Receive+0x47e>
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d114      	bne.n	8014570 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014546:	68f8      	ldr	r0, [r7, #12]
 8014548:	f001 f978 	bl	801583c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014552:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	2201      	movs	r2, #1
 8014560:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	2200      	movs	r2, #0
 8014568:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801456c:	2303      	movs	r3, #3
 801456e:	e019      	b.n	80145a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014576:	b29b      	uxth	r3, r3
 8014578:	2b00      	cmp	r3, #0
 801457a:	f47f af41 	bne.w	8014400 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801457e:	68f8      	ldr	r0, [r7, #12]
 8014580:	f001 f95c 	bl	801583c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	2201      	movs	r2, #1
 8014588:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	2200      	movs	r2, #0
 8014590:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801459a:	2b00      	cmp	r3, #0
 801459c:	d001      	beq.n	80145a2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801459e:	2301      	movs	r3, #1
 80145a0:	e000      	b.n	80145a4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80145a2:	2300      	movs	r3, #0
  }
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3720      	adds	r7, #32
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b08e      	sub	sp, #56	@ 0x38
 80145b0:	af02      	add	r7, sp, #8
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	60b9      	str	r1, [r7, #8]
 80145b6:	607a      	str	r2, [r7, #4]
 80145b8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	3320      	adds	r3, #32
 80145c0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	3330      	adds	r3, #48	@ 0x30
 80145c8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145ce:	095b      	lsrs	r3, r3, #5
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	3301      	adds	r3, #1
 80145d4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80145d6:	f7f4 f8ef 	bl	80087b8 <HAL_GetTick>
 80145da:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80145dc:	887b      	ldrh	r3, [r7, #2]
 80145de:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80145e0:	887b      	ldrh	r3, [r7, #2]
 80145e2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	d001      	beq.n	80145f4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80145f0:	2302      	movs	r3, #2
 80145f2:	e310      	b.n	8014c16 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d005      	beq.n	8014606 <HAL_SPI_TransmitReceive+0x5a>
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d002      	beq.n	8014606 <HAL_SPI_TransmitReceive+0x5a>
 8014600:	887b      	ldrh	r3, [r7, #2]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d101      	bne.n	801460a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8014606:	2301      	movs	r3, #1
 8014608:	e305      	b.n	8014c16 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014610:	2b01      	cmp	r3, #1
 8014612:	d101      	bne.n	8014618 <HAL_SPI_TransmitReceive+0x6c>
 8014614:	2302      	movs	r3, #2
 8014616:	e2fe      	b.n	8014c16 <HAL_SPI_TransmitReceive+0x66a>
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2201      	movs	r2, #1
 801461c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	2205      	movs	r2, #5
 8014624:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	2200      	movs	r2, #0
 801462c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	687a      	ldr	r2, [r7, #4]
 8014634:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	887a      	ldrh	r2, [r7, #2]
 801463a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	887a      	ldrh	r2, [r7, #2]
 8014642:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	68ba      	ldr	r2, [r7, #8]
 801464a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	887a      	ldrh	r2, [r7, #2]
 8014650:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	887a      	ldrh	r2, [r7, #2]
 8014658:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2200      	movs	r2, #0
 8014660:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2200      	movs	r2, #0
 8014666:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	68da      	ldr	r2, [r3, #12]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8014676:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	4a70      	ldr	r2, [pc, #448]	@ (8014840 <HAL_SPI_TransmitReceive+0x294>)
 801467e:	4293      	cmp	r3, r2
 8014680:	d009      	beq.n	8014696 <HAL_SPI_TransmitReceive+0xea>
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	4a6f      	ldr	r2, [pc, #444]	@ (8014844 <HAL_SPI_TransmitReceive+0x298>)
 8014688:	4293      	cmp	r3, r2
 801468a:	d004      	beq.n	8014696 <HAL_SPI_TransmitReceive+0xea>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	4a6d      	ldr	r2, [pc, #436]	@ (8014848 <HAL_SPI_TransmitReceive+0x29c>)
 8014692:	4293      	cmp	r3, r2
 8014694:	d102      	bne.n	801469c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8014696:	2310      	movs	r3, #16
 8014698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801469a:	e001      	b.n	80146a0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 801469c:	2308      	movs	r3, #8
 801469e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	685a      	ldr	r2, [r3, #4]
 80146a6:	4b69      	ldr	r3, [pc, #420]	@ (801484c <HAL_SPI_TransmitReceive+0x2a0>)
 80146a8:	4013      	ands	r3, r2
 80146aa:	8879      	ldrh	r1, [r7, #2]
 80146ac:	68fa      	ldr	r2, [r7, #12]
 80146ae:	6812      	ldr	r2, [r2, #0]
 80146b0:	430b      	orrs	r3, r1
 80146b2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	f042 0201 	orr.w	r2, r2, #1
 80146c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80146cc:	d107      	bne.n	80146de <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	681a      	ldr	r2, [r3, #0]
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80146dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	2b0f      	cmp	r3, #15
 80146e4:	f240 80a2 	bls.w	801482c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80146e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ea:	089b      	lsrs	r3, r3, #2
 80146ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80146ee:	e094      	b.n	801481a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	695b      	ldr	r3, [r3, #20]
 80146f6:	f003 0302 	and.w	r3, r3, #2
 80146fa:	2b02      	cmp	r3, #2
 80146fc:	d120      	bne.n	8014740 <HAL_SPI_TransmitReceive+0x194>
 80146fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014700:	2b00      	cmp	r3, #0
 8014702:	d01d      	beq.n	8014740 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014704:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014706:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801470a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801470c:	429a      	cmp	r2, r3
 801470e:	d217      	bcs.n	8014740 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	6812      	ldr	r2, [r2, #0]
 801471a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014720:	1d1a      	adds	r2, r3, #4
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801472c:	b29b      	uxth	r3, r3
 801472e:	3b01      	subs	r3, #1
 8014730:	b29a      	uxth	r2, r3
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801473e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	695b      	ldr	r3, [r3, #20]
 8014746:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014748:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801474a:	2b00      	cmp	r3, #0
 801474c:	d065      	beq.n	801481a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	695b      	ldr	r3, [r3, #20]
 8014754:	f003 0301 	and.w	r3, r3, #1
 8014758:	2b01      	cmp	r3, #1
 801475a:	d118      	bne.n	801478e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014764:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014766:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801476c:	1d1a      	adds	r2, r3, #4
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014778:	b29b      	uxth	r3, r3
 801477a:	3b01      	subs	r3, #1
 801477c:	b29a      	uxth	r2, r3
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801478a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801478c:	e045      	b.n	801481a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801478e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014790:	8bfb      	ldrh	r3, [r7, #30]
 8014792:	429a      	cmp	r2, r3
 8014794:	d21d      	bcs.n	80147d2 <HAL_SPI_TransmitReceive+0x226>
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801479c:	2b00      	cmp	r3, #0
 801479e:	d018      	beq.n	80147d2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	681a      	ldr	r2, [r3, #0]
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80147aa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147b0:	1d1a      	adds	r2, r3, #4
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147bc:	b29b      	uxth	r3, r3
 80147be:	3b01      	subs	r3, #1
 80147c0:	b29a      	uxth	r2, r3
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80147d0:	e023      	b.n	801481a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80147d2:	f7f3 fff1 	bl	80087b8 <HAL_GetTick>
 80147d6:	4602      	mov	r2, r0
 80147d8:	69bb      	ldr	r3, [r7, #24]
 80147da:	1ad3      	subs	r3, r2, r3
 80147dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80147de:	429a      	cmp	r2, r3
 80147e0:	d803      	bhi.n	80147ea <HAL_SPI_TransmitReceive+0x23e>
 80147e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147e8:	d102      	bne.n	80147f0 <HAL_SPI_TransmitReceive+0x244>
 80147ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d114      	bne.n	801481a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80147f0:	68f8      	ldr	r0, [r7, #12]
 80147f2:	f001 f823 	bl	801583c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80147fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2201      	movs	r2, #1
 801480a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	2200      	movs	r2, #0
 8014812:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014816:	2303      	movs	r3, #3
 8014818:	e1fd      	b.n	8014c16 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801481a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801481c:	2b00      	cmp	r3, #0
 801481e:	f47f af67 	bne.w	80146f0 <HAL_SPI_TransmitReceive+0x144>
 8014822:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014824:	2b00      	cmp	r3, #0
 8014826:	f47f af63 	bne.w	80146f0 <HAL_SPI_TransmitReceive+0x144>
 801482a:	e1ce      	b.n	8014bca <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	68db      	ldr	r3, [r3, #12]
 8014830:	2b07      	cmp	r3, #7
 8014832:	f240 81c2 	bls.w	8014bba <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8014836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014838:	085b      	lsrs	r3, r3, #1
 801483a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801483c:	e0c9      	b.n	80149d2 <HAL_SPI_TransmitReceive+0x426>
 801483e:	bf00      	nop
 8014840:	40013000 	.word	0x40013000
 8014844:	40003800 	.word	0x40003800
 8014848:	40003c00 	.word	0x40003c00
 801484c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	695b      	ldr	r3, [r3, #20]
 8014856:	f003 0302 	and.w	r3, r3, #2
 801485a:	2b02      	cmp	r3, #2
 801485c:	d11f      	bne.n	801489e <HAL_SPI_TransmitReceive+0x2f2>
 801485e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014860:	2b00      	cmp	r3, #0
 8014862:	d01c      	beq.n	801489e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014864:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014866:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801486a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801486c:	429a      	cmp	r2, r3
 801486e:	d216      	bcs.n	801489e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014874:	881a      	ldrh	r2, [r3, #0]
 8014876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014878:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801487e:	1c9a      	adds	r2, r3, #2
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801488a:	b29b      	uxth	r3, r3
 801488c:	3b01      	subs	r3, #1
 801488e:	b29a      	uxth	r2, r3
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801489c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	695b      	ldr	r3, [r3, #20]
 80148a4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80148a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	f000 8092 	beq.w	80149d2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	695b      	ldr	r3, [r3, #20]
 80148b4:	f003 0301 	and.w	r3, r3, #1
 80148b8:	2b01      	cmp	r3, #1
 80148ba:	d118      	bne.n	80148ee <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148c0:	6a3a      	ldr	r2, [r7, #32]
 80148c2:	8812      	ldrh	r2, [r2, #0]
 80148c4:	b292      	uxth	r2, r2
 80148c6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148cc:	1c9a      	adds	r2, r3, #2
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80148d8:	b29b      	uxth	r3, r3
 80148da:	3b01      	subs	r3, #1
 80148dc:	b29a      	uxth	r2, r3
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80148ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80148ec:	e071      	b.n	80149d2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80148ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80148f0:	8bfb      	ldrh	r3, [r7, #30]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d228      	bcs.n	8014948 <HAL_SPI_TransmitReceive+0x39c>
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d023      	beq.n	8014948 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014904:	6a3a      	ldr	r2, [r7, #32]
 8014906:	8812      	ldrh	r2, [r2, #0]
 8014908:	b292      	uxth	r2, r2
 801490a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014910:	1c9a      	adds	r2, r3, #2
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801491a:	6a3a      	ldr	r2, [r7, #32]
 801491c:	8812      	ldrh	r2, [r2, #0]
 801491e:	b292      	uxth	r2, r2
 8014920:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014926:	1c9a      	adds	r2, r3, #2
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014932:	b29b      	uxth	r3, r3
 8014934:	3b02      	subs	r3, #2
 8014936:	b29a      	uxth	r2, r3
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014944:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014946:	e044      	b.n	80149d2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014948:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801494a:	2b01      	cmp	r3, #1
 801494c:	d11d      	bne.n	801498a <HAL_SPI_TransmitReceive+0x3de>
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014954:	2b00      	cmp	r3, #0
 8014956:	d018      	beq.n	801498a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801495c:	6a3a      	ldr	r2, [r7, #32]
 801495e:	8812      	ldrh	r2, [r2, #0]
 8014960:	b292      	uxth	r2, r2
 8014962:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014968:	1c9a      	adds	r2, r3, #2
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014974:	b29b      	uxth	r3, r3
 8014976:	3b01      	subs	r3, #1
 8014978:	b29a      	uxth	r2, r3
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014986:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014988:	e023      	b.n	80149d2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801498a:	f7f3 ff15 	bl	80087b8 <HAL_GetTick>
 801498e:	4602      	mov	r2, r0
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	1ad3      	subs	r3, r2, r3
 8014994:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014996:	429a      	cmp	r2, r3
 8014998:	d803      	bhi.n	80149a2 <HAL_SPI_TransmitReceive+0x3f6>
 801499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149a0:	d102      	bne.n	80149a8 <HAL_SPI_TransmitReceive+0x3fc>
 80149a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d114      	bne.n	80149d2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f000 ff47 	bl	801583c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80149b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2201      	movs	r2, #1
 80149c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	2200      	movs	r2, #0
 80149ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80149ce:	2303      	movs	r3, #3
 80149d0:	e121      	b.n	8014c16 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80149d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	f47f af3b 	bne.w	8014850 <HAL_SPI_TransmitReceive+0x2a4>
 80149da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80149dc:	2b00      	cmp	r3, #0
 80149de:	f47f af37 	bne.w	8014850 <HAL_SPI_TransmitReceive+0x2a4>
 80149e2:	e0f2      	b.n	8014bca <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	695b      	ldr	r3, [r3, #20]
 80149ea:	f003 0302 	and.w	r3, r3, #2
 80149ee:	2b02      	cmp	r3, #2
 80149f0:	d121      	bne.n	8014a36 <HAL_SPI_TransmitReceive+0x48a>
 80149f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d01e      	beq.n	8014a36 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80149f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80149fa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80149fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149fe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d218      	bcs.n	8014a36 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	3320      	adds	r3, #32
 8014a0e:	7812      	ldrb	r2, [r2, #0]
 8014a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a16:	1c5a      	adds	r2, r3, #1
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	3b01      	subs	r3, #1
 8014a26:	b29a      	uxth	r2, r3
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a34:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	695b      	ldr	r3, [r3, #20]
 8014a3c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014a3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	f000 80ba 	beq.w	8014bba <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	695b      	ldr	r3, [r3, #20]
 8014a4c:	f003 0301 	and.w	r3, r3, #1
 8014a50:	2b01      	cmp	r3, #1
 8014a52:	d11b      	bne.n	8014a8c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a60:	7812      	ldrb	r2, [r2, #0]
 8014a62:	b2d2      	uxtb	r2, r2
 8014a64:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a6a:	1c5a      	adds	r2, r3, #1
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	b29a      	uxth	r2, r3
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a88:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014a8a:	e096      	b.n	8014bba <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014a8c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014a8e:	8bfb      	ldrh	r3, [r7, #30]
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d24a      	bcs.n	8014b2a <HAL_SPI_TransmitReceive+0x57e>
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d045      	beq.n	8014b2a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014aaa:	7812      	ldrb	r2, [r2, #0]
 8014aac:	b2d2      	uxtb	r2, r2
 8014aae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ab4:	1c5a      	adds	r2, r3, #1
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ac6:	7812      	ldrb	r2, [r2, #0]
 8014ac8:	b2d2      	uxtb	r2, r2
 8014aca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ad0:	1c5a      	adds	r2, r3, #1
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ae2:	7812      	ldrb	r2, [r2, #0]
 8014ae4:	b2d2      	uxtb	r2, r2
 8014ae6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014aec:	1c5a      	adds	r2, r3, #1
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014afe:	7812      	ldrb	r2, [r2, #0]
 8014b00:	b2d2      	uxtb	r2, r2
 8014b02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b08:	1c5a      	adds	r2, r3, #1
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b14:	b29b      	uxth	r3, r3
 8014b16:	3b04      	subs	r3, #4
 8014b18:	b29a      	uxth	r2, r3
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b26:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014b28:	e047      	b.n	8014bba <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8014b2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014b2c:	2b03      	cmp	r3, #3
 8014b2e:	d820      	bhi.n	8014b72 <HAL_SPI_TransmitReceive+0x5c6>
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d01b      	beq.n	8014b72 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b46:	7812      	ldrb	r2, [r2, #0]
 8014b48:	b2d2      	uxtb	r2, r2
 8014b4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b50:	1c5a      	adds	r2, r3, #1
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b5c:	b29b      	uxth	r3, r3
 8014b5e:	3b01      	subs	r3, #1
 8014b60:	b29a      	uxth	r2, r3
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014b70:	e023      	b.n	8014bba <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014b72:	f7f3 fe21 	bl	80087b8 <HAL_GetTick>
 8014b76:	4602      	mov	r2, r0
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	1ad3      	subs	r3, r2, r3
 8014b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d803      	bhi.n	8014b8a <HAL_SPI_TransmitReceive+0x5de>
 8014b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b88:	d102      	bne.n	8014b90 <HAL_SPI_TransmitReceive+0x5e4>
 8014b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d114      	bne.n	8014bba <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f000 fe53 	bl	801583c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	2201      	movs	r2, #1
 8014baa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014bb6:	2303      	movs	r3, #3
 8014bb8:	e02d      	b.n	8014c16 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014bba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f47f af11 	bne.w	80149e4 <HAL_SPI_TransmitReceive+0x438>
 8014bc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	f47f af0d 	bne.w	80149e4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	9300      	str	r3, [sp, #0]
 8014bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	2108      	movs	r1, #8
 8014bd4:	68f8      	ldr	r0, [r7, #12]
 8014bd6:	f000 fed1 	bl	801597c <SPI_WaitOnFlagUntilTimeout>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d007      	beq.n	8014bf0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014be6:	f043 0220 	orr.w	r2, r3, #32
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014bf0:	68f8      	ldr	r0, [r7, #12]
 8014bf2:	f000 fe23 	bl	801583c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2201      	movs	r2, #1
 8014bfa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2200      	movs	r2, #0
 8014c02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d001      	beq.n	8014c14 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8014c10:	2301      	movs	r3, #1
 8014c12:	e000      	b.n	8014c16 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8014c14:	2300      	movs	r3, #0
  }
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3730      	adds	r7, #48	@ 0x30
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop

08014c20 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8014c20:	b480      	push	{r7}
 8014c22:	b085      	sub	sp, #20
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d002      	beq.n	8014c3a <HAL_SPI_Transmit_IT+0x1a>
 8014c34:	88fb      	ldrh	r3, [r7, #6]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d101      	bne.n	8014c3e <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	e08b      	b.n	8014d56 <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d001      	beq.n	8014c4e <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8014c4a:	2302      	movs	r3, #2
 8014c4c:	e083      	b.n	8014d56 <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014c54:	2b01      	cmp	r3, #1
 8014c56:	d101      	bne.n	8014c5c <HAL_SPI_Transmit_IT+0x3c>
 8014c58:	2302      	movs	r3, #2
 8014c5a:	e07c      	b.n	8014d56 <HAL_SPI_Transmit_IT+0x136>
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2201      	movs	r2, #1
 8014c60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2203      	movs	r2, #3
 8014c68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	68ba      	ldr	r2, [r7, #8]
 8014c78:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	88fa      	ldrh	r2, [r7, #6]
 8014c7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	88fa      	ldrh	r2, [r7, #6]
 8014c86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2200      	movs	r2, #0
 8014c94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	68db      	ldr	r3, [r3, #12]
 8014caa:	2b0f      	cmp	r3, #15
 8014cac:	d903      	bls.n	8014cb6 <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8014d64 <HAL_SPI_Transmit_IT+0x144>)
 8014cb2:	675a      	str	r2, [r3, #116]	@ 0x74
 8014cb4:	e00a      	b.n	8014ccc <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	2b07      	cmp	r3, #7
 8014cbc:	d903      	bls.n	8014cc6 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	4a29      	ldr	r2, [pc, #164]	@ (8014d68 <HAL_SPI_Transmit_IT+0x148>)
 8014cc2:	675a      	str	r2, [r3, #116]	@ 0x74
 8014cc4:	e002      	b.n	8014ccc <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	4a28      	ldr	r2, [pc, #160]	@ (8014d6c <HAL_SPI_Transmit_IT+0x14c>)
 8014cca:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	689b      	ldr	r3, [r3, #8]
 8014cd0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014cd4:	d108      	bne.n	8014ce8 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	681a      	ldr	r2, [r3, #0]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014ce4:	601a      	str	r2, [r3, #0]
 8014ce6:	e009      	b.n	8014cfc <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	68db      	ldr	r3, [r3, #12]
 8014cee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014cfa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	685a      	ldr	r2, [r3, #4]
 8014d02:	4b1b      	ldr	r3, [pc, #108]	@ (8014d70 <HAL_SPI_Transmit_IT+0x150>)
 8014d04:	4013      	ands	r3, r2
 8014d06:	88f9      	ldrh	r1, [r7, #6]
 8014d08:	68fa      	ldr	r2, [r7, #12]
 8014d0a:	6812      	ldr	r2, [r2, #0]
 8014d0c:	430b      	orrs	r3, r1
 8014d0e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	f042 0201 	orr.w	r2, r2, #1
 8014d1e:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	2200      	movs	r2, #0
 8014d24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	6919      	ldr	r1, [r3, #16]
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	f240 732a 	movw	r3, #1834	@ 0x72a
 8014d36:	430b      	orrs	r3, r1
 8014d38:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014d42:	d107      	bne.n	8014d54 <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	681a      	ldr	r2, [r3, #0]
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014d52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8014d54:	2300      	movs	r3, #0
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3714      	adds	r7, #20
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop
 8014d64:	080157e3 	.word	0x080157e3
 8014d68:	08015785 	.word	0x08015785
 8014d6c:	0801572b 	.word	0x0801572b
 8014d70:	ffff0000 	.word	0xffff0000

08014d74 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8014d74:	b480      	push	{r7}
 8014d76:	b085      	sub	sp, #20
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	2b01      	cmp	r3, #1
 8014d8c:	d001      	beq.n	8014d92 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8014d8e:	2302      	movs	r3, #2
 8014d90:	e08b      	b.n	8014eaa <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d002      	beq.n	8014d9e <HAL_SPI_Receive_IT+0x2a>
 8014d98:	88fb      	ldrh	r3, [r7, #6]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d101      	bne.n	8014da2 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	e083      	b.n	8014eaa <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014da8:	2b01      	cmp	r3, #1
 8014daa:	d101      	bne.n	8014db0 <HAL_SPI_Receive_IT+0x3c>
 8014dac:	2302      	movs	r3, #2
 8014dae:	e07c      	b.n	8014eaa <HAL_SPI_Receive_IT+0x136>
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2201      	movs	r2, #1
 8014db4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	2204      	movs	r2, #4
 8014dbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	68ba      	ldr	r2, [r7, #8]
 8014dcc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	88fa      	ldrh	r2, [r7, #6]
 8014dd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	88fa      	ldrh	r2, [r7, #6]
 8014dda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2200      	movs	r2, #0
 8014de2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	2200      	movs	r2, #0
 8014de8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2200      	movs	r2, #0
 8014df0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2200      	movs	r2, #0
 8014df8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	68db      	ldr	r3, [r3, #12]
 8014dfe:	2b0f      	cmp	r3, #15
 8014e00:	d903      	bls.n	8014e0a <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	4a2c      	ldr	r2, [pc, #176]	@ (8014eb8 <HAL_SPI_Receive_IT+0x144>)
 8014e06:	671a      	str	r2, [r3, #112]	@ 0x70
 8014e08:	e00a      	b.n	8014e20 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	68db      	ldr	r3, [r3, #12]
 8014e0e:	2b07      	cmp	r3, #7
 8014e10:	d903      	bls.n	8014e1a <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	4a29      	ldr	r2, [pc, #164]	@ (8014ebc <HAL_SPI_Receive_IT+0x148>)
 8014e16:	671a      	str	r2, [r3, #112]	@ 0x70
 8014e18:	e002      	b.n	8014e20 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	4a28      	ldr	r2, [pc, #160]	@ (8014ec0 <HAL_SPI_Receive_IT+0x14c>)
 8014e1e:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	689b      	ldr	r3, [r3, #8]
 8014e24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014e28:	d108      	bne.n	8014e3c <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014e38:	601a      	str	r2, [r3, #0]
 8014e3a:	e009      	b.n	8014e50 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	68db      	ldr	r3, [r3, #12]
 8014e42:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014e4e:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	685a      	ldr	r2, [r3, #4]
 8014e56:	4b1b      	ldr	r3, [pc, #108]	@ (8014ec4 <HAL_SPI_Receive_IT+0x150>)
 8014e58:	4013      	ands	r3, r2
 8014e5a:	88f9      	ldrh	r1, [r7, #6]
 8014e5c:	68fa      	ldr	r2, [r7, #12]
 8014e5e:	6812      	ldr	r2, [r2, #0]
 8014e60:	430b      	orrs	r3, r1
 8014e62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	681a      	ldr	r2, [r3, #0]
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	f042 0201 	orr.w	r2, r2, #1
 8014e72:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2200      	movs	r2, #0
 8014e78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	6919      	ldr	r1, [r3, #16]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	681a      	ldr	r2, [r3, #0]
 8014e86:	f240 7349 	movw	r3, #1865	@ 0x749
 8014e8a:	430b      	orrs	r3, r1
 8014e8c:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014e96:	d107      	bne.n	8014ea8 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	681a      	ldr	r2, [r3, #0]
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014ea6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8014ea8:	2300      	movs	r3, #0
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3714      	adds	r7, #20
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb4:	4770      	bx	lr
 8014eb6:	bf00      	nop
 8014eb8:	080156d3 	.word	0x080156d3
 8014ebc:	08015673 	.word	0x08015673
 8014ec0:	08015615 	.word	0x08015615
 8014ec4:	ffff0000 	.word	0xffff0000

08014ec8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b084      	sub	sp, #16
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	4613      	mov	r3, r2
 8014ed4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	d001      	beq.n	8014ee6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8014ee2:	2302      	movs	r3, #2
 8014ee4:	e126      	b.n	8015134 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d002      	beq.n	8014ef2 <HAL_SPI_Transmit_DMA+0x2a>
 8014eec:	88fb      	ldrh	r3, [r7, #6]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d101      	bne.n	8014ef6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	e11e      	b.n	8015134 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014efc:	2b01      	cmp	r3, #1
 8014efe:	d101      	bne.n	8014f04 <HAL_SPI_Transmit_DMA+0x3c>
 8014f00:	2302      	movs	r3, #2
 8014f02:	e117      	b.n	8015134 <HAL_SPI_Transmit_DMA+0x26c>
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	2201      	movs	r2, #1
 8014f08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	2203      	movs	r2, #3
 8014f10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2200      	movs	r2, #0
 8014f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	68ba      	ldr	r2, [r7, #8]
 8014f20:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	88fa      	ldrh	r2, [r7, #6]
 8014f26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	88fa      	ldrh	r2, [r7, #6]
 8014f2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	2200      	movs	r2, #0
 8014f36:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2200      	movs	r2, #0
 8014f42:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2200      	movs	r2, #0
 8014f48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	689b      	ldr	r3, [r3, #8]
 8014f58:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014f5c:	d108      	bne.n	8014f70 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014f6c:	601a      	str	r2, [r3, #0]
 8014f6e:	e009      	b.n	8014f84 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	68db      	ldr	r3, [r3, #12]
 8014f76:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014f82:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	2b0f      	cmp	r3, #15
 8014f8a:	d905      	bls.n	8014f98 <HAL_SPI_Transmit_DMA+0xd0>
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f90:	699b      	ldr	r3, [r3, #24]
 8014f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014f96:	d10f      	bne.n	8014fb8 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014f9c:	2b07      	cmp	r3, #7
 8014f9e:	d911      	bls.n	8014fc4 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014fa4:	699b      	ldr	r3, [r3, #24]
 8014fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014faa:	d00b      	beq.n	8014fc4 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014fb0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014fb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014fb6:	d005      	beq.n	8014fc4 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	e0b7      	b.n	8015134 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	68db      	ldr	r3, [r3, #12]
 8014fc8:	2b07      	cmp	r3, #7
 8014fca:	d820      	bhi.n	801500e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014fd0:	699b      	ldr	r3, [r3, #24]
 8014fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014fd6:	d109      	bne.n	8014fec <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	3301      	adds	r3, #1
 8014fe2:	105b      	asrs	r3, r3, #1
 8014fe4:	b29a      	uxth	r2, r3
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ff0:	699b      	ldr	r3, [r3, #24]
 8014ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014ff6:	d11e      	bne.n	8015036 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	3303      	adds	r3, #3
 8015002:	109b      	asrs	r3, r3, #2
 8015004:	b29a      	uxth	r2, r3
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801500c:	e013      	b.n	8015036 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	68db      	ldr	r3, [r3, #12]
 8015012:	2b0f      	cmp	r3, #15
 8015014:	d80f      	bhi.n	8015036 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801501a:	699b      	ldr	r3, [r3, #24]
 801501c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015020:	d109      	bne.n	8015036 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015028:	b29b      	uxth	r3, r3
 801502a:	3301      	adds	r3, #1
 801502c:	105b      	asrs	r3, r3, #1
 801502e:	b29a      	uxth	r2, r3
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801503a:	4a40      	ldr	r2, [pc, #256]	@ (801513c <HAL_SPI_Transmit_DMA+0x274>)
 801503c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015042:	4a3f      	ldr	r2, [pc, #252]	@ (8015140 <HAL_SPI_Transmit_DMA+0x278>)
 8015044:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801504a:	4a3e      	ldr	r2, [pc, #248]	@ (8015144 <HAL_SPI_Transmit_DMA+0x27c>)
 801504c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015052:	2200      	movs	r2, #0
 8015054:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	689a      	ldr	r2, [r3, #8]
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015064:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801506e:	4619      	mov	r1, r3
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	3320      	adds	r3, #32
 8015076:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801507e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015080:	f7f6 f828 	bl	800b0d4 <HAL_DMA_Start_IT>
 8015084:	4603      	mov	r3, r0
 8015086:	2b00      	cmp	r3, #0
 8015088:	d011      	beq.n	80150ae <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015090:	f043 0210 	orr.w	r2, r3, #16
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	2201      	movs	r2, #1
 801509e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2200      	movs	r2, #0
 80150a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80150aa:	2301      	movs	r3, #1
 80150ac:	e042      	b.n	8015134 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80150b2:	69db      	ldr	r3, [r3, #28]
 80150b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80150b8:	d108      	bne.n	80150cc <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	6859      	ldr	r1, [r3, #4]
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681a      	ldr	r2, [r3, #0]
 80150c4:	4b20      	ldr	r3, [pc, #128]	@ (8015148 <HAL_SPI_Transmit_DMA+0x280>)
 80150c6:	400b      	ands	r3, r1
 80150c8:	6053      	str	r3, [r2, #4]
 80150ca:	e009      	b.n	80150e0 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	685a      	ldr	r2, [r3, #4]
 80150d2:	4b1d      	ldr	r3, [pc, #116]	@ (8015148 <HAL_SPI_Transmit_DMA+0x280>)
 80150d4:	4013      	ands	r3, r2
 80150d6:	88f9      	ldrh	r1, [r7, #6]
 80150d8:	68fa      	ldr	r2, [r7, #12]
 80150da:	6812      	ldr	r2, [r2, #0]
 80150dc:	430b      	orrs	r3, r1
 80150de:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	689a      	ldr	r2, [r3, #8]
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80150ee:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	691a      	ldr	r2, [r3, #16]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80150fe:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	f042 0201 	orr.w	r2, r2, #1
 801510e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	685b      	ldr	r3, [r3, #4]
 8015114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015118:	d107      	bne.n	801512a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015128:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2200      	movs	r2, #0
 801512e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015132:	2300      	movs	r3, #0
}
 8015134:	4618      	mov	r0, r3
 8015136:	3710      	adds	r7, #16
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	0801557f 	.word	0x0801557f
 8015140:	08015539 	.word	0x08015539
 8015144:	0801559b 	.word	0x0801559b
 8015148:	ffff0000 	.word	0xffff0000

0801514c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b08a      	sub	sp, #40	@ 0x28
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	691b      	ldr	r3, [r3, #16]
 801515a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	695b      	ldr	r3, [r3, #20]
 8015162:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015164:	6a3a      	ldr	r2, [r7, #32]
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	4013      	ands	r3, r2
 801516a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	689b      	ldr	r3, [r3, #8]
 8015172:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015174:	2300      	movs	r3, #0
 8015176:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801517e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	3330      	adds	r3, #48	@ 0x30
 8015186:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015188:	69fb      	ldr	r3, [r7, #28]
 801518a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801518e:	2b00      	cmp	r3, #0
 8015190:	d010      	beq.n	80151b4 <HAL_SPI_IRQHandler+0x68>
 8015192:	6a3b      	ldr	r3, [r7, #32]
 8015194:	f003 0308 	and.w	r3, r3, #8
 8015198:	2b00      	cmp	r3, #0
 801519a:	d00b      	beq.n	80151b4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	699a      	ldr	r2, [r3, #24]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80151aa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f000 f9b9 	bl	8015524 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80151b2:	e192      	b.n	80154da <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80151b4:	69bb      	ldr	r3, [r7, #24]
 80151b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d113      	bne.n	80151e6 <HAL_SPI_IRQHandler+0x9a>
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	f003 0320 	and.w	r3, r3, #32
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d10e      	bne.n	80151e6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80151c8:	69bb      	ldr	r3, [r7, #24]
 80151ca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d009      	beq.n	80151e6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	4798      	blx	r3
    handled = 1UL;
 80151e2:	2301      	movs	r3, #1
 80151e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80151e6:	69bb      	ldr	r3, [r7, #24]
 80151e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d10f      	bne.n	8015210 <HAL_SPI_IRQHandler+0xc4>
 80151f0:	69bb      	ldr	r3, [r7, #24]
 80151f2:	f003 0301 	and.w	r3, r3, #1
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d00a      	beq.n	8015210 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015200:	2b00      	cmp	r3, #0
 8015202:	d105      	bne.n	8015210 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	4798      	blx	r3
    handled = 1UL;
 801520c:	2301      	movs	r3, #1
 801520e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015210:	69bb      	ldr	r3, [r7, #24]
 8015212:	f003 0320 	and.w	r3, r3, #32
 8015216:	2b00      	cmp	r3, #0
 8015218:	d10f      	bne.n	801523a <HAL_SPI_IRQHandler+0xee>
 801521a:	69bb      	ldr	r3, [r7, #24]
 801521c:	f003 0302 	and.w	r3, r3, #2
 8015220:	2b00      	cmp	r3, #0
 8015222:	d00a      	beq.n	801523a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015224:	69bb      	ldr	r3, [r7, #24]
 8015226:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801522a:	2b00      	cmp	r3, #0
 801522c:	d105      	bne.n	801523a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	4798      	blx	r3
    handled = 1UL;
 8015236:	2301      	movs	r3, #1
 8015238:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523c:	2b00      	cmp	r3, #0
 801523e:	f040 8147 	bne.w	80154d0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015242:	69bb      	ldr	r3, [r7, #24]
 8015244:	f003 0308 	and.w	r3, r3, #8
 8015248:	2b00      	cmp	r3, #0
 801524a:	f000 808b 	beq.w	8015364 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	699a      	ldr	r2, [r3, #24]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f042 0208 	orr.w	r2, r2, #8
 801525c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	699a      	ldr	r2, [r3, #24]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	f042 0210 	orr.w	r2, r2, #16
 801526c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	699a      	ldr	r2, [r3, #24]
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801527c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	691a      	ldr	r2, [r3, #16]
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	f022 0208 	bic.w	r2, r2, #8
 801528c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	689b      	ldr	r3, [r3, #8]
 8015294:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015298:	2b00      	cmp	r3, #0
 801529a:	d13d      	bne.n	8015318 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801529c:	e036      	b.n	801530c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	68db      	ldr	r3, [r3, #12]
 80152a2:	2b0f      	cmp	r3, #15
 80152a4:	d90b      	bls.n	80152be <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681a      	ldr	r2, [r3, #0]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80152b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152b6:	1d1a      	adds	r2, r3, #4
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	665a      	str	r2, [r3, #100]	@ 0x64
 80152bc:	e01d      	b.n	80152fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	2b07      	cmp	r3, #7
 80152c4:	d90b      	bls.n	80152de <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ca:	68fa      	ldr	r2, [r7, #12]
 80152cc:	8812      	ldrh	r2, [r2, #0]
 80152ce:	b292      	uxth	r2, r2
 80152d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152d6:	1c9a      	adds	r2, r3, #2
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	665a      	str	r2, [r3, #100]	@ 0x64
 80152dc:	e00d      	b.n	80152fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ea:	7812      	ldrb	r2, [r2, #0]
 80152ec:	b2d2      	uxtb	r2, r2
 80152ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152f4:	1c5a      	adds	r2, r3, #1
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015300:	b29b      	uxth	r3, r3
 8015302:	3b01      	subs	r3, #1
 8015304:	b29a      	uxth	r2, r3
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015312:	b29b      	uxth	r3, r3
 8015314:	2b00      	cmp	r3, #0
 8015316:	d1c2      	bne.n	801529e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f000 fa8f 	bl	801583c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2201      	movs	r2, #1
 8015322:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801532c:	2b00      	cmp	r3, #0
 801532e:	d003      	beq.n	8015338 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f000 f8ed 	bl	8015510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015336:	e0d0      	b.n	80154da <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015338:	7cfb      	ldrb	r3, [r7, #19]
 801533a:	2b05      	cmp	r3, #5
 801533c:	d103      	bne.n	8015346 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f000 f8d2 	bl	80154e8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015344:	e0c6      	b.n	80154d4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015346:	7cfb      	ldrb	r3, [r7, #19]
 8015348:	2b04      	cmp	r3, #4
 801534a:	d103      	bne.n	8015354 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f7f1 fb53 	bl	80069f8 <HAL_SPI_RxCpltCallback>
    return;
 8015352:	e0bf      	b.n	80154d4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015354:	7cfb      	ldrb	r3, [r7, #19]
 8015356:	2b03      	cmp	r3, #3
 8015358:	f040 80bc 	bne.w	80154d4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f7f1 fb0b 	bl	8006978 <HAL_SPI_TxCpltCallback>
    return;
 8015362:	e0b7      	b.n	80154d4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015364:	69bb      	ldr	r3, [r7, #24]
 8015366:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801536a:	2b00      	cmp	r3, #0
 801536c:	f000 80b5 	beq.w	80154da <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015370:	69bb      	ldr	r3, [r7, #24]
 8015372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015376:	2b00      	cmp	r3, #0
 8015378:	d00f      	beq.n	801539a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015380:	f043 0204 	orr.w	r2, r3, #4
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	699a      	ldr	r2, [r3, #24]
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015398:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801539a:	69bb      	ldr	r3, [r7, #24]
 801539c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d00f      	beq.n	80153c4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80153aa:	f043 0201 	orr.w	r2, r3, #1
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	699a      	ldr	r2, [r3, #24]
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80153c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80153c4:	69bb      	ldr	r3, [r7, #24]
 80153c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d00f      	beq.n	80153ee <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80153d4:	f043 0208 	orr.w	r2, r3, #8
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	699a      	ldr	r2, [r3, #24]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80153ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80153ee:	69bb      	ldr	r3, [r7, #24]
 80153f0:	f003 0320 	and.w	r3, r3, #32
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d00f      	beq.n	8015418 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80153fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	699a      	ldr	r2, [r3, #24]
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	f042 0220 	orr.w	r2, r2, #32
 8015416:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801541e:	2b00      	cmp	r3, #0
 8015420:	d05a      	beq.n	80154d8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	681a      	ldr	r2, [r3, #0]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	f022 0201 	bic.w	r2, r2, #1
 8015430:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	6919      	ldr	r1, [r3, #16]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681a      	ldr	r2, [r3, #0]
 801543c:	4b28      	ldr	r3, [pc, #160]	@ (80154e0 <HAL_SPI_IRQHandler+0x394>)
 801543e:	400b      	ands	r3, r1
 8015440:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015448:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801544c:	d138      	bne.n	80154c0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	689a      	ldr	r2, [r3, #8]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801545c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015462:	2b00      	cmp	r3, #0
 8015464:	d013      	beq.n	801548e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801546a:	4a1e      	ldr	r2, [pc, #120]	@ (80154e4 <HAL_SPI_IRQHandler+0x398>)
 801546c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015472:	4618      	mov	r0, r3
 8015474:	f7f6 fbb6 	bl	800bbe4 <HAL_DMA_Abort_IT>
 8015478:	4603      	mov	r3, r0
 801547a:	2b00      	cmp	r3, #0
 801547c:	d007      	beq.n	801548e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015484:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015492:	2b00      	cmp	r3, #0
 8015494:	d020      	beq.n	80154d8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801549a:	4a12      	ldr	r2, [pc, #72]	@ (80154e4 <HAL_SPI_IRQHandler+0x398>)
 801549c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7f6 fb9e 	bl	800bbe4 <HAL_DMA_Abort_IT>
 80154a8:	4603      	mov	r3, r0
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d014      	beq.n	80154d8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80154b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80154be:	e00b      	b.n	80154d8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2201      	movs	r2, #1
 80154c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 f821 	bl	8015510 <HAL_SPI_ErrorCallback>
    return;
 80154ce:	e003      	b.n	80154d8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80154d0:	bf00      	nop
 80154d2:	e002      	b.n	80154da <HAL_SPI_IRQHandler+0x38e>
    return;
 80154d4:	bf00      	nop
 80154d6:	e000      	b.n	80154da <HAL_SPI_IRQHandler+0x38e>
    return;
 80154d8:	bf00      	nop
  }
}
 80154da:	3728      	adds	r7, #40	@ 0x28
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	fffffc94 	.word	0xfffffc94
 80154e4:	080155e1 	.word	0x080155e1

080154e8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80154e8:	b480      	push	{r7}
 80154ea:	b083      	sub	sp, #12
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80154f0:	bf00      	nop
 80154f2:	370c      	adds	r7, #12
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr

080154fc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80154fc:	b480      	push	{r7}
 80154fe:	b083      	sub	sp, #12
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015504:	bf00      	nop
 8015506:	370c      	adds	r7, #12
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr

08015510 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015510:	b480      	push	{r7}
 8015512:	b083      	sub	sp, #12
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015518:	bf00      	nop
 801551a:	370c      	adds	r7, #12
 801551c:	46bd      	mov	sp, r7
 801551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015522:	4770      	bx	lr

08015524 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801552c:	bf00      	nop
 801552e:	370c      	adds	r7, #12
 8015530:	46bd      	mov	sp, r7
 8015532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015536:	4770      	bx	lr

08015538 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015544:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801554c:	b2db      	uxtb	r3, r3
 801554e:	2b07      	cmp	r3, #7
 8015550:	d011      	beq.n	8015576 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015556:	69db      	ldr	r3, [r3, #28]
 8015558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801555c:	d103      	bne.n	8015566 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 801555e:	68f8      	ldr	r0, [r7, #12]
 8015560:	f7f1 fa0a 	bl	8006978 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015564:	e007      	b.n	8015576 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	691a      	ldr	r2, [r3, #16]
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	f042 0208 	orr.w	r2, r2, #8
 8015574:	611a      	str	r2, [r3, #16]
}
 8015576:	bf00      	nop
 8015578:	3710      	adds	r7, #16
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}

0801557e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801557e:	b580      	push	{r7, lr}
 8015580:	b084      	sub	sp, #16
 8015582:	af00      	add	r7, sp, #0
 8015584:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801558a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801558c:	68f8      	ldr	r0, [r7, #12]
 801558e:	f7ff ffb5 	bl	80154fc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015592:	bf00      	nop
 8015594:	3710      	adds	r7, #16
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}

0801559a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b084      	sub	sp, #16
 801559e:	af00      	add	r7, sp, #0
 80155a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155a6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f7f7 fc99 	bl	800cee0 <HAL_DMA_GetError>
 80155ae:	4603      	mov	r3, r0
 80155b0:	2b02      	cmp	r3, #2
 80155b2:	d011      	beq.n	80155d8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f000 f941 	bl	801583c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155c0:	f043 0210 	orr.w	r2, r3, #16
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	2201      	movs	r2, #1
 80155ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80155d2:	68f8      	ldr	r0, [r7, #12]
 80155d4:	f7ff ff9c 	bl	8015510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80155d8:	bf00      	nop
 80155da:	3710      	adds	r7, #16
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	2200      	movs	r2, #0
 80155f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2200      	movs	r2, #0
 80155fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	2201      	movs	r2, #1
 8015602:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8015606:	68f8      	ldr	r0, [r7, #12]
 8015608:	f7ff ff82 	bl	8015510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801560c:	bf00      	nop
 801560e:	3710      	adds	r7, #16
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}

08015614 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8015614:	b480      	push	{r7}
 8015616:	b083      	sub	sp, #12
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015628:	7812      	ldrb	r2, [r2, #0]
 801562a:	b2d2      	uxtb	r2, r2
 801562c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015632:	1c5a      	adds	r2, r3, #1
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801563e:	b29b      	uxth	r3, r3
 8015640:	3b01      	subs	r3, #1
 8015642:	b29a      	uxth	r2, r3
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015650:	b29b      	uxth	r3, r3
 8015652:	2b00      	cmp	r3, #0
 8015654:	d107      	bne.n	8015666 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	691a      	ldr	r2, [r3, #16]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	f022 0201 	bic.w	r2, r2, #1
 8015664:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015666:	bf00      	nop
 8015668:	370c      	adds	r7, #12
 801566a:	46bd      	mov	sp, r7
 801566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015670:	4770      	bx	lr

08015672 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8015672:	b480      	push	{r7}
 8015674:	b085      	sub	sp, #20
 8015676:	af00      	add	r7, sp, #0
 8015678:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	3330      	adds	r3, #48	@ 0x30
 8015680:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015686:	68fa      	ldr	r2, [r7, #12]
 8015688:	8812      	ldrh	r2, [r2, #0]
 801568a:	b292      	uxth	r2, r2
 801568c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015692:	1c9a      	adds	r2, r3, #2
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801569e:	b29b      	uxth	r3, r3
 80156a0:	3b01      	subs	r3, #1
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d107      	bne.n	80156c6 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	691a      	ldr	r2, [r3, #16]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f022 0201 	bic.w	r2, r2, #1
 80156c4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80156c6:	bf00      	nop
 80156c8:	3714      	adds	r7, #20
 80156ca:	46bd      	mov	sp, r7
 80156cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d0:	4770      	bx	lr

080156d2 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80156d2:	b480      	push	{r7}
 80156d4:	b083      	sub	sp, #12
 80156d6:	af00      	add	r7, sp, #0
 80156d8:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	681a      	ldr	r2, [r3, #0]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80156e4:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156ea:	1d1a      	adds	r2, r3, #4
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	3b01      	subs	r3, #1
 80156fa:	b29a      	uxth	r2, r3
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015708:	b29b      	uxth	r3, r3
 801570a:	2b00      	cmp	r3, #0
 801570c:	d107      	bne.n	801571e <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	691a      	ldr	r2, [r3, #16]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f022 0201 	bic.w	r2, r2, #1
 801571c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 801571e:	bf00      	nop
 8015720:	370c      	adds	r7, #12
 8015722:	46bd      	mov	sp, r7
 8015724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015728:	4770      	bx	lr

0801572a <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 801572a:	b480      	push	{r7}
 801572c:	b083      	sub	sp, #12
 801572e:	af00      	add	r7, sp, #0
 8015730:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	3320      	adds	r3, #32
 801573c:	7812      	ldrb	r2, [r2, #0]
 801573e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015744:	1c5a      	adds	r2, r3, #1
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015750:	b29b      	uxth	r3, r3
 8015752:	3b01      	subs	r3, #1
 8015754:	b29a      	uxth	r2, r3
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015762:	b29b      	uxth	r3, r3
 8015764:	2b00      	cmp	r3, #0
 8015766:	d107      	bne.n	8015778 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	691a      	ldr	r2, [r3, #16]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	f022 0202 	bic.w	r2, r2, #2
 8015776:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8015778:	bf00      	nop
 801577a:	370c      	adds	r7, #12
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr

08015784 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8015784:	b480      	push	{r7}
 8015786:	b085      	sub	sp, #20
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	3320      	adds	r3, #32
 8015792:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015798:	881a      	ldrh	r2, [r3, #0]
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157a2:	1c9a      	adds	r2, r3, #2
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157ae:	b29b      	uxth	r3, r3
 80157b0:	3b01      	subs	r3, #1
 80157b2:	b29a      	uxth	r2, r3
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157c0:	b29b      	uxth	r3, r3
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d107      	bne.n	80157d6 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	691a      	ldr	r2, [r3, #16]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	f022 0202 	bic.w	r2, r2, #2
 80157d4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80157d6:	bf00      	nop
 80157d8:	3714      	adds	r7, #20
 80157da:	46bd      	mov	sp, r7
 80157dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e0:	4770      	bx	lr

080157e2 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80157e2:	b480      	push	{r7}
 80157e4:	b083      	sub	sp, #12
 80157e6:	af00      	add	r7, sp, #0
 80157e8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	6812      	ldr	r2, [r2, #0]
 80157f4:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157fa:	1d1a      	adds	r2, r3, #4
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015806:	b29b      	uxth	r3, r3
 8015808:	3b01      	subs	r3, #1
 801580a:	b29a      	uxth	r2, r3
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015818:	b29b      	uxth	r3, r3
 801581a:	2b00      	cmp	r3, #0
 801581c:	d107      	bne.n	801582e <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	691a      	ldr	r2, [r3, #16]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	f022 0202 	bic.w	r2, r2, #2
 801582c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 801582e:	bf00      	nop
 8015830:	370c      	adds	r7, #12
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr
	...

0801583c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801583c:	b480      	push	{r7}
 801583e:	b085      	sub	sp, #20
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	695b      	ldr	r3, [r3, #20]
 801584a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	699a      	ldr	r2, [r3, #24]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	f042 0208 	orr.w	r2, r2, #8
 801585a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	699a      	ldr	r2, [r3, #24]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	f042 0210 	orr.w	r2, r2, #16
 801586a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	681a      	ldr	r2, [r3, #0]
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	f022 0201 	bic.w	r2, r2, #1
 801587a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	6919      	ldr	r1, [r3, #16]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681a      	ldr	r2, [r3, #0]
 8015886:	4b3c      	ldr	r3, [pc, #240]	@ (8015978 <SPI_CloseTransfer+0x13c>)
 8015888:	400b      	ands	r3, r1
 801588a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	689a      	ldr	r2, [r3, #8]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801589a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	2b04      	cmp	r3, #4
 80158a6:	d014      	beq.n	80158d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	f003 0320 	and.w	r3, r3, #32
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d00f      	beq.n	80158d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	699a      	ldr	r2, [r3, #24]
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	f042 0220 	orr.w	r2, r2, #32
 80158d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	2b03      	cmp	r3, #3
 80158dc:	d014      	beq.n	8015908 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d00f      	beq.n	8015908 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158ee:	f043 0204 	orr.w	r2, r3, #4
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	699a      	ldr	r2, [r3, #24]
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015906:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801590e:	2b00      	cmp	r3, #0
 8015910:	d00f      	beq.n	8015932 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015918:	f043 0201 	orr.w	r2, r3, #1
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	699a      	ldr	r2, [r3, #24]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015930:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015938:	2b00      	cmp	r3, #0
 801593a:	d00f      	beq.n	801595c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015942:	f043 0208 	orr.w	r2, r3, #8
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	699a      	ldr	r2, [r3, #24]
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801595a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2200      	movs	r2, #0
 8015960:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	2200      	movs	r2, #0
 8015968:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801596c:	bf00      	nop
 801596e:	3714      	adds	r7, #20
 8015970:	46bd      	mov	sp, r7
 8015972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015976:	4770      	bx	lr
 8015978:	fffffc90 	.word	0xfffffc90

0801597c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b084      	sub	sp, #16
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	603b      	str	r3, [r7, #0]
 8015988:	4613      	mov	r3, r2
 801598a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801598c:	e010      	b.n	80159b0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801598e:	f7f2 ff13 	bl	80087b8 <HAL_GetTick>
 8015992:	4602      	mov	r2, r0
 8015994:	69bb      	ldr	r3, [r7, #24]
 8015996:	1ad3      	subs	r3, r2, r3
 8015998:	683a      	ldr	r2, [r7, #0]
 801599a:	429a      	cmp	r2, r3
 801599c:	d803      	bhi.n	80159a6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159a4:	d102      	bne.n	80159ac <SPI_WaitOnFlagUntilTimeout+0x30>
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d101      	bne.n	80159b0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80159ac:	2303      	movs	r3, #3
 80159ae:	e00f      	b.n	80159d0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	695a      	ldr	r2, [r3, #20]
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	4013      	ands	r3, r2
 80159ba:	68ba      	ldr	r2, [r7, #8]
 80159bc:	429a      	cmp	r2, r3
 80159be:	bf0c      	ite	eq
 80159c0:	2301      	moveq	r3, #1
 80159c2:	2300      	movne	r3, #0
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	461a      	mov	r2, r3
 80159c8:	79fb      	ldrb	r3, [r7, #7]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d0df      	beq.n	801598e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80159ce:	2300      	movs	r3, #0
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	3710      	adds	r7, #16
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}

080159d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80159d8:	b480      	push	{r7}
 80159da:	b085      	sub	sp, #20
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159e4:	095b      	lsrs	r3, r3, #5
 80159e6:	3301      	adds	r3, #1
 80159e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	68db      	ldr	r3, [r3, #12]
 80159ee:	3301      	adds	r3, #1
 80159f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	3307      	adds	r3, #7
 80159f6:	08db      	lsrs	r3, r3, #3
 80159f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	68fa      	ldr	r2, [r7, #12]
 80159fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3714      	adds	r7, #20
 8015a06:	46bd      	mov	sp, r7
 8015a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0c:	4770      	bx	lr

08015a0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015a0e:	b580      	push	{r7, lr}
 8015a10:	b082      	sub	sp, #8
 8015a12:	af00      	add	r7, sp, #0
 8015a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d101      	bne.n	8015a20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015a1c:	2301      	movs	r3, #1
 8015a1e:	e049      	b.n	8015ab4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015a26:	b2db      	uxtb	r3, r3
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d106      	bne.n	8015a3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015a34:	6878      	ldr	r0, [r7, #4]
 8015a36:	f7f2 fcc9 	bl	80083cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	2202      	movs	r2, #2
 8015a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681a      	ldr	r2, [r3, #0]
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	3304      	adds	r3, #4
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	4610      	mov	r0, r2
 8015a4e:	f000 fedb 	bl	8016808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2201      	movs	r2, #1
 8015a56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2201      	movs	r2, #1
 8015a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2201      	movs	r2, #1
 8015a66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2201      	movs	r2, #1
 8015a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2201      	movs	r2, #1
 8015a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	2201      	movs	r2, #1
 8015a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2201      	movs	r2, #1
 8015a86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2201      	movs	r2, #1
 8015a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	2201      	movs	r2, #1
 8015a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2201      	movs	r2, #1
 8015a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2201      	movs	r2, #1
 8015aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015ab2:	2300      	movs	r3, #0
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3708      	adds	r7, #8
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}

08015abc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015abc:	b480      	push	{r7}
 8015abe:	b085      	sub	sp, #20
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	2b01      	cmp	r3, #1
 8015ace:	d001      	beq.n	8015ad4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	e056      	b.n	8015b82 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2202      	movs	r2, #2
 8015ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8015b90 <HAL_TIM_Base_Start+0xd4>)
 8015ae2:	4293      	cmp	r3, r2
 8015ae4:	d02c      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015aee:	d027      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	4a27      	ldr	r2, [pc, #156]	@ (8015b94 <HAL_TIM_Base_Start+0xd8>)
 8015af6:	4293      	cmp	r3, r2
 8015af8:	d022      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	4a26      	ldr	r2, [pc, #152]	@ (8015b98 <HAL_TIM_Base_Start+0xdc>)
 8015b00:	4293      	cmp	r3, r2
 8015b02:	d01d      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	4a24      	ldr	r2, [pc, #144]	@ (8015b9c <HAL_TIM_Base_Start+0xe0>)
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	d018      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	4a23      	ldr	r2, [pc, #140]	@ (8015ba0 <HAL_TIM_Base_Start+0xe4>)
 8015b14:	4293      	cmp	r3, r2
 8015b16:	d013      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	4a21      	ldr	r2, [pc, #132]	@ (8015ba4 <HAL_TIM_Base_Start+0xe8>)
 8015b1e:	4293      	cmp	r3, r2
 8015b20:	d00e      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	4a20      	ldr	r2, [pc, #128]	@ (8015ba8 <HAL_TIM_Base_Start+0xec>)
 8015b28:	4293      	cmp	r3, r2
 8015b2a:	d009      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	4a1e      	ldr	r2, [pc, #120]	@ (8015bac <HAL_TIM_Base_Start+0xf0>)
 8015b32:	4293      	cmp	r3, r2
 8015b34:	d004      	beq.n	8015b40 <HAL_TIM_Base_Start+0x84>
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8015bb0 <HAL_TIM_Base_Start+0xf4>)
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d115      	bne.n	8015b6c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	689a      	ldr	r2, [r3, #8]
 8015b46:	4b1b      	ldr	r3, [pc, #108]	@ (8015bb4 <HAL_TIM_Base_Start+0xf8>)
 8015b48:	4013      	ands	r3, r2
 8015b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	2b06      	cmp	r3, #6
 8015b50:	d015      	beq.n	8015b7e <HAL_TIM_Base_Start+0xc2>
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015b58:	d011      	beq.n	8015b7e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	f042 0201 	orr.w	r2, r2, #1
 8015b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b6a:	e008      	b.n	8015b7e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	681a      	ldr	r2, [r3, #0]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	f042 0201 	orr.w	r2, r2, #1
 8015b7a:	601a      	str	r2, [r3, #0]
 8015b7c:	e000      	b.n	8015b80 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015b80:	2300      	movs	r3, #0
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3714      	adds	r7, #20
 8015b86:	46bd      	mov	sp, r7
 8015b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop
 8015b90:	40010000 	.word	0x40010000
 8015b94:	40000400 	.word	0x40000400
 8015b98:	40000800 	.word	0x40000800
 8015b9c:	40000c00 	.word	0x40000c00
 8015ba0:	40010400 	.word	0x40010400
 8015ba4:	40001800 	.word	0x40001800
 8015ba8:	40014000 	.word	0x40014000
 8015bac:	4000e000 	.word	0x4000e000
 8015bb0:	4000e400 	.word	0x4000e400
 8015bb4:	00010007 	.word	0x00010007

08015bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015bb8:	b480      	push	{r7}
 8015bba:	b085      	sub	sp, #20
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	2b01      	cmp	r3, #1
 8015bca:	d001      	beq.n	8015bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015bcc:	2301      	movs	r3, #1
 8015bce:	e05e      	b.n	8015c8e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2202      	movs	r2, #2
 8015bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	68da      	ldr	r2, [r3, #12]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	f042 0201 	orr.w	r2, r2, #1
 8015be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	4a2b      	ldr	r2, [pc, #172]	@ (8015c9c <HAL_TIM_Base_Start_IT+0xe4>)
 8015bee:	4293      	cmp	r3, r2
 8015bf0:	d02c      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015bfa:	d027      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	4a27      	ldr	r2, [pc, #156]	@ (8015ca0 <HAL_TIM_Base_Start_IT+0xe8>)
 8015c02:	4293      	cmp	r3, r2
 8015c04:	d022      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a26      	ldr	r2, [pc, #152]	@ (8015ca4 <HAL_TIM_Base_Start_IT+0xec>)
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	d01d      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	4a24      	ldr	r2, [pc, #144]	@ (8015ca8 <HAL_TIM_Base_Start_IT+0xf0>)
 8015c16:	4293      	cmp	r3, r2
 8015c18:	d018      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	4a23      	ldr	r2, [pc, #140]	@ (8015cac <HAL_TIM_Base_Start_IT+0xf4>)
 8015c20:	4293      	cmp	r3, r2
 8015c22:	d013      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	4a21      	ldr	r2, [pc, #132]	@ (8015cb0 <HAL_TIM_Base_Start_IT+0xf8>)
 8015c2a:	4293      	cmp	r3, r2
 8015c2c:	d00e      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	4a20      	ldr	r2, [pc, #128]	@ (8015cb4 <HAL_TIM_Base_Start_IT+0xfc>)
 8015c34:	4293      	cmp	r3, r2
 8015c36:	d009      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8015cb8 <HAL_TIM_Base_Start_IT+0x100>)
 8015c3e:	4293      	cmp	r3, r2
 8015c40:	d004      	beq.n	8015c4c <HAL_TIM_Base_Start_IT+0x94>
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	4a1d      	ldr	r2, [pc, #116]	@ (8015cbc <HAL_TIM_Base_Start_IT+0x104>)
 8015c48:	4293      	cmp	r3, r2
 8015c4a:	d115      	bne.n	8015c78 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	689a      	ldr	r2, [r3, #8]
 8015c52:	4b1b      	ldr	r3, [pc, #108]	@ (8015cc0 <HAL_TIM_Base_Start_IT+0x108>)
 8015c54:	4013      	ands	r3, r2
 8015c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	2b06      	cmp	r3, #6
 8015c5c:	d015      	beq.n	8015c8a <HAL_TIM_Base_Start_IT+0xd2>
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015c64:	d011      	beq.n	8015c8a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	681a      	ldr	r2, [r3, #0]
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	f042 0201 	orr.w	r2, r2, #1
 8015c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c76:	e008      	b.n	8015c8a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	f042 0201 	orr.w	r2, r2, #1
 8015c86:	601a      	str	r2, [r3, #0]
 8015c88:	e000      	b.n	8015c8c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015c8c:	2300      	movs	r3, #0
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3714      	adds	r7, #20
 8015c92:	46bd      	mov	sp, r7
 8015c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop
 8015c9c:	40010000 	.word	0x40010000
 8015ca0:	40000400 	.word	0x40000400
 8015ca4:	40000800 	.word	0x40000800
 8015ca8:	40000c00 	.word	0x40000c00
 8015cac:	40010400 	.word	0x40010400
 8015cb0:	40001800 	.word	0x40001800
 8015cb4:	40014000 	.word	0x40014000
 8015cb8:	4000e000 	.word	0x4000e000
 8015cbc:	4000e400 	.word	0x4000e400
 8015cc0:	00010007 	.word	0x00010007

08015cc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d101      	bne.n	8015cd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	e049      	b.n	8015d6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015cdc:	b2db      	uxtb	r3, r3
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d106      	bne.n	8015cf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f7f2 fae4 	bl	80082b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2202      	movs	r2, #2
 8015cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681a      	ldr	r2, [r3, #0]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	3304      	adds	r3, #4
 8015d00:	4619      	mov	r1, r3
 8015d02:	4610      	mov	r0, r2
 8015d04:	f000 fd80 	bl	8016808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2201      	movs	r2, #1
 8015d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2201      	movs	r2, #1
 8015d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2201      	movs	r2, #1
 8015d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2201      	movs	r2, #1
 8015d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2201      	movs	r2, #1
 8015d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2201      	movs	r2, #1
 8015d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2201      	movs	r2, #1
 8015d54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2201      	movs	r2, #1
 8015d5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2201      	movs	r2, #1
 8015d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015d68:	2300      	movs	r3, #0
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3708      	adds	r7, #8
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
	...

08015d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b084      	sub	sp, #16
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d109      	bne.n	8015d98 <HAL_TIM_PWM_Start+0x24>
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	bf14      	ite	ne
 8015d90:	2301      	movne	r3, #1
 8015d92:	2300      	moveq	r3, #0
 8015d94:	b2db      	uxtb	r3, r3
 8015d96:	e03c      	b.n	8015e12 <HAL_TIM_PWM_Start+0x9e>
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	2b04      	cmp	r3, #4
 8015d9c:	d109      	bne.n	8015db2 <HAL_TIM_PWM_Start+0x3e>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	2b01      	cmp	r3, #1
 8015da8:	bf14      	ite	ne
 8015daa:	2301      	movne	r3, #1
 8015dac:	2300      	moveq	r3, #0
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	e02f      	b.n	8015e12 <HAL_TIM_PWM_Start+0x9e>
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	2b08      	cmp	r3, #8
 8015db6:	d109      	bne.n	8015dcc <HAL_TIM_PWM_Start+0x58>
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015dbe:	b2db      	uxtb	r3, r3
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	bf14      	ite	ne
 8015dc4:	2301      	movne	r3, #1
 8015dc6:	2300      	moveq	r3, #0
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	e022      	b.n	8015e12 <HAL_TIM_PWM_Start+0x9e>
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	2b0c      	cmp	r3, #12
 8015dd0:	d109      	bne.n	8015de6 <HAL_TIM_PWM_Start+0x72>
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015dd8:	b2db      	uxtb	r3, r3
 8015dda:	2b01      	cmp	r3, #1
 8015ddc:	bf14      	ite	ne
 8015dde:	2301      	movne	r3, #1
 8015de0:	2300      	moveq	r3, #0
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	e015      	b.n	8015e12 <HAL_TIM_PWM_Start+0x9e>
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	2b10      	cmp	r3, #16
 8015dea:	d109      	bne.n	8015e00 <HAL_TIM_PWM_Start+0x8c>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	2b01      	cmp	r3, #1
 8015df6:	bf14      	ite	ne
 8015df8:	2301      	movne	r3, #1
 8015dfa:	2300      	moveq	r3, #0
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	e008      	b.n	8015e12 <HAL_TIM_PWM_Start+0x9e>
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	2b01      	cmp	r3, #1
 8015e0a:	bf14      	ite	ne
 8015e0c:	2301      	movne	r3, #1
 8015e0e:	2300      	moveq	r3, #0
 8015e10:	b2db      	uxtb	r3, r3
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d001      	beq.n	8015e1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8015e16:	2301      	movs	r3, #1
 8015e18:	e0ab      	b.n	8015f72 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d104      	bne.n	8015e2a <HAL_TIM_PWM_Start+0xb6>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2202      	movs	r2, #2
 8015e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015e28:	e023      	b.n	8015e72 <HAL_TIM_PWM_Start+0xfe>
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	2b04      	cmp	r3, #4
 8015e2e:	d104      	bne.n	8015e3a <HAL_TIM_PWM_Start+0xc6>
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2202      	movs	r2, #2
 8015e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015e38:	e01b      	b.n	8015e72 <HAL_TIM_PWM_Start+0xfe>
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	2b08      	cmp	r3, #8
 8015e3e:	d104      	bne.n	8015e4a <HAL_TIM_PWM_Start+0xd6>
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	2202      	movs	r2, #2
 8015e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015e48:	e013      	b.n	8015e72 <HAL_TIM_PWM_Start+0xfe>
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	2b0c      	cmp	r3, #12
 8015e4e:	d104      	bne.n	8015e5a <HAL_TIM_PWM_Start+0xe6>
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2202      	movs	r2, #2
 8015e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015e58:	e00b      	b.n	8015e72 <HAL_TIM_PWM_Start+0xfe>
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	2b10      	cmp	r3, #16
 8015e5e:	d104      	bne.n	8015e6a <HAL_TIM_PWM_Start+0xf6>
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2202      	movs	r2, #2
 8015e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015e68:	e003      	b.n	8015e72 <HAL_TIM_PWM_Start+0xfe>
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2202      	movs	r2, #2
 8015e6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	2201      	movs	r2, #1
 8015e78:	6839      	ldr	r1, [r7, #0]
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f001 fa1a 	bl	80172b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	4a3d      	ldr	r2, [pc, #244]	@ (8015f7c <HAL_TIM_PWM_Start+0x208>)
 8015e86:	4293      	cmp	r3, r2
 8015e88:	d013      	beq.n	8015eb2 <HAL_TIM_PWM_Start+0x13e>
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	4a3c      	ldr	r2, [pc, #240]	@ (8015f80 <HAL_TIM_PWM_Start+0x20c>)
 8015e90:	4293      	cmp	r3, r2
 8015e92:	d00e      	beq.n	8015eb2 <HAL_TIM_PWM_Start+0x13e>
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	4a3a      	ldr	r2, [pc, #232]	@ (8015f84 <HAL_TIM_PWM_Start+0x210>)
 8015e9a:	4293      	cmp	r3, r2
 8015e9c:	d009      	beq.n	8015eb2 <HAL_TIM_PWM_Start+0x13e>
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	4a39      	ldr	r2, [pc, #228]	@ (8015f88 <HAL_TIM_PWM_Start+0x214>)
 8015ea4:	4293      	cmp	r3, r2
 8015ea6:	d004      	beq.n	8015eb2 <HAL_TIM_PWM_Start+0x13e>
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	4a37      	ldr	r2, [pc, #220]	@ (8015f8c <HAL_TIM_PWM_Start+0x218>)
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	d101      	bne.n	8015eb6 <HAL_TIM_PWM_Start+0x142>
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	e000      	b.n	8015eb8 <HAL_TIM_PWM_Start+0x144>
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d007      	beq.n	8015ecc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015eca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8015f7c <HAL_TIM_PWM_Start+0x208>)
 8015ed2:	4293      	cmp	r3, r2
 8015ed4:	d02c      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015ede:	d027      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8015f90 <HAL_TIM_PWM_Start+0x21c>)
 8015ee6:	4293      	cmp	r3, r2
 8015ee8:	d022      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	4a29      	ldr	r2, [pc, #164]	@ (8015f94 <HAL_TIM_PWM_Start+0x220>)
 8015ef0:	4293      	cmp	r3, r2
 8015ef2:	d01d      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	4a27      	ldr	r2, [pc, #156]	@ (8015f98 <HAL_TIM_PWM_Start+0x224>)
 8015efa:	4293      	cmp	r3, r2
 8015efc:	d018      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	4a1f      	ldr	r2, [pc, #124]	@ (8015f80 <HAL_TIM_PWM_Start+0x20c>)
 8015f04:	4293      	cmp	r3, r2
 8015f06:	d013      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	4a23      	ldr	r2, [pc, #140]	@ (8015f9c <HAL_TIM_PWM_Start+0x228>)
 8015f0e:	4293      	cmp	r3, r2
 8015f10:	d00e      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	4a1b      	ldr	r2, [pc, #108]	@ (8015f84 <HAL_TIM_PWM_Start+0x210>)
 8015f18:	4293      	cmp	r3, r2
 8015f1a:	d009      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4a1f      	ldr	r2, [pc, #124]	@ (8015fa0 <HAL_TIM_PWM_Start+0x22c>)
 8015f22:	4293      	cmp	r3, r2
 8015f24:	d004      	beq.n	8015f30 <HAL_TIM_PWM_Start+0x1bc>
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8015fa4 <HAL_TIM_PWM_Start+0x230>)
 8015f2c:	4293      	cmp	r3, r2
 8015f2e:	d115      	bne.n	8015f5c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	689a      	ldr	r2, [r3, #8]
 8015f36:	4b1c      	ldr	r3, [pc, #112]	@ (8015fa8 <HAL_TIM_PWM_Start+0x234>)
 8015f38:	4013      	ands	r3, r2
 8015f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	2b06      	cmp	r3, #6
 8015f40:	d015      	beq.n	8015f6e <HAL_TIM_PWM_Start+0x1fa>
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f48:	d011      	beq.n	8015f6e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	f042 0201 	orr.w	r2, r2, #1
 8015f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f5a:	e008      	b.n	8015f6e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	f042 0201 	orr.w	r2, r2, #1
 8015f6a:	601a      	str	r2, [r3, #0]
 8015f6c:	e000      	b.n	8015f70 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015f70:	2300      	movs	r3, #0
}
 8015f72:	4618      	mov	r0, r3
 8015f74:	3710      	adds	r7, #16
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	40010000 	.word	0x40010000
 8015f80:	40010400 	.word	0x40010400
 8015f84:	40014000 	.word	0x40014000
 8015f88:	40014400 	.word	0x40014400
 8015f8c:	40014800 	.word	0x40014800
 8015f90:	40000400 	.word	0x40000400
 8015f94:	40000800 	.word	0x40000800
 8015f98:	40000c00 	.word	0x40000c00
 8015f9c:	40001800 	.word	0x40001800
 8015fa0:	4000e000 	.word	0x4000e000
 8015fa4:	4000e400 	.word	0x4000e400
 8015fa8:	00010007 	.word	0x00010007

08015fac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d101      	bne.n	8015fbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8015fba:	2301      	movs	r3, #1
 8015fbc:	e049      	b.n	8016052 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d106      	bne.n	8015fd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f7f2 f9aa 	bl	800832c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2202      	movs	r2, #2
 8015fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681a      	ldr	r2, [r3, #0]
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	3304      	adds	r3, #4
 8015fe8:	4619      	mov	r1, r3
 8015fea:	4610      	mov	r0, r2
 8015fec:	f000 fc0c 	bl	8016808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2201      	movs	r2, #1
 8015ff4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2201      	movs	r2, #1
 8016004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2201      	movs	r2, #1
 801600c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2201      	movs	r2, #1
 8016014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2201      	movs	r2, #1
 801601c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2201      	movs	r2, #1
 8016024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2201      	movs	r2, #1
 801602c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2201      	movs	r2, #1
 8016034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2201      	movs	r2, #1
 801603c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	2201      	movs	r2, #1
 8016044:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2201      	movs	r2, #1
 801604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016050:	2300      	movs	r3, #0
}
 8016052:	4618      	mov	r0, r3
 8016054:	3708      	adds	r7, #8
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}

0801605a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801605a:	b580      	push	{r7, lr}
 801605c:	b084      	sub	sp, #16
 801605e:	af00      	add	r7, sp, #0
 8016060:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	68db      	ldr	r3, [r3, #12]
 8016068:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	691b      	ldr	r3, [r3, #16]
 8016070:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	f003 0302 	and.w	r3, r3, #2
 8016078:	2b00      	cmp	r3, #0
 801607a:	d020      	beq.n	80160be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f003 0302 	and.w	r3, r3, #2
 8016082:	2b00      	cmp	r3, #0
 8016084:	d01b      	beq.n	80160be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	f06f 0202 	mvn.w	r2, #2
 801608e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2201      	movs	r2, #1
 8016094:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	699b      	ldr	r3, [r3, #24]
 801609c:	f003 0303 	and.w	r3, r3, #3
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d003      	beq.n	80160ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f000 fb91 	bl	80167cc <HAL_TIM_IC_CaptureCallback>
 80160aa:	e005      	b.n	80160b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f000 fb83 	bl	80167b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f000 fb94 	bl	80167e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2200      	movs	r2, #0
 80160bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	f003 0304 	and.w	r3, r3, #4
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d020      	beq.n	801610a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	f003 0304 	and.w	r3, r3, #4
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d01b      	beq.n	801610a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	f06f 0204 	mvn.w	r2, #4
 80160da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2202      	movs	r2, #2
 80160e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	699b      	ldr	r3, [r3, #24]
 80160e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d003      	beq.n	80160f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f000 fb6b 	bl	80167cc <HAL_TIM_IC_CaptureCallback>
 80160f6:	e005      	b.n	8016104 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f000 fb5d 	bl	80167b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f000 fb6e 	bl	80167e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2200      	movs	r2, #0
 8016108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	f003 0308 	and.w	r3, r3, #8
 8016110:	2b00      	cmp	r3, #0
 8016112:	d020      	beq.n	8016156 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	f003 0308 	and.w	r3, r3, #8
 801611a:	2b00      	cmp	r3, #0
 801611c:	d01b      	beq.n	8016156 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	f06f 0208 	mvn.w	r2, #8
 8016126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2204      	movs	r2, #4
 801612c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	69db      	ldr	r3, [r3, #28]
 8016134:	f003 0303 	and.w	r3, r3, #3
 8016138:	2b00      	cmp	r3, #0
 801613a:	d003      	beq.n	8016144 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f000 fb45 	bl	80167cc <HAL_TIM_IC_CaptureCallback>
 8016142:	e005      	b.n	8016150 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 fb37 	bl	80167b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 fb48 	bl	80167e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	2200      	movs	r2, #0
 8016154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	f003 0310 	and.w	r3, r3, #16
 801615c:	2b00      	cmp	r3, #0
 801615e:	d020      	beq.n	80161a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	f003 0310 	and.w	r3, r3, #16
 8016166:	2b00      	cmp	r3, #0
 8016168:	d01b      	beq.n	80161a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	f06f 0210 	mvn.w	r2, #16
 8016172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2208      	movs	r2, #8
 8016178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	69db      	ldr	r3, [r3, #28]
 8016180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016184:	2b00      	cmp	r3, #0
 8016186:	d003      	beq.n	8016190 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f000 fb1f 	bl	80167cc <HAL_TIM_IC_CaptureCallback>
 801618e:	e005      	b.n	801619c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f000 fb11 	bl	80167b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f000 fb22 	bl	80167e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2200      	movs	r2, #0
 80161a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80161a2:	68bb      	ldr	r3, [r7, #8]
 80161a4:	f003 0301 	and.w	r3, r3, #1
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d00c      	beq.n	80161c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	f003 0301 	and.w	r3, r3, #1
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d007      	beq.n	80161c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	f06f 0201 	mvn.w	r2, #1
 80161be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80161c0:	6878      	ldr	r0, [r7, #4]
 80161c2:	f7ef fc0b 	bl	80059dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d104      	bne.n	80161da <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d00c      	beq.n	80161f4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d007      	beq.n	80161f4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80161ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f001 f9b8 	bl	8017564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d00c      	beq.n	8016218 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016204:	2b00      	cmp	r3, #0
 8016206:	d007      	beq.n	8016218 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	f001 f9b0 	bl	8017578 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801621e:	2b00      	cmp	r3, #0
 8016220:	d00c      	beq.n	801623c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016228:	2b00      	cmp	r3, #0
 801622a:	d007      	beq.n	801623c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f000 fadc 	bl	80167f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	f003 0320 	and.w	r3, r3, #32
 8016242:	2b00      	cmp	r3, #0
 8016244:	d00c      	beq.n	8016260 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	f003 0320 	and.w	r3, r3, #32
 801624c:	2b00      	cmp	r3, #0
 801624e:	d007      	beq.n	8016260 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f06f 0220 	mvn.w	r2, #32
 8016258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f001 f978 	bl	8017550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016260:	bf00      	nop
 8016262:	3710      	adds	r7, #16
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b086      	sub	sp, #24
 801626c:	af00      	add	r7, sp, #0
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016274:	2300      	movs	r3, #0
 8016276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801627e:	2b01      	cmp	r3, #1
 8016280:	d101      	bne.n	8016286 <HAL_TIM_IC_ConfigChannel+0x1e>
 8016282:	2302      	movs	r3, #2
 8016284:	e088      	b.n	8016398 <HAL_TIM_IC_ConfigChannel+0x130>
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2201      	movs	r2, #1
 801628a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d11b      	bne.n	80162cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80162a4:	f000 fe32 	bl	8016f0c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	699a      	ldr	r2, [r3, #24]
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	f022 020c 	bic.w	r2, r2, #12
 80162b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	6999      	ldr	r1, [r3, #24]
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	689a      	ldr	r2, [r3, #8]
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	430a      	orrs	r2, r1
 80162c8:	619a      	str	r2, [r3, #24]
 80162ca:	e060      	b.n	801638e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	2b04      	cmp	r3, #4
 80162d0:	d11c      	bne.n	801630c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80162e2:	f000 fec2 	bl	801706a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	699a      	ldr	r2, [r3, #24]
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80162f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	6999      	ldr	r1, [r3, #24]
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	689b      	ldr	r3, [r3, #8]
 8016300:	021a      	lsls	r2, r3, #8
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	430a      	orrs	r2, r1
 8016308:	619a      	str	r2, [r3, #24]
 801630a:	e040      	b.n	801638e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2b08      	cmp	r3, #8
 8016310:	d11b      	bne.n	801634a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016316:	68bb      	ldr	r3, [r7, #8]
 8016318:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016322:	f000 ff0f 	bl	8017144 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	69da      	ldr	r2, [r3, #28]
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	f022 020c 	bic.w	r2, r2, #12
 8016334:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	69d9      	ldr	r1, [r3, #28]
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	689a      	ldr	r2, [r3, #8]
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	430a      	orrs	r2, r1
 8016346:	61da      	str	r2, [r3, #28]
 8016348:	e021      	b.n	801638e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	2b0c      	cmp	r3, #12
 801634e:	d11c      	bne.n	801638a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016360:	f000 ff2c 	bl	80171bc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	69da      	ldr	r2, [r3, #28]
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016372:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	69d9      	ldr	r1, [r3, #28]
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	689b      	ldr	r3, [r3, #8]
 801637e:	021a      	lsls	r2, r3, #8
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	430a      	orrs	r2, r1
 8016386:	61da      	str	r2, [r3, #28]
 8016388:	e001      	b.n	801638e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801638a:	2301      	movs	r3, #1
 801638c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	2200      	movs	r2, #0
 8016392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016396:	7dfb      	ldrb	r3, [r7, #23]
}
 8016398:	4618      	mov	r0, r3
 801639a:	3718      	adds	r7, #24
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}

080163a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b086      	sub	sp, #24
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	60f8      	str	r0, [r7, #12]
 80163a8:	60b9      	str	r1, [r7, #8]
 80163aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80163ac:	2300      	movs	r3, #0
 80163ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80163b6:	2b01      	cmp	r3, #1
 80163b8:	d101      	bne.n	80163be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80163ba:	2302      	movs	r3, #2
 80163bc:	e0ff      	b.n	80165be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	2201      	movs	r2, #1
 80163c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	2b14      	cmp	r3, #20
 80163ca:	f200 80f0 	bhi.w	80165ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80163ce:	a201      	add	r2, pc, #4	@ (adr r2, 80163d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80163d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163d4:	08016429 	.word	0x08016429
 80163d8:	080165af 	.word	0x080165af
 80163dc:	080165af 	.word	0x080165af
 80163e0:	080165af 	.word	0x080165af
 80163e4:	08016469 	.word	0x08016469
 80163e8:	080165af 	.word	0x080165af
 80163ec:	080165af 	.word	0x080165af
 80163f0:	080165af 	.word	0x080165af
 80163f4:	080164ab 	.word	0x080164ab
 80163f8:	080165af 	.word	0x080165af
 80163fc:	080165af 	.word	0x080165af
 8016400:	080165af 	.word	0x080165af
 8016404:	080164eb 	.word	0x080164eb
 8016408:	080165af 	.word	0x080165af
 801640c:	080165af 	.word	0x080165af
 8016410:	080165af 	.word	0x080165af
 8016414:	0801652d 	.word	0x0801652d
 8016418:	080165af 	.word	0x080165af
 801641c:	080165af 	.word	0x080165af
 8016420:	080165af 	.word	0x080165af
 8016424:	0801656d 	.word	0x0801656d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	68b9      	ldr	r1, [r7, #8]
 801642e:	4618      	mov	r0, r3
 8016430:	f000 fa96 	bl	8016960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	699a      	ldr	r2, [r3, #24]
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	f042 0208 	orr.w	r2, r2, #8
 8016442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	699a      	ldr	r2, [r3, #24]
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	f022 0204 	bic.w	r2, r2, #4
 8016452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	6999      	ldr	r1, [r3, #24]
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	691a      	ldr	r2, [r3, #16]
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	430a      	orrs	r2, r1
 8016464:	619a      	str	r2, [r3, #24]
      break;
 8016466:	e0a5      	b.n	80165b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	68b9      	ldr	r1, [r7, #8]
 801646e:	4618      	mov	r0, r3
 8016470:	f000 fb06 	bl	8016a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	699a      	ldr	r2, [r3, #24]
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	699a      	ldr	r2, [r3, #24]
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	6999      	ldr	r1, [r3, #24]
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	691b      	ldr	r3, [r3, #16]
 801649e:	021a      	lsls	r2, r3, #8
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	430a      	orrs	r2, r1
 80164a6:	619a      	str	r2, [r3, #24]
      break;
 80164a8:	e084      	b.n	80165b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	68b9      	ldr	r1, [r7, #8]
 80164b0:	4618      	mov	r0, r3
 80164b2:	f000 fb6f 	bl	8016b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	69da      	ldr	r2, [r3, #28]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	f042 0208 	orr.w	r2, r2, #8
 80164c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	69da      	ldr	r2, [r3, #28]
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	f022 0204 	bic.w	r2, r2, #4
 80164d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	69d9      	ldr	r1, [r3, #28]
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	691a      	ldr	r2, [r3, #16]
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	430a      	orrs	r2, r1
 80164e6:	61da      	str	r2, [r3, #28]
      break;
 80164e8:	e064      	b.n	80165b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	68b9      	ldr	r1, [r7, #8]
 80164f0:	4618      	mov	r0, r3
 80164f2:	f000 fbd7 	bl	8016ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	69da      	ldr	r2, [r3, #28]
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	69da      	ldr	r2, [r3, #28]
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	69d9      	ldr	r1, [r3, #28]
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	691b      	ldr	r3, [r3, #16]
 8016520:	021a      	lsls	r2, r3, #8
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	430a      	orrs	r2, r1
 8016528:	61da      	str	r2, [r3, #28]
      break;
 801652a:	e043      	b.n	80165b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	68b9      	ldr	r1, [r7, #8]
 8016532:	4618      	mov	r0, r3
 8016534:	f000 fc20 	bl	8016d78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	f042 0208 	orr.w	r2, r2, #8
 8016546:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	f022 0204 	bic.w	r2, r2, #4
 8016556:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	691a      	ldr	r2, [r3, #16]
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	430a      	orrs	r2, r1
 8016568:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801656a:	e023      	b.n	80165b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	68b9      	ldr	r1, [r7, #8]
 8016572:	4618      	mov	r0, r3
 8016574:	f000 fc64 	bl	8016e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016586:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016596:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801659e:	68bb      	ldr	r3, [r7, #8]
 80165a0:	691b      	ldr	r3, [r3, #16]
 80165a2:	021a      	lsls	r2, r3, #8
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	430a      	orrs	r2, r1
 80165aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80165ac:	e002      	b.n	80165b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80165ae:	2301      	movs	r3, #1
 80165b0:	75fb      	strb	r3, [r7, #23]
      break;
 80165b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2200      	movs	r2, #0
 80165b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80165bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80165be:	4618      	mov	r0, r3
 80165c0:	3718      	adds	r7, #24
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}
 80165c6:	bf00      	nop

080165c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b084      	sub	sp, #16
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80165d2:	2300      	movs	r3, #0
 80165d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80165dc:	2b01      	cmp	r3, #1
 80165de:	d101      	bne.n	80165e4 <HAL_TIM_ConfigClockSource+0x1c>
 80165e0:	2302      	movs	r3, #2
 80165e2:	e0dc      	b.n	801679e <HAL_TIM_ConfigClockSource+0x1d6>
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2201      	movs	r2, #1
 80165e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2202      	movs	r2, #2
 80165f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	689b      	ldr	r3, [r3, #8]
 80165fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80165fc:	68ba      	ldr	r2, [r7, #8]
 80165fe:	4b6a      	ldr	r3, [pc, #424]	@ (80167a8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016600:	4013      	ands	r3, r2
 8016602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801660a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	68ba      	ldr	r2, [r7, #8]
 8016612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	4a64      	ldr	r2, [pc, #400]	@ (80167ac <HAL_TIM_ConfigClockSource+0x1e4>)
 801661a:	4293      	cmp	r3, r2
 801661c:	f000 80a9 	beq.w	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 8016620:	4a62      	ldr	r2, [pc, #392]	@ (80167ac <HAL_TIM_ConfigClockSource+0x1e4>)
 8016622:	4293      	cmp	r3, r2
 8016624:	f200 80ae 	bhi.w	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 8016628:	4a61      	ldr	r2, [pc, #388]	@ (80167b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801662a:	4293      	cmp	r3, r2
 801662c:	f000 80a1 	beq.w	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 8016630:	4a5f      	ldr	r2, [pc, #380]	@ (80167b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016632:	4293      	cmp	r3, r2
 8016634:	f200 80a6 	bhi.w	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 8016638:	4a5e      	ldr	r2, [pc, #376]	@ (80167b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801663a:	4293      	cmp	r3, r2
 801663c:	f000 8099 	beq.w	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 8016640:	4a5c      	ldr	r2, [pc, #368]	@ (80167b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016642:	4293      	cmp	r3, r2
 8016644:	f200 809e 	bhi.w	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 8016648:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801664c:	f000 8091 	beq.w	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 8016650:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016654:	f200 8096 	bhi.w	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 8016658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801665c:	f000 8089 	beq.w	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 8016660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016664:	f200 808e 	bhi.w	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 8016668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801666c:	d03e      	beq.n	80166ec <HAL_TIM_ConfigClockSource+0x124>
 801666e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016672:	f200 8087 	bhi.w	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 8016676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801667a:	f000 8086 	beq.w	801678a <HAL_TIM_ConfigClockSource+0x1c2>
 801667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016682:	d87f      	bhi.n	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 8016684:	2b70      	cmp	r3, #112	@ 0x70
 8016686:	d01a      	beq.n	80166be <HAL_TIM_ConfigClockSource+0xf6>
 8016688:	2b70      	cmp	r3, #112	@ 0x70
 801668a:	d87b      	bhi.n	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 801668c:	2b60      	cmp	r3, #96	@ 0x60
 801668e:	d050      	beq.n	8016732 <HAL_TIM_ConfigClockSource+0x16a>
 8016690:	2b60      	cmp	r3, #96	@ 0x60
 8016692:	d877      	bhi.n	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 8016694:	2b50      	cmp	r3, #80	@ 0x50
 8016696:	d03c      	beq.n	8016712 <HAL_TIM_ConfigClockSource+0x14a>
 8016698:	2b50      	cmp	r3, #80	@ 0x50
 801669a:	d873      	bhi.n	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 801669c:	2b40      	cmp	r3, #64	@ 0x40
 801669e:	d058      	beq.n	8016752 <HAL_TIM_ConfigClockSource+0x18a>
 80166a0:	2b40      	cmp	r3, #64	@ 0x40
 80166a2:	d86f      	bhi.n	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 80166a4:	2b30      	cmp	r3, #48	@ 0x30
 80166a6:	d064      	beq.n	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 80166a8:	2b30      	cmp	r3, #48	@ 0x30
 80166aa:	d86b      	bhi.n	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 80166ac:	2b20      	cmp	r3, #32
 80166ae:	d060      	beq.n	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 80166b0:	2b20      	cmp	r3, #32
 80166b2:	d867      	bhi.n	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d05c      	beq.n	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 80166b8:	2b10      	cmp	r3, #16
 80166ba:	d05a      	beq.n	8016772 <HAL_TIM_ConfigClockSource+0x1aa>
 80166bc:	e062      	b.n	8016784 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80166ce:	f000 fdd1 	bl	8017274 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	689b      	ldr	r3, [r3, #8]
 80166d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80166da:	68bb      	ldr	r3, [r7, #8]
 80166dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80166e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	68ba      	ldr	r2, [r7, #8]
 80166e8:	609a      	str	r2, [r3, #8]
      break;
 80166ea:	e04f      	b.n	801678c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80166fc:	f000 fdba 	bl	8017274 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	689a      	ldr	r2, [r3, #8]
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801670e:	609a      	str	r2, [r3, #8]
      break;
 8016710:	e03c      	b.n	801678c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801671e:	461a      	mov	r2, r3
 8016720:	f000 fc74 	bl	801700c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	2150      	movs	r1, #80	@ 0x50
 801672a:	4618      	mov	r0, r3
 801672c:	f000 fd84 	bl	8017238 <TIM_ITRx_SetConfig>
      break;
 8016730:	e02c      	b.n	801678c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801673e:	461a      	mov	r2, r3
 8016740:	f000 fcd0 	bl	80170e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	2160      	movs	r1, #96	@ 0x60
 801674a:	4618      	mov	r0, r3
 801674c:	f000 fd74 	bl	8017238 <TIM_ITRx_SetConfig>
      break;
 8016750:	e01c      	b.n	801678c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801675e:	461a      	mov	r2, r3
 8016760:	f000 fc54 	bl	801700c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	2140      	movs	r1, #64	@ 0x40
 801676a:	4618      	mov	r0, r3
 801676c:	f000 fd64 	bl	8017238 <TIM_ITRx_SetConfig>
      break;
 8016770:	e00c      	b.n	801678c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681a      	ldr	r2, [r3, #0]
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	4619      	mov	r1, r3
 801677c:	4610      	mov	r0, r2
 801677e:	f000 fd5b 	bl	8017238 <TIM_ITRx_SetConfig>
      break;
 8016782:	e003      	b.n	801678c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016784:	2301      	movs	r3, #1
 8016786:	73fb      	strb	r3, [r7, #15]
      break;
 8016788:	e000      	b.n	801678c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801678a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2201      	movs	r2, #1
 8016790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2200      	movs	r2, #0
 8016798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801679c:	7bfb      	ldrb	r3, [r7, #15]
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3710      	adds	r7, #16
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}
 80167a6:	bf00      	nop
 80167a8:	ffceff88 	.word	0xffceff88
 80167ac:	00100040 	.word	0x00100040
 80167b0:	00100030 	.word	0x00100030
 80167b4:	00100020 	.word	0x00100020

080167b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80167b8:	b480      	push	{r7}
 80167ba:	b083      	sub	sp, #12
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80167c0:	bf00      	nop
 80167c2:	370c      	adds	r7, #12
 80167c4:	46bd      	mov	sp, r7
 80167c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ca:	4770      	bx	lr

080167cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80167cc:	b480      	push	{r7}
 80167ce:	b083      	sub	sp, #12
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80167d4:	bf00      	nop
 80167d6:	370c      	adds	r7, #12
 80167d8:	46bd      	mov	sp, r7
 80167da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167de:	4770      	bx	lr

080167e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80167e0:	b480      	push	{r7}
 80167e2:	b083      	sub	sp, #12
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80167e8:	bf00      	nop
 80167ea:	370c      	adds	r7, #12
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr

080167f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80167f4:	b480      	push	{r7}
 80167f6:	b083      	sub	sp, #12
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80167fc:	bf00      	nop
 80167fe:	370c      	adds	r7, #12
 8016800:	46bd      	mov	sp, r7
 8016802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016806:	4770      	bx	lr

08016808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016808:	b480      	push	{r7}
 801680a:	b085      	sub	sp, #20
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	4a47      	ldr	r2, [pc, #284]	@ (8016938 <TIM_Base_SetConfig+0x130>)
 801681c:	4293      	cmp	r3, r2
 801681e:	d013      	beq.n	8016848 <TIM_Base_SetConfig+0x40>
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016826:	d00f      	beq.n	8016848 <TIM_Base_SetConfig+0x40>
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	4a44      	ldr	r2, [pc, #272]	@ (801693c <TIM_Base_SetConfig+0x134>)
 801682c:	4293      	cmp	r3, r2
 801682e:	d00b      	beq.n	8016848 <TIM_Base_SetConfig+0x40>
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	4a43      	ldr	r2, [pc, #268]	@ (8016940 <TIM_Base_SetConfig+0x138>)
 8016834:	4293      	cmp	r3, r2
 8016836:	d007      	beq.n	8016848 <TIM_Base_SetConfig+0x40>
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	4a42      	ldr	r2, [pc, #264]	@ (8016944 <TIM_Base_SetConfig+0x13c>)
 801683c:	4293      	cmp	r3, r2
 801683e:	d003      	beq.n	8016848 <TIM_Base_SetConfig+0x40>
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	4a41      	ldr	r2, [pc, #260]	@ (8016948 <TIM_Base_SetConfig+0x140>)
 8016844:	4293      	cmp	r3, r2
 8016846:	d108      	bne.n	801685a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801684e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	68fa      	ldr	r2, [r7, #12]
 8016856:	4313      	orrs	r3, r2
 8016858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	4a36      	ldr	r2, [pc, #216]	@ (8016938 <TIM_Base_SetConfig+0x130>)
 801685e:	4293      	cmp	r3, r2
 8016860:	d027      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016868:	d023      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	4a33      	ldr	r2, [pc, #204]	@ (801693c <TIM_Base_SetConfig+0x134>)
 801686e:	4293      	cmp	r3, r2
 8016870:	d01f      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	4a32      	ldr	r2, [pc, #200]	@ (8016940 <TIM_Base_SetConfig+0x138>)
 8016876:	4293      	cmp	r3, r2
 8016878:	d01b      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	4a31      	ldr	r2, [pc, #196]	@ (8016944 <TIM_Base_SetConfig+0x13c>)
 801687e:	4293      	cmp	r3, r2
 8016880:	d017      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	4a30      	ldr	r2, [pc, #192]	@ (8016948 <TIM_Base_SetConfig+0x140>)
 8016886:	4293      	cmp	r3, r2
 8016888:	d013      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	4a2f      	ldr	r2, [pc, #188]	@ (801694c <TIM_Base_SetConfig+0x144>)
 801688e:	4293      	cmp	r3, r2
 8016890:	d00f      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	4a2e      	ldr	r2, [pc, #184]	@ (8016950 <TIM_Base_SetConfig+0x148>)
 8016896:	4293      	cmp	r3, r2
 8016898:	d00b      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	4a2d      	ldr	r2, [pc, #180]	@ (8016954 <TIM_Base_SetConfig+0x14c>)
 801689e:	4293      	cmp	r3, r2
 80168a0:	d007      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	4a2c      	ldr	r2, [pc, #176]	@ (8016958 <TIM_Base_SetConfig+0x150>)
 80168a6:	4293      	cmp	r3, r2
 80168a8:	d003      	beq.n	80168b2 <TIM_Base_SetConfig+0xaa>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	4a2b      	ldr	r2, [pc, #172]	@ (801695c <TIM_Base_SetConfig+0x154>)
 80168ae:	4293      	cmp	r3, r2
 80168b0:	d108      	bne.n	80168c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80168b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	68db      	ldr	r3, [r3, #12]
 80168be:	68fa      	ldr	r2, [r7, #12]
 80168c0:	4313      	orrs	r3, r2
 80168c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	695b      	ldr	r3, [r3, #20]
 80168ce:	4313      	orrs	r3, r2
 80168d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	689a      	ldr	r2, [r3, #8]
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	681a      	ldr	r2, [r3, #0]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	4a14      	ldr	r2, [pc, #80]	@ (8016938 <TIM_Base_SetConfig+0x130>)
 80168e6:	4293      	cmp	r3, r2
 80168e8:	d00f      	beq.n	801690a <TIM_Base_SetConfig+0x102>
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	4a16      	ldr	r2, [pc, #88]	@ (8016948 <TIM_Base_SetConfig+0x140>)
 80168ee:	4293      	cmp	r3, r2
 80168f0:	d00b      	beq.n	801690a <TIM_Base_SetConfig+0x102>
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	4a15      	ldr	r2, [pc, #84]	@ (801694c <TIM_Base_SetConfig+0x144>)
 80168f6:	4293      	cmp	r3, r2
 80168f8:	d007      	beq.n	801690a <TIM_Base_SetConfig+0x102>
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	4a14      	ldr	r2, [pc, #80]	@ (8016950 <TIM_Base_SetConfig+0x148>)
 80168fe:	4293      	cmp	r3, r2
 8016900:	d003      	beq.n	801690a <TIM_Base_SetConfig+0x102>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	4a13      	ldr	r2, [pc, #76]	@ (8016954 <TIM_Base_SetConfig+0x14c>)
 8016906:	4293      	cmp	r3, r2
 8016908:	d103      	bne.n	8016912 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	691a      	ldr	r2, [r3, #16]
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f043 0204 	orr.w	r2, r3, #4
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2201      	movs	r2, #1
 8016922:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	68fa      	ldr	r2, [r7, #12]
 8016928:	601a      	str	r2, [r3, #0]
}
 801692a:	bf00      	nop
 801692c:	3714      	adds	r7, #20
 801692e:	46bd      	mov	sp, r7
 8016930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop
 8016938:	40010000 	.word	0x40010000
 801693c:	40000400 	.word	0x40000400
 8016940:	40000800 	.word	0x40000800
 8016944:	40000c00 	.word	0x40000c00
 8016948:	40010400 	.word	0x40010400
 801694c:	40014000 	.word	0x40014000
 8016950:	40014400 	.word	0x40014400
 8016954:	40014800 	.word	0x40014800
 8016958:	4000e000 	.word	0x4000e000
 801695c:	4000e400 	.word	0x4000e400

08016960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016960:	b480      	push	{r7}
 8016962:	b087      	sub	sp, #28
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
 8016968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6a1b      	ldr	r3, [r3, #32]
 801696e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6a1b      	ldr	r3, [r3, #32]
 8016974:	f023 0201 	bic.w	r2, r3, #1
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	699b      	ldr	r3, [r3, #24]
 8016986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016988:	68fa      	ldr	r2, [r7, #12]
 801698a:	4b37      	ldr	r3, [pc, #220]	@ (8016a68 <TIM_OC1_SetConfig+0x108>)
 801698c:	4013      	ands	r3, r2
 801698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	f023 0303 	bic.w	r3, r3, #3
 8016996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	4313      	orrs	r3, r2
 80169a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	f023 0302 	bic.w	r3, r3, #2
 80169a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	689b      	ldr	r3, [r3, #8]
 80169ae:	697a      	ldr	r2, [r7, #20]
 80169b0:	4313      	orrs	r3, r2
 80169b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	4a2d      	ldr	r2, [pc, #180]	@ (8016a6c <TIM_OC1_SetConfig+0x10c>)
 80169b8:	4293      	cmp	r3, r2
 80169ba:	d00f      	beq.n	80169dc <TIM_OC1_SetConfig+0x7c>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	4a2c      	ldr	r2, [pc, #176]	@ (8016a70 <TIM_OC1_SetConfig+0x110>)
 80169c0:	4293      	cmp	r3, r2
 80169c2:	d00b      	beq.n	80169dc <TIM_OC1_SetConfig+0x7c>
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	4a2b      	ldr	r2, [pc, #172]	@ (8016a74 <TIM_OC1_SetConfig+0x114>)
 80169c8:	4293      	cmp	r3, r2
 80169ca:	d007      	beq.n	80169dc <TIM_OC1_SetConfig+0x7c>
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	4a2a      	ldr	r2, [pc, #168]	@ (8016a78 <TIM_OC1_SetConfig+0x118>)
 80169d0:	4293      	cmp	r3, r2
 80169d2:	d003      	beq.n	80169dc <TIM_OC1_SetConfig+0x7c>
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	4a29      	ldr	r2, [pc, #164]	@ (8016a7c <TIM_OC1_SetConfig+0x11c>)
 80169d8:	4293      	cmp	r3, r2
 80169da:	d10c      	bne.n	80169f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	f023 0308 	bic.w	r3, r3, #8
 80169e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	68db      	ldr	r3, [r3, #12]
 80169e8:	697a      	ldr	r2, [r7, #20]
 80169ea:	4313      	orrs	r3, r2
 80169ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	f023 0304 	bic.w	r3, r3, #4
 80169f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	4a1c      	ldr	r2, [pc, #112]	@ (8016a6c <TIM_OC1_SetConfig+0x10c>)
 80169fa:	4293      	cmp	r3, r2
 80169fc:	d00f      	beq.n	8016a1e <TIM_OC1_SetConfig+0xbe>
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	4a1b      	ldr	r2, [pc, #108]	@ (8016a70 <TIM_OC1_SetConfig+0x110>)
 8016a02:	4293      	cmp	r3, r2
 8016a04:	d00b      	beq.n	8016a1e <TIM_OC1_SetConfig+0xbe>
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	4a1a      	ldr	r2, [pc, #104]	@ (8016a74 <TIM_OC1_SetConfig+0x114>)
 8016a0a:	4293      	cmp	r3, r2
 8016a0c:	d007      	beq.n	8016a1e <TIM_OC1_SetConfig+0xbe>
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	4a19      	ldr	r2, [pc, #100]	@ (8016a78 <TIM_OC1_SetConfig+0x118>)
 8016a12:	4293      	cmp	r3, r2
 8016a14:	d003      	beq.n	8016a1e <TIM_OC1_SetConfig+0xbe>
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	4a18      	ldr	r2, [pc, #96]	@ (8016a7c <TIM_OC1_SetConfig+0x11c>)
 8016a1a:	4293      	cmp	r3, r2
 8016a1c:	d111      	bne.n	8016a42 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	695b      	ldr	r3, [r3, #20]
 8016a32:	693a      	ldr	r2, [r7, #16]
 8016a34:	4313      	orrs	r3, r2
 8016a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	699b      	ldr	r3, [r3, #24]
 8016a3c:	693a      	ldr	r2, [r7, #16]
 8016a3e:	4313      	orrs	r3, r2
 8016a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	693a      	ldr	r2, [r7, #16]
 8016a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	68fa      	ldr	r2, [r7, #12]
 8016a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016a4e:	683b      	ldr	r3, [r7, #0]
 8016a50:	685a      	ldr	r2, [r3, #4]
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	697a      	ldr	r2, [r7, #20]
 8016a5a:	621a      	str	r2, [r3, #32]
}
 8016a5c:	bf00      	nop
 8016a5e:	371c      	adds	r7, #28
 8016a60:	46bd      	mov	sp, r7
 8016a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a66:	4770      	bx	lr
 8016a68:	fffeff8f 	.word	0xfffeff8f
 8016a6c:	40010000 	.word	0x40010000
 8016a70:	40010400 	.word	0x40010400
 8016a74:	40014000 	.word	0x40014000
 8016a78:	40014400 	.word	0x40014400
 8016a7c:	40014800 	.word	0x40014800

08016a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016a80:	b480      	push	{r7}
 8016a82:	b087      	sub	sp, #28
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	6a1b      	ldr	r3, [r3, #32]
 8016a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	6a1b      	ldr	r3, [r3, #32]
 8016a94:	f023 0210 	bic.w	r2, r3, #16
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	699b      	ldr	r3, [r3, #24]
 8016aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016aa8:	68fa      	ldr	r2, [r7, #12]
 8016aaa:	4b34      	ldr	r3, [pc, #208]	@ (8016b7c <TIM_OC2_SetConfig+0xfc>)
 8016aac:	4013      	ands	r3, r2
 8016aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	021b      	lsls	r3, r3, #8
 8016abe:	68fa      	ldr	r2, [r7, #12]
 8016ac0:	4313      	orrs	r3, r2
 8016ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	f023 0320 	bic.w	r3, r3, #32
 8016aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016acc:	683b      	ldr	r3, [r7, #0]
 8016ace:	689b      	ldr	r3, [r3, #8]
 8016ad0:	011b      	lsls	r3, r3, #4
 8016ad2:	697a      	ldr	r2, [r7, #20]
 8016ad4:	4313      	orrs	r3, r2
 8016ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	4a29      	ldr	r2, [pc, #164]	@ (8016b80 <TIM_OC2_SetConfig+0x100>)
 8016adc:	4293      	cmp	r3, r2
 8016ade:	d003      	beq.n	8016ae8 <TIM_OC2_SetConfig+0x68>
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	4a28      	ldr	r2, [pc, #160]	@ (8016b84 <TIM_OC2_SetConfig+0x104>)
 8016ae4:	4293      	cmp	r3, r2
 8016ae6:	d10d      	bne.n	8016b04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	68db      	ldr	r3, [r3, #12]
 8016af4:	011b      	lsls	r3, r3, #4
 8016af6:	697a      	ldr	r2, [r7, #20]
 8016af8:	4313      	orrs	r3, r2
 8016afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016afc:	697b      	ldr	r3, [r7, #20]
 8016afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	4a1e      	ldr	r2, [pc, #120]	@ (8016b80 <TIM_OC2_SetConfig+0x100>)
 8016b08:	4293      	cmp	r3, r2
 8016b0a:	d00f      	beq.n	8016b2c <TIM_OC2_SetConfig+0xac>
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8016b84 <TIM_OC2_SetConfig+0x104>)
 8016b10:	4293      	cmp	r3, r2
 8016b12:	d00b      	beq.n	8016b2c <TIM_OC2_SetConfig+0xac>
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	4a1c      	ldr	r2, [pc, #112]	@ (8016b88 <TIM_OC2_SetConfig+0x108>)
 8016b18:	4293      	cmp	r3, r2
 8016b1a:	d007      	beq.n	8016b2c <TIM_OC2_SetConfig+0xac>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8016b8c <TIM_OC2_SetConfig+0x10c>)
 8016b20:	4293      	cmp	r3, r2
 8016b22:	d003      	beq.n	8016b2c <TIM_OC2_SetConfig+0xac>
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	4a1a      	ldr	r2, [pc, #104]	@ (8016b90 <TIM_OC2_SetConfig+0x110>)
 8016b28:	4293      	cmp	r3, r2
 8016b2a:	d113      	bne.n	8016b54 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016b34:	693b      	ldr	r3, [r7, #16]
 8016b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	695b      	ldr	r3, [r3, #20]
 8016b40:	009b      	lsls	r3, r3, #2
 8016b42:	693a      	ldr	r2, [r7, #16]
 8016b44:	4313      	orrs	r3, r2
 8016b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	699b      	ldr	r3, [r3, #24]
 8016b4c:	009b      	lsls	r3, r3, #2
 8016b4e:	693a      	ldr	r2, [r7, #16]
 8016b50:	4313      	orrs	r3, r2
 8016b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	693a      	ldr	r2, [r7, #16]
 8016b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	68fa      	ldr	r2, [r7, #12]
 8016b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	685a      	ldr	r2, [r3, #4]
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	697a      	ldr	r2, [r7, #20]
 8016b6c:	621a      	str	r2, [r3, #32]
}
 8016b6e:	bf00      	nop
 8016b70:	371c      	adds	r7, #28
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr
 8016b7a:	bf00      	nop
 8016b7c:	feff8fff 	.word	0xfeff8fff
 8016b80:	40010000 	.word	0x40010000
 8016b84:	40010400 	.word	0x40010400
 8016b88:	40014000 	.word	0x40014000
 8016b8c:	40014400 	.word	0x40014400
 8016b90:	40014800 	.word	0x40014800

08016b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016b94:	b480      	push	{r7}
 8016b96:	b087      	sub	sp, #28
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]
 8016b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	6a1b      	ldr	r3, [r3, #32]
 8016ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	6a1b      	ldr	r3, [r3, #32]
 8016ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	685b      	ldr	r3, [r3, #4]
 8016bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	69db      	ldr	r3, [r3, #28]
 8016bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016bbc:	68fa      	ldr	r2, [r7, #12]
 8016bbe:	4b33      	ldr	r3, [pc, #204]	@ (8016c8c <TIM_OC3_SetConfig+0xf8>)
 8016bc0:	4013      	ands	r3, r2
 8016bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	f023 0303 	bic.w	r3, r3, #3
 8016bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	4313      	orrs	r3, r2
 8016bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016bd6:	697b      	ldr	r3, [r7, #20]
 8016bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	689b      	ldr	r3, [r3, #8]
 8016be2:	021b      	lsls	r3, r3, #8
 8016be4:	697a      	ldr	r2, [r7, #20]
 8016be6:	4313      	orrs	r3, r2
 8016be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	4a28      	ldr	r2, [pc, #160]	@ (8016c90 <TIM_OC3_SetConfig+0xfc>)
 8016bee:	4293      	cmp	r3, r2
 8016bf0:	d003      	beq.n	8016bfa <TIM_OC3_SetConfig+0x66>
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	4a27      	ldr	r2, [pc, #156]	@ (8016c94 <TIM_OC3_SetConfig+0x100>)
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	d10d      	bne.n	8016c16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	68db      	ldr	r3, [r3, #12]
 8016c06:	021b      	lsls	r3, r3, #8
 8016c08:	697a      	ldr	r2, [r7, #20]
 8016c0a:	4313      	orrs	r3, r2
 8016c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016c0e:	697b      	ldr	r3, [r7, #20]
 8016c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	4a1d      	ldr	r2, [pc, #116]	@ (8016c90 <TIM_OC3_SetConfig+0xfc>)
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	d00f      	beq.n	8016c3e <TIM_OC3_SetConfig+0xaa>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	4a1c      	ldr	r2, [pc, #112]	@ (8016c94 <TIM_OC3_SetConfig+0x100>)
 8016c22:	4293      	cmp	r3, r2
 8016c24:	d00b      	beq.n	8016c3e <TIM_OC3_SetConfig+0xaa>
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	4a1b      	ldr	r2, [pc, #108]	@ (8016c98 <TIM_OC3_SetConfig+0x104>)
 8016c2a:	4293      	cmp	r3, r2
 8016c2c:	d007      	beq.n	8016c3e <TIM_OC3_SetConfig+0xaa>
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	4a1a      	ldr	r2, [pc, #104]	@ (8016c9c <TIM_OC3_SetConfig+0x108>)
 8016c32:	4293      	cmp	r3, r2
 8016c34:	d003      	beq.n	8016c3e <TIM_OC3_SetConfig+0xaa>
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	4a19      	ldr	r2, [pc, #100]	@ (8016ca0 <TIM_OC3_SetConfig+0x10c>)
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	d113      	bne.n	8016c66 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016c46:	693b      	ldr	r3, [r7, #16]
 8016c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	695b      	ldr	r3, [r3, #20]
 8016c52:	011b      	lsls	r3, r3, #4
 8016c54:	693a      	ldr	r2, [r7, #16]
 8016c56:	4313      	orrs	r3, r2
 8016c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016c5a:	683b      	ldr	r3, [r7, #0]
 8016c5c:	699b      	ldr	r3, [r3, #24]
 8016c5e:	011b      	lsls	r3, r3, #4
 8016c60:	693a      	ldr	r2, [r7, #16]
 8016c62:	4313      	orrs	r3, r2
 8016c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	693a      	ldr	r2, [r7, #16]
 8016c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	68fa      	ldr	r2, [r7, #12]
 8016c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	685a      	ldr	r2, [r3, #4]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	697a      	ldr	r2, [r7, #20]
 8016c7e:	621a      	str	r2, [r3, #32]
}
 8016c80:	bf00      	nop
 8016c82:	371c      	adds	r7, #28
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr
 8016c8c:	fffeff8f 	.word	0xfffeff8f
 8016c90:	40010000 	.word	0x40010000
 8016c94:	40010400 	.word	0x40010400
 8016c98:	40014000 	.word	0x40014000
 8016c9c:	40014400 	.word	0x40014400
 8016ca0:	40014800 	.word	0x40014800

08016ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b087      	sub	sp, #28
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	6a1b      	ldr	r3, [r3, #32]
 8016cb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	6a1b      	ldr	r3, [r3, #32]
 8016cb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	685b      	ldr	r3, [r3, #4]
 8016cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	69db      	ldr	r3, [r3, #28]
 8016cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016ccc:	68fa      	ldr	r2, [r7, #12]
 8016cce:	4b24      	ldr	r3, [pc, #144]	@ (8016d60 <TIM_OC4_SetConfig+0xbc>)
 8016cd0:	4013      	ands	r3, r2
 8016cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	021b      	lsls	r3, r3, #8
 8016ce2:	68fa      	ldr	r2, [r7, #12]
 8016ce4:	4313      	orrs	r3, r2
 8016ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016ce8:	693b      	ldr	r3, [r7, #16]
 8016cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016cf0:	683b      	ldr	r3, [r7, #0]
 8016cf2:	689b      	ldr	r3, [r3, #8]
 8016cf4:	031b      	lsls	r3, r3, #12
 8016cf6:	693a      	ldr	r2, [r7, #16]
 8016cf8:	4313      	orrs	r3, r2
 8016cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	4a19      	ldr	r2, [pc, #100]	@ (8016d64 <TIM_OC4_SetConfig+0xc0>)
 8016d00:	4293      	cmp	r3, r2
 8016d02:	d00f      	beq.n	8016d24 <TIM_OC4_SetConfig+0x80>
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	4a18      	ldr	r2, [pc, #96]	@ (8016d68 <TIM_OC4_SetConfig+0xc4>)
 8016d08:	4293      	cmp	r3, r2
 8016d0a:	d00b      	beq.n	8016d24 <TIM_OC4_SetConfig+0x80>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	4a17      	ldr	r2, [pc, #92]	@ (8016d6c <TIM_OC4_SetConfig+0xc8>)
 8016d10:	4293      	cmp	r3, r2
 8016d12:	d007      	beq.n	8016d24 <TIM_OC4_SetConfig+0x80>
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	4a16      	ldr	r2, [pc, #88]	@ (8016d70 <TIM_OC4_SetConfig+0xcc>)
 8016d18:	4293      	cmp	r3, r2
 8016d1a:	d003      	beq.n	8016d24 <TIM_OC4_SetConfig+0x80>
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	4a15      	ldr	r2, [pc, #84]	@ (8016d74 <TIM_OC4_SetConfig+0xd0>)
 8016d20:	4293      	cmp	r3, r2
 8016d22:	d109      	bne.n	8016d38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016d24:	697b      	ldr	r3, [r7, #20]
 8016d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	695b      	ldr	r3, [r3, #20]
 8016d30:	019b      	lsls	r3, r3, #6
 8016d32:	697a      	ldr	r2, [r7, #20]
 8016d34:	4313      	orrs	r3, r2
 8016d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	697a      	ldr	r2, [r7, #20]
 8016d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	68fa      	ldr	r2, [r7, #12]
 8016d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	685a      	ldr	r2, [r3, #4]
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	693a      	ldr	r2, [r7, #16]
 8016d50:	621a      	str	r2, [r3, #32]
}
 8016d52:	bf00      	nop
 8016d54:	371c      	adds	r7, #28
 8016d56:	46bd      	mov	sp, r7
 8016d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5c:	4770      	bx	lr
 8016d5e:	bf00      	nop
 8016d60:	feff8fff 	.word	0xfeff8fff
 8016d64:	40010000 	.word	0x40010000
 8016d68:	40010400 	.word	0x40010400
 8016d6c:	40014000 	.word	0x40014000
 8016d70:	40014400 	.word	0x40014400
 8016d74:	40014800 	.word	0x40014800

08016d78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016d78:	b480      	push	{r7}
 8016d7a:	b087      	sub	sp, #28
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
 8016d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6a1b      	ldr	r3, [r3, #32]
 8016d86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6a1b      	ldr	r3, [r3, #32]
 8016d8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016da0:	68fa      	ldr	r2, [r7, #12]
 8016da2:	4b21      	ldr	r3, [pc, #132]	@ (8016e28 <TIM_OC5_SetConfig+0xb0>)
 8016da4:	4013      	ands	r3, r2
 8016da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	68fa      	ldr	r2, [r7, #12]
 8016dae:	4313      	orrs	r3, r2
 8016db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8016db2:	693b      	ldr	r3, [r7, #16]
 8016db4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8016db8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	689b      	ldr	r3, [r3, #8]
 8016dbe:	041b      	lsls	r3, r3, #16
 8016dc0:	693a      	ldr	r2, [r7, #16]
 8016dc2:	4313      	orrs	r3, r2
 8016dc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	4a18      	ldr	r2, [pc, #96]	@ (8016e2c <TIM_OC5_SetConfig+0xb4>)
 8016dca:	4293      	cmp	r3, r2
 8016dcc:	d00f      	beq.n	8016dee <TIM_OC5_SetConfig+0x76>
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	4a17      	ldr	r2, [pc, #92]	@ (8016e30 <TIM_OC5_SetConfig+0xb8>)
 8016dd2:	4293      	cmp	r3, r2
 8016dd4:	d00b      	beq.n	8016dee <TIM_OC5_SetConfig+0x76>
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	4a16      	ldr	r2, [pc, #88]	@ (8016e34 <TIM_OC5_SetConfig+0xbc>)
 8016dda:	4293      	cmp	r3, r2
 8016ddc:	d007      	beq.n	8016dee <TIM_OC5_SetConfig+0x76>
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	4a15      	ldr	r2, [pc, #84]	@ (8016e38 <TIM_OC5_SetConfig+0xc0>)
 8016de2:	4293      	cmp	r3, r2
 8016de4:	d003      	beq.n	8016dee <TIM_OC5_SetConfig+0x76>
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	4a14      	ldr	r2, [pc, #80]	@ (8016e3c <TIM_OC5_SetConfig+0xc4>)
 8016dea:	4293      	cmp	r3, r2
 8016dec:	d109      	bne.n	8016e02 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016df4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	695b      	ldr	r3, [r3, #20]
 8016dfa:	021b      	lsls	r3, r3, #8
 8016dfc:	697a      	ldr	r2, [r7, #20]
 8016dfe:	4313      	orrs	r3, r2
 8016e00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	697a      	ldr	r2, [r7, #20]
 8016e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	68fa      	ldr	r2, [r7, #12]
 8016e0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	685a      	ldr	r2, [r3, #4]
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	693a      	ldr	r2, [r7, #16]
 8016e1a:	621a      	str	r2, [r3, #32]
}
 8016e1c:	bf00      	nop
 8016e1e:	371c      	adds	r7, #28
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr
 8016e28:	fffeff8f 	.word	0xfffeff8f
 8016e2c:	40010000 	.word	0x40010000
 8016e30:	40010400 	.word	0x40010400
 8016e34:	40014000 	.word	0x40014000
 8016e38:	40014400 	.word	0x40014400
 8016e3c:	40014800 	.word	0x40014800

08016e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016e40:	b480      	push	{r7}
 8016e42:	b087      	sub	sp, #28
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	6078      	str	r0, [r7, #4]
 8016e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	6a1b      	ldr	r3, [r3, #32]
 8016e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	6a1b      	ldr	r3, [r3, #32]
 8016e54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	685b      	ldr	r3, [r3, #4]
 8016e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016e68:	68fa      	ldr	r2, [r7, #12]
 8016e6a:	4b22      	ldr	r3, [pc, #136]	@ (8016ef4 <TIM_OC6_SetConfig+0xb4>)
 8016e6c:	4013      	ands	r3, r2
 8016e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	021b      	lsls	r3, r3, #8
 8016e76:	68fa      	ldr	r2, [r7, #12]
 8016e78:	4313      	orrs	r3, r2
 8016e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016e7c:	693b      	ldr	r3, [r7, #16]
 8016e7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	689b      	ldr	r3, [r3, #8]
 8016e88:	051b      	lsls	r3, r3, #20
 8016e8a:	693a      	ldr	r2, [r7, #16]
 8016e8c:	4313      	orrs	r3, r2
 8016e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	4a19      	ldr	r2, [pc, #100]	@ (8016ef8 <TIM_OC6_SetConfig+0xb8>)
 8016e94:	4293      	cmp	r3, r2
 8016e96:	d00f      	beq.n	8016eb8 <TIM_OC6_SetConfig+0x78>
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	4a18      	ldr	r2, [pc, #96]	@ (8016efc <TIM_OC6_SetConfig+0xbc>)
 8016e9c:	4293      	cmp	r3, r2
 8016e9e:	d00b      	beq.n	8016eb8 <TIM_OC6_SetConfig+0x78>
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	4a17      	ldr	r2, [pc, #92]	@ (8016f00 <TIM_OC6_SetConfig+0xc0>)
 8016ea4:	4293      	cmp	r3, r2
 8016ea6:	d007      	beq.n	8016eb8 <TIM_OC6_SetConfig+0x78>
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	4a16      	ldr	r2, [pc, #88]	@ (8016f04 <TIM_OC6_SetConfig+0xc4>)
 8016eac:	4293      	cmp	r3, r2
 8016eae:	d003      	beq.n	8016eb8 <TIM_OC6_SetConfig+0x78>
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	4a15      	ldr	r2, [pc, #84]	@ (8016f08 <TIM_OC6_SetConfig+0xc8>)
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	d109      	bne.n	8016ecc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	695b      	ldr	r3, [r3, #20]
 8016ec4:	029b      	lsls	r3, r3, #10
 8016ec6:	697a      	ldr	r2, [r7, #20]
 8016ec8:	4313      	orrs	r3, r2
 8016eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	697a      	ldr	r2, [r7, #20]
 8016ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	68fa      	ldr	r2, [r7, #12]
 8016ed6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	685a      	ldr	r2, [r3, #4]
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	693a      	ldr	r2, [r7, #16]
 8016ee4:	621a      	str	r2, [r3, #32]
}
 8016ee6:	bf00      	nop
 8016ee8:	371c      	adds	r7, #28
 8016eea:	46bd      	mov	sp, r7
 8016eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef0:	4770      	bx	lr
 8016ef2:	bf00      	nop
 8016ef4:	feff8fff 	.word	0xfeff8fff
 8016ef8:	40010000 	.word	0x40010000
 8016efc:	40010400 	.word	0x40010400
 8016f00:	40014000 	.word	0x40014000
 8016f04:	40014400 	.word	0x40014400
 8016f08:	40014800 	.word	0x40014800

08016f0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8016f0c:	b480      	push	{r7}
 8016f0e:	b087      	sub	sp, #28
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	60b9      	str	r1, [r7, #8]
 8016f16:	607a      	str	r2, [r7, #4]
 8016f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	6a1b      	ldr	r3, [r3, #32]
 8016f1e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	6a1b      	ldr	r3, [r3, #32]
 8016f24:	f023 0201 	bic.w	r2, r3, #1
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	699b      	ldr	r3, [r3, #24]
 8016f30:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	4a2c      	ldr	r2, [pc, #176]	@ (8016fe8 <TIM_TI1_SetConfig+0xdc>)
 8016f36:	4293      	cmp	r3, r2
 8016f38:	d023      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016f40:	d01f      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	4a29      	ldr	r2, [pc, #164]	@ (8016fec <TIM_TI1_SetConfig+0xe0>)
 8016f46:	4293      	cmp	r3, r2
 8016f48:	d01b      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	4a28      	ldr	r2, [pc, #160]	@ (8016ff0 <TIM_TI1_SetConfig+0xe4>)
 8016f4e:	4293      	cmp	r3, r2
 8016f50:	d017      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	4a27      	ldr	r2, [pc, #156]	@ (8016ff4 <TIM_TI1_SetConfig+0xe8>)
 8016f56:	4293      	cmp	r3, r2
 8016f58:	d013      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	4a26      	ldr	r2, [pc, #152]	@ (8016ff8 <TIM_TI1_SetConfig+0xec>)
 8016f5e:	4293      	cmp	r3, r2
 8016f60:	d00f      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	4a25      	ldr	r2, [pc, #148]	@ (8016ffc <TIM_TI1_SetConfig+0xf0>)
 8016f66:	4293      	cmp	r3, r2
 8016f68:	d00b      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	4a24      	ldr	r2, [pc, #144]	@ (8017000 <TIM_TI1_SetConfig+0xf4>)
 8016f6e:	4293      	cmp	r3, r2
 8016f70:	d007      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	4a23      	ldr	r2, [pc, #140]	@ (8017004 <TIM_TI1_SetConfig+0xf8>)
 8016f76:	4293      	cmp	r3, r2
 8016f78:	d003      	beq.n	8016f82 <TIM_TI1_SetConfig+0x76>
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	4a22      	ldr	r2, [pc, #136]	@ (8017008 <TIM_TI1_SetConfig+0xfc>)
 8016f7e:	4293      	cmp	r3, r2
 8016f80:	d101      	bne.n	8016f86 <TIM_TI1_SetConfig+0x7a>
 8016f82:	2301      	movs	r3, #1
 8016f84:	e000      	b.n	8016f88 <TIM_TI1_SetConfig+0x7c>
 8016f86:	2300      	movs	r3, #0
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d008      	beq.n	8016f9e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8016f8c:	697b      	ldr	r3, [r7, #20]
 8016f8e:	f023 0303 	bic.w	r3, r3, #3
 8016f92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8016f94:	697a      	ldr	r2, [r7, #20]
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	4313      	orrs	r3, r2
 8016f9a:	617b      	str	r3, [r7, #20]
 8016f9c:	e003      	b.n	8016fa6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	f043 0301 	orr.w	r3, r3, #1
 8016fa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	011b      	lsls	r3, r3, #4
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	697a      	ldr	r2, [r7, #20]
 8016fb6:	4313      	orrs	r3, r2
 8016fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	f023 030a 	bic.w	r3, r3, #10
 8016fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	f003 030a 	and.w	r3, r3, #10
 8016fc8:	693a      	ldr	r2, [r7, #16]
 8016fca:	4313      	orrs	r3, r2
 8016fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	697a      	ldr	r2, [r7, #20]
 8016fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	693a      	ldr	r2, [r7, #16]
 8016fd8:	621a      	str	r2, [r3, #32]
}
 8016fda:	bf00      	nop
 8016fdc:	371c      	adds	r7, #28
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe4:	4770      	bx	lr
 8016fe6:	bf00      	nop
 8016fe8:	40010000 	.word	0x40010000
 8016fec:	40000400 	.word	0x40000400
 8016ff0:	40000800 	.word	0x40000800
 8016ff4:	40000c00 	.word	0x40000c00
 8016ff8:	40010400 	.word	0x40010400
 8016ffc:	40001800 	.word	0x40001800
 8017000:	40014000 	.word	0x40014000
 8017004:	4000e000 	.word	0x4000e000
 8017008:	4000e400 	.word	0x4000e400

0801700c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801700c:	b480      	push	{r7}
 801700e:	b087      	sub	sp, #28
 8017010:	af00      	add	r7, sp, #0
 8017012:	60f8      	str	r0, [r7, #12]
 8017014:	60b9      	str	r1, [r7, #8]
 8017016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	6a1b      	ldr	r3, [r3, #32]
 801701c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	6a1b      	ldr	r3, [r3, #32]
 8017022:	f023 0201 	bic.w	r2, r3, #1
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	699b      	ldr	r3, [r3, #24]
 801702e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	011b      	lsls	r3, r3, #4
 801703c:	693a      	ldr	r2, [r7, #16]
 801703e:	4313      	orrs	r3, r2
 8017040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017042:	697b      	ldr	r3, [r7, #20]
 8017044:	f023 030a 	bic.w	r3, r3, #10
 8017048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801704a:	697a      	ldr	r2, [r7, #20]
 801704c:	68bb      	ldr	r3, [r7, #8]
 801704e:	4313      	orrs	r3, r2
 8017050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	693a      	ldr	r2, [r7, #16]
 8017056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	697a      	ldr	r2, [r7, #20]
 801705c:	621a      	str	r2, [r3, #32]
}
 801705e:	bf00      	nop
 8017060:	371c      	adds	r7, #28
 8017062:	46bd      	mov	sp, r7
 8017064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017068:	4770      	bx	lr

0801706a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801706a:	b480      	push	{r7}
 801706c:	b087      	sub	sp, #28
 801706e:	af00      	add	r7, sp, #0
 8017070:	60f8      	str	r0, [r7, #12]
 8017072:	60b9      	str	r1, [r7, #8]
 8017074:	607a      	str	r2, [r7, #4]
 8017076:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	6a1b      	ldr	r3, [r3, #32]
 801707c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	6a1b      	ldr	r3, [r3, #32]
 8017082:	f023 0210 	bic.w	r2, r3, #16
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	699b      	ldr	r3, [r3, #24]
 801708e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	021b      	lsls	r3, r3, #8
 801709c:	693a      	ldr	r2, [r7, #16]
 801709e:	4313      	orrs	r3, r2
 80170a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80170a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	031b      	lsls	r3, r3, #12
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	693a      	ldr	r2, [r7, #16]
 80170b2:	4313      	orrs	r3, r2
 80170b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80170bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	011b      	lsls	r3, r3, #4
 80170c2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80170c6:	697a      	ldr	r2, [r7, #20]
 80170c8:	4313      	orrs	r3, r2
 80170ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	693a      	ldr	r2, [r7, #16]
 80170d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	697a      	ldr	r2, [r7, #20]
 80170d6:	621a      	str	r2, [r3, #32]
}
 80170d8:	bf00      	nop
 80170da:	371c      	adds	r7, #28
 80170dc:	46bd      	mov	sp, r7
 80170de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e2:	4770      	bx	lr

080170e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80170e4:	b480      	push	{r7}
 80170e6:	b087      	sub	sp, #28
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	6a1b      	ldr	r3, [r3, #32]
 80170f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	6a1b      	ldr	r3, [r3, #32]
 80170fa:	f023 0210 	bic.w	r2, r3, #16
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	699b      	ldr	r3, [r3, #24]
 8017106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017108:	693b      	ldr	r3, [r7, #16]
 801710a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801710e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	031b      	lsls	r3, r3, #12
 8017114:	693a      	ldr	r2, [r7, #16]
 8017116:	4313      	orrs	r3, r2
 8017118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017120:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	011b      	lsls	r3, r3, #4
 8017126:	697a      	ldr	r2, [r7, #20]
 8017128:	4313      	orrs	r3, r2
 801712a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	693a      	ldr	r2, [r7, #16]
 8017130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	697a      	ldr	r2, [r7, #20]
 8017136:	621a      	str	r2, [r3, #32]
}
 8017138:	bf00      	nop
 801713a:	371c      	adds	r7, #28
 801713c:	46bd      	mov	sp, r7
 801713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017142:	4770      	bx	lr

08017144 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017144:	b480      	push	{r7}
 8017146:	b087      	sub	sp, #28
 8017148:	af00      	add	r7, sp, #0
 801714a:	60f8      	str	r0, [r7, #12]
 801714c:	60b9      	str	r1, [r7, #8]
 801714e:	607a      	str	r2, [r7, #4]
 8017150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	6a1b      	ldr	r3, [r3, #32]
 8017156:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	6a1b      	ldr	r3, [r3, #32]
 801715c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	69db      	ldr	r3, [r3, #28]
 8017168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801716a:	693b      	ldr	r3, [r7, #16]
 801716c:	f023 0303 	bic.w	r3, r3, #3
 8017170:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017172:	693a      	ldr	r2, [r7, #16]
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	4313      	orrs	r3, r2
 8017178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017180:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	011b      	lsls	r3, r3, #4
 8017186:	b2db      	uxtb	r3, r3
 8017188:	693a      	ldr	r2, [r7, #16]
 801718a:	4313      	orrs	r3, r2
 801718c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017194:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017196:	68bb      	ldr	r3, [r7, #8]
 8017198:	021b      	lsls	r3, r3, #8
 801719a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801719e:	697a      	ldr	r2, [r7, #20]
 80171a0:	4313      	orrs	r3, r2
 80171a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	693a      	ldr	r2, [r7, #16]
 80171a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	697a      	ldr	r2, [r7, #20]
 80171ae:	621a      	str	r2, [r3, #32]
}
 80171b0:	bf00      	nop
 80171b2:	371c      	adds	r7, #28
 80171b4:	46bd      	mov	sp, r7
 80171b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ba:	4770      	bx	lr

080171bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80171bc:	b480      	push	{r7}
 80171be:	b087      	sub	sp, #28
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	60f8      	str	r0, [r7, #12]
 80171c4:	60b9      	str	r1, [r7, #8]
 80171c6:	607a      	str	r2, [r7, #4]
 80171c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	6a1b      	ldr	r3, [r3, #32]
 80171ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	6a1b      	ldr	r3, [r3, #32]
 80171d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	69db      	ldr	r3, [r3, #28]
 80171e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80171e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	021b      	lsls	r3, r3, #8
 80171ee:	693a      	ldr	r2, [r7, #16]
 80171f0:	4313      	orrs	r3, r2
 80171f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80171f4:	693b      	ldr	r3, [r7, #16]
 80171f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80171fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	031b      	lsls	r3, r3, #12
 8017200:	b29b      	uxth	r3, r3
 8017202:	693a      	ldr	r2, [r7, #16]
 8017204:	4313      	orrs	r3, r2
 8017206:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017208:	697b      	ldr	r3, [r7, #20]
 801720a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 801720e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	031b      	lsls	r3, r3, #12
 8017214:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017218:	697a      	ldr	r2, [r7, #20]
 801721a:	4313      	orrs	r3, r2
 801721c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	693a      	ldr	r2, [r7, #16]
 8017222:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	697a      	ldr	r2, [r7, #20]
 8017228:	621a      	str	r2, [r3, #32]
}
 801722a:	bf00      	nop
 801722c:	371c      	adds	r7, #28
 801722e:	46bd      	mov	sp, r7
 8017230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017234:	4770      	bx	lr
	...

08017238 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017238:	b480      	push	{r7}
 801723a:	b085      	sub	sp, #20
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
 8017240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	689b      	ldr	r3, [r3, #8]
 8017246:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017248:	68fa      	ldr	r2, [r7, #12]
 801724a:	4b09      	ldr	r3, [pc, #36]	@ (8017270 <TIM_ITRx_SetConfig+0x38>)
 801724c:	4013      	ands	r3, r2
 801724e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017250:	683a      	ldr	r2, [r7, #0]
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	4313      	orrs	r3, r2
 8017256:	f043 0307 	orr.w	r3, r3, #7
 801725a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	68fa      	ldr	r2, [r7, #12]
 8017260:	609a      	str	r2, [r3, #8]
}
 8017262:	bf00      	nop
 8017264:	3714      	adds	r7, #20
 8017266:	46bd      	mov	sp, r7
 8017268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726c:	4770      	bx	lr
 801726e:	bf00      	nop
 8017270:	ffcfff8f 	.word	0xffcfff8f

08017274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017274:	b480      	push	{r7}
 8017276:	b087      	sub	sp, #28
 8017278:	af00      	add	r7, sp, #0
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	60b9      	str	r1, [r7, #8]
 801727e:	607a      	str	r2, [r7, #4]
 8017280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	689b      	ldr	r3, [r3, #8]
 8017286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017288:	697b      	ldr	r3, [r7, #20]
 801728a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801728e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	021a      	lsls	r2, r3, #8
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	431a      	orrs	r2, r3
 8017298:	68bb      	ldr	r3, [r7, #8]
 801729a:	4313      	orrs	r3, r2
 801729c:	697a      	ldr	r2, [r7, #20]
 801729e:	4313      	orrs	r3, r2
 80172a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	697a      	ldr	r2, [r7, #20]
 80172a6:	609a      	str	r2, [r3, #8]
}
 80172a8:	bf00      	nop
 80172aa:	371c      	adds	r7, #28
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80172b4:	b480      	push	{r7}
 80172b6:	b087      	sub	sp, #28
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	60b9      	str	r1, [r7, #8]
 80172be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	f003 031f 	and.w	r3, r3, #31
 80172c6:	2201      	movs	r2, #1
 80172c8:	fa02 f303 	lsl.w	r3, r2, r3
 80172cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	6a1a      	ldr	r2, [r3, #32]
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	43db      	mvns	r3, r3
 80172d6:	401a      	ands	r2, r3
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	6a1a      	ldr	r2, [r3, #32]
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	f003 031f 	and.w	r3, r3, #31
 80172e6:	6879      	ldr	r1, [r7, #4]
 80172e8:	fa01 f303 	lsl.w	r3, r1, r3
 80172ec:	431a      	orrs	r2, r3
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	621a      	str	r2, [r3, #32]
}
 80172f2:	bf00      	nop
 80172f4:	371c      	adds	r7, #28
 80172f6:	46bd      	mov	sp, r7
 80172f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fc:	4770      	bx	lr
	...

08017300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017300:	b480      	push	{r7}
 8017302:	b085      	sub	sp, #20
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
 8017308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017310:	2b01      	cmp	r3, #1
 8017312:	d101      	bne.n	8017318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017314:	2302      	movs	r3, #2
 8017316:	e077      	b.n	8017408 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2201      	movs	r2, #1
 801731c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2202      	movs	r2, #2
 8017324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	685b      	ldr	r3, [r3, #4]
 801732e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	689b      	ldr	r3, [r3, #8]
 8017336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	4a35      	ldr	r2, [pc, #212]	@ (8017414 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801733e:	4293      	cmp	r3, r2
 8017340:	d004      	beq.n	801734c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	4a34      	ldr	r2, [pc, #208]	@ (8017418 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017348:	4293      	cmp	r3, r2
 801734a:	d108      	bne.n	801735e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017352:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	68fa      	ldr	r2, [r7, #12]
 801735a:	4313      	orrs	r3, r2
 801735c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017364:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	68fa      	ldr	r2, [r7, #12]
 801736c:	4313      	orrs	r3, r2
 801736e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	68fa      	ldr	r2, [r7, #12]
 8017376:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	4a25      	ldr	r2, [pc, #148]	@ (8017414 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801737e:	4293      	cmp	r3, r2
 8017380:	d02c      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801738a:	d027      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	4a22      	ldr	r2, [pc, #136]	@ (801741c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017392:	4293      	cmp	r3, r2
 8017394:	d022      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	4a21      	ldr	r2, [pc, #132]	@ (8017420 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801739c:	4293      	cmp	r3, r2
 801739e:	d01d      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	4a1f      	ldr	r2, [pc, #124]	@ (8017424 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80173a6:	4293      	cmp	r3, r2
 80173a8:	d018      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	4a1a      	ldr	r2, [pc, #104]	@ (8017418 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80173b0:	4293      	cmp	r3, r2
 80173b2:	d013      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	4a1b      	ldr	r2, [pc, #108]	@ (8017428 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d00e      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	4a1a      	ldr	r2, [pc, #104]	@ (801742c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80173c4:	4293      	cmp	r3, r2
 80173c6:	d009      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	4a18      	ldr	r2, [pc, #96]	@ (8017430 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d004      	beq.n	80173dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	4a17      	ldr	r2, [pc, #92]	@ (8017434 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80173d8:	4293      	cmp	r3, r2
 80173da:	d10c      	bne.n	80173f6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80173e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	689b      	ldr	r3, [r3, #8]
 80173e8:	68ba      	ldr	r2, [r7, #8]
 80173ea:	4313      	orrs	r3, r2
 80173ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	68ba      	ldr	r2, [r7, #8]
 80173f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2201      	movs	r2, #1
 80173fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	2200      	movs	r2, #0
 8017402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017406:	2300      	movs	r3, #0
}
 8017408:	4618      	mov	r0, r3
 801740a:	3714      	adds	r7, #20
 801740c:	46bd      	mov	sp, r7
 801740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017412:	4770      	bx	lr
 8017414:	40010000 	.word	0x40010000
 8017418:	40010400 	.word	0x40010400
 801741c:	40000400 	.word	0x40000400
 8017420:	40000800 	.word	0x40000800
 8017424:	40000c00 	.word	0x40000c00
 8017428:	40001800 	.word	0x40001800
 801742c:	40014000 	.word	0x40014000
 8017430:	4000e000 	.word	0x4000e000
 8017434:	4000e400 	.word	0x4000e400

08017438 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017438:	b480      	push	{r7}
 801743a:	b085      	sub	sp, #20
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017442:	2300      	movs	r3, #0
 8017444:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801744c:	2b01      	cmp	r3, #1
 801744e:	d101      	bne.n	8017454 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017450:	2302      	movs	r3, #2
 8017452:	e073      	b.n	801753c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2201      	movs	r2, #1
 8017458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017462:	683b      	ldr	r3, [r7, #0]
 8017464:	68db      	ldr	r3, [r3, #12]
 8017466:	4313      	orrs	r3, r2
 8017468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	689b      	ldr	r3, [r3, #8]
 8017474:	4313      	orrs	r3, r2
 8017476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	685b      	ldr	r3, [r3, #4]
 8017482:	4313      	orrs	r3, r2
 8017484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801748c:	683b      	ldr	r3, [r7, #0]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	4313      	orrs	r3, r2
 8017492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	691b      	ldr	r3, [r3, #16]
 801749e:	4313      	orrs	r3, r2
 80174a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	695b      	ldr	r3, [r3, #20]
 80174ac:	4313      	orrs	r3, r2
 80174ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174ba:	4313      	orrs	r3, r2
 80174bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	699b      	ldr	r3, [r3, #24]
 80174c8:	041b      	lsls	r3, r3, #16
 80174ca:	4313      	orrs	r3, r2
 80174cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	69db      	ldr	r3, [r3, #28]
 80174d8:	4313      	orrs	r3, r2
 80174da:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	4a19      	ldr	r2, [pc, #100]	@ (8017548 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80174e2:	4293      	cmp	r3, r2
 80174e4:	d004      	beq.n	80174f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	4a18      	ldr	r2, [pc, #96]	@ (801754c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80174ec:	4293      	cmp	r3, r2
 80174ee:	d11c      	bne.n	801752a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174fa:	051b      	lsls	r3, r3, #20
 80174fc:	4313      	orrs	r3, r2
 80174fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	6a1b      	ldr	r3, [r3, #32]
 801750a:	4313      	orrs	r3, r2
 801750c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017518:	4313      	orrs	r3, r2
 801751a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017526:	4313      	orrs	r3, r2
 8017528:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	68fa      	ldr	r2, [r7, #12]
 8017530:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	2200      	movs	r2, #0
 8017536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801753a:	2300      	movs	r3, #0
}
 801753c:	4618      	mov	r0, r3
 801753e:	3714      	adds	r7, #20
 8017540:	46bd      	mov	sp, r7
 8017542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017546:	4770      	bx	lr
 8017548:	40010000 	.word	0x40010000
 801754c:	40010400 	.word	0x40010400

08017550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017550:	b480      	push	{r7}
 8017552:	b083      	sub	sp, #12
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017558:	bf00      	nop
 801755a:	370c      	adds	r7, #12
 801755c:	46bd      	mov	sp, r7
 801755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017562:	4770      	bx	lr

08017564 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017564:	b480      	push	{r7}
 8017566:	b083      	sub	sp, #12
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801756c:	bf00      	nop
 801756e:	370c      	adds	r7, #12
 8017570:	46bd      	mov	sp, r7
 8017572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017576:	4770      	bx	lr

08017578 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017578:	b480      	push	{r7}
 801757a:	b083      	sub	sp, #12
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017580:	bf00      	nop
 8017582:	370c      	adds	r7, #12
 8017584:	46bd      	mov	sp, r7
 8017586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758a:	4770      	bx	lr

0801758c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d101      	bne.n	801759e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801759a:	2301      	movs	r3, #1
 801759c:	e042      	b.n	8017624 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d106      	bne.n	80175b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	2200      	movs	r2, #0
 80175ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80175b0:	6878      	ldr	r0, [r7, #4]
 80175b2:	f7f0 ffdf 	bl	8008574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	2224      	movs	r2, #36	@ 0x24
 80175ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	681a      	ldr	r2, [r3, #0]
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	f022 0201 	bic.w	r2, r2, #1
 80175cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d002      	beq.n	80175dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80175d6:	6878      	ldr	r0, [r7, #4]
 80175d8:	f001 fbf8 	bl	8018dcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f000 fd89 	bl	80180f4 <UART_SetConfig>
 80175e2:	4603      	mov	r3, r0
 80175e4:	2b01      	cmp	r3, #1
 80175e6:	d101      	bne.n	80175ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80175e8:	2301      	movs	r3, #1
 80175ea:	e01b      	b.n	8017624 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	685a      	ldr	r2, [r3, #4]
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80175fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	689a      	ldr	r2, [r3, #8]
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801760a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	681a      	ldr	r2, [r3, #0]
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	f042 0201 	orr.w	r2, r2, #1
 801761a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f001 fc77 	bl	8018f10 <UART_CheckIdleState>
 8017622:	4603      	mov	r3, r0
}
 8017624:	4618      	mov	r0, r3
 8017626:	3708      	adds	r7, #8
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}

0801762c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b08a      	sub	sp, #40	@ 0x28
 8017630:	af02      	add	r7, sp, #8
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	603b      	str	r3, [r7, #0]
 8017638:	4613      	mov	r3, r2
 801763a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017642:	2b20      	cmp	r3, #32
 8017644:	d17b      	bne.n	801773e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017646:	68bb      	ldr	r3, [r7, #8]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d002      	beq.n	8017652 <HAL_UART_Transmit+0x26>
 801764c:	88fb      	ldrh	r3, [r7, #6]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d101      	bne.n	8017656 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017652:	2301      	movs	r3, #1
 8017654:	e074      	b.n	8017740 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	2200      	movs	r2, #0
 801765a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	2221      	movs	r2, #33	@ 0x21
 8017662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017666:	f7f1 f8a7 	bl	80087b8 <HAL_GetTick>
 801766a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	88fa      	ldrh	r2, [r7, #6]
 8017670:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	88fa      	ldrh	r2, [r7, #6]
 8017678:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	689b      	ldr	r3, [r3, #8]
 8017680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017684:	d108      	bne.n	8017698 <HAL_UART_Transmit+0x6c>
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	691b      	ldr	r3, [r3, #16]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d104      	bne.n	8017698 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801768e:	2300      	movs	r3, #0
 8017690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017692:	68bb      	ldr	r3, [r7, #8]
 8017694:	61bb      	str	r3, [r7, #24]
 8017696:	e003      	b.n	80176a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801769c:	2300      	movs	r3, #0
 801769e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80176a0:	e030      	b.n	8017704 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80176a2:	683b      	ldr	r3, [r7, #0]
 80176a4:	9300      	str	r3, [sp, #0]
 80176a6:	697b      	ldr	r3, [r7, #20]
 80176a8:	2200      	movs	r2, #0
 80176aa:	2180      	movs	r1, #128	@ 0x80
 80176ac:	68f8      	ldr	r0, [r7, #12]
 80176ae:	f001 fcd9 	bl	8019064 <UART_WaitOnFlagUntilTimeout>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d005      	beq.n	80176c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	2220      	movs	r2, #32
 80176bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80176c0:	2303      	movs	r3, #3
 80176c2:	e03d      	b.n	8017740 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80176c4:	69fb      	ldr	r3, [r7, #28]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d10b      	bne.n	80176e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80176ca:	69bb      	ldr	r3, [r7, #24]
 80176cc:	881b      	ldrh	r3, [r3, #0]
 80176ce:	461a      	mov	r2, r3
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80176d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80176da:	69bb      	ldr	r3, [r7, #24]
 80176dc:	3302      	adds	r3, #2
 80176de:	61bb      	str	r3, [r7, #24]
 80176e0:	e007      	b.n	80176f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80176e2:	69fb      	ldr	r3, [r7, #28]
 80176e4:	781a      	ldrb	r2, [r3, #0]
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80176ec:	69fb      	ldr	r3, [r7, #28]
 80176ee:	3301      	adds	r3, #1
 80176f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80176f8:	b29b      	uxth	r3, r3
 80176fa:	3b01      	subs	r3, #1
 80176fc:	b29a      	uxth	r2, r3
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801770a:	b29b      	uxth	r3, r3
 801770c:	2b00      	cmp	r3, #0
 801770e:	d1c8      	bne.n	80176a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017710:	683b      	ldr	r3, [r7, #0]
 8017712:	9300      	str	r3, [sp, #0]
 8017714:	697b      	ldr	r3, [r7, #20]
 8017716:	2200      	movs	r2, #0
 8017718:	2140      	movs	r1, #64	@ 0x40
 801771a:	68f8      	ldr	r0, [r7, #12]
 801771c:	f001 fca2 	bl	8019064 <UART_WaitOnFlagUntilTimeout>
 8017720:	4603      	mov	r3, r0
 8017722:	2b00      	cmp	r3, #0
 8017724:	d005      	beq.n	8017732 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	2220      	movs	r2, #32
 801772a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801772e:	2303      	movs	r3, #3
 8017730:	e006      	b.n	8017740 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	2220      	movs	r2, #32
 8017736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801773a:	2300      	movs	r3, #0
 801773c:	e000      	b.n	8017740 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801773e:	2302      	movs	r3, #2
  }
}
 8017740:	4618      	mov	r0, r3
 8017742:	3720      	adds	r7, #32
 8017744:	46bd      	mov	sp, r7
 8017746:	bd80      	pop	{r7, pc}

08017748 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017748:	b480      	push	{r7}
 801774a:	b091      	sub	sp, #68	@ 0x44
 801774c:	af00      	add	r7, sp, #0
 801774e:	60f8      	str	r0, [r7, #12]
 8017750:	60b9      	str	r1, [r7, #8]
 8017752:	4613      	mov	r3, r2
 8017754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801775c:	2b20      	cmp	r3, #32
 801775e:	d178      	bne.n	8017852 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d002      	beq.n	801776c <HAL_UART_Transmit_IT+0x24>
 8017766:	88fb      	ldrh	r3, [r7, #6]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d101      	bne.n	8017770 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 801776c:	2301      	movs	r3, #1
 801776e:	e071      	b.n	8017854 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	68ba      	ldr	r2, [r7, #8]
 8017774:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	88fa      	ldrh	r2, [r7, #6]
 801777a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	88fa      	ldrh	r2, [r7, #6]
 8017782:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	2200      	movs	r2, #0
 801778a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	2200      	movs	r2, #0
 8017790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	2221      	movs	r2, #33	@ 0x21
 8017798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80177a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80177a4:	d12a      	bne.n	80177fc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	689b      	ldr	r3, [r3, #8]
 80177aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80177ae:	d107      	bne.n	80177c0 <HAL_UART_Transmit_IT+0x78>
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	691b      	ldr	r3, [r3, #16]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d103      	bne.n	80177c0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	4a29      	ldr	r2, [pc, #164]	@ (8017860 <HAL_UART_Transmit_IT+0x118>)
 80177bc:	679a      	str	r2, [r3, #120]	@ 0x78
 80177be:	e002      	b.n	80177c6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	4a28      	ldr	r2, [pc, #160]	@ (8017864 <HAL_UART_Transmit_IT+0x11c>)
 80177c4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	3308      	adds	r3, #8
 80177cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177d0:	e853 3f00 	ldrex	r3, [r3]
 80177d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80177d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80177dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	3308      	adds	r3, #8
 80177e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80177e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80177e8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80177ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80177ee:	e841 2300 	strex	r3, r2, [r1]
 80177f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80177f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d1e5      	bne.n	80177c6 <HAL_UART_Transmit_IT+0x7e>
 80177fa:	e028      	b.n	801784e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	689b      	ldr	r3, [r3, #8]
 8017800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017804:	d107      	bne.n	8017816 <HAL_UART_Transmit_IT+0xce>
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	691b      	ldr	r3, [r3, #16]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d103      	bne.n	8017816 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	4a15      	ldr	r2, [pc, #84]	@ (8017868 <HAL_UART_Transmit_IT+0x120>)
 8017812:	679a      	str	r2, [r3, #120]	@ 0x78
 8017814:	e002      	b.n	801781c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	4a14      	ldr	r2, [pc, #80]	@ (801786c <HAL_UART_Transmit_IT+0x124>)
 801781a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	e853 3f00 	ldrex	r3, [r3]
 8017828:	613b      	str	r3, [r7, #16]
   return(result);
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	461a      	mov	r2, r3
 8017838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801783a:	623b      	str	r3, [r7, #32]
 801783c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801783e:	69f9      	ldr	r1, [r7, #28]
 8017840:	6a3a      	ldr	r2, [r7, #32]
 8017842:	e841 2300 	strex	r3, r2, [r1]
 8017846:	61bb      	str	r3, [r7, #24]
   return(result);
 8017848:	69bb      	ldr	r3, [r7, #24]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d1e6      	bne.n	801781c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 801784e:	2300      	movs	r3, #0
 8017850:	e000      	b.n	8017854 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8017852:	2302      	movs	r3, #2
  }
}
 8017854:	4618      	mov	r0, r3
 8017856:	3744      	adds	r7, #68	@ 0x44
 8017858:	46bd      	mov	sp, r7
 801785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785e:	4770      	bx	lr
 8017860:	080196cf 	.word	0x080196cf
 8017864:	080195ef 	.word	0x080195ef
 8017868:	0801952d 	.word	0x0801952d
 801786c:	08019475 	.word	0x08019475

08017870 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b08a      	sub	sp, #40	@ 0x28
 8017874:	af00      	add	r7, sp, #0
 8017876:	60f8      	str	r0, [r7, #12]
 8017878:	60b9      	str	r1, [r7, #8]
 801787a:	4613      	mov	r3, r2
 801787c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017884:	2b20      	cmp	r3, #32
 8017886:	d137      	bne.n	80178f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8017888:	68bb      	ldr	r3, [r7, #8]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d002      	beq.n	8017894 <HAL_UART_Receive_IT+0x24>
 801788e:	88fb      	ldrh	r3, [r7, #6]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d101      	bne.n	8017898 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8017894:	2301      	movs	r3, #1
 8017896:	e030      	b.n	80178fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	2200      	movs	r2, #0
 801789c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	4a18      	ldr	r2, [pc, #96]	@ (8017904 <HAL_UART_Receive_IT+0x94>)
 80178a4:	4293      	cmp	r3, r2
 80178a6:	d01f      	beq.n	80178e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d018      	beq.n	80178e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	e853 3f00 	ldrex	r3, [r3]
 80178c2:	613b      	str	r3, [r7, #16]
   return(result);
 80178c4:	693b      	ldr	r3, [r7, #16]
 80178c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80178ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	461a      	mov	r2, r3
 80178d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178d4:	623b      	str	r3, [r7, #32]
 80178d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178d8:	69f9      	ldr	r1, [r7, #28]
 80178da:	6a3a      	ldr	r2, [r7, #32]
 80178dc:	e841 2300 	strex	r3, r2, [r1]
 80178e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d1e6      	bne.n	80178b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80178e8:	88fb      	ldrh	r3, [r7, #6]
 80178ea:	461a      	mov	r2, r3
 80178ec:	68b9      	ldr	r1, [r7, #8]
 80178ee:	68f8      	ldr	r0, [r7, #12]
 80178f0:	f001 fc26 	bl	8019140 <UART_Start_Receive_IT>
 80178f4:	4603      	mov	r3, r0
 80178f6:	e000      	b.n	80178fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80178f8:	2302      	movs	r3, #2
  }
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	3728      	adds	r7, #40	@ 0x28
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	58000c00 	.word	0x58000c00

08017908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b0ba      	sub	sp, #232	@ 0xe8
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	69db      	ldr	r3, [r3, #28]
 8017916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	689b      	ldr	r3, [r3, #8]
 801792a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801792e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017932:	f640 030f 	movw	r3, #2063	@ 0x80f
 8017936:	4013      	ands	r3, r2
 8017938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801793c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017940:	2b00      	cmp	r3, #0
 8017942:	d11b      	bne.n	801797c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017948:	f003 0320 	and.w	r3, r3, #32
 801794c:	2b00      	cmp	r3, #0
 801794e:	d015      	beq.n	801797c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017954:	f003 0320 	and.w	r3, r3, #32
 8017958:	2b00      	cmp	r3, #0
 801795a:	d105      	bne.n	8017968 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017964:	2b00      	cmp	r3, #0
 8017966:	d009      	beq.n	801797c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801796c:	2b00      	cmp	r3, #0
 801796e:	f000 8393 	beq.w	8018098 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017976:	6878      	ldr	r0, [r7, #4]
 8017978:	4798      	blx	r3
      }
      return;
 801797a:	e38d      	b.n	8018098 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801797c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017980:	2b00      	cmp	r3, #0
 8017982:	f000 8123 	beq.w	8017bcc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017986:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801798a:	4b8d      	ldr	r3, [pc, #564]	@ (8017bc0 <HAL_UART_IRQHandler+0x2b8>)
 801798c:	4013      	ands	r3, r2
 801798e:	2b00      	cmp	r3, #0
 8017990:	d106      	bne.n	80179a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017996:	4b8b      	ldr	r3, [pc, #556]	@ (8017bc4 <HAL_UART_IRQHandler+0x2bc>)
 8017998:	4013      	ands	r3, r2
 801799a:	2b00      	cmp	r3, #0
 801799c:	f000 8116 	beq.w	8017bcc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80179a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80179a4:	f003 0301 	and.w	r3, r3, #1
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d011      	beq.n	80179d0 <HAL_UART_IRQHandler+0xc8>
 80179ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80179b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d00b      	beq.n	80179d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	2201      	movs	r2, #1
 80179be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80179c6:	f043 0201 	orr.w	r2, r3, #1
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80179d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80179d4:	f003 0302 	and.w	r3, r3, #2
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d011      	beq.n	8017a00 <HAL_UART_IRQHandler+0xf8>
 80179dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80179e0:	f003 0301 	and.w	r3, r3, #1
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d00b      	beq.n	8017a00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	2202      	movs	r2, #2
 80179ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80179f6:	f043 0204 	orr.w	r2, r3, #4
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a04:	f003 0304 	and.w	r3, r3, #4
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d011      	beq.n	8017a30 <HAL_UART_IRQHandler+0x128>
 8017a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017a10:	f003 0301 	and.w	r3, r3, #1
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d00b      	beq.n	8017a30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	2204      	movs	r2, #4
 8017a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a26:	f043 0202 	orr.w	r2, r3, #2
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a34:	f003 0308 	and.w	r3, r3, #8
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d017      	beq.n	8017a6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017a40:	f003 0320 	and.w	r3, r3, #32
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d105      	bne.n	8017a54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017a48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8017bc0 <HAL_UART_IRQHandler+0x2b8>)
 8017a4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d00b      	beq.n	8017a6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	2208      	movs	r2, #8
 8017a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a62:	f043 0208 	orr.w	r2, r3, #8
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d012      	beq.n	8017a9e <HAL_UART_IRQHandler+0x196>
 8017a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017a7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d00c      	beq.n	8017a9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a94:	f043 0220 	orr.w	r2, r3, #32
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	f000 82f9 	beq.w	801809c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017aae:	f003 0320 	and.w	r3, r3, #32
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d013      	beq.n	8017ade <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017aba:	f003 0320 	and.w	r3, r3, #32
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d105      	bne.n	8017ace <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d007      	beq.n	8017ade <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d003      	beq.n	8017ade <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	689b      	ldr	r3, [r3, #8]
 8017aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017af2:	2b40      	cmp	r3, #64	@ 0x40
 8017af4:	d005      	beq.n	8017b02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017afa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d054      	beq.n	8017bac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017b02:	6878      	ldr	r0, [r7, #4]
 8017b04:	f001 fc3e 	bl	8019384 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	689b      	ldr	r3, [r3, #8]
 8017b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017b12:	2b40      	cmp	r3, #64	@ 0x40
 8017b14:	d146      	bne.n	8017ba4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	3308      	adds	r3, #8
 8017b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017b24:	e853 3f00 	ldrex	r3, [r3]
 8017b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8017b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	3308      	adds	r3, #8
 8017b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8017b42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8017b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8017b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017b52:	e841 2300 	strex	r3, r2, [r1]
 8017b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8017b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d1d9      	bne.n	8017b16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d017      	beq.n	8017b9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b72:	4a15      	ldr	r2, [pc, #84]	@ (8017bc8 <HAL_UART_IRQHandler+0x2c0>)
 8017b74:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	f7f4 f831 	bl	800bbe4 <HAL_DMA_Abort_IT>
 8017b82:	4603      	mov	r3, r0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d019      	beq.n	8017bbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8017b96:	4610      	mov	r0, r2
 8017b98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b9a:	e00f      	b.n	8017bbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017b9c:	6878      	ldr	r0, [r7, #4]
 8017b9e:	f000 fa93 	bl	80180c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017ba2:	e00b      	b.n	8017bbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017ba4:	6878      	ldr	r0, [r7, #4]
 8017ba6:	f000 fa8f 	bl	80180c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017baa:	e007      	b.n	8017bbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	f000 fa8b 	bl	80180c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8017bba:	e26f      	b.n	801809c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017bbc:	bf00      	nop
    return;
 8017bbe:	e26d      	b.n	801809c <HAL_UART_IRQHandler+0x794>
 8017bc0:	10000001 	.word	0x10000001
 8017bc4:	04000120 	.word	0x04000120
 8017bc8:	08019451 	.word	0x08019451

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017bd0:	2b01      	cmp	r3, #1
 8017bd2:	f040 8203 	bne.w	8017fdc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017bda:	f003 0310 	and.w	r3, r3, #16
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	f000 81fc 	beq.w	8017fdc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017be8:	f003 0310 	and.w	r3, r3, #16
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	f000 81f5 	beq.w	8017fdc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	2210      	movs	r2, #16
 8017bf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	689b      	ldr	r3, [r3, #8]
 8017c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017c04:	2b40      	cmp	r3, #64	@ 0x40
 8017c06:	f040 816d 	bne.w	8017ee4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	4aa4      	ldr	r2, [pc, #656]	@ (8017ea4 <HAL_UART_IRQHandler+0x59c>)
 8017c14:	4293      	cmp	r3, r2
 8017c16:	d068      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	4aa1      	ldr	r2, [pc, #644]	@ (8017ea8 <HAL_UART_IRQHandler+0x5a0>)
 8017c22:	4293      	cmp	r3, r2
 8017c24:	d061      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	4a9f      	ldr	r2, [pc, #636]	@ (8017eac <HAL_UART_IRQHandler+0x5a4>)
 8017c30:	4293      	cmp	r3, r2
 8017c32:	d05a      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	4a9c      	ldr	r2, [pc, #624]	@ (8017eb0 <HAL_UART_IRQHandler+0x5a8>)
 8017c3e:	4293      	cmp	r3, r2
 8017c40:	d053      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	4a9a      	ldr	r2, [pc, #616]	@ (8017eb4 <HAL_UART_IRQHandler+0x5ac>)
 8017c4c:	4293      	cmp	r3, r2
 8017c4e:	d04c      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	4a97      	ldr	r2, [pc, #604]	@ (8017eb8 <HAL_UART_IRQHandler+0x5b0>)
 8017c5a:	4293      	cmp	r3, r2
 8017c5c:	d045      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	4a95      	ldr	r2, [pc, #596]	@ (8017ebc <HAL_UART_IRQHandler+0x5b4>)
 8017c68:	4293      	cmp	r3, r2
 8017c6a:	d03e      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	4a92      	ldr	r2, [pc, #584]	@ (8017ec0 <HAL_UART_IRQHandler+0x5b8>)
 8017c76:	4293      	cmp	r3, r2
 8017c78:	d037      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	4a90      	ldr	r2, [pc, #576]	@ (8017ec4 <HAL_UART_IRQHandler+0x5bc>)
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d030      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	4a8d      	ldr	r2, [pc, #564]	@ (8017ec8 <HAL_UART_IRQHandler+0x5c0>)
 8017c92:	4293      	cmp	r3, r2
 8017c94:	d029      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	4a8b      	ldr	r2, [pc, #556]	@ (8017ecc <HAL_UART_IRQHandler+0x5c4>)
 8017ca0:	4293      	cmp	r3, r2
 8017ca2:	d022      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	4a88      	ldr	r2, [pc, #544]	@ (8017ed0 <HAL_UART_IRQHandler+0x5c8>)
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	d01b      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4a86      	ldr	r2, [pc, #536]	@ (8017ed4 <HAL_UART_IRQHandler+0x5cc>)
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	d014      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	4a83      	ldr	r2, [pc, #524]	@ (8017ed8 <HAL_UART_IRQHandler+0x5d0>)
 8017cca:	4293      	cmp	r3, r2
 8017ccc:	d00d      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	4a81      	ldr	r2, [pc, #516]	@ (8017edc <HAL_UART_IRQHandler+0x5d4>)
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	d006      	beq.n	8017cea <HAL_UART_IRQHandler+0x3e2>
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	4a7e      	ldr	r2, [pc, #504]	@ (8017ee0 <HAL_UART_IRQHandler+0x5d8>)
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d106      	bne.n	8017cf8 <HAL_UART_IRQHandler+0x3f0>
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	b29b      	uxth	r3, r3
 8017cf6:	e005      	b.n	8017d04 <HAL_UART_IRQHandler+0x3fc>
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	685b      	ldr	r3, [r3, #4]
 8017d02:	b29b      	uxth	r3, r3
 8017d04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017d08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	f000 80ad 	beq.w	8017e6c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017d18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	f080 80a5 	bcs.w	8017e6c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017d28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d32:	69db      	ldr	r3, [r3, #28]
 8017d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d38:	f000 8087 	beq.w	8017e4a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017d48:	e853 3f00 	ldrex	r3, [r3]
 8017d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8017d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	461a      	mov	r2, r3
 8017d62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017d6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017d76:	e841 2300 	strex	r3, r2, [r1]
 8017d7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8017d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d1da      	bne.n	8017d3c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	3308      	adds	r3, #8
 8017d8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017d90:	e853 3f00 	ldrex	r3, [r3]
 8017d94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017d98:	f023 0301 	bic.w	r3, r3, #1
 8017d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	3308      	adds	r3, #8
 8017da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017daa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8017dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017db0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017db6:	e841 2300 	strex	r3, r2, [r1]
 8017dba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d1e1      	bne.n	8017d86 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	3308      	adds	r3, #8
 8017dc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017dcc:	e853 3f00 	ldrex	r3, [r3]
 8017dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017dd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	3308      	adds	r3, #8
 8017de2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017de6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017de8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017dec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017dee:	e841 2300 	strex	r3, r2, [r1]
 8017df2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017df4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d1e3      	bne.n	8017dc2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	2220      	movs	r2, #32
 8017dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	2200      	movs	r2, #0
 8017e06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e10:	e853 3f00 	ldrex	r3, [r3]
 8017e14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017e18:	f023 0310 	bic.w	r3, r3, #16
 8017e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	461a      	mov	r2, r3
 8017e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017e2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017e2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017e30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017e32:	e841 2300 	strex	r3, r2, [r1]
 8017e36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d1e4      	bne.n	8017e08 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e44:	4618      	mov	r0, r3
 8017e46:	f7f3 fbaf 	bl	800b5a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2202      	movs	r2, #2
 8017e4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017e5c:	b29b      	uxth	r3, r3
 8017e5e:	1ad3      	subs	r3, r2, r3
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	4619      	mov	r1, r3
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f000 f939 	bl	80180dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8017e6a:	e119      	b.n	80180a0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017e76:	429a      	cmp	r2, r3
 8017e78:	f040 8112 	bne.w	80180a0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e82:	69db      	ldr	r3, [r3, #28]
 8017e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e88:	f040 810a 	bne.w	80180a0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	2202      	movs	r2, #2
 8017e90:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017e98:	4619      	mov	r1, r3
 8017e9a:	6878      	ldr	r0, [r7, #4]
 8017e9c:	f000 f91e 	bl	80180dc <HAL_UARTEx_RxEventCallback>
      return;
 8017ea0:	e0fe      	b.n	80180a0 <HAL_UART_IRQHandler+0x798>
 8017ea2:	bf00      	nop
 8017ea4:	40020010 	.word	0x40020010
 8017ea8:	40020028 	.word	0x40020028
 8017eac:	40020040 	.word	0x40020040
 8017eb0:	40020058 	.word	0x40020058
 8017eb4:	40020070 	.word	0x40020070
 8017eb8:	40020088 	.word	0x40020088
 8017ebc:	400200a0 	.word	0x400200a0
 8017ec0:	400200b8 	.word	0x400200b8
 8017ec4:	40020410 	.word	0x40020410
 8017ec8:	40020428 	.word	0x40020428
 8017ecc:	40020440 	.word	0x40020440
 8017ed0:	40020458 	.word	0x40020458
 8017ed4:	40020470 	.word	0x40020470
 8017ed8:	40020488 	.word	0x40020488
 8017edc:	400204a0 	.word	0x400204a0
 8017ee0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017ef0:	b29b      	uxth	r3, r3
 8017ef2:	1ad3      	subs	r3, r2, r3
 8017ef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	f000 80cf 	beq.w	80180a4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8017f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	f000 80ca 	beq.w	80180a4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f18:	e853 3f00 	ldrex	r3, [r3]
 8017f1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017f24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	461a      	mov	r2, r3
 8017f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8017f34:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017f38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017f3a:	e841 2300 	strex	r3, r2, [r1]
 8017f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d1e4      	bne.n	8017f10 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	3308      	adds	r3, #8
 8017f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f50:	e853 3f00 	ldrex	r3, [r3]
 8017f54:	623b      	str	r3, [r7, #32]
   return(result);
 8017f56:	6a3a      	ldr	r2, [r7, #32]
 8017f58:	4b55      	ldr	r3, [pc, #340]	@ (80180b0 <HAL_UART_IRQHandler+0x7a8>)
 8017f5a:	4013      	ands	r3, r2
 8017f5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	3308      	adds	r3, #8
 8017f66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8017f6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8017f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f72:	e841 2300 	strex	r3, r2, [r1]
 8017f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d1e3      	bne.n	8017f46 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2220      	movs	r2, #32
 8017f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	2200      	movs	r2, #0
 8017f8a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2200      	movs	r2, #0
 8017f90:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f98:	693b      	ldr	r3, [r7, #16]
 8017f9a:	e853 3f00 	ldrex	r3, [r3]
 8017f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	f023 0310 	bic.w	r3, r3, #16
 8017fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	461a      	mov	r2, r3
 8017fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8017fb4:	61fb      	str	r3, [r7, #28]
 8017fb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fb8:	69b9      	ldr	r1, [r7, #24]
 8017fba:	69fa      	ldr	r2, [r7, #28]
 8017fbc:	e841 2300 	strex	r3, r2, [r1]
 8017fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d1e4      	bne.n	8017f92 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	2202      	movs	r2, #2
 8017fcc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017fce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017fd2:	4619      	mov	r1, r3
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f000 f881 	bl	80180dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017fda:	e063      	b.n	80180a4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d00e      	beq.n	8018006 <HAL_UART_IRQHandler+0x6fe>
 8017fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d008      	beq.n	8018006 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8017ffc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f002 f926 	bl	801a250 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018004:	e051      	b.n	80180aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8018006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801800a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801800e:	2b00      	cmp	r3, #0
 8018010:	d014      	beq.n	801803c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8018012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801801a:	2b00      	cmp	r3, #0
 801801c:	d105      	bne.n	801802a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801801e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018026:	2b00      	cmp	r3, #0
 8018028:	d008      	beq.n	801803c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801802e:	2b00      	cmp	r3, #0
 8018030:	d03a      	beq.n	80180a8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	4798      	blx	r3
    }
    return;
 801803a:	e035      	b.n	80180a8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801803c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018044:	2b00      	cmp	r3, #0
 8018046:	d009      	beq.n	801805c <HAL_UART_IRQHandler+0x754>
 8018048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801804c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018050:	2b00      	cmp	r3, #0
 8018052:	d003      	beq.n	801805c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8018054:	6878      	ldr	r0, [r7, #4]
 8018056:	f001 fbaf 	bl	80197b8 <UART_EndTransmit_IT>
    return;
 801805a:	e026      	b.n	80180aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801805c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018060:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018064:	2b00      	cmp	r3, #0
 8018066:	d009      	beq.n	801807c <HAL_UART_IRQHandler+0x774>
 8018068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801806c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018070:	2b00      	cmp	r3, #0
 8018072:	d003      	beq.n	801807c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8018074:	6878      	ldr	r0, [r7, #4]
 8018076:	f002 f8ff 	bl	801a278 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801807a:	e016      	b.n	80180aa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018084:	2b00      	cmp	r3, #0
 8018086:	d010      	beq.n	80180aa <HAL_UART_IRQHandler+0x7a2>
 8018088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801808c:	2b00      	cmp	r3, #0
 801808e:	da0c      	bge.n	80180aa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018090:	6878      	ldr	r0, [r7, #4]
 8018092:	f002 f8e7 	bl	801a264 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018096:	e008      	b.n	80180aa <HAL_UART_IRQHandler+0x7a2>
      return;
 8018098:	bf00      	nop
 801809a:	e006      	b.n	80180aa <HAL_UART_IRQHandler+0x7a2>
    return;
 801809c:	bf00      	nop
 801809e:	e004      	b.n	80180aa <HAL_UART_IRQHandler+0x7a2>
      return;
 80180a0:	bf00      	nop
 80180a2:	e002      	b.n	80180aa <HAL_UART_IRQHandler+0x7a2>
      return;
 80180a4:	bf00      	nop
 80180a6:	e000      	b.n	80180aa <HAL_UART_IRQHandler+0x7a2>
    return;
 80180a8:	bf00      	nop
  }
}
 80180aa:	37e8      	adds	r7, #232	@ 0xe8
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}
 80180b0:	effffffe 	.word	0xeffffffe

080180b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80180b4:	b480      	push	{r7}
 80180b6:	b083      	sub	sp, #12
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80180bc:	bf00      	nop
 80180be:	370c      	adds	r7, #12
 80180c0:	46bd      	mov	sp, r7
 80180c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c6:	4770      	bx	lr

080180c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80180c8:	b480      	push	{r7}
 80180ca:	b083      	sub	sp, #12
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80180d0:	bf00      	nop
 80180d2:	370c      	adds	r7, #12
 80180d4:	46bd      	mov	sp, r7
 80180d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180da:	4770      	bx	lr

080180dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80180dc:	b480      	push	{r7}
 80180de:	b083      	sub	sp, #12
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
 80180e4:	460b      	mov	r3, r1
 80180e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80180e8:	bf00      	nop
 80180ea:	370c      	adds	r7, #12
 80180ec:	46bd      	mov	sp, r7
 80180ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f2:	4770      	bx	lr

080180f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80180f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80180f8:	b092      	sub	sp, #72	@ 0x48
 80180fa:	af00      	add	r7, sp, #0
 80180fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80180fe:	2300      	movs	r3, #0
 8018100:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	689a      	ldr	r2, [r3, #8]
 8018108:	697b      	ldr	r3, [r7, #20]
 801810a:	691b      	ldr	r3, [r3, #16]
 801810c:	431a      	orrs	r2, r3
 801810e:	697b      	ldr	r3, [r7, #20]
 8018110:	695b      	ldr	r3, [r3, #20]
 8018112:	431a      	orrs	r2, r3
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	69db      	ldr	r3, [r3, #28]
 8018118:	4313      	orrs	r3, r2
 801811a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801811c:	697b      	ldr	r3, [r7, #20]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	681a      	ldr	r2, [r3, #0]
 8018122:	4bbe      	ldr	r3, [pc, #760]	@ (801841c <UART_SetConfig+0x328>)
 8018124:	4013      	ands	r3, r2
 8018126:	697a      	ldr	r2, [r7, #20]
 8018128:	6812      	ldr	r2, [r2, #0]
 801812a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801812c:	430b      	orrs	r3, r1
 801812e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018130:	697b      	ldr	r3, [r7, #20]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	685b      	ldr	r3, [r3, #4]
 8018136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	68da      	ldr	r2, [r3, #12]
 801813e:	697b      	ldr	r3, [r7, #20]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	430a      	orrs	r2, r1
 8018144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018146:	697b      	ldr	r3, [r7, #20]
 8018148:	699b      	ldr	r3, [r3, #24]
 801814a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801814c:	697b      	ldr	r3, [r7, #20]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	4ab3      	ldr	r2, [pc, #716]	@ (8018420 <UART_SetConfig+0x32c>)
 8018152:	4293      	cmp	r3, r2
 8018154:	d004      	beq.n	8018160 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	6a1b      	ldr	r3, [r3, #32]
 801815a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801815c:	4313      	orrs	r3, r2
 801815e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018160:	697b      	ldr	r3, [r7, #20]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	689a      	ldr	r2, [r3, #8]
 8018166:	4baf      	ldr	r3, [pc, #700]	@ (8018424 <UART_SetConfig+0x330>)
 8018168:	4013      	ands	r3, r2
 801816a:	697a      	ldr	r2, [r7, #20]
 801816c:	6812      	ldr	r2, [r2, #0]
 801816e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018170:	430b      	orrs	r3, r1
 8018172:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018174:	697b      	ldr	r3, [r7, #20]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801817a:	f023 010f 	bic.w	r1, r3, #15
 801817e:	697b      	ldr	r3, [r7, #20]
 8018180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018182:	697b      	ldr	r3, [r7, #20]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	430a      	orrs	r2, r1
 8018188:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801818a:	697b      	ldr	r3, [r7, #20]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	4aa6      	ldr	r2, [pc, #664]	@ (8018428 <UART_SetConfig+0x334>)
 8018190:	4293      	cmp	r3, r2
 8018192:	d177      	bne.n	8018284 <UART_SetConfig+0x190>
 8018194:	4ba5      	ldr	r3, [pc, #660]	@ (801842c <UART_SetConfig+0x338>)
 8018196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801819c:	2b28      	cmp	r3, #40	@ 0x28
 801819e:	d86d      	bhi.n	801827c <UART_SetConfig+0x188>
 80181a0:	a201      	add	r2, pc, #4	@ (adr r2, 80181a8 <UART_SetConfig+0xb4>)
 80181a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181a6:	bf00      	nop
 80181a8:	0801824d 	.word	0x0801824d
 80181ac:	0801827d 	.word	0x0801827d
 80181b0:	0801827d 	.word	0x0801827d
 80181b4:	0801827d 	.word	0x0801827d
 80181b8:	0801827d 	.word	0x0801827d
 80181bc:	0801827d 	.word	0x0801827d
 80181c0:	0801827d 	.word	0x0801827d
 80181c4:	0801827d 	.word	0x0801827d
 80181c8:	08018255 	.word	0x08018255
 80181cc:	0801827d 	.word	0x0801827d
 80181d0:	0801827d 	.word	0x0801827d
 80181d4:	0801827d 	.word	0x0801827d
 80181d8:	0801827d 	.word	0x0801827d
 80181dc:	0801827d 	.word	0x0801827d
 80181e0:	0801827d 	.word	0x0801827d
 80181e4:	0801827d 	.word	0x0801827d
 80181e8:	0801825d 	.word	0x0801825d
 80181ec:	0801827d 	.word	0x0801827d
 80181f0:	0801827d 	.word	0x0801827d
 80181f4:	0801827d 	.word	0x0801827d
 80181f8:	0801827d 	.word	0x0801827d
 80181fc:	0801827d 	.word	0x0801827d
 8018200:	0801827d 	.word	0x0801827d
 8018204:	0801827d 	.word	0x0801827d
 8018208:	08018265 	.word	0x08018265
 801820c:	0801827d 	.word	0x0801827d
 8018210:	0801827d 	.word	0x0801827d
 8018214:	0801827d 	.word	0x0801827d
 8018218:	0801827d 	.word	0x0801827d
 801821c:	0801827d 	.word	0x0801827d
 8018220:	0801827d 	.word	0x0801827d
 8018224:	0801827d 	.word	0x0801827d
 8018228:	0801826d 	.word	0x0801826d
 801822c:	0801827d 	.word	0x0801827d
 8018230:	0801827d 	.word	0x0801827d
 8018234:	0801827d 	.word	0x0801827d
 8018238:	0801827d 	.word	0x0801827d
 801823c:	0801827d 	.word	0x0801827d
 8018240:	0801827d 	.word	0x0801827d
 8018244:	0801827d 	.word	0x0801827d
 8018248:	08018275 	.word	0x08018275
 801824c:	2301      	movs	r3, #1
 801824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018252:	e326      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018254:	2304      	movs	r3, #4
 8018256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801825a:	e322      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801825c:	2308      	movs	r3, #8
 801825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018262:	e31e      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018264:	2310      	movs	r3, #16
 8018266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801826a:	e31a      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801826c:	2320      	movs	r3, #32
 801826e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018272:	e316      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018274:	2340      	movs	r3, #64	@ 0x40
 8018276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801827a:	e312      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801827c:	2380      	movs	r3, #128	@ 0x80
 801827e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018282:	e30e      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018284:	697b      	ldr	r3, [r7, #20]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	4a69      	ldr	r2, [pc, #420]	@ (8018430 <UART_SetConfig+0x33c>)
 801828a:	4293      	cmp	r3, r2
 801828c:	d130      	bne.n	80182f0 <UART_SetConfig+0x1fc>
 801828e:	4b67      	ldr	r3, [pc, #412]	@ (801842c <UART_SetConfig+0x338>)
 8018290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018292:	f003 0307 	and.w	r3, r3, #7
 8018296:	2b05      	cmp	r3, #5
 8018298:	d826      	bhi.n	80182e8 <UART_SetConfig+0x1f4>
 801829a:	a201      	add	r2, pc, #4	@ (adr r2, 80182a0 <UART_SetConfig+0x1ac>)
 801829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182a0:	080182b9 	.word	0x080182b9
 80182a4:	080182c1 	.word	0x080182c1
 80182a8:	080182c9 	.word	0x080182c9
 80182ac:	080182d1 	.word	0x080182d1
 80182b0:	080182d9 	.word	0x080182d9
 80182b4:	080182e1 	.word	0x080182e1
 80182b8:	2300      	movs	r3, #0
 80182ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182be:	e2f0      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80182c0:	2304      	movs	r3, #4
 80182c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182c6:	e2ec      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80182c8:	2308      	movs	r3, #8
 80182ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182ce:	e2e8      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80182d0:	2310      	movs	r3, #16
 80182d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182d6:	e2e4      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80182d8:	2320      	movs	r3, #32
 80182da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182de:	e2e0      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80182e0:	2340      	movs	r3, #64	@ 0x40
 80182e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182e6:	e2dc      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80182e8:	2380      	movs	r3, #128	@ 0x80
 80182ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80182ee:	e2d8      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80182f0:	697b      	ldr	r3, [r7, #20]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	4a4f      	ldr	r2, [pc, #316]	@ (8018434 <UART_SetConfig+0x340>)
 80182f6:	4293      	cmp	r3, r2
 80182f8:	d130      	bne.n	801835c <UART_SetConfig+0x268>
 80182fa:	4b4c      	ldr	r3, [pc, #304]	@ (801842c <UART_SetConfig+0x338>)
 80182fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80182fe:	f003 0307 	and.w	r3, r3, #7
 8018302:	2b05      	cmp	r3, #5
 8018304:	d826      	bhi.n	8018354 <UART_SetConfig+0x260>
 8018306:	a201      	add	r2, pc, #4	@ (adr r2, 801830c <UART_SetConfig+0x218>)
 8018308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801830c:	08018325 	.word	0x08018325
 8018310:	0801832d 	.word	0x0801832d
 8018314:	08018335 	.word	0x08018335
 8018318:	0801833d 	.word	0x0801833d
 801831c:	08018345 	.word	0x08018345
 8018320:	0801834d 	.word	0x0801834d
 8018324:	2300      	movs	r3, #0
 8018326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801832a:	e2ba      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801832c:	2304      	movs	r3, #4
 801832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018332:	e2b6      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018334:	2308      	movs	r3, #8
 8018336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801833a:	e2b2      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801833c:	2310      	movs	r3, #16
 801833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018342:	e2ae      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018344:	2320      	movs	r3, #32
 8018346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801834a:	e2aa      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801834c:	2340      	movs	r3, #64	@ 0x40
 801834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018352:	e2a6      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018354:	2380      	movs	r3, #128	@ 0x80
 8018356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801835a:	e2a2      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	4a35      	ldr	r2, [pc, #212]	@ (8018438 <UART_SetConfig+0x344>)
 8018362:	4293      	cmp	r3, r2
 8018364:	d130      	bne.n	80183c8 <UART_SetConfig+0x2d4>
 8018366:	4b31      	ldr	r3, [pc, #196]	@ (801842c <UART_SetConfig+0x338>)
 8018368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801836a:	f003 0307 	and.w	r3, r3, #7
 801836e:	2b05      	cmp	r3, #5
 8018370:	d826      	bhi.n	80183c0 <UART_SetConfig+0x2cc>
 8018372:	a201      	add	r2, pc, #4	@ (adr r2, 8018378 <UART_SetConfig+0x284>)
 8018374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018378:	08018391 	.word	0x08018391
 801837c:	08018399 	.word	0x08018399
 8018380:	080183a1 	.word	0x080183a1
 8018384:	080183a9 	.word	0x080183a9
 8018388:	080183b1 	.word	0x080183b1
 801838c:	080183b9 	.word	0x080183b9
 8018390:	2300      	movs	r3, #0
 8018392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018396:	e284      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018398:	2304      	movs	r3, #4
 801839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801839e:	e280      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80183a0:	2308      	movs	r3, #8
 80183a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183a6:	e27c      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80183a8:	2310      	movs	r3, #16
 80183aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183ae:	e278      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80183b0:	2320      	movs	r3, #32
 80183b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183b6:	e274      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80183b8:	2340      	movs	r3, #64	@ 0x40
 80183ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183be:	e270      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80183c0:	2380      	movs	r3, #128	@ 0x80
 80183c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183c6:	e26c      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80183c8:	697b      	ldr	r3, [r7, #20]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	4a1b      	ldr	r2, [pc, #108]	@ (801843c <UART_SetConfig+0x348>)
 80183ce:	4293      	cmp	r3, r2
 80183d0:	d142      	bne.n	8018458 <UART_SetConfig+0x364>
 80183d2:	4b16      	ldr	r3, [pc, #88]	@ (801842c <UART_SetConfig+0x338>)
 80183d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183d6:	f003 0307 	and.w	r3, r3, #7
 80183da:	2b05      	cmp	r3, #5
 80183dc:	d838      	bhi.n	8018450 <UART_SetConfig+0x35c>
 80183de:	a201      	add	r2, pc, #4	@ (adr r2, 80183e4 <UART_SetConfig+0x2f0>)
 80183e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183e4:	080183fd 	.word	0x080183fd
 80183e8:	08018405 	.word	0x08018405
 80183ec:	0801840d 	.word	0x0801840d
 80183f0:	08018415 	.word	0x08018415
 80183f4:	08018441 	.word	0x08018441
 80183f8:	08018449 	.word	0x08018449
 80183fc:	2300      	movs	r3, #0
 80183fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018402:	e24e      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018404:	2304      	movs	r3, #4
 8018406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801840a:	e24a      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801840c:	2308      	movs	r3, #8
 801840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018412:	e246      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018414:	2310      	movs	r3, #16
 8018416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801841a:	e242      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801841c:	cfff69f3 	.word	0xcfff69f3
 8018420:	58000c00 	.word	0x58000c00
 8018424:	11fff4ff 	.word	0x11fff4ff
 8018428:	40011000 	.word	0x40011000
 801842c:	58024400 	.word	0x58024400
 8018430:	40004400 	.word	0x40004400
 8018434:	40004800 	.word	0x40004800
 8018438:	40004c00 	.word	0x40004c00
 801843c:	40005000 	.word	0x40005000
 8018440:	2320      	movs	r3, #32
 8018442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018446:	e22c      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018448:	2340      	movs	r3, #64	@ 0x40
 801844a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801844e:	e228      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018450:	2380      	movs	r3, #128	@ 0x80
 8018452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018456:	e224      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018458:	697b      	ldr	r3, [r7, #20]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	4ab1      	ldr	r2, [pc, #708]	@ (8018724 <UART_SetConfig+0x630>)
 801845e:	4293      	cmp	r3, r2
 8018460:	d176      	bne.n	8018550 <UART_SetConfig+0x45c>
 8018462:	4bb1      	ldr	r3, [pc, #708]	@ (8018728 <UART_SetConfig+0x634>)
 8018464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801846a:	2b28      	cmp	r3, #40	@ 0x28
 801846c:	d86c      	bhi.n	8018548 <UART_SetConfig+0x454>
 801846e:	a201      	add	r2, pc, #4	@ (adr r2, 8018474 <UART_SetConfig+0x380>)
 8018470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018474:	08018519 	.word	0x08018519
 8018478:	08018549 	.word	0x08018549
 801847c:	08018549 	.word	0x08018549
 8018480:	08018549 	.word	0x08018549
 8018484:	08018549 	.word	0x08018549
 8018488:	08018549 	.word	0x08018549
 801848c:	08018549 	.word	0x08018549
 8018490:	08018549 	.word	0x08018549
 8018494:	08018521 	.word	0x08018521
 8018498:	08018549 	.word	0x08018549
 801849c:	08018549 	.word	0x08018549
 80184a0:	08018549 	.word	0x08018549
 80184a4:	08018549 	.word	0x08018549
 80184a8:	08018549 	.word	0x08018549
 80184ac:	08018549 	.word	0x08018549
 80184b0:	08018549 	.word	0x08018549
 80184b4:	08018529 	.word	0x08018529
 80184b8:	08018549 	.word	0x08018549
 80184bc:	08018549 	.word	0x08018549
 80184c0:	08018549 	.word	0x08018549
 80184c4:	08018549 	.word	0x08018549
 80184c8:	08018549 	.word	0x08018549
 80184cc:	08018549 	.word	0x08018549
 80184d0:	08018549 	.word	0x08018549
 80184d4:	08018531 	.word	0x08018531
 80184d8:	08018549 	.word	0x08018549
 80184dc:	08018549 	.word	0x08018549
 80184e0:	08018549 	.word	0x08018549
 80184e4:	08018549 	.word	0x08018549
 80184e8:	08018549 	.word	0x08018549
 80184ec:	08018549 	.word	0x08018549
 80184f0:	08018549 	.word	0x08018549
 80184f4:	08018539 	.word	0x08018539
 80184f8:	08018549 	.word	0x08018549
 80184fc:	08018549 	.word	0x08018549
 8018500:	08018549 	.word	0x08018549
 8018504:	08018549 	.word	0x08018549
 8018508:	08018549 	.word	0x08018549
 801850c:	08018549 	.word	0x08018549
 8018510:	08018549 	.word	0x08018549
 8018514:	08018541 	.word	0x08018541
 8018518:	2301      	movs	r3, #1
 801851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801851e:	e1c0      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018520:	2304      	movs	r3, #4
 8018522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018526:	e1bc      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018528:	2308      	movs	r3, #8
 801852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801852e:	e1b8      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018530:	2310      	movs	r3, #16
 8018532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018536:	e1b4      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018538:	2320      	movs	r3, #32
 801853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801853e:	e1b0      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018540:	2340      	movs	r3, #64	@ 0x40
 8018542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018546:	e1ac      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018548:	2380      	movs	r3, #128	@ 0x80
 801854a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801854e:	e1a8      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018550:	697b      	ldr	r3, [r7, #20]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	4a75      	ldr	r2, [pc, #468]	@ (801872c <UART_SetConfig+0x638>)
 8018556:	4293      	cmp	r3, r2
 8018558:	d130      	bne.n	80185bc <UART_SetConfig+0x4c8>
 801855a:	4b73      	ldr	r3, [pc, #460]	@ (8018728 <UART_SetConfig+0x634>)
 801855c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801855e:	f003 0307 	and.w	r3, r3, #7
 8018562:	2b05      	cmp	r3, #5
 8018564:	d826      	bhi.n	80185b4 <UART_SetConfig+0x4c0>
 8018566:	a201      	add	r2, pc, #4	@ (adr r2, 801856c <UART_SetConfig+0x478>)
 8018568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801856c:	08018585 	.word	0x08018585
 8018570:	0801858d 	.word	0x0801858d
 8018574:	08018595 	.word	0x08018595
 8018578:	0801859d 	.word	0x0801859d
 801857c:	080185a5 	.word	0x080185a5
 8018580:	080185ad 	.word	0x080185ad
 8018584:	2300      	movs	r3, #0
 8018586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801858a:	e18a      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801858c:	2304      	movs	r3, #4
 801858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018592:	e186      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018594:	2308      	movs	r3, #8
 8018596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801859a:	e182      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801859c:	2310      	movs	r3, #16
 801859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185a2:	e17e      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80185a4:	2320      	movs	r3, #32
 80185a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185aa:	e17a      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80185ac:	2340      	movs	r3, #64	@ 0x40
 80185ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185b2:	e176      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80185b4:	2380      	movs	r3, #128	@ 0x80
 80185b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ba:	e172      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80185bc:	697b      	ldr	r3, [r7, #20]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4a5b      	ldr	r2, [pc, #364]	@ (8018730 <UART_SetConfig+0x63c>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d130      	bne.n	8018628 <UART_SetConfig+0x534>
 80185c6:	4b58      	ldr	r3, [pc, #352]	@ (8018728 <UART_SetConfig+0x634>)
 80185c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185ca:	f003 0307 	and.w	r3, r3, #7
 80185ce:	2b05      	cmp	r3, #5
 80185d0:	d826      	bhi.n	8018620 <UART_SetConfig+0x52c>
 80185d2:	a201      	add	r2, pc, #4	@ (adr r2, 80185d8 <UART_SetConfig+0x4e4>)
 80185d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185d8:	080185f1 	.word	0x080185f1
 80185dc:	080185f9 	.word	0x080185f9
 80185e0:	08018601 	.word	0x08018601
 80185e4:	08018609 	.word	0x08018609
 80185e8:	08018611 	.word	0x08018611
 80185ec:	08018619 	.word	0x08018619
 80185f0:	2300      	movs	r3, #0
 80185f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185f6:	e154      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80185f8:	2304      	movs	r3, #4
 80185fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185fe:	e150      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018600:	2308      	movs	r3, #8
 8018602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018606:	e14c      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018608:	2310      	movs	r3, #16
 801860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801860e:	e148      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018610:	2320      	movs	r3, #32
 8018612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018616:	e144      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018618:	2340      	movs	r3, #64	@ 0x40
 801861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801861e:	e140      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018620:	2380      	movs	r3, #128	@ 0x80
 8018622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018626:	e13c      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018628:	697b      	ldr	r3, [r7, #20]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	4a41      	ldr	r2, [pc, #260]	@ (8018734 <UART_SetConfig+0x640>)
 801862e:	4293      	cmp	r3, r2
 8018630:	f040 8082 	bne.w	8018738 <UART_SetConfig+0x644>
 8018634:	4b3c      	ldr	r3, [pc, #240]	@ (8018728 <UART_SetConfig+0x634>)
 8018636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801863c:	2b28      	cmp	r3, #40	@ 0x28
 801863e:	d86d      	bhi.n	801871c <UART_SetConfig+0x628>
 8018640:	a201      	add	r2, pc, #4	@ (adr r2, 8018648 <UART_SetConfig+0x554>)
 8018642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018646:	bf00      	nop
 8018648:	080186ed 	.word	0x080186ed
 801864c:	0801871d 	.word	0x0801871d
 8018650:	0801871d 	.word	0x0801871d
 8018654:	0801871d 	.word	0x0801871d
 8018658:	0801871d 	.word	0x0801871d
 801865c:	0801871d 	.word	0x0801871d
 8018660:	0801871d 	.word	0x0801871d
 8018664:	0801871d 	.word	0x0801871d
 8018668:	080186f5 	.word	0x080186f5
 801866c:	0801871d 	.word	0x0801871d
 8018670:	0801871d 	.word	0x0801871d
 8018674:	0801871d 	.word	0x0801871d
 8018678:	0801871d 	.word	0x0801871d
 801867c:	0801871d 	.word	0x0801871d
 8018680:	0801871d 	.word	0x0801871d
 8018684:	0801871d 	.word	0x0801871d
 8018688:	080186fd 	.word	0x080186fd
 801868c:	0801871d 	.word	0x0801871d
 8018690:	0801871d 	.word	0x0801871d
 8018694:	0801871d 	.word	0x0801871d
 8018698:	0801871d 	.word	0x0801871d
 801869c:	0801871d 	.word	0x0801871d
 80186a0:	0801871d 	.word	0x0801871d
 80186a4:	0801871d 	.word	0x0801871d
 80186a8:	08018705 	.word	0x08018705
 80186ac:	0801871d 	.word	0x0801871d
 80186b0:	0801871d 	.word	0x0801871d
 80186b4:	0801871d 	.word	0x0801871d
 80186b8:	0801871d 	.word	0x0801871d
 80186bc:	0801871d 	.word	0x0801871d
 80186c0:	0801871d 	.word	0x0801871d
 80186c4:	0801871d 	.word	0x0801871d
 80186c8:	0801870d 	.word	0x0801870d
 80186cc:	0801871d 	.word	0x0801871d
 80186d0:	0801871d 	.word	0x0801871d
 80186d4:	0801871d 	.word	0x0801871d
 80186d8:	0801871d 	.word	0x0801871d
 80186dc:	0801871d 	.word	0x0801871d
 80186e0:	0801871d 	.word	0x0801871d
 80186e4:	0801871d 	.word	0x0801871d
 80186e8:	08018715 	.word	0x08018715
 80186ec:	2301      	movs	r3, #1
 80186ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186f2:	e0d6      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80186f4:	2304      	movs	r3, #4
 80186f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186fa:	e0d2      	b.n	80188a2 <UART_SetConfig+0x7ae>
 80186fc:	2308      	movs	r3, #8
 80186fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018702:	e0ce      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018704:	2310      	movs	r3, #16
 8018706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801870a:	e0ca      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801870c:	2320      	movs	r3, #32
 801870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018712:	e0c6      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018714:	2340      	movs	r3, #64	@ 0x40
 8018716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801871a:	e0c2      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801871c:	2380      	movs	r3, #128	@ 0x80
 801871e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018722:	e0be      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018724:	40011400 	.word	0x40011400
 8018728:	58024400 	.word	0x58024400
 801872c:	40007800 	.word	0x40007800
 8018730:	40007c00 	.word	0x40007c00
 8018734:	40011800 	.word	0x40011800
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	4aad      	ldr	r2, [pc, #692]	@ (80189f4 <UART_SetConfig+0x900>)
 801873e:	4293      	cmp	r3, r2
 8018740:	d176      	bne.n	8018830 <UART_SetConfig+0x73c>
 8018742:	4bad      	ldr	r3, [pc, #692]	@ (80189f8 <UART_SetConfig+0x904>)
 8018744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801874a:	2b28      	cmp	r3, #40	@ 0x28
 801874c:	d86c      	bhi.n	8018828 <UART_SetConfig+0x734>
 801874e:	a201      	add	r2, pc, #4	@ (adr r2, 8018754 <UART_SetConfig+0x660>)
 8018750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018754:	080187f9 	.word	0x080187f9
 8018758:	08018829 	.word	0x08018829
 801875c:	08018829 	.word	0x08018829
 8018760:	08018829 	.word	0x08018829
 8018764:	08018829 	.word	0x08018829
 8018768:	08018829 	.word	0x08018829
 801876c:	08018829 	.word	0x08018829
 8018770:	08018829 	.word	0x08018829
 8018774:	08018801 	.word	0x08018801
 8018778:	08018829 	.word	0x08018829
 801877c:	08018829 	.word	0x08018829
 8018780:	08018829 	.word	0x08018829
 8018784:	08018829 	.word	0x08018829
 8018788:	08018829 	.word	0x08018829
 801878c:	08018829 	.word	0x08018829
 8018790:	08018829 	.word	0x08018829
 8018794:	08018809 	.word	0x08018809
 8018798:	08018829 	.word	0x08018829
 801879c:	08018829 	.word	0x08018829
 80187a0:	08018829 	.word	0x08018829
 80187a4:	08018829 	.word	0x08018829
 80187a8:	08018829 	.word	0x08018829
 80187ac:	08018829 	.word	0x08018829
 80187b0:	08018829 	.word	0x08018829
 80187b4:	08018811 	.word	0x08018811
 80187b8:	08018829 	.word	0x08018829
 80187bc:	08018829 	.word	0x08018829
 80187c0:	08018829 	.word	0x08018829
 80187c4:	08018829 	.word	0x08018829
 80187c8:	08018829 	.word	0x08018829
 80187cc:	08018829 	.word	0x08018829
 80187d0:	08018829 	.word	0x08018829
 80187d4:	08018819 	.word	0x08018819
 80187d8:	08018829 	.word	0x08018829
 80187dc:	08018829 	.word	0x08018829
 80187e0:	08018829 	.word	0x08018829
 80187e4:	08018829 	.word	0x08018829
 80187e8:	08018829 	.word	0x08018829
 80187ec:	08018829 	.word	0x08018829
 80187f0:	08018829 	.word	0x08018829
 80187f4:	08018821 	.word	0x08018821
 80187f8:	2301      	movs	r3, #1
 80187fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187fe:	e050      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018800:	2304      	movs	r3, #4
 8018802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018806:	e04c      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018808:	2308      	movs	r3, #8
 801880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801880e:	e048      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018810:	2310      	movs	r3, #16
 8018812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018816:	e044      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018818:	2320      	movs	r3, #32
 801881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801881e:	e040      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018820:	2340      	movs	r3, #64	@ 0x40
 8018822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018826:	e03c      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018828:	2380      	movs	r3, #128	@ 0x80
 801882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801882e:	e038      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018830:	697b      	ldr	r3, [r7, #20]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	4a71      	ldr	r2, [pc, #452]	@ (80189fc <UART_SetConfig+0x908>)
 8018836:	4293      	cmp	r3, r2
 8018838:	d130      	bne.n	801889c <UART_SetConfig+0x7a8>
 801883a:	4b6f      	ldr	r3, [pc, #444]	@ (80189f8 <UART_SetConfig+0x904>)
 801883c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801883e:	f003 0307 	and.w	r3, r3, #7
 8018842:	2b05      	cmp	r3, #5
 8018844:	d826      	bhi.n	8018894 <UART_SetConfig+0x7a0>
 8018846:	a201      	add	r2, pc, #4	@ (adr r2, 801884c <UART_SetConfig+0x758>)
 8018848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801884c:	08018865 	.word	0x08018865
 8018850:	0801886d 	.word	0x0801886d
 8018854:	08018875 	.word	0x08018875
 8018858:	0801887d 	.word	0x0801887d
 801885c:	08018885 	.word	0x08018885
 8018860:	0801888d 	.word	0x0801888d
 8018864:	2302      	movs	r3, #2
 8018866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801886a:	e01a      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801886c:	2304      	movs	r3, #4
 801886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018872:	e016      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018874:	2308      	movs	r3, #8
 8018876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801887a:	e012      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801887c:	2310      	movs	r3, #16
 801887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018882:	e00e      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018884:	2320      	movs	r3, #32
 8018886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801888a:	e00a      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801888c:	2340      	movs	r3, #64	@ 0x40
 801888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018892:	e006      	b.n	80188a2 <UART_SetConfig+0x7ae>
 8018894:	2380      	movs	r3, #128	@ 0x80
 8018896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801889a:	e002      	b.n	80188a2 <UART_SetConfig+0x7ae>
 801889c:	2380      	movs	r3, #128	@ 0x80
 801889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	4a55      	ldr	r2, [pc, #340]	@ (80189fc <UART_SetConfig+0x908>)
 80188a8:	4293      	cmp	r3, r2
 80188aa:	f040 80f8 	bne.w	8018a9e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80188ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80188b2:	2b20      	cmp	r3, #32
 80188b4:	dc46      	bgt.n	8018944 <UART_SetConfig+0x850>
 80188b6:	2b02      	cmp	r3, #2
 80188b8:	db75      	blt.n	80189a6 <UART_SetConfig+0x8b2>
 80188ba:	3b02      	subs	r3, #2
 80188bc:	2b1e      	cmp	r3, #30
 80188be:	d872      	bhi.n	80189a6 <UART_SetConfig+0x8b2>
 80188c0:	a201      	add	r2, pc, #4	@ (adr r2, 80188c8 <UART_SetConfig+0x7d4>)
 80188c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188c6:	bf00      	nop
 80188c8:	0801894b 	.word	0x0801894b
 80188cc:	080189a7 	.word	0x080189a7
 80188d0:	08018953 	.word	0x08018953
 80188d4:	080189a7 	.word	0x080189a7
 80188d8:	080189a7 	.word	0x080189a7
 80188dc:	080189a7 	.word	0x080189a7
 80188e0:	08018963 	.word	0x08018963
 80188e4:	080189a7 	.word	0x080189a7
 80188e8:	080189a7 	.word	0x080189a7
 80188ec:	080189a7 	.word	0x080189a7
 80188f0:	080189a7 	.word	0x080189a7
 80188f4:	080189a7 	.word	0x080189a7
 80188f8:	080189a7 	.word	0x080189a7
 80188fc:	080189a7 	.word	0x080189a7
 8018900:	08018973 	.word	0x08018973
 8018904:	080189a7 	.word	0x080189a7
 8018908:	080189a7 	.word	0x080189a7
 801890c:	080189a7 	.word	0x080189a7
 8018910:	080189a7 	.word	0x080189a7
 8018914:	080189a7 	.word	0x080189a7
 8018918:	080189a7 	.word	0x080189a7
 801891c:	080189a7 	.word	0x080189a7
 8018920:	080189a7 	.word	0x080189a7
 8018924:	080189a7 	.word	0x080189a7
 8018928:	080189a7 	.word	0x080189a7
 801892c:	080189a7 	.word	0x080189a7
 8018930:	080189a7 	.word	0x080189a7
 8018934:	080189a7 	.word	0x080189a7
 8018938:	080189a7 	.word	0x080189a7
 801893c:	080189a7 	.word	0x080189a7
 8018940:	08018999 	.word	0x08018999
 8018944:	2b40      	cmp	r3, #64	@ 0x40
 8018946:	d02a      	beq.n	801899e <UART_SetConfig+0x8aa>
 8018948:	e02d      	b.n	80189a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801894a:	f7fa fb37 	bl	8012fbc <HAL_RCCEx_GetD3PCLK1Freq>
 801894e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018950:	e02f      	b.n	80189b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018956:	4618      	mov	r0, r3
 8018958:	f7fa fb46 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018960:	e027      	b.n	80189b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018962:	f107 0318 	add.w	r3, r7, #24
 8018966:	4618      	mov	r0, r3
 8018968:	f7fa fc92 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801896c:	69fb      	ldr	r3, [r7, #28]
 801896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018970:	e01f      	b.n	80189b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018972:	4b21      	ldr	r3, [pc, #132]	@ (80189f8 <UART_SetConfig+0x904>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	f003 0320 	and.w	r3, r3, #32
 801897a:	2b00      	cmp	r3, #0
 801897c:	d009      	beq.n	8018992 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801897e:	4b1e      	ldr	r3, [pc, #120]	@ (80189f8 <UART_SetConfig+0x904>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	08db      	lsrs	r3, r3, #3
 8018984:	f003 0303 	and.w	r3, r3, #3
 8018988:	4a1d      	ldr	r2, [pc, #116]	@ (8018a00 <UART_SetConfig+0x90c>)
 801898a:	fa22 f303 	lsr.w	r3, r2, r3
 801898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018990:	e00f      	b.n	80189b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018992:	4b1b      	ldr	r3, [pc, #108]	@ (8018a00 <UART_SetConfig+0x90c>)
 8018994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018996:	e00c      	b.n	80189b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018998:	4b1a      	ldr	r3, [pc, #104]	@ (8018a04 <UART_SetConfig+0x910>)
 801899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801899c:	e009      	b.n	80189b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801899e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80189a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80189a4:	e005      	b.n	80189b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80189a6:	2300      	movs	r3, #0
 80189a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80189aa:	2301      	movs	r3, #1
 80189ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80189b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80189b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	f000 81ee 	beq.w	8018d96 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80189ba:	697b      	ldr	r3, [r7, #20]
 80189bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189be:	4a12      	ldr	r2, [pc, #72]	@ (8018a08 <UART_SetConfig+0x914>)
 80189c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80189c4:	461a      	mov	r2, r3
 80189c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80189c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80189cc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	685a      	ldr	r2, [r3, #4]
 80189d2:	4613      	mov	r3, r2
 80189d4:	005b      	lsls	r3, r3, #1
 80189d6:	4413      	add	r3, r2
 80189d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80189da:	429a      	cmp	r2, r3
 80189dc:	d305      	bcc.n	80189ea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	685b      	ldr	r3, [r3, #4]
 80189e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80189e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80189e6:	429a      	cmp	r2, r3
 80189e8:	d910      	bls.n	8018a0c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80189ea:	2301      	movs	r3, #1
 80189ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80189f0:	e1d1      	b.n	8018d96 <UART_SetConfig+0xca2>
 80189f2:	bf00      	nop
 80189f4:	40011c00 	.word	0x40011c00
 80189f8:	58024400 	.word	0x58024400
 80189fc:	58000c00 	.word	0x58000c00
 8018a00:	03d09000 	.word	0x03d09000
 8018a04:	003d0900 	.word	0x003d0900
 8018a08:	0801e2e8 	.word	0x0801e2e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a0e:	2200      	movs	r2, #0
 8018a10:	60bb      	str	r3, [r7, #8]
 8018a12:	60fa      	str	r2, [r7, #12]
 8018a14:	697b      	ldr	r3, [r7, #20]
 8018a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a18:	4ac0      	ldr	r2, [pc, #768]	@ (8018d1c <UART_SetConfig+0xc28>)
 8018a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018a1e:	b29b      	uxth	r3, r3
 8018a20:	2200      	movs	r2, #0
 8018a22:	603b      	str	r3, [r7, #0]
 8018a24:	607a      	str	r2, [r7, #4]
 8018a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018a2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018a2e:	f7e7 fcbf 	bl	80003b0 <__aeabi_uldivmod>
 8018a32:	4602      	mov	r2, r0
 8018a34:	460b      	mov	r3, r1
 8018a36:	4610      	mov	r0, r2
 8018a38:	4619      	mov	r1, r3
 8018a3a:	f04f 0200 	mov.w	r2, #0
 8018a3e:	f04f 0300 	mov.w	r3, #0
 8018a42:	020b      	lsls	r3, r1, #8
 8018a44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018a48:	0202      	lsls	r2, r0, #8
 8018a4a:	6979      	ldr	r1, [r7, #20]
 8018a4c:	6849      	ldr	r1, [r1, #4]
 8018a4e:	0849      	lsrs	r1, r1, #1
 8018a50:	2000      	movs	r0, #0
 8018a52:	460c      	mov	r4, r1
 8018a54:	4605      	mov	r5, r0
 8018a56:	eb12 0804 	adds.w	r8, r2, r4
 8018a5a:	eb43 0905 	adc.w	r9, r3, r5
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	685b      	ldr	r3, [r3, #4]
 8018a62:	2200      	movs	r2, #0
 8018a64:	469a      	mov	sl, r3
 8018a66:	4693      	mov	fp, r2
 8018a68:	4652      	mov	r2, sl
 8018a6a:	465b      	mov	r3, fp
 8018a6c:	4640      	mov	r0, r8
 8018a6e:	4649      	mov	r1, r9
 8018a70:	f7e7 fc9e 	bl	80003b0 <__aeabi_uldivmod>
 8018a74:	4602      	mov	r2, r0
 8018a76:	460b      	mov	r3, r1
 8018a78:	4613      	mov	r3, r2
 8018a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018a82:	d308      	bcc.n	8018a96 <UART_SetConfig+0x9a2>
 8018a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018a8a:	d204      	bcs.n	8018a96 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8018a8c:	697b      	ldr	r3, [r7, #20]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018a92:	60da      	str	r2, [r3, #12]
 8018a94:	e17f      	b.n	8018d96 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8018a96:	2301      	movs	r3, #1
 8018a98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018a9c:	e17b      	b.n	8018d96 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018a9e:	697b      	ldr	r3, [r7, #20]
 8018aa0:	69db      	ldr	r3, [r3, #28]
 8018aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018aa6:	f040 80bd 	bne.w	8018c24 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8018aaa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018aae:	2b20      	cmp	r3, #32
 8018ab0:	dc48      	bgt.n	8018b44 <UART_SetConfig+0xa50>
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	db7b      	blt.n	8018bae <UART_SetConfig+0xaba>
 8018ab6:	2b20      	cmp	r3, #32
 8018ab8:	d879      	bhi.n	8018bae <UART_SetConfig+0xaba>
 8018aba:	a201      	add	r2, pc, #4	@ (adr r2, 8018ac0 <UART_SetConfig+0x9cc>)
 8018abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ac0:	08018b4b 	.word	0x08018b4b
 8018ac4:	08018b53 	.word	0x08018b53
 8018ac8:	08018baf 	.word	0x08018baf
 8018acc:	08018baf 	.word	0x08018baf
 8018ad0:	08018b5b 	.word	0x08018b5b
 8018ad4:	08018baf 	.word	0x08018baf
 8018ad8:	08018baf 	.word	0x08018baf
 8018adc:	08018baf 	.word	0x08018baf
 8018ae0:	08018b6b 	.word	0x08018b6b
 8018ae4:	08018baf 	.word	0x08018baf
 8018ae8:	08018baf 	.word	0x08018baf
 8018aec:	08018baf 	.word	0x08018baf
 8018af0:	08018baf 	.word	0x08018baf
 8018af4:	08018baf 	.word	0x08018baf
 8018af8:	08018baf 	.word	0x08018baf
 8018afc:	08018baf 	.word	0x08018baf
 8018b00:	08018b7b 	.word	0x08018b7b
 8018b04:	08018baf 	.word	0x08018baf
 8018b08:	08018baf 	.word	0x08018baf
 8018b0c:	08018baf 	.word	0x08018baf
 8018b10:	08018baf 	.word	0x08018baf
 8018b14:	08018baf 	.word	0x08018baf
 8018b18:	08018baf 	.word	0x08018baf
 8018b1c:	08018baf 	.word	0x08018baf
 8018b20:	08018baf 	.word	0x08018baf
 8018b24:	08018baf 	.word	0x08018baf
 8018b28:	08018baf 	.word	0x08018baf
 8018b2c:	08018baf 	.word	0x08018baf
 8018b30:	08018baf 	.word	0x08018baf
 8018b34:	08018baf 	.word	0x08018baf
 8018b38:	08018baf 	.word	0x08018baf
 8018b3c:	08018baf 	.word	0x08018baf
 8018b40:	08018ba1 	.word	0x08018ba1
 8018b44:	2b40      	cmp	r3, #64	@ 0x40
 8018b46:	d02e      	beq.n	8018ba6 <UART_SetConfig+0xab2>
 8018b48:	e031      	b.n	8018bae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018b4a:	f7f8 fb99 	bl	8011280 <HAL_RCC_GetPCLK1Freq>
 8018b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018b50:	e033      	b.n	8018bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018b52:	f7f8 fbab 	bl	80112ac <HAL_RCC_GetPCLK2Freq>
 8018b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018b58:	e02f      	b.n	8018bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7fa fa42 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018b68:	e027      	b.n	8018bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018b6a:	f107 0318 	add.w	r3, r7, #24
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7fa fb8e 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018b74:	69fb      	ldr	r3, [r7, #28]
 8018b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018b78:	e01f      	b.n	8018bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018b7a:	4b69      	ldr	r3, [pc, #420]	@ (8018d20 <UART_SetConfig+0xc2c>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	f003 0320 	and.w	r3, r3, #32
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d009      	beq.n	8018b9a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018b86:	4b66      	ldr	r3, [pc, #408]	@ (8018d20 <UART_SetConfig+0xc2c>)
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	08db      	lsrs	r3, r3, #3
 8018b8c:	f003 0303 	and.w	r3, r3, #3
 8018b90:	4a64      	ldr	r2, [pc, #400]	@ (8018d24 <UART_SetConfig+0xc30>)
 8018b92:	fa22 f303 	lsr.w	r3, r2, r3
 8018b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018b98:	e00f      	b.n	8018bba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8018b9a:	4b62      	ldr	r3, [pc, #392]	@ (8018d24 <UART_SetConfig+0xc30>)
 8018b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018b9e:	e00c      	b.n	8018bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018ba0:	4b61      	ldr	r3, [pc, #388]	@ (8018d28 <UART_SetConfig+0xc34>)
 8018ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018ba4:	e009      	b.n	8018bba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018bac:	e005      	b.n	8018bba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8018bae:	2300      	movs	r3, #0
 8018bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	f000 80ea 	beq.w	8018d96 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018bc2:	697b      	ldr	r3, [r7, #20]
 8018bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bc6:	4a55      	ldr	r2, [pc, #340]	@ (8018d1c <UART_SetConfig+0xc28>)
 8018bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018bcc:	461a      	mov	r2, r3
 8018bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8018bd4:	005a      	lsls	r2, r3, #1
 8018bd6:	697b      	ldr	r3, [r7, #20]
 8018bd8:	685b      	ldr	r3, [r3, #4]
 8018bda:	085b      	lsrs	r3, r3, #1
 8018bdc:	441a      	add	r2, r3
 8018bde:	697b      	ldr	r3, [r7, #20]
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018be6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bea:	2b0f      	cmp	r3, #15
 8018bec:	d916      	bls.n	8018c1c <UART_SetConfig+0xb28>
 8018bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018bf4:	d212      	bcs.n	8018c1c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	f023 030f 	bic.w	r3, r3, #15
 8018bfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c02:	085b      	lsrs	r3, r3, #1
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	f003 0307 	and.w	r3, r3, #7
 8018c0a:	b29a      	uxth	r2, r3
 8018c0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018c0e:	4313      	orrs	r3, r2
 8018c10:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8018c12:	697b      	ldr	r3, [r7, #20]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018c18:	60da      	str	r2, [r3, #12]
 8018c1a:	e0bc      	b.n	8018d96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018c1c:	2301      	movs	r3, #1
 8018c1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018c22:	e0b8      	b.n	8018d96 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018c24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018c28:	2b20      	cmp	r3, #32
 8018c2a:	dc4b      	bgt.n	8018cc4 <UART_SetConfig+0xbd0>
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	f2c0 8087 	blt.w	8018d40 <UART_SetConfig+0xc4c>
 8018c32:	2b20      	cmp	r3, #32
 8018c34:	f200 8084 	bhi.w	8018d40 <UART_SetConfig+0xc4c>
 8018c38:	a201      	add	r2, pc, #4	@ (adr r2, 8018c40 <UART_SetConfig+0xb4c>)
 8018c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c3e:	bf00      	nop
 8018c40:	08018ccb 	.word	0x08018ccb
 8018c44:	08018cd3 	.word	0x08018cd3
 8018c48:	08018d41 	.word	0x08018d41
 8018c4c:	08018d41 	.word	0x08018d41
 8018c50:	08018cdb 	.word	0x08018cdb
 8018c54:	08018d41 	.word	0x08018d41
 8018c58:	08018d41 	.word	0x08018d41
 8018c5c:	08018d41 	.word	0x08018d41
 8018c60:	08018ceb 	.word	0x08018ceb
 8018c64:	08018d41 	.word	0x08018d41
 8018c68:	08018d41 	.word	0x08018d41
 8018c6c:	08018d41 	.word	0x08018d41
 8018c70:	08018d41 	.word	0x08018d41
 8018c74:	08018d41 	.word	0x08018d41
 8018c78:	08018d41 	.word	0x08018d41
 8018c7c:	08018d41 	.word	0x08018d41
 8018c80:	08018cfb 	.word	0x08018cfb
 8018c84:	08018d41 	.word	0x08018d41
 8018c88:	08018d41 	.word	0x08018d41
 8018c8c:	08018d41 	.word	0x08018d41
 8018c90:	08018d41 	.word	0x08018d41
 8018c94:	08018d41 	.word	0x08018d41
 8018c98:	08018d41 	.word	0x08018d41
 8018c9c:	08018d41 	.word	0x08018d41
 8018ca0:	08018d41 	.word	0x08018d41
 8018ca4:	08018d41 	.word	0x08018d41
 8018ca8:	08018d41 	.word	0x08018d41
 8018cac:	08018d41 	.word	0x08018d41
 8018cb0:	08018d41 	.word	0x08018d41
 8018cb4:	08018d41 	.word	0x08018d41
 8018cb8:	08018d41 	.word	0x08018d41
 8018cbc:	08018d41 	.word	0x08018d41
 8018cc0:	08018d33 	.word	0x08018d33
 8018cc4:	2b40      	cmp	r3, #64	@ 0x40
 8018cc6:	d037      	beq.n	8018d38 <UART_SetConfig+0xc44>
 8018cc8:	e03a      	b.n	8018d40 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018cca:	f7f8 fad9 	bl	8011280 <HAL_RCC_GetPCLK1Freq>
 8018cce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018cd0:	e03c      	b.n	8018d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018cd2:	f7f8 faeb 	bl	80112ac <HAL_RCC_GetPCLK2Freq>
 8018cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018cd8:	e038      	b.n	8018d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018cde:	4618      	mov	r0, r3
 8018ce0:	f7fa f982 	bl	8012fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018ce8:	e030      	b.n	8018d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018cea:	f107 0318 	add.w	r3, r7, #24
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7fa face 	bl	8013290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018cf4:	69fb      	ldr	r3, [r7, #28]
 8018cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018cf8:	e028      	b.n	8018d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018cfa:	4b09      	ldr	r3, [pc, #36]	@ (8018d20 <UART_SetConfig+0xc2c>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	f003 0320 	and.w	r3, r3, #32
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d012      	beq.n	8018d2c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018d06:	4b06      	ldr	r3, [pc, #24]	@ (8018d20 <UART_SetConfig+0xc2c>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	08db      	lsrs	r3, r3, #3
 8018d0c:	f003 0303 	and.w	r3, r3, #3
 8018d10:	4a04      	ldr	r2, [pc, #16]	@ (8018d24 <UART_SetConfig+0xc30>)
 8018d12:	fa22 f303 	lsr.w	r3, r2, r3
 8018d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018d18:	e018      	b.n	8018d4c <UART_SetConfig+0xc58>
 8018d1a:	bf00      	nop
 8018d1c:	0801e2e8 	.word	0x0801e2e8
 8018d20:	58024400 	.word	0x58024400
 8018d24:	03d09000 	.word	0x03d09000
 8018d28:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8018d2c:	4b24      	ldr	r3, [pc, #144]	@ (8018dc0 <UART_SetConfig+0xccc>)
 8018d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d30:	e00c      	b.n	8018d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018d32:	4b24      	ldr	r3, [pc, #144]	@ (8018dc4 <UART_SetConfig+0xcd0>)
 8018d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d36:	e009      	b.n	8018d4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d3e:	e005      	b.n	8018d4c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8018d40:	2300      	movs	r3, #0
 8018d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018d44:	2301      	movs	r3, #1
 8018d46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018d4a:	bf00      	nop
    }

    if (pclk != 0U)
 8018d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d021      	beq.n	8018d96 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018d52:	697b      	ldr	r3, [r7, #20]
 8018d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d56:	4a1c      	ldr	r2, [pc, #112]	@ (8018dc8 <UART_SetConfig+0xcd4>)
 8018d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018d5c:	461a      	mov	r2, r3
 8018d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d60:	fbb3 f2f2 	udiv	r2, r3, r2
 8018d64:	697b      	ldr	r3, [r7, #20]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	085b      	lsrs	r3, r3, #1
 8018d6a:	441a      	add	r2, r3
 8018d6c:	697b      	ldr	r3, [r7, #20]
 8018d6e:	685b      	ldr	r3, [r3, #4]
 8018d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d74:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d78:	2b0f      	cmp	r3, #15
 8018d7a:	d909      	bls.n	8018d90 <UART_SetConfig+0xc9c>
 8018d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018d82:	d205      	bcs.n	8018d90 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d86:	b29a      	uxth	r2, r3
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	60da      	str	r2, [r3, #12]
 8018d8e:	e002      	b.n	8018d96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018d90:	2301      	movs	r3, #1
 8018d92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	2201      	movs	r2, #1
 8018d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	2201      	movs	r2, #1
 8018da2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018da6:	697b      	ldr	r3, [r7, #20]
 8018da8:	2200      	movs	r2, #0
 8018daa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8018dac:	697b      	ldr	r3, [r7, #20]
 8018dae:	2200      	movs	r2, #0
 8018db0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8018db2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3748      	adds	r7, #72	@ 0x48
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018dc0:	03d09000 	.word	0x03d09000
 8018dc4:	003d0900 	.word	0x003d0900
 8018dc8:	0801e2e8 	.word	0x0801e2e8

08018dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018dcc:	b480      	push	{r7}
 8018dce:	b083      	sub	sp, #12
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018dd8:	f003 0308 	and.w	r3, r3, #8
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d00a      	beq.n	8018df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	685b      	ldr	r3, [r3, #4]
 8018de6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	430a      	orrs	r2, r1
 8018df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018dfa:	f003 0301 	and.w	r3, r3, #1
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d00a      	beq.n	8018e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	685b      	ldr	r3, [r3, #4]
 8018e08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	430a      	orrs	r2, r1
 8018e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e1c:	f003 0302 	and.w	r3, r3, #2
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d00a      	beq.n	8018e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	685b      	ldr	r3, [r3, #4]
 8018e2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	430a      	orrs	r2, r1
 8018e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e3e:	f003 0304 	and.w	r3, r3, #4
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d00a      	beq.n	8018e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	685b      	ldr	r3, [r3, #4]
 8018e4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	430a      	orrs	r2, r1
 8018e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e60:	f003 0310 	and.w	r3, r3, #16
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d00a      	beq.n	8018e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	689b      	ldr	r3, [r3, #8]
 8018e6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	430a      	orrs	r2, r1
 8018e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e82:	f003 0320 	and.w	r3, r3, #32
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d00a      	beq.n	8018ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	689b      	ldr	r3, [r3, #8]
 8018e90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	430a      	orrs	r2, r1
 8018e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d01a      	beq.n	8018ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	430a      	orrs	r2, r1
 8018ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018eca:	d10a      	bne.n	8018ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	685b      	ldr	r3, [r3, #4]
 8018ed2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	430a      	orrs	r2, r1
 8018ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d00a      	beq.n	8018f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	685b      	ldr	r3, [r3, #4]
 8018ef4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	430a      	orrs	r2, r1
 8018f02:	605a      	str	r2, [r3, #4]
  }
}
 8018f04:	bf00      	nop
 8018f06:	370c      	adds	r7, #12
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0e:	4770      	bx	lr

08018f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b098      	sub	sp, #96	@ 0x60
 8018f14:	af02      	add	r7, sp, #8
 8018f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018f20:	f7ef fc4a 	bl	80087b8 <HAL_GetTick>
 8018f24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	f003 0308 	and.w	r3, r3, #8
 8018f30:	2b08      	cmp	r3, #8
 8018f32:	d12f      	bne.n	8018f94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018f34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018f38:	9300      	str	r3, [sp, #0]
 8018f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8018f42:	6878      	ldr	r0, [r7, #4]
 8018f44:	f000 f88e 	bl	8019064 <UART_WaitOnFlagUntilTimeout>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d022      	beq.n	8018f94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f56:	e853 3f00 	ldrex	r3, [r3]
 8018f5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018f62:	653b      	str	r3, [r7, #80]	@ 0x50
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	461a      	mov	r2, r3
 8018f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8018f6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018f74:	e841 2300 	strex	r3, r2, [r1]
 8018f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d1e6      	bne.n	8018f4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2220      	movs	r2, #32
 8018f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018f90:	2303      	movs	r3, #3
 8018f92:	e063      	b.n	801905c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	f003 0304 	and.w	r3, r3, #4
 8018f9e:	2b04      	cmp	r3, #4
 8018fa0:	d149      	bne.n	8019036 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018fa2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018fa6:	9300      	str	r3, [sp, #0]
 8018fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018faa:	2200      	movs	r2, #0
 8018fac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	f000 f857 	bl	8019064 <UART_WaitOnFlagUntilTimeout>
 8018fb6:	4603      	mov	r3, r0
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d03c      	beq.n	8019036 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fc4:	e853 3f00 	ldrex	r3, [r3]
 8018fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8018fca:	6a3b      	ldr	r3, [r7, #32]
 8018fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	461a      	mov	r2, r3
 8018fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8018fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018fe2:	e841 2300 	strex	r3, r2, [r1]
 8018fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d1e6      	bne.n	8018fbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	3308      	adds	r3, #8
 8018ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ff6:	693b      	ldr	r3, [r7, #16]
 8018ff8:	e853 3f00 	ldrex	r3, [r3]
 8018ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	f023 0301 	bic.w	r3, r3, #1
 8019004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	3308      	adds	r3, #8
 801900c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801900e:	61fa      	str	r2, [r7, #28]
 8019010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019012:	69b9      	ldr	r1, [r7, #24]
 8019014:	69fa      	ldr	r2, [r7, #28]
 8019016:	e841 2300 	strex	r3, r2, [r1]
 801901a:	617b      	str	r3, [r7, #20]
   return(result);
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d1e5      	bne.n	8018fee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	2220      	movs	r2, #32
 8019026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	2200      	movs	r2, #0
 801902e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019032:	2303      	movs	r3, #3
 8019034:	e012      	b.n	801905c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2220      	movs	r2, #32
 801903a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	2220      	movs	r2, #32
 8019042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	2200      	movs	r2, #0
 801904a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	2200      	movs	r2, #0
 8019050:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	2200      	movs	r2, #0
 8019056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801905a:	2300      	movs	r3, #0
}
 801905c:	4618      	mov	r0, r3
 801905e:	3758      	adds	r7, #88	@ 0x58
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}

08019064 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b084      	sub	sp, #16
 8019068:	af00      	add	r7, sp, #0
 801906a:	60f8      	str	r0, [r7, #12]
 801906c:	60b9      	str	r1, [r7, #8]
 801906e:	603b      	str	r3, [r7, #0]
 8019070:	4613      	mov	r3, r2
 8019072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019074:	e04f      	b.n	8019116 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019076:	69bb      	ldr	r3, [r7, #24]
 8019078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801907c:	d04b      	beq.n	8019116 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801907e:	f7ef fb9b 	bl	80087b8 <HAL_GetTick>
 8019082:	4602      	mov	r2, r0
 8019084:	683b      	ldr	r3, [r7, #0]
 8019086:	1ad3      	subs	r3, r2, r3
 8019088:	69ba      	ldr	r2, [r7, #24]
 801908a:	429a      	cmp	r2, r3
 801908c:	d302      	bcc.n	8019094 <UART_WaitOnFlagUntilTimeout+0x30>
 801908e:	69bb      	ldr	r3, [r7, #24]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d101      	bne.n	8019098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8019094:	2303      	movs	r3, #3
 8019096:	e04e      	b.n	8019136 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	f003 0304 	and.w	r3, r3, #4
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d037      	beq.n	8019116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	2b80      	cmp	r3, #128	@ 0x80
 80190aa:	d034      	beq.n	8019116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	2b40      	cmp	r3, #64	@ 0x40
 80190b0:	d031      	beq.n	8019116 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	69db      	ldr	r3, [r3, #28]
 80190b8:	f003 0308 	and.w	r3, r3, #8
 80190bc:	2b08      	cmp	r3, #8
 80190be:	d110      	bne.n	80190e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	2208      	movs	r2, #8
 80190c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80190c8:	68f8      	ldr	r0, [r7, #12]
 80190ca:	f000 f95b 	bl	8019384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	2208      	movs	r2, #8
 80190d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	2200      	movs	r2, #0
 80190da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80190de:	2301      	movs	r3, #1
 80190e0:	e029      	b.n	8019136 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	69db      	ldr	r3, [r3, #28]
 80190e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80190ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80190f0:	d111      	bne.n	8019116 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80190fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80190fc:	68f8      	ldr	r0, [r7, #12]
 80190fe:	f000 f941 	bl	8019384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	2220      	movs	r2, #32
 8019106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	2200      	movs	r2, #0
 801910e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8019112:	2303      	movs	r3, #3
 8019114:	e00f      	b.n	8019136 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	69da      	ldr	r2, [r3, #28]
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	4013      	ands	r3, r2
 8019120:	68ba      	ldr	r2, [r7, #8]
 8019122:	429a      	cmp	r2, r3
 8019124:	bf0c      	ite	eq
 8019126:	2301      	moveq	r3, #1
 8019128:	2300      	movne	r3, #0
 801912a:	b2db      	uxtb	r3, r3
 801912c:	461a      	mov	r2, r3
 801912e:	79fb      	ldrb	r3, [r7, #7]
 8019130:	429a      	cmp	r2, r3
 8019132:	d0a0      	beq.n	8019076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019134:	2300      	movs	r3, #0
}
 8019136:	4618      	mov	r0, r3
 8019138:	3710      	adds	r7, #16
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
	...

08019140 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019140:	b480      	push	{r7}
 8019142:	b0a3      	sub	sp, #140	@ 0x8c
 8019144:	af00      	add	r7, sp, #0
 8019146:	60f8      	str	r0, [r7, #12]
 8019148:	60b9      	str	r1, [r7, #8]
 801914a:	4613      	mov	r3, r2
 801914c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	68ba      	ldr	r2, [r7, #8]
 8019152:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	88fa      	ldrh	r2, [r7, #6]
 8019158:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	88fa      	ldrh	r2, [r7, #6]
 8019160:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	2200      	movs	r2, #0
 8019168:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	689b      	ldr	r3, [r3, #8]
 801916e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019172:	d10e      	bne.n	8019192 <UART_Start_Receive_IT+0x52>
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	691b      	ldr	r3, [r3, #16]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d105      	bne.n	8019188 <UART_Start_Receive_IT+0x48>
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019182:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019186:	e02d      	b.n	80191e4 <UART_Start_Receive_IT+0xa4>
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	22ff      	movs	r2, #255	@ 0xff
 801918c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019190:	e028      	b.n	80191e4 <UART_Start_Receive_IT+0xa4>
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	689b      	ldr	r3, [r3, #8]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d10d      	bne.n	80191b6 <UART_Start_Receive_IT+0x76>
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	691b      	ldr	r3, [r3, #16]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d104      	bne.n	80191ac <UART_Start_Receive_IT+0x6c>
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	22ff      	movs	r2, #255	@ 0xff
 80191a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191aa:	e01b      	b.n	80191e4 <UART_Start_Receive_IT+0xa4>
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	227f      	movs	r2, #127	@ 0x7f
 80191b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191b4:	e016      	b.n	80191e4 <UART_Start_Receive_IT+0xa4>
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	689b      	ldr	r3, [r3, #8]
 80191ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80191be:	d10d      	bne.n	80191dc <UART_Start_Receive_IT+0x9c>
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	691b      	ldr	r3, [r3, #16]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d104      	bne.n	80191d2 <UART_Start_Receive_IT+0x92>
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	227f      	movs	r2, #127	@ 0x7f
 80191cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191d0:	e008      	b.n	80191e4 <UART_Start_Receive_IT+0xa4>
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	223f      	movs	r2, #63	@ 0x3f
 80191d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80191da:	e003      	b.n	80191e4 <UART_Start_Receive_IT+0xa4>
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	2200      	movs	r2, #0
 80191e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	2200      	movs	r2, #0
 80191e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	2222      	movs	r2, #34	@ 0x22
 80191f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	3308      	adds	r3, #8
 80191fa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80191fe:	e853 3f00 	ldrex	r3, [r3]
 8019202:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019206:	f043 0301 	orr.w	r3, r3, #1
 801920a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	3308      	adds	r3, #8
 8019214:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019218:	673a      	str	r2, [r7, #112]	@ 0x70
 801921a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801921c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801921e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019220:	e841 2300 	strex	r3, r2, [r1]
 8019224:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019228:	2b00      	cmp	r3, #0
 801922a:	d1e3      	bne.n	80191f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019234:	d14f      	bne.n	80192d6 <UART_Start_Receive_IT+0x196>
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801923c:	88fa      	ldrh	r2, [r7, #6]
 801923e:	429a      	cmp	r2, r3
 8019240:	d349      	bcc.n	80192d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	689b      	ldr	r3, [r3, #8]
 8019246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801924a:	d107      	bne.n	801925c <UART_Start_Receive_IT+0x11c>
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	691b      	ldr	r3, [r3, #16]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d103      	bne.n	801925c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	4a47      	ldr	r2, [pc, #284]	@ (8019374 <UART_Start_Receive_IT+0x234>)
 8019258:	675a      	str	r2, [r3, #116]	@ 0x74
 801925a:	e002      	b.n	8019262 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	4a46      	ldr	r2, [pc, #280]	@ (8019378 <UART_Start_Receive_IT+0x238>)
 8019260:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	691b      	ldr	r3, [r3, #16]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d01a      	beq.n	80192a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019272:	e853 3f00 	ldrex	r3, [r3]
 8019276:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801927a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801927e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	461a      	mov	r2, r3
 8019288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801928c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801928e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019290:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019292:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019294:	e841 2300 	strex	r3, r2, [r1]
 8019298:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801929a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801929c:	2b00      	cmp	r3, #0
 801929e:	d1e4      	bne.n	801926a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	3308      	adds	r3, #8
 80192a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192aa:	e853 3f00 	ldrex	r3, [r3]
 80192ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80192b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80192b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	3308      	adds	r3, #8
 80192be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80192c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80192c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80192c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80192c8:	e841 2300 	strex	r3, r2, [r1]
 80192cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80192ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d1e5      	bne.n	80192a0 <UART_Start_Receive_IT+0x160>
 80192d4:	e046      	b.n	8019364 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	689b      	ldr	r3, [r3, #8]
 80192da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80192de:	d107      	bne.n	80192f0 <UART_Start_Receive_IT+0x1b0>
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	691b      	ldr	r3, [r3, #16]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d103      	bne.n	80192f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	4a24      	ldr	r2, [pc, #144]	@ (801937c <UART_Start_Receive_IT+0x23c>)
 80192ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80192ee:	e002      	b.n	80192f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	4a23      	ldr	r2, [pc, #140]	@ (8019380 <UART_Start_Receive_IT+0x240>)
 80192f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	691b      	ldr	r3, [r3, #16]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d019      	beq.n	8019332 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019306:	e853 3f00 	ldrex	r3, [r3]
 801930a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801930c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801930e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019312:	677b      	str	r3, [r7, #116]	@ 0x74
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	461a      	mov	r2, r3
 801931a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801931c:	637b      	str	r3, [r7, #52]	@ 0x34
 801931e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019320:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019324:	e841 2300 	strex	r3, r2, [r1]
 8019328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801932c:	2b00      	cmp	r3, #0
 801932e:	d1e6      	bne.n	80192fe <UART_Start_Receive_IT+0x1be>
 8019330:	e018      	b.n	8019364 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019338:	697b      	ldr	r3, [r7, #20]
 801933a:	e853 3f00 	ldrex	r3, [r3]
 801933e:	613b      	str	r3, [r7, #16]
   return(result);
 8019340:	693b      	ldr	r3, [r7, #16]
 8019342:	f043 0320 	orr.w	r3, r3, #32
 8019346:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	461a      	mov	r2, r3
 801934e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019350:	623b      	str	r3, [r7, #32]
 8019352:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019354:	69f9      	ldr	r1, [r7, #28]
 8019356:	6a3a      	ldr	r2, [r7, #32]
 8019358:	e841 2300 	strex	r3, r2, [r1]
 801935c:	61bb      	str	r3, [r7, #24]
   return(result);
 801935e:	69bb      	ldr	r3, [r7, #24]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d1e6      	bne.n	8019332 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019364:	2300      	movs	r3, #0
}
 8019366:	4618      	mov	r0, r3
 8019368:	378c      	adds	r7, #140	@ 0x8c
 801936a:	46bd      	mov	sp, r7
 801936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019370:	4770      	bx	lr
 8019372:	bf00      	nop
 8019374:	08019ee5 	.word	0x08019ee5
 8019378:	08019b81 	.word	0x08019b81
 801937c:	080199c9 	.word	0x080199c9
 8019380:	08019811 	.word	0x08019811

08019384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019384:	b480      	push	{r7}
 8019386:	b095      	sub	sp, #84	@ 0x54
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019394:	e853 3f00 	ldrex	r3, [r3]
 8019398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801939c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80193a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	461a      	mov	r2, r3
 80193a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80193aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80193ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80193b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80193b2:	e841 2300 	strex	r3, r2, [r1]
 80193b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80193b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d1e6      	bne.n	801938c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	3308      	adds	r3, #8
 80193c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193c6:	6a3b      	ldr	r3, [r7, #32]
 80193c8:	e853 3f00 	ldrex	r3, [r3]
 80193cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80193ce:	69fa      	ldr	r2, [r7, #28]
 80193d0:	4b1e      	ldr	r3, [pc, #120]	@ (801944c <UART_EndRxTransfer+0xc8>)
 80193d2:	4013      	ands	r3, r2
 80193d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	3308      	adds	r3, #8
 80193dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80193de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80193e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80193e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80193e6:	e841 2300 	strex	r3, r2, [r1]
 80193ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80193ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d1e5      	bne.n	80193be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80193f6:	2b01      	cmp	r3, #1
 80193f8:	d118      	bne.n	801942c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	e853 3f00 	ldrex	r3, [r3]
 8019406:	60bb      	str	r3, [r7, #8]
   return(result);
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	f023 0310 	bic.w	r3, r3, #16
 801940e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	461a      	mov	r2, r3
 8019416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019418:	61bb      	str	r3, [r7, #24]
 801941a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801941c:	6979      	ldr	r1, [r7, #20]
 801941e:	69ba      	ldr	r2, [r7, #24]
 8019420:	e841 2300 	strex	r3, r2, [r1]
 8019424:	613b      	str	r3, [r7, #16]
   return(result);
 8019426:	693b      	ldr	r3, [r7, #16]
 8019428:	2b00      	cmp	r3, #0
 801942a:	d1e6      	bne.n	80193fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2220      	movs	r2, #32
 8019430:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2200      	movs	r2, #0
 8019438:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	2200      	movs	r2, #0
 801943e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019440:	bf00      	nop
 8019442:	3754      	adds	r7, #84	@ 0x54
 8019444:	46bd      	mov	sp, r7
 8019446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944a:	4770      	bx	lr
 801944c:	effffffe 	.word	0xeffffffe

08019450 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b084      	sub	sp, #16
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801945c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	2200      	movs	r2, #0
 8019462:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019466:	68f8      	ldr	r0, [r7, #12]
 8019468:	f7fe fe2e 	bl	80180c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801946c:	bf00      	nop
 801946e:	3710      	adds	r7, #16
 8019470:	46bd      	mov	sp, r7
 8019472:	bd80      	pop	{r7, pc}

08019474 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019474:	b480      	push	{r7}
 8019476:	b08f      	sub	sp, #60	@ 0x3c
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019482:	2b21      	cmp	r3, #33	@ 0x21
 8019484:	d14c      	bne.n	8019520 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801948c:	b29b      	uxth	r3, r3
 801948e:	2b00      	cmp	r3, #0
 8019490:	d132      	bne.n	80194f8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019498:	6a3b      	ldr	r3, [r7, #32]
 801949a:	e853 3f00 	ldrex	r3, [r3]
 801949e:	61fb      	str	r3, [r7, #28]
   return(result);
 80194a0:	69fb      	ldr	r3, [r7, #28]
 80194a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80194a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	461a      	mov	r2, r3
 80194ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80194b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80194b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80194b8:	e841 2300 	strex	r3, r2, [r1]
 80194bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80194be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d1e6      	bne.n	8019492 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	e853 3f00 	ldrex	r3, [r3]
 80194d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80194d2:	68bb      	ldr	r3, [r7, #8]
 80194d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80194d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	461a      	mov	r2, r3
 80194e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194e2:	61bb      	str	r3, [r7, #24]
 80194e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194e6:	6979      	ldr	r1, [r7, #20]
 80194e8:	69ba      	ldr	r2, [r7, #24]
 80194ea:	e841 2300 	strex	r3, r2, [r1]
 80194ee:	613b      	str	r3, [r7, #16]
   return(result);
 80194f0:	693b      	ldr	r3, [r7, #16]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d1e6      	bne.n	80194c4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80194f6:	e013      	b.n	8019520 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194fc:	781a      	ldrb	r2, [r3, #0]
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019508:	1c5a      	adds	r2, r3, #1
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019514:	b29b      	uxth	r3, r3
 8019516:	3b01      	subs	r3, #1
 8019518:	b29a      	uxth	r2, r3
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019520:	bf00      	nop
 8019522:	373c      	adds	r7, #60	@ 0x3c
 8019524:	46bd      	mov	sp, r7
 8019526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952a:	4770      	bx	lr

0801952c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801952c:	b480      	push	{r7}
 801952e:	b091      	sub	sp, #68	@ 0x44
 8019530:	af00      	add	r7, sp, #0
 8019532:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801953a:	2b21      	cmp	r3, #33	@ 0x21
 801953c:	d151      	bne.n	80195e2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019544:	b29b      	uxth	r3, r3
 8019546:	2b00      	cmp	r3, #0
 8019548:	d132      	bne.n	80195b0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019552:	e853 3f00 	ldrex	r3, [r3]
 8019556:	623b      	str	r3, [r7, #32]
   return(result);
 8019558:	6a3b      	ldr	r3, [r7, #32]
 801955a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801955e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	461a      	mov	r2, r3
 8019566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019568:	633b      	str	r3, [r7, #48]	@ 0x30
 801956a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801956c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801956e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019570:	e841 2300 	strex	r3, r2, [r1]
 8019574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019578:	2b00      	cmp	r3, #0
 801957a:	d1e6      	bne.n	801954a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019582:	693b      	ldr	r3, [r7, #16]
 8019584:	e853 3f00 	ldrex	r3, [r3]
 8019588:	60fb      	str	r3, [r7, #12]
   return(result);
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019590:	637b      	str	r3, [r7, #52]	@ 0x34
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	461a      	mov	r2, r3
 8019598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801959a:	61fb      	str	r3, [r7, #28]
 801959c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801959e:	69b9      	ldr	r1, [r7, #24]
 80195a0:	69fa      	ldr	r2, [r7, #28]
 80195a2:	e841 2300 	strex	r3, r2, [r1]
 80195a6:	617b      	str	r3, [r7, #20]
   return(result);
 80195a8:	697b      	ldr	r3, [r7, #20]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d1e6      	bne.n	801957c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80195ae:	e018      	b.n	80195e2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80195b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80195b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195b8:	881b      	ldrh	r3, [r3, #0]
 80195ba:	461a      	mov	r2, r3
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80195c4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80195ca:	1c9a      	adds	r2, r3, #2
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80195d6:	b29b      	uxth	r3, r3
 80195d8:	3b01      	subs	r3, #1
 80195da:	b29a      	uxth	r2, r3
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80195e2:	bf00      	nop
 80195e4:	3744      	adds	r7, #68	@ 0x44
 80195e6:	46bd      	mov	sp, r7
 80195e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ec:	4770      	bx	lr

080195ee <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80195ee:	b480      	push	{r7}
 80195f0:	b091      	sub	sp, #68	@ 0x44
 80195f2:	af00      	add	r7, sp, #0
 80195f4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80195fc:	2b21      	cmp	r3, #33	@ 0x21
 80195fe:	d160      	bne.n	80196c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019606:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019608:	e057      	b.n	80196ba <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019610:	b29b      	uxth	r3, r3
 8019612:	2b00      	cmp	r3, #0
 8019614:	d133      	bne.n	801967e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	3308      	adds	r3, #8
 801961c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801961e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019620:	e853 3f00 	ldrex	r3, [r3]
 8019624:	623b      	str	r3, [r7, #32]
   return(result);
 8019626:	6a3b      	ldr	r3, [r7, #32]
 8019628:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801962c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	3308      	adds	r3, #8
 8019634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019636:	633a      	str	r2, [r7, #48]	@ 0x30
 8019638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801963a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801963c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801963e:	e841 2300 	strex	r3, r2, [r1]
 8019642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019646:	2b00      	cmp	r3, #0
 8019648:	d1e5      	bne.n	8019616 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	e853 3f00 	ldrex	r3, [r3]
 8019656:	60fb      	str	r3, [r7, #12]
   return(result);
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801965e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	461a      	mov	r2, r3
 8019666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019668:	61fb      	str	r3, [r7, #28]
 801966a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801966c:	69b9      	ldr	r1, [r7, #24]
 801966e:	69fa      	ldr	r2, [r7, #28]
 8019670:	e841 2300 	strex	r3, r2, [r1]
 8019674:	617b      	str	r3, [r7, #20]
   return(result);
 8019676:	697b      	ldr	r3, [r7, #20]
 8019678:	2b00      	cmp	r3, #0
 801967a:	d1e6      	bne.n	801964a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801967c:	e021      	b.n	80196c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	69db      	ldr	r3, [r3, #28]
 8019684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019688:	2b00      	cmp	r3, #0
 801968a:	d013      	beq.n	80196b4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019690:	781a      	ldrb	r2, [r3, #0]
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801969c:	1c5a      	adds	r2, r3, #1
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80196a8:	b29b      	uxth	r3, r3
 80196aa:	3b01      	subs	r3, #1
 80196ac:	b29a      	uxth	r2, r3
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80196b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80196b6:	3b01      	subs	r3, #1
 80196b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80196ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d1a4      	bne.n	801960a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80196c0:	e7ff      	b.n	80196c2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80196c2:	bf00      	nop
 80196c4:	3744      	adds	r7, #68	@ 0x44
 80196c6:	46bd      	mov	sp, r7
 80196c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196cc:	4770      	bx	lr

080196ce <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80196ce:	b480      	push	{r7}
 80196d0:	b091      	sub	sp, #68	@ 0x44
 80196d2:	af00      	add	r7, sp, #0
 80196d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80196dc:	2b21      	cmp	r3, #33	@ 0x21
 80196de:	d165      	bne.n	80197ac <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80196e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80196e8:	e05c      	b.n	80197a4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80196f0:	b29b      	uxth	r3, r3
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d133      	bne.n	801975e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	3308      	adds	r3, #8
 80196fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196fe:	6a3b      	ldr	r3, [r7, #32]
 8019700:	e853 3f00 	ldrex	r3, [r3]
 8019704:	61fb      	str	r3, [r7, #28]
   return(result);
 8019706:	69fb      	ldr	r3, [r7, #28]
 8019708:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801970c:	637b      	str	r3, [r7, #52]	@ 0x34
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	3308      	adds	r3, #8
 8019714:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801971a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801971c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801971e:	e841 2300 	strex	r3, r2, [r1]
 8019722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019726:	2b00      	cmp	r3, #0
 8019728:	d1e5      	bne.n	80196f6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	e853 3f00 	ldrex	r3, [r3]
 8019736:	60bb      	str	r3, [r7, #8]
   return(result);
 8019738:	68bb      	ldr	r3, [r7, #8]
 801973a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801973e:	633b      	str	r3, [r7, #48]	@ 0x30
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	461a      	mov	r2, r3
 8019746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019748:	61bb      	str	r3, [r7, #24]
 801974a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801974c:	6979      	ldr	r1, [r7, #20]
 801974e:	69ba      	ldr	r2, [r7, #24]
 8019750:	e841 2300 	strex	r3, r2, [r1]
 8019754:	613b      	str	r3, [r7, #16]
   return(result);
 8019756:	693b      	ldr	r3, [r7, #16]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d1e6      	bne.n	801972a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801975c:	e026      	b.n	80197ac <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	69db      	ldr	r3, [r3, #28]
 8019764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019768:	2b00      	cmp	r3, #0
 801976a:	d018      	beq.n	801979e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019770:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019774:	881b      	ldrh	r3, [r3, #0]
 8019776:	461a      	mov	r2, r3
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019780:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019786:	1c9a      	adds	r2, r3, #2
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019792:	b29b      	uxth	r3, r3
 8019794:	3b01      	subs	r3, #1
 8019796:	b29a      	uxth	r2, r3
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801979e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80197a0:	3b01      	subs	r3, #1
 80197a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80197a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d19f      	bne.n	80196ea <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80197aa:	e7ff      	b.n	80197ac <UART_TxISR_16BIT_FIFOEN+0xde>
 80197ac:	bf00      	nop
 80197ae:	3744      	adds	r7, #68	@ 0x44
 80197b0:	46bd      	mov	sp, r7
 80197b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b6:	4770      	bx	lr

080197b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b088      	sub	sp, #32
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	e853 3f00 	ldrex	r3, [r3]
 80197cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80197ce:	68bb      	ldr	r3, [r7, #8]
 80197d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80197d4:	61fb      	str	r3, [r7, #28]
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	461a      	mov	r2, r3
 80197dc:	69fb      	ldr	r3, [r7, #28]
 80197de:	61bb      	str	r3, [r7, #24]
 80197e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197e2:	6979      	ldr	r1, [r7, #20]
 80197e4:	69ba      	ldr	r2, [r7, #24]
 80197e6:	e841 2300 	strex	r3, r2, [r1]
 80197ea:	613b      	str	r3, [r7, #16]
   return(result);
 80197ec:	693b      	ldr	r3, [r7, #16]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d1e6      	bne.n	80197c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	2220      	movs	r2, #32
 80197f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	2200      	movs	r2, #0
 80197fe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019800:	6878      	ldr	r0, [r7, #4]
 8019802:	f7fe fc57 	bl	80180b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019806:	bf00      	nop
 8019808:	3720      	adds	r7, #32
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}
	...

08019810 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019810:	b580      	push	{r7, lr}
 8019812:	b09c      	sub	sp, #112	@ 0x70
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801981e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019828:	2b22      	cmp	r3, #34	@ 0x22
 801982a:	f040 80be 	bne.w	80199aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019834:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019838:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801983c:	b2d9      	uxtb	r1, r3
 801983e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019842:	b2da      	uxtb	r2, r3
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019848:	400a      	ands	r2, r1
 801984a:	b2d2      	uxtb	r2, r2
 801984c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019852:	1c5a      	adds	r2, r3, #1
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801985e:	b29b      	uxth	r3, r3
 8019860:	3b01      	subs	r3, #1
 8019862:	b29a      	uxth	r2, r3
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019870:	b29b      	uxth	r3, r3
 8019872:	2b00      	cmp	r3, #0
 8019874:	f040 80a1 	bne.w	80199ba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801987e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019880:	e853 3f00 	ldrex	r3, [r3]
 8019884:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8019886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801988c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	461a      	mov	r2, r3
 8019894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019896:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019898:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801989a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801989c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801989e:	e841 2300 	strex	r3, r2, [r1]
 80198a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80198a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d1e6      	bne.n	8019878 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	3308      	adds	r3, #8
 80198b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198b4:	e853 3f00 	ldrex	r3, [r3]
 80198b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80198ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198bc:	f023 0301 	bic.w	r3, r3, #1
 80198c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	3308      	adds	r3, #8
 80198c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80198ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80198cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80198d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80198d2:	e841 2300 	strex	r3, r2, [r1]
 80198d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80198d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d1e5      	bne.n	80198aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	2220      	movs	r2, #32
 80198e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	2200      	movs	r2, #0
 80198ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	2200      	movs	r2, #0
 80198f0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	4a33      	ldr	r2, [pc, #204]	@ (80199c4 <UART_RxISR_8BIT+0x1b4>)
 80198f8:	4293      	cmp	r3, r2
 80198fa:	d01f      	beq.n	801993c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	685b      	ldr	r3, [r3, #4]
 8019902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019906:	2b00      	cmp	r3, #0
 8019908:	d018      	beq.n	801993c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019912:	e853 3f00 	ldrex	r3, [r3]
 8019916:	623b      	str	r3, [r7, #32]
   return(result);
 8019918:	6a3b      	ldr	r3, [r7, #32]
 801991a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801991e:	663b      	str	r3, [r7, #96]	@ 0x60
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	461a      	mov	r2, r3
 8019926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019928:	633b      	str	r3, [r7, #48]	@ 0x30
 801992a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801992c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801992e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019930:	e841 2300 	strex	r3, r2, [r1]
 8019934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019938:	2b00      	cmp	r3, #0
 801993a:	d1e6      	bne.n	801990a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019940:	2b01      	cmp	r3, #1
 8019942:	d12e      	bne.n	80199a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	2200      	movs	r2, #0
 8019948:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019950:	693b      	ldr	r3, [r7, #16]
 8019952:	e853 3f00 	ldrex	r3, [r3]
 8019956:	60fb      	str	r3, [r7, #12]
   return(result);
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	f023 0310 	bic.w	r3, r3, #16
 801995e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	461a      	mov	r2, r3
 8019966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019968:	61fb      	str	r3, [r7, #28]
 801996a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801996c:	69b9      	ldr	r1, [r7, #24]
 801996e:	69fa      	ldr	r2, [r7, #28]
 8019970:	e841 2300 	strex	r3, r2, [r1]
 8019974:	617b      	str	r3, [r7, #20]
   return(result);
 8019976:	697b      	ldr	r3, [r7, #20]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d1e6      	bne.n	801994a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	69db      	ldr	r3, [r3, #28]
 8019982:	f003 0310 	and.w	r3, r3, #16
 8019986:	2b10      	cmp	r3, #16
 8019988:	d103      	bne.n	8019992 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	2210      	movs	r2, #16
 8019990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019998:	4619      	mov	r1, r3
 801999a:	6878      	ldr	r0, [r7, #4]
 801999c:	f7fe fb9e 	bl	80180dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80199a0:	e00b      	b.n	80199ba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80199a2:	6878      	ldr	r0, [r7, #4]
 80199a4:	f7ec fa28 	bl	8005df8 <HAL_UART_RxCpltCallback>
}
 80199a8:	e007      	b.n	80199ba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	699a      	ldr	r2, [r3, #24]
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	f042 0208 	orr.w	r2, r2, #8
 80199b8:	619a      	str	r2, [r3, #24]
}
 80199ba:	bf00      	nop
 80199bc:	3770      	adds	r7, #112	@ 0x70
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}
 80199c2:	bf00      	nop
 80199c4:	58000c00 	.word	0x58000c00

080199c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b09c      	sub	sp, #112	@ 0x70
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80199d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80199e0:	2b22      	cmp	r3, #34	@ 0x22
 80199e2:	f040 80be 	bne.w	8019b62 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80199f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80199f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80199fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80199fe:	4013      	ands	r3, r2
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019a04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019a0a:	1c9a      	adds	r2, r3, #2
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019a16:	b29b      	uxth	r3, r3
 8019a18:	3b01      	subs	r3, #1
 8019a1a:	b29a      	uxth	r2, r3
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019a28:	b29b      	uxth	r3, r3
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	f040 80a1 	bne.w	8019b72 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019a38:	e853 3f00 	ldrex	r3, [r3]
 8019a3c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019a44:	667b      	str	r3, [r7, #100]	@ 0x64
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8019a50:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019a54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019a56:	e841 2300 	strex	r3, r2, [r1]
 8019a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d1e6      	bne.n	8019a30 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	3308      	adds	r3, #8
 8019a68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a6c:	e853 3f00 	ldrex	r3, [r3]
 8019a70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a74:	f023 0301 	bic.w	r3, r3, #1
 8019a78:	663b      	str	r3, [r7, #96]	@ 0x60
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	3308      	adds	r3, #8
 8019a80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019a82:	643a      	str	r2, [r7, #64]	@ 0x40
 8019a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019a8a:	e841 2300 	strex	r3, r2, [r1]
 8019a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d1e5      	bne.n	8019a62 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	2220      	movs	r2, #32
 8019a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	4a33      	ldr	r2, [pc, #204]	@ (8019b7c <UART_RxISR_16BIT+0x1b4>)
 8019ab0:	4293      	cmp	r3, r2
 8019ab2:	d01f      	beq.n	8019af4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	685b      	ldr	r3, [r3, #4]
 8019aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d018      	beq.n	8019af4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ac8:	6a3b      	ldr	r3, [r7, #32]
 8019aca:	e853 3f00 	ldrex	r3, [r3]
 8019ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8019ad0:	69fb      	ldr	r3, [r7, #28]
 8019ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	461a      	mov	r2, r3
 8019ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ae2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019ae8:	e841 2300 	strex	r3, r2, [r1]
 8019aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d1e6      	bne.n	8019ac2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019af8:	2b01      	cmp	r3, #1
 8019afa:	d12e      	bne.n	8019b5a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	2200      	movs	r2, #0
 8019b00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	e853 3f00 	ldrex	r3, [r3]
 8019b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019b10:	68bb      	ldr	r3, [r7, #8]
 8019b12:	f023 0310 	bic.w	r3, r3, #16
 8019b16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019b20:	61bb      	str	r3, [r7, #24]
 8019b22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b24:	6979      	ldr	r1, [r7, #20]
 8019b26:	69ba      	ldr	r2, [r7, #24]
 8019b28:	e841 2300 	strex	r3, r2, [r1]
 8019b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8019b2e:	693b      	ldr	r3, [r7, #16]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d1e6      	bne.n	8019b02 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	69db      	ldr	r3, [r3, #28]
 8019b3a:	f003 0310 	and.w	r3, r3, #16
 8019b3e:	2b10      	cmp	r3, #16
 8019b40:	d103      	bne.n	8019b4a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	2210      	movs	r2, #16
 8019b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019b50:	4619      	mov	r1, r3
 8019b52:	6878      	ldr	r0, [r7, #4]
 8019b54:	f7fe fac2 	bl	80180dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019b58:	e00b      	b.n	8019b72 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019b5a:	6878      	ldr	r0, [r7, #4]
 8019b5c:	f7ec f94c 	bl	8005df8 <HAL_UART_RxCpltCallback>
}
 8019b60:	e007      	b.n	8019b72 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	699a      	ldr	r2, [r3, #24]
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	f042 0208 	orr.w	r2, r2, #8
 8019b70:	619a      	str	r2, [r3, #24]
}
 8019b72:	bf00      	nop
 8019b74:	3770      	adds	r7, #112	@ 0x70
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bd80      	pop	{r7, pc}
 8019b7a:	bf00      	nop
 8019b7c:	58000c00 	.word	0x58000c00

08019b80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b0ac      	sub	sp, #176	@ 0xb0
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019b8e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	69db      	ldr	r3, [r3, #28]
 8019b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	689b      	ldr	r3, [r3, #8]
 8019bac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019bb6:	2b22      	cmp	r3, #34	@ 0x22
 8019bb8:	f040 8181 	bne.w	8019ebe <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019bc2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019bc6:	e124      	b.n	8019e12 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bce:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019bd2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8019bd6:	b2d9      	uxtb	r1, r3
 8019bd8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8019bdc:	b2da      	uxtb	r2, r3
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019be2:	400a      	ands	r2, r1
 8019be4:	b2d2      	uxtb	r2, r2
 8019be6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019bec:	1c5a      	adds	r2, r3, #1
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	3b01      	subs	r3, #1
 8019bfc:	b29a      	uxth	r2, r3
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	69db      	ldr	r3, [r3, #28]
 8019c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c12:	f003 0307 	and.w	r3, r3, #7
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d053      	beq.n	8019cc2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c1e:	f003 0301 	and.w	r3, r3, #1
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d011      	beq.n	8019c4a <UART_RxISR_8BIT_FIFOEN+0xca>
 8019c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d00b      	beq.n	8019c4a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	2201      	movs	r2, #1
 8019c38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c40:	f043 0201 	orr.w	r2, r3, #1
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c4e:	f003 0302 	and.w	r3, r3, #2
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d011      	beq.n	8019c7a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8019c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019c5a:	f003 0301 	and.w	r3, r3, #1
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d00b      	beq.n	8019c7a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	2202      	movs	r2, #2
 8019c68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c70:	f043 0204 	orr.w	r2, r3, #4
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019c7e:	f003 0304 	and.w	r3, r3, #4
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d011      	beq.n	8019caa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8019c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019c8a:	f003 0301 	and.w	r3, r3, #1
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d00b      	beq.n	8019caa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	2204      	movs	r2, #4
 8019c98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ca0:	f043 0202 	orr.w	r2, r3, #2
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d006      	beq.n	8019cc2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019cb4:	6878      	ldr	r0, [r7, #4]
 8019cb6:	f7fe fa07 	bl	80180c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	2200      	movs	r2, #0
 8019cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019cc8:	b29b      	uxth	r3, r3
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	f040 80a1 	bne.w	8019e12 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019cd8:	e853 3f00 	ldrex	r3, [r3]
 8019cdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8019cde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	461a      	mov	r2, r3
 8019cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019cf4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cf6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8019cf8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019cfa:	e841 2300 	strex	r3, r2, [r1]
 8019cfe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8019d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d1e4      	bne.n	8019cd0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	3308      	adds	r3, #8
 8019d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019d10:	e853 3f00 	ldrex	r3, [r3]
 8019d14:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8019d16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019d18:	4b6f      	ldr	r3, [pc, #444]	@ (8019ed8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8019d1a:	4013      	ands	r3, r2
 8019d1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	3308      	adds	r3, #8
 8019d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019d2a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8019d2c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d2e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019d30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8019d32:	e841 2300 	strex	r3, r2, [r1]
 8019d36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019d38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d1e3      	bne.n	8019d06 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	2220      	movs	r2, #32
 8019d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	2200      	movs	r2, #0
 8019d4a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2200      	movs	r2, #0
 8019d50:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	4a61      	ldr	r2, [pc, #388]	@ (8019edc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8019d58:	4293      	cmp	r3, r2
 8019d5a:	d021      	beq.n	8019da0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	685b      	ldr	r3, [r3, #4]
 8019d62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d01a      	beq.n	8019da0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d72:	e853 3f00 	ldrex	r3, [r3]
 8019d76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	461a      	mov	r2, r3
 8019d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019d8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8019d8e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d90:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019d92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019d94:	e841 2300 	strex	r3, r2, [r1]
 8019d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d1e4      	bne.n	8019d6a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019da4:	2b01      	cmp	r3, #1
 8019da6:	d130      	bne.n	8019e0a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2200      	movs	r2, #0
 8019dac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019db6:	e853 3f00 	ldrex	r3, [r3]
 8019dba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dbe:	f023 0310 	bic.w	r3, r3, #16
 8019dc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	461a      	mov	r2, r3
 8019dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8019dd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019dd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019dd8:	e841 2300 	strex	r3, r2, [r1]
 8019ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d1e4      	bne.n	8019dae <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	69db      	ldr	r3, [r3, #28]
 8019dea:	f003 0310 	and.w	r3, r3, #16
 8019dee:	2b10      	cmp	r3, #16
 8019df0:	d103      	bne.n	8019dfa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	2210      	movs	r2, #16
 8019df8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019e00:	4619      	mov	r1, r3
 8019e02:	6878      	ldr	r0, [r7, #4]
 8019e04:	f7fe f96a 	bl	80180dc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8019e08:	e00e      	b.n	8019e28 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8019e0a:	6878      	ldr	r0, [r7, #4]
 8019e0c:	f7eb fff4 	bl	8005df8 <HAL_UART_RxCpltCallback>
        break;
 8019e10:	e00a      	b.n	8019e28 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019e12:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d006      	beq.n	8019e28 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8019e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019e1e:	f003 0320 	and.w	r3, r3, #32
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	f47f aed0 	bne.w	8019bc8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019e2e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8019e32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d049      	beq.n	8019ece <UART_RxISR_8BIT_FIFOEN+0x34e>
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019e40:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8019e44:	429a      	cmp	r2, r3
 8019e46:	d242      	bcs.n	8019ece <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	3308      	adds	r3, #8
 8019e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e50:	6a3b      	ldr	r3, [r7, #32]
 8019e52:	e853 3f00 	ldrex	r3, [r3]
 8019e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8019e58:	69fb      	ldr	r3, [r7, #28]
 8019e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	3308      	adds	r3, #8
 8019e68:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019e74:	e841 2300 	strex	r3, r2, [r1]
 8019e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d1e3      	bne.n	8019e48 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	4a17      	ldr	r2, [pc, #92]	@ (8019ee0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8019e84:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	e853 3f00 	ldrex	r3, [r3]
 8019e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e94:	68bb      	ldr	r3, [r7, #8]
 8019e96:	f043 0320 	orr.w	r3, r3, #32
 8019e9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	461a      	mov	r2, r3
 8019ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ea8:	61bb      	str	r3, [r7, #24]
 8019eaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019eac:	6979      	ldr	r1, [r7, #20]
 8019eae:	69ba      	ldr	r2, [r7, #24]
 8019eb0:	e841 2300 	strex	r3, r2, [r1]
 8019eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8019eb6:	693b      	ldr	r3, [r7, #16]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d1e4      	bne.n	8019e86 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019ebc:	e007      	b.n	8019ece <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	699a      	ldr	r2, [r3, #24]
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	f042 0208 	orr.w	r2, r2, #8
 8019ecc:	619a      	str	r2, [r3, #24]
}
 8019ece:	bf00      	nop
 8019ed0:	37b0      	adds	r7, #176	@ 0xb0
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd80      	pop	{r7, pc}
 8019ed6:	bf00      	nop
 8019ed8:	effffffe 	.word	0xeffffffe
 8019edc:	58000c00 	.word	0x58000c00
 8019ee0:	08019811 	.word	0x08019811

08019ee4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b0ae      	sub	sp, #184	@ 0xb8
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019ef2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	69db      	ldr	r3, [r3, #28]
 8019efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	689b      	ldr	r3, [r3, #8]
 8019f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019f1a:	2b22      	cmp	r3, #34	@ 0x22
 8019f1c:	f040 8185 	bne.w	801a22a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019f26:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019f2a:	e128      	b.n	801a17e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f32:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8019f3e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8019f42:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8019f46:	4013      	ands	r3, r2
 8019f48:	b29a      	uxth	r2, r3
 8019f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019f4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f54:	1c9a      	adds	r2, r3, #2
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	3b01      	subs	r3, #1
 8019f64:	b29a      	uxth	r2, r3
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	69db      	ldr	r3, [r3, #28]
 8019f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019f76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f7a:	f003 0307 	and.w	r3, r3, #7
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d053      	beq.n	801a02a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019f86:	f003 0301 	and.w	r3, r3, #1
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d011      	beq.n	8019fb2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8019f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d00b      	beq.n	8019fb2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	2201      	movs	r2, #1
 8019fa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019fa8:	f043 0201 	orr.w	r2, r3, #1
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019fb6:	f003 0302 	and.w	r3, r3, #2
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d011      	beq.n	8019fe2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8019fbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019fc2:	f003 0301 	and.w	r3, r3, #1
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d00b      	beq.n	8019fe2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	2202      	movs	r2, #2
 8019fd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019fd8:	f043 0204 	orr.w	r2, r3, #4
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019fe6:	f003 0304 	and.w	r3, r3, #4
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d011      	beq.n	801a012 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8019fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019ff2:	f003 0301 	and.w	r3, r3, #1
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d00b      	beq.n	801a012 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	2204      	movs	r2, #4
 801a000:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a008:	f043 0202 	orr.w	r2, r3, #2
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d006      	beq.n	801a02a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a01c:	6878      	ldr	r0, [r7, #4]
 801a01e:	f7fe f853 	bl	80180c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	2200      	movs	r2, #0
 801a026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a030:	b29b      	uxth	r3, r3
 801a032:	2b00      	cmp	r3, #0
 801a034:	f040 80a3 	bne.w	801a17e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a03e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a040:	e853 3f00 	ldrex	r3, [r3]
 801a044:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a04c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	461a      	mov	r2, r3
 801a056:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a05a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a05e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a060:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a062:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a066:	e841 2300 	strex	r3, r2, [r1]
 801a06a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a06c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d1e2      	bne.n	801a038 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	3308      	adds	r3, #8
 801a078:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a07a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a07c:	e853 3f00 	ldrex	r3, [r3]
 801a080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a082:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a084:	4b6f      	ldr	r3, [pc, #444]	@ (801a244 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a086:	4013      	ands	r3, r2
 801a088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	3308      	adds	r3, #8
 801a092:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a096:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a098:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a09a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a09c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a09e:	e841 2300 	strex	r3, r2, [r1]
 801a0a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a0a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d1e3      	bne.n	801a072 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	2220      	movs	r2, #32
 801a0ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	4a61      	ldr	r2, [pc, #388]	@ (801a248 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a0c4:	4293      	cmp	r3, r2
 801a0c6:	d021      	beq.n	801a10c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	685b      	ldr	r3, [r3, #4]
 801a0ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d01a      	beq.n	801a10c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a0de:	e853 3f00 	ldrex	r3, [r3]
 801a0e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a0e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a0ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	461a      	mov	r2, r3
 801a0f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a0f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a0fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a0fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a100:	e841 2300 	strex	r3, r2, [r1]
 801a104:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d1e4      	bne.n	801a0d6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a110:	2b01      	cmp	r3, #1
 801a112:	d130      	bne.n	801a176 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2200      	movs	r2, #0
 801a118:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a122:	e853 3f00 	ldrex	r3, [r3]
 801a126:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a12a:	f023 0310 	bic.w	r3, r3, #16
 801a12e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	461a      	mov	r2, r3
 801a138:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a13c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a13e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a140:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a144:	e841 2300 	strex	r3, r2, [r1]
 801a148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d1e4      	bne.n	801a11a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	69db      	ldr	r3, [r3, #28]
 801a156:	f003 0310 	and.w	r3, r3, #16
 801a15a:	2b10      	cmp	r3, #16
 801a15c:	d103      	bne.n	801a166 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	2210      	movs	r2, #16
 801a164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a16c:	4619      	mov	r1, r3
 801a16e:	6878      	ldr	r0, [r7, #4]
 801a170:	f7fd ffb4 	bl	80180dc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a174:	e00e      	b.n	801a194 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801a176:	6878      	ldr	r0, [r7, #4]
 801a178:	f7eb fe3e 	bl	8005df8 <HAL_UART_RxCpltCallback>
        break;
 801a17c:	e00a      	b.n	801a194 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a17e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a182:	2b00      	cmp	r3, #0
 801a184:	d006      	beq.n	801a194 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801a186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a18a:	f003 0320 	and.w	r3, r3, #32
 801a18e:	2b00      	cmp	r3, #0
 801a190:	f47f aecc 	bne.w	8019f2c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a19a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a19e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d049      	beq.n	801a23a <UART_RxISR_16BIT_FIFOEN+0x356>
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a1ac:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a1b0:	429a      	cmp	r2, r3
 801a1b2:	d242      	bcs.n	801a23a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	3308      	adds	r3, #8
 801a1ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1be:	e853 3f00 	ldrex	r3, [r3]
 801a1c2:	623b      	str	r3, [r7, #32]
   return(result);
 801a1c4:	6a3b      	ldr	r3, [r7, #32]
 801a1c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a1ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	3308      	adds	r3, #8
 801a1d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a1d8:	633a      	str	r2, [r7, #48]	@ 0x30
 801a1da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1e0:	e841 2300 	strex	r3, r2, [r1]
 801a1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d1e3      	bne.n	801a1b4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	4a17      	ldr	r2, [pc, #92]	@ (801a24c <UART_RxISR_16BIT_FIFOEN+0x368>)
 801a1f0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1f8:	693b      	ldr	r3, [r7, #16]
 801a1fa:	e853 3f00 	ldrex	r3, [r3]
 801a1fe:	60fb      	str	r3, [r7, #12]
   return(result);
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	f043 0320 	orr.w	r3, r3, #32
 801a206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	461a      	mov	r2, r3
 801a210:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a214:	61fb      	str	r3, [r7, #28]
 801a216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a218:	69b9      	ldr	r1, [r7, #24]
 801a21a:	69fa      	ldr	r2, [r7, #28]
 801a21c:	e841 2300 	strex	r3, r2, [r1]
 801a220:	617b      	str	r3, [r7, #20]
   return(result);
 801a222:	697b      	ldr	r3, [r7, #20]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d1e4      	bne.n	801a1f2 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a228:	e007      	b.n	801a23a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	699a      	ldr	r2, [r3, #24]
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	f042 0208 	orr.w	r2, r2, #8
 801a238:	619a      	str	r2, [r3, #24]
}
 801a23a:	bf00      	nop
 801a23c:	37b8      	adds	r7, #184	@ 0xb8
 801a23e:	46bd      	mov	sp, r7
 801a240:	bd80      	pop	{r7, pc}
 801a242:	bf00      	nop
 801a244:	effffffe 	.word	0xeffffffe
 801a248:	58000c00 	.word	0x58000c00
 801a24c:	080199c9 	.word	0x080199c9

0801a250 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a250:	b480      	push	{r7}
 801a252:	b083      	sub	sp, #12
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a258:	bf00      	nop
 801a25a:	370c      	adds	r7, #12
 801a25c:	46bd      	mov	sp, r7
 801a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a262:	4770      	bx	lr

0801a264 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a264:	b480      	push	{r7}
 801a266:	b083      	sub	sp, #12
 801a268:	af00      	add	r7, sp, #0
 801a26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a26c:	bf00      	nop
 801a26e:	370c      	adds	r7, #12
 801a270:	46bd      	mov	sp, r7
 801a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a276:	4770      	bx	lr

0801a278 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a278:	b480      	push	{r7}
 801a27a:	b083      	sub	sp, #12
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a280:	bf00      	nop
 801a282:	370c      	adds	r7, #12
 801a284:	46bd      	mov	sp, r7
 801a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28a:	4770      	bx	lr

0801a28c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a28c:	b480      	push	{r7}
 801a28e:	b085      	sub	sp, #20
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a29a:	2b01      	cmp	r3, #1
 801a29c:	d101      	bne.n	801a2a2 <HAL_UARTEx_DisableFifoMode+0x16>
 801a29e:	2302      	movs	r3, #2
 801a2a0:	e027      	b.n	801a2f2 <HAL_UARTEx_DisableFifoMode+0x66>
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	2201      	movs	r2, #1
 801a2a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	2224      	movs	r2, #36	@ 0x24
 801a2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	681a      	ldr	r2, [r3, #0]
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	f022 0201 	bic.w	r2, r2, #1
 801a2c8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a2d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	2200      	movs	r2, #0
 801a2d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	68fa      	ldr	r2, [r7, #12]
 801a2de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	2220      	movs	r2, #32
 801a2e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a2f0:	2300      	movs	r3, #0
}
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	3714      	adds	r7, #20
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fc:	4770      	bx	lr

0801a2fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a2fe:	b580      	push	{r7, lr}
 801a300:	b084      	sub	sp, #16
 801a302:	af00      	add	r7, sp, #0
 801a304:	6078      	str	r0, [r7, #4]
 801a306:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a30e:	2b01      	cmp	r3, #1
 801a310:	d101      	bne.n	801a316 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a312:	2302      	movs	r3, #2
 801a314:	e02d      	b.n	801a372 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	2201      	movs	r2, #1
 801a31a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	2224      	movs	r2, #36	@ 0x24
 801a322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	681a      	ldr	r2, [r3, #0]
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	f022 0201 	bic.w	r2, r2, #1
 801a33c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	689b      	ldr	r3, [r3, #8]
 801a344:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	683a      	ldr	r2, [r7, #0]
 801a34e:	430a      	orrs	r2, r1
 801a350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a352:	6878      	ldr	r0, [r7, #4]
 801a354:	f000 f850 	bl	801a3f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	68fa      	ldr	r2, [r7, #12]
 801a35e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	2220      	movs	r2, #32
 801a364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	2200      	movs	r2, #0
 801a36c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a370:	2300      	movs	r3, #0
}
 801a372:	4618      	mov	r0, r3
 801a374:	3710      	adds	r7, #16
 801a376:	46bd      	mov	sp, r7
 801a378:	bd80      	pop	{r7, pc}

0801a37a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a37a:	b580      	push	{r7, lr}
 801a37c:	b084      	sub	sp, #16
 801a37e:	af00      	add	r7, sp, #0
 801a380:	6078      	str	r0, [r7, #4]
 801a382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a38a:	2b01      	cmp	r3, #1
 801a38c:	d101      	bne.n	801a392 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a38e:	2302      	movs	r3, #2
 801a390:	e02d      	b.n	801a3ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	2201      	movs	r2, #1
 801a396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	2224      	movs	r2, #36	@ 0x24
 801a39e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	681a      	ldr	r2, [r3, #0]
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	f022 0201 	bic.w	r2, r2, #1
 801a3b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	689b      	ldr	r3, [r3, #8]
 801a3c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	683a      	ldr	r2, [r7, #0]
 801a3ca:	430a      	orrs	r2, r1
 801a3cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a3ce:	6878      	ldr	r0, [r7, #4]
 801a3d0:	f000 f812 	bl	801a3f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	68fa      	ldr	r2, [r7, #12]
 801a3da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	2220      	movs	r2, #32
 801a3e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a3ec:	2300      	movs	r3, #0
}
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	3710      	adds	r7, #16
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	bd80      	pop	{r7, pc}
	...

0801a3f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a3f8:	b480      	push	{r7}
 801a3fa:	b085      	sub	sp, #20
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a404:	2b00      	cmp	r3, #0
 801a406:	d108      	bne.n	801a41a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2201      	movs	r2, #1
 801a40c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	2201      	movs	r2, #1
 801a414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a418:	e031      	b.n	801a47e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a41a:	2310      	movs	r3, #16
 801a41c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a41e:	2310      	movs	r3, #16
 801a420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	689b      	ldr	r3, [r3, #8]
 801a428:	0e5b      	lsrs	r3, r3, #25
 801a42a:	b2db      	uxtb	r3, r3
 801a42c:	f003 0307 	and.w	r3, r3, #7
 801a430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	689b      	ldr	r3, [r3, #8]
 801a438:	0f5b      	lsrs	r3, r3, #29
 801a43a:	b2db      	uxtb	r3, r3
 801a43c:	f003 0307 	and.w	r3, r3, #7
 801a440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a442:	7bbb      	ldrb	r3, [r7, #14]
 801a444:	7b3a      	ldrb	r2, [r7, #12]
 801a446:	4911      	ldr	r1, [pc, #68]	@ (801a48c <UARTEx_SetNbDataToProcess+0x94>)
 801a448:	5c8a      	ldrb	r2, [r1, r2]
 801a44a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a44e:	7b3a      	ldrb	r2, [r7, #12]
 801a450:	490f      	ldr	r1, [pc, #60]	@ (801a490 <UARTEx_SetNbDataToProcess+0x98>)
 801a452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a454:	fb93 f3f2 	sdiv	r3, r3, r2
 801a458:	b29a      	uxth	r2, r3
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a460:	7bfb      	ldrb	r3, [r7, #15]
 801a462:	7b7a      	ldrb	r2, [r7, #13]
 801a464:	4909      	ldr	r1, [pc, #36]	@ (801a48c <UARTEx_SetNbDataToProcess+0x94>)
 801a466:	5c8a      	ldrb	r2, [r1, r2]
 801a468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a46c:	7b7a      	ldrb	r2, [r7, #13]
 801a46e:	4908      	ldr	r1, [pc, #32]	@ (801a490 <UARTEx_SetNbDataToProcess+0x98>)
 801a470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a472:	fb93 f3f2 	sdiv	r3, r3, r2
 801a476:	b29a      	uxth	r2, r3
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a47e:	bf00      	nop
 801a480:	3714      	adds	r7, #20
 801a482:	46bd      	mov	sp, r7
 801a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a488:	4770      	bx	lr
 801a48a:	bf00      	nop
 801a48c:	0801e300 	.word	0x0801e300
 801a490:	0801e308 	.word	0x0801e308

0801a494 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a494:	b580      	push	{r7, lr}
 801a496:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801a498:	4904      	ldr	r1, [pc, #16]	@ (801a4ac <MX_FATFS_Init+0x18>)
 801a49a:	4805      	ldr	r0, [pc, #20]	@ (801a4b0 <MX_FATFS_Init+0x1c>)
 801a49c:	f003 f8d8 	bl	801d650 <FATFS_LinkDriver>
 801a4a0:	4603      	mov	r3, r0
 801a4a2:	461a      	mov	r2, r3
 801a4a4:	4b03      	ldr	r3, [pc, #12]	@ (801a4b4 <MX_FATFS_Init+0x20>)
 801a4a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a4a8:	bf00      	nop
 801a4aa:	bd80      	pop	{r7, pc}
 801a4ac:	2400054c 	.word	0x2400054c
 801a4b0:	24000014 	.word	0x24000014
 801a4b4:	24000548 	.word	0x24000548

0801a4b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a4b8:	b480      	push	{r7}
 801a4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a4bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a4be:	4618      	mov	r0, r3
 801a4c0:	46bd      	mov	sp, r7
 801a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c6:	4770      	bx	lr

0801a4c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b082      	sub	sp, #8
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801a4d2:	79fb      	ldrb	r3, [r7, #7]
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f7e9 fdcd 	bl	8004074 <SD_disk_initialize>
 801a4da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	3708      	adds	r7, #8
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}

0801a4e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801a4e4:	b580      	push	{r7, lr}
 801a4e6:	b082      	sub	sp, #8
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801a4ee:	79fb      	ldrb	r3, [r7, #7]
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7e9 feab 	bl	800424c <SD_disk_status>
 801a4f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	3708      	adds	r7, #8
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	bd80      	pop	{r7, pc}

0801a500 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801a500:	b580      	push	{r7, lr}
 801a502:	b084      	sub	sp, #16
 801a504:	af00      	add	r7, sp, #0
 801a506:	60b9      	str	r1, [r7, #8]
 801a508:	607a      	str	r2, [r7, #4]
 801a50a:	603b      	str	r3, [r7, #0]
 801a50c:	4603      	mov	r3, r0
 801a50e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801a510:	7bf8      	ldrb	r0, [r7, #15]
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	687a      	ldr	r2, [r7, #4]
 801a516:	68b9      	ldr	r1, [r7, #8]
 801a518:	f7e9 feae 	bl	8004278 <SD_disk_read>
 801a51c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801a51e:	4618      	mov	r0, r3
 801a520:	3710      	adds	r7, #16
 801a522:	46bd      	mov	sp, r7
 801a524:	bd80      	pop	{r7, pc}

0801a526 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801a526:	b580      	push	{r7, lr}
 801a528:	b084      	sub	sp, #16
 801a52a:	af00      	add	r7, sp, #0
 801a52c:	60b9      	str	r1, [r7, #8]
 801a52e:	607a      	str	r2, [r7, #4]
 801a530:	603b      	str	r3, [r7, #0]
 801a532:	4603      	mov	r3, r0
 801a534:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801a536:	7bf8      	ldrb	r0, [r7, #15]
 801a538:	683b      	ldr	r3, [r7, #0]
 801a53a:	687a      	ldr	r2, [r7, #4]
 801a53c:	68b9      	ldr	r1, [r7, #8]
 801a53e:	f7e9 ff05 	bl	800434c <SD_disk_write>
 801a542:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801a544:	4618      	mov	r0, r3
 801a546:	3710      	adds	r7, #16
 801a548:	46bd      	mov	sp, r7
 801a54a:	bd80      	pop	{r7, pc}

0801a54c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b082      	sub	sp, #8
 801a550:	af00      	add	r7, sp, #0
 801a552:	4603      	mov	r3, r0
 801a554:	603a      	str	r2, [r7, #0]
 801a556:	71fb      	strb	r3, [r7, #7]
 801a558:	460b      	mov	r3, r1
 801a55a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801a55c:	79b9      	ldrb	r1, [r7, #6]
 801a55e:	79fb      	ldrb	r3, [r7, #7]
 801a560:	683a      	ldr	r2, [r7, #0]
 801a562:	4618      	mov	r0, r3
 801a564:	f7e9 ff76 	bl	8004454 <SD_disk_ioctl>
 801a568:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801a56a:	4618      	mov	r0, r3
 801a56c:	3708      	adds	r7, #8
 801a56e:	46bd      	mov	sp, r7
 801a570:	bd80      	pop	{r7, pc}
	...

0801a574 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a574:	b580      	push	{r7, lr}
 801a576:	b084      	sub	sp, #16
 801a578:	af00      	add	r7, sp, #0
 801a57a:	4603      	mov	r3, r0
 801a57c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a57e:	79fb      	ldrb	r3, [r7, #7]
 801a580:	4a08      	ldr	r2, [pc, #32]	@ (801a5a4 <disk_status+0x30>)
 801a582:	009b      	lsls	r3, r3, #2
 801a584:	4413      	add	r3, r2
 801a586:	685b      	ldr	r3, [r3, #4]
 801a588:	685b      	ldr	r3, [r3, #4]
 801a58a:	79fa      	ldrb	r2, [r7, #7]
 801a58c:	4905      	ldr	r1, [pc, #20]	@ (801a5a4 <disk_status+0x30>)
 801a58e:	440a      	add	r2, r1
 801a590:	7a12      	ldrb	r2, [r2, #8]
 801a592:	4610      	mov	r0, r2
 801a594:	4798      	blx	r3
 801a596:	4603      	mov	r3, r0
 801a598:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a59a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a59c:	4618      	mov	r0, r3
 801a59e:	3710      	adds	r7, #16
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	bd80      	pop	{r7, pc}
 801a5a4:	24000768 	.word	0x24000768

0801a5a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b084      	sub	sp, #16
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a5b6:	79fb      	ldrb	r3, [r7, #7]
 801a5b8:	4a0e      	ldr	r2, [pc, #56]	@ (801a5f4 <disk_initialize+0x4c>)
 801a5ba:	5cd3      	ldrb	r3, [r2, r3]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d114      	bne.n	801a5ea <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a5c0:	79fb      	ldrb	r3, [r7, #7]
 801a5c2:	4a0c      	ldr	r2, [pc, #48]	@ (801a5f4 <disk_initialize+0x4c>)
 801a5c4:	009b      	lsls	r3, r3, #2
 801a5c6:	4413      	add	r3, r2
 801a5c8:	685b      	ldr	r3, [r3, #4]
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	79fa      	ldrb	r2, [r7, #7]
 801a5ce:	4909      	ldr	r1, [pc, #36]	@ (801a5f4 <disk_initialize+0x4c>)
 801a5d0:	440a      	add	r2, r1
 801a5d2:	7a12      	ldrb	r2, [r2, #8]
 801a5d4:	4610      	mov	r0, r2
 801a5d6:	4798      	blx	r3
 801a5d8:	4603      	mov	r3, r0
 801a5da:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a5dc:	7bfb      	ldrb	r3, [r7, #15]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d103      	bne.n	801a5ea <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a5e2:	79fb      	ldrb	r3, [r7, #7]
 801a5e4:	4a03      	ldr	r2, [pc, #12]	@ (801a5f4 <disk_initialize+0x4c>)
 801a5e6:	2101      	movs	r1, #1
 801a5e8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	3710      	adds	r7, #16
 801a5f0:	46bd      	mov	sp, r7
 801a5f2:	bd80      	pop	{r7, pc}
 801a5f4:	24000768 	.word	0x24000768

0801a5f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a5f8:	b590      	push	{r4, r7, lr}
 801a5fa:	b087      	sub	sp, #28
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	60b9      	str	r1, [r7, #8]
 801a600:	607a      	str	r2, [r7, #4]
 801a602:	603b      	str	r3, [r7, #0]
 801a604:	4603      	mov	r3, r0
 801a606:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a608:	7bfb      	ldrb	r3, [r7, #15]
 801a60a:	4a0a      	ldr	r2, [pc, #40]	@ (801a634 <disk_read+0x3c>)
 801a60c:	009b      	lsls	r3, r3, #2
 801a60e:	4413      	add	r3, r2
 801a610:	685b      	ldr	r3, [r3, #4]
 801a612:	689c      	ldr	r4, [r3, #8]
 801a614:	7bfb      	ldrb	r3, [r7, #15]
 801a616:	4a07      	ldr	r2, [pc, #28]	@ (801a634 <disk_read+0x3c>)
 801a618:	4413      	add	r3, r2
 801a61a:	7a18      	ldrb	r0, [r3, #8]
 801a61c:	683b      	ldr	r3, [r7, #0]
 801a61e:	687a      	ldr	r2, [r7, #4]
 801a620:	68b9      	ldr	r1, [r7, #8]
 801a622:	47a0      	blx	r4
 801a624:	4603      	mov	r3, r0
 801a626:	75fb      	strb	r3, [r7, #23]
  return res;
 801a628:	7dfb      	ldrb	r3, [r7, #23]
}
 801a62a:	4618      	mov	r0, r3
 801a62c:	371c      	adds	r7, #28
 801a62e:	46bd      	mov	sp, r7
 801a630:	bd90      	pop	{r4, r7, pc}
 801a632:	bf00      	nop
 801a634:	24000768 	.word	0x24000768

0801a638 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a638:	b590      	push	{r4, r7, lr}
 801a63a:	b087      	sub	sp, #28
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	60b9      	str	r1, [r7, #8]
 801a640:	607a      	str	r2, [r7, #4]
 801a642:	603b      	str	r3, [r7, #0]
 801a644:	4603      	mov	r3, r0
 801a646:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a648:	7bfb      	ldrb	r3, [r7, #15]
 801a64a:	4a0a      	ldr	r2, [pc, #40]	@ (801a674 <disk_write+0x3c>)
 801a64c:	009b      	lsls	r3, r3, #2
 801a64e:	4413      	add	r3, r2
 801a650:	685b      	ldr	r3, [r3, #4]
 801a652:	68dc      	ldr	r4, [r3, #12]
 801a654:	7bfb      	ldrb	r3, [r7, #15]
 801a656:	4a07      	ldr	r2, [pc, #28]	@ (801a674 <disk_write+0x3c>)
 801a658:	4413      	add	r3, r2
 801a65a:	7a18      	ldrb	r0, [r3, #8]
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	687a      	ldr	r2, [r7, #4]
 801a660:	68b9      	ldr	r1, [r7, #8]
 801a662:	47a0      	blx	r4
 801a664:	4603      	mov	r3, r0
 801a666:	75fb      	strb	r3, [r7, #23]
  return res;
 801a668:	7dfb      	ldrb	r3, [r7, #23]
}
 801a66a:	4618      	mov	r0, r3
 801a66c:	371c      	adds	r7, #28
 801a66e:	46bd      	mov	sp, r7
 801a670:	bd90      	pop	{r4, r7, pc}
 801a672:	bf00      	nop
 801a674:	24000768 	.word	0x24000768

0801a678 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b084      	sub	sp, #16
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	4603      	mov	r3, r0
 801a680:	603a      	str	r2, [r7, #0]
 801a682:	71fb      	strb	r3, [r7, #7]
 801a684:	460b      	mov	r3, r1
 801a686:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a688:	79fb      	ldrb	r3, [r7, #7]
 801a68a:	4a09      	ldr	r2, [pc, #36]	@ (801a6b0 <disk_ioctl+0x38>)
 801a68c:	009b      	lsls	r3, r3, #2
 801a68e:	4413      	add	r3, r2
 801a690:	685b      	ldr	r3, [r3, #4]
 801a692:	691b      	ldr	r3, [r3, #16]
 801a694:	79fa      	ldrb	r2, [r7, #7]
 801a696:	4906      	ldr	r1, [pc, #24]	@ (801a6b0 <disk_ioctl+0x38>)
 801a698:	440a      	add	r2, r1
 801a69a:	7a10      	ldrb	r0, [r2, #8]
 801a69c:	79b9      	ldrb	r1, [r7, #6]
 801a69e:	683a      	ldr	r2, [r7, #0]
 801a6a0:	4798      	blx	r3
 801a6a2:	4603      	mov	r3, r0
 801a6a4:	73fb      	strb	r3, [r7, #15]
  return res;
 801a6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	3710      	adds	r7, #16
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}
 801a6b0:	24000768 	.word	0x24000768

0801a6b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a6b4:	b480      	push	{r7}
 801a6b6:	b085      	sub	sp, #20
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	3301      	adds	r3, #1
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a6c4:	89fb      	ldrh	r3, [r7, #14]
 801a6c6:	021b      	lsls	r3, r3, #8
 801a6c8:	b21a      	sxth	r2, r3
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	b21b      	sxth	r3, r3
 801a6d0:	4313      	orrs	r3, r2
 801a6d2:	b21b      	sxth	r3, r3
 801a6d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a6d6:	89fb      	ldrh	r3, [r7, #14]
}
 801a6d8:	4618      	mov	r0, r3
 801a6da:	3714      	adds	r7, #20
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e2:	4770      	bx	lr

0801a6e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a6e4:	b480      	push	{r7}
 801a6e6:	b085      	sub	sp, #20
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	3303      	adds	r3, #3
 801a6f0:	781b      	ldrb	r3, [r3, #0]
 801a6f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	021b      	lsls	r3, r3, #8
 801a6f8:	687a      	ldr	r2, [r7, #4]
 801a6fa:	3202      	adds	r2, #2
 801a6fc:	7812      	ldrb	r2, [r2, #0]
 801a6fe:	4313      	orrs	r3, r2
 801a700:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	021b      	lsls	r3, r3, #8
 801a706:	687a      	ldr	r2, [r7, #4]
 801a708:	3201      	adds	r2, #1
 801a70a:	7812      	ldrb	r2, [r2, #0]
 801a70c:	4313      	orrs	r3, r2
 801a70e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	021b      	lsls	r3, r3, #8
 801a714:	687a      	ldr	r2, [r7, #4]
 801a716:	7812      	ldrb	r2, [r2, #0]
 801a718:	4313      	orrs	r3, r2
 801a71a:	60fb      	str	r3, [r7, #12]
	return rv;
 801a71c:	68fb      	ldr	r3, [r7, #12]
}
 801a71e:	4618      	mov	r0, r3
 801a720:	3714      	adds	r7, #20
 801a722:	46bd      	mov	sp, r7
 801a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a728:	4770      	bx	lr

0801a72a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a72a:	b480      	push	{r7}
 801a72c:	b083      	sub	sp, #12
 801a72e:	af00      	add	r7, sp, #0
 801a730:	6078      	str	r0, [r7, #4]
 801a732:	460b      	mov	r3, r1
 801a734:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	1c5a      	adds	r2, r3, #1
 801a73a:	607a      	str	r2, [r7, #4]
 801a73c:	887a      	ldrh	r2, [r7, #2]
 801a73e:	b2d2      	uxtb	r2, r2
 801a740:	701a      	strb	r2, [r3, #0]
 801a742:	887b      	ldrh	r3, [r7, #2]
 801a744:	0a1b      	lsrs	r3, r3, #8
 801a746:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	1c5a      	adds	r2, r3, #1
 801a74c:	607a      	str	r2, [r7, #4]
 801a74e:	887a      	ldrh	r2, [r7, #2]
 801a750:	b2d2      	uxtb	r2, r2
 801a752:	701a      	strb	r2, [r3, #0]
}
 801a754:	bf00      	nop
 801a756:	370c      	adds	r7, #12
 801a758:	46bd      	mov	sp, r7
 801a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a75e:	4770      	bx	lr

0801a760 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a760:	b480      	push	{r7}
 801a762:	b083      	sub	sp, #12
 801a764:	af00      	add	r7, sp, #0
 801a766:	6078      	str	r0, [r7, #4]
 801a768:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	1c5a      	adds	r2, r3, #1
 801a76e:	607a      	str	r2, [r7, #4]
 801a770:	683a      	ldr	r2, [r7, #0]
 801a772:	b2d2      	uxtb	r2, r2
 801a774:	701a      	strb	r2, [r3, #0]
 801a776:	683b      	ldr	r3, [r7, #0]
 801a778:	0a1b      	lsrs	r3, r3, #8
 801a77a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	1c5a      	adds	r2, r3, #1
 801a780:	607a      	str	r2, [r7, #4]
 801a782:	683a      	ldr	r2, [r7, #0]
 801a784:	b2d2      	uxtb	r2, r2
 801a786:	701a      	strb	r2, [r3, #0]
 801a788:	683b      	ldr	r3, [r7, #0]
 801a78a:	0a1b      	lsrs	r3, r3, #8
 801a78c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	1c5a      	adds	r2, r3, #1
 801a792:	607a      	str	r2, [r7, #4]
 801a794:	683a      	ldr	r2, [r7, #0]
 801a796:	b2d2      	uxtb	r2, r2
 801a798:	701a      	strb	r2, [r3, #0]
 801a79a:	683b      	ldr	r3, [r7, #0]
 801a79c:	0a1b      	lsrs	r3, r3, #8
 801a79e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	1c5a      	adds	r2, r3, #1
 801a7a4:	607a      	str	r2, [r7, #4]
 801a7a6:	683a      	ldr	r2, [r7, #0]
 801a7a8:	b2d2      	uxtb	r2, r2
 801a7aa:	701a      	strb	r2, [r3, #0]
}
 801a7ac:	bf00      	nop
 801a7ae:	370c      	adds	r7, #12
 801a7b0:	46bd      	mov	sp, r7
 801a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b6:	4770      	bx	lr

0801a7b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a7b8:	b480      	push	{r7}
 801a7ba:	b087      	sub	sp, #28
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	60f8      	str	r0, [r7, #12]
 801a7c0:	60b9      	str	r1, [r7, #8]
 801a7c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801a7c8:	68bb      	ldr	r3, [r7, #8]
 801a7ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d00d      	beq.n	801a7ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801a7d2:	693a      	ldr	r2, [r7, #16]
 801a7d4:	1c53      	adds	r3, r2, #1
 801a7d6:	613b      	str	r3, [r7, #16]
 801a7d8:	697b      	ldr	r3, [r7, #20]
 801a7da:	1c59      	adds	r1, r3, #1
 801a7dc:	6179      	str	r1, [r7, #20]
 801a7de:	7812      	ldrb	r2, [r2, #0]
 801a7e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	3b01      	subs	r3, #1
 801a7e6:	607b      	str	r3, [r7, #4]
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d1f1      	bne.n	801a7d2 <mem_cpy+0x1a>
	}
}
 801a7ee:	bf00      	nop
 801a7f0:	371c      	adds	r7, #28
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f8:	4770      	bx	lr

0801a7fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801a7fa:	b480      	push	{r7}
 801a7fc:	b087      	sub	sp, #28
 801a7fe:	af00      	add	r7, sp, #0
 801a800:	60f8      	str	r0, [r7, #12]
 801a802:	60b9      	str	r1, [r7, #8]
 801a804:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801a80a:	697b      	ldr	r3, [r7, #20]
 801a80c:	1c5a      	adds	r2, r3, #1
 801a80e:	617a      	str	r2, [r7, #20]
 801a810:	68ba      	ldr	r2, [r7, #8]
 801a812:	b2d2      	uxtb	r2, r2
 801a814:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	3b01      	subs	r3, #1
 801a81a:	607b      	str	r3, [r7, #4]
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d1f3      	bne.n	801a80a <mem_set+0x10>
}
 801a822:	bf00      	nop
 801a824:	bf00      	nop
 801a826:	371c      	adds	r7, #28
 801a828:	46bd      	mov	sp, r7
 801a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82e:	4770      	bx	lr

0801a830 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801a830:	b480      	push	{r7}
 801a832:	b089      	sub	sp, #36	@ 0x24
 801a834:	af00      	add	r7, sp, #0
 801a836:	60f8      	str	r0, [r7, #12]
 801a838:	60b9      	str	r1, [r7, #8]
 801a83a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	61fb      	str	r3, [r7, #28]
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801a844:	2300      	movs	r3, #0
 801a846:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801a848:	69fb      	ldr	r3, [r7, #28]
 801a84a:	1c5a      	adds	r2, r3, #1
 801a84c:	61fa      	str	r2, [r7, #28]
 801a84e:	781b      	ldrb	r3, [r3, #0]
 801a850:	4619      	mov	r1, r3
 801a852:	69bb      	ldr	r3, [r7, #24]
 801a854:	1c5a      	adds	r2, r3, #1
 801a856:	61ba      	str	r2, [r7, #24]
 801a858:	781b      	ldrb	r3, [r3, #0]
 801a85a:	1acb      	subs	r3, r1, r3
 801a85c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	3b01      	subs	r3, #1
 801a862:	607b      	str	r3, [r7, #4]
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d002      	beq.n	801a870 <mem_cmp+0x40>
 801a86a:	697b      	ldr	r3, [r7, #20]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d0eb      	beq.n	801a848 <mem_cmp+0x18>

	return r;
 801a870:	697b      	ldr	r3, [r7, #20]
}
 801a872:	4618      	mov	r0, r3
 801a874:	3724      	adds	r7, #36	@ 0x24
 801a876:	46bd      	mov	sp, r7
 801a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87c:	4770      	bx	lr

0801a87e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801a87e:	b480      	push	{r7}
 801a880:	b083      	sub	sp, #12
 801a882:	af00      	add	r7, sp, #0
 801a884:	6078      	str	r0, [r7, #4]
 801a886:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801a888:	e002      	b.n	801a890 <chk_chr+0x12>
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	3301      	adds	r3, #1
 801a88e:	607b      	str	r3, [r7, #4]
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	781b      	ldrb	r3, [r3, #0]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d005      	beq.n	801a8a4 <chk_chr+0x26>
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	781b      	ldrb	r3, [r3, #0]
 801a89c:	461a      	mov	r2, r3
 801a89e:	683b      	ldr	r3, [r7, #0]
 801a8a0:	4293      	cmp	r3, r2
 801a8a2:	d1f2      	bne.n	801a88a <chk_chr+0xc>
	return *str;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	781b      	ldrb	r3, [r3, #0]
}
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	370c      	adds	r7, #12
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8b2:	4770      	bx	lr

0801a8b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a8b4:	b480      	push	{r7}
 801a8b6:	b085      	sub	sp, #20
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	6078      	str	r0, [r7, #4]
 801a8bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a8be:	2300      	movs	r3, #0
 801a8c0:	60bb      	str	r3, [r7, #8]
 801a8c2:	68bb      	ldr	r3, [r7, #8]
 801a8c4:	60fb      	str	r3, [r7, #12]
 801a8c6:	e029      	b.n	801a91c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801a8c8:	4a27      	ldr	r2, [pc, #156]	@ (801a968 <chk_lock+0xb4>)
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	011b      	lsls	r3, r3, #4
 801a8ce:	4413      	add	r3, r2
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d01d      	beq.n	801a912 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a8d6:	4a24      	ldr	r2, [pc, #144]	@ (801a968 <chk_lock+0xb4>)
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	011b      	lsls	r3, r3, #4
 801a8dc:	4413      	add	r3, r2
 801a8de:	681a      	ldr	r2, [r3, #0]
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	429a      	cmp	r2, r3
 801a8e6:	d116      	bne.n	801a916 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801a8e8:	4a1f      	ldr	r2, [pc, #124]	@ (801a968 <chk_lock+0xb4>)
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	011b      	lsls	r3, r3, #4
 801a8ee:	4413      	add	r3, r2
 801a8f0:	3304      	adds	r3, #4
 801a8f2:	681a      	ldr	r2, [r3, #0]
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d10c      	bne.n	801a916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a8fc:	4a1a      	ldr	r2, [pc, #104]	@ (801a968 <chk_lock+0xb4>)
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	011b      	lsls	r3, r3, #4
 801a902:	4413      	add	r3, r2
 801a904:	3308      	adds	r3, #8
 801a906:	681a      	ldr	r2, [r3, #0]
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801a90c:	429a      	cmp	r2, r3
 801a90e:	d102      	bne.n	801a916 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a910:	e007      	b.n	801a922 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801a912:	2301      	movs	r3, #1
 801a914:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	3301      	adds	r3, #1
 801a91a:	60fb      	str	r3, [r7, #12]
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d0d2      	beq.n	801a8c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	2b01      	cmp	r3, #1
 801a926:	d109      	bne.n	801a93c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a928:	68bb      	ldr	r3, [r7, #8]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d102      	bne.n	801a934 <chk_lock+0x80>
 801a92e:	683b      	ldr	r3, [r7, #0]
 801a930:	2b02      	cmp	r3, #2
 801a932:	d101      	bne.n	801a938 <chk_lock+0x84>
 801a934:	2300      	movs	r3, #0
 801a936:	e010      	b.n	801a95a <chk_lock+0xa6>
 801a938:	2312      	movs	r3, #18
 801a93a:	e00e      	b.n	801a95a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a93c:	683b      	ldr	r3, [r7, #0]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d108      	bne.n	801a954 <chk_lock+0xa0>
 801a942:	4a09      	ldr	r2, [pc, #36]	@ (801a968 <chk_lock+0xb4>)
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	011b      	lsls	r3, r3, #4
 801a948:	4413      	add	r3, r2
 801a94a:	330c      	adds	r3, #12
 801a94c:	881b      	ldrh	r3, [r3, #0]
 801a94e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a952:	d101      	bne.n	801a958 <chk_lock+0xa4>
 801a954:	2310      	movs	r3, #16
 801a956:	e000      	b.n	801a95a <chk_lock+0xa6>
 801a958:	2300      	movs	r3, #0
}
 801a95a:	4618      	mov	r0, r3
 801a95c:	3714      	adds	r7, #20
 801a95e:	46bd      	mov	sp, r7
 801a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a964:	4770      	bx	lr
 801a966:	bf00      	nop
 801a968:	24000558 	.word	0x24000558

0801a96c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801a96c:	b480      	push	{r7}
 801a96e:	b083      	sub	sp, #12
 801a970:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a972:	2300      	movs	r3, #0
 801a974:	607b      	str	r3, [r7, #4]
 801a976:	e002      	b.n	801a97e <enq_lock+0x12>
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	3301      	adds	r3, #1
 801a97c:	607b      	str	r3, [r7, #4]
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d106      	bne.n	801a992 <enq_lock+0x26>
 801a984:	4a09      	ldr	r2, [pc, #36]	@ (801a9ac <enq_lock+0x40>)
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	011b      	lsls	r3, r3, #4
 801a98a:	4413      	add	r3, r2
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d1f2      	bne.n	801a978 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	2b01      	cmp	r3, #1
 801a996:	bf14      	ite	ne
 801a998:	2301      	movne	r3, #1
 801a99a:	2300      	moveq	r3, #0
 801a99c:	b2db      	uxtb	r3, r3
}
 801a99e:	4618      	mov	r0, r3
 801a9a0:	370c      	adds	r7, #12
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a8:	4770      	bx	lr
 801a9aa:	bf00      	nop
 801a9ac:	24000558 	.word	0x24000558

0801a9b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a9b0:	b480      	push	{r7}
 801a9b2:	b085      	sub	sp, #20
 801a9b4:	af00      	add	r7, sp, #0
 801a9b6:	6078      	str	r0, [r7, #4]
 801a9b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	60fb      	str	r3, [r7, #12]
 801a9be:	e01f      	b.n	801aa00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801a9c0:	4a41      	ldr	r2, [pc, #260]	@ (801aac8 <inc_lock+0x118>)
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	011b      	lsls	r3, r3, #4
 801a9c6:	4413      	add	r3, r2
 801a9c8:	681a      	ldr	r2, [r3, #0]
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	429a      	cmp	r2, r3
 801a9d0:	d113      	bne.n	801a9fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801a9d2:	4a3d      	ldr	r2, [pc, #244]	@ (801aac8 <inc_lock+0x118>)
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	011b      	lsls	r3, r3, #4
 801a9d8:	4413      	add	r3, r2
 801a9da:	3304      	adds	r3, #4
 801a9dc:	681a      	ldr	r2, [r3, #0]
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d109      	bne.n	801a9fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801a9e6:	4a38      	ldr	r2, [pc, #224]	@ (801aac8 <inc_lock+0x118>)
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	011b      	lsls	r3, r3, #4
 801a9ec:	4413      	add	r3, r2
 801a9ee:	3308      	adds	r3, #8
 801a9f0:	681a      	ldr	r2, [r3, #0]
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801a9f6:	429a      	cmp	r2, r3
 801a9f8:	d006      	beq.n	801aa08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	3301      	adds	r3, #1
 801a9fe:	60fb      	str	r3, [r7, #12]
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d0dc      	beq.n	801a9c0 <inc_lock+0x10>
 801aa06:	e000      	b.n	801aa0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801aa08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	2b01      	cmp	r3, #1
 801aa0e:	d132      	bne.n	801aa76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aa10:	2300      	movs	r3, #0
 801aa12:	60fb      	str	r3, [r7, #12]
 801aa14:	e002      	b.n	801aa1c <inc_lock+0x6c>
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	3301      	adds	r3, #1
 801aa1a:	60fb      	str	r3, [r7, #12]
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d106      	bne.n	801aa30 <inc_lock+0x80>
 801aa22:	4a29      	ldr	r2, [pc, #164]	@ (801aac8 <inc_lock+0x118>)
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	011b      	lsls	r3, r3, #4
 801aa28:	4413      	add	r3, r2
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d1f2      	bne.n	801aa16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	2b01      	cmp	r3, #1
 801aa34:	d101      	bne.n	801aa3a <inc_lock+0x8a>
 801aa36:	2300      	movs	r3, #0
 801aa38:	e040      	b.n	801aabc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681a      	ldr	r2, [r3, #0]
 801aa3e:	4922      	ldr	r1, [pc, #136]	@ (801aac8 <inc_lock+0x118>)
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	011b      	lsls	r3, r3, #4
 801aa44:	440b      	add	r3, r1
 801aa46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	689a      	ldr	r2, [r3, #8]
 801aa4c:	491e      	ldr	r1, [pc, #120]	@ (801aac8 <inc_lock+0x118>)
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	011b      	lsls	r3, r3, #4
 801aa52:	440b      	add	r3, r1
 801aa54:	3304      	adds	r3, #4
 801aa56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	695a      	ldr	r2, [r3, #20]
 801aa5c:	491a      	ldr	r1, [pc, #104]	@ (801aac8 <inc_lock+0x118>)
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	011b      	lsls	r3, r3, #4
 801aa62:	440b      	add	r3, r1
 801aa64:	3308      	adds	r3, #8
 801aa66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801aa68:	4a17      	ldr	r2, [pc, #92]	@ (801aac8 <inc_lock+0x118>)
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	011b      	lsls	r3, r3, #4
 801aa6e:	4413      	add	r3, r2
 801aa70:	330c      	adds	r3, #12
 801aa72:	2200      	movs	r2, #0
 801aa74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801aa76:	683b      	ldr	r3, [r7, #0]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d009      	beq.n	801aa90 <inc_lock+0xe0>
 801aa7c:	4a12      	ldr	r2, [pc, #72]	@ (801aac8 <inc_lock+0x118>)
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	011b      	lsls	r3, r3, #4
 801aa82:	4413      	add	r3, r2
 801aa84:	330c      	adds	r3, #12
 801aa86:	881b      	ldrh	r3, [r3, #0]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d001      	beq.n	801aa90 <inc_lock+0xe0>
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	e015      	b.n	801aabc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d108      	bne.n	801aaa8 <inc_lock+0xf8>
 801aa96:	4a0c      	ldr	r2, [pc, #48]	@ (801aac8 <inc_lock+0x118>)
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	011b      	lsls	r3, r3, #4
 801aa9c:	4413      	add	r3, r2
 801aa9e:	330c      	adds	r3, #12
 801aaa0:	881b      	ldrh	r3, [r3, #0]
 801aaa2:	3301      	adds	r3, #1
 801aaa4:	b29a      	uxth	r2, r3
 801aaa6:	e001      	b.n	801aaac <inc_lock+0xfc>
 801aaa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801aaac:	4906      	ldr	r1, [pc, #24]	@ (801aac8 <inc_lock+0x118>)
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	011b      	lsls	r3, r3, #4
 801aab2:	440b      	add	r3, r1
 801aab4:	330c      	adds	r3, #12
 801aab6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	3301      	adds	r3, #1
}
 801aabc:	4618      	mov	r0, r3
 801aabe:	3714      	adds	r7, #20
 801aac0:	46bd      	mov	sp, r7
 801aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac6:	4770      	bx	lr
 801aac8:	24000558 	.word	0x24000558

0801aacc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801aacc:	b480      	push	{r7}
 801aace:	b085      	sub	sp, #20
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	3b01      	subs	r3, #1
 801aad8:	607b      	str	r3, [r7, #4]
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d125      	bne.n	801ab2c <dec_lock+0x60>
		n = Files[i].ctr;
 801aae0:	4a17      	ldr	r2, [pc, #92]	@ (801ab40 <dec_lock+0x74>)
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	011b      	lsls	r3, r3, #4
 801aae6:	4413      	add	r3, r2
 801aae8:	330c      	adds	r3, #12
 801aaea:	881b      	ldrh	r3, [r3, #0]
 801aaec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801aaee:	89fb      	ldrh	r3, [r7, #14]
 801aaf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801aaf4:	d101      	bne.n	801aafa <dec_lock+0x2e>
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801aafa:	89fb      	ldrh	r3, [r7, #14]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d002      	beq.n	801ab06 <dec_lock+0x3a>
 801ab00:	89fb      	ldrh	r3, [r7, #14]
 801ab02:	3b01      	subs	r3, #1
 801ab04:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801ab06:	4a0e      	ldr	r2, [pc, #56]	@ (801ab40 <dec_lock+0x74>)
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	011b      	lsls	r3, r3, #4
 801ab0c:	4413      	add	r3, r2
 801ab0e:	330c      	adds	r3, #12
 801ab10:	89fa      	ldrh	r2, [r7, #14]
 801ab12:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ab14:	89fb      	ldrh	r3, [r7, #14]
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d105      	bne.n	801ab26 <dec_lock+0x5a>
 801ab1a:	4a09      	ldr	r2, [pc, #36]	@ (801ab40 <dec_lock+0x74>)
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	011b      	lsls	r3, r3, #4
 801ab20:	4413      	add	r3, r2
 801ab22:	2200      	movs	r2, #0
 801ab24:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801ab26:	2300      	movs	r3, #0
 801ab28:	737b      	strb	r3, [r7, #13]
 801ab2a:	e001      	b.n	801ab30 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801ab2c:	2302      	movs	r3, #2
 801ab2e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801ab30:	7b7b      	ldrb	r3, [r7, #13]
}
 801ab32:	4618      	mov	r0, r3
 801ab34:	3714      	adds	r7, #20
 801ab36:	46bd      	mov	sp, r7
 801ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3c:	4770      	bx	lr
 801ab3e:	bf00      	nop
 801ab40:	24000558 	.word	0x24000558

0801ab44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801ab44:	b480      	push	{r7}
 801ab46:	b085      	sub	sp, #20
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	60fb      	str	r3, [r7, #12]
 801ab50:	e010      	b.n	801ab74 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801ab52:	4a0d      	ldr	r2, [pc, #52]	@ (801ab88 <clear_lock+0x44>)
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	011b      	lsls	r3, r3, #4
 801ab58:	4413      	add	r3, r2
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	687a      	ldr	r2, [r7, #4]
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d105      	bne.n	801ab6e <clear_lock+0x2a>
 801ab62:	4a09      	ldr	r2, [pc, #36]	@ (801ab88 <clear_lock+0x44>)
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	011b      	lsls	r3, r3, #4
 801ab68:	4413      	add	r3, r2
 801ab6a:	2200      	movs	r2, #0
 801ab6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	3301      	adds	r3, #1
 801ab72:	60fb      	str	r3, [r7, #12]
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d0eb      	beq.n	801ab52 <clear_lock+0xe>
	}
}
 801ab7a:	bf00      	nop
 801ab7c:	bf00      	nop
 801ab7e:	3714      	adds	r7, #20
 801ab80:	46bd      	mov	sp, r7
 801ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab86:	4770      	bx	lr
 801ab88:	24000558 	.word	0x24000558

0801ab8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b086      	sub	sp, #24
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801ab94:	2300      	movs	r3, #0
 801ab96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	78db      	ldrb	r3, [r3, #3]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d034      	beq.n	801ac0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aba4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	7858      	ldrb	r0, [r3, #1]
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801abb0:	2301      	movs	r3, #1
 801abb2:	697a      	ldr	r2, [r7, #20]
 801abb4:	f7ff fd40 	bl	801a638 <disk_write>
 801abb8:	4603      	mov	r3, r0
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d002      	beq.n	801abc4 <sync_window+0x38>
			res = FR_DISK_ERR;
 801abbe:	2301      	movs	r3, #1
 801abc0:	73fb      	strb	r3, [r7, #15]
 801abc2:	e022      	b.n	801ac0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	2200      	movs	r2, #0
 801abc8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801abce:	697a      	ldr	r2, [r7, #20]
 801abd0:	1ad2      	subs	r2, r2, r3
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	6a1b      	ldr	r3, [r3, #32]
 801abd6:	429a      	cmp	r2, r3
 801abd8:	d217      	bcs.n	801ac0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	789b      	ldrb	r3, [r3, #2]
 801abde:	613b      	str	r3, [r7, #16]
 801abe0:	e010      	b.n	801ac04 <sync_window+0x78>
					wsect += fs->fsize;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	6a1b      	ldr	r3, [r3, #32]
 801abe6:	697a      	ldr	r2, [r7, #20]
 801abe8:	4413      	add	r3, r2
 801abea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	7858      	ldrb	r0, [r3, #1]
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801abf6:	2301      	movs	r3, #1
 801abf8:	697a      	ldr	r2, [r7, #20]
 801abfa:	f7ff fd1d 	bl	801a638 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801abfe:	693b      	ldr	r3, [r7, #16]
 801ac00:	3b01      	subs	r3, #1
 801ac02:	613b      	str	r3, [r7, #16]
 801ac04:	693b      	ldr	r3, [r7, #16]
 801ac06:	2b01      	cmp	r3, #1
 801ac08:	d8eb      	bhi.n	801abe2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801ac0a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	3718      	adds	r7, #24
 801ac10:	46bd      	mov	sp, r7
 801ac12:	bd80      	pop	{r7, pc}

0801ac14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b084      	sub	sp, #16
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
 801ac1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801ac1e:	2300      	movs	r3, #0
 801ac20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ac26:	683a      	ldr	r2, [r7, #0]
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	d01b      	beq.n	801ac64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801ac2c:	6878      	ldr	r0, [r7, #4]
 801ac2e:	f7ff ffad 	bl	801ab8c <sync_window>
 801ac32:	4603      	mov	r3, r0
 801ac34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801ac36:	7bfb      	ldrb	r3, [r7, #15]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d113      	bne.n	801ac64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	7858      	ldrb	r0, [r3, #1]
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ac46:	2301      	movs	r3, #1
 801ac48:	683a      	ldr	r2, [r7, #0]
 801ac4a:	f7ff fcd5 	bl	801a5f8 <disk_read>
 801ac4e:	4603      	mov	r3, r0
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d004      	beq.n	801ac5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801ac54:	f04f 33ff 	mov.w	r3, #4294967295
 801ac58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801ac5a:	2301      	movs	r3, #1
 801ac5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	683a      	ldr	r2, [r7, #0]
 801ac62:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801ac64:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac66:	4618      	mov	r0, r3
 801ac68:	3710      	adds	r7, #16
 801ac6a:	46bd      	mov	sp, r7
 801ac6c:	bd80      	pop	{r7, pc}
	...

0801ac70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b084      	sub	sp, #16
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f7ff ff87 	bl	801ab8c <sync_window>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ac82:	7bfb      	ldrb	r3, [r7, #15]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d159      	bne.n	801ad3c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	781b      	ldrb	r3, [r3, #0]
 801ac8c:	2b03      	cmp	r3, #3
 801ac8e:	d149      	bne.n	801ad24 <sync_fs+0xb4>
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	791b      	ldrb	r3, [r3, #4]
 801ac94:	2b01      	cmp	r3, #1
 801ac96:	d145      	bne.n	801ad24 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	899b      	ldrh	r3, [r3, #12]
 801aca2:	461a      	mov	r2, r3
 801aca4:	2100      	movs	r1, #0
 801aca6:	f7ff fda8 	bl	801a7fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	3338      	adds	r3, #56	@ 0x38
 801acae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801acb2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801acb6:	4618      	mov	r0, r3
 801acb8:	f7ff fd37 	bl	801a72a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	3338      	adds	r3, #56	@ 0x38
 801acc0:	4921      	ldr	r1, [pc, #132]	@ (801ad48 <sync_fs+0xd8>)
 801acc2:	4618      	mov	r0, r3
 801acc4:	f7ff fd4c 	bl	801a760 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	3338      	adds	r3, #56	@ 0x38
 801accc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801acd0:	491e      	ldr	r1, [pc, #120]	@ (801ad4c <sync_fs+0xdc>)
 801acd2:	4618      	mov	r0, r3
 801acd4:	f7ff fd44 	bl	801a760 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	3338      	adds	r3, #56	@ 0x38
 801acdc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	699b      	ldr	r3, [r3, #24]
 801ace4:	4619      	mov	r1, r3
 801ace6:	4610      	mov	r0, r2
 801ace8:	f7ff fd3a 	bl	801a760 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	3338      	adds	r3, #56	@ 0x38
 801acf0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	695b      	ldr	r3, [r3, #20]
 801acf8:	4619      	mov	r1, r3
 801acfa:	4610      	mov	r0, r2
 801acfc:	f7ff fd30 	bl	801a760 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad04:	1c5a      	adds	r2, r3, #1
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	7858      	ldrb	r0, [r3, #1]
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ad18:	2301      	movs	r3, #1
 801ad1a:	f7ff fc8d 	bl	801a638 <disk_write>
			fs->fsi_flag = 0;
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2200      	movs	r2, #0
 801ad22:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	785b      	ldrb	r3, [r3, #1]
 801ad28:	2200      	movs	r2, #0
 801ad2a:	2100      	movs	r1, #0
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	f7ff fca3 	bl	801a678 <disk_ioctl>
 801ad32:	4603      	mov	r3, r0
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d001      	beq.n	801ad3c <sync_fs+0xcc>
 801ad38:	2301      	movs	r3, #1
 801ad3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801ad3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad3e:	4618      	mov	r0, r3
 801ad40:	3710      	adds	r7, #16
 801ad42:	46bd      	mov	sp, r7
 801ad44:	bd80      	pop	{r7, pc}
 801ad46:	bf00      	nop
 801ad48:	41615252 	.word	0x41615252
 801ad4c:	61417272 	.word	0x61417272

0801ad50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801ad50:	b480      	push	{r7}
 801ad52:	b083      	sub	sp, #12
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
 801ad58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	3b02      	subs	r3, #2
 801ad5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	69db      	ldr	r3, [r3, #28]
 801ad64:	3b02      	subs	r3, #2
 801ad66:	683a      	ldr	r2, [r7, #0]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d301      	bcc.n	801ad70 <clust2sect+0x20>
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	e008      	b.n	801ad82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	895b      	ldrh	r3, [r3, #10]
 801ad74:	461a      	mov	r2, r3
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	fb03 f202 	mul.w	r2, r3, r2
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ad80:	4413      	add	r3, r2
}
 801ad82:	4618      	mov	r0, r3
 801ad84:	370c      	adds	r7, #12
 801ad86:	46bd      	mov	sp, r7
 801ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8c:	4770      	bx	lr

0801ad8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801ad8e:	b580      	push	{r7, lr}
 801ad90:	b086      	sub	sp, #24
 801ad92:	af00      	add	r7, sp, #0
 801ad94:	6078      	str	r0, [r7, #4]
 801ad96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801ad9e:	683b      	ldr	r3, [r7, #0]
 801ada0:	2b01      	cmp	r3, #1
 801ada2:	d904      	bls.n	801adae <get_fat+0x20>
 801ada4:	693b      	ldr	r3, [r7, #16]
 801ada6:	69db      	ldr	r3, [r3, #28]
 801ada8:	683a      	ldr	r2, [r7, #0]
 801adaa:	429a      	cmp	r2, r3
 801adac:	d302      	bcc.n	801adb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 801adae:	2301      	movs	r3, #1
 801adb0:	617b      	str	r3, [r7, #20]
 801adb2:	e0ba      	b.n	801af2a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801adb4:	f04f 33ff 	mov.w	r3, #4294967295
 801adb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801adba:	693b      	ldr	r3, [r7, #16]
 801adbc:	781b      	ldrb	r3, [r3, #0]
 801adbe:	2b03      	cmp	r3, #3
 801adc0:	f000 8082 	beq.w	801aec8 <get_fat+0x13a>
 801adc4:	2b03      	cmp	r3, #3
 801adc6:	f300 80a6 	bgt.w	801af16 <get_fat+0x188>
 801adca:	2b01      	cmp	r3, #1
 801adcc:	d002      	beq.n	801add4 <get_fat+0x46>
 801adce:	2b02      	cmp	r3, #2
 801add0:	d055      	beq.n	801ae7e <get_fat+0xf0>
 801add2:	e0a0      	b.n	801af16 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801add4:	683b      	ldr	r3, [r7, #0]
 801add6:	60fb      	str	r3, [r7, #12]
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	085b      	lsrs	r3, r3, #1
 801addc:	68fa      	ldr	r2, [r7, #12]
 801adde:	4413      	add	r3, r2
 801ade0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ade2:	693b      	ldr	r3, [r7, #16]
 801ade4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ade6:	693b      	ldr	r3, [r7, #16]
 801ade8:	899b      	ldrh	r3, [r3, #12]
 801adea:	4619      	mov	r1, r3
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	fbb3 f3f1 	udiv	r3, r3, r1
 801adf2:	4413      	add	r3, r2
 801adf4:	4619      	mov	r1, r3
 801adf6:	6938      	ldr	r0, [r7, #16]
 801adf8:	f7ff ff0c 	bl	801ac14 <move_window>
 801adfc:	4603      	mov	r3, r0
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	f040 808c 	bne.w	801af1c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	1c5a      	adds	r2, r3, #1
 801ae08:	60fa      	str	r2, [r7, #12]
 801ae0a:	693a      	ldr	r2, [r7, #16]
 801ae0c:	8992      	ldrh	r2, [r2, #12]
 801ae0e:	fbb3 f1f2 	udiv	r1, r3, r2
 801ae12:	fb01 f202 	mul.w	r2, r1, r2
 801ae16:	1a9b      	subs	r3, r3, r2
 801ae18:	693a      	ldr	r2, [r7, #16]
 801ae1a:	4413      	add	r3, r2
 801ae1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ae20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ae22:	693b      	ldr	r3, [r7, #16]
 801ae24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ae26:	693b      	ldr	r3, [r7, #16]
 801ae28:	899b      	ldrh	r3, [r3, #12]
 801ae2a:	4619      	mov	r1, r3
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ae32:	4413      	add	r3, r2
 801ae34:	4619      	mov	r1, r3
 801ae36:	6938      	ldr	r0, [r7, #16]
 801ae38:	f7ff feec 	bl	801ac14 <move_window>
 801ae3c:	4603      	mov	r3, r0
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d16e      	bne.n	801af20 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801ae42:	693b      	ldr	r3, [r7, #16]
 801ae44:	899b      	ldrh	r3, [r3, #12]
 801ae46:	461a      	mov	r2, r3
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	fbb3 f1f2 	udiv	r1, r3, r2
 801ae4e:	fb01 f202 	mul.w	r2, r1, r2
 801ae52:	1a9b      	subs	r3, r3, r2
 801ae54:	693a      	ldr	r2, [r7, #16]
 801ae56:	4413      	add	r3, r2
 801ae58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ae5c:	021b      	lsls	r3, r3, #8
 801ae5e:	68ba      	ldr	r2, [r7, #8]
 801ae60:	4313      	orrs	r3, r2
 801ae62:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801ae64:	683b      	ldr	r3, [r7, #0]
 801ae66:	f003 0301 	and.w	r3, r3, #1
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d002      	beq.n	801ae74 <get_fat+0xe6>
 801ae6e:	68bb      	ldr	r3, [r7, #8]
 801ae70:	091b      	lsrs	r3, r3, #4
 801ae72:	e002      	b.n	801ae7a <get_fat+0xec>
 801ae74:	68bb      	ldr	r3, [r7, #8]
 801ae76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ae7a:	617b      	str	r3, [r7, #20]
			break;
 801ae7c:	e055      	b.n	801af2a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801ae7e:	693b      	ldr	r3, [r7, #16]
 801ae80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ae82:	693b      	ldr	r3, [r7, #16]
 801ae84:	899b      	ldrh	r3, [r3, #12]
 801ae86:	085b      	lsrs	r3, r3, #1
 801ae88:	b29b      	uxth	r3, r3
 801ae8a:	4619      	mov	r1, r3
 801ae8c:	683b      	ldr	r3, [r7, #0]
 801ae8e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ae92:	4413      	add	r3, r2
 801ae94:	4619      	mov	r1, r3
 801ae96:	6938      	ldr	r0, [r7, #16]
 801ae98:	f7ff febc 	bl	801ac14 <move_window>
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d140      	bne.n	801af24 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801aea2:	693b      	ldr	r3, [r7, #16]
 801aea4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	005b      	lsls	r3, r3, #1
 801aeac:	693a      	ldr	r2, [r7, #16]
 801aeae:	8992      	ldrh	r2, [r2, #12]
 801aeb0:	fbb3 f0f2 	udiv	r0, r3, r2
 801aeb4:	fb00 f202 	mul.w	r2, r0, r2
 801aeb8:	1a9b      	subs	r3, r3, r2
 801aeba:	440b      	add	r3, r1
 801aebc:	4618      	mov	r0, r3
 801aebe:	f7ff fbf9 	bl	801a6b4 <ld_word>
 801aec2:	4603      	mov	r3, r0
 801aec4:	617b      	str	r3, [r7, #20]
			break;
 801aec6:	e030      	b.n	801af2a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801aec8:	693b      	ldr	r3, [r7, #16]
 801aeca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801aecc:	693b      	ldr	r3, [r7, #16]
 801aece:	899b      	ldrh	r3, [r3, #12]
 801aed0:	089b      	lsrs	r3, r3, #2
 801aed2:	b29b      	uxth	r3, r3
 801aed4:	4619      	mov	r1, r3
 801aed6:	683b      	ldr	r3, [r7, #0]
 801aed8:	fbb3 f3f1 	udiv	r3, r3, r1
 801aedc:	4413      	add	r3, r2
 801aede:	4619      	mov	r1, r3
 801aee0:	6938      	ldr	r0, [r7, #16]
 801aee2:	f7ff fe97 	bl	801ac14 <move_window>
 801aee6:	4603      	mov	r3, r0
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d11d      	bne.n	801af28 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801aeec:	693b      	ldr	r3, [r7, #16]
 801aeee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801aef2:	683b      	ldr	r3, [r7, #0]
 801aef4:	009b      	lsls	r3, r3, #2
 801aef6:	693a      	ldr	r2, [r7, #16]
 801aef8:	8992      	ldrh	r2, [r2, #12]
 801aefa:	fbb3 f0f2 	udiv	r0, r3, r2
 801aefe:	fb00 f202 	mul.w	r2, r0, r2
 801af02:	1a9b      	subs	r3, r3, r2
 801af04:	440b      	add	r3, r1
 801af06:	4618      	mov	r0, r3
 801af08:	f7ff fbec 	bl	801a6e4 <ld_dword>
 801af0c:	4603      	mov	r3, r0
 801af0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801af12:	617b      	str	r3, [r7, #20]
			break;
 801af14:	e009      	b.n	801af2a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801af16:	2301      	movs	r3, #1
 801af18:	617b      	str	r3, [r7, #20]
 801af1a:	e006      	b.n	801af2a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801af1c:	bf00      	nop
 801af1e:	e004      	b.n	801af2a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801af20:	bf00      	nop
 801af22:	e002      	b.n	801af2a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801af24:	bf00      	nop
 801af26:	e000      	b.n	801af2a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801af28:	bf00      	nop
		}
	}

	return val;
 801af2a:	697b      	ldr	r3, [r7, #20]
}
 801af2c:	4618      	mov	r0, r3
 801af2e:	3718      	adds	r7, #24
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}

0801af34 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801af34:	b590      	push	{r4, r7, lr}
 801af36:	b089      	sub	sp, #36	@ 0x24
 801af38:	af00      	add	r7, sp, #0
 801af3a:	60f8      	str	r0, [r7, #12]
 801af3c:	60b9      	str	r1, [r7, #8]
 801af3e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801af40:	2302      	movs	r3, #2
 801af42:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801af44:	68bb      	ldr	r3, [r7, #8]
 801af46:	2b01      	cmp	r3, #1
 801af48:	f240 8109 	bls.w	801b15e <put_fat+0x22a>
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	69db      	ldr	r3, [r3, #28]
 801af50:	68ba      	ldr	r2, [r7, #8]
 801af52:	429a      	cmp	r2, r3
 801af54:	f080 8103 	bcs.w	801b15e <put_fat+0x22a>
		switch (fs->fs_type) {
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	781b      	ldrb	r3, [r3, #0]
 801af5c:	2b03      	cmp	r3, #3
 801af5e:	f000 80b6 	beq.w	801b0ce <put_fat+0x19a>
 801af62:	2b03      	cmp	r3, #3
 801af64:	f300 80fb 	bgt.w	801b15e <put_fat+0x22a>
 801af68:	2b01      	cmp	r3, #1
 801af6a:	d003      	beq.n	801af74 <put_fat+0x40>
 801af6c:	2b02      	cmp	r3, #2
 801af6e:	f000 8083 	beq.w	801b078 <put_fat+0x144>
 801af72:	e0f4      	b.n	801b15e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801af74:	68bb      	ldr	r3, [r7, #8]
 801af76:	61bb      	str	r3, [r7, #24]
 801af78:	69bb      	ldr	r3, [r7, #24]
 801af7a:	085b      	lsrs	r3, r3, #1
 801af7c:	69ba      	ldr	r2, [r7, #24]
 801af7e:	4413      	add	r3, r2
 801af80:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	899b      	ldrh	r3, [r3, #12]
 801af8a:	4619      	mov	r1, r3
 801af8c:	69bb      	ldr	r3, [r7, #24]
 801af8e:	fbb3 f3f1 	udiv	r3, r3, r1
 801af92:	4413      	add	r3, r2
 801af94:	4619      	mov	r1, r3
 801af96:	68f8      	ldr	r0, [r7, #12]
 801af98:	f7ff fe3c 	bl	801ac14 <move_window>
 801af9c:	4603      	mov	r3, r0
 801af9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801afa0:	7ffb      	ldrb	r3, [r7, #31]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	f040 80d4 	bne.w	801b150 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801afae:	69bb      	ldr	r3, [r7, #24]
 801afb0:	1c5a      	adds	r2, r3, #1
 801afb2:	61ba      	str	r2, [r7, #24]
 801afb4:	68fa      	ldr	r2, [r7, #12]
 801afb6:	8992      	ldrh	r2, [r2, #12]
 801afb8:	fbb3 f0f2 	udiv	r0, r3, r2
 801afbc:	fb00 f202 	mul.w	r2, r0, r2
 801afc0:	1a9b      	subs	r3, r3, r2
 801afc2:	440b      	add	r3, r1
 801afc4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801afc6:	68bb      	ldr	r3, [r7, #8]
 801afc8:	f003 0301 	and.w	r3, r3, #1
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d00d      	beq.n	801afec <put_fat+0xb8>
 801afd0:	697b      	ldr	r3, [r7, #20]
 801afd2:	781b      	ldrb	r3, [r3, #0]
 801afd4:	b25b      	sxtb	r3, r3
 801afd6:	f003 030f 	and.w	r3, r3, #15
 801afda:	b25a      	sxtb	r2, r3
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	011b      	lsls	r3, r3, #4
 801afe2:	b25b      	sxtb	r3, r3
 801afe4:	4313      	orrs	r3, r2
 801afe6:	b25b      	sxtb	r3, r3
 801afe8:	b2db      	uxtb	r3, r3
 801afea:	e001      	b.n	801aff0 <put_fat+0xbc>
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	b2db      	uxtb	r3, r3
 801aff0:	697a      	ldr	r2, [r7, #20]
 801aff2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	2201      	movs	r2, #1
 801aff8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	899b      	ldrh	r3, [r3, #12]
 801b002:	4619      	mov	r1, r3
 801b004:	69bb      	ldr	r3, [r7, #24]
 801b006:	fbb3 f3f1 	udiv	r3, r3, r1
 801b00a:	4413      	add	r3, r2
 801b00c:	4619      	mov	r1, r3
 801b00e:	68f8      	ldr	r0, [r7, #12]
 801b010:	f7ff fe00 	bl	801ac14 <move_window>
 801b014:	4603      	mov	r3, r0
 801b016:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b018:	7ffb      	ldrb	r3, [r7, #31]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	f040 809a 	bne.w	801b154 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	899b      	ldrh	r3, [r3, #12]
 801b02a:	461a      	mov	r2, r3
 801b02c:	69bb      	ldr	r3, [r7, #24]
 801b02e:	fbb3 f0f2 	udiv	r0, r3, r2
 801b032:	fb00 f202 	mul.w	r2, r0, r2
 801b036:	1a9b      	subs	r3, r3, r2
 801b038:	440b      	add	r3, r1
 801b03a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b03c:	68bb      	ldr	r3, [r7, #8]
 801b03e:	f003 0301 	and.w	r3, r3, #1
 801b042:	2b00      	cmp	r3, #0
 801b044:	d003      	beq.n	801b04e <put_fat+0x11a>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	091b      	lsrs	r3, r3, #4
 801b04a:	b2db      	uxtb	r3, r3
 801b04c:	e00e      	b.n	801b06c <put_fat+0x138>
 801b04e:	697b      	ldr	r3, [r7, #20]
 801b050:	781b      	ldrb	r3, [r3, #0]
 801b052:	b25b      	sxtb	r3, r3
 801b054:	f023 030f 	bic.w	r3, r3, #15
 801b058:	b25a      	sxtb	r2, r3
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	0a1b      	lsrs	r3, r3, #8
 801b05e:	b25b      	sxtb	r3, r3
 801b060:	f003 030f 	and.w	r3, r3, #15
 801b064:	b25b      	sxtb	r3, r3
 801b066:	4313      	orrs	r3, r2
 801b068:	b25b      	sxtb	r3, r3
 801b06a:	b2db      	uxtb	r3, r3
 801b06c:	697a      	ldr	r2, [r7, #20]
 801b06e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	2201      	movs	r2, #1
 801b074:	70da      	strb	r2, [r3, #3]
			break;
 801b076:	e072      	b.n	801b15e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	899b      	ldrh	r3, [r3, #12]
 801b080:	085b      	lsrs	r3, r3, #1
 801b082:	b29b      	uxth	r3, r3
 801b084:	4619      	mov	r1, r3
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	fbb3 f3f1 	udiv	r3, r3, r1
 801b08c:	4413      	add	r3, r2
 801b08e:	4619      	mov	r1, r3
 801b090:	68f8      	ldr	r0, [r7, #12]
 801b092:	f7ff fdbf 	bl	801ac14 <move_window>
 801b096:	4603      	mov	r3, r0
 801b098:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b09a:	7ffb      	ldrb	r3, [r7, #31]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d15b      	bne.n	801b158 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b0a6:	68bb      	ldr	r3, [r7, #8]
 801b0a8:	005b      	lsls	r3, r3, #1
 801b0aa:	68fa      	ldr	r2, [r7, #12]
 801b0ac:	8992      	ldrh	r2, [r2, #12]
 801b0ae:	fbb3 f0f2 	udiv	r0, r3, r2
 801b0b2:	fb00 f202 	mul.w	r2, r0, r2
 801b0b6:	1a9b      	subs	r3, r3, r2
 801b0b8:	440b      	add	r3, r1
 801b0ba:	687a      	ldr	r2, [r7, #4]
 801b0bc:	b292      	uxth	r2, r2
 801b0be:	4611      	mov	r1, r2
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	f7ff fb32 	bl	801a72a <st_word>
			fs->wflag = 1;
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	2201      	movs	r2, #1
 801b0ca:	70da      	strb	r2, [r3, #3]
			break;
 801b0cc:	e047      	b.n	801b15e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	899b      	ldrh	r3, [r3, #12]
 801b0d6:	089b      	lsrs	r3, r3, #2
 801b0d8:	b29b      	uxth	r3, r3
 801b0da:	4619      	mov	r1, r3
 801b0dc:	68bb      	ldr	r3, [r7, #8]
 801b0de:	fbb3 f3f1 	udiv	r3, r3, r1
 801b0e2:	4413      	add	r3, r2
 801b0e4:	4619      	mov	r1, r3
 801b0e6:	68f8      	ldr	r0, [r7, #12]
 801b0e8:	f7ff fd94 	bl	801ac14 <move_window>
 801b0ec:	4603      	mov	r3, r0
 801b0ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b0f0:	7ffb      	ldrb	r3, [r7, #31]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d132      	bne.n	801b15c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b102:	68bb      	ldr	r3, [r7, #8]
 801b104:	009b      	lsls	r3, r3, #2
 801b106:	68fa      	ldr	r2, [r7, #12]
 801b108:	8992      	ldrh	r2, [r2, #12]
 801b10a:	fbb3 f0f2 	udiv	r0, r3, r2
 801b10e:	fb00 f202 	mul.w	r2, r0, r2
 801b112:	1a9b      	subs	r3, r3, r2
 801b114:	440b      	add	r3, r1
 801b116:	4618      	mov	r0, r3
 801b118:	f7ff fae4 	bl	801a6e4 <ld_dword>
 801b11c:	4603      	mov	r3, r0
 801b11e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b122:	4323      	orrs	r3, r4
 801b124:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b12c:	68bb      	ldr	r3, [r7, #8]
 801b12e:	009b      	lsls	r3, r3, #2
 801b130:	68fa      	ldr	r2, [r7, #12]
 801b132:	8992      	ldrh	r2, [r2, #12]
 801b134:	fbb3 f0f2 	udiv	r0, r3, r2
 801b138:	fb00 f202 	mul.w	r2, r0, r2
 801b13c:	1a9b      	subs	r3, r3, r2
 801b13e:	440b      	add	r3, r1
 801b140:	6879      	ldr	r1, [r7, #4]
 801b142:	4618      	mov	r0, r3
 801b144:	f7ff fb0c 	bl	801a760 <st_dword>
			fs->wflag = 1;
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	2201      	movs	r2, #1
 801b14c:	70da      	strb	r2, [r3, #3]
			break;
 801b14e:	e006      	b.n	801b15e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b150:	bf00      	nop
 801b152:	e004      	b.n	801b15e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b154:	bf00      	nop
 801b156:	e002      	b.n	801b15e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b158:	bf00      	nop
 801b15a:	e000      	b.n	801b15e <put_fat+0x22a>
			if (res != FR_OK) break;
 801b15c:	bf00      	nop
		}
	}
	return res;
 801b15e:	7ffb      	ldrb	r3, [r7, #31]
}
 801b160:	4618      	mov	r0, r3
 801b162:	3724      	adds	r7, #36	@ 0x24
 801b164:	46bd      	mov	sp, r7
 801b166:	bd90      	pop	{r4, r7, pc}

0801b168 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b088      	sub	sp, #32
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	60f8      	str	r0, [r7, #12]
 801b170:	60b9      	str	r1, [r7, #8]
 801b172:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b174:	2300      	movs	r3, #0
 801b176:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b17e:	68bb      	ldr	r3, [r7, #8]
 801b180:	2b01      	cmp	r3, #1
 801b182:	d904      	bls.n	801b18e <remove_chain+0x26>
 801b184:	69bb      	ldr	r3, [r7, #24]
 801b186:	69db      	ldr	r3, [r3, #28]
 801b188:	68ba      	ldr	r2, [r7, #8]
 801b18a:	429a      	cmp	r2, r3
 801b18c:	d301      	bcc.n	801b192 <remove_chain+0x2a>
 801b18e:	2302      	movs	r3, #2
 801b190:	e04b      	b.n	801b22a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d00c      	beq.n	801b1b2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b198:	f04f 32ff 	mov.w	r2, #4294967295
 801b19c:	6879      	ldr	r1, [r7, #4]
 801b19e:	69b8      	ldr	r0, [r7, #24]
 801b1a0:	f7ff fec8 	bl	801af34 <put_fat>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b1a8:	7ffb      	ldrb	r3, [r7, #31]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d001      	beq.n	801b1b2 <remove_chain+0x4a>
 801b1ae:	7ffb      	ldrb	r3, [r7, #31]
 801b1b0:	e03b      	b.n	801b22a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b1b2:	68b9      	ldr	r1, [r7, #8]
 801b1b4:	68f8      	ldr	r0, [r7, #12]
 801b1b6:	f7ff fdea 	bl	801ad8e <get_fat>
 801b1ba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b1bc:	697b      	ldr	r3, [r7, #20]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d031      	beq.n	801b226 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b1c2:	697b      	ldr	r3, [r7, #20]
 801b1c4:	2b01      	cmp	r3, #1
 801b1c6:	d101      	bne.n	801b1cc <remove_chain+0x64>
 801b1c8:	2302      	movs	r3, #2
 801b1ca:	e02e      	b.n	801b22a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b1cc:	697b      	ldr	r3, [r7, #20]
 801b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b1d2:	d101      	bne.n	801b1d8 <remove_chain+0x70>
 801b1d4:	2301      	movs	r3, #1
 801b1d6:	e028      	b.n	801b22a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b1d8:	2200      	movs	r2, #0
 801b1da:	68b9      	ldr	r1, [r7, #8]
 801b1dc:	69b8      	ldr	r0, [r7, #24]
 801b1de:	f7ff fea9 	bl	801af34 <put_fat>
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b1e6:	7ffb      	ldrb	r3, [r7, #31]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d001      	beq.n	801b1f0 <remove_chain+0x88>
 801b1ec:	7ffb      	ldrb	r3, [r7, #31]
 801b1ee:	e01c      	b.n	801b22a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b1f0:	69bb      	ldr	r3, [r7, #24]
 801b1f2:	699a      	ldr	r2, [r3, #24]
 801b1f4:	69bb      	ldr	r3, [r7, #24]
 801b1f6:	69db      	ldr	r3, [r3, #28]
 801b1f8:	3b02      	subs	r3, #2
 801b1fa:	429a      	cmp	r2, r3
 801b1fc:	d20b      	bcs.n	801b216 <remove_chain+0xae>
			fs->free_clst++;
 801b1fe:	69bb      	ldr	r3, [r7, #24]
 801b200:	699b      	ldr	r3, [r3, #24]
 801b202:	1c5a      	adds	r2, r3, #1
 801b204:	69bb      	ldr	r3, [r7, #24]
 801b206:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b208:	69bb      	ldr	r3, [r7, #24]
 801b20a:	791b      	ldrb	r3, [r3, #4]
 801b20c:	f043 0301 	orr.w	r3, r3, #1
 801b210:	b2da      	uxtb	r2, r3
 801b212:	69bb      	ldr	r3, [r7, #24]
 801b214:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b216:	697b      	ldr	r3, [r7, #20]
 801b218:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b21a:	69bb      	ldr	r3, [r7, #24]
 801b21c:	69db      	ldr	r3, [r3, #28]
 801b21e:	68ba      	ldr	r2, [r7, #8]
 801b220:	429a      	cmp	r2, r3
 801b222:	d3c6      	bcc.n	801b1b2 <remove_chain+0x4a>
 801b224:	e000      	b.n	801b228 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b226:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b228:	2300      	movs	r3, #0
}
 801b22a:	4618      	mov	r0, r3
 801b22c:	3720      	adds	r7, #32
 801b22e:	46bd      	mov	sp, r7
 801b230:	bd80      	pop	{r7, pc}

0801b232 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b232:	b580      	push	{r7, lr}
 801b234:	b088      	sub	sp, #32
 801b236:	af00      	add	r7, sp, #0
 801b238:	6078      	str	r0, [r7, #4]
 801b23a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b242:	683b      	ldr	r3, [r7, #0]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d10d      	bne.n	801b264 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b248:	693b      	ldr	r3, [r7, #16]
 801b24a:	695b      	ldr	r3, [r3, #20]
 801b24c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b24e:	69bb      	ldr	r3, [r7, #24]
 801b250:	2b00      	cmp	r3, #0
 801b252:	d004      	beq.n	801b25e <create_chain+0x2c>
 801b254:	693b      	ldr	r3, [r7, #16]
 801b256:	69db      	ldr	r3, [r3, #28]
 801b258:	69ba      	ldr	r2, [r7, #24]
 801b25a:	429a      	cmp	r2, r3
 801b25c:	d31b      	bcc.n	801b296 <create_chain+0x64>
 801b25e:	2301      	movs	r3, #1
 801b260:	61bb      	str	r3, [r7, #24]
 801b262:	e018      	b.n	801b296 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b264:	6839      	ldr	r1, [r7, #0]
 801b266:	6878      	ldr	r0, [r7, #4]
 801b268:	f7ff fd91 	bl	801ad8e <get_fat>
 801b26c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	2b01      	cmp	r3, #1
 801b272:	d801      	bhi.n	801b278 <create_chain+0x46>
 801b274:	2301      	movs	r3, #1
 801b276:	e070      	b.n	801b35a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b27e:	d101      	bne.n	801b284 <create_chain+0x52>
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	e06a      	b.n	801b35a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b284:	693b      	ldr	r3, [r7, #16]
 801b286:	69db      	ldr	r3, [r3, #28]
 801b288:	68fa      	ldr	r2, [r7, #12]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d201      	bcs.n	801b292 <create_chain+0x60>
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	e063      	b.n	801b35a <create_chain+0x128>
		scl = clst;
 801b292:	683b      	ldr	r3, [r7, #0]
 801b294:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b296:	69bb      	ldr	r3, [r7, #24]
 801b298:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b29a:	69fb      	ldr	r3, [r7, #28]
 801b29c:	3301      	adds	r3, #1
 801b29e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b2a0:	693b      	ldr	r3, [r7, #16]
 801b2a2:	69db      	ldr	r3, [r3, #28]
 801b2a4:	69fa      	ldr	r2, [r7, #28]
 801b2a6:	429a      	cmp	r2, r3
 801b2a8:	d307      	bcc.n	801b2ba <create_chain+0x88>
				ncl = 2;
 801b2aa:	2302      	movs	r3, #2
 801b2ac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b2ae:	69fa      	ldr	r2, [r7, #28]
 801b2b0:	69bb      	ldr	r3, [r7, #24]
 801b2b2:	429a      	cmp	r2, r3
 801b2b4:	d901      	bls.n	801b2ba <create_chain+0x88>
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	e04f      	b.n	801b35a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b2ba:	69f9      	ldr	r1, [r7, #28]
 801b2bc:	6878      	ldr	r0, [r7, #4]
 801b2be:	f7ff fd66 	bl	801ad8e <get_fat>
 801b2c2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d00e      	beq.n	801b2e8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	2b01      	cmp	r3, #1
 801b2ce:	d003      	beq.n	801b2d8 <create_chain+0xa6>
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2d6:	d101      	bne.n	801b2dc <create_chain+0xaa>
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	e03e      	b.n	801b35a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b2dc:	69fa      	ldr	r2, [r7, #28]
 801b2de:	69bb      	ldr	r3, [r7, #24]
 801b2e0:	429a      	cmp	r2, r3
 801b2e2:	d1da      	bne.n	801b29a <create_chain+0x68>
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	e038      	b.n	801b35a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b2e8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b2ea:	f04f 32ff 	mov.w	r2, #4294967295
 801b2ee:	69f9      	ldr	r1, [r7, #28]
 801b2f0:	6938      	ldr	r0, [r7, #16]
 801b2f2:	f7ff fe1f 	bl	801af34 <put_fat>
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b2fa:	7dfb      	ldrb	r3, [r7, #23]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d109      	bne.n	801b314 <create_chain+0xe2>
 801b300:	683b      	ldr	r3, [r7, #0]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d006      	beq.n	801b314 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b306:	69fa      	ldr	r2, [r7, #28]
 801b308:	6839      	ldr	r1, [r7, #0]
 801b30a:	6938      	ldr	r0, [r7, #16]
 801b30c:	f7ff fe12 	bl	801af34 <put_fat>
 801b310:	4603      	mov	r3, r0
 801b312:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b314:	7dfb      	ldrb	r3, [r7, #23]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d116      	bne.n	801b348 <create_chain+0x116>
		fs->last_clst = ncl;
 801b31a:	693b      	ldr	r3, [r7, #16]
 801b31c:	69fa      	ldr	r2, [r7, #28]
 801b31e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b320:	693b      	ldr	r3, [r7, #16]
 801b322:	699a      	ldr	r2, [r3, #24]
 801b324:	693b      	ldr	r3, [r7, #16]
 801b326:	69db      	ldr	r3, [r3, #28]
 801b328:	3b02      	subs	r3, #2
 801b32a:	429a      	cmp	r2, r3
 801b32c:	d804      	bhi.n	801b338 <create_chain+0x106>
 801b32e:	693b      	ldr	r3, [r7, #16]
 801b330:	699b      	ldr	r3, [r3, #24]
 801b332:	1e5a      	subs	r2, r3, #1
 801b334:	693b      	ldr	r3, [r7, #16]
 801b336:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b338:	693b      	ldr	r3, [r7, #16]
 801b33a:	791b      	ldrb	r3, [r3, #4]
 801b33c:	f043 0301 	orr.w	r3, r3, #1
 801b340:	b2da      	uxtb	r2, r3
 801b342:	693b      	ldr	r3, [r7, #16]
 801b344:	711a      	strb	r2, [r3, #4]
 801b346:	e007      	b.n	801b358 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b348:	7dfb      	ldrb	r3, [r7, #23]
 801b34a:	2b01      	cmp	r3, #1
 801b34c:	d102      	bne.n	801b354 <create_chain+0x122>
 801b34e:	f04f 33ff 	mov.w	r3, #4294967295
 801b352:	e000      	b.n	801b356 <create_chain+0x124>
 801b354:	2301      	movs	r3, #1
 801b356:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b358:	69fb      	ldr	r3, [r7, #28]
}
 801b35a:	4618      	mov	r0, r3
 801b35c:	3720      	adds	r7, #32
 801b35e:	46bd      	mov	sp, r7
 801b360:	bd80      	pop	{r7, pc}

0801b362 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b362:	b480      	push	{r7}
 801b364:	b087      	sub	sp, #28
 801b366:	af00      	add	r7, sp, #0
 801b368:	6078      	str	r0, [r7, #4]
 801b36a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b376:	3304      	adds	r3, #4
 801b378:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	899b      	ldrh	r3, [r3, #12]
 801b37e:	461a      	mov	r2, r3
 801b380:	683b      	ldr	r3, [r7, #0]
 801b382:	fbb3 f3f2 	udiv	r3, r3, r2
 801b386:	68fa      	ldr	r2, [r7, #12]
 801b388:	8952      	ldrh	r2, [r2, #10]
 801b38a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b38e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b390:	693b      	ldr	r3, [r7, #16]
 801b392:	1d1a      	adds	r2, r3, #4
 801b394:	613a      	str	r2, [r7, #16]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d101      	bne.n	801b3a4 <clmt_clust+0x42>
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	e010      	b.n	801b3c6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b3a4:	697a      	ldr	r2, [r7, #20]
 801b3a6:	68bb      	ldr	r3, [r7, #8]
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	d307      	bcc.n	801b3bc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b3ac:	697a      	ldr	r2, [r7, #20]
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	1ad3      	subs	r3, r2, r3
 801b3b2:	617b      	str	r3, [r7, #20]
 801b3b4:	693b      	ldr	r3, [r7, #16]
 801b3b6:	3304      	adds	r3, #4
 801b3b8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b3ba:	e7e9      	b.n	801b390 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b3bc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b3be:	693b      	ldr	r3, [r7, #16]
 801b3c0:	681a      	ldr	r2, [r3, #0]
 801b3c2:	697b      	ldr	r3, [r7, #20]
 801b3c4:	4413      	add	r3, r2
}
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	371c      	adds	r7, #28
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d0:	4770      	bx	lr

0801b3d2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b3d2:	b580      	push	{r7, lr}
 801b3d4:	b086      	sub	sp, #24
 801b3d6:	af00      	add	r7, sp, #0
 801b3d8:	6078      	str	r0, [r7, #4]
 801b3da:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b3e2:	683b      	ldr	r3, [r7, #0]
 801b3e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b3e8:	d204      	bcs.n	801b3f4 <dir_sdi+0x22>
 801b3ea:	683b      	ldr	r3, [r7, #0]
 801b3ec:	f003 031f 	and.w	r3, r3, #31
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d001      	beq.n	801b3f8 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b3f4:	2302      	movs	r3, #2
 801b3f6:	e071      	b.n	801b4dc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	683a      	ldr	r2, [r7, #0]
 801b3fc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	689b      	ldr	r3, [r3, #8]
 801b402:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b404:	697b      	ldr	r3, [r7, #20]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d106      	bne.n	801b418 <dir_sdi+0x46>
 801b40a:	693b      	ldr	r3, [r7, #16]
 801b40c:	781b      	ldrb	r3, [r3, #0]
 801b40e:	2b02      	cmp	r3, #2
 801b410:	d902      	bls.n	801b418 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b412:	693b      	ldr	r3, [r7, #16]
 801b414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b416:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b418:	697b      	ldr	r3, [r7, #20]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d10c      	bne.n	801b438 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b41e:	683b      	ldr	r3, [r7, #0]
 801b420:	095b      	lsrs	r3, r3, #5
 801b422:	693a      	ldr	r2, [r7, #16]
 801b424:	8912      	ldrh	r2, [r2, #8]
 801b426:	4293      	cmp	r3, r2
 801b428:	d301      	bcc.n	801b42e <dir_sdi+0x5c>
 801b42a:	2302      	movs	r3, #2
 801b42c:	e056      	b.n	801b4dc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801b42e:	693b      	ldr	r3, [r7, #16]
 801b430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	61da      	str	r2, [r3, #28]
 801b436:	e02d      	b.n	801b494 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b438:	693b      	ldr	r3, [r7, #16]
 801b43a:	895b      	ldrh	r3, [r3, #10]
 801b43c:	461a      	mov	r2, r3
 801b43e:	693b      	ldr	r3, [r7, #16]
 801b440:	899b      	ldrh	r3, [r3, #12]
 801b442:	fb02 f303 	mul.w	r3, r2, r3
 801b446:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b448:	e019      	b.n	801b47e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	6979      	ldr	r1, [r7, #20]
 801b44e:	4618      	mov	r0, r3
 801b450:	f7ff fc9d 	bl	801ad8e <get_fat>
 801b454:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b45c:	d101      	bne.n	801b462 <dir_sdi+0x90>
 801b45e:	2301      	movs	r3, #1
 801b460:	e03c      	b.n	801b4dc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b462:	697b      	ldr	r3, [r7, #20]
 801b464:	2b01      	cmp	r3, #1
 801b466:	d904      	bls.n	801b472 <dir_sdi+0xa0>
 801b468:	693b      	ldr	r3, [r7, #16]
 801b46a:	69db      	ldr	r3, [r3, #28]
 801b46c:	697a      	ldr	r2, [r7, #20]
 801b46e:	429a      	cmp	r2, r3
 801b470:	d301      	bcc.n	801b476 <dir_sdi+0xa4>
 801b472:	2302      	movs	r3, #2
 801b474:	e032      	b.n	801b4dc <dir_sdi+0x10a>
			ofs -= csz;
 801b476:	683a      	ldr	r2, [r7, #0]
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	1ad3      	subs	r3, r2, r3
 801b47c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b47e:	683a      	ldr	r2, [r7, #0]
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	429a      	cmp	r2, r3
 801b484:	d2e1      	bcs.n	801b44a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801b486:	6979      	ldr	r1, [r7, #20]
 801b488:	6938      	ldr	r0, [r7, #16]
 801b48a:	f7ff fc61 	bl	801ad50 <clust2sect>
 801b48e:	4602      	mov	r2, r0
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	697a      	ldr	r2, [r7, #20]
 801b498:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	69db      	ldr	r3, [r3, #28]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d101      	bne.n	801b4a6 <dir_sdi+0xd4>
 801b4a2:	2302      	movs	r3, #2
 801b4a4:	e01a      	b.n	801b4dc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	69da      	ldr	r2, [r3, #28]
 801b4aa:	693b      	ldr	r3, [r7, #16]
 801b4ac:	899b      	ldrh	r3, [r3, #12]
 801b4ae:	4619      	mov	r1, r3
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4b6:	441a      	add	r2, r3
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b4bc:	693b      	ldr	r3, [r7, #16]
 801b4be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4c2:	693b      	ldr	r3, [r7, #16]
 801b4c4:	899b      	ldrh	r3, [r3, #12]
 801b4c6:	461a      	mov	r2, r3
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	fbb3 f0f2 	udiv	r0, r3, r2
 801b4ce:	fb00 f202 	mul.w	r2, r0, r2
 801b4d2:	1a9b      	subs	r3, r3, r2
 801b4d4:	18ca      	adds	r2, r1, r3
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b4da:	2300      	movs	r3, #0
}
 801b4dc:	4618      	mov	r0, r3
 801b4de:	3718      	adds	r7, #24
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	bd80      	pop	{r7, pc}

0801b4e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b4e4:	b580      	push	{r7, lr}
 801b4e6:	b086      	sub	sp, #24
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	6078      	str	r0, [r7, #4]
 801b4ec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	695b      	ldr	r3, [r3, #20]
 801b4f8:	3320      	adds	r3, #32
 801b4fa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	69db      	ldr	r3, [r3, #28]
 801b500:	2b00      	cmp	r3, #0
 801b502:	d003      	beq.n	801b50c <dir_next+0x28>
 801b504:	68bb      	ldr	r3, [r7, #8]
 801b506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b50a:	d301      	bcc.n	801b510 <dir_next+0x2c>
 801b50c:	2304      	movs	r3, #4
 801b50e:	e0bb      	b.n	801b688 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	899b      	ldrh	r3, [r3, #12]
 801b514:	461a      	mov	r2, r3
 801b516:	68bb      	ldr	r3, [r7, #8]
 801b518:	fbb3 f1f2 	udiv	r1, r3, r2
 801b51c:	fb01 f202 	mul.w	r2, r1, r2
 801b520:	1a9b      	subs	r3, r3, r2
 801b522:	2b00      	cmp	r3, #0
 801b524:	f040 809d 	bne.w	801b662 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	69db      	ldr	r3, [r3, #28]
 801b52c:	1c5a      	adds	r2, r3, #1
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	699b      	ldr	r3, [r3, #24]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d10b      	bne.n	801b552 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b53a:	68bb      	ldr	r3, [r7, #8]
 801b53c:	095b      	lsrs	r3, r3, #5
 801b53e:	68fa      	ldr	r2, [r7, #12]
 801b540:	8912      	ldrh	r2, [r2, #8]
 801b542:	4293      	cmp	r3, r2
 801b544:	f0c0 808d 	bcc.w	801b662 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	2200      	movs	r2, #0
 801b54c:	61da      	str	r2, [r3, #28]
 801b54e:	2304      	movs	r3, #4
 801b550:	e09a      	b.n	801b688 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	899b      	ldrh	r3, [r3, #12]
 801b556:	461a      	mov	r2, r3
 801b558:	68bb      	ldr	r3, [r7, #8]
 801b55a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b55e:	68fa      	ldr	r2, [r7, #12]
 801b560:	8952      	ldrh	r2, [r2, #10]
 801b562:	3a01      	subs	r2, #1
 801b564:	4013      	ands	r3, r2
 801b566:	2b00      	cmp	r3, #0
 801b568:	d17b      	bne.n	801b662 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b56a:	687a      	ldr	r2, [r7, #4]
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	699b      	ldr	r3, [r3, #24]
 801b570:	4619      	mov	r1, r3
 801b572:	4610      	mov	r0, r2
 801b574:	f7ff fc0b 	bl	801ad8e <get_fat>
 801b578:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	2b01      	cmp	r3, #1
 801b57e:	d801      	bhi.n	801b584 <dir_next+0xa0>
 801b580:	2302      	movs	r3, #2
 801b582:	e081      	b.n	801b688 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b584:	697b      	ldr	r3, [r7, #20]
 801b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b58a:	d101      	bne.n	801b590 <dir_next+0xac>
 801b58c:	2301      	movs	r3, #1
 801b58e:	e07b      	b.n	801b688 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	69db      	ldr	r3, [r3, #28]
 801b594:	697a      	ldr	r2, [r7, #20]
 801b596:	429a      	cmp	r2, r3
 801b598:	d359      	bcc.n	801b64e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b59a:	683b      	ldr	r3, [r7, #0]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d104      	bne.n	801b5aa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	61da      	str	r2, [r3, #28]
 801b5a6:	2304      	movs	r3, #4
 801b5a8:	e06e      	b.n	801b688 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b5aa:	687a      	ldr	r2, [r7, #4]
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	699b      	ldr	r3, [r3, #24]
 801b5b0:	4619      	mov	r1, r3
 801b5b2:	4610      	mov	r0, r2
 801b5b4:	f7ff fe3d 	bl	801b232 <create_chain>
 801b5b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b5ba:	697b      	ldr	r3, [r7, #20]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d101      	bne.n	801b5c4 <dir_next+0xe0>
 801b5c0:	2307      	movs	r3, #7
 801b5c2:	e061      	b.n	801b688 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b5c4:	697b      	ldr	r3, [r7, #20]
 801b5c6:	2b01      	cmp	r3, #1
 801b5c8:	d101      	bne.n	801b5ce <dir_next+0xea>
 801b5ca:	2302      	movs	r3, #2
 801b5cc:	e05c      	b.n	801b688 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5d4:	d101      	bne.n	801b5da <dir_next+0xf6>
 801b5d6:	2301      	movs	r3, #1
 801b5d8:	e056      	b.n	801b688 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b5da:	68f8      	ldr	r0, [r7, #12]
 801b5dc:	f7ff fad6 	bl	801ab8c <sync_window>
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d001      	beq.n	801b5ea <dir_next+0x106>
 801b5e6:	2301      	movs	r3, #1
 801b5e8:	e04e      	b.n	801b688 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b5ea:	68fb      	ldr	r3, [r7, #12]
 801b5ec:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	899b      	ldrh	r3, [r3, #12]
 801b5f4:	461a      	mov	r2, r3
 801b5f6:	2100      	movs	r1, #0
 801b5f8:	f7ff f8ff 	bl	801a7fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	613b      	str	r3, [r7, #16]
 801b600:	6979      	ldr	r1, [r7, #20]
 801b602:	68f8      	ldr	r0, [r7, #12]
 801b604:	f7ff fba4 	bl	801ad50 <clust2sect>
 801b608:	4602      	mov	r2, r0
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	635a      	str	r2, [r3, #52]	@ 0x34
 801b60e:	e012      	b.n	801b636 <dir_next+0x152>
						fs->wflag = 1;
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	2201      	movs	r2, #1
 801b614:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b616:	68f8      	ldr	r0, [r7, #12]
 801b618:	f7ff fab8 	bl	801ab8c <sync_window>
 801b61c:	4603      	mov	r3, r0
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d001      	beq.n	801b626 <dir_next+0x142>
 801b622:	2301      	movs	r3, #1
 801b624:	e030      	b.n	801b688 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b626:	693b      	ldr	r3, [r7, #16]
 801b628:	3301      	adds	r3, #1
 801b62a:	613b      	str	r3, [r7, #16]
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b630:	1c5a      	adds	r2, r3, #1
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	635a      	str	r2, [r3, #52]	@ 0x34
 801b636:	68fb      	ldr	r3, [r7, #12]
 801b638:	895b      	ldrh	r3, [r3, #10]
 801b63a:	461a      	mov	r2, r3
 801b63c:	693b      	ldr	r3, [r7, #16]
 801b63e:	4293      	cmp	r3, r2
 801b640:	d3e6      	bcc.n	801b610 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b646:	693b      	ldr	r3, [r7, #16]
 801b648:	1ad2      	subs	r2, r2, r3
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	697a      	ldr	r2, [r7, #20]
 801b652:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b654:	6979      	ldr	r1, [r7, #20]
 801b656:	68f8      	ldr	r0, [r7, #12]
 801b658:	f7ff fb7a 	bl	801ad50 <clust2sect>
 801b65c:	4602      	mov	r2, r0
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	68ba      	ldr	r2, [r7, #8]
 801b666:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	899b      	ldrh	r3, [r3, #12]
 801b672:	461a      	mov	r2, r3
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	fbb3 f0f2 	udiv	r0, r3, r2
 801b67a:	fb00 f202 	mul.w	r2, r0, r2
 801b67e:	1a9b      	subs	r3, r3, r2
 801b680:	18ca      	adds	r2, r1, r3
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b686:	2300      	movs	r3, #0
}
 801b688:	4618      	mov	r0, r3
 801b68a:	3718      	adds	r7, #24
 801b68c:	46bd      	mov	sp, r7
 801b68e:	bd80      	pop	{r7, pc}

0801b690 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b690:	b580      	push	{r7, lr}
 801b692:	b086      	sub	sp, #24
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
 801b698:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b6a0:	2100      	movs	r1, #0
 801b6a2:	6878      	ldr	r0, [r7, #4]
 801b6a4:	f7ff fe95 	bl	801b3d2 <dir_sdi>
 801b6a8:	4603      	mov	r3, r0
 801b6aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b6ac:	7dfb      	ldrb	r3, [r7, #23]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d12b      	bne.n	801b70a <dir_alloc+0x7a>
		n = 0;
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	69db      	ldr	r3, [r3, #28]
 801b6ba:	4619      	mov	r1, r3
 801b6bc:	68f8      	ldr	r0, [r7, #12]
 801b6be:	f7ff faa9 	bl	801ac14 <move_window>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b6c6:	7dfb      	ldrb	r3, [r7, #23]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d11d      	bne.n	801b708 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	6a1b      	ldr	r3, [r3, #32]
 801b6d0:	781b      	ldrb	r3, [r3, #0]
 801b6d2:	2be5      	cmp	r3, #229	@ 0xe5
 801b6d4:	d004      	beq.n	801b6e0 <dir_alloc+0x50>
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	6a1b      	ldr	r3, [r3, #32]
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d107      	bne.n	801b6f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b6e0:	693b      	ldr	r3, [r7, #16]
 801b6e2:	3301      	adds	r3, #1
 801b6e4:	613b      	str	r3, [r7, #16]
 801b6e6:	693a      	ldr	r2, [r7, #16]
 801b6e8:	683b      	ldr	r3, [r7, #0]
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	d102      	bne.n	801b6f4 <dir_alloc+0x64>
 801b6ee:	e00c      	b.n	801b70a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b6f0:	2300      	movs	r3, #0
 801b6f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b6f4:	2101      	movs	r1, #1
 801b6f6:	6878      	ldr	r0, [r7, #4]
 801b6f8:	f7ff fef4 	bl	801b4e4 <dir_next>
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b700:	7dfb      	ldrb	r3, [r7, #23]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d0d7      	beq.n	801b6b6 <dir_alloc+0x26>
 801b706:	e000      	b.n	801b70a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b708:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b70a:	7dfb      	ldrb	r3, [r7, #23]
 801b70c:	2b04      	cmp	r3, #4
 801b70e:	d101      	bne.n	801b714 <dir_alloc+0x84>
 801b710:	2307      	movs	r3, #7
 801b712:	75fb      	strb	r3, [r7, #23]
	return res;
 801b714:	7dfb      	ldrb	r3, [r7, #23]
}
 801b716:	4618      	mov	r0, r3
 801b718:	3718      	adds	r7, #24
 801b71a:	46bd      	mov	sp, r7
 801b71c:	bd80      	pop	{r7, pc}

0801b71e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b71e:	b580      	push	{r7, lr}
 801b720:	b084      	sub	sp, #16
 801b722:	af00      	add	r7, sp, #0
 801b724:	6078      	str	r0, [r7, #4]
 801b726:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b728:	683b      	ldr	r3, [r7, #0]
 801b72a:	331a      	adds	r3, #26
 801b72c:	4618      	mov	r0, r3
 801b72e:	f7fe ffc1 	bl	801a6b4 <ld_word>
 801b732:	4603      	mov	r3, r0
 801b734:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	781b      	ldrb	r3, [r3, #0]
 801b73a:	2b03      	cmp	r3, #3
 801b73c:	d109      	bne.n	801b752 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	3314      	adds	r3, #20
 801b742:	4618      	mov	r0, r3
 801b744:	f7fe ffb6 	bl	801a6b4 <ld_word>
 801b748:	4603      	mov	r3, r0
 801b74a:	041b      	lsls	r3, r3, #16
 801b74c:	68fa      	ldr	r2, [r7, #12]
 801b74e:	4313      	orrs	r3, r2
 801b750:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b752:	68fb      	ldr	r3, [r7, #12]
}
 801b754:	4618      	mov	r0, r3
 801b756:	3710      	adds	r7, #16
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd80      	pop	{r7, pc}

0801b75c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b084      	sub	sp, #16
 801b760:	af00      	add	r7, sp, #0
 801b762:	60f8      	str	r0, [r7, #12]
 801b764:	60b9      	str	r1, [r7, #8]
 801b766:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b768:	68bb      	ldr	r3, [r7, #8]
 801b76a:	331a      	adds	r3, #26
 801b76c:	687a      	ldr	r2, [r7, #4]
 801b76e:	b292      	uxth	r2, r2
 801b770:	4611      	mov	r1, r2
 801b772:	4618      	mov	r0, r3
 801b774:	f7fe ffd9 	bl	801a72a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b778:	68fb      	ldr	r3, [r7, #12]
 801b77a:	781b      	ldrb	r3, [r3, #0]
 801b77c:	2b03      	cmp	r3, #3
 801b77e:	d109      	bne.n	801b794 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	f103 0214 	add.w	r2, r3, #20
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	0c1b      	lsrs	r3, r3, #16
 801b78a:	b29b      	uxth	r3, r3
 801b78c:	4619      	mov	r1, r3
 801b78e:	4610      	mov	r0, r2
 801b790:	f7fe ffcb 	bl	801a72a <st_word>
	}
}
 801b794:	bf00      	nop
 801b796:	3710      	adds	r7, #16
 801b798:	46bd      	mov	sp, r7
 801b79a:	bd80      	pop	{r7, pc}

0801b79c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801b79c:	b590      	push	{r4, r7, lr}
 801b79e:	b087      	sub	sp, #28
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
 801b7a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801b7a6:	683b      	ldr	r3, [r7, #0]
 801b7a8:	331a      	adds	r3, #26
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	f7fe ff82 	bl	801a6b4 <ld_word>
 801b7b0:	4603      	mov	r3, r0
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d001      	beq.n	801b7ba <cmp_lfn+0x1e>
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	e059      	b.n	801b86e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	781b      	ldrb	r3, [r3, #0]
 801b7be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b7c2:	1e5a      	subs	r2, r3, #1
 801b7c4:	4613      	mov	r3, r2
 801b7c6:	005b      	lsls	r3, r3, #1
 801b7c8:	4413      	add	r3, r2
 801b7ca:	009b      	lsls	r3, r3, #2
 801b7cc:	4413      	add	r3, r2
 801b7ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b7d0:	2301      	movs	r3, #1
 801b7d2:	81fb      	strh	r3, [r7, #14]
 801b7d4:	2300      	movs	r3, #0
 801b7d6:	613b      	str	r3, [r7, #16]
 801b7d8:	e033      	b.n	801b842 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b7da:	4a27      	ldr	r2, [pc, #156]	@ (801b878 <cmp_lfn+0xdc>)
 801b7dc:	693b      	ldr	r3, [r7, #16]
 801b7de:	4413      	add	r3, r2
 801b7e0:	781b      	ldrb	r3, [r3, #0]
 801b7e2:	461a      	mov	r2, r3
 801b7e4:	683b      	ldr	r3, [r7, #0]
 801b7e6:	4413      	add	r3, r2
 801b7e8:	4618      	mov	r0, r3
 801b7ea:	f7fe ff63 	bl	801a6b4 <ld_word>
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b7f2:	89fb      	ldrh	r3, [r7, #14]
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d01a      	beq.n	801b82e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801b7f8:	697b      	ldr	r3, [r7, #20]
 801b7fa:	2bfe      	cmp	r3, #254	@ 0xfe
 801b7fc:	d812      	bhi.n	801b824 <cmp_lfn+0x88>
 801b7fe:	89bb      	ldrh	r3, [r7, #12]
 801b800:	4618      	mov	r0, r3
 801b802:	f001 ff71 	bl	801d6e8 <ff_wtoupper>
 801b806:	4603      	mov	r3, r0
 801b808:	461c      	mov	r4, r3
 801b80a:	697b      	ldr	r3, [r7, #20]
 801b80c:	1c5a      	adds	r2, r3, #1
 801b80e:	617a      	str	r2, [r7, #20]
 801b810:	005b      	lsls	r3, r3, #1
 801b812:	687a      	ldr	r2, [r7, #4]
 801b814:	4413      	add	r3, r2
 801b816:	881b      	ldrh	r3, [r3, #0]
 801b818:	4618      	mov	r0, r3
 801b81a:	f001 ff65 	bl	801d6e8 <ff_wtoupper>
 801b81e:	4603      	mov	r3, r0
 801b820:	429c      	cmp	r4, r3
 801b822:	d001      	beq.n	801b828 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801b824:	2300      	movs	r3, #0
 801b826:	e022      	b.n	801b86e <cmp_lfn+0xd2>
			}
			wc = uc;
 801b828:	89bb      	ldrh	r3, [r7, #12]
 801b82a:	81fb      	strh	r3, [r7, #14]
 801b82c:	e006      	b.n	801b83c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b82e:	89bb      	ldrh	r3, [r7, #12]
 801b830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b834:	4293      	cmp	r3, r2
 801b836:	d001      	beq.n	801b83c <cmp_lfn+0xa0>
 801b838:	2300      	movs	r3, #0
 801b83a:	e018      	b.n	801b86e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b83c:	693b      	ldr	r3, [r7, #16]
 801b83e:	3301      	adds	r3, #1
 801b840:	613b      	str	r3, [r7, #16]
 801b842:	693b      	ldr	r3, [r7, #16]
 801b844:	2b0c      	cmp	r3, #12
 801b846:	d9c8      	bls.n	801b7da <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801b848:	683b      	ldr	r3, [r7, #0]
 801b84a:	781b      	ldrb	r3, [r3, #0]
 801b84c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b850:	2b00      	cmp	r3, #0
 801b852:	d00b      	beq.n	801b86c <cmp_lfn+0xd0>
 801b854:	89fb      	ldrh	r3, [r7, #14]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d008      	beq.n	801b86c <cmp_lfn+0xd0>
 801b85a:	697b      	ldr	r3, [r7, #20]
 801b85c:	005b      	lsls	r3, r3, #1
 801b85e:	687a      	ldr	r2, [r7, #4]
 801b860:	4413      	add	r3, r2
 801b862:	881b      	ldrh	r3, [r3, #0]
 801b864:	2b00      	cmp	r3, #0
 801b866:	d001      	beq.n	801b86c <cmp_lfn+0xd0>
 801b868:	2300      	movs	r3, #0
 801b86a:	e000      	b.n	801b86e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801b86c:	2301      	movs	r3, #1
}
 801b86e:	4618      	mov	r0, r3
 801b870:	371c      	adds	r7, #28
 801b872:	46bd      	mov	sp, r7
 801b874:	bd90      	pop	{r4, r7, pc}
 801b876:	bf00      	nop
 801b878:	0801e390 	.word	0x0801e390

0801b87c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801b87c:	b580      	push	{r7, lr}
 801b87e:	b086      	sub	sp, #24
 801b880:	af00      	add	r7, sp, #0
 801b882:	6078      	str	r0, [r7, #4]
 801b884:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801b886:	683b      	ldr	r3, [r7, #0]
 801b888:	331a      	adds	r3, #26
 801b88a:	4618      	mov	r0, r3
 801b88c:	f7fe ff12 	bl	801a6b4 <ld_word>
 801b890:	4603      	mov	r3, r0
 801b892:	2b00      	cmp	r3, #0
 801b894:	d001      	beq.n	801b89a <pick_lfn+0x1e>
 801b896:	2300      	movs	r3, #0
 801b898:	e04d      	b.n	801b936 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	781b      	ldrb	r3, [r3, #0]
 801b89e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b8a2:	1e5a      	subs	r2, r3, #1
 801b8a4:	4613      	mov	r3, r2
 801b8a6:	005b      	lsls	r3, r3, #1
 801b8a8:	4413      	add	r3, r2
 801b8aa:	009b      	lsls	r3, r3, #2
 801b8ac:	4413      	add	r3, r2
 801b8ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b8b0:	2301      	movs	r3, #1
 801b8b2:	81fb      	strh	r3, [r7, #14]
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	613b      	str	r3, [r7, #16]
 801b8b8:	e028      	b.n	801b90c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b8ba:	4a21      	ldr	r2, [pc, #132]	@ (801b940 <pick_lfn+0xc4>)
 801b8bc:	693b      	ldr	r3, [r7, #16]
 801b8be:	4413      	add	r3, r2
 801b8c0:	781b      	ldrb	r3, [r3, #0]
 801b8c2:	461a      	mov	r2, r3
 801b8c4:	683b      	ldr	r3, [r7, #0]
 801b8c6:	4413      	add	r3, r2
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7fe fef3 	bl	801a6b4 <ld_word>
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b8d2:	89fb      	ldrh	r3, [r7, #14]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d00f      	beq.n	801b8f8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801b8d8:	697b      	ldr	r3, [r7, #20]
 801b8da:	2bfe      	cmp	r3, #254	@ 0xfe
 801b8dc:	d901      	bls.n	801b8e2 <pick_lfn+0x66>
 801b8de:	2300      	movs	r3, #0
 801b8e0:	e029      	b.n	801b936 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801b8e2:	89bb      	ldrh	r3, [r7, #12]
 801b8e4:	81fb      	strh	r3, [r7, #14]
 801b8e6:	697b      	ldr	r3, [r7, #20]
 801b8e8:	1c5a      	adds	r2, r3, #1
 801b8ea:	617a      	str	r2, [r7, #20]
 801b8ec:	005b      	lsls	r3, r3, #1
 801b8ee:	687a      	ldr	r2, [r7, #4]
 801b8f0:	4413      	add	r3, r2
 801b8f2:	89fa      	ldrh	r2, [r7, #14]
 801b8f4:	801a      	strh	r2, [r3, #0]
 801b8f6:	e006      	b.n	801b906 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b8f8:	89bb      	ldrh	r3, [r7, #12]
 801b8fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b8fe:	4293      	cmp	r3, r2
 801b900:	d001      	beq.n	801b906 <pick_lfn+0x8a>
 801b902:	2300      	movs	r3, #0
 801b904:	e017      	b.n	801b936 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b906:	693b      	ldr	r3, [r7, #16]
 801b908:	3301      	adds	r3, #1
 801b90a:	613b      	str	r3, [r7, #16]
 801b90c:	693b      	ldr	r3, [r7, #16]
 801b90e:	2b0c      	cmp	r3, #12
 801b910:	d9d3      	bls.n	801b8ba <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801b912:	683b      	ldr	r3, [r7, #0]
 801b914:	781b      	ldrb	r3, [r3, #0]
 801b916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d00a      	beq.n	801b934 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801b91e:	697b      	ldr	r3, [r7, #20]
 801b920:	2bfe      	cmp	r3, #254	@ 0xfe
 801b922:	d901      	bls.n	801b928 <pick_lfn+0xac>
 801b924:	2300      	movs	r3, #0
 801b926:	e006      	b.n	801b936 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	005b      	lsls	r3, r3, #1
 801b92c:	687a      	ldr	r2, [r7, #4]
 801b92e:	4413      	add	r3, r2
 801b930:	2200      	movs	r2, #0
 801b932:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801b934:	2301      	movs	r3, #1
}
 801b936:	4618      	mov	r0, r3
 801b938:	3718      	adds	r7, #24
 801b93a:	46bd      	mov	sp, r7
 801b93c:	bd80      	pop	{r7, pc}
 801b93e:	bf00      	nop
 801b940:	0801e390 	.word	0x0801e390

0801b944 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b088      	sub	sp, #32
 801b948:	af00      	add	r7, sp, #0
 801b94a:	60f8      	str	r0, [r7, #12]
 801b94c:	60b9      	str	r1, [r7, #8]
 801b94e:	4611      	mov	r1, r2
 801b950:	461a      	mov	r2, r3
 801b952:	460b      	mov	r3, r1
 801b954:	71fb      	strb	r3, [r7, #7]
 801b956:	4613      	mov	r3, r2
 801b958:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801b95a:	68bb      	ldr	r3, [r7, #8]
 801b95c:	330d      	adds	r3, #13
 801b95e:	79ba      	ldrb	r2, [r7, #6]
 801b960:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801b962:	68bb      	ldr	r3, [r7, #8]
 801b964:	330b      	adds	r3, #11
 801b966:	220f      	movs	r2, #15
 801b968:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801b96a:	68bb      	ldr	r3, [r7, #8]
 801b96c:	330c      	adds	r3, #12
 801b96e:	2200      	movs	r2, #0
 801b970:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801b972:	68bb      	ldr	r3, [r7, #8]
 801b974:	331a      	adds	r3, #26
 801b976:	2100      	movs	r1, #0
 801b978:	4618      	mov	r0, r3
 801b97a:	f7fe fed6 	bl	801a72a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801b97e:	79fb      	ldrb	r3, [r7, #7]
 801b980:	1e5a      	subs	r2, r3, #1
 801b982:	4613      	mov	r3, r2
 801b984:	005b      	lsls	r3, r3, #1
 801b986:	4413      	add	r3, r2
 801b988:	009b      	lsls	r3, r3, #2
 801b98a:	4413      	add	r3, r2
 801b98c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801b98e:	2300      	movs	r3, #0
 801b990:	82fb      	strh	r3, [r7, #22]
 801b992:	2300      	movs	r3, #0
 801b994:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b996:	8afb      	ldrh	r3, [r7, #22]
 801b998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b99c:	4293      	cmp	r3, r2
 801b99e:	d007      	beq.n	801b9b0 <put_lfn+0x6c>
 801b9a0:	69fb      	ldr	r3, [r7, #28]
 801b9a2:	1c5a      	adds	r2, r3, #1
 801b9a4:	61fa      	str	r2, [r7, #28]
 801b9a6:	005b      	lsls	r3, r3, #1
 801b9a8:	68fa      	ldr	r2, [r7, #12]
 801b9aa:	4413      	add	r3, r2
 801b9ac:	881b      	ldrh	r3, [r3, #0]
 801b9ae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801b9b0:	4a17      	ldr	r2, [pc, #92]	@ (801ba10 <put_lfn+0xcc>)
 801b9b2:	69bb      	ldr	r3, [r7, #24]
 801b9b4:	4413      	add	r3, r2
 801b9b6:	781b      	ldrb	r3, [r3, #0]
 801b9b8:	461a      	mov	r2, r3
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	4413      	add	r3, r2
 801b9be:	8afa      	ldrh	r2, [r7, #22]
 801b9c0:	4611      	mov	r1, r2
 801b9c2:	4618      	mov	r0, r3
 801b9c4:	f7fe feb1 	bl	801a72a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b9c8:	8afb      	ldrh	r3, [r7, #22]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d102      	bne.n	801b9d4 <put_lfn+0x90>
 801b9ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b9d2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801b9d4:	69bb      	ldr	r3, [r7, #24]
 801b9d6:	3301      	adds	r3, #1
 801b9d8:	61bb      	str	r3, [r7, #24]
 801b9da:	69bb      	ldr	r3, [r7, #24]
 801b9dc:	2b0c      	cmp	r3, #12
 801b9de:	d9da      	bls.n	801b996 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801b9e0:	8afb      	ldrh	r3, [r7, #22]
 801b9e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b9e6:	4293      	cmp	r3, r2
 801b9e8:	d006      	beq.n	801b9f8 <put_lfn+0xb4>
 801b9ea:	69fb      	ldr	r3, [r7, #28]
 801b9ec:	005b      	lsls	r3, r3, #1
 801b9ee:	68fa      	ldr	r2, [r7, #12]
 801b9f0:	4413      	add	r3, r2
 801b9f2:	881b      	ldrh	r3, [r3, #0]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d103      	bne.n	801ba00 <put_lfn+0xbc>
 801b9f8:	79fb      	ldrb	r3, [r7, #7]
 801b9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b9fe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801ba00:	68bb      	ldr	r3, [r7, #8]
 801ba02:	79fa      	ldrb	r2, [r7, #7]
 801ba04:	701a      	strb	r2, [r3, #0]
}
 801ba06:	bf00      	nop
 801ba08:	3720      	adds	r7, #32
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bd80      	pop	{r7, pc}
 801ba0e:	bf00      	nop
 801ba10:	0801e390 	.word	0x0801e390

0801ba14 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b08c      	sub	sp, #48	@ 0x30
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	60f8      	str	r0, [r7, #12]
 801ba1c:	60b9      	str	r1, [r7, #8]
 801ba1e:	607a      	str	r2, [r7, #4]
 801ba20:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801ba22:	220b      	movs	r2, #11
 801ba24:	68b9      	ldr	r1, [r7, #8]
 801ba26:	68f8      	ldr	r0, [r7, #12]
 801ba28:	f7fe fec6 	bl	801a7b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801ba2c:	683b      	ldr	r3, [r7, #0]
 801ba2e:	2b05      	cmp	r3, #5
 801ba30:	d929      	bls.n	801ba86 <gen_numname+0x72>
		sr = seq;
 801ba32:	683b      	ldr	r3, [r7, #0]
 801ba34:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801ba36:	e020      	b.n	801ba7a <gen_numname+0x66>
			wc = *lfn++;
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	1c9a      	adds	r2, r3, #2
 801ba3c:	607a      	str	r2, [r7, #4]
 801ba3e:	881b      	ldrh	r3, [r3, #0]
 801ba40:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801ba42:	2300      	movs	r3, #0
 801ba44:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba46:	e015      	b.n	801ba74 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801ba48:	69fb      	ldr	r3, [r7, #28]
 801ba4a:	005a      	lsls	r2, r3, #1
 801ba4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba4e:	f003 0301 	and.w	r3, r3, #1
 801ba52:	4413      	add	r3, r2
 801ba54:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801ba56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba58:	085b      	lsrs	r3, r3, #1
 801ba5a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801ba5c:	69fb      	ldr	r3, [r7, #28]
 801ba5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d003      	beq.n	801ba6e <gen_numname+0x5a>
 801ba66:	69fa      	ldr	r2, [r7, #28]
 801ba68:	4b30      	ldr	r3, [pc, #192]	@ (801bb2c <gen_numname+0x118>)
 801ba6a:	4053      	eors	r3, r2
 801ba6c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801ba6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba70:	3301      	adds	r3, #1
 801ba72:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba76:	2b0f      	cmp	r3, #15
 801ba78:	d9e6      	bls.n	801ba48 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	881b      	ldrh	r3, [r3, #0]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d1da      	bne.n	801ba38 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801ba82:	69fb      	ldr	r3, [r7, #28]
 801ba84:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801ba86:	2307      	movs	r3, #7
 801ba88:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801ba8a:	683b      	ldr	r3, [r7, #0]
 801ba8c:	b2db      	uxtb	r3, r3
 801ba8e:	f003 030f 	and.w	r3, r3, #15
 801ba92:	b2db      	uxtb	r3, r3
 801ba94:	3330      	adds	r3, #48	@ 0x30
 801ba96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801ba9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801ba9e:	2b39      	cmp	r3, #57	@ 0x39
 801baa0:	d904      	bls.n	801baac <gen_numname+0x98>
 801baa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801baa6:	3307      	adds	r3, #7
 801baa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801baac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801baae:	1e5a      	subs	r2, r3, #1
 801bab0:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bab2:	3330      	adds	r3, #48	@ 0x30
 801bab4:	443b      	add	r3, r7
 801bab6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801baba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801babe:	683b      	ldr	r3, [r7, #0]
 801bac0:	091b      	lsrs	r3, r3, #4
 801bac2:	603b      	str	r3, [r7, #0]
	} while (seq);
 801bac4:	683b      	ldr	r3, [r7, #0]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d1df      	bne.n	801ba8a <gen_numname+0x76>
	ns[i] = '~';
 801baca:	f107 0214 	add.w	r2, r7, #20
 801bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bad0:	4413      	add	r3, r2
 801bad2:	227e      	movs	r2, #126	@ 0x7e
 801bad4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801bad6:	2300      	movs	r3, #0
 801bad8:	627b      	str	r3, [r7, #36]	@ 0x24
 801bada:	e002      	b.n	801bae2 <gen_numname+0xce>
 801badc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bade:	3301      	adds	r3, #1
 801bae0:	627b      	str	r3, [r7, #36]	@ 0x24
 801bae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bae6:	429a      	cmp	r2, r3
 801bae8:	d205      	bcs.n	801baf6 <gen_numname+0xe2>
 801baea:	68fa      	ldr	r2, [r7, #12]
 801baec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baee:	4413      	add	r3, r2
 801baf0:	781b      	ldrb	r3, [r3, #0]
 801baf2:	2b20      	cmp	r3, #32
 801baf4:	d1f2      	bne.n	801badc <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801baf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801baf8:	2b07      	cmp	r3, #7
 801bafa:	d807      	bhi.n	801bb0c <gen_numname+0xf8>
 801bafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bafe:	1c5a      	adds	r2, r3, #1
 801bb00:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bb02:	3330      	adds	r3, #48	@ 0x30
 801bb04:	443b      	add	r3, r7
 801bb06:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801bb0a:	e000      	b.n	801bb0e <gen_numname+0xfa>
 801bb0c:	2120      	movs	r1, #32
 801bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb10:	1c5a      	adds	r2, r3, #1
 801bb12:	627a      	str	r2, [r7, #36]	@ 0x24
 801bb14:	68fa      	ldr	r2, [r7, #12]
 801bb16:	4413      	add	r3, r2
 801bb18:	460a      	mov	r2, r1
 801bb1a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801bb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb1e:	2b07      	cmp	r3, #7
 801bb20:	d9e9      	bls.n	801baf6 <gen_numname+0xe2>
}
 801bb22:	bf00      	nop
 801bb24:	bf00      	nop
 801bb26:	3730      	adds	r7, #48	@ 0x30
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}
 801bb2c:	00011021 	.word	0x00011021

0801bb30 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801bb30:	b480      	push	{r7}
 801bb32:	b085      	sub	sp, #20
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801bb38:	2300      	movs	r3, #0
 801bb3a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801bb3c:	230b      	movs	r3, #11
 801bb3e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801bb40:	7bfb      	ldrb	r3, [r7, #15]
 801bb42:	b2da      	uxtb	r2, r3
 801bb44:	0852      	lsrs	r2, r2, #1
 801bb46:	01db      	lsls	r3, r3, #7
 801bb48:	4313      	orrs	r3, r2
 801bb4a:	b2da      	uxtb	r2, r3
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	1c59      	adds	r1, r3, #1
 801bb50:	6079      	str	r1, [r7, #4]
 801bb52:	781b      	ldrb	r3, [r3, #0]
 801bb54:	4413      	add	r3, r2
 801bb56:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801bb58:	68bb      	ldr	r3, [r7, #8]
 801bb5a:	3b01      	subs	r3, #1
 801bb5c:	60bb      	str	r3, [r7, #8]
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d1ed      	bne.n	801bb40 <sum_sfn+0x10>
	return sum;
 801bb64:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb66:	4618      	mov	r0, r3
 801bb68:	3714      	adds	r7, #20
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb70:	4770      	bx	lr

0801bb72 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801bb72:	b580      	push	{r7, lr}
 801bb74:	b086      	sub	sp, #24
 801bb76:	af00      	add	r7, sp, #0
 801bb78:	6078      	str	r0, [r7, #4]
 801bb7a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801bb7c:	2304      	movs	r3, #4
 801bb7e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801bb86:	23ff      	movs	r3, #255	@ 0xff
 801bb88:	757b      	strb	r3, [r7, #21]
 801bb8a:	23ff      	movs	r3, #255	@ 0xff
 801bb8c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801bb8e:	e081      	b.n	801bc94 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	69db      	ldr	r3, [r3, #28]
 801bb94:	4619      	mov	r1, r3
 801bb96:	6938      	ldr	r0, [r7, #16]
 801bb98:	f7ff f83c 	bl	801ac14 <move_window>
 801bb9c:	4603      	mov	r3, r0
 801bb9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bba0:	7dfb      	ldrb	r3, [r7, #23]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d17c      	bne.n	801bca0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	6a1b      	ldr	r3, [r3, #32]
 801bbaa:	781b      	ldrb	r3, [r3, #0]
 801bbac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801bbae:	7dbb      	ldrb	r3, [r7, #22]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d102      	bne.n	801bbba <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801bbb4:	2304      	movs	r3, #4
 801bbb6:	75fb      	strb	r3, [r7, #23]
 801bbb8:	e077      	b.n	801bcaa <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	6a1b      	ldr	r3, [r3, #32]
 801bbbe:	330b      	adds	r3, #11
 801bbc0:	781b      	ldrb	r3, [r3, #0]
 801bbc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bbc6:	73fb      	strb	r3, [r7, #15]
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	7bfa      	ldrb	r2, [r7, #15]
 801bbcc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801bbce:	7dbb      	ldrb	r3, [r7, #22]
 801bbd0:	2be5      	cmp	r3, #229	@ 0xe5
 801bbd2:	d00e      	beq.n	801bbf2 <dir_read+0x80>
 801bbd4:	7dbb      	ldrb	r3, [r7, #22]
 801bbd6:	2b2e      	cmp	r3, #46	@ 0x2e
 801bbd8:	d00b      	beq.n	801bbf2 <dir_read+0x80>
 801bbda:	7bfb      	ldrb	r3, [r7, #15]
 801bbdc:	f023 0320 	bic.w	r3, r3, #32
 801bbe0:	2b08      	cmp	r3, #8
 801bbe2:	bf0c      	ite	eq
 801bbe4:	2301      	moveq	r3, #1
 801bbe6:	2300      	movne	r3, #0
 801bbe8:	b2db      	uxtb	r3, r3
 801bbea:	461a      	mov	r2, r3
 801bbec:	683b      	ldr	r3, [r7, #0]
 801bbee:	4293      	cmp	r3, r2
 801bbf0:	d002      	beq.n	801bbf8 <dir_read+0x86>
				ord = 0xFF;
 801bbf2:	23ff      	movs	r3, #255	@ 0xff
 801bbf4:	757b      	strb	r3, [r7, #21]
 801bbf6:	e044      	b.n	801bc82 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801bbf8:	7bfb      	ldrb	r3, [r7, #15]
 801bbfa:	2b0f      	cmp	r3, #15
 801bbfc:	d12f      	bne.n	801bc5e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801bbfe:	7dbb      	ldrb	r3, [r7, #22]
 801bc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d00d      	beq.n	801bc24 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	6a1b      	ldr	r3, [r3, #32]
 801bc0c:	7b5b      	ldrb	r3, [r3, #13]
 801bc0e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801bc10:	7dbb      	ldrb	r3, [r7, #22]
 801bc12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bc16:	75bb      	strb	r3, [r7, #22]
 801bc18:	7dbb      	ldrb	r3, [r7, #22]
 801bc1a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	695a      	ldr	r2, [r3, #20]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801bc24:	7dba      	ldrb	r2, [r7, #22]
 801bc26:	7d7b      	ldrb	r3, [r7, #21]
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d115      	bne.n	801bc58 <dir_read+0xe6>
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	6a1b      	ldr	r3, [r3, #32]
 801bc30:	330d      	adds	r3, #13
 801bc32:	781b      	ldrb	r3, [r3, #0]
 801bc34:	7d3a      	ldrb	r2, [r7, #20]
 801bc36:	429a      	cmp	r2, r3
 801bc38:	d10e      	bne.n	801bc58 <dir_read+0xe6>
 801bc3a:	693b      	ldr	r3, [r7, #16]
 801bc3c:	691a      	ldr	r2, [r3, #16]
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	6a1b      	ldr	r3, [r3, #32]
 801bc42:	4619      	mov	r1, r3
 801bc44:	4610      	mov	r0, r2
 801bc46:	f7ff fe19 	bl	801b87c <pick_lfn>
 801bc4a:	4603      	mov	r3, r0
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d003      	beq.n	801bc58 <dir_read+0xe6>
 801bc50:	7d7b      	ldrb	r3, [r7, #21]
 801bc52:	3b01      	subs	r3, #1
 801bc54:	b2db      	uxtb	r3, r3
 801bc56:	e000      	b.n	801bc5a <dir_read+0xe8>
 801bc58:	23ff      	movs	r3, #255	@ 0xff
 801bc5a:	757b      	strb	r3, [r7, #21]
 801bc5c:	e011      	b.n	801bc82 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801bc5e:	7d7b      	ldrb	r3, [r7, #21]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d109      	bne.n	801bc78 <dir_read+0x106>
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	6a1b      	ldr	r3, [r3, #32]
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f7ff ff61 	bl	801bb30 <sum_sfn>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	461a      	mov	r2, r3
 801bc72:	7d3b      	ldrb	r3, [r7, #20]
 801bc74:	4293      	cmp	r3, r2
 801bc76:	d015      	beq.n	801bca4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	f04f 32ff 	mov.w	r2, #4294967295
 801bc7e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801bc80:	e010      	b.n	801bca4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801bc82:	2100      	movs	r1, #0
 801bc84:	6878      	ldr	r0, [r7, #4]
 801bc86:	f7ff fc2d 	bl	801b4e4 <dir_next>
 801bc8a:	4603      	mov	r3, r0
 801bc8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bc8e:	7dfb      	ldrb	r3, [r7, #23]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d109      	bne.n	801bca8 <dir_read+0x136>
	while (dp->sect) {
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	69db      	ldr	r3, [r3, #28]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	f47f af79 	bne.w	801bb90 <dir_read+0x1e>
 801bc9e:	e004      	b.n	801bcaa <dir_read+0x138>
		if (res != FR_OK) break;
 801bca0:	bf00      	nop
 801bca2:	e002      	b.n	801bcaa <dir_read+0x138>
					break;
 801bca4:	bf00      	nop
 801bca6:	e000      	b.n	801bcaa <dir_read+0x138>
		if (res != FR_OK) break;
 801bca8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801bcaa:	7dfb      	ldrb	r3, [r7, #23]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d002      	beq.n	801bcb6 <dir_read+0x144>
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	2200      	movs	r2, #0
 801bcb4:	61da      	str	r2, [r3, #28]
	return res;
 801bcb6:	7dfb      	ldrb	r3, [r7, #23]
}
 801bcb8:	4618      	mov	r0, r3
 801bcba:	3718      	adds	r7, #24
 801bcbc:	46bd      	mov	sp, r7
 801bcbe:	bd80      	pop	{r7, pc}

0801bcc0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801bcc0:	b580      	push	{r7, lr}
 801bcc2:	b086      	sub	sp, #24
 801bcc4:	af00      	add	r7, sp, #0
 801bcc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801bcce:	2100      	movs	r1, #0
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	f7ff fb7e 	bl	801b3d2 <dir_sdi>
 801bcd6:	4603      	mov	r3, r0
 801bcd8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801bcda:	7dfb      	ldrb	r3, [r7, #23]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d001      	beq.n	801bce4 <dir_find+0x24>
 801bce0:	7dfb      	ldrb	r3, [r7, #23]
 801bce2:	e0a9      	b.n	801be38 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bce4:	23ff      	movs	r3, #255	@ 0xff
 801bce6:	753b      	strb	r3, [r7, #20]
 801bce8:	7d3b      	ldrb	r3, [r7, #20]
 801bcea:	757b      	strb	r3, [r7, #21]
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	f04f 32ff 	mov.w	r2, #4294967295
 801bcf2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	69db      	ldr	r3, [r3, #28]
 801bcf8:	4619      	mov	r1, r3
 801bcfa:	6938      	ldr	r0, [r7, #16]
 801bcfc:	f7fe ff8a 	bl	801ac14 <move_window>
 801bd00:	4603      	mov	r3, r0
 801bd02:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bd04:	7dfb      	ldrb	r3, [r7, #23]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	f040 8090 	bne.w	801be2c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	6a1b      	ldr	r3, [r3, #32]
 801bd10:	781b      	ldrb	r3, [r3, #0]
 801bd12:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801bd14:	7dbb      	ldrb	r3, [r7, #22]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d102      	bne.n	801bd20 <dir_find+0x60>
 801bd1a:	2304      	movs	r3, #4
 801bd1c:	75fb      	strb	r3, [r7, #23]
 801bd1e:	e08a      	b.n	801be36 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	6a1b      	ldr	r3, [r3, #32]
 801bd24:	330b      	adds	r3, #11
 801bd26:	781b      	ldrb	r3, [r3, #0]
 801bd28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bd2c:	73fb      	strb	r3, [r7, #15]
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	7bfa      	ldrb	r2, [r7, #15]
 801bd32:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801bd34:	7dbb      	ldrb	r3, [r7, #22]
 801bd36:	2be5      	cmp	r3, #229	@ 0xe5
 801bd38:	d007      	beq.n	801bd4a <dir_find+0x8a>
 801bd3a:	7bfb      	ldrb	r3, [r7, #15]
 801bd3c:	f003 0308 	and.w	r3, r3, #8
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d009      	beq.n	801bd58 <dir_find+0x98>
 801bd44:	7bfb      	ldrb	r3, [r7, #15]
 801bd46:	2b0f      	cmp	r3, #15
 801bd48:	d006      	beq.n	801bd58 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bd4a:	23ff      	movs	r3, #255	@ 0xff
 801bd4c:	757b      	strb	r3, [r7, #21]
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	f04f 32ff 	mov.w	r2, #4294967295
 801bd54:	631a      	str	r2, [r3, #48]	@ 0x30
 801bd56:	e05e      	b.n	801be16 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801bd58:	7bfb      	ldrb	r3, [r7, #15]
 801bd5a:	2b0f      	cmp	r3, #15
 801bd5c:	d136      	bne.n	801bdcc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bd64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d154      	bne.n	801be16 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801bd6c:	7dbb      	ldrb	r3, [r7, #22]
 801bd6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d00d      	beq.n	801bd92 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	6a1b      	ldr	r3, [r3, #32]
 801bd7a:	7b5b      	ldrb	r3, [r3, #13]
 801bd7c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801bd7e:	7dbb      	ldrb	r3, [r7, #22]
 801bd80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bd84:	75bb      	strb	r3, [r7, #22]
 801bd86:	7dbb      	ldrb	r3, [r7, #22]
 801bd88:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	695a      	ldr	r2, [r3, #20]
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801bd92:	7dba      	ldrb	r2, [r7, #22]
 801bd94:	7d7b      	ldrb	r3, [r7, #21]
 801bd96:	429a      	cmp	r2, r3
 801bd98:	d115      	bne.n	801bdc6 <dir_find+0x106>
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	6a1b      	ldr	r3, [r3, #32]
 801bd9e:	330d      	adds	r3, #13
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	7d3a      	ldrb	r2, [r7, #20]
 801bda4:	429a      	cmp	r2, r3
 801bda6:	d10e      	bne.n	801bdc6 <dir_find+0x106>
 801bda8:	693b      	ldr	r3, [r7, #16]
 801bdaa:	691a      	ldr	r2, [r3, #16]
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	6a1b      	ldr	r3, [r3, #32]
 801bdb0:	4619      	mov	r1, r3
 801bdb2:	4610      	mov	r0, r2
 801bdb4:	f7ff fcf2 	bl	801b79c <cmp_lfn>
 801bdb8:	4603      	mov	r3, r0
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d003      	beq.n	801bdc6 <dir_find+0x106>
 801bdbe:	7d7b      	ldrb	r3, [r7, #21]
 801bdc0:	3b01      	subs	r3, #1
 801bdc2:	b2db      	uxtb	r3, r3
 801bdc4:	e000      	b.n	801bdc8 <dir_find+0x108>
 801bdc6:	23ff      	movs	r3, #255	@ 0xff
 801bdc8:	757b      	strb	r3, [r7, #21]
 801bdca:	e024      	b.n	801be16 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801bdcc:	7d7b      	ldrb	r3, [r7, #21]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d109      	bne.n	801bde6 <dir_find+0x126>
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	6a1b      	ldr	r3, [r3, #32]
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	f7ff feaa 	bl	801bb30 <sum_sfn>
 801bddc:	4603      	mov	r3, r0
 801bdde:	461a      	mov	r2, r3
 801bde0:	7d3b      	ldrb	r3, [r7, #20]
 801bde2:	4293      	cmp	r3, r2
 801bde4:	d024      	beq.n	801be30 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bdec:	f003 0301 	and.w	r3, r3, #1
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d10a      	bne.n	801be0a <dir_find+0x14a>
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	6a18      	ldr	r0, [r3, #32]
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	3324      	adds	r3, #36	@ 0x24
 801bdfc:	220b      	movs	r2, #11
 801bdfe:	4619      	mov	r1, r3
 801be00:	f7fe fd16 	bl	801a830 <mem_cmp>
 801be04:	4603      	mov	r3, r0
 801be06:	2b00      	cmp	r3, #0
 801be08:	d014      	beq.n	801be34 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801be0a:	23ff      	movs	r3, #255	@ 0xff
 801be0c:	757b      	strb	r3, [r7, #21]
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	f04f 32ff 	mov.w	r2, #4294967295
 801be14:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801be16:	2100      	movs	r1, #0
 801be18:	6878      	ldr	r0, [r7, #4]
 801be1a:	f7ff fb63 	bl	801b4e4 <dir_next>
 801be1e:	4603      	mov	r3, r0
 801be20:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801be22:	7dfb      	ldrb	r3, [r7, #23]
 801be24:	2b00      	cmp	r3, #0
 801be26:	f43f af65 	beq.w	801bcf4 <dir_find+0x34>
 801be2a:	e004      	b.n	801be36 <dir_find+0x176>
		if (res != FR_OK) break;
 801be2c:	bf00      	nop
 801be2e:	e002      	b.n	801be36 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801be30:	bf00      	nop
 801be32:	e000      	b.n	801be36 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801be34:	bf00      	nop

	return res;
 801be36:	7dfb      	ldrb	r3, [r7, #23]
}
 801be38:	4618      	mov	r0, r3
 801be3a:	3718      	adds	r7, #24
 801be3c:	46bd      	mov	sp, r7
 801be3e:	bd80      	pop	{r7, pc}

0801be40 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b08c      	sub	sp, #48	@ 0x30
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801be54:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d001      	beq.n	801be60 <dir_register+0x20>
 801be5c:	2306      	movs	r3, #6
 801be5e:	e0e0      	b.n	801c022 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801be60:	2300      	movs	r3, #0
 801be62:	627b      	str	r3, [r7, #36]	@ 0x24
 801be64:	e002      	b.n	801be6c <dir_register+0x2c>
 801be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be68:	3301      	adds	r3, #1
 801be6a:	627b      	str	r3, [r7, #36]	@ 0x24
 801be6c:	69fb      	ldr	r3, [r7, #28]
 801be6e:	691a      	ldr	r2, [r3, #16]
 801be70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be72:	005b      	lsls	r3, r3, #1
 801be74:	4413      	add	r3, r2
 801be76:	881b      	ldrh	r3, [r3, #0]
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d1f4      	bne.n	801be66 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801be82:	f107 030c 	add.w	r3, r7, #12
 801be86:	220c      	movs	r2, #12
 801be88:	4618      	mov	r0, r3
 801be8a:	f7fe fc95 	bl	801a7b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801be8e:	7dfb      	ldrb	r3, [r7, #23]
 801be90:	f003 0301 	and.w	r3, r3, #1
 801be94:	2b00      	cmp	r3, #0
 801be96:	d032      	beq.n	801befe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	2240      	movs	r2, #64	@ 0x40
 801be9c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801bea0:	2301      	movs	r3, #1
 801bea2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bea4:	e016      	b.n	801bed4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801beac:	69fb      	ldr	r3, [r7, #28]
 801beae:	691a      	ldr	r2, [r3, #16]
 801beb0:	f107 010c 	add.w	r1, r7, #12
 801beb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beb6:	f7ff fdad 	bl	801ba14 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801beba:	6878      	ldr	r0, [r7, #4]
 801bebc:	f7ff ff00 	bl	801bcc0 <dir_find>
 801bec0:	4603      	mov	r3, r0
 801bec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801bec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801beca:	2b00      	cmp	r3, #0
 801becc:	d106      	bne.n	801bedc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801bece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bed0:	3301      	adds	r3, #1
 801bed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bed6:	2b63      	cmp	r3, #99	@ 0x63
 801bed8:	d9e5      	bls.n	801bea6 <dir_register+0x66>
 801beda:	e000      	b.n	801bede <dir_register+0x9e>
			if (res != FR_OK) break;
 801bedc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801bede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bee0:	2b64      	cmp	r3, #100	@ 0x64
 801bee2:	d101      	bne.n	801bee8 <dir_register+0xa8>
 801bee4:	2307      	movs	r3, #7
 801bee6:	e09c      	b.n	801c022 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801bee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801beec:	2b04      	cmp	r3, #4
 801beee:	d002      	beq.n	801bef6 <dir_register+0xb6>
 801bef0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bef4:	e095      	b.n	801c022 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801bef6:	7dfa      	ldrb	r2, [r7, #23]
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801befe:	7dfb      	ldrb	r3, [r7, #23]
 801bf00:	f003 0302 	and.w	r3, r3, #2
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d007      	beq.n	801bf18 <dir_register+0xd8>
 801bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf0a:	330c      	adds	r3, #12
 801bf0c:	4a47      	ldr	r2, [pc, #284]	@ (801c02c <dir_register+0x1ec>)
 801bf0e:	fba2 2303 	umull	r2, r3, r2, r3
 801bf12:	089b      	lsrs	r3, r3, #2
 801bf14:	3301      	adds	r3, #1
 801bf16:	e000      	b.n	801bf1a <dir_register+0xda>
 801bf18:	2301      	movs	r3, #1
 801bf1a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801bf1c:	6a39      	ldr	r1, [r7, #32]
 801bf1e:	6878      	ldr	r0, [r7, #4]
 801bf20:	f7ff fbb6 	bl	801b690 <dir_alloc>
 801bf24:	4603      	mov	r3, r0
 801bf26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801bf2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d148      	bne.n	801bfc4 <dir_register+0x184>
 801bf32:	6a3b      	ldr	r3, [r7, #32]
 801bf34:	3b01      	subs	r3, #1
 801bf36:	623b      	str	r3, [r7, #32]
 801bf38:	6a3b      	ldr	r3, [r7, #32]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d042      	beq.n	801bfc4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	695a      	ldr	r2, [r3, #20]
 801bf42:	6a3b      	ldr	r3, [r7, #32]
 801bf44:	015b      	lsls	r3, r3, #5
 801bf46:	1ad3      	subs	r3, r2, r3
 801bf48:	4619      	mov	r1, r3
 801bf4a:	6878      	ldr	r0, [r7, #4]
 801bf4c:	f7ff fa41 	bl	801b3d2 <dir_sdi>
 801bf50:	4603      	mov	r3, r0
 801bf52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801bf56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d132      	bne.n	801bfc4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	3324      	adds	r3, #36	@ 0x24
 801bf62:	4618      	mov	r0, r3
 801bf64:	f7ff fde4 	bl	801bb30 <sum_sfn>
 801bf68:	4603      	mov	r3, r0
 801bf6a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	69db      	ldr	r3, [r3, #28]
 801bf70:	4619      	mov	r1, r3
 801bf72:	69f8      	ldr	r0, [r7, #28]
 801bf74:	f7fe fe4e 	bl	801ac14 <move_window>
 801bf78:	4603      	mov	r3, r0
 801bf7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801bf7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d11d      	bne.n	801bfc2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801bf86:	69fb      	ldr	r3, [r7, #28]
 801bf88:	6918      	ldr	r0, [r3, #16]
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	6a19      	ldr	r1, [r3, #32]
 801bf8e:	6a3b      	ldr	r3, [r7, #32]
 801bf90:	b2da      	uxtb	r2, r3
 801bf92:	7efb      	ldrb	r3, [r7, #27]
 801bf94:	f7ff fcd6 	bl	801b944 <put_lfn>
				fs->wflag = 1;
 801bf98:	69fb      	ldr	r3, [r7, #28]
 801bf9a:	2201      	movs	r2, #1
 801bf9c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801bf9e:	2100      	movs	r1, #0
 801bfa0:	6878      	ldr	r0, [r7, #4]
 801bfa2:	f7ff fa9f 	bl	801b4e4 <dir_next>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801bfac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d107      	bne.n	801bfc4 <dir_register+0x184>
 801bfb4:	6a3b      	ldr	r3, [r7, #32]
 801bfb6:	3b01      	subs	r3, #1
 801bfb8:	623b      	str	r3, [r7, #32]
 801bfba:	6a3b      	ldr	r3, [r7, #32]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d1d5      	bne.n	801bf6c <dir_register+0x12c>
 801bfc0:	e000      	b.n	801bfc4 <dir_register+0x184>
				if (res != FR_OK) break;
 801bfc2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801bfc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d128      	bne.n	801c01e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	69db      	ldr	r3, [r3, #28]
 801bfd0:	4619      	mov	r1, r3
 801bfd2:	69f8      	ldr	r0, [r7, #28]
 801bfd4:	f7fe fe1e 	bl	801ac14 <move_window>
 801bfd8:	4603      	mov	r3, r0
 801bfda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801bfde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d11b      	bne.n	801c01e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	6a1b      	ldr	r3, [r3, #32]
 801bfea:	2220      	movs	r2, #32
 801bfec:	2100      	movs	r1, #0
 801bfee:	4618      	mov	r0, r3
 801bff0:	f7fe fc03 	bl	801a7fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	6a18      	ldr	r0, [r3, #32]
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	3324      	adds	r3, #36	@ 0x24
 801bffc:	220b      	movs	r2, #11
 801bffe:	4619      	mov	r1, r3
 801c000:	f7fe fbda 	bl	801a7b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	6a1b      	ldr	r3, [r3, #32]
 801c00e:	330c      	adds	r3, #12
 801c010:	f002 0218 	and.w	r2, r2, #24
 801c014:	b2d2      	uxtb	r2, r2
 801c016:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c018:	69fb      	ldr	r3, [r7, #28]
 801c01a:	2201      	movs	r2, #1
 801c01c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c01e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c022:	4618      	mov	r0, r3
 801c024:	3730      	adds	r7, #48	@ 0x30
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}
 801c02a:	bf00      	nop
 801c02c:	4ec4ec4f 	.word	0x4ec4ec4f

0801c030 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b086      	sub	sp, #24
 801c034:	af00      	add	r7, sp, #0
 801c036:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	695b      	ldr	r3, [r3, #20]
 801c042:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c04c:	d007      	beq.n	801c05e <dir_remove+0x2e>
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c052:	4619      	mov	r1, r3
 801c054:	6878      	ldr	r0, [r7, #4]
 801c056:	f7ff f9bc 	bl	801b3d2 <dir_sdi>
 801c05a:	4603      	mov	r3, r0
 801c05c:	e000      	b.n	801c060 <dir_remove+0x30>
 801c05e:	2300      	movs	r3, #0
 801c060:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c062:	7dfb      	ldrb	r3, [r7, #23]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d128      	bne.n	801c0ba <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	69db      	ldr	r3, [r3, #28]
 801c06c:	4619      	mov	r1, r3
 801c06e:	6938      	ldr	r0, [r7, #16]
 801c070:	f7fe fdd0 	bl	801ac14 <move_window>
 801c074:	4603      	mov	r3, r0
 801c076:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c078:	7dfb      	ldrb	r3, [r7, #23]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d115      	bne.n	801c0aa <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	6a1b      	ldr	r3, [r3, #32]
 801c082:	22e5      	movs	r2, #229	@ 0xe5
 801c084:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c086:	693b      	ldr	r3, [r7, #16]
 801c088:	2201      	movs	r2, #1
 801c08a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	695b      	ldr	r3, [r3, #20]
 801c090:	68fa      	ldr	r2, [r7, #12]
 801c092:	429a      	cmp	r2, r3
 801c094:	d90b      	bls.n	801c0ae <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c096:	2100      	movs	r1, #0
 801c098:	6878      	ldr	r0, [r7, #4]
 801c09a:	f7ff fa23 	bl	801b4e4 <dir_next>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c0a2:	7dfb      	ldrb	r3, [r7, #23]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d0df      	beq.n	801c068 <dir_remove+0x38>
 801c0a8:	e002      	b.n	801c0b0 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c0aa:	bf00      	nop
 801c0ac:	e000      	b.n	801c0b0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c0ae:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c0b0:	7dfb      	ldrb	r3, [r7, #23]
 801c0b2:	2b04      	cmp	r3, #4
 801c0b4:	d101      	bne.n	801c0ba <dir_remove+0x8a>
 801c0b6:	2302      	movs	r3, #2
 801c0b8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 801c0bc:	4618      	mov	r0, r3
 801c0be:	3718      	adds	r7, #24
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bd80      	pop	{r7, pc}

0801c0c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c0c4:	b580      	push	{r7, lr}
 801c0c6:	b08a      	sub	sp, #40	@ 0x28
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
 801c0cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c0ce:	683b      	ldr	r3, [r7, #0]
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	613b      	str	r3, [r7, #16]
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	691b      	ldr	r3, [r3, #16]
 801c0da:	60fb      	str	r3, [r7, #12]
 801c0dc:	2300      	movs	r3, #0
 801c0de:	617b      	str	r3, [r7, #20]
 801c0e0:	697b      	ldr	r3, [r7, #20]
 801c0e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c0e4:	69bb      	ldr	r3, [r7, #24]
 801c0e6:	1c5a      	adds	r2, r3, #1
 801c0e8:	61ba      	str	r2, [r7, #24]
 801c0ea:	693a      	ldr	r2, [r7, #16]
 801c0ec:	4413      	add	r3, r2
 801c0ee:	781b      	ldrb	r3, [r3, #0]
 801c0f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c0f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c0f4:	2b1f      	cmp	r3, #31
 801c0f6:	d940      	bls.n	801c17a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c0f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c0fa:	2b2f      	cmp	r3, #47	@ 0x2f
 801c0fc:	d006      	beq.n	801c10c <create_name+0x48>
 801c0fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c100:	2b5c      	cmp	r3, #92	@ 0x5c
 801c102:	d110      	bne.n	801c126 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c104:	e002      	b.n	801c10c <create_name+0x48>
 801c106:	69bb      	ldr	r3, [r7, #24]
 801c108:	3301      	adds	r3, #1
 801c10a:	61bb      	str	r3, [r7, #24]
 801c10c:	693a      	ldr	r2, [r7, #16]
 801c10e:	69bb      	ldr	r3, [r7, #24]
 801c110:	4413      	add	r3, r2
 801c112:	781b      	ldrb	r3, [r3, #0]
 801c114:	2b2f      	cmp	r3, #47	@ 0x2f
 801c116:	d0f6      	beq.n	801c106 <create_name+0x42>
 801c118:	693a      	ldr	r2, [r7, #16]
 801c11a:	69bb      	ldr	r3, [r7, #24]
 801c11c:	4413      	add	r3, r2
 801c11e:	781b      	ldrb	r3, [r3, #0]
 801c120:	2b5c      	cmp	r3, #92	@ 0x5c
 801c122:	d0f0      	beq.n	801c106 <create_name+0x42>
			break;
 801c124:	e02a      	b.n	801c17c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c126:	697b      	ldr	r3, [r7, #20]
 801c128:	2bfe      	cmp	r3, #254	@ 0xfe
 801c12a:	d901      	bls.n	801c130 <create_name+0x6c>
 801c12c:	2306      	movs	r3, #6
 801c12e:	e17d      	b.n	801c42c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c130:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c132:	b2db      	uxtb	r3, r3
 801c134:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c138:	2101      	movs	r1, #1
 801c13a:	4618      	mov	r0, r3
 801c13c:	f001 fa98 	bl	801d670 <ff_convert>
 801c140:	4603      	mov	r3, r0
 801c142:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c146:	2b00      	cmp	r3, #0
 801c148:	d101      	bne.n	801c14e <create_name+0x8a>
 801c14a:	2306      	movs	r3, #6
 801c14c:	e16e      	b.n	801c42c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c14e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c150:	2b7f      	cmp	r3, #127	@ 0x7f
 801c152:	d809      	bhi.n	801c168 <create_name+0xa4>
 801c154:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c156:	4619      	mov	r1, r3
 801c158:	488d      	ldr	r0, [pc, #564]	@ (801c390 <create_name+0x2cc>)
 801c15a:	f7fe fb90 	bl	801a87e <chk_chr>
 801c15e:	4603      	mov	r3, r0
 801c160:	2b00      	cmp	r3, #0
 801c162:	d001      	beq.n	801c168 <create_name+0xa4>
 801c164:	2306      	movs	r3, #6
 801c166:	e161      	b.n	801c42c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c168:	697b      	ldr	r3, [r7, #20]
 801c16a:	1c5a      	adds	r2, r3, #1
 801c16c:	617a      	str	r2, [r7, #20]
 801c16e:	005b      	lsls	r3, r3, #1
 801c170:	68fa      	ldr	r2, [r7, #12]
 801c172:	4413      	add	r3, r2
 801c174:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c176:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c178:	e7b4      	b.n	801c0e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c17a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c17c:	693a      	ldr	r2, [r7, #16]
 801c17e:	69bb      	ldr	r3, [r7, #24]
 801c180:	441a      	add	r2, r3
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c186:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c188:	2b1f      	cmp	r3, #31
 801c18a:	d801      	bhi.n	801c190 <create_name+0xcc>
 801c18c:	2304      	movs	r3, #4
 801c18e:	e000      	b.n	801c192 <create_name+0xce>
 801c190:	2300      	movs	r3, #0
 801c192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c196:	e011      	b.n	801c1bc <create_name+0xf8>
		w = lfn[di - 1];
 801c198:	697a      	ldr	r2, [r7, #20]
 801c19a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c19e:	4413      	add	r3, r2
 801c1a0:	005b      	lsls	r3, r3, #1
 801c1a2:	68fa      	ldr	r2, [r7, #12]
 801c1a4:	4413      	add	r3, r2
 801c1a6:	881b      	ldrh	r3, [r3, #0]
 801c1a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c1aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1ac:	2b20      	cmp	r3, #32
 801c1ae:	d002      	beq.n	801c1b6 <create_name+0xf2>
 801c1b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1b2:	2b2e      	cmp	r3, #46	@ 0x2e
 801c1b4:	d106      	bne.n	801c1c4 <create_name+0x100>
		di--;
 801c1b6:	697b      	ldr	r3, [r7, #20]
 801c1b8:	3b01      	subs	r3, #1
 801c1ba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c1bc:	697b      	ldr	r3, [r7, #20]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d1ea      	bne.n	801c198 <create_name+0xd4>
 801c1c2:	e000      	b.n	801c1c6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c1c4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c1c6:	697b      	ldr	r3, [r7, #20]
 801c1c8:	005b      	lsls	r3, r3, #1
 801c1ca:	68fa      	ldr	r2, [r7, #12]
 801c1cc:	4413      	add	r3, r2
 801c1ce:	2200      	movs	r2, #0
 801c1d0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c1d2:	697b      	ldr	r3, [r7, #20]
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d101      	bne.n	801c1dc <create_name+0x118>
 801c1d8:	2306      	movs	r3, #6
 801c1da:	e127      	b.n	801c42c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	3324      	adds	r3, #36	@ 0x24
 801c1e0:	220b      	movs	r2, #11
 801c1e2:	2120      	movs	r1, #32
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	f7fe fb08 	bl	801a7fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c1ea:	2300      	movs	r3, #0
 801c1ec:	61bb      	str	r3, [r7, #24]
 801c1ee:	e002      	b.n	801c1f6 <create_name+0x132>
 801c1f0:	69bb      	ldr	r3, [r7, #24]
 801c1f2:	3301      	adds	r3, #1
 801c1f4:	61bb      	str	r3, [r7, #24]
 801c1f6:	69bb      	ldr	r3, [r7, #24]
 801c1f8:	005b      	lsls	r3, r3, #1
 801c1fa:	68fa      	ldr	r2, [r7, #12]
 801c1fc:	4413      	add	r3, r2
 801c1fe:	881b      	ldrh	r3, [r3, #0]
 801c200:	2b20      	cmp	r3, #32
 801c202:	d0f5      	beq.n	801c1f0 <create_name+0x12c>
 801c204:	69bb      	ldr	r3, [r7, #24]
 801c206:	005b      	lsls	r3, r3, #1
 801c208:	68fa      	ldr	r2, [r7, #12]
 801c20a:	4413      	add	r3, r2
 801c20c:	881b      	ldrh	r3, [r3, #0]
 801c20e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c210:	d0ee      	beq.n	801c1f0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c212:	69bb      	ldr	r3, [r7, #24]
 801c214:	2b00      	cmp	r3, #0
 801c216:	d009      	beq.n	801c22c <create_name+0x168>
 801c218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c21c:	f043 0303 	orr.w	r3, r3, #3
 801c220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c224:	e002      	b.n	801c22c <create_name+0x168>
 801c226:	697b      	ldr	r3, [r7, #20]
 801c228:	3b01      	subs	r3, #1
 801c22a:	617b      	str	r3, [r7, #20]
 801c22c:	697b      	ldr	r3, [r7, #20]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d009      	beq.n	801c246 <create_name+0x182>
 801c232:	697a      	ldr	r2, [r7, #20]
 801c234:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c238:	4413      	add	r3, r2
 801c23a:	005b      	lsls	r3, r3, #1
 801c23c:	68fa      	ldr	r2, [r7, #12]
 801c23e:	4413      	add	r3, r2
 801c240:	881b      	ldrh	r3, [r3, #0]
 801c242:	2b2e      	cmp	r3, #46	@ 0x2e
 801c244:	d1ef      	bne.n	801c226 <create_name+0x162>

	i = b = 0; ni = 8;
 801c246:	2300      	movs	r3, #0
 801c248:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c24c:	2300      	movs	r3, #0
 801c24e:	623b      	str	r3, [r7, #32]
 801c250:	2308      	movs	r3, #8
 801c252:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c254:	69bb      	ldr	r3, [r7, #24]
 801c256:	1c5a      	adds	r2, r3, #1
 801c258:	61ba      	str	r2, [r7, #24]
 801c25a:	005b      	lsls	r3, r3, #1
 801c25c:	68fa      	ldr	r2, [r7, #12]
 801c25e:	4413      	add	r3, r2
 801c260:	881b      	ldrh	r3, [r3, #0]
 801c262:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c264:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c266:	2b00      	cmp	r3, #0
 801c268:	f000 8090 	beq.w	801c38c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c26c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c26e:	2b20      	cmp	r3, #32
 801c270:	d006      	beq.n	801c280 <create_name+0x1bc>
 801c272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c274:	2b2e      	cmp	r3, #46	@ 0x2e
 801c276:	d10a      	bne.n	801c28e <create_name+0x1ca>
 801c278:	69ba      	ldr	r2, [r7, #24]
 801c27a:	697b      	ldr	r3, [r7, #20]
 801c27c:	429a      	cmp	r2, r3
 801c27e:	d006      	beq.n	801c28e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c284:	f043 0303 	orr.w	r3, r3, #3
 801c288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c28c:	e07d      	b.n	801c38a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c28e:	6a3a      	ldr	r2, [r7, #32]
 801c290:	69fb      	ldr	r3, [r7, #28]
 801c292:	429a      	cmp	r2, r3
 801c294:	d203      	bcs.n	801c29e <create_name+0x1da>
 801c296:	69ba      	ldr	r2, [r7, #24]
 801c298:	697b      	ldr	r3, [r7, #20]
 801c29a:	429a      	cmp	r2, r3
 801c29c:	d123      	bne.n	801c2e6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c29e:	69fb      	ldr	r3, [r7, #28]
 801c2a0:	2b0b      	cmp	r3, #11
 801c2a2:	d106      	bne.n	801c2b2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2a8:	f043 0303 	orr.w	r3, r3, #3
 801c2ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c2b0:	e075      	b.n	801c39e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c2b2:	69ba      	ldr	r2, [r7, #24]
 801c2b4:	697b      	ldr	r3, [r7, #20]
 801c2b6:	429a      	cmp	r2, r3
 801c2b8:	d005      	beq.n	801c2c6 <create_name+0x202>
 801c2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2be:	f043 0303 	orr.w	r3, r3, #3
 801c2c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c2c6:	69ba      	ldr	r2, [r7, #24]
 801c2c8:	697b      	ldr	r3, [r7, #20]
 801c2ca:	429a      	cmp	r2, r3
 801c2cc:	d866      	bhi.n	801c39c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c2ce:	697b      	ldr	r3, [r7, #20]
 801c2d0:	61bb      	str	r3, [r7, #24]
 801c2d2:	2308      	movs	r3, #8
 801c2d4:	623b      	str	r3, [r7, #32]
 801c2d6:	230b      	movs	r3, #11
 801c2d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c2da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c2de:	009b      	lsls	r3, r3, #2
 801c2e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c2e4:	e051      	b.n	801c38a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c2e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c2e8:	2b7f      	cmp	r3, #127	@ 0x7f
 801c2ea:	d914      	bls.n	801c316 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c2ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c2ee:	2100      	movs	r1, #0
 801c2f0:	4618      	mov	r0, r3
 801c2f2:	f001 f9bd 	bl	801d670 <ff_convert>
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c2fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d004      	beq.n	801c30a <create_name+0x246>
 801c300:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c302:	3b80      	subs	r3, #128	@ 0x80
 801c304:	4a23      	ldr	r2, [pc, #140]	@ (801c394 <create_name+0x2d0>)
 801c306:	5cd3      	ldrb	r3, [r2, r3]
 801c308:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c30a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c30e:	f043 0302 	orr.w	r3, r3, #2
 801c312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d007      	beq.n	801c32c <create_name+0x268>
 801c31c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c31e:	4619      	mov	r1, r3
 801c320:	481d      	ldr	r0, [pc, #116]	@ (801c398 <create_name+0x2d4>)
 801c322:	f7fe faac 	bl	801a87e <chk_chr>
 801c326:	4603      	mov	r3, r0
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d008      	beq.n	801c33e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c32c:	235f      	movs	r3, #95	@ 0x5f
 801c32e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c334:	f043 0303 	orr.w	r3, r3, #3
 801c338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c33c:	e01b      	b.n	801c376 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c33e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c340:	2b40      	cmp	r3, #64	@ 0x40
 801c342:	d909      	bls.n	801c358 <create_name+0x294>
 801c344:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c346:	2b5a      	cmp	r3, #90	@ 0x5a
 801c348:	d806      	bhi.n	801c358 <create_name+0x294>
					b |= 2;
 801c34a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c34e:	f043 0302 	orr.w	r3, r3, #2
 801c352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c356:	e00e      	b.n	801c376 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c35a:	2b60      	cmp	r3, #96	@ 0x60
 801c35c:	d90b      	bls.n	801c376 <create_name+0x2b2>
 801c35e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c360:	2b7a      	cmp	r3, #122	@ 0x7a
 801c362:	d808      	bhi.n	801c376 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c368:	f043 0301 	orr.w	r3, r3, #1
 801c36c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c370:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c372:	3b20      	subs	r3, #32
 801c374:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c376:	6a3b      	ldr	r3, [r7, #32]
 801c378:	1c5a      	adds	r2, r3, #1
 801c37a:	623a      	str	r2, [r7, #32]
 801c37c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c37e:	b2d1      	uxtb	r1, r2
 801c380:	687a      	ldr	r2, [r7, #4]
 801c382:	4413      	add	r3, r2
 801c384:	460a      	mov	r2, r1
 801c386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c38a:	e763      	b.n	801c254 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c38c:	bf00      	nop
 801c38e:	e006      	b.n	801c39e <create_name+0x2da>
 801c390:	0801e284 	.word	0x0801e284
 801c394:	0801e310 	.word	0x0801e310
 801c398:	0801e290 	.word	0x0801e290
			if (si > di) break;			/* No extension */
 801c39c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c3a4:	2be5      	cmp	r3, #229	@ 0xe5
 801c3a6:	d103      	bne.n	801c3b0 <create_name+0x2ec>
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	2205      	movs	r2, #5
 801c3ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c3b0:	69fb      	ldr	r3, [r7, #28]
 801c3b2:	2b08      	cmp	r3, #8
 801c3b4:	d104      	bne.n	801c3c0 <create_name+0x2fc>
 801c3b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c3ba:	009b      	lsls	r3, r3, #2
 801c3bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c3c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c3c4:	f003 030c 	and.w	r3, r3, #12
 801c3c8:	2b0c      	cmp	r3, #12
 801c3ca:	d005      	beq.n	801c3d8 <create_name+0x314>
 801c3cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c3d0:	f003 0303 	and.w	r3, r3, #3
 801c3d4:	2b03      	cmp	r3, #3
 801c3d6:	d105      	bne.n	801c3e4 <create_name+0x320>
 801c3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c3dc:	f043 0302 	orr.w	r3, r3, #2
 801c3e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c3e8:	f003 0302 	and.w	r3, r3, #2
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d117      	bne.n	801c420 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c3f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c3f4:	f003 0303 	and.w	r3, r3, #3
 801c3f8:	2b01      	cmp	r3, #1
 801c3fa:	d105      	bne.n	801c408 <create_name+0x344>
 801c3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c400:	f043 0310 	orr.w	r3, r3, #16
 801c404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c408:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c40c:	f003 030c 	and.w	r3, r3, #12
 801c410:	2b04      	cmp	r3, #4
 801c412:	d105      	bne.n	801c420 <create_name+0x35c>
 801c414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c418:	f043 0308 	orr.w	r3, r3, #8
 801c41c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c426:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801c42a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801c42c:	4618      	mov	r0, r3
 801c42e:	3728      	adds	r7, #40	@ 0x28
 801c430:	46bd      	mov	sp, r7
 801c432:	bd80      	pop	{r7, pc}

0801c434 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c434:	b580      	push	{r7, lr}
 801c436:	b086      	sub	sp, #24
 801c438:	af00      	add	r7, sp, #0
 801c43a:	6078      	str	r0, [r7, #4]
 801c43c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c442:	693b      	ldr	r3, [r7, #16]
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c448:	e002      	b.n	801c450 <follow_path+0x1c>
 801c44a:	683b      	ldr	r3, [r7, #0]
 801c44c:	3301      	adds	r3, #1
 801c44e:	603b      	str	r3, [r7, #0]
 801c450:	683b      	ldr	r3, [r7, #0]
 801c452:	781b      	ldrb	r3, [r3, #0]
 801c454:	2b2f      	cmp	r3, #47	@ 0x2f
 801c456:	d0f8      	beq.n	801c44a <follow_path+0x16>
 801c458:	683b      	ldr	r3, [r7, #0]
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	2b5c      	cmp	r3, #92	@ 0x5c
 801c45e:	d0f4      	beq.n	801c44a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c460:	693b      	ldr	r3, [r7, #16]
 801c462:	2200      	movs	r2, #0
 801c464:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c466:	683b      	ldr	r3, [r7, #0]
 801c468:	781b      	ldrb	r3, [r3, #0]
 801c46a:	2b1f      	cmp	r3, #31
 801c46c:	d80a      	bhi.n	801c484 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	2280      	movs	r2, #128	@ 0x80
 801c472:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c476:	2100      	movs	r1, #0
 801c478:	6878      	ldr	r0, [r7, #4]
 801c47a:	f7fe ffaa 	bl	801b3d2 <dir_sdi>
 801c47e:	4603      	mov	r3, r0
 801c480:	75fb      	strb	r3, [r7, #23]
 801c482:	e048      	b.n	801c516 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c484:	463b      	mov	r3, r7
 801c486:	4619      	mov	r1, r3
 801c488:	6878      	ldr	r0, [r7, #4]
 801c48a:	f7ff fe1b 	bl	801c0c4 <create_name>
 801c48e:	4603      	mov	r3, r0
 801c490:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c492:	7dfb      	ldrb	r3, [r7, #23]
 801c494:	2b00      	cmp	r3, #0
 801c496:	d139      	bne.n	801c50c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c498:	6878      	ldr	r0, [r7, #4]
 801c49a:	f7ff fc11 	bl	801bcc0 <dir_find>
 801c49e:	4603      	mov	r3, r0
 801c4a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c4a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c4aa:	7dfb      	ldrb	r3, [r7, #23]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d00a      	beq.n	801c4c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c4b0:	7dfb      	ldrb	r3, [r7, #23]
 801c4b2:	2b04      	cmp	r3, #4
 801c4b4:	d12c      	bne.n	801c510 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c4b6:	7afb      	ldrb	r3, [r7, #11]
 801c4b8:	f003 0304 	and.w	r3, r3, #4
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d127      	bne.n	801c510 <follow_path+0xdc>
 801c4c0:	2305      	movs	r3, #5
 801c4c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c4c4:	e024      	b.n	801c510 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c4c6:	7afb      	ldrb	r3, [r7, #11]
 801c4c8:	f003 0304 	and.w	r3, r3, #4
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d121      	bne.n	801c514 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c4d0:	693b      	ldr	r3, [r7, #16]
 801c4d2:	799b      	ldrb	r3, [r3, #6]
 801c4d4:	f003 0310 	and.w	r3, r3, #16
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d102      	bne.n	801c4e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c4dc:	2305      	movs	r3, #5
 801c4de:	75fb      	strb	r3, [r7, #23]
 801c4e0:	e019      	b.n	801c516 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	695b      	ldr	r3, [r3, #20]
 801c4ec:	68fa      	ldr	r2, [r7, #12]
 801c4ee:	8992      	ldrh	r2, [r2, #12]
 801c4f0:	fbb3 f0f2 	udiv	r0, r3, r2
 801c4f4:	fb00 f202 	mul.w	r2, r0, r2
 801c4f8:	1a9b      	subs	r3, r3, r2
 801c4fa:	440b      	add	r3, r1
 801c4fc:	4619      	mov	r1, r3
 801c4fe:	68f8      	ldr	r0, [r7, #12]
 801c500:	f7ff f90d 	bl	801b71e <ld_clust>
 801c504:	4602      	mov	r2, r0
 801c506:	693b      	ldr	r3, [r7, #16]
 801c508:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c50a:	e7bb      	b.n	801c484 <follow_path+0x50>
			if (res != FR_OK) break;
 801c50c:	bf00      	nop
 801c50e:	e002      	b.n	801c516 <follow_path+0xe2>
				break;
 801c510:	bf00      	nop
 801c512:	e000      	b.n	801c516 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c514:	bf00      	nop
			}
		}
	}

	return res;
 801c516:	7dfb      	ldrb	r3, [r7, #23]
}
 801c518:	4618      	mov	r0, r3
 801c51a:	3718      	adds	r7, #24
 801c51c:	46bd      	mov	sp, r7
 801c51e:	bd80      	pop	{r7, pc}

0801c520 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c520:	b480      	push	{r7}
 801c522:	b087      	sub	sp, #28
 801c524:	af00      	add	r7, sp, #0
 801c526:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c528:	f04f 33ff 	mov.w	r3, #4294967295
 801c52c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d031      	beq.n	801c59a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	617b      	str	r3, [r7, #20]
 801c53c:	e002      	b.n	801c544 <get_ldnumber+0x24>
 801c53e:	697b      	ldr	r3, [r7, #20]
 801c540:	3301      	adds	r3, #1
 801c542:	617b      	str	r3, [r7, #20]
 801c544:	697b      	ldr	r3, [r7, #20]
 801c546:	781b      	ldrb	r3, [r3, #0]
 801c548:	2b1f      	cmp	r3, #31
 801c54a:	d903      	bls.n	801c554 <get_ldnumber+0x34>
 801c54c:	697b      	ldr	r3, [r7, #20]
 801c54e:	781b      	ldrb	r3, [r3, #0]
 801c550:	2b3a      	cmp	r3, #58	@ 0x3a
 801c552:	d1f4      	bne.n	801c53e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c554:	697b      	ldr	r3, [r7, #20]
 801c556:	781b      	ldrb	r3, [r3, #0]
 801c558:	2b3a      	cmp	r3, #58	@ 0x3a
 801c55a:	d11c      	bne.n	801c596 <get_ldnumber+0x76>
			tp = *path;
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	1c5a      	adds	r2, r3, #1
 801c566:	60fa      	str	r2, [r7, #12]
 801c568:	781b      	ldrb	r3, [r3, #0]
 801c56a:	3b30      	subs	r3, #48	@ 0x30
 801c56c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801c56e:	68bb      	ldr	r3, [r7, #8]
 801c570:	2b09      	cmp	r3, #9
 801c572:	d80e      	bhi.n	801c592 <get_ldnumber+0x72>
 801c574:	68fa      	ldr	r2, [r7, #12]
 801c576:	697b      	ldr	r3, [r7, #20]
 801c578:	429a      	cmp	r2, r3
 801c57a:	d10a      	bne.n	801c592 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c57c:	68bb      	ldr	r3, [r7, #8]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d107      	bne.n	801c592 <get_ldnumber+0x72>
					vol = (int)i;
 801c582:	68bb      	ldr	r3, [r7, #8]
 801c584:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801c586:	697b      	ldr	r3, [r7, #20]
 801c588:	3301      	adds	r3, #1
 801c58a:	617b      	str	r3, [r7, #20]
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	697a      	ldr	r2, [r7, #20]
 801c590:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801c592:	693b      	ldr	r3, [r7, #16]
 801c594:	e002      	b.n	801c59c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801c596:	2300      	movs	r3, #0
 801c598:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801c59a:	693b      	ldr	r3, [r7, #16]
}
 801c59c:	4618      	mov	r0, r3
 801c59e:	371c      	adds	r7, #28
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5a6:	4770      	bx	lr

0801c5a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b082      	sub	sp, #8
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	6078      	str	r0, [r7, #4]
 801c5b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	70da      	strb	r2, [r3, #3]
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	f04f 32ff 	mov.w	r2, #4294967295
 801c5be:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801c5c0:	6839      	ldr	r1, [r7, #0]
 801c5c2:	6878      	ldr	r0, [r7, #4]
 801c5c4:	f7fe fb26 	bl	801ac14 <move_window>
 801c5c8:	4603      	mov	r3, r0
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d001      	beq.n	801c5d2 <check_fs+0x2a>
 801c5ce:	2304      	movs	r3, #4
 801c5d0:	e038      	b.n	801c644 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	3338      	adds	r3, #56	@ 0x38
 801c5d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c5da:	4618      	mov	r0, r3
 801c5dc:	f7fe f86a 	bl	801a6b4 <ld_word>
 801c5e0:	4603      	mov	r3, r0
 801c5e2:	461a      	mov	r2, r3
 801c5e4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c5e8:	429a      	cmp	r2, r3
 801c5ea:	d001      	beq.n	801c5f0 <check_fs+0x48>
 801c5ec:	2303      	movs	r3, #3
 801c5ee:	e029      	b.n	801c644 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c5f6:	2be9      	cmp	r3, #233	@ 0xe9
 801c5f8:	d009      	beq.n	801c60e <check_fs+0x66>
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c600:	2beb      	cmp	r3, #235	@ 0xeb
 801c602:	d11e      	bne.n	801c642 <check_fs+0x9a>
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801c60a:	2b90      	cmp	r3, #144	@ 0x90
 801c60c:	d119      	bne.n	801c642 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	3338      	adds	r3, #56	@ 0x38
 801c612:	3336      	adds	r3, #54	@ 0x36
 801c614:	4618      	mov	r0, r3
 801c616:	f7fe f865 	bl	801a6e4 <ld_dword>
 801c61a:	4603      	mov	r3, r0
 801c61c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801c620:	4a0a      	ldr	r2, [pc, #40]	@ (801c64c <check_fs+0xa4>)
 801c622:	4293      	cmp	r3, r2
 801c624:	d101      	bne.n	801c62a <check_fs+0x82>
 801c626:	2300      	movs	r3, #0
 801c628:	e00c      	b.n	801c644 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	3338      	adds	r3, #56	@ 0x38
 801c62e:	3352      	adds	r3, #82	@ 0x52
 801c630:	4618      	mov	r0, r3
 801c632:	f7fe f857 	bl	801a6e4 <ld_dword>
 801c636:	4603      	mov	r3, r0
 801c638:	4a05      	ldr	r2, [pc, #20]	@ (801c650 <check_fs+0xa8>)
 801c63a:	4293      	cmp	r3, r2
 801c63c:	d101      	bne.n	801c642 <check_fs+0x9a>
 801c63e:	2300      	movs	r3, #0
 801c640:	e000      	b.n	801c644 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801c642:	2302      	movs	r3, #2
}
 801c644:	4618      	mov	r0, r3
 801c646:	3708      	adds	r7, #8
 801c648:	46bd      	mov	sp, r7
 801c64a:	bd80      	pop	{r7, pc}
 801c64c:	00544146 	.word	0x00544146
 801c650:	33544146 	.word	0x33544146

0801c654 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b096      	sub	sp, #88	@ 0x58
 801c658:	af00      	add	r7, sp, #0
 801c65a:	60f8      	str	r0, [r7, #12]
 801c65c:	60b9      	str	r1, [r7, #8]
 801c65e:	4613      	mov	r3, r2
 801c660:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801c662:	68bb      	ldr	r3, [r7, #8]
 801c664:	2200      	movs	r2, #0
 801c666:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801c668:	68f8      	ldr	r0, [r7, #12]
 801c66a:	f7ff ff59 	bl	801c520 <get_ldnumber>
 801c66e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c672:	2b00      	cmp	r3, #0
 801c674:	da01      	bge.n	801c67a <find_volume+0x26>
 801c676:	230b      	movs	r3, #11
 801c678:	e265      	b.n	801cb46 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c67a:	4a9f      	ldr	r2, [pc, #636]	@ (801c8f8 <find_volume+0x2a4>)
 801c67c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c682:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c686:	2b00      	cmp	r3, #0
 801c688:	d101      	bne.n	801c68e <find_volume+0x3a>
 801c68a:	230c      	movs	r3, #12
 801c68c:	e25b      	b.n	801cb46 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c68e:	68bb      	ldr	r3, [r7, #8]
 801c690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c692:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c694:	79fb      	ldrb	r3, [r7, #7]
 801c696:	f023 0301 	bic.w	r3, r3, #1
 801c69a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c69e:	781b      	ldrb	r3, [r3, #0]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d01a      	beq.n	801c6da <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6a6:	785b      	ldrb	r3, [r3, #1]
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f7fd ff63 	bl	801a574 <disk_status>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c6b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c6b8:	f003 0301 	and.w	r3, r3, #1
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d10c      	bne.n	801c6da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c6c0:	79fb      	ldrb	r3, [r7, #7]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d007      	beq.n	801c6d6 <find_volume+0x82>
 801c6c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c6ca:	f003 0304 	and.w	r3, r3, #4
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d001      	beq.n	801c6d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c6d2:	230a      	movs	r3, #10
 801c6d4:	e237      	b.n	801cb46 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801c6d6:	2300      	movs	r3, #0
 801c6d8:	e235      	b.n	801cb46 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6dc:	2200      	movs	r2, #0
 801c6de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c6e2:	b2da      	uxtb	r2, r3
 801c6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6ea:	785b      	ldrb	r3, [r3, #1]
 801c6ec:	4618      	mov	r0, r3
 801c6ee:	f7fd ff5b 	bl	801a5a8 <disk_initialize>
 801c6f2:	4603      	mov	r3, r0
 801c6f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c6f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c6fc:	f003 0301 	and.w	r3, r3, #1
 801c700:	2b00      	cmp	r3, #0
 801c702:	d001      	beq.n	801c708 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c704:	2303      	movs	r3, #3
 801c706:	e21e      	b.n	801cb46 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c708:	79fb      	ldrb	r3, [r7, #7]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d007      	beq.n	801c71e <find_volume+0xca>
 801c70e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c712:	f003 0304 	and.w	r3, r3, #4
 801c716:	2b00      	cmp	r3, #0
 801c718:	d001      	beq.n	801c71e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c71a:	230a      	movs	r3, #10
 801c71c:	e213      	b.n	801cb46 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801c71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c720:	7858      	ldrb	r0, [r3, #1]
 801c722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c724:	330c      	adds	r3, #12
 801c726:	461a      	mov	r2, r3
 801c728:	2102      	movs	r1, #2
 801c72a:	f7fd ffa5 	bl	801a678 <disk_ioctl>
 801c72e:	4603      	mov	r3, r0
 801c730:	2b00      	cmp	r3, #0
 801c732:	d001      	beq.n	801c738 <find_volume+0xe4>
 801c734:	2301      	movs	r3, #1
 801c736:	e206      	b.n	801cb46 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801c738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c73a:	899b      	ldrh	r3, [r3, #12]
 801c73c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c740:	d80d      	bhi.n	801c75e <find_volume+0x10a>
 801c742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c744:	899b      	ldrh	r3, [r3, #12]
 801c746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c74a:	d308      	bcc.n	801c75e <find_volume+0x10a>
 801c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c74e:	899b      	ldrh	r3, [r3, #12]
 801c750:	461a      	mov	r2, r3
 801c752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c754:	899b      	ldrh	r3, [r3, #12]
 801c756:	3b01      	subs	r3, #1
 801c758:	4013      	ands	r3, r2
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d001      	beq.n	801c762 <find_volume+0x10e>
 801c75e:	2301      	movs	r3, #1
 801c760:	e1f1      	b.n	801cb46 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801c762:	2300      	movs	r3, #0
 801c764:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801c766:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c768:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c76a:	f7ff ff1d 	bl	801c5a8 <check_fs>
 801c76e:	4603      	mov	r3, r0
 801c770:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801c774:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c778:	2b02      	cmp	r3, #2
 801c77a:	d149      	bne.n	801c810 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c77c:	2300      	movs	r3, #0
 801c77e:	643b      	str	r3, [r7, #64]	@ 0x40
 801c780:	e01e      	b.n	801c7c0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801c782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c784:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801c788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c78a:	011b      	lsls	r3, r3, #4
 801c78c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801c790:	4413      	add	r3, r2
 801c792:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801c794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c796:	3304      	adds	r3, #4
 801c798:	781b      	ldrb	r3, [r3, #0]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d006      	beq.n	801c7ac <find_volume+0x158>
 801c79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7a0:	3308      	adds	r3, #8
 801c7a2:	4618      	mov	r0, r3
 801c7a4:	f7fd ff9e 	bl	801a6e4 <ld_dword>
 801c7a8:	4602      	mov	r2, r0
 801c7aa:	e000      	b.n	801c7ae <find_volume+0x15a>
 801c7ac:	2200      	movs	r2, #0
 801c7ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7b0:	009b      	lsls	r3, r3, #2
 801c7b2:	3358      	adds	r3, #88	@ 0x58
 801c7b4:	443b      	add	r3, r7
 801c7b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c7ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7bc:	3301      	adds	r3, #1
 801c7be:	643b      	str	r3, [r7, #64]	@ 0x40
 801c7c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7c2:	2b03      	cmp	r3, #3
 801c7c4:	d9dd      	bls.n	801c782 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801c7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d002      	beq.n	801c7d6 <find_volume+0x182>
 801c7d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7d2:	3b01      	subs	r3, #1
 801c7d4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c7d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7d8:	009b      	lsls	r3, r3, #2
 801c7da:	3358      	adds	r3, #88	@ 0x58
 801c7dc:	443b      	add	r3, r7
 801c7de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c7e2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c7e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d005      	beq.n	801c7f6 <find_volume+0x1a2>
 801c7ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c7ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c7ee:	f7ff fedb 	bl	801c5a8 <check_fs>
 801c7f2:	4603      	mov	r3, r0
 801c7f4:	e000      	b.n	801c7f8 <find_volume+0x1a4>
 801c7f6:	2303      	movs	r3, #3
 801c7f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c800:	2b01      	cmp	r3, #1
 801c802:	d905      	bls.n	801c810 <find_volume+0x1bc>
 801c804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c806:	3301      	adds	r3, #1
 801c808:	643b      	str	r3, [r7, #64]	@ 0x40
 801c80a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c80c:	2b03      	cmp	r3, #3
 801c80e:	d9e2      	bls.n	801c7d6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c810:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c814:	2b04      	cmp	r3, #4
 801c816:	d101      	bne.n	801c81c <find_volume+0x1c8>
 801c818:	2301      	movs	r3, #1
 801c81a:	e194      	b.n	801cb46 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c81c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c820:	2b01      	cmp	r3, #1
 801c822:	d901      	bls.n	801c828 <find_volume+0x1d4>
 801c824:	230d      	movs	r3, #13
 801c826:	e18e      	b.n	801cb46 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c82a:	3338      	adds	r3, #56	@ 0x38
 801c82c:	330b      	adds	r3, #11
 801c82e:	4618      	mov	r0, r3
 801c830:	f7fd ff40 	bl	801a6b4 <ld_word>
 801c834:	4603      	mov	r3, r0
 801c836:	461a      	mov	r2, r3
 801c838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c83a:	899b      	ldrh	r3, [r3, #12]
 801c83c:	429a      	cmp	r2, r3
 801c83e:	d001      	beq.n	801c844 <find_volume+0x1f0>
 801c840:	230d      	movs	r3, #13
 801c842:	e180      	b.n	801cb46 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c846:	3338      	adds	r3, #56	@ 0x38
 801c848:	3316      	adds	r3, #22
 801c84a:	4618      	mov	r0, r3
 801c84c:	f7fd ff32 	bl	801a6b4 <ld_word>
 801c850:	4603      	mov	r3, r0
 801c852:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c856:	2b00      	cmp	r3, #0
 801c858:	d106      	bne.n	801c868 <find_volume+0x214>
 801c85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c85c:	3338      	adds	r3, #56	@ 0x38
 801c85e:	3324      	adds	r3, #36	@ 0x24
 801c860:	4618      	mov	r0, r3
 801c862:	f7fd ff3f 	bl	801a6e4 <ld_dword>
 801c866:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801c868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c86a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c86c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c870:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801c874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c876:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c87a:	789b      	ldrb	r3, [r3, #2]
 801c87c:	2b01      	cmp	r3, #1
 801c87e:	d005      	beq.n	801c88c <find_volume+0x238>
 801c880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c882:	789b      	ldrb	r3, [r3, #2]
 801c884:	2b02      	cmp	r3, #2
 801c886:	d001      	beq.n	801c88c <find_volume+0x238>
 801c888:	230d      	movs	r3, #13
 801c88a:	e15c      	b.n	801cb46 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c88e:	789b      	ldrb	r3, [r3, #2]
 801c890:	461a      	mov	r2, r3
 801c892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c894:	fb02 f303 	mul.w	r3, r2, r3
 801c898:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c89c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801c8a0:	461a      	mov	r2, r3
 801c8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8a8:	895b      	ldrh	r3, [r3, #10]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d008      	beq.n	801c8c0 <find_volume+0x26c>
 801c8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8b0:	895b      	ldrh	r3, [r3, #10]
 801c8b2:	461a      	mov	r2, r3
 801c8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8b6:	895b      	ldrh	r3, [r3, #10]
 801c8b8:	3b01      	subs	r3, #1
 801c8ba:	4013      	ands	r3, r2
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d001      	beq.n	801c8c4 <find_volume+0x270>
 801c8c0:	230d      	movs	r3, #13
 801c8c2:	e140      	b.n	801cb46 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8c6:	3338      	adds	r3, #56	@ 0x38
 801c8c8:	3311      	adds	r3, #17
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	f7fd fef2 	bl	801a6b4 <ld_word>
 801c8d0:	4603      	mov	r3, r0
 801c8d2:	461a      	mov	r2, r3
 801c8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8da:	891b      	ldrh	r3, [r3, #8]
 801c8dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c8de:	8992      	ldrh	r2, [r2, #12]
 801c8e0:	0952      	lsrs	r2, r2, #5
 801c8e2:	b292      	uxth	r2, r2
 801c8e4:	fbb3 f1f2 	udiv	r1, r3, r2
 801c8e8:	fb01 f202 	mul.w	r2, r1, r2
 801c8ec:	1a9b      	subs	r3, r3, r2
 801c8ee:	b29b      	uxth	r3, r3
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d003      	beq.n	801c8fc <find_volume+0x2a8>
 801c8f4:	230d      	movs	r3, #13
 801c8f6:	e126      	b.n	801cb46 <find_volume+0x4f2>
 801c8f8:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8fe:	3338      	adds	r3, #56	@ 0x38
 801c900:	3313      	adds	r3, #19
 801c902:	4618      	mov	r0, r3
 801c904:	f7fd fed6 	bl	801a6b4 <ld_word>
 801c908:	4603      	mov	r3, r0
 801c90a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c90c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d106      	bne.n	801c920 <find_volume+0x2cc>
 801c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c914:	3338      	adds	r3, #56	@ 0x38
 801c916:	3320      	adds	r3, #32
 801c918:	4618      	mov	r0, r3
 801c91a:	f7fd fee3 	bl	801a6e4 <ld_dword>
 801c91e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c922:	3338      	adds	r3, #56	@ 0x38
 801c924:	330e      	adds	r3, #14
 801c926:	4618      	mov	r0, r3
 801c928:	f7fd fec4 	bl	801a6b4 <ld_word>
 801c92c:	4603      	mov	r3, r0
 801c92e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c930:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c932:	2b00      	cmp	r3, #0
 801c934:	d101      	bne.n	801c93a <find_volume+0x2e6>
 801c936:	230d      	movs	r3, #13
 801c938:	e105      	b.n	801cb46 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c93a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c93c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c93e:	4413      	add	r3, r2
 801c940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c942:	8911      	ldrh	r1, [r2, #8]
 801c944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c946:	8992      	ldrh	r2, [r2, #12]
 801c948:	0952      	lsrs	r2, r2, #5
 801c94a:	b292      	uxth	r2, r2
 801c94c:	fbb1 f2f2 	udiv	r2, r1, r2
 801c950:	b292      	uxth	r2, r2
 801c952:	4413      	add	r3, r2
 801c954:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c95a:	429a      	cmp	r2, r3
 801c95c:	d201      	bcs.n	801c962 <find_volume+0x30e>
 801c95e:	230d      	movs	r3, #13
 801c960:	e0f1      	b.n	801cb46 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c966:	1ad3      	subs	r3, r2, r3
 801c968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c96a:	8952      	ldrh	r2, [r2, #10]
 801c96c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c970:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c974:	2b00      	cmp	r3, #0
 801c976:	d101      	bne.n	801c97c <find_volume+0x328>
 801c978:	230d      	movs	r3, #13
 801c97a:	e0e4      	b.n	801cb46 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801c97c:	2303      	movs	r3, #3
 801c97e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c984:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801c988:	4293      	cmp	r3, r2
 801c98a:	d802      	bhi.n	801c992 <find_volume+0x33e>
 801c98c:	2302      	movs	r3, #2
 801c98e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c994:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801c998:	4293      	cmp	r3, r2
 801c99a:	d802      	bhi.n	801c9a2 <find_volume+0x34e>
 801c99c:	2301      	movs	r3, #1
 801c99e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9a4:	1c9a      	adds	r2, r3, #2
 801c9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9a8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801c9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9ae:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c9b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c9b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c9b4:	441a      	add	r2, r3
 801c9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9b8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801c9ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9be:	441a      	add	r2, r3
 801c9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9c2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801c9c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c9c8:	2b03      	cmp	r3, #3
 801c9ca:	d11e      	bne.n	801ca0a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9ce:	3338      	adds	r3, #56	@ 0x38
 801c9d0:	332a      	adds	r3, #42	@ 0x2a
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7fd fe6e 	bl	801a6b4 <ld_word>
 801c9d8:	4603      	mov	r3, r0
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d001      	beq.n	801c9e2 <find_volume+0x38e>
 801c9de:	230d      	movs	r3, #13
 801c9e0:	e0b1      	b.n	801cb46 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9e4:	891b      	ldrh	r3, [r3, #8]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d001      	beq.n	801c9ee <find_volume+0x39a>
 801c9ea:	230d      	movs	r3, #13
 801c9ec:	e0ab      	b.n	801cb46 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9f0:	3338      	adds	r3, #56	@ 0x38
 801c9f2:	332c      	adds	r3, #44	@ 0x2c
 801c9f4:	4618      	mov	r0, r3
 801c9f6:	f7fd fe75 	bl	801a6e4 <ld_dword>
 801c9fa:	4602      	mov	r2, r0
 801c9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9fe:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801ca00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca02:	69db      	ldr	r3, [r3, #28]
 801ca04:	009b      	lsls	r3, r3, #2
 801ca06:	647b      	str	r3, [r7, #68]	@ 0x44
 801ca08:	e01f      	b.n	801ca4a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801ca0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca0c:	891b      	ldrh	r3, [r3, #8]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d101      	bne.n	801ca16 <find_volume+0x3c2>
 801ca12:	230d      	movs	r3, #13
 801ca14:	e097      	b.n	801cb46 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801ca16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ca1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ca1c:	441a      	add	r2, r3
 801ca1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca20:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801ca22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ca26:	2b02      	cmp	r3, #2
 801ca28:	d103      	bne.n	801ca32 <find_volume+0x3de>
 801ca2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca2c:	69db      	ldr	r3, [r3, #28]
 801ca2e:	005b      	lsls	r3, r3, #1
 801ca30:	e00a      	b.n	801ca48 <find_volume+0x3f4>
 801ca32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca34:	69da      	ldr	r2, [r3, #28]
 801ca36:	4613      	mov	r3, r2
 801ca38:	005b      	lsls	r3, r3, #1
 801ca3a:	4413      	add	r3, r2
 801ca3c:	085a      	lsrs	r2, r3, #1
 801ca3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca40:	69db      	ldr	r3, [r3, #28]
 801ca42:	f003 0301 	and.w	r3, r3, #1
 801ca46:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801ca48:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801ca4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca4c:	6a1a      	ldr	r2, [r3, #32]
 801ca4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca50:	899b      	ldrh	r3, [r3, #12]
 801ca52:	4619      	mov	r1, r3
 801ca54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ca56:	440b      	add	r3, r1
 801ca58:	3b01      	subs	r3, #1
 801ca5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ca5c:	8989      	ldrh	r1, [r1, #12]
 801ca5e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ca62:	429a      	cmp	r2, r3
 801ca64:	d201      	bcs.n	801ca6a <find_volume+0x416>
 801ca66:	230d      	movs	r3, #13
 801ca68:	e06d      	b.n	801cb46 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801ca6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca6c:	f04f 32ff 	mov.w	r2, #4294967295
 801ca70:	619a      	str	r2, [r3, #24]
 801ca72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca74:	699a      	ldr	r2, [r3, #24]
 801ca76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca78:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801ca7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca7c:	2280      	movs	r2, #128	@ 0x80
 801ca7e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801ca80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ca84:	2b03      	cmp	r3, #3
 801ca86:	d149      	bne.n	801cb1c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801ca88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca8a:	3338      	adds	r3, #56	@ 0x38
 801ca8c:	3330      	adds	r3, #48	@ 0x30
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f7fd fe10 	bl	801a6b4 <ld_word>
 801ca94:	4603      	mov	r3, r0
 801ca96:	2b01      	cmp	r3, #1
 801ca98:	d140      	bne.n	801cb1c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801ca9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ca9c:	3301      	adds	r3, #1
 801ca9e:	4619      	mov	r1, r3
 801caa0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801caa2:	f7fe f8b7 	bl	801ac14 <move_window>
 801caa6:	4603      	mov	r3, r0
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d137      	bne.n	801cb1c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801caac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caae:	2200      	movs	r2, #0
 801cab0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801cab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cab4:	3338      	adds	r3, #56	@ 0x38
 801cab6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801caba:	4618      	mov	r0, r3
 801cabc:	f7fd fdfa 	bl	801a6b4 <ld_word>
 801cac0:	4603      	mov	r3, r0
 801cac2:	461a      	mov	r2, r3
 801cac4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cac8:	429a      	cmp	r2, r3
 801caca:	d127      	bne.n	801cb1c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801cacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cace:	3338      	adds	r3, #56	@ 0x38
 801cad0:	4618      	mov	r0, r3
 801cad2:	f7fd fe07 	bl	801a6e4 <ld_dword>
 801cad6:	4603      	mov	r3, r0
 801cad8:	4a1d      	ldr	r2, [pc, #116]	@ (801cb50 <find_volume+0x4fc>)
 801cada:	4293      	cmp	r3, r2
 801cadc:	d11e      	bne.n	801cb1c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801cade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cae0:	3338      	adds	r3, #56	@ 0x38
 801cae2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801cae6:	4618      	mov	r0, r3
 801cae8:	f7fd fdfc 	bl	801a6e4 <ld_dword>
 801caec:	4603      	mov	r3, r0
 801caee:	4a19      	ldr	r2, [pc, #100]	@ (801cb54 <find_volume+0x500>)
 801caf0:	4293      	cmp	r3, r2
 801caf2:	d113      	bne.n	801cb1c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801caf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caf6:	3338      	adds	r3, #56	@ 0x38
 801caf8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801cafc:	4618      	mov	r0, r3
 801cafe:	f7fd fdf1 	bl	801a6e4 <ld_dword>
 801cb02:	4602      	mov	r2, r0
 801cb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb06:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801cb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb0a:	3338      	adds	r3, #56	@ 0x38
 801cb0c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801cb10:	4618      	mov	r0, r3
 801cb12:	f7fd fde7 	bl	801a6e4 <ld_dword>
 801cb16:	4602      	mov	r2, r0
 801cb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb1a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801cb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb1e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801cb22:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801cb24:	4b0c      	ldr	r3, [pc, #48]	@ (801cb58 <find_volume+0x504>)
 801cb26:	881b      	ldrh	r3, [r3, #0]
 801cb28:	3301      	adds	r3, #1
 801cb2a:	b29a      	uxth	r2, r3
 801cb2c:	4b0a      	ldr	r3, [pc, #40]	@ (801cb58 <find_volume+0x504>)
 801cb2e:	801a      	strh	r2, [r3, #0]
 801cb30:	4b09      	ldr	r3, [pc, #36]	@ (801cb58 <find_volume+0x504>)
 801cb32:	881a      	ldrh	r2, [r3, #0]
 801cb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb36:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb3a:	4a08      	ldr	r2, [pc, #32]	@ (801cb5c <find_volume+0x508>)
 801cb3c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801cb3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cb40:	f7fe f800 	bl	801ab44 <clear_lock>
#endif
	return FR_OK;
 801cb44:	2300      	movs	r3, #0
}
 801cb46:	4618      	mov	r0, r3
 801cb48:	3758      	adds	r7, #88	@ 0x58
 801cb4a:	46bd      	mov	sp, r7
 801cb4c:	bd80      	pop	{r7, pc}
 801cb4e:	bf00      	nop
 801cb50:	41615252 	.word	0x41615252
 801cb54:	61417272 	.word	0x61417272
 801cb58:	24000554 	.word	0x24000554
 801cb5c:	24000568 	.word	0x24000568

0801cb60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b084      	sub	sp, #16
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	6078      	str	r0, [r7, #4]
 801cb68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801cb6a:	2309      	movs	r3, #9
 801cb6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d01c      	beq.n	801cbae <validate+0x4e>
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d018      	beq.n	801cbae <validate+0x4e>
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	781b      	ldrb	r3, [r3, #0]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d013      	beq.n	801cbae <validate+0x4e>
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	889a      	ldrh	r2, [r3, #4]
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	88db      	ldrh	r3, [r3, #6]
 801cb90:	429a      	cmp	r2, r3
 801cb92:	d10c      	bne.n	801cbae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	785b      	ldrb	r3, [r3, #1]
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	f7fd fcea 	bl	801a574 <disk_status>
 801cba0:	4603      	mov	r3, r0
 801cba2:	f003 0301 	and.w	r3, r3, #1
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d101      	bne.n	801cbae <validate+0x4e>
			res = FR_OK;
 801cbaa:	2300      	movs	r3, #0
 801cbac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801cbae:	7bfb      	ldrb	r3, [r7, #15]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d102      	bne.n	801cbba <validate+0x5a>
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	681b      	ldr	r3, [r3, #0]
 801cbb8:	e000      	b.n	801cbbc <validate+0x5c>
 801cbba:	2300      	movs	r3, #0
 801cbbc:	683a      	ldr	r2, [r7, #0]
 801cbbe:	6013      	str	r3, [r2, #0]
	return res;
 801cbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	3710      	adds	r7, #16
 801cbc6:	46bd      	mov	sp, r7
 801cbc8:	bd80      	pop	{r7, pc}
	...

0801cbcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b088      	sub	sp, #32
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	60f8      	str	r0, [r7, #12]
 801cbd4:	60b9      	str	r1, [r7, #8]
 801cbd6:	4613      	mov	r3, r2
 801cbd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801cbda:	68bb      	ldr	r3, [r7, #8]
 801cbdc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801cbde:	f107 0310 	add.w	r3, r7, #16
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	f7ff fc9c 	bl	801c520 <get_ldnumber>
 801cbe8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801cbea:	69fb      	ldr	r3, [r7, #28]
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	da01      	bge.n	801cbf4 <f_mount+0x28>
 801cbf0:	230b      	movs	r3, #11
 801cbf2:	e02b      	b.n	801cc4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801cbf4:	4a17      	ldr	r2, [pc, #92]	@ (801cc54 <f_mount+0x88>)
 801cbf6:	69fb      	ldr	r3, [r7, #28]
 801cbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cbfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801cbfe:	69bb      	ldr	r3, [r7, #24]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d005      	beq.n	801cc10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801cc04:	69b8      	ldr	r0, [r7, #24]
 801cc06:	f7fd ff9d 	bl	801ab44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801cc0a:	69bb      	ldr	r3, [r7, #24]
 801cc0c:	2200      	movs	r2, #0
 801cc0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d002      	beq.n	801cc1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801cc16:	68fb      	ldr	r3, [r7, #12]
 801cc18:	2200      	movs	r2, #0
 801cc1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801cc1c:	68fa      	ldr	r2, [r7, #12]
 801cc1e:	490d      	ldr	r1, [pc, #52]	@ (801cc54 <f_mount+0x88>)
 801cc20:	69fb      	ldr	r3, [r7, #28]
 801cc22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d002      	beq.n	801cc32 <f_mount+0x66>
 801cc2c:	79fb      	ldrb	r3, [r7, #7]
 801cc2e:	2b01      	cmp	r3, #1
 801cc30:	d001      	beq.n	801cc36 <f_mount+0x6a>
 801cc32:	2300      	movs	r3, #0
 801cc34:	e00a      	b.n	801cc4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801cc36:	f107 010c 	add.w	r1, r7, #12
 801cc3a:	f107 0308 	add.w	r3, r7, #8
 801cc3e:	2200      	movs	r2, #0
 801cc40:	4618      	mov	r0, r3
 801cc42:	f7ff fd07 	bl	801c654 <find_volume>
 801cc46:	4603      	mov	r3, r0
 801cc48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801cc4a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	3720      	adds	r7, #32
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}
 801cc54:	24000550 	.word	0x24000550

0801cc58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b09a      	sub	sp, #104	@ 0x68
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	60f8      	str	r0, [r7, #12]
 801cc60:	60b9      	str	r1, [r7, #8]
 801cc62:	4613      	mov	r3, r2
 801cc64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d101      	bne.n	801cc70 <f_open+0x18>
 801cc6c:	2309      	movs	r3, #9
 801cc6e:	e1b7      	b.n	801cfe0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801cc70:	79fb      	ldrb	r3, [r7, #7]
 801cc72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cc76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801cc78:	79fa      	ldrb	r2, [r7, #7]
 801cc7a:	f107 0114 	add.w	r1, r7, #20
 801cc7e:	f107 0308 	add.w	r3, r7, #8
 801cc82:	4618      	mov	r0, r3
 801cc84:	f7ff fce6 	bl	801c654 <find_volume>
 801cc88:	4603      	mov	r3, r0
 801cc8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801cc8e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	f040 819b 	bne.w	801cfce <f_open+0x376>
		dj.obj.fs = fs;
 801cc98:	697b      	ldr	r3, [r7, #20]
 801cc9a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801cc9c:	68ba      	ldr	r2, [r7, #8]
 801cc9e:	f107 0318 	add.w	r3, r7, #24
 801cca2:	4611      	mov	r1, r2
 801cca4:	4618      	mov	r0, r3
 801cca6:	f7ff fbc5 	bl	801c434 <follow_path>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801ccb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d118      	bne.n	801ccea <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801ccb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ccbc:	b25b      	sxtb	r3, r3
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	da03      	bge.n	801ccca <f_open+0x72>
				res = FR_INVALID_NAME;
 801ccc2:	2306      	movs	r3, #6
 801ccc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801ccc8:	e00f      	b.n	801ccea <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ccca:	79fb      	ldrb	r3, [r7, #7]
 801cccc:	2b01      	cmp	r3, #1
 801ccce:	bf8c      	ite	hi
 801ccd0:	2301      	movhi	r3, #1
 801ccd2:	2300      	movls	r3, #0
 801ccd4:	b2db      	uxtb	r3, r3
 801ccd6:	461a      	mov	r2, r3
 801ccd8:	f107 0318 	add.w	r3, r7, #24
 801ccdc:	4611      	mov	r1, r2
 801ccde:	4618      	mov	r0, r3
 801cce0:	f7fd fde8 	bl	801a8b4 <chk_lock>
 801cce4:	4603      	mov	r3, r0
 801cce6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801ccea:	79fb      	ldrb	r3, [r7, #7]
 801ccec:	f003 031c 	and.w	r3, r3, #28
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d07f      	beq.n	801cdf4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801ccf4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d017      	beq.n	801cd2c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801ccfc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd00:	2b04      	cmp	r3, #4
 801cd02:	d10e      	bne.n	801cd22 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801cd04:	f7fd fe32 	bl	801a96c <enq_lock>
 801cd08:	4603      	mov	r3, r0
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d006      	beq.n	801cd1c <f_open+0xc4>
 801cd0e:	f107 0318 	add.w	r3, r7, #24
 801cd12:	4618      	mov	r0, r3
 801cd14:	f7ff f894 	bl	801be40 <dir_register>
 801cd18:	4603      	mov	r3, r0
 801cd1a:	e000      	b.n	801cd1e <f_open+0xc6>
 801cd1c:	2312      	movs	r3, #18
 801cd1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801cd22:	79fb      	ldrb	r3, [r7, #7]
 801cd24:	f043 0308 	orr.w	r3, r3, #8
 801cd28:	71fb      	strb	r3, [r7, #7]
 801cd2a:	e010      	b.n	801cd4e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801cd2c:	7fbb      	ldrb	r3, [r7, #30]
 801cd2e:	f003 0311 	and.w	r3, r3, #17
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d003      	beq.n	801cd3e <f_open+0xe6>
					res = FR_DENIED;
 801cd36:	2307      	movs	r3, #7
 801cd38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cd3c:	e007      	b.n	801cd4e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801cd3e:	79fb      	ldrb	r3, [r7, #7]
 801cd40:	f003 0304 	and.w	r3, r3, #4
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d002      	beq.n	801cd4e <f_open+0xf6>
 801cd48:	2308      	movs	r3, #8
 801cd4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801cd4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d168      	bne.n	801ce28 <f_open+0x1d0>
 801cd56:	79fb      	ldrb	r3, [r7, #7]
 801cd58:	f003 0308 	and.w	r3, r3, #8
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d063      	beq.n	801ce28 <f_open+0x1d0>
				dw = GET_FATTIME();
 801cd60:	f7fd fbaa 	bl	801a4b8 <get_fattime>
 801cd64:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801cd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd68:	330e      	adds	r3, #14
 801cd6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	f7fd fcf7 	bl	801a760 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801cd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd74:	3316      	adds	r3, #22
 801cd76:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cd78:	4618      	mov	r0, r3
 801cd7a:	f7fd fcf1 	bl	801a760 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801cd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd80:	330b      	adds	r3, #11
 801cd82:	2220      	movs	r2, #32
 801cd84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801cd86:	697b      	ldr	r3, [r7, #20]
 801cd88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cd8a:	4611      	mov	r1, r2
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	f7fe fcc6 	bl	801b71e <ld_clust>
 801cd92:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801cd94:	697b      	ldr	r3, [r7, #20]
 801cd96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cd98:	2200      	movs	r2, #0
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	f7fe fcde 	bl	801b75c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801cda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cda2:	331c      	adds	r3, #28
 801cda4:	2100      	movs	r1, #0
 801cda6:	4618      	mov	r0, r3
 801cda8:	f7fd fcda 	bl	801a760 <st_dword>
					fs->wflag = 1;
 801cdac:	697b      	ldr	r3, [r7, #20]
 801cdae:	2201      	movs	r2, #1
 801cdb0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801cdb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d037      	beq.n	801ce28 <f_open+0x1d0>
						dw = fs->winsect;
 801cdb8:	697b      	ldr	r3, [r7, #20]
 801cdba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cdbc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801cdbe:	f107 0318 	add.w	r3, r7, #24
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801cdc6:	4618      	mov	r0, r3
 801cdc8:	f7fe f9ce 	bl	801b168 <remove_chain>
 801cdcc:	4603      	mov	r3, r0
 801cdce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801cdd2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d126      	bne.n	801ce28 <f_open+0x1d0>
							res = move_window(fs, dw);
 801cdda:	697b      	ldr	r3, [r7, #20]
 801cddc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cdde:	4618      	mov	r0, r3
 801cde0:	f7fd ff18 	bl	801ac14 <move_window>
 801cde4:	4603      	mov	r3, r0
 801cde6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cdee:	3a01      	subs	r2, #1
 801cdf0:	615a      	str	r2, [r3, #20]
 801cdf2:	e019      	b.n	801ce28 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801cdf4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d115      	bne.n	801ce28 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801cdfc:	7fbb      	ldrb	r3, [r7, #30]
 801cdfe:	f003 0310 	and.w	r3, r3, #16
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d003      	beq.n	801ce0e <f_open+0x1b6>
					res = FR_NO_FILE;
 801ce06:	2304      	movs	r3, #4
 801ce08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801ce0c:	e00c      	b.n	801ce28 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801ce0e:	79fb      	ldrb	r3, [r7, #7]
 801ce10:	f003 0302 	and.w	r3, r3, #2
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d007      	beq.n	801ce28 <f_open+0x1d0>
 801ce18:	7fbb      	ldrb	r3, [r7, #30]
 801ce1a:	f003 0301 	and.w	r3, r3, #1
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d002      	beq.n	801ce28 <f_open+0x1d0>
						res = FR_DENIED;
 801ce22:	2307      	movs	r3, #7
 801ce24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801ce28:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d126      	bne.n	801ce7e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801ce30:	79fb      	ldrb	r3, [r7, #7]
 801ce32:	f003 0308 	and.w	r3, r3, #8
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d003      	beq.n	801ce42 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801ce3a:	79fb      	ldrb	r3, [r7, #7]
 801ce3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801ce42:	697b      	ldr	r3, [r7, #20]
 801ce44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801ce4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ce50:	79fb      	ldrb	r3, [r7, #7]
 801ce52:	2b01      	cmp	r3, #1
 801ce54:	bf8c      	ite	hi
 801ce56:	2301      	movhi	r3, #1
 801ce58:	2300      	movls	r3, #0
 801ce5a:	b2db      	uxtb	r3, r3
 801ce5c:	461a      	mov	r2, r3
 801ce5e:	f107 0318 	add.w	r3, r7, #24
 801ce62:	4611      	mov	r1, r2
 801ce64:	4618      	mov	r0, r3
 801ce66:	f7fd fda3 	bl	801a9b0 <inc_lock>
 801ce6a:	4602      	mov	r2, r0
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	691b      	ldr	r3, [r3, #16]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d102      	bne.n	801ce7e <f_open+0x226>
 801ce78:	2302      	movs	r3, #2
 801ce7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801ce7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	f040 80a3 	bne.w	801cfce <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801ce88:	697b      	ldr	r3, [r7, #20]
 801ce8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce8c:	4611      	mov	r1, r2
 801ce8e:	4618      	mov	r0, r3
 801ce90:	f7fe fc45 	bl	801b71e <ld_clust>
 801ce94:	4602      	mov	r2, r0
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801ce9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce9c:	331c      	adds	r3, #28
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f7fd fc20 	bl	801a6e4 <ld_dword>
 801cea4:	4602      	mov	r2, r0
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	2200      	movs	r2, #0
 801ceae:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801ceb0:	697a      	ldr	r2, [r7, #20]
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801ceb6:	697b      	ldr	r3, [r7, #20]
 801ceb8:	88da      	ldrh	r2, [r3, #6]
 801ceba:	68fb      	ldr	r3, [r7, #12]
 801cebc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	79fa      	ldrb	r2, [r7, #7]
 801cec2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	2200      	movs	r2, #0
 801cec8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	2200      	movs	r2, #0
 801cece:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	2200      	movs	r2, #0
 801ced4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	3330      	adds	r3, #48	@ 0x30
 801ceda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801cede:	2100      	movs	r1, #0
 801cee0:	4618      	mov	r0, r3
 801cee2:	f7fd fc8a 	bl	801a7fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801cee6:	79fb      	ldrb	r3, [r7, #7]
 801cee8:	f003 0320 	and.w	r3, r3, #32
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d06e      	beq.n	801cfce <f_open+0x376>
 801cef0:	68fb      	ldr	r3, [r7, #12]
 801cef2:	68db      	ldr	r3, [r3, #12]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d06a      	beq.n	801cfce <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	68da      	ldr	r2, [r3, #12]
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801cf00:	697b      	ldr	r3, [r7, #20]
 801cf02:	895b      	ldrh	r3, [r3, #10]
 801cf04:	461a      	mov	r2, r3
 801cf06:	697b      	ldr	r3, [r7, #20]
 801cf08:	899b      	ldrh	r3, [r3, #12]
 801cf0a:	fb02 f303 	mul.w	r3, r2, r3
 801cf0e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	689b      	ldr	r3, [r3, #8]
 801cf14:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	68db      	ldr	r3, [r3, #12]
 801cf1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cf1c:	e016      	b.n	801cf4c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801cf1e:	68fb      	ldr	r3, [r7, #12]
 801cf20:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801cf22:	4618      	mov	r0, r3
 801cf24:	f7fd ff33 	bl	801ad8e <get_fat>
 801cf28:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801cf2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cf2c:	2b01      	cmp	r3, #1
 801cf2e:	d802      	bhi.n	801cf36 <f_open+0x2de>
 801cf30:	2302      	movs	r3, #2
 801cf32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801cf36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cf38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf3c:	d102      	bne.n	801cf44 <f_open+0x2ec>
 801cf3e:	2301      	movs	r3, #1
 801cf40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cf44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cf46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cf48:	1ad3      	subs	r3, r2, r3
 801cf4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cf4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d103      	bne.n	801cf5c <f_open+0x304>
 801cf54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cf56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cf58:	429a      	cmp	r2, r3
 801cf5a:	d8e0      	bhi.n	801cf1e <f_open+0x2c6>
				}
				fp->clust = clst;
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801cf60:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801cf62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d131      	bne.n	801cfce <f_open+0x376>
 801cf6a:	697b      	ldr	r3, [r7, #20]
 801cf6c:	899b      	ldrh	r3, [r3, #12]
 801cf6e:	461a      	mov	r2, r3
 801cf70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cf72:	fbb3 f1f2 	udiv	r1, r3, r2
 801cf76:	fb01 f202 	mul.w	r2, r1, r2
 801cf7a:	1a9b      	subs	r3, r3, r2
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d026      	beq.n	801cfce <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801cf80:	697b      	ldr	r3, [r7, #20]
 801cf82:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801cf84:	4618      	mov	r0, r3
 801cf86:	f7fd fee3 	bl	801ad50 <clust2sect>
 801cf8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801cf8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d103      	bne.n	801cf9a <f_open+0x342>
						res = FR_INT_ERR;
 801cf92:	2302      	movs	r3, #2
 801cf94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cf98:	e019      	b.n	801cfce <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801cf9a:	697b      	ldr	r3, [r7, #20]
 801cf9c:	899b      	ldrh	r3, [r3, #12]
 801cf9e:	461a      	mov	r2, r3
 801cfa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cfa2:	fbb3 f2f2 	udiv	r2, r3, r2
 801cfa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cfa8:	441a      	add	r2, r3
 801cfaa:	68fb      	ldr	r3, [r7, #12]
 801cfac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801cfae:	697b      	ldr	r3, [r7, #20]
 801cfb0:	7858      	ldrb	r0, [r3, #1]
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cfb8:	68fb      	ldr	r3, [r7, #12]
 801cfba:	6a1a      	ldr	r2, [r3, #32]
 801cfbc:	2301      	movs	r3, #1
 801cfbe:	f7fd fb1b 	bl	801a5f8 <disk_read>
 801cfc2:	4603      	mov	r3, r0
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d002      	beq.n	801cfce <f_open+0x376>
 801cfc8:	2301      	movs	r3, #1
 801cfca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801cfce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d002      	beq.n	801cfdc <f_open+0x384>
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	2200      	movs	r2, #0
 801cfda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801cfdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	3768      	adds	r7, #104	@ 0x68
 801cfe4:	46bd      	mov	sp, r7
 801cfe6:	bd80      	pop	{r7, pc}

0801cfe8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b08c      	sub	sp, #48	@ 0x30
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	60f8      	str	r0, [r7, #12]
 801cff0:	60b9      	str	r1, [r7, #8]
 801cff2:	607a      	str	r2, [r7, #4]
 801cff4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801cff6:	68bb      	ldr	r3, [r7, #8]
 801cff8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801cffa:	683b      	ldr	r3, [r7, #0]
 801cffc:	2200      	movs	r2, #0
 801cffe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	f107 0210 	add.w	r2, r7, #16
 801d006:	4611      	mov	r1, r2
 801d008:	4618      	mov	r0, r3
 801d00a:	f7ff fda9 	bl	801cb60 <validate>
 801d00e:	4603      	mov	r3, r0
 801d010:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d014:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d107      	bne.n	801d02c <f_write+0x44>
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	7d5b      	ldrb	r3, [r3, #21]
 801d020:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d024:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d002      	beq.n	801d032 <f_write+0x4a>
 801d02c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d030:	e16a      	b.n	801d308 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	7d1b      	ldrb	r3, [r3, #20]
 801d036:	f003 0302 	and.w	r3, r3, #2
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d101      	bne.n	801d042 <f_write+0x5a>
 801d03e:	2307      	movs	r3, #7
 801d040:	e162      	b.n	801d308 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	699a      	ldr	r2, [r3, #24]
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	441a      	add	r2, r3
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	699b      	ldr	r3, [r3, #24]
 801d04e:	429a      	cmp	r2, r3
 801d050:	f080 814c 	bcs.w	801d2ec <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d054:	68fb      	ldr	r3, [r7, #12]
 801d056:	699b      	ldr	r3, [r3, #24]
 801d058:	43db      	mvns	r3, r3
 801d05a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d05c:	e146      	b.n	801d2ec <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	699b      	ldr	r3, [r3, #24]
 801d062:	693a      	ldr	r2, [r7, #16]
 801d064:	8992      	ldrh	r2, [r2, #12]
 801d066:	fbb3 f1f2 	udiv	r1, r3, r2
 801d06a:	fb01 f202 	mul.w	r2, r1, r2
 801d06e:	1a9b      	subs	r3, r3, r2
 801d070:	2b00      	cmp	r3, #0
 801d072:	f040 80f1 	bne.w	801d258 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	699b      	ldr	r3, [r3, #24]
 801d07a:	693a      	ldr	r2, [r7, #16]
 801d07c:	8992      	ldrh	r2, [r2, #12]
 801d07e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d082:	693a      	ldr	r2, [r7, #16]
 801d084:	8952      	ldrh	r2, [r2, #10]
 801d086:	3a01      	subs	r2, #1
 801d088:	4013      	ands	r3, r2
 801d08a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d08c:	69bb      	ldr	r3, [r7, #24]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d143      	bne.n	801d11a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	699b      	ldr	r3, [r3, #24]
 801d096:	2b00      	cmp	r3, #0
 801d098:	d10c      	bne.n	801d0b4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	689b      	ldr	r3, [r3, #8]
 801d09e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d11a      	bne.n	801d0dc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	2100      	movs	r1, #0
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	f7fe f8c1 	bl	801b232 <create_chain>
 801d0b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d0b2:	e013      	b.n	801d0dc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d007      	beq.n	801d0cc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d0bc:	68fb      	ldr	r3, [r7, #12]
 801d0be:	699b      	ldr	r3, [r3, #24]
 801d0c0:	4619      	mov	r1, r3
 801d0c2:	68f8      	ldr	r0, [r7, #12]
 801d0c4:	f7fe f94d 	bl	801b362 <clmt_clust>
 801d0c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d0ca:	e007      	b.n	801d0dc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d0cc:	68fa      	ldr	r2, [r7, #12]
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	69db      	ldr	r3, [r3, #28]
 801d0d2:	4619      	mov	r1, r3
 801d0d4:	4610      	mov	r0, r2
 801d0d6:	f7fe f8ac 	bl	801b232 <create_chain>
 801d0da:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	f000 8109 	beq.w	801d2f6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0e6:	2b01      	cmp	r3, #1
 801d0e8:	d104      	bne.n	801d0f4 <f_write+0x10c>
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	2202      	movs	r2, #2
 801d0ee:	755a      	strb	r2, [r3, #21]
 801d0f0:	2302      	movs	r3, #2
 801d0f2:	e109      	b.n	801d308 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d0fa:	d104      	bne.n	801d106 <f_write+0x11e>
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	2201      	movs	r2, #1
 801d100:	755a      	strb	r2, [r3, #21]
 801d102:	2301      	movs	r3, #1
 801d104:	e100      	b.n	801d308 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d106:	68fb      	ldr	r3, [r7, #12]
 801d108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d10a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d10c:	68fb      	ldr	r3, [r7, #12]
 801d10e:	689b      	ldr	r3, [r3, #8]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d102      	bne.n	801d11a <f_write+0x132>
 801d114:	68fb      	ldr	r3, [r7, #12]
 801d116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d118:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	7d1b      	ldrb	r3, [r3, #20]
 801d11e:	b25b      	sxtb	r3, r3
 801d120:	2b00      	cmp	r3, #0
 801d122:	da18      	bge.n	801d156 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d124:	693b      	ldr	r3, [r7, #16]
 801d126:	7858      	ldrb	r0, [r3, #1]
 801d128:	68fb      	ldr	r3, [r7, #12]
 801d12a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	6a1a      	ldr	r2, [r3, #32]
 801d132:	2301      	movs	r3, #1
 801d134:	f7fd fa80 	bl	801a638 <disk_write>
 801d138:	4603      	mov	r3, r0
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d004      	beq.n	801d148 <f_write+0x160>
 801d13e:	68fb      	ldr	r3, [r7, #12]
 801d140:	2201      	movs	r2, #1
 801d142:	755a      	strb	r2, [r3, #21]
 801d144:	2301      	movs	r3, #1
 801d146:	e0df      	b.n	801d308 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	7d1b      	ldrb	r3, [r3, #20]
 801d14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d150:	b2da      	uxtb	r2, r3
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d156:	693a      	ldr	r2, [r7, #16]
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	69db      	ldr	r3, [r3, #28]
 801d15c:	4619      	mov	r1, r3
 801d15e:	4610      	mov	r0, r2
 801d160:	f7fd fdf6 	bl	801ad50 <clust2sect>
 801d164:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d166:	697b      	ldr	r3, [r7, #20]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d104      	bne.n	801d176 <f_write+0x18e>
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	2202      	movs	r2, #2
 801d170:	755a      	strb	r2, [r3, #21]
 801d172:	2302      	movs	r3, #2
 801d174:	e0c8      	b.n	801d308 <f_write+0x320>
			sect += csect;
 801d176:	697a      	ldr	r2, [r7, #20]
 801d178:	69bb      	ldr	r3, [r7, #24]
 801d17a:	4413      	add	r3, r2
 801d17c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d17e:	693b      	ldr	r3, [r7, #16]
 801d180:	899b      	ldrh	r3, [r3, #12]
 801d182:	461a      	mov	r2, r3
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	fbb3 f3f2 	udiv	r3, r3, r2
 801d18a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d18c:	6a3b      	ldr	r3, [r7, #32]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d043      	beq.n	801d21a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d192:	69ba      	ldr	r2, [r7, #24]
 801d194:	6a3b      	ldr	r3, [r7, #32]
 801d196:	4413      	add	r3, r2
 801d198:	693a      	ldr	r2, [r7, #16]
 801d19a:	8952      	ldrh	r2, [r2, #10]
 801d19c:	4293      	cmp	r3, r2
 801d19e:	d905      	bls.n	801d1ac <f_write+0x1c4>
					cc = fs->csize - csect;
 801d1a0:	693b      	ldr	r3, [r7, #16]
 801d1a2:	895b      	ldrh	r3, [r3, #10]
 801d1a4:	461a      	mov	r2, r3
 801d1a6:	69bb      	ldr	r3, [r7, #24]
 801d1a8:	1ad3      	subs	r3, r2, r3
 801d1aa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d1ac:	693b      	ldr	r3, [r7, #16]
 801d1ae:	7858      	ldrb	r0, [r3, #1]
 801d1b0:	6a3b      	ldr	r3, [r7, #32]
 801d1b2:	697a      	ldr	r2, [r7, #20]
 801d1b4:	69f9      	ldr	r1, [r7, #28]
 801d1b6:	f7fd fa3f 	bl	801a638 <disk_write>
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d004      	beq.n	801d1ca <f_write+0x1e2>
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	2201      	movs	r2, #1
 801d1c4:	755a      	strb	r2, [r3, #21]
 801d1c6:	2301      	movs	r3, #1
 801d1c8:	e09e      	b.n	801d308 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	6a1a      	ldr	r2, [r3, #32]
 801d1ce:	697b      	ldr	r3, [r7, #20]
 801d1d0:	1ad3      	subs	r3, r2, r3
 801d1d2:	6a3a      	ldr	r2, [r7, #32]
 801d1d4:	429a      	cmp	r2, r3
 801d1d6:	d918      	bls.n	801d20a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d1d8:	68fb      	ldr	r3, [r7, #12]
 801d1da:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	6a1a      	ldr	r2, [r3, #32]
 801d1e2:	697b      	ldr	r3, [r7, #20]
 801d1e4:	1ad3      	subs	r3, r2, r3
 801d1e6:	693a      	ldr	r2, [r7, #16]
 801d1e8:	8992      	ldrh	r2, [r2, #12]
 801d1ea:	fb02 f303 	mul.w	r3, r2, r3
 801d1ee:	69fa      	ldr	r2, [r7, #28]
 801d1f0:	18d1      	adds	r1, r2, r3
 801d1f2:	693b      	ldr	r3, [r7, #16]
 801d1f4:	899b      	ldrh	r3, [r3, #12]
 801d1f6:	461a      	mov	r2, r3
 801d1f8:	f7fd fade 	bl	801a7b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	7d1b      	ldrb	r3, [r3, #20]
 801d200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d204:	b2da      	uxtb	r2, r3
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d20a:	693b      	ldr	r3, [r7, #16]
 801d20c:	899b      	ldrh	r3, [r3, #12]
 801d20e:	461a      	mov	r2, r3
 801d210:	6a3b      	ldr	r3, [r7, #32]
 801d212:	fb02 f303 	mul.w	r3, r2, r3
 801d216:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d218:	e04b      	b.n	801d2b2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	6a1b      	ldr	r3, [r3, #32]
 801d21e:	697a      	ldr	r2, [r7, #20]
 801d220:	429a      	cmp	r2, r3
 801d222:	d016      	beq.n	801d252 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d224:	68fb      	ldr	r3, [r7, #12]
 801d226:	699a      	ldr	r2, [r3, #24]
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d22c:	429a      	cmp	r2, r3
 801d22e:	d210      	bcs.n	801d252 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d230:	693b      	ldr	r3, [r7, #16]
 801d232:	7858      	ldrb	r0, [r3, #1]
 801d234:	68fb      	ldr	r3, [r7, #12]
 801d236:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d23a:	2301      	movs	r3, #1
 801d23c:	697a      	ldr	r2, [r7, #20]
 801d23e:	f7fd f9db 	bl	801a5f8 <disk_read>
 801d242:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d244:	2b00      	cmp	r3, #0
 801d246:	d004      	beq.n	801d252 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	2201      	movs	r2, #1
 801d24c:	755a      	strb	r2, [r3, #21]
 801d24e:	2301      	movs	r3, #1
 801d250:	e05a      	b.n	801d308 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	697a      	ldr	r2, [r7, #20]
 801d256:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d258:	693b      	ldr	r3, [r7, #16]
 801d25a:	899b      	ldrh	r3, [r3, #12]
 801d25c:	4618      	mov	r0, r3
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	699b      	ldr	r3, [r3, #24]
 801d262:	693a      	ldr	r2, [r7, #16]
 801d264:	8992      	ldrh	r2, [r2, #12]
 801d266:	fbb3 f1f2 	udiv	r1, r3, r2
 801d26a:	fb01 f202 	mul.w	r2, r1, r2
 801d26e:	1a9b      	subs	r3, r3, r2
 801d270:	1ac3      	subs	r3, r0, r3
 801d272:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	429a      	cmp	r2, r3
 801d27a:	d901      	bls.n	801d280 <f_write+0x298>
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	699b      	ldr	r3, [r3, #24]
 801d28a:	693a      	ldr	r2, [r7, #16]
 801d28c:	8992      	ldrh	r2, [r2, #12]
 801d28e:	fbb3 f0f2 	udiv	r0, r3, r2
 801d292:	fb00 f202 	mul.w	r2, r0, r2
 801d296:	1a9b      	subs	r3, r3, r2
 801d298:	440b      	add	r3, r1
 801d29a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d29c:	69f9      	ldr	r1, [r7, #28]
 801d29e:	4618      	mov	r0, r3
 801d2a0:	f7fd fa8a 	bl	801a7b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d2a4:	68fb      	ldr	r3, [r7, #12]
 801d2a6:	7d1b      	ldrb	r3, [r3, #20]
 801d2a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d2ac:	b2da      	uxtb	r2, r3
 801d2ae:	68fb      	ldr	r3, [r7, #12]
 801d2b0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d2b2:	69fa      	ldr	r2, [r7, #28]
 801d2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2b6:	4413      	add	r3, r2
 801d2b8:	61fb      	str	r3, [r7, #28]
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	699a      	ldr	r2, [r3, #24]
 801d2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2c0:	441a      	add	r2, r3
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	619a      	str	r2, [r3, #24]
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	68da      	ldr	r2, [r3, #12]
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	699b      	ldr	r3, [r3, #24]
 801d2ce:	429a      	cmp	r2, r3
 801d2d0:	bf38      	it	cc
 801d2d2:	461a      	movcc	r2, r3
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	60da      	str	r2, [r3, #12]
 801d2d8:	683b      	ldr	r3, [r7, #0]
 801d2da:	681a      	ldr	r2, [r3, #0]
 801d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2de:	441a      	add	r2, r3
 801d2e0:	683b      	ldr	r3, [r7, #0]
 801d2e2:	601a      	str	r2, [r3, #0]
 801d2e4:	687a      	ldr	r2, [r7, #4]
 801d2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2e8:	1ad3      	subs	r3, r2, r3
 801d2ea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	f47f aeb5 	bne.w	801d05e <f_write+0x76>
 801d2f4:	e000      	b.n	801d2f8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d2f6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	7d1b      	ldrb	r3, [r3, #20]
 801d2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d300:	b2da      	uxtb	r2, r3
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d306:	2300      	movs	r3, #0
}
 801d308:	4618      	mov	r0, r3
 801d30a:	3730      	adds	r7, #48	@ 0x30
 801d30c:	46bd      	mov	sp, r7
 801d30e:	bd80      	pop	{r7, pc}

0801d310 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d310:	b580      	push	{r7, lr}
 801d312:	b086      	sub	sp, #24
 801d314:	af00      	add	r7, sp, #0
 801d316:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	f107 0208 	add.w	r2, r7, #8
 801d31e:	4611      	mov	r1, r2
 801d320:	4618      	mov	r0, r3
 801d322:	f7ff fc1d 	bl	801cb60 <validate>
 801d326:	4603      	mov	r3, r0
 801d328:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d32a:	7dfb      	ldrb	r3, [r7, #23]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d168      	bne.n	801d402 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	7d1b      	ldrb	r3, [r3, #20]
 801d334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d062      	beq.n	801d402 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	7d1b      	ldrb	r3, [r3, #20]
 801d340:	b25b      	sxtb	r3, r3
 801d342:	2b00      	cmp	r3, #0
 801d344:	da15      	bge.n	801d372 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d346:	68bb      	ldr	r3, [r7, #8]
 801d348:	7858      	ldrb	r0, [r3, #1]
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	6a1a      	ldr	r2, [r3, #32]
 801d354:	2301      	movs	r3, #1
 801d356:	f7fd f96f 	bl	801a638 <disk_write>
 801d35a:	4603      	mov	r3, r0
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d001      	beq.n	801d364 <f_sync+0x54>
 801d360:	2301      	movs	r3, #1
 801d362:	e04f      	b.n	801d404 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	7d1b      	ldrb	r3, [r3, #20]
 801d368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d36c:	b2da      	uxtb	r2, r3
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d372:	f7fd f8a1 	bl	801a4b8 <get_fattime>
 801d376:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d378:	68ba      	ldr	r2, [r7, #8]
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d37e:	4619      	mov	r1, r3
 801d380:	4610      	mov	r0, r2
 801d382:	f7fd fc47 	bl	801ac14 <move_window>
 801d386:	4603      	mov	r3, r0
 801d388:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d38a:	7dfb      	ldrb	r3, [r7, #23]
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d138      	bne.n	801d402 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d394:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	330b      	adds	r3, #11
 801d39a:	781a      	ldrb	r2, [r3, #0]
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	330b      	adds	r3, #11
 801d3a0:	f042 0220 	orr.w	r2, r2, #32
 801d3a4:	b2d2      	uxtb	r2, r2
 801d3a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	6818      	ldr	r0, [r3, #0]
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	689b      	ldr	r3, [r3, #8]
 801d3b0:	461a      	mov	r2, r3
 801d3b2:	68f9      	ldr	r1, [r7, #12]
 801d3b4:	f7fe f9d2 	bl	801b75c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	f103 021c 	add.w	r2, r3, #28
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	68db      	ldr	r3, [r3, #12]
 801d3c2:	4619      	mov	r1, r3
 801d3c4:	4610      	mov	r0, r2
 801d3c6:	f7fd f9cb 	bl	801a760 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	3316      	adds	r3, #22
 801d3ce:	6939      	ldr	r1, [r7, #16]
 801d3d0:	4618      	mov	r0, r3
 801d3d2:	f7fd f9c5 	bl	801a760 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	3312      	adds	r3, #18
 801d3da:	2100      	movs	r1, #0
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7fd f9a4 	bl	801a72a <st_word>
					fs->wflag = 1;
 801d3e2:	68bb      	ldr	r3, [r7, #8]
 801d3e4:	2201      	movs	r2, #1
 801d3e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d3e8:	68bb      	ldr	r3, [r7, #8]
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	f7fd fc40 	bl	801ac70 <sync_fs>
 801d3f0:	4603      	mov	r3, r0
 801d3f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	7d1b      	ldrb	r3, [r3, #20]
 801d3f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d3fc:	b2da      	uxtb	r2, r3
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d402:	7dfb      	ldrb	r3, [r7, #23]
}
 801d404:	4618      	mov	r0, r3
 801d406:	3718      	adds	r7, #24
 801d408:	46bd      	mov	sp, r7
 801d40a:	bd80      	pop	{r7, pc}

0801d40c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	b084      	sub	sp, #16
 801d410:	af00      	add	r7, sp, #0
 801d412:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d414:	6878      	ldr	r0, [r7, #4]
 801d416:	f7ff ff7b 	bl	801d310 <f_sync>
 801d41a:	4603      	mov	r3, r0
 801d41c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d41e:	7bfb      	ldrb	r3, [r7, #15]
 801d420:	2b00      	cmp	r3, #0
 801d422:	d118      	bne.n	801d456 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	f107 0208 	add.w	r2, r7, #8
 801d42a:	4611      	mov	r1, r2
 801d42c:	4618      	mov	r0, r3
 801d42e:	f7ff fb97 	bl	801cb60 <validate>
 801d432:	4603      	mov	r3, r0
 801d434:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d436:	7bfb      	ldrb	r3, [r7, #15]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d10c      	bne.n	801d456 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	691b      	ldr	r3, [r3, #16]
 801d440:	4618      	mov	r0, r3
 801d442:	f7fd fb43 	bl	801aacc <dec_lock>
 801d446:	4603      	mov	r3, r0
 801d448:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d44a:	7bfb      	ldrb	r3, [r7, #15]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d102      	bne.n	801d456 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	2200      	movs	r2, #0
 801d454:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d456:	7bfb      	ldrb	r3, [r7, #15]
}
 801d458:	4618      	mov	r0, r3
 801d45a:	3710      	adds	r7, #16
 801d45c:	46bd      	mov	sp, r7
 801d45e:	bd80      	pop	{r7, pc}

0801d460 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d460:	b580      	push	{r7, lr}
 801d462:	b0a0      	sub	sp, #128	@ 0x80
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d468:	2300      	movs	r3, #0
 801d46a:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d46c:	f107 010c 	add.w	r1, r7, #12
 801d470:	1d3b      	adds	r3, r7, #4
 801d472:	2202      	movs	r2, #2
 801d474:	4618      	mov	r0, r3
 801d476:	f7ff f8ed 	bl	801c654 <find_volume>
 801d47a:	4603      	mov	r3, r0
 801d47c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801d484:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d488:	2b00      	cmp	r3, #0
 801d48a:	f040 808e 	bne.w	801d5aa <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d48e:	687a      	ldr	r2, [r7, #4]
 801d490:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d494:	4611      	mov	r1, r2
 801d496:	4618      	mov	r0, r3
 801d498:	f7fe ffcc 	bl	801c434 <follow_path>
 801d49c:	4603      	mov	r3, r0
 801d49e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d4a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d108      	bne.n	801d4bc <f_unlink+0x5c>
 801d4aa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d4ae:	2102      	movs	r1, #2
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	f7fd f9ff 	bl	801a8b4 <chk_lock>
 801d4b6:	4603      	mov	r3, r0
 801d4b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d4bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d172      	bne.n	801d5aa <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d4c4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801d4c8:	b25b      	sxtb	r3, r3
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	da03      	bge.n	801d4d6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d4ce:	2306      	movs	r3, #6
 801d4d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801d4d4:	e008      	b.n	801d4e8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d4d6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d4da:	f003 0301 	and.w	r3, r3, #1
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d002      	beq.n	801d4e8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d4e2:	2307      	movs	r3, #7
 801d4e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801d4e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d134      	bne.n	801d55a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801d4f4:	4611      	mov	r1, r2
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f7fe f911 	bl	801b71e <ld_clust>
 801d4fc:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d4fe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d502:	f003 0310 	and.w	r3, r3, #16
 801d506:	2b00      	cmp	r3, #0
 801d508:	d027      	beq.n	801d55a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d50e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d510:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d512:	f107 0310 	add.w	r3, r7, #16
 801d516:	2100      	movs	r1, #0
 801d518:	4618      	mov	r0, r3
 801d51a:	f7fd ff5a 	bl	801b3d2 <dir_sdi>
 801d51e:	4603      	mov	r3, r0
 801d520:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801d524:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d116      	bne.n	801d55a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d52c:	f107 0310 	add.w	r3, r7, #16
 801d530:	2100      	movs	r1, #0
 801d532:	4618      	mov	r0, r3
 801d534:	f7fe fb1d 	bl	801bb72 <dir_read>
 801d538:	4603      	mov	r3, r0
 801d53a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d53e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d542:	2b00      	cmp	r3, #0
 801d544:	d102      	bne.n	801d54c <f_unlink+0xec>
 801d546:	2307      	movs	r3, #7
 801d548:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801d54c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d550:	2b04      	cmp	r3, #4
 801d552:	d102      	bne.n	801d55a <f_unlink+0xfa>
 801d554:	2300      	movs	r3, #0
 801d556:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801d55a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d123      	bne.n	801d5aa <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801d562:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d566:	4618      	mov	r0, r3
 801d568:	f7fe fd62 	bl	801c030 <dir_remove>
 801d56c:	4603      	mov	r3, r0
 801d56e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801d572:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d576:	2b00      	cmp	r3, #0
 801d578:	d10c      	bne.n	801d594 <f_unlink+0x134>
 801d57a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d009      	beq.n	801d594 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801d580:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d584:	2200      	movs	r2, #0
 801d586:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d588:	4618      	mov	r0, r3
 801d58a:	f7fd fded 	bl	801b168 <remove_chain>
 801d58e:	4603      	mov	r3, r0
 801d590:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801d594:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d106      	bne.n	801d5aa <f_unlink+0x14a>
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	4618      	mov	r0, r3
 801d5a0:	f7fd fb66 	bl	801ac70 <sync_fs>
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801d5aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	3780      	adds	r7, #128	@ 0x80
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	bd80      	pop	{r7, pc}
	...

0801d5b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d5b8:	b480      	push	{r7}
 801d5ba:	b087      	sub	sp, #28
 801d5bc:	af00      	add	r7, sp, #0
 801d5be:	60f8      	str	r0, [r7, #12]
 801d5c0:	60b9      	str	r1, [r7, #8]
 801d5c2:	4613      	mov	r3, r2
 801d5c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d5ce:	4b1f      	ldr	r3, [pc, #124]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d5d0:	7a5b      	ldrb	r3, [r3, #9]
 801d5d2:	b2db      	uxtb	r3, r3
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d131      	bne.n	801d63c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d5d8:	4b1c      	ldr	r3, [pc, #112]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d5da:	7a5b      	ldrb	r3, [r3, #9]
 801d5dc:	b2db      	uxtb	r3, r3
 801d5de:	461a      	mov	r2, r3
 801d5e0:	4b1a      	ldr	r3, [pc, #104]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d5e2:	2100      	movs	r1, #0
 801d5e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d5e6:	4b19      	ldr	r3, [pc, #100]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d5e8:	7a5b      	ldrb	r3, [r3, #9]
 801d5ea:	b2db      	uxtb	r3, r3
 801d5ec:	4a17      	ldr	r2, [pc, #92]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d5ee:	009b      	lsls	r3, r3, #2
 801d5f0:	4413      	add	r3, r2
 801d5f2:	68fa      	ldr	r2, [r7, #12]
 801d5f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d5f6:	4b15      	ldr	r3, [pc, #84]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d5f8:	7a5b      	ldrb	r3, [r3, #9]
 801d5fa:	b2db      	uxtb	r3, r3
 801d5fc:	461a      	mov	r2, r3
 801d5fe:	4b13      	ldr	r3, [pc, #76]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d600:	4413      	add	r3, r2
 801d602:	79fa      	ldrb	r2, [r7, #7]
 801d604:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801d606:	4b11      	ldr	r3, [pc, #68]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d608:	7a5b      	ldrb	r3, [r3, #9]
 801d60a:	b2db      	uxtb	r3, r3
 801d60c:	1c5a      	adds	r2, r3, #1
 801d60e:	b2d1      	uxtb	r1, r2
 801d610:	4a0e      	ldr	r2, [pc, #56]	@ (801d64c <FATFS_LinkDriverEx+0x94>)
 801d612:	7251      	strb	r1, [r2, #9]
 801d614:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d616:	7dbb      	ldrb	r3, [r7, #22]
 801d618:	3330      	adds	r3, #48	@ 0x30
 801d61a:	b2da      	uxtb	r2, r3
 801d61c:	68bb      	ldr	r3, [r7, #8]
 801d61e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d620:	68bb      	ldr	r3, [r7, #8]
 801d622:	3301      	adds	r3, #1
 801d624:	223a      	movs	r2, #58	@ 0x3a
 801d626:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d628:	68bb      	ldr	r3, [r7, #8]
 801d62a:	3302      	adds	r3, #2
 801d62c:	222f      	movs	r2, #47	@ 0x2f
 801d62e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d630:	68bb      	ldr	r3, [r7, #8]
 801d632:	3303      	adds	r3, #3
 801d634:	2200      	movs	r2, #0
 801d636:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d638:	2300      	movs	r3, #0
 801d63a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d63c:	7dfb      	ldrb	r3, [r7, #23]
}
 801d63e:	4618      	mov	r0, r3
 801d640:	371c      	adds	r7, #28
 801d642:	46bd      	mov	sp, r7
 801d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d648:	4770      	bx	lr
 801d64a:	bf00      	nop
 801d64c:	24000768 	.word	0x24000768

0801d650 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d650:	b580      	push	{r7, lr}
 801d652:	b082      	sub	sp, #8
 801d654:	af00      	add	r7, sp, #0
 801d656:	6078      	str	r0, [r7, #4]
 801d658:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d65a:	2200      	movs	r2, #0
 801d65c:	6839      	ldr	r1, [r7, #0]
 801d65e:	6878      	ldr	r0, [r7, #4]
 801d660:	f7ff ffaa 	bl	801d5b8 <FATFS_LinkDriverEx>
 801d664:	4603      	mov	r3, r0
}
 801d666:	4618      	mov	r0, r3
 801d668:	3708      	adds	r7, #8
 801d66a:	46bd      	mov	sp, r7
 801d66c:	bd80      	pop	{r7, pc}
	...

0801d670 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801d670:	b480      	push	{r7}
 801d672:	b085      	sub	sp, #20
 801d674:	af00      	add	r7, sp, #0
 801d676:	4603      	mov	r3, r0
 801d678:	6039      	str	r1, [r7, #0]
 801d67a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d67c:	88fb      	ldrh	r3, [r7, #6]
 801d67e:	2b7f      	cmp	r3, #127	@ 0x7f
 801d680:	d802      	bhi.n	801d688 <ff_convert+0x18>
		c = chr;
 801d682:	88fb      	ldrh	r3, [r7, #6]
 801d684:	81fb      	strh	r3, [r7, #14]
 801d686:	e025      	b.n	801d6d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d688:	683b      	ldr	r3, [r7, #0]
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	d00b      	beq.n	801d6a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d68e:	88fb      	ldrh	r3, [r7, #6]
 801d690:	2bff      	cmp	r3, #255	@ 0xff
 801d692:	d805      	bhi.n	801d6a0 <ff_convert+0x30>
 801d694:	88fb      	ldrh	r3, [r7, #6]
 801d696:	3b80      	subs	r3, #128	@ 0x80
 801d698:	4a12      	ldr	r2, [pc, #72]	@ (801d6e4 <ff_convert+0x74>)
 801d69a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d69e:	e000      	b.n	801d6a2 <ff_convert+0x32>
 801d6a0:	2300      	movs	r3, #0
 801d6a2:	81fb      	strh	r3, [r7, #14]
 801d6a4:	e016      	b.n	801d6d4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d6a6:	2300      	movs	r3, #0
 801d6a8:	81fb      	strh	r3, [r7, #14]
 801d6aa:	e009      	b.n	801d6c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801d6ac:	89fb      	ldrh	r3, [r7, #14]
 801d6ae:	4a0d      	ldr	r2, [pc, #52]	@ (801d6e4 <ff_convert+0x74>)
 801d6b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d6b4:	88fa      	ldrh	r2, [r7, #6]
 801d6b6:	429a      	cmp	r2, r3
 801d6b8:	d006      	beq.n	801d6c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801d6ba:	89fb      	ldrh	r3, [r7, #14]
 801d6bc:	3301      	adds	r3, #1
 801d6be:	81fb      	strh	r3, [r7, #14]
 801d6c0:	89fb      	ldrh	r3, [r7, #14]
 801d6c2:	2b7f      	cmp	r3, #127	@ 0x7f
 801d6c4:	d9f2      	bls.n	801d6ac <ff_convert+0x3c>
 801d6c6:	e000      	b.n	801d6ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801d6c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801d6ca:	89fb      	ldrh	r3, [r7, #14]
 801d6cc:	3380      	adds	r3, #128	@ 0x80
 801d6ce:	b29b      	uxth	r3, r3
 801d6d0:	b2db      	uxtb	r3, r3
 801d6d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801d6d4:	89fb      	ldrh	r3, [r7, #14]
}
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	3714      	adds	r7, #20
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6e0:	4770      	bx	lr
 801d6e2:	bf00      	nop
 801d6e4:	0801e3a0 	.word	0x0801e3a0

0801d6e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801d6e8:	b480      	push	{r7}
 801d6ea:	b087      	sub	sp, #28
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	4603      	mov	r3, r0
 801d6f0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d6f2:	88fb      	ldrh	r3, [r7, #6]
 801d6f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d6f8:	d201      	bcs.n	801d6fe <ff_wtoupper+0x16>
 801d6fa:	4b3e      	ldr	r3, [pc, #248]	@ (801d7f4 <ff_wtoupper+0x10c>)
 801d6fc:	e000      	b.n	801d700 <ff_wtoupper+0x18>
 801d6fe:	4b3e      	ldr	r3, [pc, #248]	@ (801d7f8 <ff_wtoupper+0x110>)
 801d700:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801d702:	697b      	ldr	r3, [r7, #20]
 801d704:	1c9a      	adds	r2, r3, #2
 801d706:	617a      	str	r2, [r7, #20]
 801d708:	881b      	ldrh	r3, [r3, #0]
 801d70a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801d70c:	8a7b      	ldrh	r3, [r7, #18]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d068      	beq.n	801d7e4 <ff_wtoupper+0xfc>
 801d712:	88fa      	ldrh	r2, [r7, #6]
 801d714:	8a7b      	ldrh	r3, [r7, #18]
 801d716:	429a      	cmp	r2, r3
 801d718:	d364      	bcc.n	801d7e4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d71a:	697b      	ldr	r3, [r7, #20]
 801d71c:	1c9a      	adds	r2, r3, #2
 801d71e:	617a      	str	r2, [r7, #20]
 801d720:	881b      	ldrh	r3, [r3, #0]
 801d722:	823b      	strh	r3, [r7, #16]
 801d724:	8a3b      	ldrh	r3, [r7, #16]
 801d726:	0a1b      	lsrs	r3, r3, #8
 801d728:	81fb      	strh	r3, [r7, #14]
 801d72a:	8a3b      	ldrh	r3, [r7, #16]
 801d72c:	b2db      	uxtb	r3, r3
 801d72e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801d730:	88fa      	ldrh	r2, [r7, #6]
 801d732:	8a79      	ldrh	r1, [r7, #18]
 801d734:	8a3b      	ldrh	r3, [r7, #16]
 801d736:	440b      	add	r3, r1
 801d738:	429a      	cmp	r2, r3
 801d73a:	da49      	bge.n	801d7d0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801d73c:	89fb      	ldrh	r3, [r7, #14]
 801d73e:	2b08      	cmp	r3, #8
 801d740:	d84f      	bhi.n	801d7e2 <ff_wtoupper+0xfa>
 801d742:	a201      	add	r2, pc, #4	@ (adr r2, 801d748 <ff_wtoupper+0x60>)
 801d744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d748:	0801d76d 	.word	0x0801d76d
 801d74c:	0801d77f 	.word	0x0801d77f
 801d750:	0801d795 	.word	0x0801d795
 801d754:	0801d79d 	.word	0x0801d79d
 801d758:	0801d7a5 	.word	0x0801d7a5
 801d75c:	0801d7ad 	.word	0x0801d7ad
 801d760:	0801d7b5 	.word	0x0801d7b5
 801d764:	0801d7bd 	.word	0x0801d7bd
 801d768:	0801d7c5 	.word	0x0801d7c5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801d76c:	88fa      	ldrh	r2, [r7, #6]
 801d76e:	8a7b      	ldrh	r3, [r7, #18]
 801d770:	1ad3      	subs	r3, r2, r3
 801d772:	005b      	lsls	r3, r3, #1
 801d774:	697a      	ldr	r2, [r7, #20]
 801d776:	4413      	add	r3, r2
 801d778:	881b      	ldrh	r3, [r3, #0]
 801d77a:	80fb      	strh	r3, [r7, #6]
 801d77c:	e027      	b.n	801d7ce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801d77e:	88fa      	ldrh	r2, [r7, #6]
 801d780:	8a7b      	ldrh	r3, [r7, #18]
 801d782:	1ad3      	subs	r3, r2, r3
 801d784:	b29b      	uxth	r3, r3
 801d786:	f003 0301 	and.w	r3, r3, #1
 801d78a:	b29b      	uxth	r3, r3
 801d78c:	88fa      	ldrh	r2, [r7, #6]
 801d78e:	1ad3      	subs	r3, r2, r3
 801d790:	80fb      	strh	r3, [r7, #6]
 801d792:	e01c      	b.n	801d7ce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801d794:	88fb      	ldrh	r3, [r7, #6]
 801d796:	3b10      	subs	r3, #16
 801d798:	80fb      	strh	r3, [r7, #6]
 801d79a:	e018      	b.n	801d7ce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801d79c:	88fb      	ldrh	r3, [r7, #6]
 801d79e:	3b20      	subs	r3, #32
 801d7a0:	80fb      	strh	r3, [r7, #6]
 801d7a2:	e014      	b.n	801d7ce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801d7a4:	88fb      	ldrh	r3, [r7, #6]
 801d7a6:	3b30      	subs	r3, #48	@ 0x30
 801d7a8:	80fb      	strh	r3, [r7, #6]
 801d7aa:	e010      	b.n	801d7ce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801d7ac:	88fb      	ldrh	r3, [r7, #6]
 801d7ae:	3b1a      	subs	r3, #26
 801d7b0:	80fb      	strh	r3, [r7, #6]
 801d7b2:	e00c      	b.n	801d7ce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801d7b4:	88fb      	ldrh	r3, [r7, #6]
 801d7b6:	3308      	adds	r3, #8
 801d7b8:	80fb      	strh	r3, [r7, #6]
 801d7ba:	e008      	b.n	801d7ce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801d7bc:	88fb      	ldrh	r3, [r7, #6]
 801d7be:	3b50      	subs	r3, #80	@ 0x50
 801d7c0:	80fb      	strh	r3, [r7, #6]
 801d7c2:	e004      	b.n	801d7ce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801d7c4:	88fb      	ldrh	r3, [r7, #6]
 801d7c6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801d7ca:	80fb      	strh	r3, [r7, #6]
 801d7cc:	bf00      	nop
			}
			break;
 801d7ce:	e008      	b.n	801d7e2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801d7d0:	89fb      	ldrh	r3, [r7, #14]
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d195      	bne.n	801d702 <ff_wtoupper+0x1a>
 801d7d6:	8a3b      	ldrh	r3, [r7, #16]
 801d7d8:	005b      	lsls	r3, r3, #1
 801d7da:	697a      	ldr	r2, [r7, #20]
 801d7dc:	4413      	add	r3, r2
 801d7de:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801d7e0:	e78f      	b.n	801d702 <ff_wtoupper+0x1a>
			break;
 801d7e2:	bf00      	nop
	}

	return chr;
 801d7e4:	88fb      	ldrh	r3, [r7, #6]
}
 801d7e6:	4618      	mov	r0, r3
 801d7e8:	371c      	adds	r7, #28
 801d7ea:	46bd      	mov	sp, r7
 801d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7f0:	4770      	bx	lr
 801d7f2:	bf00      	nop
 801d7f4:	0801e4a0 	.word	0x0801e4a0
 801d7f8:	0801e694 	.word	0x0801e694

0801d7fc <memset>:
 801d7fc:	4402      	add	r2, r0
 801d7fe:	4603      	mov	r3, r0
 801d800:	4293      	cmp	r3, r2
 801d802:	d100      	bne.n	801d806 <memset+0xa>
 801d804:	4770      	bx	lr
 801d806:	f803 1b01 	strb.w	r1, [r3], #1
 801d80a:	e7f9      	b.n	801d800 <memset+0x4>

0801d80c <__errno>:
 801d80c:	4b01      	ldr	r3, [pc, #4]	@ (801d814 <__errno+0x8>)
 801d80e:	6818      	ldr	r0, [r3, #0]
 801d810:	4770      	bx	lr
 801d812:	bf00      	nop
 801d814:	24000028 	.word	0x24000028

0801d818 <__libc_init_array>:
 801d818:	b570      	push	{r4, r5, r6, lr}
 801d81a:	4d0d      	ldr	r5, [pc, #52]	@ (801d850 <__libc_init_array+0x38>)
 801d81c:	4c0d      	ldr	r4, [pc, #52]	@ (801d854 <__libc_init_array+0x3c>)
 801d81e:	1b64      	subs	r4, r4, r5
 801d820:	10a4      	asrs	r4, r4, #2
 801d822:	2600      	movs	r6, #0
 801d824:	42a6      	cmp	r6, r4
 801d826:	d109      	bne.n	801d83c <__libc_init_array+0x24>
 801d828:	4d0b      	ldr	r5, [pc, #44]	@ (801d858 <__libc_init_array+0x40>)
 801d82a:	4c0c      	ldr	r4, [pc, #48]	@ (801d85c <__libc_init_array+0x44>)
 801d82c:	f000 fd0c 	bl	801e248 <_init>
 801d830:	1b64      	subs	r4, r4, r5
 801d832:	10a4      	asrs	r4, r4, #2
 801d834:	2600      	movs	r6, #0
 801d836:	42a6      	cmp	r6, r4
 801d838:	d105      	bne.n	801d846 <__libc_init_array+0x2e>
 801d83a:	bd70      	pop	{r4, r5, r6, pc}
 801d83c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d840:	4798      	blx	r3
 801d842:	3601      	adds	r6, #1
 801d844:	e7ee      	b.n	801d824 <__libc_init_array+0xc>
 801d846:	f855 3b04 	ldr.w	r3, [r5], #4
 801d84a:	4798      	blx	r3
 801d84c:	3601      	adds	r6, #1
 801d84e:	e7f2      	b.n	801d836 <__libc_init_array+0x1e>
 801d850:	08020080 	.word	0x08020080
 801d854:	08020080 	.word	0x08020080
 801d858:	08020080 	.word	0x08020080
 801d85c:	08020084 	.word	0x08020084

0801d860 <memcpy>:
 801d860:	440a      	add	r2, r1
 801d862:	4291      	cmp	r1, r2
 801d864:	f100 33ff 	add.w	r3, r0, #4294967295
 801d868:	d100      	bne.n	801d86c <memcpy+0xc>
 801d86a:	4770      	bx	lr
 801d86c:	b510      	push	{r4, lr}
 801d86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d872:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d876:	4291      	cmp	r1, r2
 801d878:	d1f9      	bne.n	801d86e <memcpy+0xe>
 801d87a:	bd10      	pop	{r4, pc}

0801d87c <atan2>:
 801d87c:	f000 bbac 	b.w	801dfd8 <__ieee754_atan2>

0801d880 <sqrt>:
 801d880:	b508      	push	{r3, lr}
 801d882:	ed2d 8b04 	vpush	{d8-d9}
 801d886:	eeb0 8b40 	vmov.f64	d8, d0
 801d88a:	f000 fba1 	bl	801dfd0 <__ieee754_sqrt>
 801d88e:	eeb4 8b48 	vcmp.f64	d8, d8
 801d892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d896:	d60c      	bvs.n	801d8b2 <sqrt+0x32>
 801d898:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801d8b8 <sqrt+0x38>
 801d89c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801d8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8a4:	d505      	bpl.n	801d8b2 <sqrt+0x32>
 801d8a6:	f7ff ffb1 	bl	801d80c <__errno>
 801d8aa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801d8ae:	2321      	movs	r3, #33	@ 0x21
 801d8b0:	6003      	str	r3, [r0, #0]
 801d8b2:	ecbd 8b04 	vpop	{d8-d9}
 801d8b6:	bd08      	pop	{r3, pc}
	...

0801d8c0 <atan>:
 801d8c0:	b538      	push	{r3, r4, r5, lr}
 801d8c2:	eeb0 7b40 	vmov.f64	d7, d0
 801d8c6:	ee17 5a90 	vmov	r5, s15
 801d8ca:	4b73      	ldr	r3, [pc, #460]	@ (801da98 <atan+0x1d8>)
 801d8cc:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801d8d0:	429c      	cmp	r4, r3
 801d8d2:	d913      	bls.n	801d8fc <atan+0x3c>
 801d8d4:	4b71      	ldr	r3, [pc, #452]	@ (801da9c <atan+0x1dc>)
 801d8d6:	429c      	cmp	r4, r3
 801d8d8:	d803      	bhi.n	801d8e2 <atan+0x22>
 801d8da:	d107      	bne.n	801d8ec <atan+0x2c>
 801d8dc:	ee10 3a10 	vmov	r3, s0
 801d8e0:	b123      	cbz	r3, 801d8ec <atan+0x2c>
 801d8e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d8e6:	eeb0 0b47 	vmov.f64	d0, d7
 801d8ea:	bd38      	pop	{r3, r4, r5, pc}
 801d8ec:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801da28 <atan+0x168>
 801d8f0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801da30 <atan+0x170>
 801d8f4:	2d00      	cmp	r5, #0
 801d8f6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801d8fa:	e7f4      	b.n	801d8e6 <atan+0x26>
 801d8fc:	4b68      	ldr	r3, [pc, #416]	@ (801daa0 <atan+0x1e0>)
 801d8fe:	429c      	cmp	r4, r3
 801d900:	d811      	bhi.n	801d926 <atan+0x66>
 801d902:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801d906:	429c      	cmp	r4, r3
 801d908:	d80a      	bhi.n	801d920 <atan+0x60>
 801d90a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801d90e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801da38 <atan+0x178>
 801d912:	ee30 6b06 	vadd.f64	d6, d0, d6
 801d916:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801d91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d91e:	dce2      	bgt.n	801d8e6 <atan+0x26>
 801d920:	f04f 33ff 	mov.w	r3, #4294967295
 801d924:	e013      	b.n	801d94e <atan+0x8e>
 801d926:	f000 f8c5 	bl	801dab4 <fabs>
 801d92a:	4b5e      	ldr	r3, [pc, #376]	@ (801daa4 <atan+0x1e4>)
 801d92c:	429c      	cmp	r4, r3
 801d92e:	d84f      	bhi.n	801d9d0 <atan+0x110>
 801d930:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801d934:	429c      	cmp	r4, r3
 801d936:	d841      	bhi.n	801d9bc <atan+0xfc>
 801d938:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801d93c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801d940:	2300      	movs	r3, #0
 801d942:	eea0 5b07 	vfma.f64	d5, d0, d7
 801d946:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d94a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801d94e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801da40 <atan+0x180>
 801d952:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d956:	ee24 5b04 	vmul.f64	d5, d4, d4
 801d95a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801da48 <atan+0x188>
 801d95e:	eea5 3b06 	vfma.f64	d3, d5, d6
 801d962:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801da50 <atan+0x190>
 801d966:	eea3 6b05 	vfma.f64	d6, d3, d5
 801d96a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801da58 <atan+0x198>
 801d96e:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d972:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801da60 <atan+0x1a0>
 801d976:	eea3 6b05 	vfma.f64	d6, d3, d5
 801d97a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801da68 <atan+0x1a8>
 801d97e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801da70 <atan+0x1b0>
 801d982:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d986:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801da78 <atan+0x1b8>
 801d98a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801d98e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801da80 <atan+0x1c0>
 801d992:	eea2 6b05 	vfma.f64	d6, d2, d5
 801d996:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801da88 <atan+0x1c8>
 801d99a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801d99e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801da90 <atan+0x1d0>
 801d9a2:	1c5a      	adds	r2, r3, #1
 801d9a4:	eea2 6b05 	vfma.f64	d6, d2, d5
 801d9a8:	ee26 6b05 	vmul.f64	d6, d6, d5
 801d9ac:	eea3 6b04 	vfma.f64	d6, d3, d4
 801d9b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 801d9b4:	d121      	bne.n	801d9fa <atan+0x13a>
 801d9b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d9ba:	e794      	b.n	801d8e6 <atan+0x26>
 801d9bc:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801d9c0:	2301      	movs	r3, #1
 801d9c2:	ee30 5b47 	vsub.f64	d5, d0, d7
 801d9c6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d9ca:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801d9ce:	e7be      	b.n	801d94e <atan+0x8e>
 801d9d0:	4b35      	ldr	r3, [pc, #212]	@ (801daa8 <atan+0x1e8>)
 801d9d2:	429c      	cmp	r4, r3
 801d9d4:	d20b      	bcs.n	801d9ee <atan+0x12e>
 801d9d6:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801d9da:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801d9de:	ee30 5b47 	vsub.f64	d5, d0, d7
 801d9e2:	eea0 6b07 	vfma.f64	d6, d0, d7
 801d9e6:	2302      	movs	r3, #2
 801d9e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801d9ec:	e7af      	b.n	801d94e <atan+0x8e>
 801d9ee:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801d9f2:	2303      	movs	r3, #3
 801d9f4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801d9f8:	e7a9      	b.n	801d94e <atan+0x8e>
 801d9fa:	4a2c      	ldr	r2, [pc, #176]	@ (801daac <atan+0x1ec>)
 801d9fc:	492c      	ldr	r1, [pc, #176]	@ (801dab0 <atan+0x1f0>)
 801d9fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801da02:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801da06:	ed93 5b00 	vldr	d5, [r3]
 801da0a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801da0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801da12:	ed92 7b00 	vldr	d7, [r2]
 801da16:	2d00      	cmp	r5, #0
 801da18:	ee37 7b46 	vsub.f64	d7, d7, d6
 801da1c:	bfb8      	it	lt
 801da1e:	eeb1 7b47 	vneglt.f64	d7, d7
 801da22:	e760      	b.n	801d8e6 <atan+0x26>
 801da24:	f3af 8000 	nop.w
 801da28:	54442d18 	.word	0x54442d18
 801da2c:	bff921fb 	.word	0xbff921fb
 801da30:	54442d18 	.word	0x54442d18
 801da34:	3ff921fb 	.word	0x3ff921fb
 801da38:	8800759c 	.word	0x8800759c
 801da3c:	7e37e43c 	.word	0x7e37e43c
 801da40:	e322da11 	.word	0xe322da11
 801da44:	3f90ad3a 	.word	0x3f90ad3a
 801da48:	24760deb 	.word	0x24760deb
 801da4c:	3fa97b4b 	.word	0x3fa97b4b
 801da50:	a0d03d51 	.word	0xa0d03d51
 801da54:	3fb10d66 	.word	0x3fb10d66
 801da58:	c54c206e 	.word	0xc54c206e
 801da5c:	3fb745cd 	.word	0x3fb745cd
 801da60:	920083ff 	.word	0x920083ff
 801da64:	3fc24924 	.word	0x3fc24924
 801da68:	5555550d 	.word	0x5555550d
 801da6c:	3fd55555 	.word	0x3fd55555
 801da70:	52defd9a 	.word	0x52defd9a
 801da74:	bfadde2d 	.word	0xbfadde2d
 801da78:	2c6a6c2f 	.word	0x2c6a6c2f
 801da7c:	bfa2b444 	.word	0xbfa2b444
 801da80:	af749a6d 	.word	0xaf749a6d
 801da84:	bfb3b0f2 	.word	0xbfb3b0f2
 801da88:	fe231671 	.word	0xfe231671
 801da8c:	bfbc71c6 	.word	0xbfbc71c6
 801da90:	9998ebc4 	.word	0x9998ebc4
 801da94:	bfc99999 	.word	0xbfc99999
 801da98:	440fffff 	.word	0x440fffff
 801da9c:	7ff00000 	.word	0x7ff00000
 801daa0:	3fdbffff 	.word	0x3fdbffff
 801daa4:	3ff2ffff 	.word	0x3ff2ffff
 801daa8:	40038000 	.word	0x40038000
 801daac:	0801e770 	.word	0x0801e770
 801dab0:	0801e750 	.word	0x0801e750

0801dab4 <fabs>:
 801dab4:	ec51 0b10 	vmov	r0, r1, d0
 801dab8:	4602      	mov	r2, r0
 801daba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801dabe:	ec43 2b10 	vmov	d0, r2, r3
 801dac2:	4770      	bx	lr

0801dac4 <checkint>:
 801dac4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801dac8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801dacc:	429a      	cmp	r2, r3
 801dace:	b570      	push	{r4, r5, r6, lr}
 801dad0:	dd2a      	ble.n	801db28 <checkint+0x64>
 801dad2:	f240 4333 	movw	r3, #1075	@ 0x433
 801dad6:	429a      	cmp	r2, r3
 801dad8:	dc24      	bgt.n	801db24 <checkint+0x60>
 801dada:	1a9b      	subs	r3, r3, r2
 801dadc:	f1a3 0620 	sub.w	r6, r3, #32
 801dae0:	f04f 32ff 	mov.w	r2, #4294967295
 801dae4:	fa02 f403 	lsl.w	r4, r2, r3
 801dae8:	fa02 f606 	lsl.w	r6, r2, r6
 801daec:	f1c3 0520 	rsb	r5, r3, #32
 801daf0:	fa22 f505 	lsr.w	r5, r2, r5
 801daf4:	4334      	orrs	r4, r6
 801daf6:	432c      	orrs	r4, r5
 801daf8:	409a      	lsls	r2, r3
 801dafa:	ea20 0202 	bic.w	r2, r0, r2
 801dafe:	ea21 0404 	bic.w	r4, r1, r4
 801db02:	4322      	orrs	r2, r4
 801db04:	f1a3 0420 	sub.w	r4, r3, #32
 801db08:	f1c3 0220 	rsb	r2, r3, #32
 801db0c:	d10c      	bne.n	801db28 <checkint+0x64>
 801db0e:	40d8      	lsrs	r0, r3
 801db10:	fa01 f302 	lsl.w	r3, r1, r2
 801db14:	4318      	orrs	r0, r3
 801db16:	40e1      	lsrs	r1, r4
 801db18:	4308      	orrs	r0, r1
 801db1a:	f000 0001 	and.w	r0, r0, #1
 801db1e:	f1d0 0002 	rsbs	r0, r0, #2
 801db22:	bd70      	pop	{r4, r5, r6, pc}
 801db24:	2002      	movs	r0, #2
 801db26:	e7fc      	b.n	801db22 <checkint+0x5e>
 801db28:	2000      	movs	r0, #0
 801db2a:	e7fa      	b.n	801db22 <checkint+0x5e>
 801db2c:	0000      	movs	r0, r0
	...

0801db30 <pow>:
 801db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db34:	ee10 4a90 	vmov	r4, s1
 801db38:	ed2d 8b0a 	vpush	{d8-d12}
 801db3c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801db40:	ee11 aa90 	vmov	sl, s3
 801db44:	f108 32ff 	add.w	r2, r8, #4294967295
 801db48:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801db4c:	429a      	cmp	r2, r3
 801db4e:	ee10 5a10 	vmov	r5, s0
 801db52:	ee11 0a10 	vmov	r0, s2
 801db56:	b087      	sub	sp, #28
 801db58:	46c4      	mov	ip, r8
 801db5a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801db5e:	d806      	bhi.n	801db6e <pow+0x3e>
 801db60:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801db64:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801db68:	2b7f      	cmp	r3, #127	@ 0x7f
 801db6a:	f240 8157 	bls.w	801de1c <pow+0x2ec>
 801db6e:	1802      	adds	r2, r0, r0
 801db70:	eb4a 010a 	adc.w	r1, sl, sl
 801db74:	f06f 0b01 	mvn.w	fp, #1
 801db78:	1e57      	subs	r7, r2, #1
 801db7a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801db7e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801db82:	45bb      	cmp	fp, r7
 801db84:	eb7e 0303 	sbcs.w	r3, lr, r3
 801db88:	d242      	bcs.n	801dc10 <pow+0xe0>
 801db8a:	ea52 0301 	orrs.w	r3, r2, r1
 801db8e:	f04f 0300 	mov.w	r3, #0
 801db92:	d10c      	bne.n	801dbae <pow+0x7e>
 801db94:	196d      	adds	r5, r5, r5
 801db96:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801db9a:	4164      	adcs	r4, r4
 801db9c:	42ab      	cmp	r3, r5
 801db9e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801dba2:	41a3      	sbcs	r3, r4
 801dba4:	f0c0 808f 	bcc.w	801dcc6 <pow+0x196>
 801dba8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dbac:	e02b      	b.n	801dc06 <pow+0xd6>
 801dbae:	4ed4      	ldr	r6, [pc, #848]	@ (801df00 <pow+0x3d0>)
 801dbb0:	42b4      	cmp	r4, r6
 801dbb2:	bf08      	it	eq
 801dbb4:	429d      	cmpeq	r5, r3
 801dbb6:	d109      	bne.n	801dbcc <pow+0x9c>
 801dbb8:	1800      	adds	r0, r0, r0
 801dbba:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801dbbe:	eb4a 0a0a 	adc.w	sl, sl, sl
 801dbc2:	4283      	cmp	r3, r0
 801dbc4:	4bcf      	ldr	r3, [pc, #828]	@ (801df04 <pow+0x3d4>)
 801dbc6:	eb73 030a 	sbcs.w	r3, r3, sl
 801dbca:	e7eb      	b.n	801dba4 <pow+0x74>
 801dbcc:	196d      	adds	r5, r5, r5
 801dbce:	48ce      	ldr	r0, [pc, #824]	@ (801df08 <pow+0x3d8>)
 801dbd0:	4164      	adcs	r4, r4
 801dbd2:	42ab      	cmp	r3, r5
 801dbd4:	eb70 0604 	sbcs.w	r6, r0, r4
 801dbd8:	d375      	bcc.n	801dcc6 <pow+0x196>
 801dbda:	4281      	cmp	r1, r0
 801dbdc:	bf08      	it	eq
 801dbde:	429a      	cmpeq	r2, r3
 801dbe0:	d171      	bne.n	801dcc6 <pow+0x196>
 801dbe2:	4aca      	ldr	r2, [pc, #808]	@ (801df0c <pow+0x3dc>)
 801dbe4:	4294      	cmp	r4, r2
 801dbe6:	bf08      	it	eq
 801dbe8:	429d      	cmpeq	r5, r3
 801dbea:	d0dd      	beq.n	801dba8 <pow+0x78>
 801dbec:	4294      	cmp	r4, r2
 801dbee:	ea6f 0a0a 	mvn.w	sl, sl
 801dbf2:	bf34      	ite	cc
 801dbf4:	2400      	movcc	r4, #0
 801dbf6:	2401      	movcs	r4, #1
 801dbf8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801dbfc:	4554      	cmp	r4, sl
 801dbfe:	f040 81dc 	bne.w	801dfba <pow+0x48a>
 801dc02:	ee21 0b01 	vmul.f64	d0, d1, d1
 801dc06:	b007      	add	sp, #28
 801dc08:	ecbd 8b0a 	vpop	{d8-d12}
 801dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc10:	196f      	adds	r7, r5, r5
 801dc12:	eb44 0904 	adc.w	r9, r4, r4
 801dc16:	1e7a      	subs	r2, r7, #1
 801dc18:	f169 0300 	sbc.w	r3, r9, #0
 801dc1c:	4593      	cmp	fp, r2
 801dc1e:	eb7e 0303 	sbcs.w	r3, lr, r3
 801dc22:	d225      	bcs.n	801dc70 <pow+0x140>
 801dc24:	ee20 0b00 	vmul.f64	d0, d0, d0
 801dc28:	2c00      	cmp	r4, #0
 801dc2a:	da13      	bge.n	801dc54 <pow+0x124>
 801dc2c:	4651      	mov	r1, sl
 801dc2e:	f7ff ff49 	bl	801dac4 <checkint>
 801dc32:	2801      	cmp	r0, #1
 801dc34:	d10e      	bne.n	801dc54 <pow+0x124>
 801dc36:	eeb1 0b40 	vneg.f64	d0, d0
 801dc3a:	ea57 0909 	orrs.w	r9, r7, r9
 801dc3e:	d10b      	bne.n	801dc58 <pow+0x128>
 801dc40:	f1ba 0f00 	cmp.w	sl, #0
 801dc44:	dadf      	bge.n	801dc06 <pow+0xd6>
 801dc46:	b007      	add	sp, #28
 801dc48:	ecbd 8b0a 	vpop	{d8-d12}
 801dc4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc50:	f000 bab6 	b.w	801e1c0 <__math_divzero>
 801dc54:	2000      	movs	r0, #0
 801dc56:	e7f0      	b.n	801dc3a <pow+0x10a>
 801dc58:	f1ba 0f00 	cmp.w	sl, #0
 801dc5c:	dad3      	bge.n	801dc06 <pow+0xd6>
 801dc5e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dc62:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801dc66:	ed8d 7b00 	vstr	d7, [sp]
 801dc6a:	ed9d 0b00 	vldr	d0, [sp]
 801dc6e:	e7ca      	b.n	801dc06 <pow+0xd6>
 801dc70:	2c00      	cmp	r4, #0
 801dc72:	da2b      	bge.n	801dccc <pow+0x19c>
 801dc74:	4651      	mov	r1, sl
 801dc76:	f7ff ff25 	bl	801dac4 <checkint>
 801dc7a:	b930      	cbnz	r0, 801dc8a <pow+0x15a>
 801dc7c:	b007      	add	sp, #28
 801dc7e:	ecbd 8b0a 	vpop	{d8-d12}
 801dc82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc86:	f000 bab3 	b.w	801e1f0 <__math_invalid>
 801dc8a:	1e41      	subs	r1, r0, #1
 801dc8c:	4248      	negs	r0, r1
 801dc8e:	4148      	adcs	r0, r1
 801dc90:	0480      	lsls	r0, r0, #18
 801dc92:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801dc96:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801dc9a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801dc9e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801dca2:	2b7f      	cmp	r3, #127	@ 0x7f
 801dca4:	d92d      	bls.n	801dd02 <pow+0x1d2>
 801dca6:	4b96      	ldr	r3, [pc, #600]	@ (801df00 <pow+0x3d0>)
 801dca8:	2000      	movs	r0, #0
 801dcaa:	429c      	cmp	r4, r3
 801dcac:	bf08      	it	eq
 801dcae:	4285      	cmpeq	r5, r0
 801dcb0:	f43f af7a 	beq.w	801dba8 <pow+0x78>
 801dcb4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801dcb8:	428a      	cmp	r2, r1
 801dcba:	d80c      	bhi.n	801dcd6 <pow+0x1a6>
 801dcbc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dcc0:	42a8      	cmp	r0, r5
 801dcc2:	41a3      	sbcs	r3, r4
 801dcc4:	d204      	bcs.n	801dcd0 <pow+0x1a0>
 801dcc6:	ee31 0b00 	vadd.f64	d0, d1, d0
 801dcca:	e79c      	b.n	801dc06 <pow+0xd6>
 801dccc:	2000      	movs	r0, #0
 801dcce:	e7e4      	b.n	801dc9a <pow+0x16a>
 801dcd0:	ee30 0b41 	vsub.f64	d0, d0, d1
 801dcd4:	e797      	b.n	801dc06 <pow+0xd6>
 801dcd6:	2d01      	cmp	r5, #1
 801dcd8:	eb74 0303 	sbcs.w	r3, r4, r3
 801dcdc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801dce0:	bf34      	ite	cc
 801dce2:	2301      	movcc	r3, #1
 801dce4:	2300      	movcs	r3, #0
 801dce6:	4296      	cmp	r6, r2
 801dce8:	bf8c      	ite	hi
 801dcea:	2600      	movhi	r6, #0
 801dcec:	2601      	movls	r6, #1
 801dcee:	42b3      	cmp	r3, r6
 801dcf0:	f000 809c 	beq.w	801de2c <pow+0x2fc>
 801dcf4:	b007      	add	sp, #28
 801dcf6:	ecbd 8b0a 	vpop	{d8-d12}
 801dcfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcfe:	f000 ba57 	b.w	801e1b0 <__math_oflow>
 801dd02:	f1bc 0f00 	cmp.w	ip, #0
 801dd06:	d10a      	bne.n	801dd1e <pow+0x1ee>
 801dd08:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801def0 <pow+0x3c0>
 801dd0c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801dd10:	ec53 2b17 	vmov	r2, r3, d7
 801dd14:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801dd18:	4615      	mov	r5, r2
 801dd1a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801dd1e:	4a7c      	ldr	r2, [pc, #496]	@ (801df10 <pow+0x3e0>)
 801dd20:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801dd24:	4422      	add	r2, r4
 801dd26:	1513      	asrs	r3, r2, #20
 801dd28:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801dd2c:	ee03 3a10 	vmov	s6, r3
 801dd30:	0d12      	lsrs	r2, r2, #20
 801dd32:	4b78      	ldr	r3, [pc, #480]	@ (801df14 <pow+0x3e4>)
 801dd34:	0512      	lsls	r2, r2, #20
 801dd36:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801dd3a:	1aa7      	subs	r7, r4, r2
 801dd3c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801dd40:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801dd44:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801dd48:	1e2e      	subs	r6, r5, #0
 801dd4a:	ec47 6b14 	vmov	d4, r6, r7
 801dd4e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801dd52:	eea4 6b05 	vfma.f64	d6, d4, d5
 801dd56:	ed93 5b00 	vldr	d5, [r3]
 801dd5a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801dd5e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801dd62:	ed93 5b02 	vldr	d5, [r3, #8]
 801dd66:	ee36 4b02 	vadd.f64	d4, d6, d2
 801dd6a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801dd6e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801dd72:	ed93 5b04 	vldr	d5, [r3, #16]
 801dd76:	ee32 2b06 	vadd.f64	d2, d2, d6
 801dd7a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801dd7e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801dd82:	ee26 0b05 	vmul.f64	d0, d6, d5
 801dd86:	ee34 8b00 	vadd.f64	d8, d4, d0
 801dd8a:	eeb0 9b40 	vmov.f64	d9, d0
 801dd8e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801dd92:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801dd96:	ee34 ab00 	vadd.f64	d10, d4, d0
 801dd9a:	ed93 5b06 	vldr	d5, [r3, #24]
 801dd9e:	ee26 bb00 	vmul.f64	d11, d6, d0
 801dda2:	ee37 7b09 	vadd.f64	d7, d7, d9
 801dda6:	ed93 4b08 	vldr	d4, [r3, #32]
 801ddaa:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801ddae:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801ddb2:	eea6 5b04 	vfma.f64	d5, d6, d4
 801ddb6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801ddba:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801ddbe:	eea6 4b03 	vfma.f64	d4, d6, d3
 801ddc2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801ddc6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801ddca:	eea0 4b03 	vfma.f64	d4, d0, d3
 801ddce:	eea0 5b04 	vfma.f64	d5, d0, d4
 801ddd2:	eeab 7b05 	vfma.f64	d7, d11, d5
 801ddd6:	ee38 4b07 	vadd.f64	d4, d8, d7
 801ddda:	ee21 6b04 	vmul.f64	d6, d1, d4
 801ddde:	ee16 3a90 	vmov	r3, s13
 801dde2:	eeb0 5b46 	vmov.f64	d5, d6
 801dde6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801ddea:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801ddee:	18b2      	adds	r2, r6, r2
 801ddf0:	2a3e      	cmp	r2, #62	@ 0x3e
 801ddf2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801ddf6:	ee38 8b44 	vsub.f64	d8, d8, d4
 801ddfa:	ee38 8b07 	vadd.f64	d8, d8, d7
 801ddfe:	eea1 5b08 	vfma.f64	d5, d1, d8
 801de02:	d91b      	bls.n	801de3c <pow+0x30c>
 801de04:	2a00      	cmp	r2, #0
 801de06:	da0b      	bge.n	801de20 <pow+0x2f0>
 801de08:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801de0c:	ee36 0b00 	vadd.f64	d0, d6, d0
 801de10:	2800      	cmp	r0, #0
 801de12:	f43f aef8 	beq.w	801dc06 <pow+0xd6>
 801de16:	eeb1 0b40 	vneg.f64	d0, d0
 801de1a:	e6f4      	b.n	801dc06 <pow+0xd6>
 801de1c:	2000      	movs	r0, #0
 801de1e:	e77e      	b.n	801dd1e <pow+0x1ee>
 801de20:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801de24:	d909      	bls.n	801de3a <pow+0x30a>
 801de26:	2b00      	cmp	r3, #0
 801de28:	f6bf af64 	bge.w	801dcf4 <pow+0x1c4>
 801de2c:	b007      	add	sp, #28
 801de2e:	ecbd 8b0a 	vpop	{d8-d12}
 801de32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de36:	f000 b9b3 	b.w	801e1a0 <__math_uflow>
 801de3a:	2600      	movs	r6, #0
 801de3c:	4936      	ldr	r1, [pc, #216]	@ (801df18 <pow+0x3e8>)
 801de3e:	ed91 4b02 	vldr	d4, [r1, #8]
 801de42:	ed91 3b00 	vldr	d3, [r1]
 801de46:	eeb0 7b44 	vmov.f64	d7, d4
 801de4a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801de4e:	ee17 5a10 	vmov	r5, s14
 801de52:	ee37 7b44 	vsub.f64	d7, d7, d4
 801de56:	ed91 4b04 	vldr	d4, [r1, #16]
 801de5a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801de5e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801de62:	ed91 4b06 	vldr	d4, [r1, #24]
 801de66:	18dc      	adds	r4, r3, r3
 801de68:	f104 030f 	add.w	r3, r4, #15
 801de6c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801de70:	eea7 6b04 	vfma.f64	d6, d7, d4
 801de74:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801de78:	ee35 5b06 	vadd.f64	d5, d5, d6
 801de7c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801de80:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801de84:	ed91 4b08 	vldr	d4, [r1, #32]
 801de88:	ee35 7b07 	vadd.f64	d7, d5, d7
 801de8c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801de90:	eea5 4b03 	vfma.f64	d4, d5, d3
 801de94:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801de98:	eea6 7b04 	vfma.f64	d7, d6, d4
 801de9c:	ee26 6b06 	vmul.f64	d6, d6, d6
 801dea0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801dea4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801dea8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801deac:	eea5 4b03 	vfma.f64	d4, d5, d3
 801deb0:	1940      	adds	r0, r0, r5
 801deb2:	2700      	movs	r7, #0
 801deb4:	eb17 020c 	adds.w	r2, r7, ip
 801deb8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801debc:	eea6 7b04 	vfma.f64	d7, d6, d4
 801dec0:	2e00      	cmp	r6, #0
 801dec2:	d175      	bne.n	801dfb0 <pow+0x480>
 801dec4:	42bd      	cmp	r5, r7
 801dec6:	db29      	blt.n	801df1c <pow+0x3ec>
 801dec8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801decc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801ded0:	4610      	mov	r0, r2
 801ded2:	ec41 0b10 	vmov	d0, r0, r1
 801ded6:	eea7 0b00 	vfma.f64	d0, d7, d0
 801deda:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801def8 <pow+0x3c8>
 801dede:	ee20 0b07 	vmul.f64	d0, d0, d7
 801dee2:	b007      	add	sp, #28
 801dee4:	ecbd 8b0a 	vpop	{d8-d12}
 801dee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deec:	f000 b998 	b.w	801e220 <__math_check_oflow>
 801def0:	00000000 	.word	0x00000000
 801def4:	43300000 	.word	0x43300000
 801def8:	00000000 	.word	0x00000000
 801defc:	7f000000 	.word	0x7f000000
 801df00:	3ff00000 	.word	0x3ff00000
 801df04:	fff00000 	.word	0xfff00000
 801df08:	ffe00000 	.word	0xffe00000
 801df0c:	7fe00000 	.word	0x7fe00000
 801df10:	c0196aab 	.word	0xc0196aab
 801df14:	0801e790 	.word	0x0801e790
 801df18:	0801f808 	.word	0x0801f808
 801df1c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801df20:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801df24:	4610      	mov	r0, r2
 801df26:	ec41 0b15 	vmov	d5, r0, r1
 801df2a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801df2e:	ee27 6b05 	vmul.f64	d6, d7, d5
 801df32:	ee35 7b06 	vadd.f64	d7, d5, d6
 801df36:	eeb0 4bc7 	vabs.f64	d4, d7
 801df3a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801df3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df42:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801dfc0 <pow+0x490>
 801df46:	d52a      	bpl.n	801df9e <pow+0x46e>
 801df48:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801df4c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801df50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df54:	ee35 5b06 	vadd.f64	d5, d5, d6
 801df58:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801df5c:	bf58      	it	pl
 801df5e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801df62:	ee37 3b04 	vadd.f64	d3, d7, d4
 801df66:	ee34 6b43 	vsub.f64	d6, d4, d3
 801df6a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801df6e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801df72:	ee36 6b03 	vadd.f64	d6, d6, d3
 801df76:	ee36 7b44 	vsub.f64	d7, d6, d4
 801df7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801df7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df82:	d104      	bne.n	801df8e <pow+0x45e>
 801df84:	4632      	mov	r2, r6
 801df86:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801df8a:	ec43 2b17 	vmov	d7, r2, r3
 801df8e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801df92:	ed9d 6b02 	vldr	d6, [sp, #8]
 801df96:	ee26 6b00 	vmul.f64	d6, d6, d0
 801df9a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801df9e:	ee27 0b00 	vmul.f64	d0, d7, d0
 801dfa2:	b007      	add	sp, #28
 801dfa4:	ecbd 8b0a 	vpop	{d8-d12}
 801dfa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfac:	f000 b92f 	b.w	801e20e <__math_check_uflow>
 801dfb0:	ec43 2b10 	vmov	d0, r2, r3
 801dfb4:	eea7 0b00 	vfma.f64	d0, d7, d0
 801dfb8:	e625      	b.n	801dc06 <pow+0xd6>
 801dfba:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801dfc8 <pow+0x498>
 801dfbe:	e622      	b.n	801dc06 <pow+0xd6>
 801dfc0:	00000000 	.word	0x00000000
 801dfc4:	00100000 	.word	0x00100000
	...

0801dfd0 <__ieee754_sqrt>:
 801dfd0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801dfd4:	4770      	bx	lr
	...

0801dfd8 <__ieee754_atan2>:
 801dfd8:	ee11 1a10 	vmov	r1, s2
 801dfdc:	eeb0 7b40 	vmov.f64	d7, d0
 801dfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfe2:	ee11 5a90 	vmov	r5, s3
 801dfe6:	424b      	negs	r3, r1
 801dfe8:	4f59      	ldr	r7, [pc, #356]	@ (801e150 <__ieee754_atan2+0x178>)
 801dfea:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801dfee:	430b      	orrs	r3, r1
 801dff0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801dff4:	42bb      	cmp	r3, r7
 801dff6:	d80d      	bhi.n	801e014 <__ieee754_atan2+0x3c>
 801dff8:	ee10 ca10 	vmov	ip, s0
 801dffc:	ee17 6a90 	vmov	r6, s15
 801e000:	f1cc 0000 	rsb	r0, ip, #0
 801e004:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e008:	ea40 000c 	orr.w	r0, r0, ip
 801e00c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e010:	42b8      	cmp	r0, r7
 801e012:	d904      	bls.n	801e01e <__ieee754_atan2+0x46>
 801e014:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e018:	eeb0 0b47 	vmov.f64	d0, d7
 801e01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e01e:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e022:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e026:	4308      	orrs	r0, r1
 801e028:	d103      	bne.n	801e032 <__ieee754_atan2+0x5a>
 801e02a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e02e:	f7ff bc47 	b.w	801d8c0 <atan>
 801e032:	17ac      	asrs	r4, r5, #30
 801e034:	f004 0402 	and.w	r4, r4, #2
 801e038:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e03c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e040:	d107      	bne.n	801e052 <__ieee754_atan2+0x7a>
 801e042:	2c02      	cmp	r4, #2
 801e044:	d05c      	beq.n	801e100 <__ieee754_atan2+0x128>
 801e046:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e118 <__ieee754_atan2+0x140>
 801e04a:	2c03      	cmp	r4, #3
 801e04c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e050:	e7e2      	b.n	801e018 <__ieee754_atan2+0x40>
 801e052:	4311      	orrs	r1, r2
 801e054:	d107      	bne.n	801e066 <__ieee754_atan2+0x8e>
 801e056:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e120 <__ieee754_atan2+0x148>
 801e05a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e128 <__ieee754_atan2+0x150>
 801e05e:	2e00      	cmp	r6, #0
 801e060:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e064:	e7d8      	b.n	801e018 <__ieee754_atan2+0x40>
 801e066:	42ba      	cmp	r2, r7
 801e068:	d10f      	bne.n	801e08a <__ieee754_atan2+0xb2>
 801e06a:	4293      	cmp	r3, r2
 801e06c:	f104 34ff 	add.w	r4, r4, #4294967295
 801e070:	d107      	bne.n	801e082 <__ieee754_atan2+0xaa>
 801e072:	2c02      	cmp	r4, #2
 801e074:	d847      	bhi.n	801e106 <__ieee754_atan2+0x12e>
 801e076:	4b37      	ldr	r3, [pc, #220]	@ (801e154 <__ieee754_atan2+0x17c>)
 801e078:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e07c:	ed93 7b00 	vldr	d7, [r3]
 801e080:	e7ca      	b.n	801e018 <__ieee754_atan2+0x40>
 801e082:	2c02      	cmp	r4, #2
 801e084:	d842      	bhi.n	801e10c <__ieee754_atan2+0x134>
 801e086:	4b34      	ldr	r3, [pc, #208]	@ (801e158 <__ieee754_atan2+0x180>)
 801e088:	e7f6      	b.n	801e078 <__ieee754_atan2+0xa0>
 801e08a:	42bb      	cmp	r3, r7
 801e08c:	d0e3      	beq.n	801e056 <__ieee754_atan2+0x7e>
 801e08e:	1a9b      	subs	r3, r3, r2
 801e090:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e094:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e098:	da1a      	bge.n	801e0d0 <__ieee754_atan2+0xf8>
 801e09a:	2d00      	cmp	r5, #0
 801e09c:	da01      	bge.n	801e0a2 <__ieee754_atan2+0xca>
 801e09e:	323c      	adds	r2, #60	@ 0x3c
 801e0a0:	db19      	blt.n	801e0d6 <__ieee754_atan2+0xfe>
 801e0a2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e0a6:	f7ff fd05 	bl	801dab4 <fabs>
 801e0aa:	f7ff fc09 	bl	801d8c0 <atan>
 801e0ae:	eeb0 7b40 	vmov.f64	d7, d0
 801e0b2:	2c01      	cmp	r4, #1
 801e0b4:	d012      	beq.n	801e0dc <__ieee754_atan2+0x104>
 801e0b6:	2c02      	cmp	r4, #2
 801e0b8:	d019      	beq.n	801e0ee <__ieee754_atan2+0x116>
 801e0ba:	2c00      	cmp	r4, #0
 801e0bc:	d0ac      	beq.n	801e018 <__ieee754_atan2+0x40>
 801e0be:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e130 <__ieee754_atan2+0x158>
 801e0c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e0c6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e138 <__ieee754_atan2+0x160>
 801e0ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e0ce:	e7a3      	b.n	801e018 <__ieee754_atan2+0x40>
 801e0d0:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e120 <__ieee754_atan2+0x148>
 801e0d4:	e7ed      	b.n	801e0b2 <__ieee754_atan2+0xda>
 801e0d6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e140 <__ieee754_atan2+0x168>
 801e0da:	e7ea      	b.n	801e0b2 <__ieee754_atan2+0xda>
 801e0dc:	ee17 1a90 	vmov	r1, s15
 801e0e0:	ec53 2b17 	vmov	r2, r3, d7
 801e0e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e0e8:	ec43 2b17 	vmov	d7, r2, r3
 801e0ec:	e794      	b.n	801e018 <__ieee754_atan2+0x40>
 801e0ee:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e130 <__ieee754_atan2+0x158>
 801e0f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e0f6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e138 <__ieee754_atan2+0x160>
 801e0fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e0fe:	e78b      	b.n	801e018 <__ieee754_atan2+0x40>
 801e100:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e138 <__ieee754_atan2+0x160>
 801e104:	e788      	b.n	801e018 <__ieee754_atan2+0x40>
 801e106:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e148 <__ieee754_atan2+0x170>
 801e10a:	e785      	b.n	801e018 <__ieee754_atan2+0x40>
 801e10c:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e140 <__ieee754_atan2+0x168>
 801e110:	e782      	b.n	801e018 <__ieee754_atan2+0x40>
 801e112:	bf00      	nop
 801e114:	f3af 8000 	nop.w
 801e118:	54442d18 	.word	0x54442d18
 801e11c:	c00921fb 	.word	0xc00921fb
 801e120:	54442d18 	.word	0x54442d18
 801e124:	3ff921fb 	.word	0x3ff921fb
 801e128:	54442d18 	.word	0x54442d18
 801e12c:	bff921fb 	.word	0xbff921fb
 801e130:	33145c07 	.word	0x33145c07
 801e134:	3ca1a626 	.word	0x3ca1a626
 801e138:	54442d18 	.word	0x54442d18
 801e13c:	400921fb 	.word	0x400921fb
	...
 801e148:	54442d18 	.word	0x54442d18
 801e14c:	3fe921fb 	.word	0x3fe921fb
 801e150:	7ff00000 	.word	0x7ff00000
 801e154:	0801f7f0 	.word	0x0801f7f0
 801e158:	0801f7d8 	.word	0x0801f7d8

0801e15c <with_errno>:
 801e15c:	b510      	push	{r4, lr}
 801e15e:	ed2d 8b02 	vpush	{d8}
 801e162:	eeb0 8b40 	vmov.f64	d8, d0
 801e166:	4604      	mov	r4, r0
 801e168:	f7ff fb50 	bl	801d80c <__errno>
 801e16c:	eeb0 0b48 	vmov.f64	d0, d8
 801e170:	ecbd 8b02 	vpop	{d8}
 801e174:	6004      	str	r4, [r0, #0]
 801e176:	bd10      	pop	{r4, pc}

0801e178 <xflow>:
 801e178:	b082      	sub	sp, #8
 801e17a:	b158      	cbz	r0, 801e194 <xflow+0x1c>
 801e17c:	eeb1 7b40 	vneg.f64	d7, d0
 801e180:	ed8d 7b00 	vstr	d7, [sp]
 801e184:	ed9d 7b00 	vldr	d7, [sp]
 801e188:	2022      	movs	r0, #34	@ 0x22
 801e18a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e18e:	b002      	add	sp, #8
 801e190:	f7ff bfe4 	b.w	801e15c <with_errno>
 801e194:	eeb0 7b40 	vmov.f64	d7, d0
 801e198:	e7f2      	b.n	801e180 <xflow+0x8>
 801e19a:	0000      	movs	r0, r0
 801e19c:	0000      	movs	r0, r0
	...

0801e1a0 <__math_uflow>:
 801e1a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e1a8 <__math_uflow+0x8>
 801e1a4:	f7ff bfe8 	b.w	801e178 <xflow>
 801e1a8:	00000000 	.word	0x00000000
 801e1ac:	10000000 	.word	0x10000000

0801e1b0 <__math_oflow>:
 801e1b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e1b8 <__math_oflow+0x8>
 801e1b4:	f7ff bfe0 	b.w	801e178 <xflow>
 801e1b8:	00000000 	.word	0x00000000
 801e1bc:	70000000 	.word	0x70000000

0801e1c0 <__math_divzero>:
 801e1c0:	b082      	sub	sp, #8
 801e1c2:	2800      	cmp	r0, #0
 801e1c4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e1c8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e1cc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e1d0:	ed8d 7b00 	vstr	d7, [sp]
 801e1d4:	ed9d 0b00 	vldr	d0, [sp]
 801e1d8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e1e8 <__math_divzero+0x28>
 801e1dc:	2022      	movs	r0, #34	@ 0x22
 801e1de:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e1e2:	b002      	add	sp, #8
 801e1e4:	f7ff bfba 	b.w	801e15c <with_errno>
	...

0801e1f0 <__math_invalid>:
 801e1f0:	eeb0 7b40 	vmov.f64	d7, d0
 801e1f4:	eeb4 7b47 	vcmp.f64	d7, d7
 801e1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1fc:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e200:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e204:	d602      	bvs.n	801e20c <__math_invalid+0x1c>
 801e206:	2021      	movs	r0, #33	@ 0x21
 801e208:	f7ff bfa8 	b.w	801e15c <with_errno>
 801e20c:	4770      	bx	lr

0801e20e <__math_check_uflow>:
 801e20e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e216:	d102      	bne.n	801e21e <__math_check_uflow+0x10>
 801e218:	2022      	movs	r0, #34	@ 0x22
 801e21a:	f7ff bf9f 	b.w	801e15c <with_errno>
 801e21e:	4770      	bx	lr

0801e220 <__math_check_oflow>:
 801e220:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e240 <__math_check_oflow+0x20>
 801e224:	eeb0 7bc0 	vabs.f64	d7, d0
 801e228:	eeb4 7b46 	vcmp.f64	d7, d6
 801e22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e230:	dd02      	ble.n	801e238 <__math_check_oflow+0x18>
 801e232:	2022      	movs	r0, #34	@ 0x22
 801e234:	f7ff bf92 	b.w	801e15c <with_errno>
 801e238:	4770      	bx	lr
 801e23a:	bf00      	nop
 801e23c:	f3af 8000 	nop.w
 801e240:	ffffffff 	.word	0xffffffff
 801e244:	7fefffff 	.word	0x7fefffff

0801e248 <_init>:
 801e248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e24a:	bf00      	nop
 801e24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e24e:	bc08      	pop	{r3}
 801e250:	469e      	mov	lr, r3
 801e252:	4770      	bx	lr

0801e254 <_fini>:
 801e254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e256:	bf00      	nop
 801e258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e25a:	bc08      	pop	{r3}
 801e25c:	469e      	mov	lr, r3
 801e25e:	4770      	bx	lr
